// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_credentials.steamclient.proto

#include "steammessages_credentials.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fcredentials_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CCredentials_GetSteamGuardDetails_Response_NewAuthentication_steammessages_5fcredentials_2esteamclient_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fcredentials_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CCredentials_GetSteamGuardDetails_Response_SessionData_steammessages_5fcredentials_2esteamclient_2eproto;
namespace proto {
namespace steam {
class CCredentials_TestAvailablePassword_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCredentials_TestAvailablePassword_Request> _instance;
} _CCredentials_TestAvailablePassword_Request_default_instance_;
class CCredentials_TestAvailablePassword_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCredentials_TestAvailablePassword_Response> _instance;
} _CCredentials_TestAvailablePassword_Response_default_instance_;
class CCredentials_GetSteamGuardDetails_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCredentials_GetSteamGuardDetails_Request> _instance;
} _CCredentials_GetSteamGuardDetails_Request_default_instance_;
class CCredentials_GetSteamGuardDetails_Response_NewAuthenticationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCredentials_GetSteamGuardDetails_Response_NewAuthentication> _instance;
} _CCredentials_GetSteamGuardDetails_Response_NewAuthentication_default_instance_;
class CCredentials_GetSteamGuardDetails_Response_SessionDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCredentials_GetSteamGuardDetails_Response_SessionData> _instance;
} _CCredentials_GetSteamGuardDetails_Response_SessionData_default_instance_;
class CCredentials_GetSteamGuardDetails_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCredentials_GetSteamGuardDetails_Response> _instance;
} _CCredentials_GetSteamGuardDetails_Response_default_instance_;
class CCredentials_NewMachineNotificationDialog_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCredentials_NewMachineNotificationDialog_Request> _instance;
} _CCredentials_NewMachineNotificationDialog_Request_default_instance_;
class CCredentials_NewMachineNotificationDialog_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCredentials_NewMachineNotificationDialog_Response> _instance;
} _CCredentials_NewMachineNotificationDialog_Response_default_instance_;
class CCredentials_ValidateEmailAddress_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCredentials_ValidateEmailAddress_Request> _instance;
} _CCredentials_ValidateEmailAddress_Request_default_instance_;
class CCredentials_ValidateEmailAddress_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCredentials_ValidateEmailAddress_Response> _instance;
} _CCredentials_ValidateEmailAddress_Response_default_instance_;
class CCredentials_SteamGuardPhishingReport_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCredentials_SteamGuardPhishingReport_Request> _instance;
} _CCredentials_SteamGuardPhishingReport_Request_default_instance_;
class CCredentials_SteamGuardPhishingReport_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCredentials_SteamGuardPhishingReport_Response> _instance;
} _CCredentials_SteamGuardPhishingReport_Response_default_instance_;
class CCredentials_LastCredentialChangeTime_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCredentials_LastCredentialChangeTime_Request> _instance;
} _CCredentials_LastCredentialChangeTime_Request_default_instance_;
class CCredentials_LastCredentialChangeTime_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCredentials_LastCredentialChangeTime_Response> _instance;
} _CCredentials_LastCredentialChangeTime_Response_default_instance_;
class CCredentials_GetAccountAuthSecret_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCredentials_GetAccountAuthSecret_Request> _instance;
} _CCredentials_GetAccountAuthSecret_Request_default_instance_;
class CCredentials_GetAccountAuthSecret_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCredentials_GetAccountAuthSecret_Response> _instance;
} _CCredentials_GetAccountAuthSecret_Response_default_instance_;
}  // namespace steam
}  // namespace proto
static void InitDefaultsCCredentials_TestAvailablePassword_Request_steammessages_5fcredentials_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CCredentials_TestAvailablePassword_Request_default_instance_;
    new (ptr) ::proto::steam::CCredentials_TestAvailablePassword_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CCredentials_TestAvailablePassword_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CCredentials_TestAvailablePassword_Request_steammessages_5fcredentials_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCCredentials_TestAvailablePassword_Request_steammessages_5fcredentials_2esteamclient_2eproto}, {}};

static void InitDefaultsCCredentials_TestAvailablePassword_Response_steammessages_5fcredentials_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CCredentials_TestAvailablePassword_Response_default_instance_;
    new (ptr) ::proto::steam::CCredentials_TestAvailablePassword_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CCredentials_TestAvailablePassword_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CCredentials_TestAvailablePassword_Response_steammessages_5fcredentials_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCCredentials_TestAvailablePassword_Response_steammessages_5fcredentials_2esteamclient_2eproto}, {}};

static void InitDefaultsCCredentials_GetSteamGuardDetails_Request_steammessages_5fcredentials_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CCredentials_GetSteamGuardDetails_Request_default_instance_;
    new (ptr) ::proto::steam::CCredentials_GetSteamGuardDetails_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CCredentials_GetSteamGuardDetails_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CCredentials_GetSteamGuardDetails_Request_steammessages_5fcredentials_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCCredentials_GetSteamGuardDetails_Request_steammessages_5fcredentials_2esteamclient_2eproto}, {}};

static void InitDefaultsCCredentials_GetSteamGuardDetails_Response_NewAuthentication_steammessages_5fcredentials_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CCredentials_GetSteamGuardDetails_Response_NewAuthentication_default_instance_;
    new (ptr) ::proto::steam::CCredentials_GetSteamGuardDetails_Response_NewAuthentication();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CCredentials_GetSteamGuardDetails_Response_NewAuthentication::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CCredentials_GetSteamGuardDetails_Response_NewAuthentication_steammessages_5fcredentials_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCCredentials_GetSteamGuardDetails_Response_NewAuthentication_steammessages_5fcredentials_2esteamclient_2eproto}, {}};

static void InitDefaultsCCredentials_GetSteamGuardDetails_Response_SessionData_steammessages_5fcredentials_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CCredentials_GetSteamGuardDetails_Response_SessionData_default_instance_;
    new (ptr) ::proto::steam::CCredentials_GetSteamGuardDetails_Response_SessionData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CCredentials_GetSteamGuardDetails_Response_SessionData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CCredentials_GetSteamGuardDetails_Response_SessionData_steammessages_5fcredentials_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCCredentials_GetSteamGuardDetails_Response_SessionData_steammessages_5fcredentials_2esteamclient_2eproto}, {
      &scc_info_CCredentials_GetSteamGuardDetails_Response_NewAuthentication_steammessages_5fcredentials_2esteamclient_2eproto.base,}};

static void InitDefaultsCCredentials_GetSteamGuardDetails_Response_steammessages_5fcredentials_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CCredentials_GetSteamGuardDetails_Response_default_instance_;
    new (ptr) ::proto::steam::CCredentials_GetSteamGuardDetails_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CCredentials_GetSteamGuardDetails_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CCredentials_GetSteamGuardDetails_Response_steammessages_5fcredentials_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCCredentials_GetSteamGuardDetails_Response_steammessages_5fcredentials_2esteamclient_2eproto}, {
      &scc_info_CCredentials_GetSteamGuardDetails_Response_NewAuthentication_steammessages_5fcredentials_2esteamclient_2eproto.base,
      &scc_info_CCredentials_GetSteamGuardDetails_Response_SessionData_steammessages_5fcredentials_2esteamclient_2eproto.base,}};

static void InitDefaultsCCredentials_NewMachineNotificationDialog_Request_steammessages_5fcredentials_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CCredentials_NewMachineNotificationDialog_Request_default_instance_;
    new (ptr) ::proto::steam::CCredentials_NewMachineNotificationDialog_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CCredentials_NewMachineNotificationDialog_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CCredentials_NewMachineNotificationDialog_Request_steammessages_5fcredentials_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCCredentials_NewMachineNotificationDialog_Request_steammessages_5fcredentials_2esteamclient_2eproto}, {}};

static void InitDefaultsCCredentials_NewMachineNotificationDialog_Response_steammessages_5fcredentials_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CCredentials_NewMachineNotificationDialog_Response_default_instance_;
    new (ptr) ::proto::steam::CCredentials_NewMachineNotificationDialog_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CCredentials_NewMachineNotificationDialog_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CCredentials_NewMachineNotificationDialog_Response_steammessages_5fcredentials_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCCredentials_NewMachineNotificationDialog_Response_steammessages_5fcredentials_2esteamclient_2eproto}, {}};

static void InitDefaultsCCredentials_ValidateEmailAddress_Request_steammessages_5fcredentials_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CCredentials_ValidateEmailAddress_Request_default_instance_;
    new (ptr) ::proto::steam::CCredentials_ValidateEmailAddress_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CCredentials_ValidateEmailAddress_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CCredentials_ValidateEmailAddress_Request_steammessages_5fcredentials_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCCredentials_ValidateEmailAddress_Request_steammessages_5fcredentials_2esteamclient_2eproto}, {}};

static void InitDefaultsCCredentials_ValidateEmailAddress_Response_steammessages_5fcredentials_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CCredentials_ValidateEmailAddress_Response_default_instance_;
    new (ptr) ::proto::steam::CCredentials_ValidateEmailAddress_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CCredentials_ValidateEmailAddress_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CCredentials_ValidateEmailAddress_Response_steammessages_5fcredentials_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCCredentials_ValidateEmailAddress_Response_steammessages_5fcredentials_2esteamclient_2eproto}, {}};

static void InitDefaultsCCredentials_SteamGuardPhishingReport_Request_steammessages_5fcredentials_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CCredentials_SteamGuardPhishingReport_Request_default_instance_;
    new (ptr) ::proto::steam::CCredentials_SteamGuardPhishingReport_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CCredentials_SteamGuardPhishingReport_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CCredentials_SteamGuardPhishingReport_Request_steammessages_5fcredentials_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCCredentials_SteamGuardPhishingReport_Request_steammessages_5fcredentials_2esteamclient_2eproto}, {}};

static void InitDefaultsCCredentials_SteamGuardPhishingReport_Response_steammessages_5fcredentials_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CCredentials_SteamGuardPhishingReport_Response_default_instance_;
    new (ptr) ::proto::steam::CCredentials_SteamGuardPhishingReport_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CCredentials_SteamGuardPhishingReport_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CCredentials_SteamGuardPhishingReport_Response_steammessages_5fcredentials_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCCredentials_SteamGuardPhishingReport_Response_steammessages_5fcredentials_2esteamclient_2eproto}, {}};

static void InitDefaultsCCredentials_LastCredentialChangeTime_Request_steammessages_5fcredentials_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CCredentials_LastCredentialChangeTime_Request_default_instance_;
    new (ptr) ::proto::steam::CCredentials_LastCredentialChangeTime_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CCredentials_LastCredentialChangeTime_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CCredentials_LastCredentialChangeTime_Request_steammessages_5fcredentials_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCCredentials_LastCredentialChangeTime_Request_steammessages_5fcredentials_2esteamclient_2eproto}, {}};

static void InitDefaultsCCredentials_LastCredentialChangeTime_Response_steammessages_5fcredentials_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CCredentials_LastCredentialChangeTime_Response_default_instance_;
    new (ptr) ::proto::steam::CCredentials_LastCredentialChangeTime_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CCredentials_LastCredentialChangeTime_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CCredentials_LastCredentialChangeTime_Response_steammessages_5fcredentials_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCCredentials_LastCredentialChangeTime_Response_steammessages_5fcredentials_2esteamclient_2eproto}, {}};

static void InitDefaultsCCredentials_GetAccountAuthSecret_Request_steammessages_5fcredentials_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CCredentials_GetAccountAuthSecret_Request_default_instance_;
    new (ptr) ::proto::steam::CCredentials_GetAccountAuthSecret_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CCredentials_GetAccountAuthSecret_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CCredentials_GetAccountAuthSecret_Request_steammessages_5fcredentials_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCCredentials_GetAccountAuthSecret_Request_steammessages_5fcredentials_2esteamclient_2eproto}, {}};

static void InitDefaultsCCredentials_GetAccountAuthSecret_Response_steammessages_5fcredentials_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CCredentials_GetAccountAuthSecret_Response_default_instance_;
    new (ptr) ::proto::steam::CCredentials_GetAccountAuthSecret_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CCredentials_GetAccountAuthSecret_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CCredentials_GetAccountAuthSecret_Response_steammessages_5fcredentials_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCCredentials_GetAccountAuthSecret_Response_steammessages_5fcredentials_2esteamclient_2eproto}, {}};

void InitDefaults_steammessages_5fcredentials_2esteamclient_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_CCredentials_TestAvailablePassword_Request_steammessages_5fcredentials_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CCredentials_TestAvailablePassword_Response_steammessages_5fcredentials_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CCredentials_GetSteamGuardDetails_Request_steammessages_5fcredentials_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CCredentials_GetSteamGuardDetails_Response_NewAuthentication_steammessages_5fcredentials_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CCredentials_GetSteamGuardDetails_Response_SessionData_steammessages_5fcredentials_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CCredentials_GetSteamGuardDetails_Response_steammessages_5fcredentials_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CCredentials_NewMachineNotificationDialog_Request_steammessages_5fcredentials_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CCredentials_NewMachineNotificationDialog_Response_steammessages_5fcredentials_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CCredentials_ValidateEmailAddress_Request_steammessages_5fcredentials_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CCredentials_ValidateEmailAddress_Response_steammessages_5fcredentials_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CCredentials_SteamGuardPhishingReport_Request_steammessages_5fcredentials_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CCredentials_SteamGuardPhishingReport_Response_steammessages_5fcredentials_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CCredentials_LastCredentialChangeTime_Request_steammessages_5fcredentials_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CCredentials_LastCredentialChangeTime_Response_steammessages_5fcredentials_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CCredentials_GetAccountAuthSecret_Request_steammessages_5fcredentials_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CCredentials_GetAccountAuthSecret_Response_steammessages_5fcredentials_2esteamclient_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_steammessages_5fcredentials_2esteamclient_2eproto[16];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_steammessages_5fcredentials_2esteamclient_2eproto = nullptr;
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors_steammessages_5fcredentials_2esteamclient_2eproto[1];

const ::google::protobuf::uint32 TableStruct_steammessages_5fcredentials_2esteamclient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_TestAvailablePassword_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_TestAvailablePassword_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_TestAvailablePassword_Request, password_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_TestAvailablePassword_Request, sha_digest_password_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_TestAvailablePassword_Request, account_name_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_TestAvailablePassword_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_TestAvailablePassword_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_TestAvailablePassword_Response, is_valid_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_GetSteamGuardDetails_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_GetSteamGuardDetails_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_GetSteamGuardDetails_Request, include_new_authentications_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_GetSteamGuardDetails_Request, webcookie_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_GetSteamGuardDetails_Request, timestamp_minimum_wanted_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_GetSteamGuardDetails_Request, ipaddress_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_GetSteamGuardDetails_Response_NewAuthentication, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_GetSteamGuardDetails_Response_NewAuthentication, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_GetSteamGuardDetails_Response_NewAuthentication, timestamp_steamguard_enabled_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_GetSteamGuardDetails_Response_NewAuthentication, is_web_cookie_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_GetSteamGuardDetails_Response_NewAuthentication, ipaddress_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_GetSteamGuardDetails_Response_NewAuthentication, geoloc_info_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_GetSteamGuardDetails_Response_NewAuthentication, is_remembered_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_GetSteamGuardDetails_Response_NewAuthentication, machine_name_user_supplied_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_GetSteamGuardDetails_Response_NewAuthentication, status_),
  2,
  4,
  3,
  0,
  5,
  1,
  6,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_GetSteamGuardDetails_Response_SessionData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_GetSteamGuardDetails_Response_SessionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_GetSteamGuardDetails_Response_SessionData, machine_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_GetSteamGuardDetails_Response_SessionData, machine_name_userchosen_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_GetSteamGuardDetails_Response_SessionData, timestamp_machine_steamguard_enabled_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_GetSteamGuardDetails_Response_SessionData, authentication_exists_from_geoloc_before_mintime_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_GetSteamGuardDetails_Response_SessionData, newauthentication_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_GetSteamGuardDetails_Response_SessionData, authentication_exists_from_same_ip_before_mintime_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_GetSteamGuardDetails_Response_SessionData, public_ipv4_),
  1,
  0,
  2,
  3,
  ~0u,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_GetSteamGuardDetails_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_GetSteamGuardDetails_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_GetSteamGuardDetails_Response, is_steamguard_enabled_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_GetSteamGuardDetails_Response, timestamp_steamguard_enabled_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_GetSteamGuardDetails_Response, deprecated_newauthentication_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_GetSteamGuardDetails_Response, deprecated_machine_name_userchosen_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_GetSteamGuardDetails_Response, deprecated_timestamp_machine_steamguard_enabled_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_GetSteamGuardDetails_Response, deprecated_authentication_exists_from_geoloc_before_mintime_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_GetSteamGuardDetails_Response, deprecated_machine_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_GetSteamGuardDetails_Response, session_data_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_GetSteamGuardDetails_Response, is_twofactor_enabled_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_GetSteamGuardDetails_Response, timestamp_twofactor_enabled_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_GetSteamGuardDetails_Response, is_phone_verified_),
  4,
  1,
  ~0u,
  0,
  2,
  5,
  3,
  ~0u,
  6,
  8,
  7,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_NewMachineNotificationDialog_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_NewMachineNotificationDialog_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_NewMachineNotificationDialog_Request, is_approved_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_NewMachineNotificationDialog_Request, is_wizard_complete_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_NewMachineNotificationDialog_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_NewMachineNotificationDialog_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_ValidateEmailAddress_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_ValidateEmailAddress_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_ValidateEmailAddress_Request, stoken_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_ValidateEmailAddress_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_ValidateEmailAddress_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_ValidateEmailAddress_Response, was_validated_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_SteamGuardPhishingReport_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_SteamGuardPhishingReport_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_SteamGuardPhishingReport_Request, param_string_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_SteamGuardPhishingReport_Request, ipaddress_actual_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_SteamGuardPhishingReport_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_SteamGuardPhishingReport_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_SteamGuardPhishingReport_Response, ipaddress_loginattempt_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_SteamGuardPhishingReport_Response, countryname_loginattempt_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_SteamGuardPhishingReport_Response, statename_loginattempt_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_SteamGuardPhishingReport_Response, cityname_loginattempt_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_SteamGuardPhishingReport_Response, ipaddress_actual_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_SteamGuardPhishingReport_Response, countryname_actual_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_SteamGuardPhishingReport_Response, statename_actual_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_SteamGuardPhishingReport_Response, cityname_actual_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_SteamGuardPhishingReport_Response, steamguard_code_),
  7,
  0,
  1,
  2,
  8,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_LastCredentialChangeTime_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_LastCredentialChangeTime_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_LastCredentialChangeTime_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_LastCredentialChangeTime_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_LastCredentialChangeTime_Response, timestamp_last_password_change_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_LastCredentialChangeTime_Response, timestamp_last_email_change_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_LastCredentialChangeTime_Response, timestamp_last_password_reset_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_GetAccountAuthSecret_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_GetAccountAuthSecret_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_GetAccountAuthSecret_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_GetAccountAuthSecret_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_GetAccountAuthSecret_Response, secret_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCredentials_GetAccountAuthSecret_Response, secret_),
  1,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::proto::steam::CCredentials_TestAvailablePassword_Request)},
  { 11, 17, sizeof(::proto::steam::CCredentials_TestAvailablePassword_Response)},
  { 18, 27, sizeof(::proto::steam::CCredentials_GetSteamGuardDetails_Request)},
  { 31, 43, sizeof(::proto::steam::CCredentials_GetSteamGuardDetails_Response_NewAuthentication)},
  { 50, 62, sizeof(::proto::steam::CCredentials_GetSteamGuardDetails_Response_SessionData)},
  { 69, 85, sizeof(::proto::steam::CCredentials_GetSteamGuardDetails_Response)},
  { 96, 103, sizeof(::proto::steam::CCredentials_NewMachineNotificationDialog_Request)},
  { 105, 110, sizeof(::proto::steam::CCredentials_NewMachineNotificationDialog_Response)},
  { 110, 116, sizeof(::proto::steam::CCredentials_ValidateEmailAddress_Request)},
  { 117, 123, sizeof(::proto::steam::CCredentials_ValidateEmailAddress_Response)},
  { 124, 131, sizeof(::proto::steam::CCredentials_SteamGuardPhishingReport_Request)},
  { 133, 147, sizeof(::proto::steam::CCredentials_SteamGuardPhishingReport_Response)},
  { 156, 161, sizeof(::proto::steam::CCredentials_LastCredentialChangeTime_Request)},
  { 161, 169, sizeof(::proto::steam::CCredentials_LastCredentialChangeTime_Response)},
  { 172, 177, sizeof(::proto::steam::CCredentials_GetAccountAuthSecret_Request)},
  { 177, 184, sizeof(::proto::steam::CCredentials_GetAccountAuthSecret_Response)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CCredentials_TestAvailablePassword_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CCredentials_TestAvailablePassword_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CCredentials_GetSteamGuardDetails_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CCredentials_GetSteamGuardDetails_Response_NewAuthentication_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CCredentials_GetSteamGuardDetails_Response_SessionData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CCredentials_GetSteamGuardDetails_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CCredentials_NewMachineNotificationDialog_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CCredentials_NewMachineNotificationDialog_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CCredentials_ValidateEmailAddress_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CCredentials_ValidateEmailAddress_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CCredentials_SteamGuardPhishingReport_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CCredentials_SteamGuardPhishingReport_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CCredentials_LastCredentialChangeTime_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CCredentials_LastCredentialChangeTime_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CCredentials_GetAccountAuthSecret_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CCredentials_GetAccountAuthSecret_Response_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_steammessages_5fcredentials_2esteamclient_2eproto = {
  {}, AddDescriptors_steammessages_5fcredentials_2esteamclient_2eproto, "steammessages_credentials.steamclient.proto", schemas,
  file_default_instances, TableStruct_steammessages_5fcredentials_2esteamclient_2eproto::offsets,
  file_level_metadata_steammessages_5fcredentials_2esteamclient_2eproto, 16, file_level_enum_descriptors_steammessages_5fcredentials_2esteamclient_2eproto, file_level_service_descriptors_steammessages_5fcredentials_2esteamclient_2eproto,
};

const char descriptor_table_protodef_steammessages_5fcredentials_2esteamclient_2eproto[] =
  "\n+steammessages_credentials.steamclient."
  "proto\022\013proto.steam\032,steammessages_unifie"
  "d_base.steamclient.proto\"q\n*CCredentials"
  "_TestAvailablePassword_Request\022\020\n\010passwo"
  "rd\030\001 \001(\t\022\033\n\023sha_digest_password\030\002 \001(\014\022\024\n"
  "\014account_name\030\003 \001(\t\"\?\n+CCredentials_Test"
  "AvailablePassword_Response\022\020\n\010is_valid\030\003"
  " \001(\010\"\357\002\n)CCredentials_GetSteamGuardDetai"
  "ls_Request\022u\n\033include_new_authentication"
  "s\030\001 \001(\010:\004trueBJ\202\265\030FWhether or not to pop"
  "ulate the newauthentication field in the"
  " response\022\225\001\n\twebcookie\030\002 \001(\tB\201\001\202\265\030}The "
  "user\'s Steam Guard machine auth cookie. "
  "If present, it\'ll be used to get the use"
  "r\'s machine ID instead of the AM session"
  ".\022 \n\030timestamp_minimum_wanted\030\003 \001(\007\022\021\n\ti"
  "paddress\030\004 \001(\005\"\215\t\n*CCredentials_GetSteam"
  "GuardDetails_Response\022\035\n\025is_steamguard_e"
  "nabled\030\001 \001(\010\022$\n\034timestamp_steamguard_ena"
  "bled\030\002 \001(\007\022o\n\034deprecated_newauthenticati"
  "on\030\003 \003(\0132I.proto.steam.CCredentials_GetS"
  "teamGuardDetails_Response.NewAuthenticat"
  "ion\022*\n\"deprecated_machine_name_userchose"
  "n\030\004 \001(\t\0227\n/deprecated_timestamp_machine_"
  "steamguard_enabled\030\005 \001(\007\022C\n;deprecated_a"
  "uthentication_exists_from_geoloc_before_"
  "mintime\030\006 \001(\010\022\035\n\025deprecated_machine_id\030\007"
  " \001(\004\022Y\n\014session_data\030\010 \003(\0132C.proto.steam"
  ".CCredentials_GetSteamGuardDetails_Respo"
  "nse.SessionData\022\034\n\024is_twofactor_enabled\030"
  "\t \001(\010\022#\n\033timestamp_twofactor_enabled\030\n \001"
  "(\007\022\031\n\021is_phone_verified\030\013 \001(\010\032\303\001\n\021NewAut"
  "hentication\022$\n\034timestamp_steamguard_enab"
  "led\030\001 \001(\007\022\025\n\ris_web_cookie\030\002 \001(\010\022\021\n\tipad"
  "dress\030\003 \001(\005\022\023\n\013geoloc_info\030\004 \001(\t\022\025\n\ris_r"
  "emembered\030\005 \001(\010\022\"\n\032machine_name_user_sup"
  "plied\030\006 \001(\t\022\016\n\006status\030\007 \001(\005\032\340\002\n\013SessionD"
  "ata\022\022\n\nmachine_id\030\001 \001(\004\022\037\n\027machine_name_"
  "userchosen\030\002 \001(\t\022,\n$timestamp_machine_st"
  "eamguard_enabled\030\003 \001(\007\0228\n0authentication"
  "_exists_from_geoloc_before_mintime\030\004 \001(\010"
  "\022d\n\021newauthentication\030\005 \003(\0132I.proto.stea"
  "m.CCredentials_GetSteamGuardDetails_Resp"
  "onse.NewAuthentication\0229\n1authentication"
  "_exists_from_same_ip_before_mintime\030\006 \001("
  "\010\022\023\n\013public_ipv4\030\007 \001(\r\"d\n1CCredentials_N"
  "ewMachineNotificationDialog_Request\022\023\n\013i"
  "s_approved\030\001 \001(\010\022\032\n\022is_wizard_complete\030\002"
  " \001(\010\"4\n2CCredentials_NewMachineNotificat"
  "ionDialog_Response\";\n)CCredentials_Valid"
  "ateEmailAddress_Request\022\016\n\006stoken\030\001 \001(\t\""
  "C\n*CCredentials_ValidateEmailAddress_Res"
  "ponse\022\025\n\rwas_validated\030\001 \001(\010\"_\n-CCredent"
  "ials_SteamGuardPhishingReport_Request\022\024\n"
  "\014param_string\030\001 \001(\t\022\030\n\020ipaddress_actual\030"
  "\002 \001(\r\"\263\002\n.CCredentials_SteamGuardPhishin"
  "gReport_Response\022\036\n\026ipaddress_loginattem"
  "pt\030\001 \001(\r\022 \n\030countryname_loginattempt\030\002 \001"
  "(\t\022\036\n\026statename_loginattempt\030\003 \001(\t\022\035\n\025ci"
  "tyname_loginattempt\030\004 \001(\t\022\030\n\020ipaddress_a"
  "ctual\030\005 \001(\r\022\032\n\022countryname_actual\030\006 \001(\t\022"
  "\030\n\020statename_actual\030\007 \001(\t\022\027\n\017cityname_ac"
  "tual\030\010 \001(\t\022\027\n\017steamguard_code\030\t \001(\t\"/\n-C"
  "Credentials_LastCredentialChangeTime_Req"
  "uest\"\244\001\n.CCredentials_LastCredentialChan"
  "geTime_Response\022&\n\036timestamp_last_passwo"
  "rd_change\030\001 \001(\007\022#\n\033timestamp_last_email_"
  "change\030\002 \001(\007\022%\n\035timestamp_last_password_"
  "reset\030\003 \001(\007\"+\n)CCredentials_GetAccountAu"
  "thSecret_Request\"O\n*CCredentials_GetAcco"
  "untAuthSecret_Response\022\021\n\tsecret_id\030\001 \001("
  "\005\022\016\n\006secret\030\002 \001(\0142\225\n\n\013Credentials\022\246\001\n\025Te"
  "stAvailablePassword\0227.proto.steam.CCrede"
  "ntials_TestAvailablePassword_Request\0328.p"
  "roto.steam.CCredentials_TestAvailablePas"
  "sword_Response\"\032\202\265\030\026TestAvailablePasswor"
  "d.\022\242\001\n\024GetSteamGuardDetails\0226.proto.stea"
  "m.CCredentials_GetSteamGuardDetails_Requ"
  "est\0327.proto.steam.CCredentials_GetSteamG"
  "uardDetails_Response\"\031\202\265\030\025GetSteamGuardD"
  "etails.\022\316\001\n\"NewMachineNotificationDialog"
  "Result\022>.proto.steam.CCredentials_NewMac"
  "hineNotificationDialog_Request\032\?.proto.s"
  "team.CCredentials_NewMachineNotification"
  "Dialog_Response\"\'\202\265\030#NewMachineNotificat"
  "ionDialogResult.\022\264\001\n\024ValidateEmailAddres"
  "s\0226.proto.steam.CCredentials_ValidateEma"
  "ilAddress_Request\0327.proto.steam.CCredent"
  "ials_ValidateEmailAddress_Response\"+\202\265\030\'"
  "Validate an email address given a token\022"
  "\261\001\n\030SteamGuardPhishingReport\022:.proto.ste"
  "am.CCredentials_SteamGuardPhishingReport"
  "_Request\032;.proto.steam.CCredentials_Stea"
  "mGuardPhishingReport_Response\"\034\202\265\030\030Steam"
  "GuardPhishingReport\022\276\001\n\036GetCredentialCha"
  "ngeTimeDetails\022:.proto.steam.CCredential"
  "s_LastCredentialChangeTime_Request\032;.pro"
  "to.steam.CCredentials_LastCredentialChan"
  "geTime_Response\"#\202\265\030\037GetCredentialChange"
  "TimeDetails.\022\241\001\n\024GetAccountAuthSecret\0226."
  "proto.steam.CCredentials_GetAccountAuthS"
  "ecret_Request\0327.proto.steam.CCredentials"
  "_GetAccountAuthSecret_Response\"\030\202\265\030\024GetA"
  "ccountAuthSecret\032\027\202\265\030\023Credentials servic"
  "eB\003\200\001\001"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_steammessages_5fcredentials_2esteamclient_2eproto = {
  false, InitDefaults_steammessages_5fcredentials_2esteamclient_2eproto, 
  descriptor_table_protodef_steammessages_5fcredentials_2esteamclient_2eproto,
  "steammessages_credentials.steamclient.proto", &assign_descriptors_table_steammessages_5fcredentials_2esteamclient_2eproto, 4166,
};

void AddDescriptors_steammessages_5fcredentials_2esteamclient_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_steammessages_5funified_5fbase_2esteamclient_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_steammessages_5fcredentials_2esteamclient_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_steammessages_5fcredentials_2esteamclient_2eproto = []() { AddDescriptors_steammessages_5fcredentials_2esteamclient_2eproto(); return true; }();
namespace proto {
namespace steam {

// ===================================================================

void CCredentials_TestAvailablePassword_Request::InitAsDefaultInstance() {
}
class CCredentials_TestAvailablePassword_Request::HasBitSetters {
 public:
  static void set_has_password(CCredentials_TestAvailablePassword_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_sha_digest_password(CCredentials_TestAvailablePassword_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_account_name(CCredentials_TestAvailablePassword_Request* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCredentials_TestAvailablePassword_Request::kPasswordFieldNumber;
const int CCredentials_TestAvailablePassword_Request::kShaDigestPasswordFieldNumber;
const int CCredentials_TestAvailablePassword_Request::kAccountNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCredentials_TestAvailablePassword_Request::CCredentials_TestAvailablePassword_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCredentials_TestAvailablePassword_Request)
}
CCredentials_TestAvailablePassword_Request::CCredentials_TestAvailablePassword_Request(const CCredentials_TestAvailablePassword_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  sha_digest_password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sha_digest_password()) {
    sha_digest_password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_digest_password_);
  }
  account_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_account_name()) {
    account_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_name_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCredentials_TestAvailablePassword_Request)
}

void CCredentials_TestAvailablePassword_Request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CCredentials_TestAvailablePassword_Request_steammessages_5fcredentials_2esteamclient_2eproto.base);
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sha_digest_password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CCredentials_TestAvailablePassword_Request::~CCredentials_TestAvailablePassword_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CCredentials_TestAvailablePassword_Request)
  SharedDtor();
}

void CCredentials_TestAvailablePassword_Request::SharedDtor() {
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sha_digest_password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CCredentials_TestAvailablePassword_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCredentials_TestAvailablePassword_Request& CCredentials_TestAvailablePassword_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CCredentials_TestAvailablePassword_Request_steammessages_5fcredentials_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CCredentials_TestAvailablePassword_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCredentials_TestAvailablePassword_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      password_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      sha_digest_password_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      account_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CCredentials_TestAvailablePassword_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CCredentials_TestAvailablePassword_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string password = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CCredentials_TestAvailablePassword_Request.password");
        object = msg->mutable_password();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bytes sha_digest_password = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_sha_digest_password();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string account_name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CCredentials_TestAvailablePassword_Request.account_name");
        object = msg->mutable_account_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CCredentials_TestAvailablePassword_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCredentials_TestAvailablePassword_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string password = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCredentials_TestAvailablePassword_Request.password");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sha_digest_password = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha_digest_password()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string account_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account_name().data(), static_cast<int>(this->account_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCredentials_TestAvailablePassword_Request.account_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCredentials_TestAvailablePassword_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCredentials_TestAvailablePassword_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CCredentials_TestAvailablePassword_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCredentials_TestAvailablePassword_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string password = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCredentials_TestAvailablePassword_Request.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->password(), output);
  }

  // optional bytes sha_digest_password = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->sha_digest_password(), output);
  }

  // optional string account_name = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account_name().data(), static_cast<int>(this->account_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCredentials_TestAvailablePassword_Request.account_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->account_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCredentials_TestAvailablePassword_Request)
}

::google::protobuf::uint8* CCredentials_TestAvailablePassword_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCredentials_TestAvailablePassword_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string password = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCredentials_TestAvailablePassword_Request.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->password(), target);
  }

  // optional bytes sha_digest_password = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->sha_digest_password(), target);
  }

  // optional string account_name = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account_name().data(), static_cast<int>(this->account_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCredentials_TestAvailablePassword_Request.account_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->account_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCredentials_TestAvailablePassword_Request)
  return target;
}

size_t CCredentials_TestAvailablePassword_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCredentials_TestAvailablePassword_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string password = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional bytes sha_digest_password = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha_digest_password());
    }

    // optional string account_name = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account_name());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCredentials_TestAvailablePassword_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCredentials_TestAvailablePassword_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCredentials_TestAvailablePassword_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CCredentials_TestAvailablePassword_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCredentials_TestAvailablePassword_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCredentials_TestAvailablePassword_Request)
    MergeFrom(*source);
  }
}

void CCredentials_TestAvailablePassword_Request::MergeFrom(const CCredentials_TestAvailablePassword_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCredentials_TestAvailablePassword_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      sha_digest_password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_digest_password_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      account_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_name_);
    }
  }
}

void CCredentials_TestAvailablePassword_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCredentials_TestAvailablePassword_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCredentials_TestAvailablePassword_Request::CopyFrom(const CCredentials_TestAvailablePassword_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCredentials_TestAvailablePassword_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCredentials_TestAvailablePassword_Request::IsInitialized() const {
  return true;
}

void CCredentials_TestAvailablePassword_Request::Swap(CCredentials_TestAvailablePassword_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCredentials_TestAvailablePassword_Request::InternalSwap(CCredentials_TestAvailablePassword_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  password_.Swap(&other->password_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sha_digest_password_.Swap(&other->sha_digest_password_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  account_name_.Swap(&other->account_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CCredentials_TestAvailablePassword_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fcredentials_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fcredentials_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CCredentials_TestAvailablePassword_Response::InitAsDefaultInstance() {
}
class CCredentials_TestAvailablePassword_Response::HasBitSetters {
 public:
  static void set_has_is_valid(CCredentials_TestAvailablePassword_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCredentials_TestAvailablePassword_Response::kIsValidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCredentials_TestAvailablePassword_Response::CCredentials_TestAvailablePassword_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCredentials_TestAvailablePassword_Response)
}
CCredentials_TestAvailablePassword_Response::CCredentials_TestAvailablePassword_Response(const CCredentials_TestAvailablePassword_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  is_valid_ = from.is_valid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCredentials_TestAvailablePassword_Response)
}

void CCredentials_TestAvailablePassword_Response::SharedCtor() {
  is_valid_ = false;
}

CCredentials_TestAvailablePassword_Response::~CCredentials_TestAvailablePassword_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CCredentials_TestAvailablePassword_Response)
  SharedDtor();
}

void CCredentials_TestAvailablePassword_Response::SharedDtor() {
}

void CCredentials_TestAvailablePassword_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCredentials_TestAvailablePassword_Response& CCredentials_TestAvailablePassword_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CCredentials_TestAvailablePassword_Response_steammessages_5fcredentials_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CCredentials_TestAvailablePassword_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCredentials_TestAvailablePassword_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_valid_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CCredentials_TestAvailablePassword_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CCredentials_TestAvailablePassword_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool is_valid = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_is_valid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CCredentials_TestAvailablePassword_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCredentials_TestAvailablePassword_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_valid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_is_valid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCredentials_TestAvailablePassword_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCredentials_TestAvailablePassword_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CCredentials_TestAvailablePassword_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCredentials_TestAvailablePassword_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_valid = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_valid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCredentials_TestAvailablePassword_Response)
}

::google::protobuf::uint8* CCredentials_TestAvailablePassword_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCredentials_TestAvailablePassword_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_valid = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_valid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCredentials_TestAvailablePassword_Response)
  return target;
}

size_t CCredentials_TestAvailablePassword_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCredentials_TestAvailablePassword_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool is_valid = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCredentials_TestAvailablePassword_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCredentials_TestAvailablePassword_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCredentials_TestAvailablePassword_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CCredentials_TestAvailablePassword_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCredentials_TestAvailablePassword_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCredentials_TestAvailablePassword_Response)
    MergeFrom(*source);
  }
}

void CCredentials_TestAvailablePassword_Response::MergeFrom(const CCredentials_TestAvailablePassword_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCredentials_TestAvailablePassword_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_is_valid()) {
    set_is_valid(from.is_valid());
  }
}

void CCredentials_TestAvailablePassword_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCredentials_TestAvailablePassword_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCredentials_TestAvailablePassword_Response::CopyFrom(const CCredentials_TestAvailablePassword_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCredentials_TestAvailablePassword_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCredentials_TestAvailablePassword_Response::IsInitialized() const {
  return true;
}

void CCredentials_TestAvailablePassword_Response::Swap(CCredentials_TestAvailablePassword_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCredentials_TestAvailablePassword_Response::InternalSwap(CCredentials_TestAvailablePassword_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(is_valid_, other->is_valid_);
}

::google::protobuf::Metadata CCredentials_TestAvailablePassword_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fcredentials_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fcredentials_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CCredentials_GetSteamGuardDetails_Request::InitAsDefaultInstance() {
}
class CCredentials_GetSteamGuardDetails_Request::HasBitSetters {
 public:
  static void set_has_include_new_authentications(CCredentials_GetSteamGuardDetails_Request* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_webcookie(CCredentials_GetSteamGuardDetails_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_timestamp_minimum_wanted(CCredentials_GetSteamGuardDetails_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_ipaddress(CCredentials_GetSteamGuardDetails_Request* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCredentials_GetSteamGuardDetails_Request::kIncludeNewAuthenticationsFieldNumber;
const int CCredentials_GetSteamGuardDetails_Request::kWebcookieFieldNumber;
const int CCredentials_GetSteamGuardDetails_Request::kTimestampMinimumWantedFieldNumber;
const int CCredentials_GetSteamGuardDetails_Request::kIpaddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCredentials_GetSteamGuardDetails_Request::CCredentials_GetSteamGuardDetails_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCredentials_GetSteamGuardDetails_Request)
}
CCredentials_GetSteamGuardDetails_Request::CCredentials_GetSteamGuardDetails_Request(const CCredentials_GetSteamGuardDetails_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  webcookie_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_webcookie()) {
    webcookie_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.webcookie_);
  }
  ::memcpy(&timestamp_minimum_wanted_, &from.timestamp_minimum_wanted_,
    static_cast<size_t>(reinterpret_cast<char*>(&include_new_authentications_) -
    reinterpret_cast<char*>(&timestamp_minimum_wanted_)) + sizeof(include_new_authentications_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCredentials_GetSteamGuardDetails_Request)
}

void CCredentials_GetSteamGuardDetails_Request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CCredentials_GetSteamGuardDetails_Request_steammessages_5fcredentials_2esteamclient_2eproto.base);
  webcookie_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_minimum_wanted_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ipaddress_) -
      reinterpret_cast<char*>(&timestamp_minimum_wanted_)) + sizeof(ipaddress_));
  include_new_authentications_ = true;
}

CCredentials_GetSteamGuardDetails_Request::~CCredentials_GetSteamGuardDetails_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CCredentials_GetSteamGuardDetails_Request)
  SharedDtor();
}

void CCredentials_GetSteamGuardDetails_Request::SharedDtor() {
  webcookie_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CCredentials_GetSteamGuardDetails_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCredentials_GetSteamGuardDetails_Request& CCredentials_GetSteamGuardDetails_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CCredentials_GetSteamGuardDetails_Request_steammessages_5fcredentials_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CCredentials_GetSteamGuardDetails_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCredentials_GetSteamGuardDetails_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    webcookie_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&timestamp_minimum_wanted_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ipaddress_) -
        reinterpret_cast<char*>(&timestamp_minimum_wanted_)) + sizeof(ipaddress_));
    include_new_authentications_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CCredentials_GetSteamGuardDetails_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CCredentials_GetSteamGuardDetails_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool include_new_authentications = 1 [default = true, (.proto.steam.description) = "Whether or not to populate the newauthentication field in the response"];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_include_new_authentications(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string webcookie = 2 [(.proto.steam.description) = "The user\'s Steam Guard machine auth cookie. If present, it\'ll be used to get the user\'s machine ID instead of the AM session."];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CCredentials_GetSteamGuardDetails_Request.webcookie");
        object = msg->mutable_webcookie();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional fixed32 timestamp_minimum_wanted = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_timestamp_minimum_wanted(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional int32 ipaddress = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_ipaddress(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CCredentials_GetSteamGuardDetails_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCredentials_GetSteamGuardDetails_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool include_new_authentications = 1 [default = true, (.proto.steam.description) = "Whether or not to populate the newauthentication field in the response"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_include_new_authentications(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &include_new_authentications_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string webcookie = 2 [(.proto.steam.description) = "The user\'s Steam Guard machine auth cookie. If present, it\'ll be used to get the user\'s machine ID instead of the AM session."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_webcookie()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->webcookie().data(), static_cast<int>(this->webcookie().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCredentials_GetSteamGuardDetails_Request.webcookie");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 timestamp_minimum_wanted = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_timestamp_minimum_wanted(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &timestamp_minimum_wanted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ipaddress = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_ipaddress(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ipaddress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCredentials_GetSteamGuardDetails_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCredentials_GetSteamGuardDetails_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CCredentials_GetSteamGuardDetails_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCredentials_GetSteamGuardDetails_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool include_new_authentications = 1 [default = true, (.proto.steam.description) = "Whether or not to populate the newauthentication field in the response"];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->include_new_authentications(), output);
  }

  // optional string webcookie = 2 [(.proto.steam.description) = "The user\'s Steam Guard machine auth cookie. If present, it\'ll be used to get the user\'s machine ID instead of the AM session."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->webcookie().data(), static_cast<int>(this->webcookie().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCredentials_GetSteamGuardDetails_Request.webcookie");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->webcookie(), output);
  }

  // optional fixed32 timestamp_minimum_wanted = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->timestamp_minimum_wanted(), output);
  }

  // optional int32 ipaddress = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ipaddress(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCredentials_GetSteamGuardDetails_Request)
}

::google::protobuf::uint8* CCredentials_GetSteamGuardDetails_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCredentials_GetSteamGuardDetails_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool include_new_authentications = 1 [default = true, (.proto.steam.description) = "Whether or not to populate the newauthentication field in the response"];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->include_new_authentications(), target);
  }

  // optional string webcookie = 2 [(.proto.steam.description) = "The user\'s Steam Guard machine auth cookie. If present, it\'ll be used to get the user\'s machine ID instead of the AM session."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->webcookie().data(), static_cast<int>(this->webcookie().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCredentials_GetSteamGuardDetails_Request.webcookie");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->webcookie(), target);
  }

  // optional fixed32 timestamp_minimum_wanted = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->timestamp_minimum_wanted(), target);
  }

  // optional int32 ipaddress = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ipaddress(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCredentials_GetSteamGuardDetails_Request)
  return target;
}

size_t CCredentials_GetSteamGuardDetails_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCredentials_GetSteamGuardDetails_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string webcookie = 2 [(.proto.steam.description) = "The user\'s Steam Guard machine auth cookie. If present, it\'ll be used to get the user\'s machine ID instead of the AM session."];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->webcookie());
    }

    // optional fixed32 timestamp_minimum_wanted = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional int32 ipaddress = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ipaddress());
    }

    // optional bool include_new_authentications = 1 [default = true, (.proto.steam.description) = "Whether or not to populate the newauthentication field in the response"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCredentials_GetSteamGuardDetails_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCredentials_GetSteamGuardDetails_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCredentials_GetSteamGuardDetails_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CCredentials_GetSteamGuardDetails_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCredentials_GetSteamGuardDetails_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCredentials_GetSteamGuardDetails_Request)
    MergeFrom(*source);
  }
}

void CCredentials_GetSteamGuardDetails_Request::MergeFrom(const CCredentials_GetSteamGuardDetails_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCredentials_GetSteamGuardDetails_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      webcookie_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.webcookie_);
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_minimum_wanted_ = from.timestamp_minimum_wanted_;
    }
    if (cached_has_bits & 0x00000004u) {
      ipaddress_ = from.ipaddress_;
    }
    if (cached_has_bits & 0x00000008u) {
      include_new_authentications_ = from.include_new_authentications_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCredentials_GetSteamGuardDetails_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCredentials_GetSteamGuardDetails_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCredentials_GetSteamGuardDetails_Request::CopyFrom(const CCredentials_GetSteamGuardDetails_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCredentials_GetSteamGuardDetails_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCredentials_GetSteamGuardDetails_Request::IsInitialized() const {
  return true;
}

void CCredentials_GetSteamGuardDetails_Request::Swap(CCredentials_GetSteamGuardDetails_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCredentials_GetSteamGuardDetails_Request::InternalSwap(CCredentials_GetSteamGuardDetails_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  webcookie_.Swap(&other->webcookie_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_minimum_wanted_, other->timestamp_minimum_wanted_);
  swap(ipaddress_, other->ipaddress_);
  swap(include_new_authentications_, other->include_new_authentications_);
}

::google::protobuf::Metadata CCredentials_GetSteamGuardDetails_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fcredentials_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fcredentials_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CCredentials_GetSteamGuardDetails_Response_NewAuthentication::InitAsDefaultInstance() {
}
class CCredentials_GetSteamGuardDetails_Response_NewAuthentication::HasBitSetters {
 public:
  static void set_has_timestamp_steamguard_enabled(CCredentials_GetSteamGuardDetails_Response_NewAuthentication* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_is_web_cookie(CCredentials_GetSteamGuardDetails_Response_NewAuthentication* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_ipaddress(CCredentials_GetSteamGuardDetails_Response_NewAuthentication* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_geoloc_info(CCredentials_GetSteamGuardDetails_Response_NewAuthentication* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_is_remembered(CCredentials_GetSteamGuardDetails_Response_NewAuthentication* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_machine_name_user_supplied(CCredentials_GetSteamGuardDetails_Response_NewAuthentication* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_status(CCredentials_GetSteamGuardDetails_Response_NewAuthentication* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCredentials_GetSteamGuardDetails_Response_NewAuthentication::kTimestampSteamguardEnabledFieldNumber;
const int CCredentials_GetSteamGuardDetails_Response_NewAuthentication::kIsWebCookieFieldNumber;
const int CCredentials_GetSteamGuardDetails_Response_NewAuthentication::kIpaddressFieldNumber;
const int CCredentials_GetSteamGuardDetails_Response_NewAuthentication::kGeolocInfoFieldNumber;
const int CCredentials_GetSteamGuardDetails_Response_NewAuthentication::kIsRememberedFieldNumber;
const int CCredentials_GetSteamGuardDetails_Response_NewAuthentication::kMachineNameUserSuppliedFieldNumber;
const int CCredentials_GetSteamGuardDetails_Response_NewAuthentication::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCredentials_GetSteamGuardDetails_Response_NewAuthentication::CCredentials_GetSteamGuardDetails_Response_NewAuthentication()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCredentials_GetSteamGuardDetails_Response.NewAuthentication)
}
CCredentials_GetSteamGuardDetails_Response_NewAuthentication::CCredentials_GetSteamGuardDetails_Response_NewAuthentication(const CCredentials_GetSteamGuardDetails_Response_NewAuthentication& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  geoloc_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_geoloc_info()) {
    geoloc_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.geoloc_info_);
  }
  machine_name_user_supplied_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_machine_name_user_supplied()) {
    machine_name_user_supplied_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_name_user_supplied_);
  }
  ::memcpy(&timestamp_steamguard_enabled_, &from.timestamp_steamguard_enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&timestamp_steamguard_enabled_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCredentials_GetSteamGuardDetails_Response.NewAuthentication)
}

void CCredentials_GetSteamGuardDetails_Response_NewAuthentication::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CCredentials_GetSteamGuardDetails_Response_NewAuthentication_steammessages_5fcredentials_2esteamclient_2eproto.base);
  geoloc_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  machine_name_user_supplied_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_steamguard_enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&timestamp_steamguard_enabled_)) + sizeof(status_));
}

CCredentials_GetSteamGuardDetails_Response_NewAuthentication::~CCredentials_GetSteamGuardDetails_Response_NewAuthentication() {
  // @@protoc_insertion_point(destructor:proto.steam.CCredentials_GetSteamGuardDetails_Response.NewAuthentication)
  SharedDtor();
}

void CCredentials_GetSteamGuardDetails_Response_NewAuthentication::SharedDtor() {
  geoloc_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  machine_name_user_supplied_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CCredentials_GetSteamGuardDetails_Response_NewAuthentication::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCredentials_GetSteamGuardDetails_Response_NewAuthentication& CCredentials_GetSteamGuardDetails_Response_NewAuthentication::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CCredentials_GetSteamGuardDetails_Response_NewAuthentication_steammessages_5fcredentials_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CCredentials_GetSteamGuardDetails_Response_NewAuthentication::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCredentials_GetSteamGuardDetails_Response.NewAuthentication)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      geoloc_info_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      machine_name_user_supplied_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&timestamp_steamguard_enabled_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&timestamp_steamguard_enabled_)) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CCredentials_GetSteamGuardDetails_Response_NewAuthentication::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CCredentials_GetSteamGuardDetails_Response_NewAuthentication*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed32 timestamp_steamguard_enabled = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_timestamp_steamguard_enabled(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional bool is_web_cookie = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_is_web_cookie(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 ipaddress = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_ipaddress(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string geoloc_info = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CCredentials_GetSteamGuardDetails_Response.NewAuthentication.geoloc_info");
        object = msg->mutable_geoloc_info();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool is_remembered = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_is_remembered(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string machine_name_user_supplied = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CCredentials_GetSteamGuardDetails_Response.NewAuthentication.machine_name_user_supplied");
        object = msg->mutable_machine_name_user_supplied();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional int32 status = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_status(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CCredentials_GetSteamGuardDetails_Response_NewAuthentication::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCredentials_GetSteamGuardDetails_Response.NewAuthentication)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 timestamp_steamguard_enabled = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_timestamp_steamguard_enabled(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &timestamp_steamguard_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_web_cookie = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_is_web_cookie(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_web_cookie_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ipaddress = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_ipaddress(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ipaddress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string geoloc_info = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_geoloc_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->geoloc_info().data(), static_cast<int>(this->geoloc_info().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCredentials_GetSteamGuardDetails_Response.NewAuthentication.geoloc_info");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_remembered = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_is_remembered(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_remembered_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string machine_name_user_supplied = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_name_user_supplied()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->machine_name_user_supplied().data(), static_cast<int>(this->machine_name_user_supplied().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCredentials_GetSteamGuardDetails_Response.NewAuthentication.machine_name_user_supplied");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 status = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_status(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCredentials_GetSteamGuardDetails_Response.NewAuthentication)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCredentials_GetSteamGuardDetails_Response.NewAuthentication)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CCredentials_GetSteamGuardDetails_Response_NewAuthentication::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCredentials_GetSteamGuardDetails_Response.NewAuthentication)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 timestamp_steamguard_enabled = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->timestamp_steamguard_enabled(), output);
  }

  // optional bool is_web_cookie = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_web_cookie(), output);
  }

  // optional int32 ipaddress = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ipaddress(), output);
  }

  // optional string geoloc_info = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->geoloc_info().data(), static_cast<int>(this->geoloc_info().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCredentials_GetSteamGuardDetails_Response.NewAuthentication.geoloc_info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->geoloc_info(), output);
  }

  // optional bool is_remembered = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_remembered(), output);
  }

  // optional string machine_name_user_supplied = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->machine_name_user_supplied().data(), static_cast<int>(this->machine_name_user_supplied().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCredentials_GetSteamGuardDetails_Response.NewAuthentication.machine_name_user_supplied");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->machine_name_user_supplied(), output);
  }

  // optional int32 status = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCredentials_GetSteamGuardDetails_Response.NewAuthentication)
}

::google::protobuf::uint8* CCredentials_GetSteamGuardDetails_Response_NewAuthentication::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCredentials_GetSteamGuardDetails_Response.NewAuthentication)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 timestamp_steamguard_enabled = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->timestamp_steamguard_enabled(), target);
  }

  // optional bool is_web_cookie = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_web_cookie(), target);
  }

  // optional int32 ipaddress = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ipaddress(), target);
  }

  // optional string geoloc_info = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->geoloc_info().data(), static_cast<int>(this->geoloc_info().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCredentials_GetSteamGuardDetails_Response.NewAuthentication.geoloc_info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->geoloc_info(), target);
  }

  // optional bool is_remembered = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_remembered(), target);
  }

  // optional string machine_name_user_supplied = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->machine_name_user_supplied().data(), static_cast<int>(this->machine_name_user_supplied().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCredentials_GetSteamGuardDetails_Response.NewAuthentication.machine_name_user_supplied");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->machine_name_user_supplied(), target);
  }

  // optional int32 status = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCredentials_GetSteamGuardDetails_Response.NewAuthentication)
  return target;
}

size_t CCredentials_GetSteamGuardDetails_Response_NewAuthentication::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCredentials_GetSteamGuardDetails_Response.NewAuthentication)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string geoloc_info = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->geoloc_info());
    }

    // optional string machine_name_user_supplied = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machine_name_user_supplied());
    }

    // optional fixed32 timestamp_steamguard_enabled = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional int32 ipaddress = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ipaddress());
    }

    // optional bool is_web_cookie = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool is_remembered = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional int32 status = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCredentials_GetSteamGuardDetails_Response_NewAuthentication::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCredentials_GetSteamGuardDetails_Response.NewAuthentication)
  GOOGLE_DCHECK_NE(&from, this);
  const CCredentials_GetSteamGuardDetails_Response_NewAuthentication* source =
      ::google::protobuf::DynamicCastToGenerated<CCredentials_GetSteamGuardDetails_Response_NewAuthentication>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCredentials_GetSteamGuardDetails_Response.NewAuthentication)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCredentials_GetSteamGuardDetails_Response.NewAuthentication)
    MergeFrom(*source);
  }
}

void CCredentials_GetSteamGuardDetails_Response_NewAuthentication::MergeFrom(const CCredentials_GetSteamGuardDetails_Response_NewAuthentication& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCredentials_GetSteamGuardDetails_Response.NewAuthentication)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      geoloc_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.geoloc_info_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      machine_name_user_supplied_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_name_user_supplied_);
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_steamguard_enabled_ = from.timestamp_steamguard_enabled_;
    }
    if (cached_has_bits & 0x00000008u) {
      ipaddress_ = from.ipaddress_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_web_cookie_ = from.is_web_cookie_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_remembered_ = from.is_remembered_;
    }
    if (cached_has_bits & 0x00000040u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCredentials_GetSteamGuardDetails_Response_NewAuthentication::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCredentials_GetSteamGuardDetails_Response.NewAuthentication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCredentials_GetSteamGuardDetails_Response_NewAuthentication::CopyFrom(const CCredentials_GetSteamGuardDetails_Response_NewAuthentication& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCredentials_GetSteamGuardDetails_Response.NewAuthentication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCredentials_GetSteamGuardDetails_Response_NewAuthentication::IsInitialized() const {
  return true;
}

void CCredentials_GetSteamGuardDetails_Response_NewAuthentication::Swap(CCredentials_GetSteamGuardDetails_Response_NewAuthentication* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCredentials_GetSteamGuardDetails_Response_NewAuthentication::InternalSwap(CCredentials_GetSteamGuardDetails_Response_NewAuthentication* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  geoloc_info_.Swap(&other->geoloc_info_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  machine_name_user_supplied_.Swap(&other->machine_name_user_supplied_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_steamguard_enabled_, other->timestamp_steamguard_enabled_);
  swap(ipaddress_, other->ipaddress_);
  swap(is_web_cookie_, other->is_web_cookie_);
  swap(is_remembered_, other->is_remembered_);
  swap(status_, other->status_);
}

::google::protobuf::Metadata CCredentials_GetSteamGuardDetails_Response_NewAuthentication::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fcredentials_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fcredentials_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CCredentials_GetSteamGuardDetails_Response_SessionData::InitAsDefaultInstance() {
}
class CCredentials_GetSteamGuardDetails_Response_SessionData::HasBitSetters {
 public:
  static void set_has_machine_id(CCredentials_GetSteamGuardDetails_Response_SessionData* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_machine_name_userchosen(CCredentials_GetSteamGuardDetails_Response_SessionData* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_timestamp_machine_steamguard_enabled(CCredentials_GetSteamGuardDetails_Response_SessionData* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_authentication_exists_from_geoloc_before_mintime(CCredentials_GetSteamGuardDetails_Response_SessionData* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_authentication_exists_from_same_ip_before_mintime(CCredentials_GetSteamGuardDetails_Response_SessionData* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_public_ipv4(CCredentials_GetSteamGuardDetails_Response_SessionData* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCredentials_GetSteamGuardDetails_Response_SessionData::kMachineIdFieldNumber;
const int CCredentials_GetSteamGuardDetails_Response_SessionData::kMachineNameUserchosenFieldNumber;
const int CCredentials_GetSteamGuardDetails_Response_SessionData::kTimestampMachineSteamguardEnabledFieldNumber;
const int CCredentials_GetSteamGuardDetails_Response_SessionData::kAuthenticationExistsFromGeolocBeforeMintimeFieldNumber;
const int CCredentials_GetSteamGuardDetails_Response_SessionData::kNewauthenticationFieldNumber;
const int CCredentials_GetSteamGuardDetails_Response_SessionData::kAuthenticationExistsFromSameIpBeforeMintimeFieldNumber;
const int CCredentials_GetSteamGuardDetails_Response_SessionData::kPublicIpv4FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCredentials_GetSteamGuardDetails_Response_SessionData::CCredentials_GetSteamGuardDetails_Response_SessionData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCredentials_GetSteamGuardDetails_Response.SessionData)
}
CCredentials_GetSteamGuardDetails_Response_SessionData::CCredentials_GetSteamGuardDetails_Response_SessionData(const CCredentials_GetSteamGuardDetails_Response_SessionData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      newauthentication_(from.newauthentication_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  machine_name_userchosen_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_machine_name_userchosen()) {
    machine_name_userchosen_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_name_userchosen_);
  }
  ::memcpy(&machine_id_, &from.machine_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&public_ipv4_) -
    reinterpret_cast<char*>(&machine_id_)) + sizeof(public_ipv4_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCredentials_GetSteamGuardDetails_Response.SessionData)
}

void CCredentials_GetSteamGuardDetails_Response_SessionData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CCredentials_GetSteamGuardDetails_Response_SessionData_steammessages_5fcredentials_2esteamclient_2eproto.base);
  machine_name_userchosen_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&machine_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&public_ipv4_) -
      reinterpret_cast<char*>(&machine_id_)) + sizeof(public_ipv4_));
}

CCredentials_GetSteamGuardDetails_Response_SessionData::~CCredentials_GetSteamGuardDetails_Response_SessionData() {
  // @@protoc_insertion_point(destructor:proto.steam.CCredentials_GetSteamGuardDetails_Response.SessionData)
  SharedDtor();
}

void CCredentials_GetSteamGuardDetails_Response_SessionData::SharedDtor() {
  machine_name_userchosen_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CCredentials_GetSteamGuardDetails_Response_SessionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCredentials_GetSteamGuardDetails_Response_SessionData& CCredentials_GetSteamGuardDetails_Response_SessionData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CCredentials_GetSteamGuardDetails_Response_SessionData_steammessages_5fcredentials_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CCredentials_GetSteamGuardDetails_Response_SessionData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCredentials_GetSteamGuardDetails_Response.SessionData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  newauthentication_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    machine_name_userchosen_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&machine_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&public_ipv4_) -
        reinterpret_cast<char*>(&machine_id_)) + sizeof(public_ipv4_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CCredentials_GetSteamGuardDetails_Response_SessionData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CCredentials_GetSteamGuardDetails_Response_SessionData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 machine_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_machine_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string machine_name_userchosen = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CCredentials_GetSteamGuardDetails_Response.SessionData.machine_name_userchosen");
        object = msg->mutable_machine_name_userchosen();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional fixed32 timestamp_machine_steamguard_enabled = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_timestamp_machine_steamguard_enabled(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional bool authentication_exists_from_geoloc_before_mintime = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_authentication_exists_from_geoloc_before_mintime(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.steam.CCredentials_GetSteamGuardDetails_Response.NewAuthentication newauthentication = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CCredentials_GetSteamGuardDetails_Response_NewAuthentication::_InternalParse;
          object = msg->add_newauthentication();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      // optional bool authentication_exists_from_same_ip_before_mintime = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_authentication_exists_from_same_ip_before_mintime(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 public_ipv4 = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_public_ipv4(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CCredentials_GetSteamGuardDetails_Response_SessionData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCredentials_GetSteamGuardDetails_Response.SessionData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 machine_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_machine_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &machine_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string machine_name_userchosen = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_name_userchosen()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->machine_name_userchosen().data(), static_cast<int>(this->machine_name_userchosen().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCredentials_GetSteamGuardDetails_Response.SessionData.machine_name_userchosen");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 timestamp_machine_steamguard_enabled = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_timestamp_machine_steamguard_enabled(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &timestamp_machine_steamguard_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool authentication_exists_from_geoloc_before_mintime = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_authentication_exists_from_geoloc_before_mintime(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &authentication_exists_from_geoloc_before_mintime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CCredentials_GetSteamGuardDetails_Response.NewAuthentication newauthentication = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_newauthentication()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool authentication_exists_from_same_ip_before_mintime = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_authentication_exists_from_same_ip_before_mintime(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &authentication_exists_from_same_ip_before_mintime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 public_ipv4 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_public_ipv4(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &public_ipv4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCredentials_GetSteamGuardDetails_Response.SessionData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCredentials_GetSteamGuardDetails_Response.SessionData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CCredentials_GetSteamGuardDetails_Response_SessionData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCredentials_GetSteamGuardDetails_Response.SessionData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 machine_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->machine_id(), output);
  }

  // optional string machine_name_userchosen = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->machine_name_userchosen().data(), static_cast<int>(this->machine_name_userchosen().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCredentials_GetSteamGuardDetails_Response.SessionData.machine_name_userchosen");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->machine_name_userchosen(), output);
  }

  // optional fixed32 timestamp_machine_steamguard_enabled = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->timestamp_machine_steamguard_enabled(), output);
  }

  // optional bool authentication_exists_from_geoloc_before_mintime = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->authentication_exists_from_geoloc_before_mintime(), output);
  }

  // repeated .proto.steam.CCredentials_GetSteamGuardDetails_Response.NewAuthentication newauthentication = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->newauthentication_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->newauthentication(static_cast<int>(i)),
      output);
  }

  // optional bool authentication_exists_from_same_ip_before_mintime = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->authentication_exists_from_same_ip_before_mintime(), output);
  }

  // optional uint32 public_ipv4 = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->public_ipv4(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCredentials_GetSteamGuardDetails_Response.SessionData)
}

::google::protobuf::uint8* CCredentials_GetSteamGuardDetails_Response_SessionData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCredentials_GetSteamGuardDetails_Response.SessionData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 machine_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->machine_id(), target);
  }

  // optional string machine_name_userchosen = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->machine_name_userchosen().data(), static_cast<int>(this->machine_name_userchosen().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCredentials_GetSteamGuardDetails_Response.SessionData.machine_name_userchosen");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->machine_name_userchosen(), target);
  }

  // optional fixed32 timestamp_machine_steamguard_enabled = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->timestamp_machine_steamguard_enabled(), target);
  }

  // optional bool authentication_exists_from_geoloc_before_mintime = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->authentication_exists_from_geoloc_before_mintime(), target);
  }

  // repeated .proto.steam.CCredentials_GetSteamGuardDetails_Response.NewAuthentication newauthentication = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->newauthentication_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->newauthentication(static_cast<int>(i)), target);
  }

  // optional bool authentication_exists_from_same_ip_before_mintime = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->authentication_exists_from_same_ip_before_mintime(), target);
  }

  // optional uint32 public_ipv4 = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->public_ipv4(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCredentials_GetSteamGuardDetails_Response.SessionData)
  return target;
}

size_t CCredentials_GetSteamGuardDetails_Response_SessionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCredentials_GetSteamGuardDetails_Response.SessionData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CCredentials_GetSteamGuardDetails_Response.NewAuthentication newauthentication = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->newauthentication_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->newauthentication(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string machine_name_userchosen = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machine_name_userchosen());
    }

    // optional uint64 machine_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->machine_id());
    }

    // optional fixed32 timestamp_machine_steamguard_enabled = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional bool authentication_exists_from_geoloc_before_mintime = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool authentication_exists_from_same_ip_before_mintime = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional uint32 public_ipv4 = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->public_ipv4());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCredentials_GetSteamGuardDetails_Response_SessionData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCredentials_GetSteamGuardDetails_Response.SessionData)
  GOOGLE_DCHECK_NE(&from, this);
  const CCredentials_GetSteamGuardDetails_Response_SessionData* source =
      ::google::protobuf::DynamicCastToGenerated<CCredentials_GetSteamGuardDetails_Response_SessionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCredentials_GetSteamGuardDetails_Response.SessionData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCredentials_GetSteamGuardDetails_Response.SessionData)
    MergeFrom(*source);
  }
}

void CCredentials_GetSteamGuardDetails_Response_SessionData::MergeFrom(const CCredentials_GetSteamGuardDetails_Response_SessionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCredentials_GetSteamGuardDetails_Response.SessionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  newauthentication_.MergeFrom(from.newauthentication_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      machine_name_userchosen_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_name_userchosen_);
    }
    if (cached_has_bits & 0x00000002u) {
      machine_id_ = from.machine_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_machine_steamguard_enabled_ = from.timestamp_machine_steamguard_enabled_;
    }
    if (cached_has_bits & 0x00000008u) {
      authentication_exists_from_geoloc_before_mintime_ = from.authentication_exists_from_geoloc_before_mintime_;
    }
    if (cached_has_bits & 0x00000010u) {
      authentication_exists_from_same_ip_before_mintime_ = from.authentication_exists_from_same_ip_before_mintime_;
    }
    if (cached_has_bits & 0x00000020u) {
      public_ipv4_ = from.public_ipv4_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCredentials_GetSteamGuardDetails_Response_SessionData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCredentials_GetSteamGuardDetails_Response.SessionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCredentials_GetSteamGuardDetails_Response_SessionData::CopyFrom(const CCredentials_GetSteamGuardDetails_Response_SessionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCredentials_GetSteamGuardDetails_Response.SessionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCredentials_GetSteamGuardDetails_Response_SessionData::IsInitialized() const {
  return true;
}

void CCredentials_GetSteamGuardDetails_Response_SessionData::Swap(CCredentials_GetSteamGuardDetails_Response_SessionData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCredentials_GetSteamGuardDetails_Response_SessionData::InternalSwap(CCredentials_GetSteamGuardDetails_Response_SessionData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&newauthentication_)->InternalSwap(CastToBase(&other->newauthentication_));
  machine_name_userchosen_.Swap(&other->machine_name_userchosen_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(machine_id_, other->machine_id_);
  swap(timestamp_machine_steamguard_enabled_, other->timestamp_machine_steamguard_enabled_);
  swap(authentication_exists_from_geoloc_before_mintime_, other->authentication_exists_from_geoloc_before_mintime_);
  swap(authentication_exists_from_same_ip_before_mintime_, other->authentication_exists_from_same_ip_before_mintime_);
  swap(public_ipv4_, other->public_ipv4_);
}

::google::protobuf::Metadata CCredentials_GetSteamGuardDetails_Response_SessionData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fcredentials_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fcredentials_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CCredentials_GetSteamGuardDetails_Response::InitAsDefaultInstance() {
}
class CCredentials_GetSteamGuardDetails_Response::HasBitSetters {
 public:
  static void set_has_is_steamguard_enabled(CCredentials_GetSteamGuardDetails_Response* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_timestamp_steamguard_enabled(CCredentials_GetSteamGuardDetails_Response* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_deprecated_machine_name_userchosen(CCredentials_GetSteamGuardDetails_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_deprecated_timestamp_machine_steamguard_enabled(CCredentials_GetSteamGuardDetails_Response* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_deprecated_authentication_exists_from_geoloc_before_mintime(CCredentials_GetSteamGuardDetails_Response* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_deprecated_machine_id(CCredentials_GetSteamGuardDetails_Response* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_is_twofactor_enabled(CCredentials_GetSteamGuardDetails_Response* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_timestamp_twofactor_enabled(CCredentials_GetSteamGuardDetails_Response* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_is_phone_verified(CCredentials_GetSteamGuardDetails_Response* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCredentials_GetSteamGuardDetails_Response::kIsSteamguardEnabledFieldNumber;
const int CCredentials_GetSteamGuardDetails_Response::kTimestampSteamguardEnabledFieldNumber;
const int CCredentials_GetSteamGuardDetails_Response::kDeprecatedNewauthenticationFieldNumber;
const int CCredentials_GetSteamGuardDetails_Response::kDeprecatedMachineNameUserchosenFieldNumber;
const int CCredentials_GetSteamGuardDetails_Response::kDeprecatedTimestampMachineSteamguardEnabledFieldNumber;
const int CCredentials_GetSteamGuardDetails_Response::kDeprecatedAuthenticationExistsFromGeolocBeforeMintimeFieldNumber;
const int CCredentials_GetSteamGuardDetails_Response::kDeprecatedMachineIdFieldNumber;
const int CCredentials_GetSteamGuardDetails_Response::kSessionDataFieldNumber;
const int CCredentials_GetSteamGuardDetails_Response::kIsTwofactorEnabledFieldNumber;
const int CCredentials_GetSteamGuardDetails_Response::kTimestampTwofactorEnabledFieldNumber;
const int CCredentials_GetSteamGuardDetails_Response::kIsPhoneVerifiedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCredentials_GetSteamGuardDetails_Response::CCredentials_GetSteamGuardDetails_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCredentials_GetSteamGuardDetails_Response)
}
CCredentials_GetSteamGuardDetails_Response::CCredentials_GetSteamGuardDetails_Response(const CCredentials_GetSteamGuardDetails_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      deprecated_newauthentication_(from.deprecated_newauthentication_),
      session_data_(from.session_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  deprecated_machine_name_userchosen_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_deprecated_machine_name_userchosen()) {
    deprecated_machine_name_userchosen_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deprecated_machine_name_userchosen_);
  }
  ::memcpy(&timestamp_steamguard_enabled_, &from.timestamp_steamguard_enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_twofactor_enabled_) -
    reinterpret_cast<char*>(&timestamp_steamguard_enabled_)) + sizeof(timestamp_twofactor_enabled_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCredentials_GetSteamGuardDetails_Response)
}

void CCredentials_GetSteamGuardDetails_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CCredentials_GetSteamGuardDetails_Response_steammessages_5fcredentials_2esteamclient_2eproto.base);
  deprecated_machine_name_userchosen_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_steamguard_enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_twofactor_enabled_) -
      reinterpret_cast<char*>(&timestamp_steamguard_enabled_)) + sizeof(timestamp_twofactor_enabled_));
}

CCredentials_GetSteamGuardDetails_Response::~CCredentials_GetSteamGuardDetails_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CCredentials_GetSteamGuardDetails_Response)
  SharedDtor();
}

void CCredentials_GetSteamGuardDetails_Response::SharedDtor() {
  deprecated_machine_name_userchosen_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CCredentials_GetSteamGuardDetails_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCredentials_GetSteamGuardDetails_Response& CCredentials_GetSteamGuardDetails_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CCredentials_GetSteamGuardDetails_Response_steammessages_5fcredentials_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CCredentials_GetSteamGuardDetails_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCredentials_GetSteamGuardDetails_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deprecated_newauthentication_.Clear();
  session_data_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    deprecated_machine_name_userchosen_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&timestamp_steamguard_enabled_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_phone_verified_) -
        reinterpret_cast<char*>(&timestamp_steamguard_enabled_)) + sizeof(is_phone_verified_));
  }
  timestamp_twofactor_enabled_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CCredentials_GetSteamGuardDetails_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CCredentials_GetSteamGuardDetails_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool is_steamguard_enabled = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_is_steamguard_enabled(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed32 timestamp_steamguard_enabled = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_timestamp_steamguard_enabled(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // repeated .proto.steam.CCredentials_GetSteamGuardDetails_Response.NewAuthentication deprecated_newauthentication = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CCredentials_GetSteamGuardDetails_Response_NewAuthentication::_InternalParse;
          object = msg->add_deprecated_newauthentication();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // optional string deprecated_machine_name_userchosen = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CCredentials_GetSteamGuardDetails_Response.deprecated_machine_name_userchosen");
        object = msg->mutable_deprecated_machine_name_userchosen();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional fixed32 deprecated_timestamp_machine_steamguard_enabled = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 45) goto handle_unusual;
        msg->set_deprecated_timestamp_machine_steamguard_enabled(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional bool deprecated_authentication_exists_from_geoloc_before_mintime = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_deprecated_authentication_exists_from_geoloc_before_mintime(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 deprecated_machine_id = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_deprecated_machine_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.steam.CCredentials_GetSteamGuardDetails_Response.SessionData session_data = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CCredentials_GetSteamGuardDetails_Response_SessionData::_InternalParse;
          object = msg->add_session_data();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 66 && (ptr += 1));
        break;
      }
      // optional bool is_twofactor_enabled = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_is_twofactor_enabled(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed32 timestamp_twofactor_enabled = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 85) goto handle_unusual;
        msg->set_timestamp_twofactor_enabled(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional bool is_phone_verified = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_is_phone_verified(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CCredentials_GetSteamGuardDetails_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCredentials_GetSteamGuardDetails_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_steamguard_enabled = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_is_steamguard_enabled(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_steamguard_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 timestamp_steamguard_enabled = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_timestamp_steamguard_enabled(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &timestamp_steamguard_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CCredentials_GetSteamGuardDetails_Response.NewAuthentication deprecated_newauthentication = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_deprecated_newauthentication()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string deprecated_machine_name_userchosen = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deprecated_machine_name_userchosen()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deprecated_machine_name_userchosen().data(), static_cast<int>(this->deprecated_machine_name_userchosen().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCredentials_GetSteamGuardDetails_Response.deprecated_machine_name_userchosen");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 deprecated_timestamp_machine_steamguard_enabled = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (45 & 0xFF)) {
          HasBitSetters::set_has_deprecated_timestamp_machine_steamguard_enabled(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &deprecated_timestamp_machine_steamguard_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool deprecated_authentication_exists_from_geoloc_before_mintime = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_deprecated_authentication_exists_from_geoloc_before_mintime(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &deprecated_authentication_exists_from_geoloc_before_mintime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 deprecated_machine_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_deprecated_machine_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &deprecated_machine_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CCredentials_GetSteamGuardDetails_Response.SessionData session_data = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_session_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_twofactor_enabled = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_is_twofactor_enabled(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_twofactor_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 timestamp_twofactor_enabled = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (85 & 0xFF)) {
          HasBitSetters::set_has_timestamp_twofactor_enabled(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &timestamp_twofactor_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_phone_verified = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_is_phone_verified(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_phone_verified_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCredentials_GetSteamGuardDetails_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCredentials_GetSteamGuardDetails_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CCredentials_GetSteamGuardDetails_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCredentials_GetSteamGuardDetails_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_steamguard_enabled = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_steamguard_enabled(), output);
  }

  // optional fixed32 timestamp_steamguard_enabled = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->timestamp_steamguard_enabled(), output);
  }

  // repeated .proto.steam.CCredentials_GetSteamGuardDetails_Response.NewAuthentication deprecated_newauthentication = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->deprecated_newauthentication_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->deprecated_newauthentication(static_cast<int>(i)),
      output);
  }

  // optional string deprecated_machine_name_userchosen = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_machine_name_userchosen().data(), static_cast<int>(this->deprecated_machine_name_userchosen().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCredentials_GetSteamGuardDetails_Response.deprecated_machine_name_userchosen");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->deprecated_machine_name_userchosen(), output);
  }

  // optional fixed32 deprecated_timestamp_machine_steamguard_enabled = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->deprecated_timestamp_machine_steamguard_enabled(), output);
  }

  // optional bool deprecated_authentication_exists_from_geoloc_before_mintime = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->deprecated_authentication_exists_from_geoloc_before_mintime(), output);
  }

  // optional uint64 deprecated_machine_id = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->deprecated_machine_id(), output);
  }

  // repeated .proto.steam.CCredentials_GetSteamGuardDetails_Response.SessionData session_data = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->session_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->session_data(static_cast<int>(i)),
      output);
  }

  // optional bool is_twofactor_enabled = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_twofactor_enabled(), output);
  }

  // optional fixed32 timestamp_twofactor_enabled = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(10, this->timestamp_twofactor_enabled(), output);
  }

  // optional bool is_phone_verified = 11;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_phone_verified(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCredentials_GetSteamGuardDetails_Response)
}

::google::protobuf::uint8* CCredentials_GetSteamGuardDetails_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCredentials_GetSteamGuardDetails_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_steamguard_enabled = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_steamguard_enabled(), target);
  }

  // optional fixed32 timestamp_steamguard_enabled = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->timestamp_steamguard_enabled(), target);
  }

  // repeated .proto.steam.CCredentials_GetSteamGuardDetails_Response.NewAuthentication deprecated_newauthentication = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->deprecated_newauthentication_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->deprecated_newauthentication(static_cast<int>(i)), target);
  }

  // optional string deprecated_machine_name_userchosen = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_machine_name_userchosen().data(), static_cast<int>(this->deprecated_machine_name_userchosen().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCredentials_GetSteamGuardDetails_Response.deprecated_machine_name_userchosen");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->deprecated_machine_name_userchosen(), target);
  }

  // optional fixed32 deprecated_timestamp_machine_steamguard_enabled = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->deprecated_timestamp_machine_steamguard_enabled(), target);
  }

  // optional bool deprecated_authentication_exists_from_geoloc_before_mintime = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->deprecated_authentication_exists_from_geoloc_before_mintime(), target);
  }

  // optional uint64 deprecated_machine_id = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->deprecated_machine_id(), target);
  }

  // repeated .proto.steam.CCredentials_GetSteamGuardDetails_Response.SessionData session_data = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->session_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->session_data(static_cast<int>(i)), target);
  }

  // optional bool is_twofactor_enabled = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_twofactor_enabled(), target);
  }

  // optional fixed32 timestamp_twofactor_enabled = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(10, this->timestamp_twofactor_enabled(), target);
  }

  // optional bool is_phone_verified = 11;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_phone_verified(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCredentials_GetSteamGuardDetails_Response)
  return target;
}

size_t CCredentials_GetSteamGuardDetails_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCredentials_GetSteamGuardDetails_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CCredentials_GetSteamGuardDetails_Response.NewAuthentication deprecated_newauthentication = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->deprecated_newauthentication_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->deprecated_newauthentication(static_cast<int>(i)));
    }
  }

  // repeated .proto.steam.CCredentials_GetSteamGuardDetails_Response.SessionData session_data = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->session_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->session_data(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string deprecated_machine_name_userchosen = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deprecated_machine_name_userchosen());
    }

    // optional fixed32 timestamp_steamguard_enabled = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional fixed32 deprecated_timestamp_machine_steamguard_enabled = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional uint64 deprecated_machine_id = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->deprecated_machine_id());
    }

    // optional bool is_steamguard_enabled = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool deprecated_authentication_exists_from_geoloc_before_mintime = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool is_twofactor_enabled = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool is_phone_verified = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional fixed32 timestamp_twofactor_enabled = 10;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCredentials_GetSteamGuardDetails_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCredentials_GetSteamGuardDetails_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCredentials_GetSteamGuardDetails_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CCredentials_GetSteamGuardDetails_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCredentials_GetSteamGuardDetails_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCredentials_GetSteamGuardDetails_Response)
    MergeFrom(*source);
  }
}

void CCredentials_GetSteamGuardDetails_Response::MergeFrom(const CCredentials_GetSteamGuardDetails_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCredentials_GetSteamGuardDetails_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  deprecated_newauthentication_.MergeFrom(from.deprecated_newauthentication_);
  session_data_.MergeFrom(from.session_data_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      deprecated_machine_name_userchosen_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deprecated_machine_name_userchosen_);
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_steamguard_enabled_ = from.timestamp_steamguard_enabled_;
    }
    if (cached_has_bits & 0x00000004u) {
      deprecated_timestamp_machine_steamguard_enabled_ = from.deprecated_timestamp_machine_steamguard_enabled_;
    }
    if (cached_has_bits & 0x00000008u) {
      deprecated_machine_id_ = from.deprecated_machine_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_steamguard_enabled_ = from.is_steamguard_enabled_;
    }
    if (cached_has_bits & 0x00000020u) {
      deprecated_authentication_exists_from_geoloc_before_mintime_ = from.deprecated_authentication_exists_from_geoloc_before_mintime_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_twofactor_enabled_ = from.is_twofactor_enabled_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_phone_verified_ = from.is_phone_verified_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_timestamp_twofactor_enabled(from.timestamp_twofactor_enabled());
  }
}

void CCredentials_GetSteamGuardDetails_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCredentials_GetSteamGuardDetails_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCredentials_GetSteamGuardDetails_Response::CopyFrom(const CCredentials_GetSteamGuardDetails_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCredentials_GetSteamGuardDetails_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCredentials_GetSteamGuardDetails_Response::IsInitialized() const {
  return true;
}

void CCredentials_GetSteamGuardDetails_Response::Swap(CCredentials_GetSteamGuardDetails_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCredentials_GetSteamGuardDetails_Response::InternalSwap(CCredentials_GetSteamGuardDetails_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&deprecated_newauthentication_)->InternalSwap(CastToBase(&other->deprecated_newauthentication_));
  CastToBase(&session_data_)->InternalSwap(CastToBase(&other->session_data_));
  deprecated_machine_name_userchosen_.Swap(&other->deprecated_machine_name_userchosen_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_steamguard_enabled_, other->timestamp_steamguard_enabled_);
  swap(deprecated_timestamp_machine_steamguard_enabled_, other->deprecated_timestamp_machine_steamguard_enabled_);
  swap(deprecated_machine_id_, other->deprecated_machine_id_);
  swap(is_steamguard_enabled_, other->is_steamguard_enabled_);
  swap(deprecated_authentication_exists_from_geoloc_before_mintime_, other->deprecated_authentication_exists_from_geoloc_before_mintime_);
  swap(is_twofactor_enabled_, other->is_twofactor_enabled_);
  swap(is_phone_verified_, other->is_phone_verified_);
  swap(timestamp_twofactor_enabled_, other->timestamp_twofactor_enabled_);
}

::google::protobuf::Metadata CCredentials_GetSteamGuardDetails_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fcredentials_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fcredentials_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CCredentials_NewMachineNotificationDialog_Request::InitAsDefaultInstance() {
}
class CCredentials_NewMachineNotificationDialog_Request::HasBitSetters {
 public:
  static void set_has_is_approved(CCredentials_NewMachineNotificationDialog_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_is_wizard_complete(CCredentials_NewMachineNotificationDialog_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCredentials_NewMachineNotificationDialog_Request::kIsApprovedFieldNumber;
const int CCredentials_NewMachineNotificationDialog_Request::kIsWizardCompleteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCredentials_NewMachineNotificationDialog_Request::CCredentials_NewMachineNotificationDialog_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCredentials_NewMachineNotificationDialog_Request)
}
CCredentials_NewMachineNotificationDialog_Request::CCredentials_NewMachineNotificationDialog_Request(const CCredentials_NewMachineNotificationDialog_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_approved_, &from.is_approved_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_wizard_complete_) -
    reinterpret_cast<char*>(&is_approved_)) + sizeof(is_wizard_complete_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCredentials_NewMachineNotificationDialog_Request)
}

void CCredentials_NewMachineNotificationDialog_Request::SharedCtor() {
  ::memset(&is_approved_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_wizard_complete_) -
      reinterpret_cast<char*>(&is_approved_)) + sizeof(is_wizard_complete_));
}

CCredentials_NewMachineNotificationDialog_Request::~CCredentials_NewMachineNotificationDialog_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CCredentials_NewMachineNotificationDialog_Request)
  SharedDtor();
}

void CCredentials_NewMachineNotificationDialog_Request::SharedDtor() {
}

void CCredentials_NewMachineNotificationDialog_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCredentials_NewMachineNotificationDialog_Request& CCredentials_NewMachineNotificationDialog_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CCredentials_NewMachineNotificationDialog_Request_steammessages_5fcredentials_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CCredentials_NewMachineNotificationDialog_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCredentials_NewMachineNotificationDialog_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&is_approved_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_wizard_complete_) -
      reinterpret_cast<char*>(&is_approved_)) + sizeof(is_wizard_complete_));
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CCredentials_NewMachineNotificationDialog_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CCredentials_NewMachineNotificationDialog_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool is_approved = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_is_approved(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool is_wizard_complete = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_is_wizard_complete(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CCredentials_NewMachineNotificationDialog_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCredentials_NewMachineNotificationDialog_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_approved = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_is_approved(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_approved_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_wizard_complete = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_is_wizard_complete(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_wizard_complete_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCredentials_NewMachineNotificationDialog_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCredentials_NewMachineNotificationDialog_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CCredentials_NewMachineNotificationDialog_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCredentials_NewMachineNotificationDialog_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_approved = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_approved(), output);
  }

  // optional bool is_wizard_complete = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_wizard_complete(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCredentials_NewMachineNotificationDialog_Request)
}

::google::protobuf::uint8* CCredentials_NewMachineNotificationDialog_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCredentials_NewMachineNotificationDialog_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_approved = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_approved(), target);
  }

  // optional bool is_wizard_complete = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_wizard_complete(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCredentials_NewMachineNotificationDialog_Request)
  return target;
}

size_t CCredentials_NewMachineNotificationDialog_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCredentials_NewMachineNotificationDialog_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool is_approved = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool is_wizard_complete = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCredentials_NewMachineNotificationDialog_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCredentials_NewMachineNotificationDialog_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCredentials_NewMachineNotificationDialog_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CCredentials_NewMachineNotificationDialog_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCredentials_NewMachineNotificationDialog_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCredentials_NewMachineNotificationDialog_Request)
    MergeFrom(*source);
  }
}

void CCredentials_NewMachineNotificationDialog_Request::MergeFrom(const CCredentials_NewMachineNotificationDialog_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCredentials_NewMachineNotificationDialog_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      is_approved_ = from.is_approved_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_wizard_complete_ = from.is_wizard_complete_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCredentials_NewMachineNotificationDialog_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCredentials_NewMachineNotificationDialog_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCredentials_NewMachineNotificationDialog_Request::CopyFrom(const CCredentials_NewMachineNotificationDialog_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCredentials_NewMachineNotificationDialog_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCredentials_NewMachineNotificationDialog_Request::IsInitialized() const {
  return true;
}

void CCredentials_NewMachineNotificationDialog_Request::Swap(CCredentials_NewMachineNotificationDialog_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCredentials_NewMachineNotificationDialog_Request::InternalSwap(CCredentials_NewMachineNotificationDialog_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(is_approved_, other->is_approved_);
  swap(is_wizard_complete_, other->is_wizard_complete_);
}

::google::protobuf::Metadata CCredentials_NewMachineNotificationDialog_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fcredentials_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fcredentials_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CCredentials_NewMachineNotificationDialog_Response::InitAsDefaultInstance() {
}
class CCredentials_NewMachineNotificationDialog_Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCredentials_NewMachineNotificationDialog_Response::CCredentials_NewMachineNotificationDialog_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCredentials_NewMachineNotificationDialog_Response)
}
CCredentials_NewMachineNotificationDialog_Response::CCredentials_NewMachineNotificationDialog_Response(const CCredentials_NewMachineNotificationDialog_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCredentials_NewMachineNotificationDialog_Response)
}

void CCredentials_NewMachineNotificationDialog_Response::SharedCtor() {
}

CCredentials_NewMachineNotificationDialog_Response::~CCredentials_NewMachineNotificationDialog_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CCredentials_NewMachineNotificationDialog_Response)
  SharedDtor();
}

void CCredentials_NewMachineNotificationDialog_Response::SharedDtor() {
}

void CCredentials_NewMachineNotificationDialog_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCredentials_NewMachineNotificationDialog_Response& CCredentials_NewMachineNotificationDialog_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CCredentials_NewMachineNotificationDialog_Response_steammessages_5fcredentials_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CCredentials_NewMachineNotificationDialog_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCredentials_NewMachineNotificationDialog_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CCredentials_NewMachineNotificationDialog_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CCredentials_NewMachineNotificationDialog_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CCredentials_NewMachineNotificationDialog_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCredentials_NewMachineNotificationDialog_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCredentials_NewMachineNotificationDialog_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCredentials_NewMachineNotificationDialog_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CCredentials_NewMachineNotificationDialog_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCredentials_NewMachineNotificationDialog_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCredentials_NewMachineNotificationDialog_Response)
}

::google::protobuf::uint8* CCredentials_NewMachineNotificationDialog_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCredentials_NewMachineNotificationDialog_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCredentials_NewMachineNotificationDialog_Response)
  return target;
}

size_t CCredentials_NewMachineNotificationDialog_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCredentials_NewMachineNotificationDialog_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCredentials_NewMachineNotificationDialog_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCredentials_NewMachineNotificationDialog_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCredentials_NewMachineNotificationDialog_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CCredentials_NewMachineNotificationDialog_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCredentials_NewMachineNotificationDialog_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCredentials_NewMachineNotificationDialog_Response)
    MergeFrom(*source);
  }
}

void CCredentials_NewMachineNotificationDialog_Response::MergeFrom(const CCredentials_NewMachineNotificationDialog_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCredentials_NewMachineNotificationDialog_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CCredentials_NewMachineNotificationDialog_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCredentials_NewMachineNotificationDialog_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCredentials_NewMachineNotificationDialog_Response::CopyFrom(const CCredentials_NewMachineNotificationDialog_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCredentials_NewMachineNotificationDialog_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCredentials_NewMachineNotificationDialog_Response::IsInitialized() const {
  return true;
}

void CCredentials_NewMachineNotificationDialog_Response::Swap(CCredentials_NewMachineNotificationDialog_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCredentials_NewMachineNotificationDialog_Response::InternalSwap(CCredentials_NewMachineNotificationDialog_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CCredentials_NewMachineNotificationDialog_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fcredentials_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fcredentials_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CCredentials_ValidateEmailAddress_Request::InitAsDefaultInstance() {
}
class CCredentials_ValidateEmailAddress_Request::HasBitSetters {
 public:
  static void set_has_stoken(CCredentials_ValidateEmailAddress_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCredentials_ValidateEmailAddress_Request::kStokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCredentials_ValidateEmailAddress_Request::CCredentials_ValidateEmailAddress_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCredentials_ValidateEmailAddress_Request)
}
CCredentials_ValidateEmailAddress_Request::CCredentials_ValidateEmailAddress_Request(const CCredentials_ValidateEmailAddress_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stoken_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_stoken()) {
    stoken_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stoken_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCredentials_ValidateEmailAddress_Request)
}

void CCredentials_ValidateEmailAddress_Request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CCredentials_ValidateEmailAddress_Request_steammessages_5fcredentials_2esteamclient_2eproto.base);
  stoken_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CCredentials_ValidateEmailAddress_Request::~CCredentials_ValidateEmailAddress_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CCredentials_ValidateEmailAddress_Request)
  SharedDtor();
}

void CCredentials_ValidateEmailAddress_Request::SharedDtor() {
  stoken_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CCredentials_ValidateEmailAddress_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCredentials_ValidateEmailAddress_Request& CCredentials_ValidateEmailAddress_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CCredentials_ValidateEmailAddress_Request_steammessages_5fcredentials_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CCredentials_ValidateEmailAddress_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCredentials_ValidateEmailAddress_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    stoken_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CCredentials_ValidateEmailAddress_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CCredentials_ValidateEmailAddress_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string stoken = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CCredentials_ValidateEmailAddress_Request.stoken");
        object = msg->mutable_stoken();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CCredentials_ValidateEmailAddress_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCredentials_ValidateEmailAddress_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string stoken = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stoken()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stoken().data(), static_cast<int>(this->stoken().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCredentials_ValidateEmailAddress_Request.stoken");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCredentials_ValidateEmailAddress_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCredentials_ValidateEmailAddress_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CCredentials_ValidateEmailAddress_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCredentials_ValidateEmailAddress_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string stoken = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stoken().data(), static_cast<int>(this->stoken().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCredentials_ValidateEmailAddress_Request.stoken");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->stoken(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCredentials_ValidateEmailAddress_Request)
}

::google::protobuf::uint8* CCredentials_ValidateEmailAddress_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCredentials_ValidateEmailAddress_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string stoken = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stoken().data(), static_cast<int>(this->stoken().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCredentials_ValidateEmailAddress_Request.stoken");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stoken(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCredentials_ValidateEmailAddress_Request)
  return target;
}

size_t CCredentials_ValidateEmailAddress_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCredentials_ValidateEmailAddress_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string stoken = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stoken());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCredentials_ValidateEmailAddress_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCredentials_ValidateEmailAddress_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCredentials_ValidateEmailAddress_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CCredentials_ValidateEmailAddress_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCredentials_ValidateEmailAddress_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCredentials_ValidateEmailAddress_Request)
    MergeFrom(*source);
  }
}

void CCredentials_ValidateEmailAddress_Request::MergeFrom(const CCredentials_ValidateEmailAddress_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCredentials_ValidateEmailAddress_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_stoken()) {
    _has_bits_[0] |= 0x00000001u;
    stoken_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stoken_);
  }
}

void CCredentials_ValidateEmailAddress_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCredentials_ValidateEmailAddress_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCredentials_ValidateEmailAddress_Request::CopyFrom(const CCredentials_ValidateEmailAddress_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCredentials_ValidateEmailAddress_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCredentials_ValidateEmailAddress_Request::IsInitialized() const {
  return true;
}

void CCredentials_ValidateEmailAddress_Request::Swap(CCredentials_ValidateEmailAddress_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCredentials_ValidateEmailAddress_Request::InternalSwap(CCredentials_ValidateEmailAddress_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  stoken_.Swap(&other->stoken_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CCredentials_ValidateEmailAddress_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fcredentials_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fcredentials_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CCredentials_ValidateEmailAddress_Response::InitAsDefaultInstance() {
}
class CCredentials_ValidateEmailAddress_Response::HasBitSetters {
 public:
  static void set_has_was_validated(CCredentials_ValidateEmailAddress_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCredentials_ValidateEmailAddress_Response::kWasValidatedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCredentials_ValidateEmailAddress_Response::CCredentials_ValidateEmailAddress_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCredentials_ValidateEmailAddress_Response)
}
CCredentials_ValidateEmailAddress_Response::CCredentials_ValidateEmailAddress_Response(const CCredentials_ValidateEmailAddress_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  was_validated_ = from.was_validated_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCredentials_ValidateEmailAddress_Response)
}

void CCredentials_ValidateEmailAddress_Response::SharedCtor() {
  was_validated_ = false;
}

CCredentials_ValidateEmailAddress_Response::~CCredentials_ValidateEmailAddress_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CCredentials_ValidateEmailAddress_Response)
  SharedDtor();
}

void CCredentials_ValidateEmailAddress_Response::SharedDtor() {
}

void CCredentials_ValidateEmailAddress_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCredentials_ValidateEmailAddress_Response& CCredentials_ValidateEmailAddress_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CCredentials_ValidateEmailAddress_Response_steammessages_5fcredentials_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CCredentials_ValidateEmailAddress_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCredentials_ValidateEmailAddress_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  was_validated_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CCredentials_ValidateEmailAddress_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CCredentials_ValidateEmailAddress_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool was_validated = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_was_validated(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CCredentials_ValidateEmailAddress_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCredentials_ValidateEmailAddress_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool was_validated = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_was_validated(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &was_validated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCredentials_ValidateEmailAddress_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCredentials_ValidateEmailAddress_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CCredentials_ValidateEmailAddress_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCredentials_ValidateEmailAddress_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool was_validated = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->was_validated(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCredentials_ValidateEmailAddress_Response)
}

::google::protobuf::uint8* CCredentials_ValidateEmailAddress_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCredentials_ValidateEmailAddress_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool was_validated = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->was_validated(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCredentials_ValidateEmailAddress_Response)
  return target;
}

size_t CCredentials_ValidateEmailAddress_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCredentials_ValidateEmailAddress_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool was_validated = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCredentials_ValidateEmailAddress_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCredentials_ValidateEmailAddress_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCredentials_ValidateEmailAddress_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CCredentials_ValidateEmailAddress_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCredentials_ValidateEmailAddress_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCredentials_ValidateEmailAddress_Response)
    MergeFrom(*source);
  }
}

void CCredentials_ValidateEmailAddress_Response::MergeFrom(const CCredentials_ValidateEmailAddress_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCredentials_ValidateEmailAddress_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_was_validated()) {
    set_was_validated(from.was_validated());
  }
}

void CCredentials_ValidateEmailAddress_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCredentials_ValidateEmailAddress_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCredentials_ValidateEmailAddress_Response::CopyFrom(const CCredentials_ValidateEmailAddress_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCredentials_ValidateEmailAddress_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCredentials_ValidateEmailAddress_Response::IsInitialized() const {
  return true;
}

void CCredentials_ValidateEmailAddress_Response::Swap(CCredentials_ValidateEmailAddress_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCredentials_ValidateEmailAddress_Response::InternalSwap(CCredentials_ValidateEmailAddress_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(was_validated_, other->was_validated_);
}

::google::protobuf::Metadata CCredentials_ValidateEmailAddress_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fcredentials_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fcredentials_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CCredentials_SteamGuardPhishingReport_Request::InitAsDefaultInstance() {
}
class CCredentials_SteamGuardPhishingReport_Request::HasBitSetters {
 public:
  static void set_has_param_string(CCredentials_SteamGuardPhishingReport_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_ipaddress_actual(CCredentials_SteamGuardPhishingReport_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCredentials_SteamGuardPhishingReport_Request::kParamStringFieldNumber;
const int CCredentials_SteamGuardPhishingReport_Request::kIpaddressActualFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCredentials_SteamGuardPhishingReport_Request::CCredentials_SteamGuardPhishingReport_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCredentials_SteamGuardPhishingReport_Request)
}
CCredentials_SteamGuardPhishingReport_Request::CCredentials_SteamGuardPhishingReport_Request(const CCredentials_SteamGuardPhishingReport_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  param_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_param_string()) {
    param_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.param_string_);
  }
  ipaddress_actual_ = from.ipaddress_actual_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCredentials_SteamGuardPhishingReport_Request)
}

void CCredentials_SteamGuardPhishingReport_Request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CCredentials_SteamGuardPhishingReport_Request_steammessages_5fcredentials_2esteamclient_2eproto.base);
  param_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipaddress_actual_ = 0u;
}

CCredentials_SteamGuardPhishingReport_Request::~CCredentials_SteamGuardPhishingReport_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CCredentials_SteamGuardPhishingReport_Request)
  SharedDtor();
}

void CCredentials_SteamGuardPhishingReport_Request::SharedDtor() {
  param_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CCredentials_SteamGuardPhishingReport_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCredentials_SteamGuardPhishingReport_Request& CCredentials_SteamGuardPhishingReport_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CCredentials_SteamGuardPhishingReport_Request_steammessages_5fcredentials_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CCredentials_SteamGuardPhishingReport_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCredentials_SteamGuardPhishingReport_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    param_string_.ClearNonDefaultToEmptyNoArena();
  }
  ipaddress_actual_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CCredentials_SteamGuardPhishingReport_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CCredentials_SteamGuardPhishingReport_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string param_string = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CCredentials_SteamGuardPhishingReport_Request.param_string");
        object = msg->mutable_param_string();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 ipaddress_actual = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_ipaddress_actual(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CCredentials_SteamGuardPhishingReport_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCredentials_SteamGuardPhishingReport_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string param_string = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_param_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->param_string().data(), static_cast<int>(this->param_string().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCredentials_SteamGuardPhishingReport_Request.param_string");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ipaddress_actual = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_ipaddress_actual(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ipaddress_actual_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCredentials_SteamGuardPhishingReport_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCredentials_SteamGuardPhishingReport_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CCredentials_SteamGuardPhishingReport_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCredentials_SteamGuardPhishingReport_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string param_string = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param_string().data(), static_cast<int>(this->param_string().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCredentials_SteamGuardPhishingReport_Request.param_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->param_string(), output);
  }

  // optional uint32 ipaddress_actual = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ipaddress_actual(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCredentials_SteamGuardPhishingReport_Request)
}

::google::protobuf::uint8* CCredentials_SteamGuardPhishingReport_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCredentials_SteamGuardPhishingReport_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string param_string = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param_string().data(), static_cast<int>(this->param_string().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCredentials_SteamGuardPhishingReport_Request.param_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->param_string(), target);
  }

  // optional uint32 ipaddress_actual = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ipaddress_actual(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCredentials_SteamGuardPhishingReport_Request)
  return target;
}

size_t CCredentials_SteamGuardPhishingReport_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCredentials_SteamGuardPhishingReport_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string param_string = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->param_string());
    }

    // optional uint32 ipaddress_actual = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ipaddress_actual());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCredentials_SteamGuardPhishingReport_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCredentials_SteamGuardPhishingReport_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCredentials_SteamGuardPhishingReport_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CCredentials_SteamGuardPhishingReport_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCredentials_SteamGuardPhishingReport_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCredentials_SteamGuardPhishingReport_Request)
    MergeFrom(*source);
  }
}

void CCredentials_SteamGuardPhishingReport_Request::MergeFrom(const CCredentials_SteamGuardPhishingReport_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCredentials_SteamGuardPhishingReport_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      param_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.param_string_);
    }
    if (cached_has_bits & 0x00000002u) {
      ipaddress_actual_ = from.ipaddress_actual_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCredentials_SteamGuardPhishingReport_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCredentials_SteamGuardPhishingReport_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCredentials_SteamGuardPhishingReport_Request::CopyFrom(const CCredentials_SteamGuardPhishingReport_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCredentials_SteamGuardPhishingReport_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCredentials_SteamGuardPhishingReport_Request::IsInitialized() const {
  return true;
}

void CCredentials_SteamGuardPhishingReport_Request::Swap(CCredentials_SteamGuardPhishingReport_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCredentials_SteamGuardPhishingReport_Request::InternalSwap(CCredentials_SteamGuardPhishingReport_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  param_string_.Swap(&other->param_string_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ipaddress_actual_, other->ipaddress_actual_);
}

::google::protobuf::Metadata CCredentials_SteamGuardPhishingReport_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fcredentials_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fcredentials_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CCredentials_SteamGuardPhishingReport_Response::InitAsDefaultInstance() {
}
class CCredentials_SteamGuardPhishingReport_Response::HasBitSetters {
 public:
  static void set_has_ipaddress_loginattempt(CCredentials_SteamGuardPhishingReport_Response* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_countryname_loginattempt(CCredentials_SteamGuardPhishingReport_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_statename_loginattempt(CCredentials_SteamGuardPhishingReport_Response* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_cityname_loginattempt(CCredentials_SteamGuardPhishingReport_Response* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_ipaddress_actual(CCredentials_SteamGuardPhishingReport_Response* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_countryname_actual(CCredentials_SteamGuardPhishingReport_Response* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_statename_actual(CCredentials_SteamGuardPhishingReport_Response* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_cityname_actual(CCredentials_SteamGuardPhishingReport_Response* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_steamguard_code(CCredentials_SteamGuardPhishingReport_Response* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCredentials_SteamGuardPhishingReport_Response::kIpaddressLoginattemptFieldNumber;
const int CCredentials_SteamGuardPhishingReport_Response::kCountrynameLoginattemptFieldNumber;
const int CCredentials_SteamGuardPhishingReport_Response::kStatenameLoginattemptFieldNumber;
const int CCredentials_SteamGuardPhishingReport_Response::kCitynameLoginattemptFieldNumber;
const int CCredentials_SteamGuardPhishingReport_Response::kIpaddressActualFieldNumber;
const int CCredentials_SteamGuardPhishingReport_Response::kCountrynameActualFieldNumber;
const int CCredentials_SteamGuardPhishingReport_Response::kStatenameActualFieldNumber;
const int CCredentials_SteamGuardPhishingReport_Response::kCitynameActualFieldNumber;
const int CCredentials_SteamGuardPhishingReport_Response::kSteamguardCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCredentials_SteamGuardPhishingReport_Response::CCredentials_SteamGuardPhishingReport_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCredentials_SteamGuardPhishingReport_Response)
}
CCredentials_SteamGuardPhishingReport_Response::CCredentials_SteamGuardPhishingReport_Response(const CCredentials_SteamGuardPhishingReport_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  countryname_loginattempt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_countryname_loginattempt()) {
    countryname_loginattempt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.countryname_loginattempt_);
  }
  statename_loginattempt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_statename_loginattempt()) {
    statename_loginattempt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.statename_loginattempt_);
  }
  cityname_loginattempt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cityname_loginattempt()) {
    cityname_loginattempt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cityname_loginattempt_);
  }
  countryname_actual_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_countryname_actual()) {
    countryname_actual_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.countryname_actual_);
  }
  statename_actual_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_statename_actual()) {
    statename_actual_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.statename_actual_);
  }
  cityname_actual_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cityname_actual()) {
    cityname_actual_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cityname_actual_);
  }
  steamguard_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_steamguard_code()) {
    steamguard_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.steamguard_code_);
  }
  ::memcpy(&ipaddress_loginattempt_, &from.ipaddress_loginattempt_,
    static_cast<size_t>(reinterpret_cast<char*>(&ipaddress_actual_) -
    reinterpret_cast<char*>(&ipaddress_loginattempt_)) + sizeof(ipaddress_actual_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCredentials_SteamGuardPhishingReport_Response)
}

void CCredentials_SteamGuardPhishingReport_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CCredentials_SteamGuardPhishingReport_Response_steammessages_5fcredentials_2esteamclient_2eproto.base);
  countryname_loginattempt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  statename_loginattempt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cityname_loginattempt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  countryname_actual_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  statename_actual_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cityname_actual_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  steamguard_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ipaddress_loginattempt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ipaddress_actual_) -
      reinterpret_cast<char*>(&ipaddress_loginattempt_)) + sizeof(ipaddress_actual_));
}

CCredentials_SteamGuardPhishingReport_Response::~CCredentials_SteamGuardPhishingReport_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CCredentials_SteamGuardPhishingReport_Response)
  SharedDtor();
}

void CCredentials_SteamGuardPhishingReport_Response::SharedDtor() {
  countryname_loginattempt_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  statename_loginattempt_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cityname_loginattempt_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  countryname_actual_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  statename_actual_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cityname_actual_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  steamguard_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CCredentials_SteamGuardPhishingReport_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCredentials_SteamGuardPhishingReport_Response& CCredentials_SteamGuardPhishingReport_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CCredentials_SteamGuardPhishingReport_Response_steammessages_5fcredentials_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CCredentials_SteamGuardPhishingReport_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCredentials_SteamGuardPhishingReport_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      countryname_loginattempt_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      statename_loginattempt_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      cityname_loginattempt_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      countryname_actual_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      statename_actual_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      cityname_actual_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      steamguard_code_.ClearNonDefaultToEmptyNoArena();
    }
  }
  ipaddress_loginattempt_ = 0u;
  ipaddress_actual_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CCredentials_SteamGuardPhishingReport_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CCredentials_SteamGuardPhishingReport_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 ipaddress_loginattempt = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_ipaddress_loginattempt(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string countryname_loginattempt = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CCredentials_SteamGuardPhishingReport_Response.countryname_loginattempt");
        object = msg->mutable_countryname_loginattempt();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string statename_loginattempt = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CCredentials_SteamGuardPhishingReport_Response.statename_loginattempt");
        object = msg->mutable_statename_loginattempt();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string cityname_loginattempt = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CCredentials_SteamGuardPhishingReport_Response.cityname_loginattempt");
        object = msg->mutable_cityname_loginattempt();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 ipaddress_actual = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_ipaddress_actual(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string countryname_actual = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CCredentials_SteamGuardPhishingReport_Response.countryname_actual");
        object = msg->mutable_countryname_actual();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string statename_actual = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CCredentials_SteamGuardPhishingReport_Response.statename_actual");
        object = msg->mutable_statename_actual();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string cityname_actual = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CCredentials_SteamGuardPhishingReport_Response.cityname_actual");
        object = msg->mutable_cityname_actual();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string steamguard_code = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CCredentials_SteamGuardPhishingReport_Response.steamguard_code");
        object = msg->mutable_steamguard_code();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CCredentials_SteamGuardPhishingReport_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCredentials_SteamGuardPhishingReport_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ipaddress_loginattempt = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_ipaddress_loginattempt(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ipaddress_loginattempt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string countryname_loginattempt = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_countryname_loginattempt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->countryname_loginattempt().data(), static_cast<int>(this->countryname_loginattempt().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCredentials_SteamGuardPhishingReport_Response.countryname_loginattempt");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string statename_loginattempt = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_statename_loginattempt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->statename_loginattempt().data(), static_cast<int>(this->statename_loginattempt().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCredentials_SteamGuardPhishingReport_Response.statename_loginattempt");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string cityname_loginattempt = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cityname_loginattempt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cityname_loginattempt().data(), static_cast<int>(this->cityname_loginattempt().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCredentials_SteamGuardPhishingReport_Response.cityname_loginattempt");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ipaddress_actual = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_ipaddress_actual(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ipaddress_actual_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string countryname_actual = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_countryname_actual()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->countryname_actual().data(), static_cast<int>(this->countryname_actual().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCredentials_SteamGuardPhishingReport_Response.countryname_actual");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string statename_actual = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_statename_actual()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->statename_actual().data(), static_cast<int>(this->statename_actual().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCredentials_SteamGuardPhishingReport_Response.statename_actual");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string cityname_actual = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cityname_actual()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cityname_actual().data(), static_cast<int>(this->cityname_actual().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCredentials_SteamGuardPhishingReport_Response.cityname_actual");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string steamguard_code = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_steamguard_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->steamguard_code().data(), static_cast<int>(this->steamguard_code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCredentials_SteamGuardPhishingReport_Response.steamguard_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCredentials_SteamGuardPhishingReport_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCredentials_SteamGuardPhishingReport_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CCredentials_SteamGuardPhishingReport_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCredentials_SteamGuardPhishingReport_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ipaddress_loginattempt = 1;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ipaddress_loginattempt(), output);
  }

  // optional string countryname_loginattempt = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->countryname_loginattempt().data(), static_cast<int>(this->countryname_loginattempt().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCredentials_SteamGuardPhishingReport_Response.countryname_loginattempt");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->countryname_loginattempt(), output);
  }

  // optional string statename_loginattempt = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->statename_loginattempt().data(), static_cast<int>(this->statename_loginattempt().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCredentials_SteamGuardPhishingReport_Response.statename_loginattempt");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->statename_loginattempt(), output);
  }

  // optional string cityname_loginattempt = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cityname_loginattempt().data(), static_cast<int>(this->cityname_loginattempt().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCredentials_SteamGuardPhishingReport_Response.cityname_loginattempt");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->cityname_loginattempt(), output);
  }

  // optional uint32 ipaddress_actual = 5;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ipaddress_actual(), output);
  }

  // optional string countryname_actual = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->countryname_actual().data(), static_cast<int>(this->countryname_actual().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCredentials_SteamGuardPhishingReport_Response.countryname_actual");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->countryname_actual(), output);
  }

  // optional string statename_actual = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->statename_actual().data(), static_cast<int>(this->statename_actual().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCredentials_SteamGuardPhishingReport_Response.statename_actual");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->statename_actual(), output);
  }

  // optional string cityname_actual = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cityname_actual().data(), static_cast<int>(this->cityname_actual().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCredentials_SteamGuardPhishingReport_Response.cityname_actual");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->cityname_actual(), output);
  }

  // optional string steamguard_code = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->steamguard_code().data(), static_cast<int>(this->steamguard_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCredentials_SteamGuardPhishingReport_Response.steamguard_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->steamguard_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCredentials_SteamGuardPhishingReport_Response)
}

::google::protobuf::uint8* CCredentials_SteamGuardPhishingReport_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCredentials_SteamGuardPhishingReport_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ipaddress_loginattempt = 1;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ipaddress_loginattempt(), target);
  }

  // optional string countryname_loginattempt = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->countryname_loginattempt().data(), static_cast<int>(this->countryname_loginattempt().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCredentials_SteamGuardPhishingReport_Response.countryname_loginattempt");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->countryname_loginattempt(), target);
  }

  // optional string statename_loginattempt = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->statename_loginattempt().data(), static_cast<int>(this->statename_loginattempt().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCredentials_SteamGuardPhishingReport_Response.statename_loginattempt");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->statename_loginattempt(), target);
  }

  // optional string cityname_loginattempt = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cityname_loginattempt().data(), static_cast<int>(this->cityname_loginattempt().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCredentials_SteamGuardPhishingReport_Response.cityname_loginattempt");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->cityname_loginattempt(), target);
  }

  // optional uint32 ipaddress_actual = 5;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ipaddress_actual(), target);
  }

  // optional string countryname_actual = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->countryname_actual().data(), static_cast<int>(this->countryname_actual().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCredentials_SteamGuardPhishingReport_Response.countryname_actual");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->countryname_actual(), target);
  }

  // optional string statename_actual = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->statename_actual().data(), static_cast<int>(this->statename_actual().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCredentials_SteamGuardPhishingReport_Response.statename_actual");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->statename_actual(), target);
  }

  // optional string cityname_actual = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cityname_actual().data(), static_cast<int>(this->cityname_actual().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCredentials_SteamGuardPhishingReport_Response.cityname_actual");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->cityname_actual(), target);
  }

  // optional string steamguard_code = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->steamguard_code().data(), static_cast<int>(this->steamguard_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCredentials_SteamGuardPhishingReport_Response.steamguard_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->steamguard_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCredentials_SteamGuardPhishingReport_Response)
  return target;
}

size_t CCredentials_SteamGuardPhishingReport_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCredentials_SteamGuardPhishingReport_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string countryname_loginattempt = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->countryname_loginattempt());
    }

    // optional string statename_loginattempt = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->statename_loginattempt());
    }

    // optional string cityname_loginattempt = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cityname_loginattempt());
    }

    // optional string countryname_actual = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->countryname_actual());
    }

    // optional string statename_actual = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->statename_actual());
    }

    // optional string cityname_actual = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cityname_actual());
    }

    // optional string steamguard_code = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->steamguard_code());
    }

    // optional uint32 ipaddress_loginattempt = 1;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ipaddress_loginattempt());
    }

  }
  // optional uint32 ipaddress_actual = 5;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ipaddress_actual());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCredentials_SteamGuardPhishingReport_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCredentials_SteamGuardPhishingReport_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCredentials_SteamGuardPhishingReport_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CCredentials_SteamGuardPhishingReport_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCredentials_SteamGuardPhishingReport_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCredentials_SteamGuardPhishingReport_Response)
    MergeFrom(*source);
  }
}

void CCredentials_SteamGuardPhishingReport_Response::MergeFrom(const CCredentials_SteamGuardPhishingReport_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCredentials_SteamGuardPhishingReport_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      countryname_loginattempt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.countryname_loginattempt_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      statename_loginattempt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.statename_loginattempt_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      cityname_loginattempt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cityname_loginattempt_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      countryname_actual_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.countryname_actual_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      statename_actual_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.statename_actual_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      cityname_actual_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cityname_actual_);
    }
    if (cached_has_bits & 0x00000040u) {
      _has_bits_[0] |= 0x00000040u;
      steamguard_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.steamguard_code_);
    }
    if (cached_has_bits & 0x00000080u) {
      ipaddress_loginattempt_ = from.ipaddress_loginattempt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_ipaddress_actual(from.ipaddress_actual());
  }
}

void CCredentials_SteamGuardPhishingReport_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCredentials_SteamGuardPhishingReport_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCredentials_SteamGuardPhishingReport_Response::CopyFrom(const CCredentials_SteamGuardPhishingReport_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCredentials_SteamGuardPhishingReport_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCredentials_SteamGuardPhishingReport_Response::IsInitialized() const {
  return true;
}

void CCredentials_SteamGuardPhishingReport_Response::Swap(CCredentials_SteamGuardPhishingReport_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCredentials_SteamGuardPhishingReport_Response::InternalSwap(CCredentials_SteamGuardPhishingReport_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  countryname_loginattempt_.Swap(&other->countryname_loginattempt_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  statename_loginattempt_.Swap(&other->statename_loginattempt_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cityname_loginattempt_.Swap(&other->cityname_loginattempt_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  countryname_actual_.Swap(&other->countryname_actual_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  statename_actual_.Swap(&other->statename_actual_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cityname_actual_.Swap(&other->cityname_actual_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  steamguard_code_.Swap(&other->steamguard_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ipaddress_loginattempt_, other->ipaddress_loginattempt_);
  swap(ipaddress_actual_, other->ipaddress_actual_);
}

::google::protobuf::Metadata CCredentials_SteamGuardPhishingReport_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fcredentials_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fcredentials_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CCredentials_LastCredentialChangeTime_Request::InitAsDefaultInstance() {
}
class CCredentials_LastCredentialChangeTime_Request::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCredentials_LastCredentialChangeTime_Request::CCredentials_LastCredentialChangeTime_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCredentials_LastCredentialChangeTime_Request)
}
CCredentials_LastCredentialChangeTime_Request::CCredentials_LastCredentialChangeTime_Request(const CCredentials_LastCredentialChangeTime_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCredentials_LastCredentialChangeTime_Request)
}

void CCredentials_LastCredentialChangeTime_Request::SharedCtor() {
}

CCredentials_LastCredentialChangeTime_Request::~CCredentials_LastCredentialChangeTime_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CCredentials_LastCredentialChangeTime_Request)
  SharedDtor();
}

void CCredentials_LastCredentialChangeTime_Request::SharedDtor() {
}

void CCredentials_LastCredentialChangeTime_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCredentials_LastCredentialChangeTime_Request& CCredentials_LastCredentialChangeTime_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CCredentials_LastCredentialChangeTime_Request_steammessages_5fcredentials_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CCredentials_LastCredentialChangeTime_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCredentials_LastCredentialChangeTime_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CCredentials_LastCredentialChangeTime_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CCredentials_LastCredentialChangeTime_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CCredentials_LastCredentialChangeTime_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCredentials_LastCredentialChangeTime_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCredentials_LastCredentialChangeTime_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCredentials_LastCredentialChangeTime_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CCredentials_LastCredentialChangeTime_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCredentials_LastCredentialChangeTime_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCredentials_LastCredentialChangeTime_Request)
}

::google::protobuf::uint8* CCredentials_LastCredentialChangeTime_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCredentials_LastCredentialChangeTime_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCredentials_LastCredentialChangeTime_Request)
  return target;
}

size_t CCredentials_LastCredentialChangeTime_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCredentials_LastCredentialChangeTime_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCredentials_LastCredentialChangeTime_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCredentials_LastCredentialChangeTime_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCredentials_LastCredentialChangeTime_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CCredentials_LastCredentialChangeTime_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCredentials_LastCredentialChangeTime_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCredentials_LastCredentialChangeTime_Request)
    MergeFrom(*source);
  }
}

void CCredentials_LastCredentialChangeTime_Request::MergeFrom(const CCredentials_LastCredentialChangeTime_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCredentials_LastCredentialChangeTime_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CCredentials_LastCredentialChangeTime_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCredentials_LastCredentialChangeTime_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCredentials_LastCredentialChangeTime_Request::CopyFrom(const CCredentials_LastCredentialChangeTime_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCredentials_LastCredentialChangeTime_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCredentials_LastCredentialChangeTime_Request::IsInitialized() const {
  return true;
}

void CCredentials_LastCredentialChangeTime_Request::Swap(CCredentials_LastCredentialChangeTime_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCredentials_LastCredentialChangeTime_Request::InternalSwap(CCredentials_LastCredentialChangeTime_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CCredentials_LastCredentialChangeTime_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fcredentials_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fcredentials_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CCredentials_LastCredentialChangeTime_Response::InitAsDefaultInstance() {
}
class CCredentials_LastCredentialChangeTime_Response::HasBitSetters {
 public:
  static void set_has_timestamp_last_password_change(CCredentials_LastCredentialChangeTime_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_timestamp_last_email_change(CCredentials_LastCredentialChangeTime_Response* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_timestamp_last_password_reset(CCredentials_LastCredentialChangeTime_Response* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCredentials_LastCredentialChangeTime_Response::kTimestampLastPasswordChangeFieldNumber;
const int CCredentials_LastCredentialChangeTime_Response::kTimestampLastEmailChangeFieldNumber;
const int CCredentials_LastCredentialChangeTime_Response::kTimestampLastPasswordResetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCredentials_LastCredentialChangeTime_Response::CCredentials_LastCredentialChangeTime_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCredentials_LastCredentialChangeTime_Response)
}
CCredentials_LastCredentialChangeTime_Response::CCredentials_LastCredentialChangeTime_Response(const CCredentials_LastCredentialChangeTime_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_last_password_change_, &from.timestamp_last_password_change_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_last_password_reset_) -
    reinterpret_cast<char*>(&timestamp_last_password_change_)) + sizeof(timestamp_last_password_reset_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCredentials_LastCredentialChangeTime_Response)
}

void CCredentials_LastCredentialChangeTime_Response::SharedCtor() {
  ::memset(&timestamp_last_password_change_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_last_password_reset_) -
      reinterpret_cast<char*>(&timestamp_last_password_change_)) + sizeof(timestamp_last_password_reset_));
}

CCredentials_LastCredentialChangeTime_Response::~CCredentials_LastCredentialChangeTime_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CCredentials_LastCredentialChangeTime_Response)
  SharedDtor();
}

void CCredentials_LastCredentialChangeTime_Response::SharedDtor() {
}

void CCredentials_LastCredentialChangeTime_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCredentials_LastCredentialChangeTime_Response& CCredentials_LastCredentialChangeTime_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CCredentials_LastCredentialChangeTime_Response_steammessages_5fcredentials_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CCredentials_LastCredentialChangeTime_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCredentials_LastCredentialChangeTime_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&timestamp_last_password_change_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_last_password_reset_) -
        reinterpret_cast<char*>(&timestamp_last_password_change_)) + sizeof(timestamp_last_password_reset_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CCredentials_LastCredentialChangeTime_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CCredentials_LastCredentialChangeTime_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed32 timestamp_last_password_change = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_timestamp_last_password_change(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional fixed32 timestamp_last_email_change = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_timestamp_last_email_change(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional fixed32 timestamp_last_password_reset = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_timestamp_last_password_reset(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CCredentials_LastCredentialChangeTime_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCredentials_LastCredentialChangeTime_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 timestamp_last_password_change = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_timestamp_last_password_change(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &timestamp_last_password_change_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 timestamp_last_email_change = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_timestamp_last_email_change(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &timestamp_last_email_change_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 timestamp_last_password_reset = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_timestamp_last_password_reset(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &timestamp_last_password_reset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCredentials_LastCredentialChangeTime_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCredentials_LastCredentialChangeTime_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CCredentials_LastCredentialChangeTime_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCredentials_LastCredentialChangeTime_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 timestamp_last_password_change = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->timestamp_last_password_change(), output);
  }

  // optional fixed32 timestamp_last_email_change = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->timestamp_last_email_change(), output);
  }

  // optional fixed32 timestamp_last_password_reset = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->timestamp_last_password_reset(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCredentials_LastCredentialChangeTime_Response)
}

::google::protobuf::uint8* CCredentials_LastCredentialChangeTime_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCredentials_LastCredentialChangeTime_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 timestamp_last_password_change = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->timestamp_last_password_change(), target);
  }

  // optional fixed32 timestamp_last_email_change = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->timestamp_last_email_change(), target);
  }

  // optional fixed32 timestamp_last_password_reset = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->timestamp_last_password_reset(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCredentials_LastCredentialChangeTime_Response)
  return target;
}

size_t CCredentials_LastCredentialChangeTime_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCredentials_LastCredentialChangeTime_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed32 timestamp_last_password_change = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional fixed32 timestamp_last_email_change = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional fixed32 timestamp_last_password_reset = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCredentials_LastCredentialChangeTime_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCredentials_LastCredentialChangeTime_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCredentials_LastCredentialChangeTime_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CCredentials_LastCredentialChangeTime_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCredentials_LastCredentialChangeTime_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCredentials_LastCredentialChangeTime_Response)
    MergeFrom(*source);
  }
}

void CCredentials_LastCredentialChangeTime_Response::MergeFrom(const CCredentials_LastCredentialChangeTime_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCredentials_LastCredentialChangeTime_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_last_password_change_ = from.timestamp_last_password_change_;
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_last_email_change_ = from.timestamp_last_email_change_;
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_last_password_reset_ = from.timestamp_last_password_reset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCredentials_LastCredentialChangeTime_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCredentials_LastCredentialChangeTime_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCredentials_LastCredentialChangeTime_Response::CopyFrom(const CCredentials_LastCredentialChangeTime_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCredentials_LastCredentialChangeTime_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCredentials_LastCredentialChangeTime_Response::IsInitialized() const {
  return true;
}

void CCredentials_LastCredentialChangeTime_Response::Swap(CCredentials_LastCredentialChangeTime_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCredentials_LastCredentialChangeTime_Response::InternalSwap(CCredentials_LastCredentialChangeTime_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(timestamp_last_password_change_, other->timestamp_last_password_change_);
  swap(timestamp_last_email_change_, other->timestamp_last_email_change_);
  swap(timestamp_last_password_reset_, other->timestamp_last_password_reset_);
}

::google::protobuf::Metadata CCredentials_LastCredentialChangeTime_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fcredentials_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fcredentials_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CCredentials_GetAccountAuthSecret_Request::InitAsDefaultInstance() {
}
class CCredentials_GetAccountAuthSecret_Request::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCredentials_GetAccountAuthSecret_Request::CCredentials_GetAccountAuthSecret_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCredentials_GetAccountAuthSecret_Request)
}
CCredentials_GetAccountAuthSecret_Request::CCredentials_GetAccountAuthSecret_Request(const CCredentials_GetAccountAuthSecret_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCredentials_GetAccountAuthSecret_Request)
}

void CCredentials_GetAccountAuthSecret_Request::SharedCtor() {
}

CCredentials_GetAccountAuthSecret_Request::~CCredentials_GetAccountAuthSecret_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CCredentials_GetAccountAuthSecret_Request)
  SharedDtor();
}

void CCredentials_GetAccountAuthSecret_Request::SharedDtor() {
}

void CCredentials_GetAccountAuthSecret_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCredentials_GetAccountAuthSecret_Request& CCredentials_GetAccountAuthSecret_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CCredentials_GetAccountAuthSecret_Request_steammessages_5fcredentials_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CCredentials_GetAccountAuthSecret_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCredentials_GetAccountAuthSecret_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CCredentials_GetAccountAuthSecret_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CCredentials_GetAccountAuthSecret_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CCredentials_GetAccountAuthSecret_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCredentials_GetAccountAuthSecret_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCredentials_GetAccountAuthSecret_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCredentials_GetAccountAuthSecret_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CCredentials_GetAccountAuthSecret_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCredentials_GetAccountAuthSecret_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCredentials_GetAccountAuthSecret_Request)
}

::google::protobuf::uint8* CCredentials_GetAccountAuthSecret_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCredentials_GetAccountAuthSecret_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCredentials_GetAccountAuthSecret_Request)
  return target;
}

size_t CCredentials_GetAccountAuthSecret_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCredentials_GetAccountAuthSecret_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCredentials_GetAccountAuthSecret_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCredentials_GetAccountAuthSecret_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCredentials_GetAccountAuthSecret_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CCredentials_GetAccountAuthSecret_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCredentials_GetAccountAuthSecret_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCredentials_GetAccountAuthSecret_Request)
    MergeFrom(*source);
  }
}

void CCredentials_GetAccountAuthSecret_Request::MergeFrom(const CCredentials_GetAccountAuthSecret_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCredentials_GetAccountAuthSecret_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CCredentials_GetAccountAuthSecret_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCredentials_GetAccountAuthSecret_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCredentials_GetAccountAuthSecret_Request::CopyFrom(const CCredentials_GetAccountAuthSecret_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCredentials_GetAccountAuthSecret_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCredentials_GetAccountAuthSecret_Request::IsInitialized() const {
  return true;
}

void CCredentials_GetAccountAuthSecret_Request::Swap(CCredentials_GetAccountAuthSecret_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCredentials_GetAccountAuthSecret_Request::InternalSwap(CCredentials_GetAccountAuthSecret_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CCredentials_GetAccountAuthSecret_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fcredentials_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fcredentials_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CCredentials_GetAccountAuthSecret_Response::InitAsDefaultInstance() {
}
class CCredentials_GetAccountAuthSecret_Response::HasBitSetters {
 public:
  static void set_has_secret_id(CCredentials_GetAccountAuthSecret_Response* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_secret(CCredentials_GetAccountAuthSecret_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCredentials_GetAccountAuthSecret_Response::kSecretIdFieldNumber;
const int CCredentials_GetAccountAuthSecret_Response::kSecretFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCredentials_GetAccountAuthSecret_Response::CCredentials_GetAccountAuthSecret_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCredentials_GetAccountAuthSecret_Response)
}
CCredentials_GetAccountAuthSecret_Response::CCredentials_GetAccountAuthSecret_Response(const CCredentials_GetAccountAuthSecret_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  secret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_secret()) {
    secret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  secret_id_ = from.secret_id_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCredentials_GetAccountAuthSecret_Response)
}

void CCredentials_GetAccountAuthSecret_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CCredentials_GetAccountAuthSecret_Response_steammessages_5fcredentials_2esteamclient_2eproto.base);
  secret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secret_id_ = 0;
}

CCredentials_GetAccountAuthSecret_Response::~CCredentials_GetAccountAuthSecret_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CCredentials_GetAccountAuthSecret_Response)
  SharedDtor();
}

void CCredentials_GetAccountAuthSecret_Response::SharedDtor() {
  secret_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CCredentials_GetAccountAuthSecret_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCredentials_GetAccountAuthSecret_Response& CCredentials_GetAccountAuthSecret_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CCredentials_GetAccountAuthSecret_Response_steammessages_5fcredentials_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CCredentials_GetAccountAuthSecret_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCredentials_GetAccountAuthSecret_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    secret_.ClearNonDefaultToEmptyNoArena();
  }
  secret_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CCredentials_GetAccountAuthSecret_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CCredentials_GetAccountAuthSecret_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 secret_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_secret_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes secret = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_secret();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CCredentials_GetAccountAuthSecret_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCredentials_GetAccountAuthSecret_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 secret_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_secret_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &secret_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes secret = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_secret()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCredentials_GetAccountAuthSecret_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCredentials_GetAccountAuthSecret_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CCredentials_GetAccountAuthSecret_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCredentials_GetAccountAuthSecret_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 secret_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->secret_id(), output);
  }

  // optional bytes secret = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->secret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCredentials_GetAccountAuthSecret_Response)
}

::google::protobuf::uint8* CCredentials_GetAccountAuthSecret_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCredentials_GetAccountAuthSecret_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 secret_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->secret_id(), target);
  }

  // optional bytes secret = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->secret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCredentials_GetAccountAuthSecret_Response)
  return target;
}

size_t CCredentials_GetAccountAuthSecret_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCredentials_GetAccountAuthSecret_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes secret = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->secret());
    }

    // optional int32 secret_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->secret_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCredentials_GetAccountAuthSecret_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCredentials_GetAccountAuthSecret_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCredentials_GetAccountAuthSecret_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CCredentials_GetAccountAuthSecret_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCredentials_GetAccountAuthSecret_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCredentials_GetAccountAuthSecret_Response)
    MergeFrom(*source);
  }
}

void CCredentials_GetAccountAuthSecret_Response::MergeFrom(const CCredentials_GetAccountAuthSecret_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCredentials_GetAccountAuthSecret_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      secret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secret_);
    }
    if (cached_has_bits & 0x00000002u) {
      secret_id_ = from.secret_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCredentials_GetAccountAuthSecret_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCredentials_GetAccountAuthSecret_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCredentials_GetAccountAuthSecret_Response::CopyFrom(const CCredentials_GetAccountAuthSecret_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCredentials_GetAccountAuthSecret_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCredentials_GetAccountAuthSecret_Response::IsInitialized() const {
  return true;
}

void CCredentials_GetAccountAuthSecret_Response::Swap(CCredentials_GetAccountAuthSecret_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCredentials_GetAccountAuthSecret_Response::InternalSwap(CCredentials_GetAccountAuthSecret_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  secret_.Swap(&other->secret_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(secret_id_, other->secret_id_);
}

::google::protobuf::Metadata CCredentials_GetAccountAuthSecret_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fcredentials_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fcredentials_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

Credentials::~Credentials() {}

const ::google::protobuf::ServiceDescriptor* Credentials::descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_steammessages_5fcredentials_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5fcredentials_2esteamclient_2eproto[0];
}

const ::google::protobuf::ServiceDescriptor* Credentials::GetDescriptor() {
  return descriptor();
}

void Credentials::TestAvailablePassword(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CCredentials_TestAvailablePassword_Request*,
                         ::proto::steam::CCredentials_TestAvailablePassword_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method TestAvailablePassword() not implemented.");
  done->Run();
}

void Credentials::GetSteamGuardDetails(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CCredentials_GetSteamGuardDetails_Request*,
                         ::proto::steam::CCredentials_GetSteamGuardDetails_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetSteamGuardDetails() not implemented.");
  done->Run();
}

void Credentials::NewMachineNotificationDialogResult(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CCredentials_NewMachineNotificationDialog_Request*,
                         ::proto::steam::CCredentials_NewMachineNotificationDialog_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NewMachineNotificationDialogResult() not implemented.");
  done->Run();
}

void Credentials::ValidateEmailAddress(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CCredentials_ValidateEmailAddress_Request*,
                         ::proto::steam::CCredentials_ValidateEmailAddress_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ValidateEmailAddress() not implemented.");
  done->Run();
}

void Credentials::SteamGuardPhishingReport(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CCredentials_SteamGuardPhishingReport_Request*,
                         ::proto::steam::CCredentials_SteamGuardPhishingReport_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SteamGuardPhishingReport() not implemented.");
  done->Run();
}

void Credentials::GetCredentialChangeTimeDetails(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CCredentials_LastCredentialChangeTime_Request*,
                         ::proto::steam::CCredentials_LastCredentialChangeTime_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetCredentialChangeTimeDetails() not implemented.");
  done->Run();
}

void Credentials::GetAccountAuthSecret(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CCredentials_GetAccountAuthSecret_Request*,
                         ::proto::steam::CCredentials_GetAccountAuthSecret_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetAccountAuthSecret() not implemented.");
  done->Run();
}

void Credentials::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5fcredentials_2esteamclient_2eproto[0]);
  switch(method->index()) {
    case 0:
      TestAvailablePassword(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CCredentials_TestAvailablePassword_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CCredentials_TestAvailablePassword_Response*>(response),
             done);
      break;
    case 1:
      GetSteamGuardDetails(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CCredentials_GetSteamGuardDetails_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CCredentials_GetSteamGuardDetails_Response*>(response),
             done);
      break;
    case 2:
      NewMachineNotificationDialogResult(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CCredentials_NewMachineNotificationDialog_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CCredentials_NewMachineNotificationDialog_Response*>(response),
             done);
      break;
    case 3:
      ValidateEmailAddress(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CCredentials_ValidateEmailAddress_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CCredentials_ValidateEmailAddress_Response*>(response),
             done);
      break;
    case 4:
      SteamGuardPhishingReport(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CCredentials_SteamGuardPhishingReport_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CCredentials_SteamGuardPhishingReport_Response*>(response),
             done);
      break;
    case 5:
      GetCredentialChangeTimeDetails(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CCredentials_LastCredentialChangeTime_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CCredentials_LastCredentialChangeTime_Response*>(response),
             done);
      break;
    case 6:
      GetAccountAuthSecret(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CCredentials_GetAccountAuthSecret_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CCredentials_GetAccountAuthSecret_Response*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& Credentials::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CCredentials_TestAvailablePassword_Request::default_instance();
    case 1:
      return ::proto::steam::CCredentials_GetSteamGuardDetails_Request::default_instance();
    case 2:
      return ::proto::steam::CCredentials_NewMachineNotificationDialog_Request::default_instance();
    case 3:
      return ::proto::steam::CCredentials_ValidateEmailAddress_Request::default_instance();
    case 4:
      return ::proto::steam::CCredentials_SteamGuardPhishingReport_Request::default_instance();
    case 5:
      return ::proto::steam::CCredentials_LastCredentialChangeTime_Request::default_instance();
    case 6:
      return ::proto::steam::CCredentials_GetAccountAuthSecret_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& Credentials::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CCredentials_TestAvailablePassword_Response::default_instance();
    case 1:
      return ::proto::steam::CCredentials_GetSteamGuardDetails_Response::default_instance();
    case 2:
      return ::proto::steam::CCredentials_NewMachineNotificationDialog_Response::default_instance();
    case 3:
      return ::proto::steam::CCredentials_ValidateEmailAddress_Response::default_instance();
    case 4:
      return ::proto::steam::CCredentials_SteamGuardPhishingReport_Response::default_instance();
    case 5:
      return ::proto::steam::CCredentials_LastCredentialChangeTime_Response::default_instance();
    case 6:
      return ::proto::steam::CCredentials_GetAccountAuthSecret_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

Credentials_Stub::Credentials_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
Credentials_Stub::Credentials_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
Credentials_Stub::~Credentials_Stub() {
  if (owns_channel_) delete channel_;
}

void Credentials_Stub::TestAvailablePassword(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CCredentials_TestAvailablePassword_Request* request,
                              ::proto::steam::CCredentials_TestAvailablePassword_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void Credentials_Stub::GetSteamGuardDetails(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CCredentials_GetSteamGuardDetails_Request* request,
                              ::proto::steam::CCredentials_GetSteamGuardDetails_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void Credentials_Stub::NewMachineNotificationDialogResult(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CCredentials_NewMachineNotificationDialog_Request* request,
                              ::proto::steam::CCredentials_NewMachineNotificationDialog_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void Credentials_Stub::ValidateEmailAddress(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CCredentials_ValidateEmailAddress_Request* request,
                              ::proto::steam::CCredentials_ValidateEmailAddress_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void Credentials_Stub::SteamGuardPhishingReport(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CCredentials_SteamGuardPhishingReport_Request* request,
                              ::proto::steam::CCredentials_SteamGuardPhishingReport_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void Credentials_Stub::GetCredentialChangeTimeDetails(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CCredentials_LastCredentialChangeTime_Request* request,
                              ::proto::steam::CCredentials_LastCredentialChangeTime_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void Credentials_Stub::GetAccountAuthSecret(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CCredentials_GetAccountAuthSecret_Request* request,
                              ::proto::steam::CCredentials_GetAccountAuthSecret_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace steam
}  // namespace proto
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::proto::steam::CCredentials_TestAvailablePassword_Request* Arena::CreateMaybeMessage< ::proto::steam::CCredentials_TestAvailablePassword_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CCredentials_TestAvailablePassword_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CCredentials_TestAvailablePassword_Response* Arena::CreateMaybeMessage< ::proto::steam::CCredentials_TestAvailablePassword_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CCredentials_TestAvailablePassword_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CCredentials_GetSteamGuardDetails_Request* Arena::CreateMaybeMessage< ::proto::steam::CCredentials_GetSteamGuardDetails_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CCredentials_GetSteamGuardDetails_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CCredentials_GetSteamGuardDetails_Response_NewAuthentication* Arena::CreateMaybeMessage< ::proto::steam::CCredentials_GetSteamGuardDetails_Response_NewAuthentication >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CCredentials_GetSteamGuardDetails_Response_NewAuthentication >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CCredentials_GetSteamGuardDetails_Response_SessionData* Arena::CreateMaybeMessage< ::proto::steam::CCredentials_GetSteamGuardDetails_Response_SessionData >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CCredentials_GetSteamGuardDetails_Response_SessionData >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CCredentials_GetSteamGuardDetails_Response* Arena::CreateMaybeMessage< ::proto::steam::CCredentials_GetSteamGuardDetails_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CCredentials_GetSteamGuardDetails_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CCredentials_NewMachineNotificationDialog_Request* Arena::CreateMaybeMessage< ::proto::steam::CCredentials_NewMachineNotificationDialog_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CCredentials_NewMachineNotificationDialog_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CCredentials_NewMachineNotificationDialog_Response* Arena::CreateMaybeMessage< ::proto::steam::CCredentials_NewMachineNotificationDialog_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CCredentials_NewMachineNotificationDialog_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CCredentials_ValidateEmailAddress_Request* Arena::CreateMaybeMessage< ::proto::steam::CCredentials_ValidateEmailAddress_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CCredentials_ValidateEmailAddress_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CCredentials_ValidateEmailAddress_Response* Arena::CreateMaybeMessage< ::proto::steam::CCredentials_ValidateEmailAddress_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CCredentials_ValidateEmailAddress_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CCredentials_SteamGuardPhishingReport_Request* Arena::CreateMaybeMessage< ::proto::steam::CCredentials_SteamGuardPhishingReport_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CCredentials_SteamGuardPhishingReport_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CCredentials_SteamGuardPhishingReport_Response* Arena::CreateMaybeMessage< ::proto::steam::CCredentials_SteamGuardPhishingReport_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CCredentials_SteamGuardPhishingReport_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CCredentials_LastCredentialChangeTime_Request* Arena::CreateMaybeMessage< ::proto::steam::CCredentials_LastCredentialChangeTime_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CCredentials_LastCredentialChangeTime_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CCredentials_LastCredentialChangeTime_Response* Arena::CreateMaybeMessage< ::proto::steam::CCredentials_LastCredentialChangeTime_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CCredentials_LastCredentialChangeTime_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CCredentials_GetAccountAuthSecret_Request* Arena::CreateMaybeMessage< ::proto::steam::CCredentials_GetAccountAuthSecret_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CCredentials_GetAccountAuthSecret_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CCredentials_GetAccountAuthSecret_Response* Arena::CreateMaybeMessage< ::proto::steam::CCredentials_GetAccountAuthSecret_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CCredentials_GetAccountAuthSecret_Response >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
