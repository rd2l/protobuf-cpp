// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steamdatagram_messages_auth.proto

#include "steamdatagram_messages_auth.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_steamdatagram_5fmessages_5fauth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSteamDatagramRelayAuthTicket_ExtraField_steamdatagram_5fmessages_5fauth_2eproto;
namespace proto {
namespace steam {
class CMsgSteamDatagramRelayAuthTicket_ExtraFieldDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramRelayAuthTicket_ExtraField> _instance;
} _CMsgSteamDatagramRelayAuthTicket_ExtraField_default_instance_;
class CMsgSteamDatagramRelayAuthTicketDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramRelayAuthTicket> _instance;
} _CMsgSteamDatagramRelayAuthTicket_default_instance_;
class CMsgSteamDatagramSignedRelayAuthTicketDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramSignedRelayAuthTicket> _instance;
} _CMsgSteamDatagramSignedRelayAuthTicket_default_instance_;
class CMsgSteamDatagramCachedCredentialsForAppDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramCachedCredentialsForApp> _instance;
} _CMsgSteamDatagramCachedCredentialsForApp_default_instance_;
}  // namespace steam
}  // namespace proto
static void InitDefaultsCMsgSteamDatagramRelayAuthTicket_ExtraField_steamdatagram_5fmessages_5fauth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSteamDatagramRelayAuthTicket_ExtraField_default_instance_;
    new (ptr) ::proto::steam::CMsgSteamDatagramRelayAuthTicket_ExtraField();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSteamDatagramRelayAuthTicket_ExtraField::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSteamDatagramRelayAuthTicket_ExtraField_steamdatagram_5fmessages_5fauth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSteamDatagramRelayAuthTicket_ExtraField_steamdatagram_5fmessages_5fauth_2eproto}, {}};

static void InitDefaultsCMsgSteamDatagramRelayAuthTicket_steamdatagram_5fmessages_5fauth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSteamDatagramRelayAuthTicket_default_instance_;
    new (ptr) ::proto::steam::CMsgSteamDatagramRelayAuthTicket();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSteamDatagramRelayAuthTicket::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgSteamDatagramRelayAuthTicket_steamdatagram_5fmessages_5fauth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgSteamDatagramRelayAuthTicket_steamdatagram_5fmessages_5fauth_2eproto}, {
      &scc_info_CMsgSteamDatagramRelayAuthTicket_ExtraField_steamdatagram_5fmessages_5fauth_2eproto.base,}};

static void InitDefaultsCMsgSteamDatagramSignedRelayAuthTicket_steamdatagram_5fmessages_5fauth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSteamDatagramSignedRelayAuthTicket_default_instance_;
    new (ptr) ::proto::steam::CMsgSteamDatagramSignedRelayAuthTicket();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSteamDatagramSignedRelayAuthTicket::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSteamDatagramSignedRelayAuthTicket_steamdatagram_5fmessages_5fauth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSteamDatagramSignedRelayAuthTicket_steamdatagram_5fmessages_5fauth_2eproto}, {}};

static void InitDefaultsCMsgSteamDatagramCachedCredentialsForApp_steamdatagram_5fmessages_5fauth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSteamDatagramCachedCredentialsForApp_default_instance_;
    new (ptr) ::proto::steam::CMsgSteamDatagramCachedCredentialsForApp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSteamDatagramCachedCredentialsForApp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSteamDatagramCachedCredentialsForApp_steamdatagram_5fmessages_5fauth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSteamDatagramCachedCredentialsForApp_steamdatagram_5fmessages_5fauth_2eproto}, {}};

void InitDefaults_steamdatagram_5fmessages_5fauth_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSteamDatagramRelayAuthTicket_ExtraField_steamdatagram_5fmessages_5fauth_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSteamDatagramRelayAuthTicket_steamdatagram_5fmessages_5fauth_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSteamDatagramSignedRelayAuthTicket_steamdatagram_5fmessages_5fauth_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSteamDatagramCachedCredentialsForApp_steamdatagram_5fmessages_5fauth_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_steamdatagram_5fmessages_5fauth_2eproto[4];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_steamdatagram_5fmessages_5fauth_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_steamdatagram_5fmessages_5fauth_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_steamdatagram_5fmessages_5fauth_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramRelayAuthTicket_ExtraField, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramRelayAuthTicket_ExtraField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramRelayAuthTicket_ExtraField, name_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramRelayAuthTicket_ExtraField, string_value_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramRelayAuthTicket_ExtraField, int64_value_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramRelayAuthTicket_ExtraField, fixed64_value_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramRelayAuthTicket, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramRelayAuthTicket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramRelayAuthTicket, time_expiry_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramRelayAuthTicket, authorized_client_identity_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramRelayAuthTicket, gameserver_identity_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramRelayAuthTicket, authorized_public_ip_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramRelayAuthTicket, gameserver_address_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramRelayAuthTicket, app_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramRelayAuthTicket, virtual_port_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramRelayAuthTicket, extra_fields_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramRelayAuthTicket, legacy_authorized_steam_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramRelayAuthTicket, legacy_gameserver_steam_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramRelayAuthTicket, legacy_gameserver_net_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramRelayAuthTicket, legacy_gameserver_pop_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramRelayAuthTicket, deleted_signature_),
  5,
  2,
  3,
  6,
  1,
  9,
  11,
  ~0u,
  4,
  7,
  8,
  10,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramSignedRelayAuthTicket, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramSignedRelayAuthTicket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramSignedRelayAuthTicket, reserved_do_not_use_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramSignedRelayAuthTicket, key_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramSignedRelayAuthTicket, ticket_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramSignedRelayAuthTicket, signature_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramCachedCredentialsForApp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramCachedCredentialsForApp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramCachedCredentialsForApp, private_key_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramCachedCredentialsForApp, cert_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramCachedCredentialsForApp, relay_tickets_),
  0,
  1,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::proto::steam::CMsgSteamDatagramRelayAuthTicket_ExtraField)},
  { 13, 31, sizeof(::proto::steam::CMsgSteamDatagramRelayAuthTicket)},
  { 44, 53, sizeof(::proto::steam::CMsgSteamDatagramSignedRelayAuthTicket)},
  { 57, 65, sizeof(::proto::steam::CMsgSteamDatagramCachedCredentialsForApp)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSteamDatagramRelayAuthTicket_ExtraField_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSteamDatagramRelayAuthTicket_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSteamDatagramSignedRelayAuthTicket_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSteamDatagramCachedCredentialsForApp_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_steamdatagram_5fmessages_5fauth_2eproto = {
  {}, AddDescriptors_steamdatagram_5fmessages_5fauth_2eproto, "steamdatagram_messages_auth.proto", schemas,
  file_default_instances, TableStruct_steamdatagram_5fmessages_5fauth_2eproto::offsets,
  file_level_metadata_steamdatagram_5fmessages_5fauth_2eproto, 4, file_level_enum_descriptors_steamdatagram_5fmessages_5fauth_2eproto, file_level_service_descriptors_steamdatagram_5fmessages_5fauth_2eproto,
};

const char descriptor_table_protodef_steamdatagram_5fmessages_5fauth_2eproto[] =
  "\n!steamdatagram_messages_auth.proto\022\013pro"
  "to.steam\"\255\004\n CMsgSteamDatagramRelayAuthT"
  "icket\022\023\n\013time_expiry\030\001 \001(\007\022\"\n\032authorized"
  "_client_identity\030\014 \001(\014\022\033\n\023gameserver_ide"
  "ntity\030\r \001(\014\022\034\n\024authorized_public_ip\030\003 \001("
  "\007\022\032\n\022gameserver_address\030\013 \001(\014\022\016\n\006app_id\030"
  "\007 \001(\r\022\024\n\014virtual_port\030\n \001(\r\022N\n\014extra_fie"
  "lds\030\010 \003(\01328.proto.steam.CMsgSteamDatagra"
  "mRelayAuthTicket.ExtraField\022\"\n\032legacy_au"
  "thorized_steam_id\030\002 \001(\006\022\"\n\032legacy_gamese"
  "rver_steam_id\030\004 \001(\006\022 \n\030legacy_gameserver"
  "_net_id\030\005 \001(\006\022 \n\030legacy_gameserver_pop_i"
  "d\030\t \001(\007\022\031\n\021DELETED_signature\030\006 \001(\014\032\\\n\nEx"
  "traField\022\014\n\004name\030\001 \001(\t\022\024\n\014string_value\030\002"
  " \001(\t\022\023\n\013int64_value\030\003 \001(\022\022\025\n\rfixed64_val"
  "ue\030\005 \001(\006\"x\n&CMsgSteamDatagramSignedRelay"
  "AuthTicket\022\033\n\023reserved_do_not_use\030\001 \001(\006\022"
  "\016\n\006key_id\030\002 \001(\006\022\016\n\006ticket\030\003 \001(\014\022\021\n\tsigna"
  "ture\030\004 \001(\014\"d\n(CMsgSteamDatagramCachedCre"
  "dentialsForApp\022\023\n\013private_key\030\001 \001(\014\022\014\n\004c"
  "ert\030\002 \001(\014\022\025\n\rrelay_tickets\030\003 \003(\014B\005H\001\200\001\000"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_steamdatagram_5fmessages_5fauth_2eproto = {
  false, InitDefaults_steamdatagram_5fmessages_5fauth_2eproto, 
  descriptor_table_protodef_steamdatagram_5fmessages_5fauth_2eproto,
  "steamdatagram_messages_auth.proto", &assign_descriptors_table_steamdatagram_5fmessages_5fauth_2eproto, 839,
};

void AddDescriptors_steamdatagram_5fmessages_5fauth_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_steamdatagram_5fmessages_5fauth_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_steamdatagram_5fmessages_5fauth_2eproto = []() { AddDescriptors_steamdatagram_5fmessages_5fauth_2eproto(); return true; }();
namespace proto {
namespace steam {

// ===================================================================

void CMsgSteamDatagramRelayAuthTicket_ExtraField::InitAsDefaultInstance() {
}
class CMsgSteamDatagramRelayAuthTicket_ExtraField::HasBitSetters {
 public:
  static void set_has_name(CMsgSteamDatagramRelayAuthTicket_ExtraField* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_string_value(CMsgSteamDatagramRelayAuthTicket_ExtraField* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_int64_value(CMsgSteamDatagramRelayAuthTicket_ExtraField* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_fixed64_value(CMsgSteamDatagramRelayAuthTicket_ExtraField* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramRelayAuthTicket_ExtraField::kNameFieldNumber;
const int CMsgSteamDatagramRelayAuthTicket_ExtraField::kStringValueFieldNumber;
const int CMsgSteamDatagramRelayAuthTicket_ExtraField::kInt64ValueFieldNumber;
const int CMsgSteamDatagramRelayAuthTicket_ExtraField::kFixed64ValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramRelayAuthTicket_ExtraField::CMsgSteamDatagramRelayAuthTicket_ExtraField()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSteamDatagramRelayAuthTicket.ExtraField)
}
CMsgSteamDatagramRelayAuthTicket_ExtraField::CMsgSteamDatagramRelayAuthTicket_ExtraField(const CMsgSteamDatagramRelayAuthTicket_ExtraField& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_string_value()) {
    string_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.string_value_);
  }
  ::memcpy(&int64_value_, &from.int64_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&fixed64_value_) -
    reinterpret_cast<char*>(&int64_value_)) + sizeof(fixed64_value_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSteamDatagramRelayAuthTicket.ExtraField)
}

void CMsgSteamDatagramRelayAuthTicket_ExtraField::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgSteamDatagramRelayAuthTicket_ExtraField_steamdatagram_5fmessages_5fauth_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&int64_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fixed64_value_) -
      reinterpret_cast<char*>(&int64_value_)) + sizeof(fixed64_value_));
}

CMsgSteamDatagramRelayAuthTicket_ExtraField::~CMsgSteamDatagramRelayAuthTicket_ExtraField() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSteamDatagramRelayAuthTicket.ExtraField)
  SharedDtor();
}

void CMsgSteamDatagramRelayAuthTicket_ExtraField::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  string_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgSteamDatagramRelayAuthTicket_ExtraField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamDatagramRelayAuthTicket_ExtraField& CMsgSteamDatagramRelayAuthTicket_ExtraField::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSteamDatagramRelayAuthTicket_ExtraField_steamdatagram_5fmessages_5fauth_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamDatagramRelayAuthTicket_ExtraField::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSteamDatagramRelayAuthTicket.ExtraField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      string_value_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&int64_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fixed64_value_) -
        reinterpret_cast<char*>(&int64_value_)) + sizeof(fixed64_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSteamDatagramRelayAuthTicket_ExtraField::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSteamDatagramRelayAuthTicket_ExtraField*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgSteamDatagramRelayAuthTicket.ExtraField.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string string_value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgSteamDatagramRelayAuthTicket.ExtraField.string_value");
        object = msg->mutable_string_value();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional sint64 int64_value = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_int64_value(::google::protobuf::internal::ReadVarintZigZag64(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 fixed64_value = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 41) goto handle_unusual;
        msg->set_fixed64_value(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSteamDatagramRelayAuthTicket_ExtraField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSteamDatagramRelayAuthTicket.ExtraField)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgSteamDatagramRelayAuthTicket.ExtraField.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string string_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->string_value().data(), static_cast<int>(this->string_value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgSteamDatagramRelayAuthTicket.ExtraField.string_value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 int64_value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_int64_value(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &int64_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 fixed64_value = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (41 & 0xFF)) {
          HasBitSetters::set_has_fixed64_value(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &fixed64_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSteamDatagramRelayAuthTicket.ExtraField)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSteamDatagramRelayAuthTicket.ExtraField)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSteamDatagramRelayAuthTicket_ExtraField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSteamDatagramRelayAuthTicket.ExtraField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSteamDatagramRelayAuthTicket.ExtraField.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string string_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->string_value().data(), static_cast<int>(this->string_value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSteamDatagramRelayAuthTicket.ExtraField.string_value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->string_value(), output);
  }

  // optional sint64 int64_value = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->int64_value(), output);
  }

  // optional fixed64 fixed64_value = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->fixed64_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSteamDatagramRelayAuthTicket.ExtraField)
}

::google::protobuf::uint8* CMsgSteamDatagramRelayAuthTicket_ExtraField::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSteamDatagramRelayAuthTicket.ExtraField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSteamDatagramRelayAuthTicket.ExtraField.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string string_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->string_value().data(), static_cast<int>(this->string_value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSteamDatagramRelayAuthTicket.ExtraField.string_value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->string_value(), target);
  }

  // optional sint64 int64_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(3, this->int64_value(), target);
  }

  // optional fixed64 fixed64_value = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->fixed64_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSteamDatagramRelayAuthTicket.ExtraField)
  return target;
}

size_t CMsgSteamDatagramRelayAuthTicket_ExtraField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSteamDatagramRelayAuthTicket.ExtraField)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string string_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string_value());
    }

    // optional sint64 int64_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->int64_value());
    }

    // optional fixed64 fixed64_value = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramRelayAuthTicket_ExtraField::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSteamDatagramRelayAuthTicket.ExtraField)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramRelayAuthTicket_ExtraField* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSteamDatagramRelayAuthTicket_ExtraField>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSteamDatagramRelayAuthTicket.ExtraField)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSteamDatagramRelayAuthTicket.ExtraField)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramRelayAuthTicket_ExtraField::MergeFrom(const CMsgSteamDatagramRelayAuthTicket_ExtraField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSteamDatagramRelayAuthTicket.ExtraField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      string_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.string_value_);
    }
    if (cached_has_bits & 0x00000004u) {
      int64_value_ = from.int64_value_;
    }
    if (cached_has_bits & 0x00000008u) {
      fixed64_value_ = from.fixed64_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramRelayAuthTicket_ExtraField::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSteamDatagramRelayAuthTicket.ExtraField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramRelayAuthTicket_ExtraField::CopyFrom(const CMsgSteamDatagramRelayAuthTicket_ExtraField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSteamDatagramRelayAuthTicket.ExtraField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramRelayAuthTicket_ExtraField::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramRelayAuthTicket_ExtraField::Swap(CMsgSteamDatagramRelayAuthTicket_ExtraField* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramRelayAuthTicket_ExtraField::InternalSwap(CMsgSteamDatagramRelayAuthTicket_ExtraField* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  string_value_.Swap(&other->string_value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(int64_value_, other->int64_value_);
  swap(fixed64_value_, other->fixed64_value_);
}

::google::protobuf::Metadata CMsgSteamDatagramRelayAuthTicket_ExtraField::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steamdatagram_5fmessages_5fauth_2eproto);
  return ::file_level_metadata_steamdatagram_5fmessages_5fauth_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramRelayAuthTicket::InitAsDefaultInstance() {
}
class CMsgSteamDatagramRelayAuthTicket::HasBitSetters {
 public:
  static void set_has_time_expiry(CMsgSteamDatagramRelayAuthTicket* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_authorized_client_identity(CMsgSteamDatagramRelayAuthTicket* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_gameserver_identity(CMsgSteamDatagramRelayAuthTicket* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_authorized_public_ip(CMsgSteamDatagramRelayAuthTicket* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_gameserver_address(CMsgSteamDatagramRelayAuthTicket* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_app_id(CMsgSteamDatagramRelayAuthTicket* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_virtual_port(CMsgSteamDatagramRelayAuthTicket* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_legacy_authorized_steam_id(CMsgSteamDatagramRelayAuthTicket* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_legacy_gameserver_steam_id(CMsgSteamDatagramRelayAuthTicket* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_legacy_gameserver_net_id(CMsgSteamDatagramRelayAuthTicket* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_legacy_gameserver_pop_id(CMsgSteamDatagramRelayAuthTicket* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_deleted_signature(CMsgSteamDatagramRelayAuthTicket* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramRelayAuthTicket::kTimeExpiryFieldNumber;
const int CMsgSteamDatagramRelayAuthTicket::kAuthorizedClientIdentityFieldNumber;
const int CMsgSteamDatagramRelayAuthTicket::kGameserverIdentityFieldNumber;
const int CMsgSteamDatagramRelayAuthTicket::kAuthorizedPublicIpFieldNumber;
const int CMsgSteamDatagramRelayAuthTicket::kGameserverAddressFieldNumber;
const int CMsgSteamDatagramRelayAuthTicket::kAppIdFieldNumber;
const int CMsgSteamDatagramRelayAuthTicket::kVirtualPortFieldNumber;
const int CMsgSteamDatagramRelayAuthTicket::kExtraFieldsFieldNumber;
const int CMsgSteamDatagramRelayAuthTicket::kLegacyAuthorizedSteamIdFieldNumber;
const int CMsgSteamDatagramRelayAuthTicket::kLegacyGameserverSteamIdFieldNumber;
const int CMsgSteamDatagramRelayAuthTicket::kLegacyGameserverNetIdFieldNumber;
const int CMsgSteamDatagramRelayAuthTicket::kLegacyGameserverPopIdFieldNumber;
const int CMsgSteamDatagramRelayAuthTicket::kDELETEDSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramRelayAuthTicket::CMsgSteamDatagramRelayAuthTicket()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSteamDatagramRelayAuthTicket)
}
CMsgSteamDatagramRelayAuthTicket::CMsgSteamDatagramRelayAuthTicket(const CMsgSteamDatagramRelayAuthTicket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      extra_fields_(from.extra_fields_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  deleted_signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_deleted_signature()) {
    deleted_signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deleted_signature_);
  }
  gameserver_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_gameserver_address()) {
    gameserver_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gameserver_address_);
  }
  authorized_client_identity_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_authorized_client_identity()) {
    authorized_client_identity_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.authorized_client_identity_);
  }
  gameserver_identity_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_gameserver_identity()) {
    gameserver_identity_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gameserver_identity_);
  }
  ::memcpy(&legacy_authorized_steam_id_, &from.legacy_authorized_steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&virtual_port_) -
    reinterpret_cast<char*>(&legacy_authorized_steam_id_)) + sizeof(virtual_port_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSteamDatagramRelayAuthTicket)
}

void CMsgSteamDatagramRelayAuthTicket::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgSteamDatagramRelayAuthTicket_steamdatagram_5fmessages_5fauth_2eproto.base);
  deleted_signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameserver_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  authorized_client_identity_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameserver_identity_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&legacy_authorized_steam_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&virtual_port_) -
      reinterpret_cast<char*>(&legacy_authorized_steam_id_)) + sizeof(virtual_port_));
}

CMsgSteamDatagramRelayAuthTicket::~CMsgSteamDatagramRelayAuthTicket() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSteamDatagramRelayAuthTicket)
  SharedDtor();
}

void CMsgSteamDatagramRelayAuthTicket::SharedDtor() {
  deleted_signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameserver_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  authorized_client_identity_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameserver_identity_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgSteamDatagramRelayAuthTicket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamDatagramRelayAuthTicket& CMsgSteamDatagramRelayAuthTicket::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSteamDatagramRelayAuthTicket_steamdatagram_5fmessages_5fauth_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamDatagramRelayAuthTicket::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSteamDatagramRelayAuthTicket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extra_fields_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      deleted_signature_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      gameserver_address_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      authorized_client_identity_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      gameserver_identity_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&legacy_authorized_steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&legacy_gameserver_steam_id_) -
        reinterpret_cast<char*>(&legacy_authorized_steam_id_)) + sizeof(legacy_gameserver_steam_id_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&legacy_gameserver_net_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&virtual_port_) -
        reinterpret_cast<char*>(&legacy_gameserver_net_id_)) + sizeof(virtual_port_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSteamDatagramRelayAuthTicket::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSteamDatagramRelayAuthTicket*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed32 time_expiry = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_time_expiry(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional fixed64 legacy_authorized_steam_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_legacy_authorized_steam_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed32 authorized_public_ip = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_authorized_public_ip(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional fixed64 legacy_gameserver_steam_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_legacy_gameserver_steam_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed64 legacy_gameserver_net_id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 41) goto handle_unusual;
        msg->set_legacy_gameserver_net_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional bytes DELETED_signature = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_deleted_signature();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 app_id = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.steam.CMsgSteamDatagramRelayAuthTicket.ExtraField extra_fields = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgSteamDatagramRelayAuthTicket_ExtraField::_InternalParse;
          object = msg->add_extra_fields();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 66 && (ptr += 1));
        break;
      }
      // optional fixed32 legacy_gameserver_pop_id = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 77) goto handle_unusual;
        msg->set_legacy_gameserver_pop_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional uint32 virtual_port = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_virtual_port(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes gameserver_address = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_gameserver_address();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bytes authorized_client_identity = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_authorized_client_identity();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bytes gameserver_identity = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 106) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_gameserver_identity();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSteamDatagramRelayAuthTicket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSteamDatagramRelayAuthTicket)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 time_expiry = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_time_expiry(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &time_expiry_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 legacy_authorized_steam_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_legacy_authorized_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &legacy_authorized_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 authorized_public_ip = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_authorized_public_ip(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &authorized_public_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 legacy_gameserver_steam_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {
          HasBitSetters::set_has_legacy_gameserver_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &legacy_gameserver_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 legacy_gameserver_net_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (41 & 0xFF)) {
          HasBitSetters::set_has_legacy_gameserver_net_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &legacy_gameserver_net_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes DELETED_signature = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_deleted_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 app_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgSteamDatagramRelayAuthTicket.ExtraField extra_fields = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_extra_fields()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 legacy_gameserver_pop_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (77 & 0xFF)) {
          HasBitSetters::set_has_legacy_gameserver_pop_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &legacy_gameserver_pop_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 virtual_port = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_virtual_port(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &virtual_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes gameserver_address = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gameserver_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes authorized_client_identity = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_authorized_client_identity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes gameserver_identity = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (106 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gameserver_identity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSteamDatagramRelayAuthTicket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSteamDatagramRelayAuthTicket)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSteamDatagramRelayAuthTicket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSteamDatagramRelayAuthTicket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 time_expiry = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->time_expiry(), output);
  }

  // optional fixed64 legacy_authorized_steam_id = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->legacy_authorized_steam_id(), output);
  }

  // optional fixed32 authorized_public_ip = 3;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->authorized_public_ip(), output);
  }

  // optional fixed64 legacy_gameserver_steam_id = 4;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->legacy_gameserver_steam_id(), output);
  }

  // optional fixed64 legacy_gameserver_net_id = 5;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->legacy_gameserver_net_id(), output);
  }

  // optional bytes DELETED_signature = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->deleted_signature(), output);
  }

  // optional uint32 app_id = 7;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->app_id(), output);
  }

  // repeated .proto.steam.CMsgSteamDatagramRelayAuthTicket.ExtraField extra_fields = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->extra_fields_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->extra_fields(static_cast<int>(i)),
      output);
  }

  // optional fixed32 legacy_gameserver_pop_id = 9;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(9, this->legacy_gameserver_pop_id(), output);
  }

  // optional uint32 virtual_port = 10;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->virtual_port(), output);
  }

  // optional bytes gameserver_address = 11;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->gameserver_address(), output);
  }

  // optional bytes authorized_client_identity = 12;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->authorized_client_identity(), output);
  }

  // optional bytes gameserver_identity = 13;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->gameserver_identity(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSteamDatagramRelayAuthTicket)
}

::google::protobuf::uint8* CMsgSteamDatagramRelayAuthTicket::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSteamDatagramRelayAuthTicket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 time_expiry = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->time_expiry(), target);
  }

  // optional fixed64 legacy_authorized_steam_id = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->legacy_authorized_steam_id(), target);
  }

  // optional fixed32 authorized_public_ip = 3;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->authorized_public_ip(), target);
  }

  // optional fixed64 legacy_gameserver_steam_id = 4;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->legacy_gameserver_steam_id(), target);
  }

  // optional fixed64 legacy_gameserver_net_id = 5;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->legacy_gameserver_net_id(), target);
  }

  // optional bytes DELETED_signature = 6;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->deleted_signature(), target);
  }

  // optional uint32 app_id = 7;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->app_id(), target);
  }

  // repeated .proto.steam.CMsgSteamDatagramRelayAuthTicket.ExtraField extra_fields = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->extra_fields_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->extra_fields(static_cast<int>(i)), target);
  }

  // optional fixed32 legacy_gameserver_pop_id = 9;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(9, this->legacy_gameserver_pop_id(), target);
  }

  // optional uint32 virtual_port = 10;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->virtual_port(), target);
  }

  // optional bytes gameserver_address = 11;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->gameserver_address(), target);
  }

  // optional bytes authorized_client_identity = 12;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->authorized_client_identity(), target);
  }

  // optional bytes gameserver_identity = 13;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->gameserver_identity(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSteamDatagramRelayAuthTicket)
  return target;
}

size_t CMsgSteamDatagramRelayAuthTicket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSteamDatagramRelayAuthTicket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgSteamDatagramRelayAuthTicket.ExtraField extra_fields = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->extra_fields_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->extra_fields(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes DELETED_signature = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->deleted_signature());
    }

    // optional bytes gameserver_address = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->gameserver_address());
    }

    // optional bytes authorized_client_identity = 12;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->authorized_client_identity());
    }

    // optional bytes gameserver_identity = 13;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->gameserver_identity());
    }

    // optional fixed64 legacy_authorized_steam_id = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional fixed32 time_expiry = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional fixed32 authorized_public_ip = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional fixed64 legacy_gameserver_steam_id = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional fixed64 legacy_gameserver_net_id = 5;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 7;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional fixed32 legacy_gameserver_pop_id = 9;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional uint32 virtual_port = 10;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->virtual_port());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramRelayAuthTicket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSteamDatagramRelayAuthTicket)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramRelayAuthTicket* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSteamDatagramRelayAuthTicket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSteamDatagramRelayAuthTicket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSteamDatagramRelayAuthTicket)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramRelayAuthTicket::MergeFrom(const CMsgSteamDatagramRelayAuthTicket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSteamDatagramRelayAuthTicket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  extra_fields_.MergeFrom(from.extra_fields_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      deleted_signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deleted_signature_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      gameserver_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gameserver_address_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      authorized_client_identity_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.authorized_client_identity_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      gameserver_identity_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gameserver_identity_);
    }
    if (cached_has_bits & 0x00000010u) {
      legacy_authorized_steam_id_ = from.legacy_authorized_steam_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      time_expiry_ = from.time_expiry_;
    }
    if (cached_has_bits & 0x00000040u) {
      authorized_public_ip_ = from.authorized_public_ip_;
    }
    if (cached_has_bits & 0x00000080u) {
      legacy_gameserver_steam_id_ = from.legacy_gameserver_steam_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      legacy_gameserver_net_id_ = from.legacy_gameserver_net_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      legacy_gameserver_pop_id_ = from.legacy_gameserver_pop_id_;
    }
    if (cached_has_bits & 0x00000800u) {
      virtual_port_ = from.virtual_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramRelayAuthTicket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSteamDatagramRelayAuthTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramRelayAuthTicket::CopyFrom(const CMsgSteamDatagramRelayAuthTicket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSteamDatagramRelayAuthTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramRelayAuthTicket::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramRelayAuthTicket::Swap(CMsgSteamDatagramRelayAuthTicket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramRelayAuthTicket::InternalSwap(CMsgSteamDatagramRelayAuthTicket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&extra_fields_)->InternalSwap(CastToBase(&other->extra_fields_));
  deleted_signature_.Swap(&other->deleted_signature_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  gameserver_address_.Swap(&other->gameserver_address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  authorized_client_identity_.Swap(&other->authorized_client_identity_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  gameserver_identity_.Swap(&other->gameserver_identity_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(legacy_authorized_steam_id_, other->legacy_authorized_steam_id_);
  swap(time_expiry_, other->time_expiry_);
  swap(authorized_public_ip_, other->authorized_public_ip_);
  swap(legacy_gameserver_steam_id_, other->legacy_gameserver_steam_id_);
  swap(legacy_gameserver_net_id_, other->legacy_gameserver_net_id_);
  swap(app_id_, other->app_id_);
  swap(legacy_gameserver_pop_id_, other->legacy_gameserver_pop_id_);
  swap(virtual_port_, other->virtual_port_);
}

::google::protobuf::Metadata CMsgSteamDatagramRelayAuthTicket::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steamdatagram_5fmessages_5fauth_2eproto);
  return ::file_level_metadata_steamdatagram_5fmessages_5fauth_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramSignedRelayAuthTicket::InitAsDefaultInstance() {
}
class CMsgSteamDatagramSignedRelayAuthTicket::HasBitSetters {
 public:
  static void set_has_reserved_do_not_use(CMsgSteamDatagramSignedRelayAuthTicket* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_key_id(CMsgSteamDatagramSignedRelayAuthTicket* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_ticket(CMsgSteamDatagramSignedRelayAuthTicket* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_signature(CMsgSteamDatagramSignedRelayAuthTicket* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramSignedRelayAuthTicket::kReservedDoNotUseFieldNumber;
const int CMsgSteamDatagramSignedRelayAuthTicket::kKeyIdFieldNumber;
const int CMsgSteamDatagramSignedRelayAuthTicket::kTicketFieldNumber;
const int CMsgSteamDatagramSignedRelayAuthTicket::kSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramSignedRelayAuthTicket::CMsgSteamDatagramSignedRelayAuthTicket()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSteamDatagramSignedRelayAuthTicket)
}
CMsgSteamDatagramSignedRelayAuthTicket::CMsgSteamDatagramSignedRelayAuthTicket(const CMsgSteamDatagramSignedRelayAuthTicket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ticket()) {
    ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_);
  }
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_signature()) {
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  ::memcpy(&reserved_do_not_use_, &from.reserved_do_not_use_,
    static_cast<size_t>(reinterpret_cast<char*>(&key_id_) -
    reinterpret_cast<char*>(&reserved_do_not_use_)) + sizeof(key_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSteamDatagramSignedRelayAuthTicket)
}

void CMsgSteamDatagramSignedRelayAuthTicket::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgSteamDatagramSignedRelayAuthTicket_steamdatagram_5fmessages_5fauth_2eproto.base);
  ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&reserved_do_not_use_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&key_id_) -
      reinterpret_cast<char*>(&reserved_do_not_use_)) + sizeof(key_id_));
}

CMsgSteamDatagramSignedRelayAuthTicket::~CMsgSteamDatagramSignedRelayAuthTicket() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSteamDatagramSignedRelayAuthTicket)
  SharedDtor();
}

void CMsgSteamDatagramSignedRelayAuthTicket::SharedDtor() {
  ticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgSteamDatagramSignedRelayAuthTicket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamDatagramSignedRelayAuthTicket& CMsgSteamDatagramSignedRelayAuthTicket::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSteamDatagramSignedRelayAuthTicket_steamdatagram_5fmessages_5fauth_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamDatagramSignedRelayAuthTicket::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSteamDatagramSignedRelayAuthTicket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ticket_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      signature_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&reserved_do_not_use_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&key_id_) -
        reinterpret_cast<char*>(&reserved_do_not_use_)) + sizeof(key_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSteamDatagramSignedRelayAuthTicket::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSteamDatagramSignedRelayAuthTicket*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 reserved_do_not_use = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_reserved_do_not_use(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed64 key_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_key_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional bytes ticket = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_ticket();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bytes signature = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_signature();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSteamDatagramSignedRelayAuthTicket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSteamDatagramSignedRelayAuthTicket)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 reserved_do_not_use = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_reserved_do_not_use(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &reserved_do_not_use_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 key_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_key_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &key_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes ticket = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ticket()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes signature = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSteamDatagramSignedRelayAuthTicket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSteamDatagramSignedRelayAuthTicket)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSteamDatagramSignedRelayAuthTicket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSteamDatagramSignedRelayAuthTicket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 reserved_do_not_use = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->reserved_do_not_use(), output);
  }

  // optional fixed64 key_id = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->key_id(), output);
  }

  // optional bytes ticket = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->ticket(), output);
  }

  // optional bytes signature = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->signature(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSteamDatagramSignedRelayAuthTicket)
}

::google::protobuf::uint8* CMsgSteamDatagramSignedRelayAuthTicket::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSteamDatagramSignedRelayAuthTicket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 reserved_do_not_use = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->reserved_do_not_use(), target);
  }

  // optional fixed64 key_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->key_id(), target);
  }

  // optional bytes ticket = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->ticket(), target);
  }

  // optional bytes signature = 4;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->signature(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSteamDatagramSignedRelayAuthTicket)
  return target;
}

size_t CMsgSteamDatagramSignedRelayAuthTicket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSteamDatagramSignedRelayAuthTicket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes ticket = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ticket());
    }

    // optional bytes signature = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signature());
    }

    // optional fixed64 reserved_do_not_use = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional fixed64 key_id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramSignedRelayAuthTicket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSteamDatagramSignedRelayAuthTicket)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramSignedRelayAuthTicket* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSteamDatagramSignedRelayAuthTicket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSteamDatagramSignedRelayAuthTicket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSteamDatagramSignedRelayAuthTicket)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramSignedRelayAuthTicket::MergeFrom(const CMsgSteamDatagramSignedRelayAuthTicket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSteamDatagramSignedRelayAuthTicket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
    }
    if (cached_has_bits & 0x00000004u) {
      reserved_do_not_use_ = from.reserved_do_not_use_;
    }
    if (cached_has_bits & 0x00000008u) {
      key_id_ = from.key_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramSignedRelayAuthTicket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSteamDatagramSignedRelayAuthTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramSignedRelayAuthTicket::CopyFrom(const CMsgSteamDatagramSignedRelayAuthTicket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSteamDatagramSignedRelayAuthTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramSignedRelayAuthTicket::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramSignedRelayAuthTicket::Swap(CMsgSteamDatagramSignedRelayAuthTicket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramSignedRelayAuthTicket::InternalSwap(CMsgSteamDatagramSignedRelayAuthTicket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ticket_.Swap(&other->ticket_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  signature_.Swap(&other->signature_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(reserved_do_not_use_, other->reserved_do_not_use_);
  swap(key_id_, other->key_id_);
}

::google::protobuf::Metadata CMsgSteamDatagramSignedRelayAuthTicket::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steamdatagram_5fmessages_5fauth_2eproto);
  return ::file_level_metadata_steamdatagram_5fmessages_5fauth_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramCachedCredentialsForApp::InitAsDefaultInstance() {
}
class CMsgSteamDatagramCachedCredentialsForApp::HasBitSetters {
 public:
  static void set_has_private_key(CMsgSteamDatagramCachedCredentialsForApp* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_cert(CMsgSteamDatagramCachedCredentialsForApp* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramCachedCredentialsForApp::kPrivateKeyFieldNumber;
const int CMsgSteamDatagramCachedCredentialsForApp::kCertFieldNumber;
const int CMsgSteamDatagramCachedCredentialsForApp::kRelayTicketsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramCachedCredentialsForApp::CMsgSteamDatagramCachedCredentialsForApp()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSteamDatagramCachedCredentialsForApp)
}
CMsgSteamDatagramCachedCredentialsForApp::CMsgSteamDatagramCachedCredentialsForApp(const CMsgSteamDatagramCachedCredentialsForApp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      relay_tickets_(from.relay_tickets_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  private_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_private_key()) {
    private_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.private_key_);
  }
  cert_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cert()) {
    cert_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cert_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSteamDatagramCachedCredentialsForApp)
}

void CMsgSteamDatagramCachedCredentialsForApp::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgSteamDatagramCachedCredentialsForApp_steamdatagram_5fmessages_5fauth_2eproto.base);
  private_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cert_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgSteamDatagramCachedCredentialsForApp::~CMsgSteamDatagramCachedCredentialsForApp() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSteamDatagramCachedCredentialsForApp)
  SharedDtor();
}

void CMsgSteamDatagramCachedCredentialsForApp::SharedDtor() {
  private_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cert_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgSteamDatagramCachedCredentialsForApp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamDatagramCachedCredentialsForApp& CMsgSteamDatagramCachedCredentialsForApp::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSteamDatagramCachedCredentialsForApp_steamdatagram_5fmessages_5fauth_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamDatagramCachedCredentialsForApp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSteamDatagramCachedCredentialsForApp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  relay_tickets_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      private_key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      cert_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSteamDatagramCachedCredentialsForApp::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSteamDatagramCachedCredentialsForApp*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bytes private_key = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_private_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bytes cert = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_cert();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated bytes relay_tickets = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          object = msg->add_relay_tickets();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParser;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSteamDatagramCachedCredentialsForApp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSteamDatagramCachedCredentialsForApp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes private_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_private_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes cert = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cert()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes relay_tickets = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_relay_tickets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSteamDatagramCachedCredentialsForApp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSteamDatagramCachedCredentialsForApp)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSteamDatagramCachedCredentialsForApp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSteamDatagramCachedCredentialsForApp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes private_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->private_key(), output);
  }

  // optional bytes cert = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->cert(), output);
  }

  // repeated bytes relay_tickets = 3;
  for (int i = 0, n = this->relay_tickets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->relay_tickets(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSteamDatagramCachedCredentialsForApp)
}

::google::protobuf::uint8* CMsgSteamDatagramCachedCredentialsForApp::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSteamDatagramCachedCredentialsForApp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes private_key = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->private_key(), target);
  }

  // optional bytes cert = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->cert(), target);
  }

  // repeated bytes relay_tickets = 3;
  for (int i = 0, n = this->relay_tickets_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->relay_tickets(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSteamDatagramCachedCredentialsForApp)
  return target;
}

size_t CMsgSteamDatagramCachedCredentialsForApp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSteamDatagramCachedCredentialsForApp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes relay_tickets = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->relay_tickets_size());
  for (int i = 0, n = this->relay_tickets_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->relay_tickets(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes private_key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->private_key());
    }

    // optional bytes cert = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cert());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramCachedCredentialsForApp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSteamDatagramCachedCredentialsForApp)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramCachedCredentialsForApp* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSteamDatagramCachedCredentialsForApp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSteamDatagramCachedCredentialsForApp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSteamDatagramCachedCredentialsForApp)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramCachedCredentialsForApp::MergeFrom(const CMsgSteamDatagramCachedCredentialsForApp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSteamDatagramCachedCredentialsForApp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  relay_tickets_.MergeFrom(from.relay_tickets_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      private_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.private_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      cert_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cert_);
    }
  }
}

void CMsgSteamDatagramCachedCredentialsForApp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSteamDatagramCachedCredentialsForApp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramCachedCredentialsForApp::CopyFrom(const CMsgSteamDatagramCachedCredentialsForApp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSteamDatagramCachedCredentialsForApp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramCachedCredentialsForApp::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramCachedCredentialsForApp::Swap(CMsgSteamDatagramCachedCredentialsForApp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramCachedCredentialsForApp::InternalSwap(CMsgSteamDatagramCachedCredentialsForApp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  relay_tickets_.InternalSwap(CastToBase(&other->relay_tickets_));
  private_key_.Swap(&other->private_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cert_.Swap(&other->cert_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CMsgSteamDatagramCachedCredentialsForApp::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steamdatagram_5fmessages_5fauth_2eproto);
  return ::file_level_metadata_steamdatagram_5fmessages_5fauth_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace steam
}  // namespace proto
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSteamDatagramRelayAuthTicket_ExtraField* Arena::CreateMaybeMessage< ::proto::steam::CMsgSteamDatagramRelayAuthTicket_ExtraField >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSteamDatagramRelayAuthTicket_ExtraField >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSteamDatagramRelayAuthTicket* Arena::CreateMaybeMessage< ::proto::steam::CMsgSteamDatagramRelayAuthTicket >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSteamDatagramRelayAuthTicket >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSteamDatagramSignedRelayAuthTicket* Arena::CreateMaybeMessage< ::proto::steam::CMsgSteamDatagramSignedRelayAuthTicket >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSteamDatagramSignedRelayAuthTicket >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSteamDatagramCachedCredentialsForApp* Arena::CreateMaybeMessage< ::proto::steam::CMsgSteamDatagramCachedCredentialsForApp >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSteamDatagramCachedCredentialsForApp >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
