// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_contentsystem.steamclient.proto

#include "steammessages_contentsystem.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fcontentsystem_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CContentServerDirectory_ServerInfo_steammessages_5fcontentsystem_2esteamclient_2eproto;
namespace proto {
namespace steam {
class CContentServerDirectory_GetServersForSteamPipe_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CContentServerDirectory_GetServersForSteamPipe_Request> _instance;
} _CContentServerDirectory_GetServersForSteamPipe_Request_default_instance_;
class CContentServerDirectory_ServerInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CContentServerDirectory_ServerInfo> _instance;
} _CContentServerDirectory_ServerInfo_default_instance_;
class CContentServerDirectory_GetServersForSteamPipe_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CContentServerDirectory_GetServersForSteamPipe_Response> _instance;
} _CContentServerDirectory_GetServersForSteamPipe_Response_default_instance_;
}  // namespace steam
}  // namespace proto
static void InitDefaultsCContentServerDirectory_GetServersForSteamPipe_Request_steammessages_5fcontentsystem_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CContentServerDirectory_GetServersForSteamPipe_Request_default_instance_;
    new (ptr) ::proto::steam::CContentServerDirectory_GetServersForSteamPipe_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CContentServerDirectory_GetServersForSteamPipe_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CContentServerDirectory_GetServersForSteamPipe_Request_steammessages_5fcontentsystem_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCContentServerDirectory_GetServersForSteamPipe_Request_steammessages_5fcontentsystem_2esteamclient_2eproto}, {}};

static void InitDefaultsCContentServerDirectory_ServerInfo_steammessages_5fcontentsystem_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CContentServerDirectory_ServerInfo_default_instance_;
    new (ptr) ::proto::steam::CContentServerDirectory_ServerInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CContentServerDirectory_ServerInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CContentServerDirectory_ServerInfo_steammessages_5fcontentsystem_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCContentServerDirectory_ServerInfo_steammessages_5fcontentsystem_2esteamclient_2eproto}, {}};

static void InitDefaultsCContentServerDirectory_GetServersForSteamPipe_Response_steammessages_5fcontentsystem_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CContentServerDirectory_GetServersForSteamPipe_Response_default_instance_;
    new (ptr) ::proto::steam::CContentServerDirectory_GetServersForSteamPipe_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CContentServerDirectory_GetServersForSteamPipe_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CContentServerDirectory_GetServersForSteamPipe_Response_steammessages_5fcontentsystem_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCContentServerDirectory_GetServersForSteamPipe_Response_steammessages_5fcontentsystem_2esteamclient_2eproto}, {
      &scc_info_CContentServerDirectory_ServerInfo_steammessages_5fcontentsystem_2esteamclient_2eproto.base,}};

void InitDefaults_steammessages_5fcontentsystem_2esteamclient_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_CContentServerDirectory_GetServersForSteamPipe_Request_steammessages_5fcontentsystem_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CContentServerDirectory_ServerInfo_steammessages_5fcontentsystem_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CContentServerDirectory_GetServersForSteamPipe_Response_steammessages_5fcontentsystem_2esteamclient_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_steammessages_5fcontentsystem_2esteamclient_2eproto[3];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_steammessages_5fcontentsystem_2esteamclient_2eproto = nullptr;
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors_steammessages_5fcontentsystem_2esteamclient_2eproto[1];

const ::google::protobuf::uint32 TableStruct_steammessages_5fcontentsystem_2esteamclient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::proto::steam::CContentServerDirectory_GetServersForSteamPipe_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CContentServerDirectory_GetServersForSteamPipe_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CContentServerDirectory_GetServersForSteamPipe_Request, cell_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CContentServerDirectory_GetServersForSteamPipe_Request, max_servers_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CContentServerDirectory_GetServersForSteamPipe_Request, ip_override_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CContentServerDirectory_GetServersForSteamPipe_Request, launcher_type_),
  1,
  3,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CContentServerDirectory_ServerInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CContentServerDirectory_ServerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CContentServerDirectory_ServerInfo, type_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CContentServerDirectory_ServerInfo, source_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CContentServerDirectory_ServerInfo, cell_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CContentServerDirectory_ServerInfo, load_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CContentServerDirectory_ServerInfo, weighted_load_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CContentServerDirectory_ServerInfo, num_entries_in_client_list_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CContentServerDirectory_ServerInfo, steam_china_only_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CContentServerDirectory_ServerInfo, host_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CContentServerDirectory_ServerInfo, vhost_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CContentServerDirectory_ServerInfo, use_as_proxy_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CContentServerDirectory_ServerInfo, proxy_request_path_template_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CContentServerDirectory_ServerInfo, https_support_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CContentServerDirectory_ServerInfo, allowed_app_ids_),
  0,
  5,
  6,
  7,
  8,
  9,
  10,
  1,
  2,
  11,
  3,
  4,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CContentServerDirectory_GetServersForSteamPipe_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CContentServerDirectory_GetServersForSteamPipe_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CContentServerDirectory_GetServersForSteamPipe_Response, servers_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::proto::steam::CContentServerDirectory_GetServersForSteamPipe_Request)},
  { 13, 31, sizeof(::proto::steam::CContentServerDirectory_ServerInfo)},
  { 44, 50, sizeof(::proto::steam::CContentServerDirectory_GetServersForSteamPipe_Response)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CContentServerDirectory_GetServersForSteamPipe_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CContentServerDirectory_ServerInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CContentServerDirectory_GetServersForSteamPipe_Response_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_steammessages_5fcontentsystem_2esteamclient_2eproto = {
  {}, AddDescriptors_steammessages_5fcontentsystem_2esteamclient_2eproto, "steammessages_contentsystem.steamclient.proto", schemas,
  file_default_instances, TableStruct_steammessages_5fcontentsystem_2esteamclient_2eproto::offsets,
  file_level_metadata_steammessages_5fcontentsystem_2esteamclient_2eproto, 3, file_level_enum_descriptors_steammessages_5fcontentsystem_2esteamclient_2eproto, file_level_service_descriptors_steammessages_5fcontentsystem_2esteamclient_2eproto,
};

const char descriptor_table_protodef_steammessages_5fcontentsystem_2esteamclient_2eproto[] =
  "\n-steammessages_contentsystem.steamclien"
  "t.proto\022\013proto.steam\032,steammessages_unif"
  "ied_base.steamclient.proto\"\361\001\n6CContentS"
  "erverDirectory_GetServersForSteamPipe_Re"
  "quest\022#\n\007cell_id\030\001 \001(\rB\022\202\265\030\016client Cell "
  "ID\0229\n\013max_servers\030\002 \001(\r:\00220B \202\265\030\034max ser"
  "vers in response list\022*\n\013ip_override\030\003 \001"
  "(\tB\025\202\265\030\021client IP address\022+\n\rlauncher_ty"
  "pe\030\004 \001(\005:\0010B\021\202\265\030\rlauncher type\"\301\002\n\"CCont"
  "entServerDirectory_ServerInfo\022\014\n\004type\030\001 "
  "\001(\t\022\021\n\tsource_id\030\002 \001(\005\022\017\n\007cell_id\030\003 \001(\005\022"
  "\014\n\004load\030\004 \001(\005\022\025\n\rweighted_load\030\005 \001(\002\022\"\n\032"
  "num_entries_in_client_list\030\006 \001(\005\022\030\n\020stea"
  "m_china_only\030\007 \001(\010\022\014\n\004host\030\010 \001(\t\022\r\n\005vhos"
  "t\030\t \001(\t\022\024\n\014use_as_proxy\030\n \001(\010\022#\n\033proxy_r"
  "equest_path_template\030\013 \001(\t\022\025\n\rhttps_supp"
  "ort\030\014 \001(\t\022\027\n\017allowed_app_ids\030\r \003(\r\"{\n7CC"
  "ontentServerDirectory_GetServersForSteam"
  "Pipe_Response\022@\n\007servers\030\001 \003(\0132/.proto.s"
  "team.CContentServerDirectory_ServerInfo2"
  "\344\001\n\026ContentServerDirectory\022\243\001\n\026GetServer"
  "sForSteamPipe\022C.proto.steam.CContentServ"
  "erDirectory_GetServersForSteamPipe_Reque"
  "st\032D.proto.steam.CContentServerDirectory"
  "_GetServersForSteamPipe_Response\032$\202\265\030 Co"
  "ntent Server and CDN directoryB\003\200\001\001"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_steammessages_5fcontentsystem_2esteamclient_2eproto = {
  false, InitDefaults_steammessages_5fcontentsystem_2esteamclient_2eproto, 
  descriptor_table_protodef_steammessages_5fcontentsystem_2esteamclient_2eproto,
  "steammessages_contentsystem.steamclient.proto", &assign_descriptors_table_steammessages_5fcontentsystem_2esteamclient_2eproto, 1035,
};

void AddDescriptors_steammessages_5fcontentsystem_2esteamclient_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_steammessages_5funified_5fbase_2esteamclient_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_steammessages_5fcontentsystem_2esteamclient_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_steammessages_5fcontentsystem_2esteamclient_2eproto = []() { AddDescriptors_steammessages_5fcontentsystem_2esteamclient_2eproto(); return true; }();
namespace proto {
namespace steam {

// ===================================================================

void CContentServerDirectory_GetServersForSteamPipe_Request::InitAsDefaultInstance() {
}
class CContentServerDirectory_GetServersForSteamPipe_Request::HasBitSetters {
 public:
  static void set_has_cell_id(CContentServerDirectory_GetServersForSteamPipe_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_max_servers(CContentServerDirectory_GetServersForSteamPipe_Request* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_ip_override(CContentServerDirectory_GetServersForSteamPipe_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_launcher_type(CContentServerDirectory_GetServersForSteamPipe_Request* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CContentServerDirectory_GetServersForSteamPipe_Request::kCellIdFieldNumber;
const int CContentServerDirectory_GetServersForSteamPipe_Request::kMaxServersFieldNumber;
const int CContentServerDirectory_GetServersForSteamPipe_Request::kIpOverrideFieldNumber;
const int CContentServerDirectory_GetServersForSteamPipe_Request::kLauncherTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CContentServerDirectory_GetServersForSteamPipe_Request::CContentServerDirectory_GetServersForSteamPipe_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CContentServerDirectory_GetServersForSteamPipe_Request)
}
CContentServerDirectory_GetServersForSteamPipe_Request::CContentServerDirectory_GetServersForSteamPipe_Request(const CContentServerDirectory_GetServersForSteamPipe_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_override_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ip_override()) {
    ip_override_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_override_);
  }
  ::memcpy(&cell_id_, &from.cell_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_servers_) -
    reinterpret_cast<char*>(&cell_id_)) + sizeof(max_servers_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CContentServerDirectory_GetServersForSteamPipe_Request)
}

void CContentServerDirectory_GetServersForSteamPipe_Request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CContentServerDirectory_GetServersForSteamPipe_Request_steammessages_5fcontentsystem_2esteamclient_2eproto.base);
  ip_override_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&cell_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&launcher_type_) -
      reinterpret_cast<char*>(&cell_id_)) + sizeof(launcher_type_));
  max_servers_ = 20u;
}

CContentServerDirectory_GetServersForSteamPipe_Request::~CContentServerDirectory_GetServersForSteamPipe_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CContentServerDirectory_GetServersForSteamPipe_Request)
  SharedDtor();
}

void CContentServerDirectory_GetServersForSteamPipe_Request::SharedDtor() {
  ip_override_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CContentServerDirectory_GetServersForSteamPipe_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CContentServerDirectory_GetServersForSteamPipe_Request& CContentServerDirectory_GetServersForSteamPipe_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CContentServerDirectory_GetServersForSteamPipe_Request_steammessages_5fcontentsystem_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CContentServerDirectory_GetServersForSteamPipe_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CContentServerDirectory_GetServersForSteamPipe_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ip_override_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&cell_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&launcher_type_) -
        reinterpret_cast<char*>(&cell_id_)) + sizeof(launcher_type_));
    max_servers_ = 20u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CContentServerDirectory_GetServersForSteamPipe_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CContentServerDirectory_GetServersForSteamPipe_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 cell_id = 1 [(.proto.steam.description) = "client Cell ID"];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_cell_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 max_servers = 2 [default = 20, (.proto.steam.description) = "max servers in response list"];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_max_servers(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string ip_override = 3 [(.proto.steam.description) = "client IP address"];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CContentServerDirectory_GetServersForSteamPipe_Request.ip_override");
        object = msg->mutable_ip_override();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional int32 launcher_type = 4 [default = 0, (.proto.steam.description) = "launcher type"];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_launcher_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CContentServerDirectory_GetServersForSteamPipe_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CContentServerDirectory_GetServersForSteamPipe_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cell_id = 1 [(.proto.steam.description) = "client Cell ID"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_cell_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cell_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_servers = 2 [default = 20, (.proto.steam.description) = "max servers in response list"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_max_servers(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_servers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ip_override = 3 [(.proto.steam.description) = "client IP address"];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip_override()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip_override().data(), static_cast<int>(this->ip_override().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CContentServerDirectory_GetServersForSteamPipe_Request.ip_override");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 launcher_type = 4 [default = 0, (.proto.steam.description) = "launcher type"];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_launcher_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &launcher_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CContentServerDirectory_GetServersForSteamPipe_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CContentServerDirectory_GetServersForSteamPipe_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CContentServerDirectory_GetServersForSteamPipe_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CContentServerDirectory_GetServersForSteamPipe_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 cell_id = 1 [(.proto.steam.description) = "client Cell ID"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cell_id(), output);
  }

  // optional uint32 max_servers = 2 [default = 20, (.proto.steam.description) = "max servers in response list"];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->max_servers(), output);
  }

  // optional string ip_override = 3 [(.proto.steam.description) = "client IP address"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip_override().data(), static_cast<int>(this->ip_override().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CContentServerDirectory_GetServersForSteamPipe_Request.ip_override");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ip_override(), output);
  }

  // optional int32 launcher_type = 4 [default = 0, (.proto.steam.description) = "launcher type"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->launcher_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CContentServerDirectory_GetServersForSteamPipe_Request)
}

::google::protobuf::uint8* CContentServerDirectory_GetServersForSteamPipe_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CContentServerDirectory_GetServersForSteamPipe_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 cell_id = 1 [(.proto.steam.description) = "client Cell ID"];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cell_id(), target);
  }

  // optional uint32 max_servers = 2 [default = 20, (.proto.steam.description) = "max servers in response list"];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->max_servers(), target);
  }

  // optional string ip_override = 3 [(.proto.steam.description) = "client IP address"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip_override().data(), static_cast<int>(this->ip_override().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CContentServerDirectory_GetServersForSteamPipe_Request.ip_override");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip_override(), target);
  }

  // optional int32 launcher_type = 4 [default = 0, (.proto.steam.description) = "launcher type"];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->launcher_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CContentServerDirectory_GetServersForSteamPipe_Request)
  return target;
}

size_t CContentServerDirectory_GetServersForSteamPipe_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CContentServerDirectory_GetServersForSteamPipe_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string ip_override = 3 [(.proto.steam.description) = "client IP address"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip_override());
    }

    // optional uint32 cell_id = 1 [(.proto.steam.description) = "client Cell ID"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cell_id());
    }

    // optional int32 launcher_type = 4 [default = 0, (.proto.steam.description) = "launcher type"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->launcher_type());
    }

    // optional uint32 max_servers = 2 [default = 20, (.proto.steam.description) = "max servers in response list"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_servers());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CContentServerDirectory_GetServersForSteamPipe_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CContentServerDirectory_GetServersForSteamPipe_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CContentServerDirectory_GetServersForSteamPipe_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CContentServerDirectory_GetServersForSteamPipe_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CContentServerDirectory_GetServersForSteamPipe_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CContentServerDirectory_GetServersForSteamPipe_Request)
    MergeFrom(*source);
  }
}

void CContentServerDirectory_GetServersForSteamPipe_Request::MergeFrom(const CContentServerDirectory_GetServersForSteamPipe_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CContentServerDirectory_GetServersForSteamPipe_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      ip_override_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_override_);
    }
    if (cached_has_bits & 0x00000002u) {
      cell_id_ = from.cell_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      launcher_type_ = from.launcher_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_servers_ = from.max_servers_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CContentServerDirectory_GetServersForSteamPipe_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CContentServerDirectory_GetServersForSteamPipe_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CContentServerDirectory_GetServersForSteamPipe_Request::CopyFrom(const CContentServerDirectory_GetServersForSteamPipe_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CContentServerDirectory_GetServersForSteamPipe_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CContentServerDirectory_GetServersForSteamPipe_Request::IsInitialized() const {
  return true;
}

void CContentServerDirectory_GetServersForSteamPipe_Request::Swap(CContentServerDirectory_GetServersForSteamPipe_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CContentServerDirectory_GetServersForSteamPipe_Request::InternalSwap(CContentServerDirectory_GetServersForSteamPipe_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ip_override_.Swap(&other->ip_override_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(cell_id_, other->cell_id_);
  swap(launcher_type_, other->launcher_type_);
  swap(max_servers_, other->max_servers_);
}

::google::protobuf::Metadata CContentServerDirectory_GetServersForSteamPipe_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fcontentsystem_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fcontentsystem_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CContentServerDirectory_ServerInfo::InitAsDefaultInstance() {
}
class CContentServerDirectory_ServerInfo::HasBitSetters {
 public:
  static void set_has_type(CContentServerDirectory_ServerInfo* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_source_id(CContentServerDirectory_ServerInfo* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_cell_id(CContentServerDirectory_ServerInfo* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_load(CContentServerDirectory_ServerInfo* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_weighted_load(CContentServerDirectory_ServerInfo* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_num_entries_in_client_list(CContentServerDirectory_ServerInfo* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_steam_china_only(CContentServerDirectory_ServerInfo* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_host(CContentServerDirectory_ServerInfo* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_vhost(CContentServerDirectory_ServerInfo* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_use_as_proxy(CContentServerDirectory_ServerInfo* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_proxy_request_path_template(CContentServerDirectory_ServerInfo* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_https_support(CContentServerDirectory_ServerInfo* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CContentServerDirectory_ServerInfo::kTypeFieldNumber;
const int CContentServerDirectory_ServerInfo::kSourceIdFieldNumber;
const int CContentServerDirectory_ServerInfo::kCellIdFieldNumber;
const int CContentServerDirectory_ServerInfo::kLoadFieldNumber;
const int CContentServerDirectory_ServerInfo::kWeightedLoadFieldNumber;
const int CContentServerDirectory_ServerInfo::kNumEntriesInClientListFieldNumber;
const int CContentServerDirectory_ServerInfo::kSteamChinaOnlyFieldNumber;
const int CContentServerDirectory_ServerInfo::kHostFieldNumber;
const int CContentServerDirectory_ServerInfo::kVhostFieldNumber;
const int CContentServerDirectory_ServerInfo::kUseAsProxyFieldNumber;
const int CContentServerDirectory_ServerInfo::kProxyRequestPathTemplateFieldNumber;
const int CContentServerDirectory_ServerInfo::kHttpsSupportFieldNumber;
const int CContentServerDirectory_ServerInfo::kAllowedAppIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CContentServerDirectory_ServerInfo::CContentServerDirectory_ServerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CContentServerDirectory_ServerInfo)
}
CContentServerDirectory_ServerInfo::CContentServerDirectory_ServerInfo(const CContentServerDirectory_ServerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      allowed_app_ids_(from.allowed_app_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_type()) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_host()) {
    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  vhost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_vhost()) {
    vhost_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vhost_);
  }
  proxy_request_path_template_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_proxy_request_path_template()) {
    proxy_request_path_template_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proxy_request_path_template_);
  }
  https_support_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_https_support()) {
    https_support_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.https_support_);
  }
  ::memcpy(&source_id_, &from.source_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_as_proxy_) -
    reinterpret_cast<char*>(&source_id_)) + sizeof(use_as_proxy_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CContentServerDirectory_ServerInfo)
}

void CContentServerDirectory_ServerInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CContentServerDirectory_ServerInfo_steammessages_5fcontentsystem_2esteamclient_2eproto.base);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vhost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proxy_request_path_template_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  https_support_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&source_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_as_proxy_) -
      reinterpret_cast<char*>(&source_id_)) + sizeof(use_as_proxy_));
}

CContentServerDirectory_ServerInfo::~CContentServerDirectory_ServerInfo() {
  // @@protoc_insertion_point(destructor:proto.steam.CContentServerDirectory_ServerInfo)
  SharedDtor();
}

void CContentServerDirectory_ServerInfo::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vhost_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proxy_request_path_template_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  https_support_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CContentServerDirectory_ServerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CContentServerDirectory_ServerInfo& CContentServerDirectory_ServerInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CContentServerDirectory_ServerInfo_steammessages_5fcontentsystem_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CContentServerDirectory_ServerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CContentServerDirectory_ServerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  allowed_app_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      host_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      vhost_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      proxy_request_path_template_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      https_support_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&source_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&load_) -
        reinterpret_cast<char*>(&source_id_)) + sizeof(load_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&weighted_load_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&use_as_proxy_) -
        reinterpret_cast<char*>(&weighted_load_)) + sizeof(use_as_proxy_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CContentServerDirectory_ServerInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CContentServerDirectory_ServerInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CContentServerDirectory_ServerInfo.type");
        object = msg->mutable_type();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional int32 source_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_source_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 cell_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_cell_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 load = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_load(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float weighted_load = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 45) goto handle_unusual;
        msg->set_weighted_load(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional int32 num_entries_in_client_list = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_num_entries_in_client_list(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool steam_china_only = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_steam_china_only(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string host = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CContentServerDirectory_ServerInfo.host");
        object = msg->mutable_host();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string vhost = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CContentServerDirectory_ServerInfo.vhost");
        object = msg->mutable_vhost();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool use_as_proxy = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_use_as_proxy(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string proxy_request_path_template = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CContentServerDirectory_ServerInfo.proxy_request_path_template");
        object = msg->mutable_proxy_request_path_template();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string https_support = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CContentServerDirectory_ServerInfo.https_support");
        object = msg->mutable_https_support();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated uint32 allowed_app_ids = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) == 104) {
          do {
            msg->add_allowed_app_ids(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 104 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 106) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_allowed_app_ids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CContentServerDirectory_ServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CContentServerDirectory_ServerInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CContentServerDirectory_ServerInfo.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 source_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_source_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cell_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_cell_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cell_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 load = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_load(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &load_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float weighted_load = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (45 & 0xFF)) {
          HasBitSetters::set_has_weighted_load(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weighted_load_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_entries_in_client_list = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_num_entries_in_client_list(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_entries_in_client_list_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool steam_china_only = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_steam_china_only(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &steam_china_only_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string host = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->host().data(), static_cast<int>(this->host().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CContentServerDirectory_ServerInfo.host");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string vhost = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vhost()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vhost().data(), static_cast<int>(this->vhost().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CContentServerDirectory_ServerInfo.vhost");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_as_proxy = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_use_as_proxy(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_as_proxy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string proxy_request_path_template = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proxy_request_path_template()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->proxy_request_path_template().data(), static_cast<int>(this->proxy_request_path_template().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CContentServerDirectory_ServerInfo.proxy_request_path_template");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string https_support = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_https_support()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->https_support().data(), static_cast<int>(this->https_support().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CContentServerDirectory_ServerInfo.https_support");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 allowed_app_ids = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 104u, input, this->mutable_allowed_app_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (106 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_allowed_app_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CContentServerDirectory_ServerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CContentServerDirectory_ServerInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CContentServerDirectory_ServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CContentServerDirectory_ServerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CContentServerDirectory_ServerInfo.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // optional int32 source_id = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->source_id(), output);
  }

  // optional int32 cell_id = 3;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cell_id(), output);
  }

  // optional int32 load = 4;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->load(), output);
  }

  // optional float weighted_load = 5;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->weighted_load(), output);
  }

  // optional int32 num_entries_in_client_list = 6;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->num_entries_in_client_list(), output);
  }

  // optional bool steam_china_only = 7;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->steam_china_only(), output);
  }

  // optional string host = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), static_cast<int>(this->host().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CContentServerDirectory_ServerInfo.host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->host(), output);
  }

  // optional string vhost = 9;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vhost().data(), static_cast<int>(this->vhost().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CContentServerDirectory_ServerInfo.vhost");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->vhost(), output);
  }

  // optional bool use_as_proxy = 10;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->use_as_proxy(), output);
  }

  // optional string proxy_request_path_template = 11;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proxy_request_path_template().data(), static_cast<int>(this->proxy_request_path_template().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CContentServerDirectory_ServerInfo.proxy_request_path_template");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->proxy_request_path_template(), output);
  }

  // optional string https_support = 12;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->https_support().data(), static_cast<int>(this->https_support().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CContentServerDirectory_ServerInfo.https_support");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->https_support(), output);
  }

  // repeated uint32 allowed_app_ids = 13;
  for (int i = 0, n = this->allowed_app_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      13, this->allowed_app_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CContentServerDirectory_ServerInfo)
}

::google::protobuf::uint8* CContentServerDirectory_ServerInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CContentServerDirectory_ServerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CContentServerDirectory_ServerInfo.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // optional int32 source_id = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->source_id(), target);
  }

  // optional int32 cell_id = 3;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cell_id(), target);
  }

  // optional int32 load = 4;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->load(), target);
  }

  // optional float weighted_load = 5;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->weighted_load(), target);
  }

  // optional int32 num_entries_in_client_list = 6;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->num_entries_in_client_list(), target);
  }

  // optional bool steam_china_only = 7;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->steam_china_only(), target);
  }

  // optional string host = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), static_cast<int>(this->host().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CContentServerDirectory_ServerInfo.host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->host(), target);
  }

  // optional string vhost = 9;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vhost().data(), static_cast<int>(this->vhost().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CContentServerDirectory_ServerInfo.vhost");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->vhost(), target);
  }

  // optional bool use_as_proxy = 10;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->use_as_proxy(), target);
  }

  // optional string proxy_request_path_template = 11;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proxy_request_path_template().data(), static_cast<int>(this->proxy_request_path_template().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CContentServerDirectory_ServerInfo.proxy_request_path_template");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->proxy_request_path_template(), target);
  }

  // optional string https_support = 12;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->https_support().data(), static_cast<int>(this->https_support().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CContentServerDirectory_ServerInfo.https_support");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->https_support(), target);
  }

  // repeated uint32 allowed_app_ids = 13;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(13, this->allowed_app_ids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CContentServerDirectory_ServerInfo)
  return target;
}

size_t CContentServerDirectory_ServerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CContentServerDirectory_ServerInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 allowed_app_ids = 13;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->allowed_app_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->allowed_app_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional string host = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }

    // optional string vhost = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vhost());
    }

    // optional string proxy_request_path_template = 11;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->proxy_request_path_template());
    }

    // optional string https_support = 12;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->https_support());
    }

    // optional int32 source_id = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->source_id());
    }

    // optional int32 cell_id = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cell_id());
    }

    // optional int32 load = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->load());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional float weighted_load = 5;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional int32 num_entries_in_client_list = 6;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_entries_in_client_list());
    }

    // optional bool steam_china_only = 7;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool use_as_proxy = 10;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CContentServerDirectory_ServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CContentServerDirectory_ServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CContentServerDirectory_ServerInfo* source =
      ::google::protobuf::DynamicCastToGenerated<CContentServerDirectory_ServerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CContentServerDirectory_ServerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CContentServerDirectory_ServerInfo)
    MergeFrom(*source);
  }
}

void CContentServerDirectory_ServerInfo::MergeFrom(const CContentServerDirectory_ServerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CContentServerDirectory_ServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  allowed_app_ids_.MergeFrom(from.allowed_app_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      vhost_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vhost_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      proxy_request_path_template_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proxy_request_path_template_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      https_support_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.https_support_);
    }
    if (cached_has_bits & 0x00000020u) {
      source_id_ = from.source_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      cell_id_ = from.cell_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      load_ = from.load_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      weighted_load_ = from.weighted_load_;
    }
    if (cached_has_bits & 0x00000200u) {
      num_entries_in_client_list_ = from.num_entries_in_client_list_;
    }
    if (cached_has_bits & 0x00000400u) {
      steam_china_only_ = from.steam_china_only_;
    }
    if (cached_has_bits & 0x00000800u) {
      use_as_proxy_ = from.use_as_proxy_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CContentServerDirectory_ServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CContentServerDirectory_ServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CContentServerDirectory_ServerInfo::CopyFrom(const CContentServerDirectory_ServerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CContentServerDirectory_ServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CContentServerDirectory_ServerInfo::IsInitialized() const {
  return true;
}

void CContentServerDirectory_ServerInfo::Swap(CContentServerDirectory_ServerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CContentServerDirectory_ServerInfo::InternalSwap(CContentServerDirectory_ServerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  allowed_app_ids_.InternalSwap(&other->allowed_app_ids_);
  type_.Swap(&other->type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  host_.Swap(&other->host_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  vhost_.Swap(&other->vhost_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  proxy_request_path_template_.Swap(&other->proxy_request_path_template_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  https_support_.Swap(&other->https_support_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(source_id_, other->source_id_);
  swap(cell_id_, other->cell_id_);
  swap(load_, other->load_);
  swap(weighted_load_, other->weighted_load_);
  swap(num_entries_in_client_list_, other->num_entries_in_client_list_);
  swap(steam_china_only_, other->steam_china_only_);
  swap(use_as_proxy_, other->use_as_proxy_);
}

::google::protobuf::Metadata CContentServerDirectory_ServerInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fcontentsystem_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fcontentsystem_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CContentServerDirectory_GetServersForSteamPipe_Response::InitAsDefaultInstance() {
}
class CContentServerDirectory_GetServersForSteamPipe_Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CContentServerDirectory_GetServersForSteamPipe_Response::kServersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CContentServerDirectory_GetServersForSteamPipe_Response::CContentServerDirectory_GetServersForSteamPipe_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CContentServerDirectory_GetServersForSteamPipe_Response)
}
CContentServerDirectory_GetServersForSteamPipe_Response::CContentServerDirectory_GetServersForSteamPipe_Response(const CContentServerDirectory_GetServersForSteamPipe_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      servers_(from.servers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CContentServerDirectory_GetServersForSteamPipe_Response)
}

void CContentServerDirectory_GetServersForSteamPipe_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CContentServerDirectory_GetServersForSteamPipe_Response_steammessages_5fcontentsystem_2esteamclient_2eproto.base);
}

CContentServerDirectory_GetServersForSteamPipe_Response::~CContentServerDirectory_GetServersForSteamPipe_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CContentServerDirectory_GetServersForSteamPipe_Response)
  SharedDtor();
}

void CContentServerDirectory_GetServersForSteamPipe_Response::SharedDtor() {
}

void CContentServerDirectory_GetServersForSteamPipe_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CContentServerDirectory_GetServersForSteamPipe_Response& CContentServerDirectory_GetServersForSteamPipe_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CContentServerDirectory_GetServersForSteamPipe_Response_steammessages_5fcontentsystem_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CContentServerDirectory_GetServersForSteamPipe_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CContentServerDirectory_GetServersForSteamPipe_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  servers_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CContentServerDirectory_GetServersForSteamPipe_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CContentServerDirectory_GetServersForSteamPipe_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.steam.CContentServerDirectory_ServerInfo servers = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CContentServerDirectory_ServerInfo::_InternalParse;
          object = msg->add_servers();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CContentServerDirectory_GetServersForSteamPipe_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CContentServerDirectory_GetServersForSteamPipe_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CContentServerDirectory_ServerInfo servers = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_servers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CContentServerDirectory_GetServersForSteamPipe_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CContentServerDirectory_GetServersForSteamPipe_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CContentServerDirectory_GetServersForSteamPipe_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CContentServerDirectory_GetServersForSteamPipe_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CContentServerDirectory_ServerInfo servers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->servers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->servers(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CContentServerDirectory_GetServersForSteamPipe_Response)
}

::google::protobuf::uint8* CContentServerDirectory_GetServersForSteamPipe_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CContentServerDirectory_GetServersForSteamPipe_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CContentServerDirectory_ServerInfo servers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->servers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->servers(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CContentServerDirectory_GetServersForSteamPipe_Response)
  return target;
}

size_t CContentServerDirectory_GetServersForSteamPipe_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CContentServerDirectory_GetServersForSteamPipe_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CContentServerDirectory_ServerInfo servers = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->servers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->servers(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CContentServerDirectory_GetServersForSteamPipe_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CContentServerDirectory_GetServersForSteamPipe_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CContentServerDirectory_GetServersForSteamPipe_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CContentServerDirectory_GetServersForSteamPipe_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CContentServerDirectory_GetServersForSteamPipe_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CContentServerDirectory_GetServersForSteamPipe_Response)
    MergeFrom(*source);
  }
}

void CContentServerDirectory_GetServersForSteamPipe_Response::MergeFrom(const CContentServerDirectory_GetServersForSteamPipe_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CContentServerDirectory_GetServersForSteamPipe_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  servers_.MergeFrom(from.servers_);
}

void CContentServerDirectory_GetServersForSteamPipe_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CContentServerDirectory_GetServersForSteamPipe_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CContentServerDirectory_GetServersForSteamPipe_Response::CopyFrom(const CContentServerDirectory_GetServersForSteamPipe_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CContentServerDirectory_GetServersForSteamPipe_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CContentServerDirectory_GetServersForSteamPipe_Response::IsInitialized() const {
  return true;
}

void CContentServerDirectory_GetServersForSteamPipe_Response::Swap(CContentServerDirectory_GetServersForSteamPipe_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CContentServerDirectory_GetServersForSteamPipe_Response::InternalSwap(CContentServerDirectory_GetServersForSteamPipe_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&servers_)->InternalSwap(CastToBase(&other->servers_));
}

::google::protobuf::Metadata CContentServerDirectory_GetServersForSteamPipe_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fcontentsystem_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fcontentsystem_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

ContentServerDirectory::~ContentServerDirectory() {}

const ::google::protobuf::ServiceDescriptor* ContentServerDirectory::descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_steammessages_5fcontentsystem_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5fcontentsystem_2esteamclient_2eproto[0];
}

const ::google::protobuf::ServiceDescriptor* ContentServerDirectory::GetDescriptor() {
  return descriptor();
}

void ContentServerDirectory::GetServersForSteamPipe(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CContentServerDirectory_GetServersForSteamPipe_Request*,
                         ::proto::steam::CContentServerDirectory_GetServersForSteamPipe_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetServersForSteamPipe() not implemented.");
  done->Run();
}

void ContentServerDirectory::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5fcontentsystem_2esteamclient_2eproto[0]);
  switch(method->index()) {
    case 0:
      GetServersForSteamPipe(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CContentServerDirectory_GetServersForSteamPipe_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CContentServerDirectory_GetServersForSteamPipe_Response*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& ContentServerDirectory::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CContentServerDirectory_GetServersForSteamPipe_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& ContentServerDirectory::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CContentServerDirectory_GetServersForSteamPipe_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

ContentServerDirectory_Stub::ContentServerDirectory_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
ContentServerDirectory_Stub::ContentServerDirectory_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
ContentServerDirectory_Stub::~ContentServerDirectory_Stub() {
  if (owns_channel_) delete channel_;
}

void ContentServerDirectory_Stub::GetServersForSteamPipe(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CContentServerDirectory_GetServersForSteamPipe_Request* request,
                              ::proto::steam::CContentServerDirectory_GetServersForSteamPipe_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace steam
}  // namespace proto
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::proto::steam::CContentServerDirectory_GetServersForSteamPipe_Request* Arena::CreateMaybeMessage< ::proto::steam::CContentServerDirectory_GetServersForSteamPipe_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CContentServerDirectory_GetServersForSteamPipe_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CContentServerDirectory_ServerInfo* Arena::CreateMaybeMessage< ::proto::steam::CContentServerDirectory_ServerInfo >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CContentServerDirectory_ServerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CContentServerDirectory_GetServersForSteamPipe_Response* Arena::CreateMaybeMessage< ::proto::steam::CContentServerDirectory_GetServersForSteamPipe_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CContentServerDirectory_GetServersForSteamPipe_Response >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
