// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_virtualcontroller.proto

#include "steammessages_virtualcontroller.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fvirtualcontroller_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CVirtualControllerConfig_Control_steammessages_5fvirtualcontroller_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fvirtualcontroller_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CVirtualControllerElement_steammessages_5fvirtualcontroller_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fvirtualcontroller_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CVirtualControllerConfig_ActionSet_steammessages_5fvirtualcontroller_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fvirtualcontroller_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CVirtualControllerConfig_steammessages_5fvirtualcontroller_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fvirtualcontroller_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CVirtualControllerLayout_steammessages_5fvirtualcontroller_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fvirtualcontroller_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CVirtualControllerLayouts_steammessages_5fvirtualcontroller_2eproto;
namespace proto {
namespace steam {
class CVirtualControllerElementDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CVirtualControllerElement> _instance;
} _CVirtualControllerElement_default_instance_;
class CVirtualControllerLayoutDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CVirtualControllerLayout> _instance;
} _CVirtualControllerLayout_default_instance_;
class CVirtualControllerLayoutsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CVirtualControllerLayouts> _instance;
} _CVirtualControllerLayouts_default_instance_;
class CVirtualControllerConfig_ControlDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CVirtualControllerConfig_Control> _instance;
} _CVirtualControllerConfig_Control_default_instance_;
class CVirtualControllerConfig_ActionSetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CVirtualControllerConfig_ActionSet> _instance;
} _CVirtualControllerConfig_ActionSet_default_instance_;
class CVirtualControllerConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CVirtualControllerConfig> _instance;
} _CVirtualControllerConfig_default_instance_;
class CVirtualControllerLayoutPackageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CVirtualControllerLayoutPackage> _instance;
} _CVirtualControllerLayoutPackage_default_instance_;
class CVirtualControllerGlobalConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CVirtualControllerGlobalConfig> _instance;
} _CVirtualControllerGlobalConfig_default_instance_;
}  // namespace steam
}  // namespace proto
static void InitDefaultsCVirtualControllerElement_steammessages_5fvirtualcontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CVirtualControllerElement_default_instance_;
    new (ptr) ::proto::steam::CVirtualControllerElement();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CVirtualControllerElement::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CVirtualControllerElement_steammessages_5fvirtualcontroller_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCVirtualControllerElement_steammessages_5fvirtualcontroller_2eproto}, {}};

static void InitDefaultsCVirtualControllerLayout_steammessages_5fvirtualcontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CVirtualControllerLayout_default_instance_;
    new (ptr) ::proto::steam::CVirtualControllerLayout();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CVirtualControllerLayout::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CVirtualControllerLayout_steammessages_5fvirtualcontroller_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCVirtualControllerLayout_steammessages_5fvirtualcontroller_2eproto}, {
      &scc_info_CVirtualControllerElement_steammessages_5fvirtualcontroller_2eproto.base,}};

static void InitDefaultsCVirtualControllerLayouts_steammessages_5fvirtualcontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CVirtualControllerLayouts_default_instance_;
    new (ptr) ::proto::steam::CVirtualControllerLayouts();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CVirtualControllerLayouts::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CVirtualControllerLayouts_steammessages_5fvirtualcontroller_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCVirtualControllerLayouts_steammessages_5fvirtualcontroller_2eproto}, {
      &scc_info_CVirtualControllerLayout_steammessages_5fvirtualcontroller_2eproto.base,}};

static void InitDefaultsCVirtualControllerConfig_Control_steammessages_5fvirtualcontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CVirtualControllerConfig_Control_default_instance_;
    new (ptr) ::proto::steam::CVirtualControllerConfig_Control();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CVirtualControllerConfig_Control::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CVirtualControllerConfig_Control_steammessages_5fvirtualcontroller_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCVirtualControllerConfig_Control_steammessages_5fvirtualcontroller_2eproto}, {}};

static void InitDefaultsCVirtualControllerConfig_ActionSet_steammessages_5fvirtualcontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CVirtualControllerConfig_ActionSet_default_instance_;
    new (ptr) ::proto::steam::CVirtualControllerConfig_ActionSet();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CVirtualControllerConfig_ActionSet::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CVirtualControllerConfig_ActionSet_steammessages_5fvirtualcontroller_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCVirtualControllerConfig_ActionSet_steammessages_5fvirtualcontroller_2eproto}, {
      &scc_info_CVirtualControllerConfig_Control_steammessages_5fvirtualcontroller_2eproto.base,}};

static void InitDefaultsCVirtualControllerConfig_steammessages_5fvirtualcontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CVirtualControllerConfig_default_instance_;
    new (ptr) ::proto::steam::CVirtualControllerConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CVirtualControllerConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CVirtualControllerConfig_steammessages_5fvirtualcontroller_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCVirtualControllerConfig_steammessages_5fvirtualcontroller_2eproto}, {
      &scc_info_CVirtualControllerConfig_ActionSet_steammessages_5fvirtualcontroller_2eproto.base,}};

static void InitDefaultsCVirtualControllerLayoutPackage_steammessages_5fvirtualcontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CVirtualControllerLayoutPackage_default_instance_;
    new (ptr) ::proto::steam::CVirtualControllerLayoutPackage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CVirtualControllerLayoutPackage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CVirtualControllerLayoutPackage_steammessages_5fvirtualcontroller_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCVirtualControllerLayoutPackage_steammessages_5fvirtualcontroller_2eproto}, {
      &scc_info_CVirtualControllerConfig_steammessages_5fvirtualcontroller_2eproto.base,
      &scc_info_CVirtualControllerLayouts_steammessages_5fvirtualcontroller_2eproto.base,}};

static void InitDefaultsCVirtualControllerGlobalConfig_steammessages_5fvirtualcontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CVirtualControllerGlobalConfig_default_instance_;
    new (ptr) ::proto::steam::CVirtualControllerGlobalConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CVirtualControllerGlobalConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CVirtualControllerGlobalConfig_steammessages_5fvirtualcontroller_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCVirtualControllerGlobalConfig_steammessages_5fvirtualcontroller_2eproto}, {}};

void InitDefaults_steammessages_5fvirtualcontroller_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_CVirtualControllerElement_steammessages_5fvirtualcontroller_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CVirtualControllerLayout_steammessages_5fvirtualcontroller_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CVirtualControllerLayouts_steammessages_5fvirtualcontroller_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CVirtualControllerConfig_Control_steammessages_5fvirtualcontroller_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CVirtualControllerConfig_ActionSet_steammessages_5fvirtualcontroller_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CVirtualControllerConfig_steammessages_5fvirtualcontroller_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CVirtualControllerLayoutPackage_steammessages_5fvirtualcontroller_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CVirtualControllerGlobalConfig_steammessages_5fvirtualcontroller_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_steammessages_5fvirtualcontroller_2eproto[8];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_steammessages_5fvirtualcontroller_2eproto[2];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_steammessages_5fvirtualcontroller_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_steammessages_5fvirtualcontroller_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::proto::steam::CVirtualControllerElement, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CVirtualControllerElement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CVirtualControllerElement, type_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CVirtualControllerElement, visible_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CVirtualControllerElement, x_position_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CVirtualControllerElement, y_position_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CVirtualControllerElement, x_scale_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CVirtualControllerElement, y_scale_),
  4,
  0,
  1,
  2,
  5,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CVirtualControllerLayout, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CVirtualControllerLayout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CVirtualControllerLayout, layout_version_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CVirtualControllerLayout, actionset_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CVirtualControllerLayout, elements_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CVirtualControllerLayouts, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CVirtualControllerLayouts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CVirtualControllerLayouts, layouts_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CVirtualControllerLayouts, input_mode_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CVirtualControllerConfig_Control, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CVirtualControllerConfig_Control, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CVirtualControllerConfig_Control, name_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CVirtualControllerConfig_Control, icon_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CVirtualControllerConfig_Control, input_source_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CVirtualControllerConfig_Control, input_mode_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CVirtualControllerConfig_Control, input_element_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CVirtualControllerConfig_Control, output_gamepad_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CVirtualControllerConfig_Control, output_keyboard_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CVirtualControllerConfig_Control, output_mouse_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CVirtualControllerConfig_Control, icon_foreground_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CVirtualControllerConfig_Control, icon_background_),
  0,
  1,
  4,
  5,
  6,
  7,
  8,
  9,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CVirtualControllerConfig_ActionSet, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CVirtualControllerConfig_ActionSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CVirtualControllerConfig_ActionSet, id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CVirtualControllerConfig_ActionSet, parent_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CVirtualControllerConfig_ActionSet, name_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CVirtualControllerConfig_ActionSet, controls_),
  1,
  2,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CVirtualControllerConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CVirtualControllerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CVirtualControllerConfig, name_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CVirtualControllerConfig, actionsets_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CVirtualControllerLayoutPackage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CVirtualControllerLayoutPackage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CVirtualControllerLayoutPackage, appid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CVirtualControllerLayoutPackage, revision_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CVirtualControllerLayoutPackage, config_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CVirtualControllerLayoutPackage, layouts_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CVirtualControllerGlobalConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CVirtualControllerGlobalConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CVirtualControllerGlobalConfig, feedback_enabled_),
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::proto::steam::CVirtualControllerElement)},
  { 17, 25, sizeof(::proto::steam::CVirtualControllerLayout)},
  { 28, 35, sizeof(::proto::steam::CVirtualControllerLayouts)},
  { 37, 52, sizeof(::proto::steam::CVirtualControllerConfig_Control)},
  { 62, 71, sizeof(::proto::steam::CVirtualControllerConfig_ActionSet)},
  { 75, 82, sizeof(::proto::steam::CVirtualControllerConfig)},
  { 84, 93, sizeof(::proto::steam::CVirtualControllerLayoutPackage)},
  { 97, 103, sizeof(::proto::steam::CVirtualControllerGlobalConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CVirtualControllerElement_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CVirtualControllerLayout_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CVirtualControllerLayouts_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CVirtualControllerConfig_Control_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CVirtualControllerConfig_ActionSet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CVirtualControllerConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CVirtualControllerLayoutPackage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CVirtualControllerGlobalConfig_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_steammessages_5fvirtualcontroller_2eproto = {
  {}, AddDescriptors_steammessages_5fvirtualcontroller_2eproto, "steammessages_virtualcontroller.proto", schemas,
  file_default_instances, TableStruct_steammessages_5fvirtualcontroller_2eproto::offsets,
  file_level_metadata_steammessages_5fvirtualcontroller_2eproto, 8, file_level_enum_descriptors_steammessages_5fvirtualcontroller_2eproto, file_level_service_descriptors_steammessages_5fvirtualcontroller_2eproto,
};

const char descriptor_table_protodef_steammessages_5fvirtualcontroller_2eproto[] =
  "\n%steammessages_virtualcontroller.proto\022"
  "\013proto.steam\"\315\001\n\031CVirtualControllerEleme"
  "nt\022O\n\004type\030\001 \001(\0162#.proto.steam.EControll"
  "erElementType:\034k_EControllerElementTypeN"
  "one\022\017\n\007visible\030\002 \001(\010\022\022\n\nx_position\030\003 \001(\002"
  "\022\022\n\ny_position\030\004 \001(\002\022\022\n\007x_scale\030\005 \001(\002:\0011"
  "\022\022\n\007y_scale\030\006 \001(\002:\0011\"\202\001\n\030CVirtualControl"
  "lerLayout\022\026\n\016layout_version\030\001 \001(\005\022\024\n\014act"
  "ionset_id\030\002 \001(\005\0228\n\010elements\030\004 \003(\0132&.prot"
  "o.steam.CVirtualControllerElement\"\225\001\n\031CV"
  "irtualControllerLayouts\0226\n\007layouts\030\001 \003(\013"
  "2%.proto.steam.CVirtualControllerLayout\022"
  "@\n\ninput_mode\030\002 \001(\0162\027.proto.steam.EInput"
  "Mode:\023k_EInputModeUnknown\"\312\003\n\030CVirtualCo"
  "ntrollerConfig\022\014\n\004name\030\001 \001(\t\022C\n\nactionse"
  "ts\030\002 \003(\0132/.proto.steam.CVirtualControlle"
  "rConfig.ActionSet\032\337\001\n\007Control\022\014\n\004name\030\001 "
  "\001(\t\022\014\n\004icon\030\002 \001(\t\022\024\n\014input_source\030\003 \001(\005\022"
  "\022\n\ninput_mode\030\004 \001(\005\022\025\n\rinput_element\030\005 \001"
  "(\005\022\026\n\016output_gamepad\030\006 \001(\005\022\027\n\017output_key"
  "board\030\007 \001(\005\022\024\n\014output_mouse\030\010 \001(\005\022\027\n\017ico"
  "n_foreground\030\t \001(\t\022\027\n\017icon_background\030\n "
  "\001(\t\032y\n\tActionSet\022\n\n\002id\030\001 \001(\005\022\021\n\tparent_i"
  "d\030\002 \001(\005\022\014\n\004name\030\003 \001(\t\022\?\n\010controls\030\004 \003(\0132"
  "-.proto.steam.CVirtualControllerConfig.C"
  "ontrol\"\262\001\n\037CVirtualControllerLayoutPacka"
  "ge\022\r\n\005appid\030\001 \001(\r\022\020\n\010revision\030\002 \001(\r\0225\n\006c"
  "onfig\030\003 \001(\0132%.proto.steam.CVirtualContro"
  "llerConfig\0227\n\007layouts\030\004 \001(\0132&.proto.stea"
  "m.CVirtualControllerLayouts\":\n\036CVirtualC"
  "ontrollerGlobalConfig\022\030\n\020feedback_enable"
  "d\030\001 \001(\010*|\n\nEInputMode\022\027\n\023k_EInputModeUnk"
  "nown\020\000\022\025\n\021k_EInputModeMouse\020\001\022\032\n\026k_EInpu"
  "tModeController\020\002\022\"\n\036k_EInputModeMouseAn"
  "dController\020\003*\374\t\n\026EControllerElementType"
  "\022)\n\034k_EControllerElementTypeNone\020\377\377\377\377\377\377\377"
  "\377\377\001\022!\n\035k_EControllerElementTypeThumb\020\000\022\'"
  "\n#k_EControllerElementTypeButtonSteam\020\001\022"
  "(\n$k_EControllerElementTypeJoystickLeft\020"
  "\002\022.\n*k_EControllerElementTypeButtonJoyst"
  "ickLeft\020\003\022)\n%k_EControllerElementTypeJoy"
  "stickRight\020\004\022/\n+k_EControllerElementType"
  "ButtonJoystickRight\020\005\022 \n\034k_EControllerEl"
  "ementTypeDPad\020\006\022#\n\037k_EControllerElementT"
  "ypeButtonA\020\007\022#\n\037k_EControllerElementType"
  "ButtonB\020\010\022#\n\037k_EControllerElementTypeBut"
  "tonX\020\t\022#\n\037k_EControllerElementTypeButton"
  "Y\020\n\022(\n$k_EControllerElementTypeButtonSel"
  "ect\020\013\022\'\n#k_EControllerElementTypeButtonS"
  "tart\020\014\022-\n)k_EControllerElementTypeButton"
  "TriggerLeft\020\r\022.\n*k_EControllerElementTyp"
  "eButtonTriggerRight\020\016\022,\n(k_EControllerEl"
  "ementTypeButtonBumperLeft\020\017\022-\n)k_EContro"
  "llerElementTypeButtonBumperRight\020\020\022(\n$k_"
  "EControllerElementTypeButtonMacro0\020\021\022(\n$"
  "k_EControllerElementTypeButtonMacro1\020\022\022("
  "\n$k_EControllerElementTypeButtonMacro2\020\023"
  "\022(\n$k_EControllerElementTypeButtonMacro3"
  "\020\024\022(\n$k_EControllerElementTypeButtonMacr"
  "o4\020\025\022(\n$k_EControllerElementTypeButtonMa"
  "cro5\020\026\022(\n$k_EControllerElementTypeButton"
  "Macro6\020\027\022(\n$k_EControllerElementTypeButt"
  "onMacro7\020\030\022*\n&k_EControllerElementTypeTr"
  "ackpadCenter\020\031\022(\n$k_EControllerElementTy"
  "peTrackpadLeft\020\032\022)\n%k_EControllerElement"
  "TypeTrackpadRight\020\033\022\037\n\033k_EControllerElem"
  "entTypeMax\020\034"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_steammessages_5fvirtualcontroller_2eproto = {
  false, InitDefaults_steammessages_5fvirtualcontroller_2eproto, 
  descriptor_table_protodef_steammessages_5fvirtualcontroller_2eproto,
  "steammessages_virtualcontroller.proto", &assign_descriptors_table_steammessages_5fvirtualcontroller_2eproto, 2652,
};

void AddDescriptors_steammessages_5fvirtualcontroller_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_steammessages_5fvirtualcontroller_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_steammessages_5fvirtualcontroller_2eproto = []() { AddDescriptors_steammessages_5fvirtualcontroller_2eproto(); return true; }();
namespace proto {
namespace steam {
const ::google::protobuf::EnumDescriptor* EInputMode_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_steammessages_5fvirtualcontroller_2eproto);
  return file_level_enum_descriptors_steammessages_5fvirtualcontroller_2eproto[0];
}
bool EInputMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EControllerElementType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_steammessages_5fvirtualcontroller_2eproto);
  return file_level_enum_descriptors_steammessages_5fvirtualcontroller_2eproto[1];
}
bool EControllerElementType_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CVirtualControllerElement::InitAsDefaultInstance() {
}
class CVirtualControllerElement::HasBitSetters {
 public:
  static void set_has_type(CVirtualControllerElement* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_visible(CVirtualControllerElement* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_x_position(CVirtualControllerElement* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_y_position(CVirtualControllerElement* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_x_scale(CVirtualControllerElement* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_y_scale(CVirtualControllerElement* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CVirtualControllerElement::kTypeFieldNumber;
const int CVirtualControllerElement::kVisibleFieldNumber;
const int CVirtualControllerElement::kXPositionFieldNumber;
const int CVirtualControllerElement::kYPositionFieldNumber;
const int CVirtualControllerElement::kXScaleFieldNumber;
const int CVirtualControllerElement::kYScaleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CVirtualControllerElement::CVirtualControllerElement()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CVirtualControllerElement)
}
CVirtualControllerElement::CVirtualControllerElement(const CVirtualControllerElement& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&visible_, &from.visible_,
    static_cast<size_t>(reinterpret_cast<char*>(&x_scale_) -
    reinterpret_cast<char*>(&visible_)) + sizeof(x_scale_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CVirtualControllerElement)
}

void CVirtualControllerElement::SharedCtor() {
  ::memset(&visible_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_position_) -
      reinterpret_cast<char*>(&visible_)) + sizeof(y_position_));
  y_scale_ = 1;
  type_ = -1;
  x_scale_ = 1;
}

CVirtualControllerElement::~CVirtualControllerElement() {
  // @@protoc_insertion_point(destructor:proto.steam.CVirtualControllerElement)
  SharedDtor();
}

void CVirtualControllerElement::SharedDtor() {
}

void CVirtualControllerElement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CVirtualControllerElement& CVirtualControllerElement::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CVirtualControllerElement_steammessages_5fvirtualcontroller_2eproto.base);
  return *internal_default_instance();
}


void CVirtualControllerElement::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CVirtualControllerElement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&visible_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_position_) -
        reinterpret_cast<char*>(&visible_)) + sizeof(y_position_));
    y_scale_ = 1;
    type_ = -1;
    x_scale_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CVirtualControllerElement::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CVirtualControllerElement*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.steam.EControllerElementType type = 1 [default = k_EControllerElementTypeNone];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::steam::EControllerElementType_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_type(static_cast<::proto::steam::EControllerElementType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool visible = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_visible(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float x_position = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_x_position(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float y_position = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 37) goto handle_unusual;
        msg->set_y_position(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float x_scale = 5 [default = 1];
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 45) goto handle_unusual;
        msg->set_x_scale(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float y_scale = 6 [default = 1];
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 53) goto handle_unusual;
        msg->set_y_scale(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CVirtualControllerElement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CVirtualControllerElement)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.steam.EControllerElementType type = 1 [default = k_EControllerElementTypeNone];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::steam::EControllerElementType_IsValid(value)) {
            set_type(static_cast< ::proto::steam::EControllerElementType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool visible = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_visible(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &visible_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float x_position = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_x_position(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y_position = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_y_position(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float x_scale = 5 [default = 1];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (45 & 0xFF)) {
          HasBitSetters::set_has_x_scale(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y_scale = 6 [default = 1];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (53 & 0xFF)) {
          HasBitSetters::set_has_y_scale(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CVirtualControllerElement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CVirtualControllerElement)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CVirtualControllerElement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CVirtualControllerElement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.EControllerElementType type = 1 [default = k_EControllerElementTypeNone];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional bool visible = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->visible(), output);
  }

  // optional float x_position = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->x_position(), output);
  }

  // optional float y_position = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->y_position(), output);
  }

  // optional float x_scale = 5 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->x_scale(), output);
  }

  // optional float y_scale = 6 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->y_scale(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CVirtualControllerElement)
}

::google::protobuf::uint8* CVirtualControllerElement::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CVirtualControllerElement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.EControllerElementType type = 1 [default = k_EControllerElementTypeNone];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional bool visible = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->visible(), target);
  }

  // optional float x_position = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->x_position(), target);
  }

  // optional float y_position = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->y_position(), target);
  }

  // optional float x_scale = 5 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->x_scale(), target);
  }

  // optional float y_scale = 6 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->y_scale(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CVirtualControllerElement)
  return target;
}

size_t CVirtualControllerElement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CVirtualControllerElement)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bool visible = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional float x_position = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float y_position = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float y_scale = 6 [default = 1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional .proto.steam.EControllerElementType type = 1 [default = k_EControllerElementTypeNone];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional float x_scale = 5 [default = 1];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CVirtualControllerElement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CVirtualControllerElement)
  GOOGLE_DCHECK_NE(&from, this);
  const CVirtualControllerElement* source =
      ::google::protobuf::DynamicCastToGenerated<CVirtualControllerElement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CVirtualControllerElement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CVirtualControllerElement)
    MergeFrom(*source);
  }
}

void CVirtualControllerElement::MergeFrom(const CVirtualControllerElement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CVirtualControllerElement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      visible_ = from.visible_;
    }
    if (cached_has_bits & 0x00000002u) {
      x_position_ = from.x_position_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_position_ = from.y_position_;
    }
    if (cached_has_bits & 0x00000008u) {
      y_scale_ = from.y_scale_;
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000020u) {
      x_scale_ = from.x_scale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CVirtualControllerElement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CVirtualControllerElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CVirtualControllerElement::CopyFrom(const CVirtualControllerElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CVirtualControllerElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVirtualControllerElement::IsInitialized() const {
  return true;
}

void CVirtualControllerElement::Swap(CVirtualControllerElement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CVirtualControllerElement::InternalSwap(CVirtualControllerElement* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(visible_, other->visible_);
  swap(x_position_, other->x_position_);
  swap(y_position_, other->y_position_);
  swap(y_scale_, other->y_scale_);
  swap(type_, other->type_);
  swap(x_scale_, other->x_scale_);
}

::google::protobuf::Metadata CVirtualControllerElement::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fvirtualcontroller_2eproto);
  return ::file_level_metadata_steammessages_5fvirtualcontroller_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CVirtualControllerLayout::InitAsDefaultInstance() {
}
class CVirtualControllerLayout::HasBitSetters {
 public:
  static void set_has_layout_version(CVirtualControllerLayout* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_actionset_id(CVirtualControllerLayout* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CVirtualControllerLayout::kLayoutVersionFieldNumber;
const int CVirtualControllerLayout::kActionsetIdFieldNumber;
const int CVirtualControllerLayout::kElementsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CVirtualControllerLayout::CVirtualControllerLayout()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CVirtualControllerLayout)
}
CVirtualControllerLayout::CVirtualControllerLayout(const CVirtualControllerLayout& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      elements_(from.elements_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&layout_version_, &from.layout_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&actionset_id_) -
    reinterpret_cast<char*>(&layout_version_)) + sizeof(actionset_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CVirtualControllerLayout)
}

void CVirtualControllerLayout::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CVirtualControllerLayout_steammessages_5fvirtualcontroller_2eproto.base);
  ::memset(&layout_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&actionset_id_) -
      reinterpret_cast<char*>(&layout_version_)) + sizeof(actionset_id_));
}

CVirtualControllerLayout::~CVirtualControllerLayout() {
  // @@protoc_insertion_point(destructor:proto.steam.CVirtualControllerLayout)
  SharedDtor();
}

void CVirtualControllerLayout::SharedDtor() {
}

void CVirtualControllerLayout::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CVirtualControllerLayout& CVirtualControllerLayout::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CVirtualControllerLayout_steammessages_5fvirtualcontroller_2eproto.base);
  return *internal_default_instance();
}


void CVirtualControllerLayout::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CVirtualControllerLayout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  elements_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&layout_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&actionset_id_) -
        reinterpret_cast<char*>(&layout_version_)) + sizeof(actionset_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CVirtualControllerLayout::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CVirtualControllerLayout*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 layout_version = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_layout_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 actionset_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_actionset_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.steam.CVirtualControllerElement elements = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CVirtualControllerElement::_InternalParse;
          object = msg->add_elements();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CVirtualControllerLayout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CVirtualControllerLayout)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 layout_version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_layout_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &layout_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 actionset_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_actionset_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actionset_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CVirtualControllerElement elements = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_elements()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CVirtualControllerLayout)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CVirtualControllerLayout)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CVirtualControllerLayout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CVirtualControllerLayout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 layout_version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->layout_version(), output);
  }

  // optional int32 actionset_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->actionset_id(), output);
  }

  // repeated .proto.steam.CVirtualControllerElement elements = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->elements_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->elements(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CVirtualControllerLayout)
}

::google::protobuf::uint8* CVirtualControllerLayout::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CVirtualControllerLayout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 layout_version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->layout_version(), target);
  }

  // optional int32 actionset_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->actionset_id(), target);
  }

  // repeated .proto.steam.CVirtualControllerElement elements = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->elements_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->elements(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CVirtualControllerLayout)
  return target;
}

size_t CVirtualControllerLayout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CVirtualControllerLayout)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CVirtualControllerElement elements = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->elements_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->elements(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 layout_version = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->layout_version());
    }

    // optional int32 actionset_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actionset_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CVirtualControllerLayout::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CVirtualControllerLayout)
  GOOGLE_DCHECK_NE(&from, this);
  const CVirtualControllerLayout* source =
      ::google::protobuf::DynamicCastToGenerated<CVirtualControllerLayout>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CVirtualControllerLayout)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CVirtualControllerLayout)
    MergeFrom(*source);
  }
}

void CVirtualControllerLayout::MergeFrom(const CVirtualControllerLayout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CVirtualControllerLayout)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  elements_.MergeFrom(from.elements_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      layout_version_ = from.layout_version_;
    }
    if (cached_has_bits & 0x00000002u) {
      actionset_id_ = from.actionset_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CVirtualControllerLayout::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CVirtualControllerLayout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CVirtualControllerLayout::CopyFrom(const CVirtualControllerLayout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CVirtualControllerLayout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVirtualControllerLayout::IsInitialized() const {
  return true;
}

void CVirtualControllerLayout::Swap(CVirtualControllerLayout* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CVirtualControllerLayout::InternalSwap(CVirtualControllerLayout* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&elements_)->InternalSwap(CastToBase(&other->elements_));
  swap(layout_version_, other->layout_version_);
  swap(actionset_id_, other->actionset_id_);
}

::google::protobuf::Metadata CVirtualControllerLayout::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fvirtualcontroller_2eproto);
  return ::file_level_metadata_steammessages_5fvirtualcontroller_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CVirtualControllerLayouts::InitAsDefaultInstance() {
}
class CVirtualControllerLayouts::HasBitSetters {
 public:
  static void set_has_input_mode(CVirtualControllerLayouts* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CVirtualControllerLayouts::kLayoutsFieldNumber;
const int CVirtualControllerLayouts::kInputModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CVirtualControllerLayouts::CVirtualControllerLayouts()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CVirtualControllerLayouts)
}
CVirtualControllerLayouts::CVirtualControllerLayouts(const CVirtualControllerLayouts& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      layouts_(from.layouts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  input_mode_ = from.input_mode_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CVirtualControllerLayouts)
}

void CVirtualControllerLayouts::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CVirtualControllerLayouts_steammessages_5fvirtualcontroller_2eproto.base);
  input_mode_ = 0;
}

CVirtualControllerLayouts::~CVirtualControllerLayouts() {
  // @@protoc_insertion_point(destructor:proto.steam.CVirtualControllerLayouts)
  SharedDtor();
}

void CVirtualControllerLayouts::SharedDtor() {
}

void CVirtualControllerLayouts::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CVirtualControllerLayouts& CVirtualControllerLayouts::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CVirtualControllerLayouts_steammessages_5fvirtualcontroller_2eproto.base);
  return *internal_default_instance();
}


void CVirtualControllerLayouts::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CVirtualControllerLayouts)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  layouts_.Clear();
  input_mode_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CVirtualControllerLayouts::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CVirtualControllerLayouts*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.steam.CVirtualControllerLayout layouts = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CVirtualControllerLayout::_InternalParse;
          object = msg->add_layouts();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // optional .proto.steam.EInputMode input_mode = 2 [default = k_EInputModeUnknown];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::steam::EInputMode_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_input_mode(static_cast<::proto::steam::EInputMode>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CVirtualControllerLayouts::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CVirtualControllerLayouts)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CVirtualControllerLayout layouts = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_layouts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.EInputMode input_mode = 2 [default = k_EInputModeUnknown];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::steam::EInputMode_IsValid(value)) {
            set_input_mode(static_cast< ::proto::steam::EInputMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CVirtualControllerLayouts)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CVirtualControllerLayouts)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CVirtualControllerLayouts::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CVirtualControllerLayouts)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CVirtualControllerLayout layouts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->layouts_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->layouts(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.EInputMode input_mode = 2 [default = k_EInputModeUnknown];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->input_mode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CVirtualControllerLayouts)
}

::google::protobuf::uint8* CVirtualControllerLayouts::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CVirtualControllerLayouts)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CVirtualControllerLayout layouts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->layouts_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->layouts(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.EInputMode input_mode = 2 [default = k_EInputModeUnknown];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->input_mode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CVirtualControllerLayouts)
  return target;
}

size_t CVirtualControllerLayouts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CVirtualControllerLayouts)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CVirtualControllerLayout layouts = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->layouts_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->layouts(static_cast<int>(i)));
    }
  }

  // optional .proto.steam.EInputMode input_mode = 2 [default = k_EInputModeUnknown];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->input_mode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CVirtualControllerLayouts::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CVirtualControllerLayouts)
  GOOGLE_DCHECK_NE(&from, this);
  const CVirtualControllerLayouts* source =
      ::google::protobuf::DynamicCastToGenerated<CVirtualControllerLayouts>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CVirtualControllerLayouts)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CVirtualControllerLayouts)
    MergeFrom(*source);
  }
}

void CVirtualControllerLayouts::MergeFrom(const CVirtualControllerLayouts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CVirtualControllerLayouts)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  layouts_.MergeFrom(from.layouts_);
  if (from.has_input_mode()) {
    set_input_mode(from.input_mode());
  }
}

void CVirtualControllerLayouts::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CVirtualControllerLayouts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CVirtualControllerLayouts::CopyFrom(const CVirtualControllerLayouts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CVirtualControllerLayouts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVirtualControllerLayouts::IsInitialized() const {
  return true;
}

void CVirtualControllerLayouts::Swap(CVirtualControllerLayouts* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CVirtualControllerLayouts::InternalSwap(CVirtualControllerLayouts* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&layouts_)->InternalSwap(CastToBase(&other->layouts_));
  swap(input_mode_, other->input_mode_);
}

::google::protobuf::Metadata CVirtualControllerLayouts::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fvirtualcontroller_2eproto);
  return ::file_level_metadata_steammessages_5fvirtualcontroller_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CVirtualControllerConfig_Control::InitAsDefaultInstance() {
}
class CVirtualControllerConfig_Control::HasBitSetters {
 public:
  static void set_has_name(CVirtualControllerConfig_Control* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_icon(CVirtualControllerConfig_Control* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_input_source(CVirtualControllerConfig_Control* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_input_mode(CVirtualControllerConfig_Control* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_input_element(CVirtualControllerConfig_Control* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_output_gamepad(CVirtualControllerConfig_Control* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_output_keyboard(CVirtualControllerConfig_Control* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_output_mouse(CVirtualControllerConfig_Control* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_icon_foreground(CVirtualControllerConfig_Control* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_icon_background(CVirtualControllerConfig_Control* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CVirtualControllerConfig_Control::kNameFieldNumber;
const int CVirtualControllerConfig_Control::kIconFieldNumber;
const int CVirtualControllerConfig_Control::kInputSourceFieldNumber;
const int CVirtualControllerConfig_Control::kInputModeFieldNumber;
const int CVirtualControllerConfig_Control::kInputElementFieldNumber;
const int CVirtualControllerConfig_Control::kOutputGamepadFieldNumber;
const int CVirtualControllerConfig_Control::kOutputKeyboardFieldNumber;
const int CVirtualControllerConfig_Control::kOutputMouseFieldNumber;
const int CVirtualControllerConfig_Control::kIconForegroundFieldNumber;
const int CVirtualControllerConfig_Control::kIconBackgroundFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CVirtualControllerConfig_Control::CVirtualControllerConfig_Control()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CVirtualControllerConfig.Control)
}
CVirtualControllerConfig_Control::CVirtualControllerConfig_Control(const CVirtualControllerConfig_Control& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  icon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_icon()) {
    icon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.icon_);
  }
  icon_foreground_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_icon_foreground()) {
    icon_foreground_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.icon_foreground_);
  }
  icon_background_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_icon_background()) {
    icon_background_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.icon_background_);
  }
  ::memcpy(&input_source_, &from.input_source_,
    static_cast<size_t>(reinterpret_cast<char*>(&output_mouse_) -
    reinterpret_cast<char*>(&input_source_)) + sizeof(output_mouse_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CVirtualControllerConfig.Control)
}

void CVirtualControllerConfig_Control::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CVirtualControllerConfig_Control_steammessages_5fvirtualcontroller_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  icon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  icon_foreground_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  icon_background_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&input_source_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&output_mouse_) -
      reinterpret_cast<char*>(&input_source_)) + sizeof(output_mouse_));
}

CVirtualControllerConfig_Control::~CVirtualControllerConfig_Control() {
  // @@protoc_insertion_point(destructor:proto.steam.CVirtualControllerConfig.Control)
  SharedDtor();
}

void CVirtualControllerConfig_Control::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  icon_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  icon_foreground_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  icon_background_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CVirtualControllerConfig_Control::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CVirtualControllerConfig_Control& CVirtualControllerConfig_Control::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CVirtualControllerConfig_Control_steammessages_5fvirtualcontroller_2eproto.base);
  return *internal_default_instance();
}


void CVirtualControllerConfig_Control::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CVirtualControllerConfig.Control)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      icon_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      icon_foreground_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      icon_background_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&input_source_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&output_gamepad_) -
        reinterpret_cast<char*>(&input_source_)) + sizeof(output_gamepad_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&output_keyboard_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&output_mouse_) -
        reinterpret_cast<char*>(&output_keyboard_)) + sizeof(output_mouse_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CVirtualControllerConfig_Control::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CVirtualControllerConfig_Control*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CVirtualControllerConfig.Control.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string icon = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CVirtualControllerConfig.Control.icon");
        object = msg->mutable_icon();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional int32 input_source = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_input_source(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 input_mode = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_input_mode(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 input_element = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_input_element(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 output_gamepad = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_output_gamepad(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 output_keyboard = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_output_keyboard(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 output_mouse = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_output_mouse(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string icon_foreground = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CVirtualControllerConfig.Control.icon_foreground");
        object = msg->mutable_icon_foreground();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string icon_background = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CVirtualControllerConfig.Control.icon_background");
        object = msg->mutable_icon_background();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CVirtualControllerConfig_Control::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CVirtualControllerConfig.Control)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CVirtualControllerConfig.Control.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string icon = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->icon().data(), static_cast<int>(this->icon().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CVirtualControllerConfig.Control.icon");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 input_source = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_input_source(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &input_source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 input_mode = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_input_mode(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &input_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 input_element = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_input_element(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &input_element_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 output_gamepad = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_output_gamepad(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &output_gamepad_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 output_keyboard = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_output_keyboard(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &output_keyboard_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 output_mouse = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_output_mouse(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &output_mouse_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string icon_foreground = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon_foreground()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->icon_foreground().data(), static_cast<int>(this->icon_foreground().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CVirtualControllerConfig.Control.icon_foreground");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string icon_background = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon_background()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->icon_background().data(), static_cast<int>(this->icon_background().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CVirtualControllerConfig.Control.icon_background");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CVirtualControllerConfig.Control)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CVirtualControllerConfig.Control)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CVirtualControllerConfig_Control::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CVirtualControllerConfig.Control)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CVirtualControllerConfig.Control.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string icon = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->icon().data(), static_cast<int>(this->icon().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CVirtualControllerConfig.Control.icon");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->icon(), output);
  }

  // optional int32 input_source = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->input_source(), output);
  }

  // optional int32 input_mode = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->input_mode(), output);
  }

  // optional int32 input_element = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->input_element(), output);
  }

  // optional int32 output_gamepad = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->output_gamepad(), output);
  }

  // optional int32 output_keyboard = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->output_keyboard(), output);
  }

  // optional int32 output_mouse = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->output_mouse(), output);
  }

  // optional string icon_foreground = 9;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->icon_foreground().data(), static_cast<int>(this->icon_foreground().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CVirtualControllerConfig.Control.icon_foreground");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->icon_foreground(), output);
  }

  // optional string icon_background = 10;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->icon_background().data(), static_cast<int>(this->icon_background().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CVirtualControllerConfig.Control.icon_background");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->icon_background(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CVirtualControllerConfig.Control)
}

::google::protobuf::uint8* CVirtualControllerConfig_Control::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CVirtualControllerConfig.Control)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CVirtualControllerConfig.Control.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string icon = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->icon().data(), static_cast<int>(this->icon().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CVirtualControllerConfig.Control.icon");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->icon(), target);
  }

  // optional int32 input_source = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->input_source(), target);
  }

  // optional int32 input_mode = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->input_mode(), target);
  }

  // optional int32 input_element = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->input_element(), target);
  }

  // optional int32 output_gamepad = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->output_gamepad(), target);
  }

  // optional int32 output_keyboard = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->output_keyboard(), target);
  }

  // optional int32 output_mouse = 8;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->output_mouse(), target);
  }

  // optional string icon_foreground = 9;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->icon_foreground().data(), static_cast<int>(this->icon_foreground().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CVirtualControllerConfig.Control.icon_foreground");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->icon_foreground(), target);
  }

  // optional string icon_background = 10;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->icon_background().data(), static_cast<int>(this->icon_background().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CVirtualControllerConfig.Control.icon_background");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->icon_background(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CVirtualControllerConfig.Control)
  return target;
}

size_t CVirtualControllerConfig_Control::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CVirtualControllerConfig.Control)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string icon = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }

    // optional string icon_foreground = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon_foreground());
    }

    // optional string icon_background = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon_background());
    }

    // optional int32 input_source = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->input_source());
    }

    // optional int32 input_mode = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->input_mode());
    }

    // optional int32 input_element = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->input_element());
    }

    // optional int32 output_gamepad = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->output_gamepad());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional int32 output_keyboard = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->output_keyboard());
    }

    // optional int32 output_mouse = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->output_mouse());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CVirtualControllerConfig_Control::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CVirtualControllerConfig.Control)
  GOOGLE_DCHECK_NE(&from, this);
  const CVirtualControllerConfig_Control* source =
      ::google::protobuf::DynamicCastToGenerated<CVirtualControllerConfig_Control>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CVirtualControllerConfig.Control)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CVirtualControllerConfig.Control)
    MergeFrom(*source);
  }
}

void CVirtualControllerConfig_Control::MergeFrom(const CVirtualControllerConfig_Control& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CVirtualControllerConfig.Control)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      icon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.icon_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      icon_foreground_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.icon_foreground_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      icon_background_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.icon_background_);
    }
    if (cached_has_bits & 0x00000010u) {
      input_source_ = from.input_source_;
    }
    if (cached_has_bits & 0x00000020u) {
      input_mode_ = from.input_mode_;
    }
    if (cached_has_bits & 0x00000040u) {
      input_element_ = from.input_element_;
    }
    if (cached_has_bits & 0x00000080u) {
      output_gamepad_ = from.output_gamepad_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      output_keyboard_ = from.output_keyboard_;
    }
    if (cached_has_bits & 0x00000200u) {
      output_mouse_ = from.output_mouse_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CVirtualControllerConfig_Control::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CVirtualControllerConfig.Control)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CVirtualControllerConfig_Control::CopyFrom(const CVirtualControllerConfig_Control& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CVirtualControllerConfig.Control)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVirtualControllerConfig_Control::IsInitialized() const {
  return true;
}

void CVirtualControllerConfig_Control::Swap(CVirtualControllerConfig_Control* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CVirtualControllerConfig_Control::InternalSwap(CVirtualControllerConfig_Control* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  icon_.Swap(&other->icon_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  icon_foreground_.Swap(&other->icon_foreground_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  icon_background_.Swap(&other->icon_background_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(input_source_, other->input_source_);
  swap(input_mode_, other->input_mode_);
  swap(input_element_, other->input_element_);
  swap(output_gamepad_, other->output_gamepad_);
  swap(output_keyboard_, other->output_keyboard_);
  swap(output_mouse_, other->output_mouse_);
}

::google::protobuf::Metadata CVirtualControllerConfig_Control::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fvirtualcontroller_2eproto);
  return ::file_level_metadata_steammessages_5fvirtualcontroller_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CVirtualControllerConfig_ActionSet::InitAsDefaultInstance() {
}
class CVirtualControllerConfig_ActionSet::HasBitSetters {
 public:
  static void set_has_id(CVirtualControllerConfig_ActionSet* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_parent_id(CVirtualControllerConfig_ActionSet* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_name(CVirtualControllerConfig_ActionSet* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CVirtualControllerConfig_ActionSet::kIdFieldNumber;
const int CVirtualControllerConfig_ActionSet::kParentIdFieldNumber;
const int CVirtualControllerConfig_ActionSet::kNameFieldNumber;
const int CVirtualControllerConfig_ActionSet::kControlsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CVirtualControllerConfig_ActionSet::CVirtualControllerConfig_ActionSet()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CVirtualControllerConfig.ActionSet)
}
CVirtualControllerConfig_ActionSet::CVirtualControllerConfig_ActionSet(const CVirtualControllerConfig_ActionSet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      controls_(from.controls_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&parent_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(parent_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CVirtualControllerConfig.ActionSet)
}

void CVirtualControllerConfig_ActionSet::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CVirtualControllerConfig_ActionSet_steammessages_5fvirtualcontroller_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parent_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(parent_id_));
}

CVirtualControllerConfig_ActionSet::~CVirtualControllerConfig_ActionSet() {
  // @@protoc_insertion_point(destructor:proto.steam.CVirtualControllerConfig.ActionSet)
  SharedDtor();
}

void CVirtualControllerConfig_ActionSet::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CVirtualControllerConfig_ActionSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CVirtualControllerConfig_ActionSet& CVirtualControllerConfig_ActionSet::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CVirtualControllerConfig_ActionSet_steammessages_5fvirtualcontroller_2eproto.base);
  return *internal_default_instance();
}


void CVirtualControllerConfig_ActionSet::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CVirtualControllerConfig.ActionSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  controls_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&parent_id_) -
        reinterpret_cast<char*>(&id_)) + sizeof(parent_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CVirtualControllerConfig_ActionSet::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CVirtualControllerConfig_ActionSet*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 parent_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_parent_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CVirtualControllerConfig.ActionSet.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .proto.steam.CVirtualControllerConfig.Control controls = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CVirtualControllerConfig_Control::_InternalParse;
          object = msg->add_controls();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CVirtualControllerConfig_ActionSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CVirtualControllerConfig.ActionSet)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 parent_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_parent_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parent_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CVirtualControllerConfig.ActionSet.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CVirtualControllerConfig.Control controls = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_controls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CVirtualControllerConfig.ActionSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CVirtualControllerConfig.ActionSet)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CVirtualControllerConfig_ActionSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CVirtualControllerConfig.ActionSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 parent_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->parent_id(), output);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CVirtualControllerConfig.ActionSet.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // repeated .proto.steam.CVirtualControllerConfig.Control controls = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->controls_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->controls(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CVirtualControllerConfig.ActionSet)
}

::google::protobuf::uint8* CVirtualControllerConfig_ActionSet::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CVirtualControllerConfig.ActionSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 parent_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->parent_id(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CVirtualControllerConfig.ActionSet.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // repeated .proto.steam.CVirtualControllerConfig.Control controls = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->controls_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->controls(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CVirtualControllerConfig.ActionSet)
  return target;
}

size_t CVirtualControllerConfig_ActionSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CVirtualControllerConfig.ActionSet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CVirtualControllerConfig.Control controls = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->controls_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->controls(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 parent_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parent_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CVirtualControllerConfig_ActionSet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CVirtualControllerConfig.ActionSet)
  GOOGLE_DCHECK_NE(&from, this);
  const CVirtualControllerConfig_ActionSet* source =
      ::google::protobuf::DynamicCastToGenerated<CVirtualControllerConfig_ActionSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CVirtualControllerConfig.ActionSet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CVirtualControllerConfig.ActionSet)
    MergeFrom(*source);
  }
}

void CVirtualControllerConfig_ActionSet::MergeFrom(const CVirtualControllerConfig_ActionSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CVirtualControllerConfig.ActionSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  controls_.MergeFrom(from.controls_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      parent_id_ = from.parent_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CVirtualControllerConfig_ActionSet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CVirtualControllerConfig.ActionSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CVirtualControllerConfig_ActionSet::CopyFrom(const CVirtualControllerConfig_ActionSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CVirtualControllerConfig.ActionSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVirtualControllerConfig_ActionSet::IsInitialized() const {
  return true;
}

void CVirtualControllerConfig_ActionSet::Swap(CVirtualControllerConfig_ActionSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CVirtualControllerConfig_ActionSet::InternalSwap(CVirtualControllerConfig_ActionSet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&controls_)->InternalSwap(CastToBase(&other->controls_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(parent_id_, other->parent_id_);
}

::google::protobuf::Metadata CVirtualControllerConfig_ActionSet::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fvirtualcontroller_2eproto);
  return ::file_level_metadata_steammessages_5fvirtualcontroller_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CVirtualControllerConfig::InitAsDefaultInstance() {
}
class CVirtualControllerConfig::HasBitSetters {
 public:
  static void set_has_name(CVirtualControllerConfig* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CVirtualControllerConfig::kNameFieldNumber;
const int CVirtualControllerConfig::kActionsetsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CVirtualControllerConfig::CVirtualControllerConfig()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CVirtualControllerConfig)
}
CVirtualControllerConfig::CVirtualControllerConfig(const CVirtualControllerConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      actionsets_(from.actionsets_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CVirtualControllerConfig)
}

void CVirtualControllerConfig::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CVirtualControllerConfig_steammessages_5fvirtualcontroller_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CVirtualControllerConfig::~CVirtualControllerConfig() {
  // @@protoc_insertion_point(destructor:proto.steam.CVirtualControllerConfig)
  SharedDtor();
}

void CVirtualControllerConfig::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CVirtualControllerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CVirtualControllerConfig& CVirtualControllerConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CVirtualControllerConfig_steammessages_5fvirtualcontroller_2eproto.base);
  return *internal_default_instance();
}


void CVirtualControllerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CVirtualControllerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  actionsets_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CVirtualControllerConfig::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CVirtualControllerConfig*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CVirtualControllerConfig.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .proto.steam.CVirtualControllerConfig.ActionSet actionsets = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CVirtualControllerConfig_ActionSet::_InternalParse;
          object = msg->add_actionsets();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CVirtualControllerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CVirtualControllerConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CVirtualControllerConfig.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CVirtualControllerConfig.ActionSet actionsets = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_actionsets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CVirtualControllerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CVirtualControllerConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CVirtualControllerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CVirtualControllerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CVirtualControllerConfig.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .proto.steam.CVirtualControllerConfig.ActionSet actionsets = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->actionsets_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->actionsets(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CVirtualControllerConfig)
}

::google::protobuf::uint8* CVirtualControllerConfig::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CVirtualControllerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CVirtualControllerConfig.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .proto.steam.CVirtualControllerConfig.ActionSet actionsets = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->actionsets_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->actionsets(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CVirtualControllerConfig)
  return target;
}

size_t CVirtualControllerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CVirtualControllerConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CVirtualControllerConfig.ActionSet actionsets = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->actionsets_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->actionsets(static_cast<int>(i)));
    }
  }

  // optional string name = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CVirtualControllerConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CVirtualControllerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const CVirtualControllerConfig* source =
      ::google::protobuf::DynamicCastToGenerated<CVirtualControllerConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CVirtualControllerConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CVirtualControllerConfig)
    MergeFrom(*source);
  }
}

void CVirtualControllerConfig::MergeFrom(const CVirtualControllerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CVirtualControllerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  actionsets_.MergeFrom(from.actionsets_);
  if (from.has_name()) {
    _has_bits_[0] |= 0x00000001u;
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void CVirtualControllerConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CVirtualControllerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CVirtualControllerConfig::CopyFrom(const CVirtualControllerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CVirtualControllerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVirtualControllerConfig::IsInitialized() const {
  return true;
}

void CVirtualControllerConfig::Swap(CVirtualControllerConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CVirtualControllerConfig::InternalSwap(CVirtualControllerConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&actionsets_)->InternalSwap(CastToBase(&other->actionsets_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CVirtualControllerConfig::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fvirtualcontroller_2eproto);
  return ::file_level_metadata_steammessages_5fvirtualcontroller_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CVirtualControllerLayoutPackage::InitAsDefaultInstance() {
  ::proto::steam::_CVirtualControllerLayoutPackage_default_instance_._instance.get_mutable()->config_ = const_cast< ::proto::steam::CVirtualControllerConfig*>(
      ::proto::steam::CVirtualControllerConfig::internal_default_instance());
  ::proto::steam::_CVirtualControllerLayoutPackage_default_instance_._instance.get_mutable()->layouts_ = const_cast< ::proto::steam::CVirtualControllerLayouts*>(
      ::proto::steam::CVirtualControllerLayouts::internal_default_instance());
}
class CVirtualControllerLayoutPackage::HasBitSetters {
 public:
  static void set_has_appid(CVirtualControllerLayoutPackage* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_revision(CVirtualControllerLayoutPackage* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static const ::proto::steam::CVirtualControllerConfig& config(const CVirtualControllerLayoutPackage* msg);
  static void set_has_config(CVirtualControllerLayoutPackage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::proto::steam::CVirtualControllerLayouts& layouts(const CVirtualControllerLayoutPackage* msg);
  static void set_has_layouts(CVirtualControllerLayoutPackage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

const ::proto::steam::CVirtualControllerConfig&
CVirtualControllerLayoutPackage::HasBitSetters::config(const CVirtualControllerLayoutPackage* msg) {
  return *msg->config_;
}
const ::proto::steam::CVirtualControllerLayouts&
CVirtualControllerLayoutPackage::HasBitSetters::layouts(const CVirtualControllerLayoutPackage* msg) {
  return *msg->layouts_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CVirtualControllerLayoutPackage::kAppidFieldNumber;
const int CVirtualControllerLayoutPackage::kRevisionFieldNumber;
const int CVirtualControllerLayoutPackage::kConfigFieldNumber;
const int CVirtualControllerLayoutPackage::kLayoutsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CVirtualControllerLayoutPackage::CVirtualControllerLayoutPackage()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CVirtualControllerLayoutPackage)
}
CVirtualControllerLayoutPackage::CVirtualControllerLayoutPackage(const CVirtualControllerLayoutPackage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_config()) {
    config_ = new ::proto::steam::CVirtualControllerConfig(*from.config_);
  } else {
    config_ = nullptr;
  }
  if (from.has_layouts()) {
    layouts_ = new ::proto::steam::CVirtualControllerLayouts(*from.layouts_);
  } else {
    layouts_ = nullptr;
  }
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&revision_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(revision_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CVirtualControllerLayoutPackage)
}

void CVirtualControllerLayoutPackage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CVirtualControllerLayoutPackage_steammessages_5fvirtualcontroller_2eproto.base);
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&revision_) -
      reinterpret_cast<char*>(&config_)) + sizeof(revision_));
}

CVirtualControllerLayoutPackage::~CVirtualControllerLayoutPackage() {
  // @@protoc_insertion_point(destructor:proto.steam.CVirtualControllerLayoutPackage)
  SharedDtor();
}

void CVirtualControllerLayoutPackage::SharedDtor() {
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete layouts_;
}

void CVirtualControllerLayoutPackage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CVirtualControllerLayoutPackage& CVirtualControllerLayoutPackage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CVirtualControllerLayoutPackage_steammessages_5fvirtualcontroller_2eproto.base);
  return *internal_default_instance();
}


void CVirtualControllerLayoutPackage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CVirtualControllerLayoutPackage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(config_ != nullptr);
      config_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(layouts_ != nullptr);
      layouts_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&revision_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(revision_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CVirtualControllerLayoutPackage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CVirtualControllerLayoutPackage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 revision = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_revision(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.steam.CVirtualControllerConfig config = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::steam::CVirtualControllerConfig::_InternalParse;
        object = msg->mutable_config();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .proto.steam.CVirtualControllerLayouts layouts = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::steam::CVirtualControllerLayouts::_InternalParse;
        object = msg->mutable_layouts();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CVirtualControllerLayoutPackage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CVirtualControllerLayoutPackage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 revision = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_revision(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &revision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CVirtualControllerConfig config = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CVirtualControllerLayouts layouts = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_layouts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CVirtualControllerLayoutPackage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CVirtualControllerLayoutPackage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CVirtualControllerLayoutPackage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CVirtualControllerLayoutPackage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint32 revision = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->revision(), output);
  }

  // optional .proto.steam.CVirtualControllerConfig config = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::config(this), output);
  }

  // optional .proto.steam.CVirtualControllerLayouts layouts = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::layouts(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CVirtualControllerLayoutPackage)
}

::google::protobuf::uint8* CVirtualControllerLayoutPackage::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CVirtualControllerLayoutPackage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint32 revision = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->revision(), target);
  }

  // optional .proto.steam.CVirtualControllerConfig config = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::config(this), target);
  }

  // optional .proto.steam.CVirtualControllerLayouts layouts = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::layouts(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CVirtualControllerLayoutPackage)
  return target;
}

size_t CVirtualControllerLayoutPackage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CVirtualControllerLayoutPackage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .proto.steam.CVirtualControllerConfig config = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *config_);
    }

    // optional .proto.steam.CVirtualControllerLayouts layouts = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *layouts_);
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional uint32 revision = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->revision());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CVirtualControllerLayoutPackage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CVirtualControllerLayoutPackage)
  GOOGLE_DCHECK_NE(&from, this);
  const CVirtualControllerLayoutPackage* source =
      ::google::protobuf::DynamicCastToGenerated<CVirtualControllerLayoutPackage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CVirtualControllerLayoutPackage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CVirtualControllerLayoutPackage)
    MergeFrom(*source);
  }
}

void CVirtualControllerLayoutPackage::MergeFrom(const CVirtualControllerLayoutPackage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CVirtualControllerLayoutPackage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_config()->::proto::steam::CVirtualControllerConfig::MergeFrom(from.config());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_layouts()->::proto::steam::CVirtualControllerLayouts::MergeFrom(from.layouts());
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000008u) {
      revision_ = from.revision_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CVirtualControllerLayoutPackage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CVirtualControllerLayoutPackage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CVirtualControllerLayoutPackage::CopyFrom(const CVirtualControllerLayoutPackage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CVirtualControllerLayoutPackage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVirtualControllerLayoutPackage::IsInitialized() const {
  return true;
}

void CVirtualControllerLayoutPackage::Swap(CVirtualControllerLayoutPackage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CVirtualControllerLayoutPackage::InternalSwap(CVirtualControllerLayoutPackage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(config_, other->config_);
  swap(layouts_, other->layouts_);
  swap(appid_, other->appid_);
  swap(revision_, other->revision_);
}

::google::protobuf::Metadata CVirtualControllerLayoutPackage::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fvirtualcontroller_2eproto);
  return ::file_level_metadata_steammessages_5fvirtualcontroller_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CVirtualControllerGlobalConfig::InitAsDefaultInstance() {
}
class CVirtualControllerGlobalConfig::HasBitSetters {
 public:
  static void set_has_feedback_enabled(CVirtualControllerGlobalConfig* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CVirtualControllerGlobalConfig::kFeedbackEnabledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CVirtualControllerGlobalConfig::CVirtualControllerGlobalConfig()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CVirtualControllerGlobalConfig)
}
CVirtualControllerGlobalConfig::CVirtualControllerGlobalConfig(const CVirtualControllerGlobalConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  feedback_enabled_ = from.feedback_enabled_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CVirtualControllerGlobalConfig)
}

void CVirtualControllerGlobalConfig::SharedCtor() {
  feedback_enabled_ = false;
}

CVirtualControllerGlobalConfig::~CVirtualControllerGlobalConfig() {
  // @@protoc_insertion_point(destructor:proto.steam.CVirtualControllerGlobalConfig)
  SharedDtor();
}

void CVirtualControllerGlobalConfig::SharedDtor() {
}

void CVirtualControllerGlobalConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CVirtualControllerGlobalConfig& CVirtualControllerGlobalConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CVirtualControllerGlobalConfig_steammessages_5fvirtualcontroller_2eproto.base);
  return *internal_default_instance();
}


void CVirtualControllerGlobalConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CVirtualControllerGlobalConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  feedback_enabled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CVirtualControllerGlobalConfig::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CVirtualControllerGlobalConfig*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool feedback_enabled = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_feedback_enabled(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CVirtualControllerGlobalConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CVirtualControllerGlobalConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool feedback_enabled = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_feedback_enabled(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &feedback_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CVirtualControllerGlobalConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CVirtualControllerGlobalConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CVirtualControllerGlobalConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CVirtualControllerGlobalConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool feedback_enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->feedback_enabled(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CVirtualControllerGlobalConfig)
}

::google::protobuf::uint8* CVirtualControllerGlobalConfig::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CVirtualControllerGlobalConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool feedback_enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->feedback_enabled(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CVirtualControllerGlobalConfig)
  return target;
}

size_t CVirtualControllerGlobalConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CVirtualControllerGlobalConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool feedback_enabled = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CVirtualControllerGlobalConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CVirtualControllerGlobalConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const CVirtualControllerGlobalConfig* source =
      ::google::protobuf::DynamicCastToGenerated<CVirtualControllerGlobalConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CVirtualControllerGlobalConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CVirtualControllerGlobalConfig)
    MergeFrom(*source);
  }
}

void CVirtualControllerGlobalConfig::MergeFrom(const CVirtualControllerGlobalConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CVirtualControllerGlobalConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_feedback_enabled()) {
    set_feedback_enabled(from.feedback_enabled());
  }
}

void CVirtualControllerGlobalConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CVirtualControllerGlobalConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CVirtualControllerGlobalConfig::CopyFrom(const CVirtualControllerGlobalConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CVirtualControllerGlobalConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVirtualControllerGlobalConfig::IsInitialized() const {
  return true;
}

void CVirtualControllerGlobalConfig::Swap(CVirtualControllerGlobalConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CVirtualControllerGlobalConfig::InternalSwap(CVirtualControllerGlobalConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(feedback_enabled_, other->feedback_enabled_);
}

::google::protobuf::Metadata CVirtualControllerGlobalConfig::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fvirtualcontroller_2eproto);
  return ::file_level_metadata_steammessages_5fvirtualcontroller_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace steam
}  // namespace proto
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::proto::steam::CVirtualControllerElement* Arena::CreateMaybeMessage< ::proto::steam::CVirtualControllerElement >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CVirtualControllerElement >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CVirtualControllerLayout* Arena::CreateMaybeMessage< ::proto::steam::CVirtualControllerLayout >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CVirtualControllerLayout >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CVirtualControllerLayouts* Arena::CreateMaybeMessage< ::proto::steam::CVirtualControllerLayouts >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CVirtualControllerLayouts >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CVirtualControllerConfig_Control* Arena::CreateMaybeMessage< ::proto::steam::CVirtualControllerConfig_Control >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CVirtualControllerConfig_Control >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CVirtualControllerConfig_ActionSet* Arena::CreateMaybeMessage< ::proto::steam::CVirtualControllerConfig_ActionSet >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CVirtualControllerConfig_ActionSet >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CVirtualControllerConfig* Arena::CreateMaybeMessage< ::proto::steam::CVirtualControllerConfig >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CVirtualControllerConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CVirtualControllerLayoutPackage* Arena::CreateMaybeMessage< ::proto::steam::CVirtualControllerLayoutPackage >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CVirtualControllerLayoutPackage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CVirtualControllerGlobalConfig* Arena::CreateMaybeMessage< ::proto::steam::CVirtualControllerGlobalConfig >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CVirtualControllerGlobalConfig >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
