// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_friendmessages.steamclient.proto

#ifndef PROTOBUF_INCLUDED_steammessages_5ffriendmessages_2esteamclient_2eproto
#define PROTOBUF_INCLUDED_steammessages_5ffriendmessages_2esteamclient_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages_unified_base.steamclient.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5ffriendmessages_2esteamclient_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5ffriendmessages_2esteamclient_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_steammessages_5ffriendmessages_2esteamclient_2eproto();
namespace proto {
namespace steam {
class CFriendMessages_AckMessage_Notification;
class CFriendMessages_AckMessage_NotificationDefaultTypeInternal;
extern CFriendMessages_AckMessage_NotificationDefaultTypeInternal _CFriendMessages_AckMessage_Notification_default_instance_;
class CFriendMessages_GetRecentMessages_Request;
class CFriendMessages_GetRecentMessages_RequestDefaultTypeInternal;
extern CFriendMessages_GetRecentMessages_RequestDefaultTypeInternal _CFriendMessages_GetRecentMessages_Request_default_instance_;
class CFriendMessages_GetRecentMessages_Response;
class CFriendMessages_GetRecentMessages_ResponseDefaultTypeInternal;
extern CFriendMessages_GetRecentMessages_ResponseDefaultTypeInternal _CFriendMessages_GetRecentMessages_Response_default_instance_;
class CFriendMessages_GetRecentMessages_Response_FriendMessage;
class CFriendMessages_GetRecentMessages_Response_FriendMessageDefaultTypeInternal;
extern CFriendMessages_GetRecentMessages_Response_FriendMessageDefaultTypeInternal _CFriendMessages_GetRecentMessages_Response_FriendMessage_default_instance_;
class CFriendMessages_IncomingMessage_Notification;
class CFriendMessages_IncomingMessage_NotificationDefaultTypeInternal;
extern CFriendMessages_IncomingMessage_NotificationDefaultTypeInternal _CFriendMessages_IncomingMessage_Notification_default_instance_;
class CFriendMessages_IsInFriendsUIBeta_Request;
class CFriendMessages_IsInFriendsUIBeta_RequestDefaultTypeInternal;
extern CFriendMessages_IsInFriendsUIBeta_RequestDefaultTypeInternal _CFriendMessages_IsInFriendsUIBeta_Request_default_instance_;
class CFriendMessages_IsInFriendsUIBeta_Response;
class CFriendMessages_IsInFriendsUIBeta_ResponseDefaultTypeInternal;
extern CFriendMessages_IsInFriendsUIBeta_ResponseDefaultTypeInternal _CFriendMessages_IsInFriendsUIBeta_Response_default_instance_;
class CFriendMessages_SendMessage_Request;
class CFriendMessages_SendMessage_RequestDefaultTypeInternal;
extern CFriendMessages_SendMessage_RequestDefaultTypeInternal _CFriendMessages_SendMessage_Request_default_instance_;
class CFriendMessages_SendMessage_Response;
class CFriendMessages_SendMessage_ResponseDefaultTypeInternal;
extern CFriendMessages_SendMessage_ResponseDefaultTypeInternal _CFriendMessages_SendMessage_Response_default_instance_;
class CFriendsMessages_GetActiveMessageSessions_Request;
class CFriendsMessages_GetActiveMessageSessions_RequestDefaultTypeInternal;
extern CFriendsMessages_GetActiveMessageSessions_RequestDefaultTypeInternal _CFriendsMessages_GetActiveMessageSessions_Request_default_instance_;
class CFriendsMessages_GetActiveMessageSessions_Response;
class CFriendsMessages_GetActiveMessageSessions_ResponseDefaultTypeInternal;
extern CFriendsMessages_GetActiveMessageSessions_ResponseDefaultTypeInternal _CFriendsMessages_GetActiveMessageSessions_Response_default_instance_;
class CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession;
class CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSessionDefaultTypeInternal;
extern CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSessionDefaultTypeInternal _CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession_default_instance_;
}  // namespace steam
}  // namespace proto
namespace google {
namespace protobuf {
template<> ::proto::steam::CFriendMessages_AckMessage_Notification* Arena::CreateMaybeMessage<::proto::steam::CFriendMessages_AckMessage_Notification>(Arena*);
template<> ::proto::steam::CFriendMessages_GetRecentMessages_Request* Arena::CreateMaybeMessage<::proto::steam::CFriendMessages_GetRecentMessages_Request>(Arena*);
template<> ::proto::steam::CFriendMessages_GetRecentMessages_Response* Arena::CreateMaybeMessage<::proto::steam::CFriendMessages_GetRecentMessages_Response>(Arena*);
template<> ::proto::steam::CFriendMessages_GetRecentMessages_Response_FriendMessage* Arena::CreateMaybeMessage<::proto::steam::CFriendMessages_GetRecentMessages_Response_FriendMessage>(Arena*);
template<> ::proto::steam::CFriendMessages_IncomingMessage_Notification* Arena::CreateMaybeMessage<::proto::steam::CFriendMessages_IncomingMessage_Notification>(Arena*);
template<> ::proto::steam::CFriendMessages_IsInFriendsUIBeta_Request* Arena::CreateMaybeMessage<::proto::steam::CFriendMessages_IsInFriendsUIBeta_Request>(Arena*);
template<> ::proto::steam::CFriendMessages_IsInFriendsUIBeta_Response* Arena::CreateMaybeMessage<::proto::steam::CFriendMessages_IsInFriendsUIBeta_Response>(Arena*);
template<> ::proto::steam::CFriendMessages_SendMessage_Request* Arena::CreateMaybeMessage<::proto::steam::CFriendMessages_SendMessage_Request>(Arena*);
template<> ::proto::steam::CFriendMessages_SendMessage_Response* Arena::CreateMaybeMessage<::proto::steam::CFriendMessages_SendMessage_Response>(Arena*);
template<> ::proto::steam::CFriendsMessages_GetActiveMessageSessions_Request* Arena::CreateMaybeMessage<::proto::steam::CFriendsMessages_GetActiveMessageSessions_Request>(Arena*);
template<> ::proto::steam::CFriendsMessages_GetActiveMessageSessions_Response* Arena::CreateMaybeMessage<::proto::steam::CFriendsMessages_GetActiveMessageSessions_Response>(Arena*);
template<> ::proto::steam::CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession* Arena::CreateMaybeMessage<::proto::steam::CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace proto {
namespace steam {

// ===================================================================

class CFriendMessages_GetRecentMessages_Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CFriendMessages_GetRecentMessages_Request) */ {
 public:
  CFriendMessages_GetRecentMessages_Request();
  virtual ~CFriendMessages_GetRecentMessages_Request();

  CFriendMessages_GetRecentMessages_Request(const CFriendMessages_GetRecentMessages_Request& from);

  inline CFriendMessages_GetRecentMessages_Request& operator=(const CFriendMessages_GetRecentMessages_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CFriendMessages_GetRecentMessages_Request(CFriendMessages_GetRecentMessages_Request&& from) noexcept
    : CFriendMessages_GetRecentMessages_Request() {
    *this = ::std::move(from);
  }

  inline CFriendMessages_GetRecentMessages_Request& operator=(CFriendMessages_GetRecentMessages_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CFriendMessages_GetRecentMessages_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CFriendMessages_GetRecentMessages_Request* internal_default_instance() {
    return reinterpret_cast<const CFriendMessages_GetRecentMessages_Request*>(
               &_CFriendMessages_GetRecentMessages_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CFriendMessages_GetRecentMessages_Request* other);
  friend void swap(CFriendMessages_GetRecentMessages_Request& a, CFriendMessages_GetRecentMessages_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CFriendMessages_GetRecentMessages_Request* New() const final {
    return CreateMaybeMessage<CFriendMessages_GetRecentMessages_Request>(nullptr);
  }

  CFriendMessages_GetRecentMessages_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CFriendMessages_GetRecentMessages_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CFriendMessages_GetRecentMessages_Request& from);
  void MergeFrom(const CFriendMessages_GetRecentMessages_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CFriendMessages_GetRecentMessages_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 steamid1 = 1;
  bool has_steamid1() const;
  void clear_steamid1();
  static const int kSteamid1FieldNumber = 1;
  ::google::protobuf::uint64 steamid1() const;
  void set_steamid1(::google::protobuf::uint64 value);

  // optional fixed64 steamid2 = 2;
  bool has_steamid2() const;
  void clear_steamid2();
  static const int kSteamid2FieldNumber = 2;
  ::google::protobuf::uint64 steamid2() const;
  void set_steamid2(::google::protobuf::uint64 value);

  // optional uint32 count = 3 [(.proto.steam.description) = "If non-zero, cap the number of recent messages to return."];
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 3;
  ::google::protobuf::uint32 count() const;
  void set_count(::google::protobuf::uint32 value);

  // optional fixed32 rtime32_start_time = 5 [(.proto.steam.description) = "If non-zero, return only messages with timestamps greater or equal to this. If zero, we only return messages from a recent time cutoff."];
  bool has_rtime32_start_time() const;
  void clear_rtime32_start_time();
  static const int kRtime32StartTimeFieldNumber = 5;
  ::google::protobuf::uint32 rtime32_start_time() const;
  void set_rtime32_start_time(::google::protobuf::uint32 value);

  // optional bool most_recent_conversation = 4 [(.proto.steam.description) = "Grab the block of chat from the most recent conversation (a ~5 minute period)"];
  bool has_most_recent_conversation() const;
  void clear_most_recent_conversation();
  static const int kMostRecentConversationFieldNumber = 4;
  bool most_recent_conversation() const;
  void set_most_recent_conversation(bool value);

  // optional bool bbcode_format = 6 [(.proto.steam.description) = "Return the results with bbcode formatting."];
  bool has_bbcode_format() const;
  void clear_bbcode_format();
  static const int kBbcodeFormatFieldNumber = 6;
  bool bbcode_format() const;
  void set_bbcode_format(bool value);

  // optional uint32 start_ordinal = 7 [(.proto.steam.description) = "Combined with start time, only messages after this ordinal are returned (dedupes messages in same second)"];
  bool has_start_ordinal() const;
  void clear_start_ordinal();
  static const int kStartOrdinalFieldNumber = 7;
  ::google::protobuf::uint32 start_ordinal() const;
  void set_start_ordinal(::google::protobuf::uint32 value);

  // optional uint32 time_last = 8 [(.proto.steam.description) = "if present/non-zero, return only messages before this."];
  bool has_time_last() const;
  void clear_time_last();
  static const int kTimeLastFieldNumber = 8;
  ::google::protobuf::uint32 time_last() const;
  void set_time_last(::google::protobuf::uint32 value);

  // optional uint32 ordinal_last = 9;
  bool has_ordinal_last() const;
  void clear_ordinal_last();
  static const int kOrdinalLastFieldNumber = 9;
  ::google::protobuf::uint32 ordinal_last() const;
  void set_ordinal_last(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CFriendMessages_GetRecentMessages_Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 steamid1_;
  ::google::protobuf::uint64 steamid2_;
  ::google::protobuf::uint32 count_;
  ::google::protobuf::uint32 rtime32_start_time_;
  bool most_recent_conversation_;
  bool bbcode_format_;
  ::google::protobuf::uint32 start_ordinal_;
  ::google::protobuf::uint32 time_last_;
  ::google::protobuf::uint32 ordinal_last_;
  friend struct ::TableStruct_steammessages_5ffriendmessages_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CFriendMessages_GetRecentMessages_Response_FriendMessage final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CFriendMessages_GetRecentMessages_Response.FriendMessage) */ {
 public:
  CFriendMessages_GetRecentMessages_Response_FriendMessage();
  virtual ~CFriendMessages_GetRecentMessages_Response_FriendMessage();

  CFriendMessages_GetRecentMessages_Response_FriendMessage(const CFriendMessages_GetRecentMessages_Response_FriendMessage& from);

  inline CFriendMessages_GetRecentMessages_Response_FriendMessage& operator=(const CFriendMessages_GetRecentMessages_Response_FriendMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CFriendMessages_GetRecentMessages_Response_FriendMessage(CFriendMessages_GetRecentMessages_Response_FriendMessage&& from) noexcept
    : CFriendMessages_GetRecentMessages_Response_FriendMessage() {
    *this = ::std::move(from);
  }

  inline CFriendMessages_GetRecentMessages_Response_FriendMessage& operator=(CFriendMessages_GetRecentMessages_Response_FriendMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CFriendMessages_GetRecentMessages_Response_FriendMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CFriendMessages_GetRecentMessages_Response_FriendMessage* internal_default_instance() {
    return reinterpret_cast<const CFriendMessages_GetRecentMessages_Response_FriendMessage*>(
               &_CFriendMessages_GetRecentMessages_Response_FriendMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CFriendMessages_GetRecentMessages_Response_FriendMessage* other);
  friend void swap(CFriendMessages_GetRecentMessages_Response_FriendMessage& a, CFriendMessages_GetRecentMessages_Response_FriendMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CFriendMessages_GetRecentMessages_Response_FriendMessage* New() const final {
    return CreateMaybeMessage<CFriendMessages_GetRecentMessages_Response_FriendMessage>(nullptr);
  }

  CFriendMessages_GetRecentMessages_Response_FriendMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CFriendMessages_GetRecentMessages_Response_FriendMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CFriendMessages_GetRecentMessages_Response_FriendMessage& from);
  void MergeFrom(const CFriendMessages_GetRecentMessages_Response_FriendMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CFriendMessages_GetRecentMessages_Response_FriendMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string message = 3;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 3;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // optional uint32 accountid = 1;
  bool has_accountid() const;
  void clear_accountid();
  static const int kAccountidFieldNumber = 1;
  ::google::protobuf::uint32 accountid() const;
  void set_accountid(::google::protobuf::uint32 value);

  // optional uint32 timestamp = 2;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  ::google::protobuf::uint32 timestamp() const;
  void set_timestamp(::google::protobuf::uint32 value);

  // optional uint32 ordinal = 4;
  bool has_ordinal() const;
  void clear_ordinal();
  static const int kOrdinalFieldNumber = 4;
  ::google::protobuf::uint32 ordinal() const;
  void set_ordinal(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CFriendMessages_GetRecentMessages_Response.FriendMessage)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::uint32 accountid_;
  ::google::protobuf::uint32 timestamp_;
  ::google::protobuf::uint32 ordinal_;
  friend struct ::TableStruct_steammessages_5ffriendmessages_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CFriendMessages_GetRecentMessages_Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CFriendMessages_GetRecentMessages_Response) */ {
 public:
  CFriendMessages_GetRecentMessages_Response();
  virtual ~CFriendMessages_GetRecentMessages_Response();

  CFriendMessages_GetRecentMessages_Response(const CFriendMessages_GetRecentMessages_Response& from);

  inline CFriendMessages_GetRecentMessages_Response& operator=(const CFriendMessages_GetRecentMessages_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CFriendMessages_GetRecentMessages_Response(CFriendMessages_GetRecentMessages_Response&& from) noexcept
    : CFriendMessages_GetRecentMessages_Response() {
    *this = ::std::move(from);
  }

  inline CFriendMessages_GetRecentMessages_Response& operator=(CFriendMessages_GetRecentMessages_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CFriendMessages_GetRecentMessages_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CFriendMessages_GetRecentMessages_Response* internal_default_instance() {
    return reinterpret_cast<const CFriendMessages_GetRecentMessages_Response*>(
               &_CFriendMessages_GetRecentMessages_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CFriendMessages_GetRecentMessages_Response* other);
  friend void swap(CFriendMessages_GetRecentMessages_Response& a, CFriendMessages_GetRecentMessages_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CFriendMessages_GetRecentMessages_Response* New() const final {
    return CreateMaybeMessage<CFriendMessages_GetRecentMessages_Response>(nullptr);
  }

  CFriendMessages_GetRecentMessages_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CFriendMessages_GetRecentMessages_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CFriendMessages_GetRecentMessages_Response& from);
  void MergeFrom(const CFriendMessages_GetRecentMessages_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CFriendMessages_GetRecentMessages_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CFriendMessages_GetRecentMessages_Response_FriendMessage FriendMessage;

  // accessors -------------------------------------------------------

  // repeated .proto.steam.CFriendMessages_GetRecentMessages_Response.FriendMessage messages = 1 [(.proto.steam.description) = "Array of messages, returned newest to oldest."];
  int messages_size() const;
  void clear_messages();
  static const int kMessagesFieldNumber = 1;
  ::proto::steam::CFriendMessages_GetRecentMessages_Response_FriendMessage* mutable_messages(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CFriendMessages_GetRecentMessages_Response_FriendMessage >*
      mutable_messages();
  const ::proto::steam::CFriendMessages_GetRecentMessages_Response_FriendMessage& messages(int index) const;
  ::proto::steam::CFriendMessages_GetRecentMessages_Response_FriendMessage* add_messages();
  const ::google::protobuf::RepeatedPtrField< ::proto::steam::CFriendMessages_GetRecentMessages_Response_FriendMessage >&
      messages() const;

  // optional bool more_available = 4;
  bool has_more_available() const;
  void clear_more_available();
  static const int kMoreAvailableFieldNumber = 4;
  bool more_available() const;
  void set_more_available(bool value);

  // @@protoc_insertion_point(class_scope:proto.steam.CFriendMessages_GetRecentMessages_Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CFriendMessages_GetRecentMessages_Response_FriendMessage > messages_;
  bool more_available_;
  friend struct ::TableStruct_steammessages_5ffriendmessages_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CFriendsMessages_GetActiveMessageSessions_Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CFriendsMessages_GetActiveMessageSessions_Request) */ {
 public:
  CFriendsMessages_GetActiveMessageSessions_Request();
  virtual ~CFriendsMessages_GetActiveMessageSessions_Request();

  CFriendsMessages_GetActiveMessageSessions_Request(const CFriendsMessages_GetActiveMessageSessions_Request& from);

  inline CFriendsMessages_GetActiveMessageSessions_Request& operator=(const CFriendsMessages_GetActiveMessageSessions_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CFriendsMessages_GetActiveMessageSessions_Request(CFriendsMessages_GetActiveMessageSessions_Request&& from) noexcept
    : CFriendsMessages_GetActiveMessageSessions_Request() {
    *this = ::std::move(from);
  }

  inline CFriendsMessages_GetActiveMessageSessions_Request& operator=(CFriendsMessages_GetActiveMessageSessions_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CFriendsMessages_GetActiveMessageSessions_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CFriendsMessages_GetActiveMessageSessions_Request* internal_default_instance() {
    return reinterpret_cast<const CFriendsMessages_GetActiveMessageSessions_Request*>(
               &_CFriendsMessages_GetActiveMessageSessions_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(CFriendsMessages_GetActiveMessageSessions_Request* other);
  friend void swap(CFriendsMessages_GetActiveMessageSessions_Request& a, CFriendsMessages_GetActiveMessageSessions_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CFriendsMessages_GetActiveMessageSessions_Request* New() const final {
    return CreateMaybeMessage<CFriendsMessages_GetActiveMessageSessions_Request>(nullptr);
  }

  CFriendsMessages_GetActiveMessageSessions_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CFriendsMessages_GetActiveMessageSessions_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CFriendsMessages_GetActiveMessageSessions_Request& from);
  void MergeFrom(const CFriendsMessages_GetActiveMessageSessions_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CFriendsMessages_GetActiveMessageSessions_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 lastmessage_since = 1 [(.proto.steam.description) = "return only session information where a chat message has been sent since this time (for polling)"];
  bool has_lastmessage_since() const;
  void clear_lastmessage_since();
  static const int kLastmessageSinceFieldNumber = 1;
  ::google::protobuf::uint32 lastmessage_since() const;
  void set_lastmessage_since(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CFriendsMessages_GetActiveMessageSessions_Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 lastmessage_since_;
  friend struct ::TableStruct_steammessages_5ffriendmessages_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CFriendsMessages_GetActiveMessageSessions_Response.FriendMessageSession) */ {
 public:
  CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession();
  virtual ~CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession();

  CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession(const CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession& from);

  inline CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession& operator=(const CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession(CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession&& from) noexcept
    : CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession() {
    *this = ::std::move(from);
  }

  inline CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession& operator=(CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession* internal_default_instance() {
    return reinterpret_cast<const CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession*>(
               &_CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession* other);
  friend void swap(CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession& a, CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession* New() const final {
    return CreateMaybeMessage<CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession>(nullptr);
  }

  CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession& from);
  void MergeFrom(const CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 accountid_friend = 1;
  bool has_accountid_friend() const;
  void clear_accountid_friend();
  static const int kAccountidFriendFieldNumber = 1;
  ::google::protobuf::uint32 accountid_friend() const;
  void set_accountid_friend(::google::protobuf::uint32 value);

  // optional uint32 last_message = 2;
  bool has_last_message() const;
  void clear_last_message();
  static const int kLastMessageFieldNumber = 2;
  ::google::protobuf::uint32 last_message() const;
  void set_last_message(::google::protobuf::uint32 value);

  // optional uint32 last_view = 3;
  bool has_last_view() const;
  void clear_last_view();
  static const int kLastViewFieldNumber = 3;
  ::google::protobuf::uint32 last_view() const;
  void set_last_view(::google::protobuf::uint32 value);

  // optional uint32 unread_message_count = 4;
  bool has_unread_message_count() const;
  void clear_unread_message_count();
  static const int kUnreadMessageCountFieldNumber = 4;
  ::google::protobuf::uint32 unread_message_count() const;
  void set_unread_message_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CFriendsMessages_GetActiveMessageSessions_Response.FriendMessageSession)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 accountid_friend_;
  ::google::protobuf::uint32 last_message_;
  ::google::protobuf::uint32 last_view_;
  ::google::protobuf::uint32 unread_message_count_;
  friend struct ::TableStruct_steammessages_5ffriendmessages_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CFriendsMessages_GetActiveMessageSessions_Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CFriendsMessages_GetActiveMessageSessions_Response) */ {
 public:
  CFriendsMessages_GetActiveMessageSessions_Response();
  virtual ~CFriendsMessages_GetActiveMessageSessions_Response();

  CFriendsMessages_GetActiveMessageSessions_Response(const CFriendsMessages_GetActiveMessageSessions_Response& from);

  inline CFriendsMessages_GetActiveMessageSessions_Response& operator=(const CFriendsMessages_GetActiveMessageSessions_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CFriendsMessages_GetActiveMessageSessions_Response(CFriendsMessages_GetActiveMessageSessions_Response&& from) noexcept
    : CFriendsMessages_GetActiveMessageSessions_Response() {
    *this = ::std::move(from);
  }

  inline CFriendsMessages_GetActiveMessageSessions_Response& operator=(CFriendsMessages_GetActiveMessageSessions_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CFriendsMessages_GetActiveMessageSessions_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CFriendsMessages_GetActiveMessageSessions_Response* internal_default_instance() {
    return reinterpret_cast<const CFriendsMessages_GetActiveMessageSessions_Response*>(
               &_CFriendsMessages_GetActiveMessageSessions_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(CFriendsMessages_GetActiveMessageSessions_Response* other);
  friend void swap(CFriendsMessages_GetActiveMessageSessions_Response& a, CFriendsMessages_GetActiveMessageSessions_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CFriendsMessages_GetActiveMessageSessions_Response* New() const final {
    return CreateMaybeMessage<CFriendsMessages_GetActiveMessageSessions_Response>(nullptr);
  }

  CFriendsMessages_GetActiveMessageSessions_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CFriendsMessages_GetActiveMessageSessions_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CFriendsMessages_GetActiveMessageSessions_Response& from);
  void MergeFrom(const CFriendsMessages_GetActiveMessageSessions_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CFriendsMessages_GetActiveMessageSessions_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession FriendMessageSession;

  // accessors -------------------------------------------------------

  // repeated .proto.steam.CFriendsMessages_GetActiveMessageSessions_Response.FriendMessageSession message_sessions = 1;
  int message_sessions_size() const;
  void clear_message_sessions();
  static const int kMessageSessionsFieldNumber = 1;
  ::proto::steam::CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession* mutable_message_sessions(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession >*
      mutable_message_sessions();
  const ::proto::steam::CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession& message_sessions(int index) const;
  ::proto::steam::CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession* add_message_sessions();
  const ::google::protobuf::RepeatedPtrField< ::proto::steam::CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession >&
      message_sessions() const;

  // optional uint32 timestamp = 2 [(.proto.steam.description) = "This should be passed in the next request as lastmessage_since to poll for updates"];
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  ::google::protobuf::uint32 timestamp() const;
  void set_timestamp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CFriendsMessages_GetActiveMessageSessions_Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession > message_sessions_;
  ::google::protobuf::uint32 timestamp_;
  friend struct ::TableStruct_steammessages_5ffriendmessages_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CFriendMessages_SendMessage_Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CFriendMessages_SendMessage_Request) */ {
 public:
  CFriendMessages_SendMessage_Request();
  virtual ~CFriendMessages_SendMessage_Request();

  CFriendMessages_SendMessage_Request(const CFriendMessages_SendMessage_Request& from);

  inline CFriendMessages_SendMessage_Request& operator=(const CFriendMessages_SendMessage_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CFriendMessages_SendMessage_Request(CFriendMessages_SendMessage_Request&& from) noexcept
    : CFriendMessages_SendMessage_Request() {
    *this = ::std::move(from);
  }

  inline CFriendMessages_SendMessage_Request& operator=(CFriendMessages_SendMessage_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CFriendMessages_SendMessage_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CFriendMessages_SendMessage_Request* internal_default_instance() {
    return reinterpret_cast<const CFriendMessages_SendMessage_Request*>(
               &_CFriendMessages_SendMessage_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(CFriendMessages_SendMessage_Request* other);
  friend void swap(CFriendMessages_SendMessage_Request& a, CFriendMessages_SendMessage_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CFriendMessages_SendMessage_Request* New() const final {
    return CreateMaybeMessage<CFriendMessages_SendMessage_Request>(nullptr);
  }

  CFriendMessages_SendMessage_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CFriendMessages_SendMessage_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CFriendMessages_SendMessage_Request& from);
  void MergeFrom(const CFriendMessages_SendMessage_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CFriendMessages_SendMessage_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string message = 3;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 3;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  void clear_steamid();
  static const int kSteamidFieldNumber = 1;
  ::google::protobuf::uint64 steamid() const;
  void set_steamid(::google::protobuf::uint64 value);

  // optional int32 chat_entry_type = 2;
  bool has_chat_entry_type() const;
  void clear_chat_entry_type();
  static const int kChatEntryTypeFieldNumber = 2;
  ::google::protobuf::int32 chat_entry_type() const;
  void set_chat_entry_type(::google::protobuf::int32 value);

  // optional bool contains_bbcode = 4;
  bool has_contains_bbcode() const;
  void clear_contains_bbcode();
  static const int kContainsBbcodeFieldNumber = 4;
  bool contains_bbcode() const;
  void set_contains_bbcode(bool value);

  // optional bool echo_to_sender = 5;
  bool has_echo_to_sender() const;
  void clear_echo_to_sender();
  static const int kEchoToSenderFieldNumber = 5;
  bool echo_to_sender() const;
  void set_echo_to_sender(bool value);

  // optional bool low_priority = 6;
  bool has_low_priority() const;
  void clear_low_priority();
  static const int kLowPriorityFieldNumber = 6;
  bool low_priority() const;
  void set_low_priority(bool value);

  // @@protoc_insertion_point(class_scope:proto.steam.CFriendMessages_SendMessage_Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::uint64 steamid_;
  ::google::protobuf::int32 chat_entry_type_;
  bool contains_bbcode_;
  bool echo_to_sender_;
  bool low_priority_;
  friend struct ::TableStruct_steammessages_5ffriendmessages_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CFriendMessages_SendMessage_Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CFriendMessages_SendMessage_Response) */ {
 public:
  CFriendMessages_SendMessage_Response();
  virtual ~CFriendMessages_SendMessage_Response();

  CFriendMessages_SendMessage_Response(const CFriendMessages_SendMessage_Response& from);

  inline CFriendMessages_SendMessage_Response& operator=(const CFriendMessages_SendMessage_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CFriendMessages_SendMessage_Response(CFriendMessages_SendMessage_Response&& from) noexcept
    : CFriendMessages_SendMessage_Response() {
    *this = ::std::move(from);
  }

  inline CFriendMessages_SendMessage_Response& operator=(CFriendMessages_SendMessage_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CFriendMessages_SendMessage_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CFriendMessages_SendMessage_Response* internal_default_instance() {
    return reinterpret_cast<const CFriendMessages_SendMessage_Response*>(
               &_CFriendMessages_SendMessage_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(CFriendMessages_SendMessage_Response* other);
  friend void swap(CFriendMessages_SendMessage_Response& a, CFriendMessages_SendMessage_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CFriendMessages_SendMessage_Response* New() const final {
    return CreateMaybeMessage<CFriendMessages_SendMessage_Response>(nullptr);
  }

  CFriendMessages_SendMessage_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CFriendMessages_SendMessage_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CFriendMessages_SendMessage_Response& from);
  void MergeFrom(const CFriendMessages_SendMessage_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CFriendMessages_SendMessage_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string modified_message = 1;
  bool has_modified_message() const;
  void clear_modified_message();
  static const int kModifiedMessageFieldNumber = 1;
  const ::std::string& modified_message() const;
  void set_modified_message(const ::std::string& value);
  #if LANG_CXX11
  void set_modified_message(::std::string&& value);
  #endif
  void set_modified_message(const char* value);
  void set_modified_message(const char* value, size_t size);
  ::std::string* mutable_modified_message();
  ::std::string* release_modified_message();
  void set_allocated_modified_message(::std::string* modified_message);

  // optional uint32 server_timestamp = 2;
  bool has_server_timestamp() const;
  void clear_server_timestamp();
  static const int kServerTimestampFieldNumber = 2;
  ::google::protobuf::uint32 server_timestamp() const;
  void set_server_timestamp(::google::protobuf::uint32 value);

  // optional uint32 ordinal = 3;
  bool has_ordinal() const;
  void clear_ordinal();
  static const int kOrdinalFieldNumber = 3;
  ::google::protobuf::uint32 ordinal() const;
  void set_ordinal(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CFriendMessages_SendMessage_Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr modified_message_;
  ::google::protobuf::uint32 server_timestamp_;
  ::google::protobuf::uint32 ordinal_;
  friend struct ::TableStruct_steammessages_5ffriendmessages_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CFriendMessages_AckMessage_Notification final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CFriendMessages_AckMessage_Notification) */ {
 public:
  CFriendMessages_AckMessage_Notification();
  virtual ~CFriendMessages_AckMessage_Notification();

  CFriendMessages_AckMessage_Notification(const CFriendMessages_AckMessage_Notification& from);

  inline CFriendMessages_AckMessage_Notification& operator=(const CFriendMessages_AckMessage_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CFriendMessages_AckMessage_Notification(CFriendMessages_AckMessage_Notification&& from) noexcept
    : CFriendMessages_AckMessage_Notification() {
    *this = ::std::move(from);
  }

  inline CFriendMessages_AckMessage_Notification& operator=(CFriendMessages_AckMessage_Notification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CFriendMessages_AckMessage_Notification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CFriendMessages_AckMessage_Notification* internal_default_instance() {
    return reinterpret_cast<const CFriendMessages_AckMessage_Notification*>(
               &_CFriendMessages_AckMessage_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(CFriendMessages_AckMessage_Notification* other);
  friend void swap(CFriendMessages_AckMessage_Notification& a, CFriendMessages_AckMessage_Notification& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CFriendMessages_AckMessage_Notification* New() const final {
    return CreateMaybeMessage<CFriendMessages_AckMessage_Notification>(nullptr);
  }

  CFriendMessages_AckMessage_Notification* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CFriendMessages_AckMessage_Notification>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CFriendMessages_AckMessage_Notification& from);
  void MergeFrom(const CFriendMessages_AckMessage_Notification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CFriendMessages_AckMessage_Notification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 steamid_partner = 1;
  bool has_steamid_partner() const;
  void clear_steamid_partner();
  static const int kSteamidPartnerFieldNumber = 1;
  ::google::protobuf::uint64 steamid_partner() const;
  void set_steamid_partner(::google::protobuf::uint64 value);

  // optional uint32 timestamp = 2;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  ::google::protobuf::uint32 timestamp() const;
  void set_timestamp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CFriendMessages_AckMessage_Notification)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 steamid_partner_;
  ::google::protobuf::uint32 timestamp_;
  friend struct ::TableStruct_steammessages_5ffriendmessages_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CFriendMessages_IsInFriendsUIBeta_Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CFriendMessages_IsInFriendsUIBeta_Request) */ {
 public:
  CFriendMessages_IsInFriendsUIBeta_Request();
  virtual ~CFriendMessages_IsInFriendsUIBeta_Request();

  CFriendMessages_IsInFriendsUIBeta_Request(const CFriendMessages_IsInFriendsUIBeta_Request& from);

  inline CFriendMessages_IsInFriendsUIBeta_Request& operator=(const CFriendMessages_IsInFriendsUIBeta_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CFriendMessages_IsInFriendsUIBeta_Request(CFriendMessages_IsInFriendsUIBeta_Request&& from) noexcept
    : CFriendMessages_IsInFriendsUIBeta_Request() {
    *this = ::std::move(from);
  }

  inline CFriendMessages_IsInFriendsUIBeta_Request& operator=(CFriendMessages_IsInFriendsUIBeta_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CFriendMessages_IsInFriendsUIBeta_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CFriendMessages_IsInFriendsUIBeta_Request* internal_default_instance() {
    return reinterpret_cast<const CFriendMessages_IsInFriendsUIBeta_Request*>(
               &_CFriendMessages_IsInFriendsUIBeta_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(CFriendMessages_IsInFriendsUIBeta_Request* other);
  friend void swap(CFriendMessages_IsInFriendsUIBeta_Request& a, CFriendMessages_IsInFriendsUIBeta_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CFriendMessages_IsInFriendsUIBeta_Request* New() const final {
    return CreateMaybeMessage<CFriendMessages_IsInFriendsUIBeta_Request>(nullptr);
  }

  CFriendMessages_IsInFriendsUIBeta_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CFriendMessages_IsInFriendsUIBeta_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CFriendMessages_IsInFriendsUIBeta_Request& from);
  void MergeFrom(const CFriendMessages_IsInFriendsUIBeta_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CFriendMessages_IsInFriendsUIBeta_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  void clear_steamid();
  static const int kSteamidFieldNumber = 1;
  ::google::protobuf::uint64 steamid() const;
  void set_steamid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CFriendMessages_IsInFriendsUIBeta_Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 steamid_;
  friend struct ::TableStruct_steammessages_5ffriendmessages_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CFriendMessages_IsInFriendsUIBeta_Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CFriendMessages_IsInFriendsUIBeta_Response) */ {
 public:
  CFriendMessages_IsInFriendsUIBeta_Response();
  virtual ~CFriendMessages_IsInFriendsUIBeta_Response();

  CFriendMessages_IsInFriendsUIBeta_Response(const CFriendMessages_IsInFriendsUIBeta_Response& from);

  inline CFriendMessages_IsInFriendsUIBeta_Response& operator=(const CFriendMessages_IsInFriendsUIBeta_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CFriendMessages_IsInFriendsUIBeta_Response(CFriendMessages_IsInFriendsUIBeta_Response&& from) noexcept
    : CFriendMessages_IsInFriendsUIBeta_Response() {
    *this = ::std::move(from);
  }

  inline CFriendMessages_IsInFriendsUIBeta_Response& operator=(CFriendMessages_IsInFriendsUIBeta_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CFriendMessages_IsInFriendsUIBeta_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CFriendMessages_IsInFriendsUIBeta_Response* internal_default_instance() {
    return reinterpret_cast<const CFriendMessages_IsInFriendsUIBeta_Response*>(
               &_CFriendMessages_IsInFriendsUIBeta_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(CFriendMessages_IsInFriendsUIBeta_Response* other);
  friend void swap(CFriendMessages_IsInFriendsUIBeta_Response& a, CFriendMessages_IsInFriendsUIBeta_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CFriendMessages_IsInFriendsUIBeta_Response* New() const final {
    return CreateMaybeMessage<CFriendMessages_IsInFriendsUIBeta_Response>(nullptr);
  }

  CFriendMessages_IsInFriendsUIBeta_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CFriendMessages_IsInFriendsUIBeta_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CFriendMessages_IsInFriendsUIBeta_Response& from);
  void MergeFrom(const CFriendMessages_IsInFriendsUIBeta_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CFriendMessages_IsInFriendsUIBeta_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool online_in_friendsui = 1;
  bool has_online_in_friendsui() const;
  void clear_online_in_friendsui();
  static const int kOnlineInFriendsuiFieldNumber = 1;
  bool online_in_friendsui() const;
  void set_online_in_friendsui(bool value);

  // optional bool has_used_friendsui = 2;
  bool has_has_used_friendsui() const;
  void clear_has_used_friendsui();
  static const int kHasUsedFriendsuiFieldNumber = 2;
  bool has_used_friendsui() const;
  void set_has_used_friendsui(bool value);

  // @@protoc_insertion_point(class_scope:proto.steam.CFriendMessages_IsInFriendsUIBeta_Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  bool online_in_friendsui_;
  bool has_used_friendsui_;
  friend struct ::TableStruct_steammessages_5ffriendmessages_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CFriendMessages_IncomingMessage_Notification final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CFriendMessages_IncomingMessage_Notification) */ {
 public:
  CFriendMessages_IncomingMessage_Notification();
  virtual ~CFriendMessages_IncomingMessage_Notification();

  CFriendMessages_IncomingMessage_Notification(const CFriendMessages_IncomingMessage_Notification& from);

  inline CFriendMessages_IncomingMessage_Notification& operator=(const CFriendMessages_IncomingMessage_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CFriendMessages_IncomingMessage_Notification(CFriendMessages_IncomingMessage_Notification&& from) noexcept
    : CFriendMessages_IncomingMessage_Notification() {
    *this = ::std::move(from);
  }

  inline CFriendMessages_IncomingMessage_Notification& operator=(CFriendMessages_IncomingMessage_Notification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CFriendMessages_IncomingMessage_Notification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CFriendMessages_IncomingMessage_Notification* internal_default_instance() {
    return reinterpret_cast<const CFriendMessages_IncomingMessage_Notification*>(
               &_CFriendMessages_IncomingMessage_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(CFriendMessages_IncomingMessage_Notification* other);
  friend void swap(CFriendMessages_IncomingMessage_Notification& a, CFriendMessages_IncomingMessage_Notification& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CFriendMessages_IncomingMessage_Notification* New() const final {
    return CreateMaybeMessage<CFriendMessages_IncomingMessage_Notification>(nullptr);
  }

  CFriendMessages_IncomingMessage_Notification* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CFriendMessages_IncomingMessage_Notification>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CFriendMessages_IncomingMessage_Notification& from);
  void MergeFrom(const CFriendMessages_IncomingMessage_Notification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CFriendMessages_IncomingMessage_Notification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string message = 4;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 4;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // optional string message_no_bbcode = 8;
  bool has_message_no_bbcode() const;
  void clear_message_no_bbcode();
  static const int kMessageNoBbcodeFieldNumber = 8;
  const ::std::string& message_no_bbcode() const;
  void set_message_no_bbcode(const ::std::string& value);
  #if LANG_CXX11
  void set_message_no_bbcode(::std::string&& value);
  #endif
  void set_message_no_bbcode(const char* value);
  void set_message_no_bbcode(const char* value, size_t size);
  ::std::string* mutable_message_no_bbcode();
  ::std::string* release_message_no_bbcode();
  void set_allocated_message_no_bbcode(::std::string* message_no_bbcode);

  // optional fixed64 steamid_friend = 1;
  bool has_steamid_friend() const;
  void clear_steamid_friend();
  static const int kSteamidFriendFieldNumber = 1;
  ::google::protobuf::uint64 steamid_friend() const;
  void set_steamid_friend(::google::protobuf::uint64 value);

  // optional int32 chat_entry_type = 2;
  bool has_chat_entry_type() const;
  void clear_chat_entry_type();
  static const int kChatEntryTypeFieldNumber = 2;
  ::google::protobuf::int32 chat_entry_type() const;
  void set_chat_entry_type(::google::protobuf::int32 value);

  // optional fixed32 rtime32_server_timestamp = 5;
  bool has_rtime32_server_timestamp() const;
  void clear_rtime32_server_timestamp();
  static const int kRtime32ServerTimestampFieldNumber = 5;
  ::google::protobuf::uint32 rtime32_server_timestamp() const;
  void set_rtime32_server_timestamp(::google::protobuf::uint32 value);

  // optional uint32 ordinal = 6;
  bool has_ordinal() const;
  void clear_ordinal();
  static const int kOrdinalFieldNumber = 6;
  ::google::protobuf::uint32 ordinal() const;
  void set_ordinal(::google::protobuf::uint32 value);

  // optional bool from_limited_account = 3;
  bool has_from_limited_account() const;
  void clear_from_limited_account();
  static const int kFromLimitedAccountFieldNumber = 3;
  bool from_limited_account() const;
  void set_from_limited_account(bool value);

  // optional bool local_echo = 7;
  bool has_local_echo() const;
  void clear_local_echo();
  static const int kLocalEchoFieldNumber = 7;
  bool local_echo() const;
  void set_local_echo(bool value);

  // optional bool low_priority = 9;
  bool has_low_priority() const;
  void clear_low_priority();
  static const int kLowPriorityFieldNumber = 9;
  bool low_priority() const;
  void set_low_priority(bool value);

  // @@protoc_insertion_point(class_scope:proto.steam.CFriendMessages_IncomingMessage_Notification)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::internal::ArenaStringPtr message_no_bbcode_;
  ::google::protobuf::uint64 steamid_friend_;
  ::google::protobuf::int32 chat_entry_type_;
  ::google::protobuf::uint32 rtime32_server_timestamp_;
  ::google::protobuf::uint32 ordinal_;
  bool from_limited_account_;
  bool local_echo_;
  bool low_priority_;
  friend struct ::TableStruct_steammessages_5ffriendmessages_2esteamclient_2eproto;
};
// ===================================================================

class FriendMessages_Stub;

class FriendMessages : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline FriendMessages() {};
 public:
  virtual ~FriendMessages();

  typedef FriendMessages_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void GetRecentMessages(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CFriendMessages_GetRecentMessages_Request* request,
                       ::proto::steam::CFriendMessages_GetRecentMessages_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetActiveMessageSessions(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CFriendsMessages_GetActiveMessageSessions_Request* request,
                       ::proto::steam::CFriendsMessages_GetActiveMessageSessions_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void SendMessage(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CFriendMessages_SendMessage_Request* request,
                       ::proto::steam::CFriendMessages_SendMessage_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void AckMessage(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CFriendMessages_AckMessage_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void IsInFriendsUIBeta(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CFriendMessages_IsInFriendsUIBeta_Request* request,
                       ::proto::steam::CFriendMessages_IsInFriendsUIBeta_Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(FriendMessages);
};

class FriendMessages_Stub : public FriendMessages {
 public:
  FriendMessages_Stub(::google::protobuf::RpcChannel* channel);
  FriendMessages_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~FriendMessages_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements FriendMessages ------------------------------------------

  void GetRecentMessages(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CFriendMessages_GetRecentMessages_Request* request,
                       ::proto::steam::CFriendMessages_GetRecentMessages_Response* response,
                       ::google::protobuf::Closure* done);
  void GetActiveMessageSessions(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CFriendsMessages_GetActiveMessageSessions_Request* request,
                       ::proto::steam::CFriendsMessages_GetActiveMessageSessions_Response* response,
                       ::google::protobuf::Closure* done);
  void SendMessage(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CFriendMessages_SendMessage_Request* request,
                       ::proto::steam::CFriendMessages_SendMessage_Response* response,
                       ::google::protobuf::Closure* done);
  void AckMessage(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CFriendMessages_AckMessage_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void IsInFriendsUIBeta(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CFriendMessages_IsInFriendsUIBeta_Request* request,
                       ::proto::steam::CFriendMessages_IsInFriendsUIBeta_Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(FriendMessages_Stub);
};


// -------------------------------------------------------------------

class FriendMessagesClient_Stub;

class FriendMessagesClient : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline FriendMessagesClient() {};
 public:
  virtual ~FriendMessagesClient();

  typedef FriendMessagesClient_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void IncomingMessage(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CFriendMessages_IncomingMessage_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyAckMessageEcho(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CFriendMessages_AckMessage_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(FriendMessagesClient);
};

class FriendMessagesClient_Stub : public FriendMessagesClient {
 public:
  FriendMessagesClient_Stub(::google::protobuf::RpcChannel* channel);
  FriendMessagesClient_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~FriendMessagesClient_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements FriendMessagesClient ------------------------------------------

  void IncomingMessage(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CFriendMessages_IncomingMessage_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void NotifyAckMessageEcho(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CFriendMessages_AckMessage_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(FriendMessagesClient_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CFriendMessages_GetRecentMessages_Request

// optional fixed64 steamid1 = 1;
inline bool CFriendMessages_GetRecentMessages_Request::has_steamid1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CFriendMessages_GetRecentMessages_Request::clear_steamid1() {
  steamid1_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 CFriendMessages_GetRecentMessages_Request::steamid1() const {
  // @@protoc_insertion_point(field_get:proto.steam.CFriendMessages_GetRecentMessages_Request.steamid1)
  return steamid1_;
}
inline void CFriendMessages_GetRecentMessages_Request::set_steamid1(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  steamid1_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CFriendMessages_GetRecentMessages_Request.steamid1)
}

// optional fixed64 steamid2 = 2;
inline bool CFriendMessages_GetRecentMessages_Request::has_steamid2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CFriendMessages_GetRecentMessages_Request::clear_steamid2() {
  steamid2_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint64 CFriendMessages_GetRecentMessages_Request::steamid2() const {
  // @@protoc_insertion_point(field_get:proto.steam.CFriendMessages_GetRecentMessages_Request.steamid2)
  return steamid2_;
}
inline void CFriendMessages_GetRecentMessages_Request::set_steamid2(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  steamid2_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CFriendMessages_GetRecentMessages_Request.steamid2)
}

// optional uint32 count = 3 [(.proto.steam.description) = "If non-zero, cap the number of recent messages to return."];
inline bool CFriendMessages_GetRecentMessages_Request::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CFriendMessages_GetRecentMessages_Request::clear_count() {
  count_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CFriendMessages_GetRecentMessages_Request::count() const {
  // @@protoc_insertion_point(field_get:proto.steam.CFriendMessages_GetRecentMessages_Request.count)
  return count_;
}
inline void CFriendMessages_GetRecentMessages_Request::set_count(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  count_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CFriendMessages_GetRecentMessages_Request.count)
}

// optional bool most_recent_conversation = 4 [(.proto.steam.description) = "Grab the block of chat from the most recent conversation (a ~5 minute period)"];
inline bool CFriendMessages_GetRecentMessages_Request::has_most_recent_conversation() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CFriendMessages_GetRecentMessages_Request::clear_most_recent_conversation() {
  most_recent_conversation_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CFriendMessages_GetRecentMessages_Request::most_recent_conversation() const {
  // @@protoc_insertion_point(field_get:proto.steam.CFriendMessages_GetRecentMessages_Request.most_recent_conversation)
  return most_recent_conversation_;
}
inline void CFriendMessages_GetRecentMessages_Request::set_most_recent_conversation(bool value) {
  _has_bits_[0] |= 0x00000010u;
  most_recent_conversation_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CFriendMessages_GetRecentMessages_Request.most_recent_conversation)
}

// optional fixed32 rtime32_start_time = 5 [(.proto.steam.description) = "If non-zero, return only messages with timestamps greater or equal to this. If zero, we only return messages from a recent time cutoff."];
inline bool CFriendMessages_GetRecentMessages_Request::has_rtime32_start_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CFriendMessages_GetRecentMessages_Request::clear_rtime32_start_time() {
  rtime32_start_time_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CFriendMessages_GetRecentMessages_Request::rtime32_start_time() const {
  // @@protoc_insertion_point(field_get:proto.steam.CFriendMessages_GetRecentMessages_Request.rtime32_start_time)
  return rtime32_start_time_;
}
inline void CFriendMessages_GetRecentMessages_Request::set_rtime32_start_time(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  rtime32_start_time_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CFriendMessages_GetRecentMessages_Request.rtime32_start_time)
}

// optional bool bbcode_format = 6 [(.proto.steam.description) = "Return the results with bbcode formatting."];
inline bool CFriendMessages_GetRecentMessages_Request::has_bbcode_format() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CFriendMessages_GetRecentMessages_Request::clear_bbcode_format() {
  bbcode_format_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CFriendMessages_GetRecentMessages_Request::bbcode_format() const {
  // @@protoc_insertion_point(field_get:proto.steam.CFriendMessages_GetRecentMessages_Request.bbcode_format)
  return bbcode_format_;
}
inline void CFriendMessages_GetRecentMessages_Request::set_bbcode_format(bool value) {
  _has_bits_[0] |= 0x00000020u;
  bbcode_format_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CFriendMessages_GetRecentMessages_Request.bbcode_format)
}

// optional uint32 start_ordinal = 7 [(.proto.steam.description) = "Combined with start time, only messages after this ordinal are returned (dedupes messages in same second)"];
inline bool CFriendMessages_GetRecentMessages_Request::has_start_ordinal() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CFriendMessages_GetRecentMessages_Request::clear_start_ordinal() {
  start_ordinal_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint32 CFriendMessages_GetRecentMessages_Request::start_ordinal() const {
  // @@protoc_insertion_point(field_get:proto.steam.CFriendMessages_GetRecentMessages_Request.start_ordinal)
  return start_ordinal_;
}
inline void CFriendMessages_GetRecentMessages_Request::set_start_ordinal(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  start_ordinal_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CFriendMessages_GetRecentMessages_Request.start_ordinal)
}

// optional uint32 time_last = 8 [(.proto.steam.description) = "if present/non-zero, return only messages before this."];
inline bool CFriendMessages_GetRecentMessages_Request::has_time_last() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CFriendMessages_GetRecentMessages_Request::clear_time_last() {
  time_last_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::uint32 CFriendMessages_GetRecentMessages_Request::time_last() const {
  // @@protoc_insertion_point(field_get:proto.steam.CFriendMessages_GetRecentMessages_Request.time_last)
  return time_last_;
}
inline void CFriendMessages_GetRecentMessages_Request::set_time_last(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  time_last_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CFriendMessages_GetRecentMessages_Request.time_last)
}

// optional uint32 ordinal_last = 9;
inline bool CFriendMessages_GetRecentMessages_Request::has_ordinal_last() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CFriendMessages_GetRecentMessages_Request::clear_ordinal_last() {
  ordinal_last_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::google::protobuf::uint32 CFriendMessages_GetRecentMessages_Request::ordinal_last() const {
  // @@protoc_insertion_point(field_get:proto.steam.CFriendMessages_GetRecentMessages_Request.ordinal_last)
  return ordinal_last_;
}
inline void CFriendMessages_GetRecentMessages_Request::set_ordinal_last(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  ordinal_last_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CFriendMessages_GetRecentMessages_Request.ordinal_last)
}

// -------------------------------------------------------------------

// CFriendMessages_GetRecentMessages_Response_FriendMessage

// optional uint32 accountid = 1;
inline bool CFriendMessages_GetRecentMessages_Response_FriendMessage::has_accountid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CFriendMessages_GetRecentMessages_Response_FriendMessage::clear_accountid() {
  accountid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CFriendMessages_GetRecentMessages_Response_FriendMessage::accountid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CFriendMessages_GetRecentMessages_Response.FriendMessage.accountid)
  return accountid_;
}
inline void CFriendMessages_GetRecentMessages_Response_FriendMessage::set_accountid(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  accountid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CFriendMessages_GetRecentMessages_Response.FriendMessage.accountid)
}

// optional uint32 timestamp = 2;
inline bool CFriendMessages_GetRecentMessages_Response_FriendMessage::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CFriendMessages_GetRecentMessages_Response_FriendMessage::clear_timestamp() {
  timestamp_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CFriendMessages_GetRecentMessages_Response_FriendMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.steam.CFriendMessages_GetRecentMessages_Response.FriendMessage.timestamp)
  return timestamp_;
}
inline void CFriendMessages_GetRecentMessages_Response_FriendMessage::set_timestamp(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CFriendMessages_GetRecentMessages_Response.FriendMessage.timestamp)
}

// optional string message = 3;
inline bool CFriendMessages_GetRecentMessages_Response_FriendMessage::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CFriendMessages_GetRecentMessages_Response_FriendMessage::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CFriendMessages_GetRecentMessages_Response_FriendMessage::message() const {
  // @@protoc_insertion_point(field_get:proto.steam.CFriendMessages_GetRecentMessages_Response.FriendMessage.message)
  return message_.GetNoArena();
}
inline void CFriendMessages_GetRecentMessages_Response_FriendMessage::set_message(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CFriendMessages_GetRecentMessages_Response.FriendMessage.message)
}
#if LANG_CXX11
inline void CFriendMessages_GetRecentMessages_Response_FriendMessage::set_message(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CFriendMessages_GetRecentMessages_Response.FriendMessage.message)
}
#endif
inline void CFriendMessages_GetRecentMessages_Response_FriendMessage::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CFriendMessages_GetRecentMessages_Response.FriendMessage.message)
}
inline void CFriendMessages_GetRecentMessages_Response_FriendMessage::set_message(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CFriendMessages_GetRecentMessages_Response.FriendMessage.message)
}
inline ::std::string* CFriendMessages_GetRecentMessages_Response_FriendMessage::mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CFriendMessages_GetRecentMessages_Response.FriendMessage.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CFriendMessages_GetRecentMessages_Response_FriendMessage::release_message() {
  // @@protoc_insertion_point(field_release:proto.steam.CFriendMessages_GetRecentMessages_Response.FriendMessage.message)
  if (!has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return message_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CFriendMessages_GetRecentMessages_Response_FriendMessage::set_allocated_message(::std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CFriendMessages_GetRecentMessages_Response.FriendMessage.message)
}

// optional uint32 ordinal = 4;
inline bool CFriendMessages_GetRecentMessages_Response_FriendMessage::has_ordinal() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CFriendMessages_GetRecentMessages_Response_FriendMessage::clear_ordinal() {
  ordinal_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CFriendMessages_GetRecentMessages_Response_FriendMessage::ordinal() const {
  // @@protoc_insertion_point(field_get:proto.steam.CFriendMessages_GetRecentMessages_Response.FriendMessage.ordinal)
  return ordinal_;
}
inline void CFriendMessages_GetRecentMessages_Response_FriendMessage::set_ordinal(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  ordinal_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CFriendMessages_GetRecentMessages_Response.FriendMessage.ordinal)
}

// -------------------------------------------------------------------

// CFriendMessages_GetRecentMessages_Response

// repeated .proto.steam.CFriendMessages_GetRecentMessages_Response.FriendMessage messages = 1 [(.proto.steam.description) = "Array of messages, returned newest to oldest."];
inline int CFriendMessages_GetRecentMessages_Response::messages_size() const {
  return messages_.size();
}
inline void CFriendMessages_GetRecentMessages_Response::clear_messages() {
  messages_.Clear();
}
inline ::proto::steam::CFriendMessages_GetRecentMessages_Response_FriendMessage* CFriendMessages_GetRecentMessages_Response::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CFriendMessages_GetRecentMessages_Response.messages)
  return messages_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::steam::CFriendMessages_GetRecentMessages_Response_FriendMessage >*
CFriendMessages_GetRecentMessages_Response::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CFriendMessages_GetRecentMessages_Response.messages)
  return &messages_;
}
inline const ::proto::steam::CFriendMessages_GetRecentMessages_Response_FriendMessage& CFriendMessages_GetRecentMessages_Response::messages(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CFriendMessages_GetRecentMessages_Response.messages)
  return messages_.Get(index);
}
inline ::proto::steam::CFriendMessages_GetRecentMessages_Response_FriendMessage* CFriendMessages_GetRecentMessages_Response::add_messages() {
  // @@protoc_insertion_point(field_add:proto.steam.CFriendMessages_GetRecentMessages_Response.messages)
  return messages_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::steam::CFriendMessages_GetRecentMessages_Response_FriendMessage >&
CFriendMessages_GetRecentMessages_Response::messages() const {
  // @@protoc_insertion_point(field_list:proto.steam.CFriendMessages_GetRecentMessages_Response.messages)
  return messages_;
}

// optional bool more_available = 4;
inline bool CFriendMessages_GetRecentMessages_Response::has_more_available() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CFriendMessages_GetRecentMessages_Response::clear_more_available() {
  more_available_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CFriendMessages_GetRecentMessages_Response::more_available() const {
  // @@protoc_insertion_point(field_get:proto.steam.CFriendMessages_GetRecentMessages_Response.more_available)
  return more_available_;
}
inline void CFriendMessages_GetRecentMessages_Response::set_more_available(bool value) {
  _has_bits_[0] |= 0x00000001u;
  more_available_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CFriendMessages_GetRecentMessages_Response.more_available)
}

// -------------------------------------------------------------------

// CFriendsMessages_GetActiveMessageSessions_Request

// optional uint32 lastmessage_since = 1 [(.proto.steam.description) = "return only session information where a chat message has been sent since this time (for polling)"];
inline bool CFriendsMessages_GetActiveMessageSessions_Request::has_lastmessage_since() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CFriendsMessages_GetActiveMessageSessions_Request::clear_lastmessage_since() {
  lastmessage_since_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CFriendsMessages_GetActiveMessageSessions_Request::lastmessage_since() const {
  // @@protoc_insertion_point(field_get:proto.steam.CFriendsMessages_GetActiveMessageSessions_Request.lastmessage_since)
  return lastmessage_since_;
}
inline void CFriendsMessages_GetActiveMessageSessions_Request::set_lastmessage_since(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  lastmessage_since_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CFriendsMessages_GetActiveMessageSessions_Request.lastmessage_since)
}

// -------------------------------------------------------------------

// CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession

// optional uint32 accountid_friend = 1;
inline bool CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::has_accountid_friend() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::clear_accountid_friend() {
  accountid_friend_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::accountid_friend() const {
  // @@protoc_insertion_point(field_get:proto.steam.CFriendsMessages_GetActiveMessageSessions_Response.FriendMessageSession.accountid_friend)
  return accountid_friend_;
}
inline void CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::set_accountid_friend(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  accountid_friend_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CFriendsMessages_GetActiveMessageSessions_Response.FriendMessageSession.accountid_friend)
}

// optional uint32 last_message = 2;
inline bool CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::has_last_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::clear_last_message() {
  last_message_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::last_message() const {
  // @@protoc_insertion_point(field_get:proto.steam.CFriendsMessages_GetActiveMessageSessions_Response.FriendMessageSession.last_message)
  return last_message_;
}
inline void CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::set_last_message(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  last_message_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CFriendsMessages_GetActiveMessageSessions_Response.FriendMessageSession.last_message)
}

// optional uint32 last_view = 3;
inline bool CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::has_last_view() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::clear_last_view() {
  last_view_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::last_view() const {
  // @@protoc_insertion_point(field_get:proto.steam.CFriendsMessages_GetActiveMessageSessions_Response.FriendMessageSession.last_view)
  return last_view_;
}
inline void CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::set_last_view(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  last_view_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CFriendsMessages_GetActiveMessageSessions_Response.FriendMessageSession.last_view)
}

// optional uint32 unread_message_count = 4;
inline bool CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::has_unread_message_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::clear_unread_message_count() {
  unread_message_count_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::unread_message_count() const {
  // @@protoc_insertion_point(field_get:proto.steam.CFriendsMessages_GetActiveMessageSessions_Response.FriendMessageSession.unread_message_count)
  return unread_message_count_;
}
inline void CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::set_unread_message_count(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  unread_message_count_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CFriendsMessages_GetActiveMessageSessions_Response.FriendMessageSession.unread_message_count)
}

// -------------------------------------------------------------------

// CFriendsMessages_GetActiveMessageSessions_Response

// repeated .proto.steam.CFriendsMessages_GetActiveMessageSessions_Response.FriendMessageSession message_sessions = 1;
inline int CFriendsMessages_GetActiveMessageSessions_Response::message_sessions_size() const {
  return message_sessions_.size();
}
inline void CFriendsMessages_GetActiveMessageSessions_Response::clear_message_sessions() {
  message_sessions_.Clear();
}
inline ::proto::steam::CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession* CFriendsMessages_GetActiveMessageSessions_Response::mutable_message_sessions(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CFriendsMessages_GetActiveMessageSessions_Response.message_sessions)
  return message_sessions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::steam::CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession >*
CFriendsMessages_GetActiveMessageSessions_Response::mutable_message_sessions() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CFriendsMessages_GetActiveMessageSessions_Response.message_sessions)
  return &message_sessions_;
}
inline const ::proto::steam::CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession& CFriendsMessages_GetActiveMessageSessions_Response::message_sessions(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CFriendsMessages_GetActiveMessageSessions_Response.message_sessions)
  return message_sessions_.Get(index);
}
inline ::proto::steam::CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession* CFriendsMessages_GetActiveMessageSessions_Response::add_message_sessions() {
  // @@protoc_insertion_point(field_add:proto.steam.CFriendsMessages_GetActiveMessageSessions_Response.message_sessions)
  return message_sessions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::steam::CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession >&
CFriendsMessages_GetActiveMessageSessions_Response::message_sessions() const {
  // @@protoc_insertion_point(field_list:proto.steam.CFriendsMessages_GetActiveMessageSessions_Response.message_sessions)
  return message_sessions_;
}

// optional uint32 timestamp = 2 [(.proto.steam.description) = "This should be passed in the next request as lastmessage_since to poll for updates"];
inline bool CFriendsMessages_GetActiveMessageSessions_Response::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CFriendsMessages_GetActiveMessageSessions_Response::clear_timestamp() {
  timestamp_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CFriendsMessages_GetActiveMessageSessions_Response::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.steam.CFriendsMessages_GetActiveMessageSessions_Response.timestamp)
  return timestamp_;
}
inline void CFriendsMessages_GetActiveMessageSessions_Response::set_timestamp(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CFriendsMessages_GetActiveMessageSessions_Response.timestamp)
}

// -------------------------------------------------------------------

// CFriendMessages_SendMessage_Request

// optional fixed64 steamid = 1;
inline bool CFriendMessages_SendMessage_Request::has_steamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CFriendMessages_SendMessage_Request::clear_steamid() {
  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint64 CFriendMessages_SendMessage_Request::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CFriendMessages_SendMessage_Request.steamid)
  return steamid_;
}
inline void CFriendMessages_SendMessage_Request::set_steamid(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CFriendMessages_SendMessage_Request.steamid)
}

// optional int32 chat_entry_type = 2;
inline bool CFriendMessages_SendMessage_Request::has_chat_entry_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CFriendMessages_SendMessage_Request::clear_chat_entry_type() {
  chat_entry_type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::int32 CFriendMessages_SendMessage_Request::chat_entry_type() const {
  // @@protoc_insertion_point(field_get:proto.steam.CFriendMessages_SendMessage_Request.chat_entry_type)
  return chat_entry_type_;
}
inline void CFriendMessages_SendMessage_Request::set_chat_entry_type(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  chat_entry_type_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CFriendMessages_SendMessage_Request.chat_entry_type)
}

// optional string message = 3;
inline bool CFriendMessages_SendMessage_Request::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CFriendMessages_SendMessage_Request::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CFriendMessages_SendMessage_Request::message() const {
  // @@protoc_insertion_point(field_get:proto.steam.CFriendMessages_SendMessage_Request.message)
  return message_.GetNoArena();
}
inline void CFriendMessages_SendMessage_Request::set_message(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CFriendMessages_SendMessage_Request.message)
}
#if LANG_CXX11
inline void CFriendMessages_SendMessage_Request::set_message(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CFriendMessages_SendMessage_Request.message)
}
#endif
inline void CFriendMessages_SendMessage_Request::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CFriendMessages_SendMessage_Request.message)
}
inline void CFriendMessages_SendMessage_Request::set_message(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CFriendMessages_SendMessage_Request.message)
}
inline ::std::string* CFriendMessages_SendMessage_Request::mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CFriendMessages_SendMessage_Request.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CFriendMessages_SendMessage_Request::release_message() {
  // @@protoc_insertion_point(field_release:proto.steam.CFriendMessages_SendMessage_Request.message)
  if (!has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return message_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CFriendMessages_SendMessage_Request::set_allocated_message(::std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CFriendMessages_SendMessage_Request.message)
}

// optional bool contains_bbcode = 4;
inline bool CFriendMessages_SendMessage_Request::has_contains_bbcode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CFriendMessages_SendMessage_Request::clear_contains_bbcode() {
  contains_bbcode_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CFriendMessages_SendMessage_Request::contains_bbcode() const {
  // @@protoc_insertion_point(field_get:proto.steam.CFriendMessages_SendMessage_Request.contains_bbcode)
  return contains_bbcode_;
}
inline void CFriendMessages_SendMessage_Request::set_contains_bbcode(bool value) {
  _has_bits_[0] |= 0x00000008u;
  contains_bbcode_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CFriendMessages_SendMessage_Request.contains_bbcode)
}

// optional bool echo_to_sender = 5;
inline bool CFriendMessages_SendMessage_Request::has_echo_to_sender() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CFriendMessages_SendMessage_Request::clear_echo_to_sender() {
  echo_to_sender_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CFriendMessages_SendMessage_Request::echo_to_sender() const {
  // @@protoc_insertion_point(field_get:proto.steam.CFriendMessages_SendMessage_Request.echo_to_sender)
  return echo_to_sender_;
}
inline void CFriendMessages_SendMessage_Request::set_echo_to_sender(bool value) {
  _has_bits_[0] |= 0x00000010u;
  echo_to_sender_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CFriendMessages_SendMessage_Request.echo_to_sender)
}

// optional bool low_priority = 6;
inline bool CFriendMessages_SendMessage_Request::has_low_priority() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CFriendMessages_SendMessage_Request::clear_low_priority() {
  low_priority_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CFriendMessages_SendMessage_Request::low_priority() const {
  // @@protoc_insertion_point(field_get:proto.steam.CFriendMessages_SendMessage_Request.low_priority)
  return low_priority_;
}
inline void CFriendMessages_SendMessage_Request::set_low_priority(bool value) {
  _has_bits_[0] |= 0x00000020u;
  low_priority_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CFriendMessages_SendMessage_Request.low_priority)
}

// -------------------------------------------------------------------

// CFriendMessages_SendMessage_Response

// optional string modified_message = 1;
inline bool CFriendMessages_SendMessage_Response::has_modified_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CFriendMessages_SendMessage_Response::clear_modified_message() {
  modified_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CFriendMessages_SendMessage_Response::modified_message() const {
  // @@protoc_insertion_point(field_get:proto.steam.CFriendMessages_SendMessage_Response.modified_message)
  return modified_message_.GetNoArena();
}
inline void CFriendMessages_SendMessage_Response::set_modified_message(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  modified_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CFriendMessages_SendMessage_Response.modified_message)
}
#if LANG_CXX11
inline void CFriendMessages_SendMessage_Response::set_modified_message(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  modified_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CFriendMessages_SendMessage_Response.modified_message)
}
#endif
inline void CFriendMessages_SendMessage_Response::set_modified_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  modified_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CFriendMessages_SendMessage_Response.modified_message)
}
inline void CFriendMessages_SendMessage_Response::set_modified_message(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  modified_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CFriendMessages_SendMessage_Response.modified_message)
}
inline ::std::string* CFriendMessages_SendMessage_Response::mutable_modified_message() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CFriendMessages_SendMessage_Response.modified_message)
  return modified_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CFriendMessages_SendMessage_Response::release_modified_message() {
  // @@protoc_insertion_point(field_release:proto.steam.CFriendMessages_SendMessage_Response.modified_message)
  if (!has_modified_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return modified_message_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CFriendMessages_SendMessage_Response::set_allocated_modified_message(::std::string* modified_message) {
  if (modified_message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  modified_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), modified_message);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CFriendMessages_SendMessage_Response.modified_message)
}

// optional uint32 server_timestamp = 2;
inline bool CFriendMessages_SendMessage_Response::has_server_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CFriendMessages_SendMessage_Response::clear_server_timestamp() {
  server_timestamp_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CFriendMessages_SendMessage_Response::server_timestamp() const {
  // @@protoc_insertion_point(field_get:proto.steam.CFriendMessages_SendMessage_Response.server_timestamp)
  return server_timestamp_;
}
inline void CFriendMessages_SendMessage_Response::set_server_timestamp(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  server_timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CFriendMessages_SendMessage_Response.server_timestamp)
}

// optional uint32 ordinal = 3;
inline bool CFriendMessages_SendMessage_Response::has_ordinal() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CFriendMessages_SendMessage_Response::clear_ordinal() {
  ordinal_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CFriendMessages_SendMessage_Response::ordinal() const {
  // @@protoc_insertion_point(field_get:proto.steam.CFriendMessages_SendMessage_Response.ordinal)
  return ordinal_;
}
inline void CFriendMessages_SendMessage_Response::set_ordinal(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  ordinal_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CFriendMessages_SendMessage_Response.ordinal)
}

// -------------------------------------------------------------------

// CFriendMessages_AckMessage_Notification

// optional fixed64 steamid_partner = 1;
inline bool CFriendMessages_AckMessage_Notification::has_steamid_partner() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CFriendMessages_AckMessage_Notification::clear_steamid_partner() {
  steamid_partner_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 CFriendMessages_AckMessage_Notification::steamid_partner() const {
  // @@protoc_insertion_point(field_get:proto.steam.CFriendMessages_AckMessage_Notification.steamid_partner)
  return steamid_partner_;
}
inline void CFriendMessages_AckMessage_Notification::set_steamid_partner(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_partner_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CFriendMessages_AckMessage_Notification.steamid_partner)
}

// optional uint32 timestamp = 2;
inline bool CFriendMessages_AckMessage_Notification::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CFriendMessages_AckMessage_Notification::clear_timestamp() {
  timestamp_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CFriendMessages_AckMessage_Notification::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.steam.CFriendMessages_AckMessage_Notification.timestamp)
  return timestamp_;
}
inline void CFriendMessages_AckMessage_Notification::set_timestamp(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CFriendMessages_AckMessage_Notification.timestamp)
}

// -------------------------------------------------------------------

// CFriendMessages_IsInFriendsUIBeta_Request

// optional fixed64 steamid = 1;
inline bool CFriendMessages_IsInFriendsUIBeta_Request::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CFriendMessages_IsInFriendsUIBeta_Request::clear_steamid() {
  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 CFriendMessages_IsInFriendsUIBeta_Request::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CFriendMessages_IsInFriendsUIBeta_Request.steamid)
  return steamid_;
}
inline void CFriendMessages_IsInFriendsUIBeta_Request::set_steamid(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CFriendMessages_IsInFriendsUIBeta_Request.steamid)
}

// -------------------------------------------------------------------

// CFriendMessages_IsInFriendsUIBeta_Response

// optional bool online_in_friendsui = 1;
inline bool CFriendMessages_IsInFriendsUIBeta_Response::has_online_in_friendsui() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CFriendMessages_IsInFriendsUIBeta_Response::clear_online_in_friendsui() {
  online_in_friendsui_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CFriendMessages_IsInFriendsUIBeta_Response::online_in_friendsui() const {
  // @@protoc_insertion_point(field_get:proto.steam.CFriendMessages_IsInFriendsUIBeta_Response.online_in_friendsui)
  return online_in_friendsui_;
}
inline void CFriendMessages_IsInFriendsUIBeta_Response::set_online_in_friendsui(bool value) {
  _has_bits_[0] |= 0x00000001u;
  online_in_friendsui_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CFriendMessages_IsInFriendsUIBeta_Response.online_in_friendsui)
}

// optional bool has_used_friendsui = 2;
inline bool CFriendMessages_IsInFriendsUIBeta_Response::has_has_used_friendsui() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CFriendMessages_IsInFriendsUIBeta_Response::clear_has_used_friendsui() {
  has_used_friendsui_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CFriendMessages_IsInFriendsUIBeta_Response::has_used_friendsui() const {
  // @@protoc_insertion_point(field_get:proto.steam.CFriendMessages_IsInFriendsUIBeta_Response.has_used_friendsui)
  return has_used_friendsui_;
}
inline void CFriendMessages_IsInFriendsUIBeta_Response::set_has_used_friendsui(bool value) {
  _has_bits_[0] |= 0x00000002u;
  has_used_friendsui_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CFriendMessages_IsInFriendsUIBeta_Response.has_used_friendsui)
}

// -------------------------------------------------------------------

// CFriendMessages_IncomingMessage_Notification

// optional fixed64 steamid_friend = 1;
inline bool CFriendMessages_IncomingMessage_Notification::has_steamid_friend() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CFriendMessages_IncomingMessage_Notification::clear_steamid_friend() {
  steamid_friend_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint64 CFriendMessages_IncomingMessage_Notification::steamid_friend() const {
  // @@protoc_insertion_point(field_get:proto.steam.CFriendMessages_IncomingMessage_Notification.steamid_friend)
  return steamid_friend_;
}
inline void CFriendMessages_IncomingMessage_Notification::set_steamid_friend(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  steamid_friend_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CFriendMessages_IncomingMessage_Notification.steamid_friend)
}

// optional int32 chat_entry_type = 2;
inline bool CFriendMessages_IncomingMessage_Notification::has_chat_entry_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CFriendMessages_IncomingMessage_Notification::clear_chat_entry_type() {
  chat_entry_type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::int32 CFriendMessages_IncomingMessage_Notification::chat_entry_type() const {
  // @@protoc_insertion_point(field_get:proto.steam.CFriendMessages_IncomingMessage_Notification.chat_entry_type)
  return chat_entry_type_;
}
inline void CFriendMessages_IncomingMessage_Notification::set_chat_entry_type(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  chat_entry_type_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CFriendMessages_IncomingMessage_Notification.chat_entry_type)
}

// optional bool from_limited_account = 3;
inline bool CFriendMessages_IncomingMessage_Notification::has_from_limited_account() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CFriendMessages_IncomingMessage_Notification::clear_from_limited_account() {
  from_limited_account_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CFriendMessages_IncomingMessage_Notification::from_limited_account() const {
  // @@protoc_insertion_point(field_get:proto.steam.CFriendMessages_IncomingMessage_Notification.from_limited_account)
  return from_limited_account_;
}
inline void CFriendMessages_IncomingMessage_Notification::set_from_limited_account(bool value) {
  _has_bits_[0] |= 0x00000040u;
  from_limited_account_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CFriendMessages_IncomingMessage_Notification.from_limited_account)
}

// optional string message = 4;
inline bool CFriendMessages_IncomingMessage_Notification::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CFriendMessages_IncomingMessage_Notification::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CFriendMessages_IncomingMessage_Notification::message() const {
  // @@protoc_insertion_point(field_get:proto.steam.CFriendMessages_IncomingMessage_Notification.message)
  return message_.GetNoArena();
}
inline void CFriendMessages_IncomingMessage_Notification::set_message(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CFriendMessages_IncomingMessage_Notification.message)
}
#if LANG_CXX11
inline void CFriendMessages_IncomingMessage_Notification::set_message(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CFriendMessages_IncomingMessage_Notification.message)
}
#endif
inline void CFriendMessages_IncomingMessage_Notification::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CFriendMessages_IncomingMessage_Notification.message)
}
inline void CFriendMessages_IncomingMessage_Notification::set_message(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CFriendMessages_IncomingMessage_Notification.message)
}
inline ::std::string* CFriendMessages_IncomingMessage_Notification::mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CFriendMessages_IncomingMessage_Notification.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CFriendMessages_IncomingMessage_Notification::release_message() {
  // @@protoc_insertion_point(field_release:proto.steam.CFriendMessages_IncomingMessage_Notification.message)
  if (!has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return message_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CFriendMessages_IncomingMessage_Notification::set_allocated_message(::std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CFriendMessages_IncomingMessage_Notification.message)
}

// optional fixed32 rtime32_server_timestamp = 5;
inline bool CFriendMessages_IncomingMessage_Notification::has_rtime32_server_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CFriendMessages_IncomingMessage_Notification::clear_rtime32_server_timestamp() {
  rtime32_server_timestamp_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CFriendMessages_IncomingMessage_Notification::rtime32_server_timestamp() const {
  // @@protoc_insertion_point(field_get:proto.steam.CFriendMessages_IncomingMessage_Notification.rtime32_server_timestamp)
  return rtime32_server_timestamp_;
}
inline void CFriendMessages_IncomingMessage_Notification::set_rtime32_server_timestamp(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  rtime32_server_timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CFriendMessages_IncomingMessage_Notification.rtime32_server_timestamp)
}

// optional uint32 ordinal = 6;
inline bool CFriendMessages_IncomingMessage_Notification::has_ordinal() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CFriendMessages_IncomingMessage_Notification::clear_ordinal() {
  ordinal_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint32 CFriendMessages_IncomingMessage_Notification::ordinal() const {
  // @@protoc_insertion_point(field_get:proto.steam.CFriendMessages_IncomingMessage_Notification.ordinal)
  return ordinal_;
}
inline void CFriendMessages_IncomingMessage_Notification::set_ordinal(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  ordinal_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CFriendMessages_IncomingMessage_Notification.ordinal)
}

// optional bool local_echo = 7;
inline bool CFriendMessages_IncomingMessage_Notification::has_local_echo() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CFriendMessages_IncomingMessage_Notification::clear_local_echo() {
  local_echo_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CFriendMessages_IncomingMessage_Notification::local_echo() const {
  // @@protoc_insertion_point(field_get:proto.steam.CFriendMessages_IncomingMessage_Notification.local_echo)
  return local_echo_;
}
inline void CFriendMessages_IncomingMessage_Notification::set_local_echo(bool value) {
  _has_bits_[0] |= 0x00000080u;
  local_echo_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CFriendMessages_IncomingMessage_Notification.local_echo)
}

// optional string message_no_bbcode = 8;
inline bool CFriendMessages_IncomingMessage_Notification::has_message_no_bbcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CFriendMessages_IncomingMessage_Notification::clear_message_no_bbcode() {
  message_no_bbcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CFriendMessages_IncomingMessage_Notification::message_no_bbcode() const {
  // @@protoc_insertion_point(field_get:proto.steam.CFriendMessages_IncomingMessage_Notification.message_no_bbcode)
  return message_no_bbcode_.GetNoArena();
}
inline void CFriendMessages_IncomingMessage_Notification::set_message_no_bbcode(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  message_no_bbcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CFriendMessages_IncomingMessage_Notification.message_no_bbcode)
}
#if LANG_CXX11
inline void CFriendMessages_IncomingMessage_Notification::set_message_no_bbcode(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  message_no_bbcode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CFriendMessages_IncomingMessage_Notification.message_no_bbcode)
}
#endif
inline void CFriendMessages_IncomingMessage_Notification::set_message_no_bbcode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  message_no_bbcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CFriendMessages_IncomingMessage_Notification.message_no_bbcode)
}
inline void CFriendMessages_IncomingMessage_Notification::set_message_no_bbcode(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  message_no_bbcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CFriendMessages_IncomingMessage_Notification.message_no_bbcode)
}
inline ::std::string* CFriendMessages_IncomingMessage_Notification::mutable_message_no_bbcode() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CFriendMessages_IncomingMessage_Notification.message_no_bbcode)
  return message_no_bbcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CFriendMessages_IncomingMessage_Notification::release_message_no_bbcode() {
  // @@protoc_insertion_point(field_release:proto.steam.CFriendMessages_IncomingMessage_Notification.message_no_bbcode)
  if (!has_message_no_bbcode()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return message_no_bbcode_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CFriendMessages_IncomingMessage_Notification::set_allocated_message_no_bbcode(::std::string* message_no_bbcode) {
  if (message_no_bbcode != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  message_no_bbcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message_no_bbcode);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CFriendMessages_IncomingMessage_Notification.message_no_bbcode)
}

// optional bool low_priority = 9;
inline bool CFriendMessages_IncomingMessage_Notification::has_low_priority() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CFriendMessages_IncomingMessage_Notification::clear_low_priority() {
  low_priority_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool CFriendMessages_IncomingMessage_Notification::low_priority() const {
  // @@protoc_insertion_point(field_get:proto.steam.CFriendMessages_IncomingMessage_Notification.low_priority)
  return low_priority_;
}
inline void CFriendMessages_IncomingMessage_Notification::set_low_priority(bool value) {
  _has_bits_[0] |= 0x00000100u;
  low_priority_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CFriendMessages_IncomingMessage_Notification.low_priority)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace steam
}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_steammessages_5ffriendmessages_2esteamclient_2eproto
