// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_parties.steamclient.proto

#include "steammessages_parties.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fparties_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CParties_BeaconLocation_steammessages_5fparties_2esteamclient_2eproto;
namespace proto {
namespace steam {
class CParties_JoinParty_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CParties_JoinParty_Request> _instance;
} _CParties_JoinParty_Request_default_instance_;
class CParties_JoinParty_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CParties_JoinParty_Response> _instance;
} _CParties_JoinParty_Response_default_instance_;
class CParties_BeaconLocationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CParties_BeaconLocation> _instance;
} _CParties_BeaconLocation_default_instance_;
class CParties_CreateBeacon_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CParties_CreateBeacon_Request> _instance;
} _CParties_CreateBeacon_Request_default_instance_;
class CParties_CreateBeacon_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CParties_CreateBeacon_Response> _instance;
} _CParties_CreateBeacon_Response_default_instance_;
class CParties_OnReservationCompleted_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CParties_OnReservationCompleted_Request> _instance;
} _CParties_OnReservationCompleted_Request_default_instance_;
class CParties_OnReservationCompleted_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CParties_OnReservationCompleted_Response> _instance;
} _CParties_OnReservationCompleted_Response_default_instance_;
class CParties_CancelReservation_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CParties_CancelReservation_Request> _instance;
} _CParties_CancelReservation_Request_default_instance_;
class CParties_CancelReservation_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CParties_CancelReservation_Response> _instance;
} _CParties_CancelReservation_Response_default_instance_;
class CParties_ChangeNumOpenSlots_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CParties_ChangeNumOpenSlots_Request> _instance;
} _CParties_ChangeNumOpenSlots_Request_default_instance_;
class CParties_ChangeNumOpenSlots_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CParties_ChangeNumOpenSlots_Response> _instance;
} _CParties_ChangeNumOpenSlots_Response_default_instance_;
class CParties_DestroyBeacon_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CParties_DestroyBeacon_Request> _instance;
} _CParties_DestroyBeacon_Request_default_instance_;
class CParties_DestroyBeacon_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CParties_DestroyBeacon_Response> _instance;
} _CParties_DestroyBeacon_Response_default_instance_;
}  // namespace steam
}  // namespace proto
static void InitDefaultsCParties_JoinParty_Request_steammessages_5fparties_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CParties_JoinParty_Request_default_instance_;
    new (ptr) ::proto::steam::CParties_JoinParty_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CParties_JoinParty_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CParties_JoinParty_Request_steammessages_5fparties_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCParties_JoinParty_Request_steammessages_5fparties_2esteamclient_2eproto}, {}};

static void InitDefaultsCParties_JoinParty_Response_steammessages_5fparties_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CParties_JoinParty_Response_default_instance_;
    new (ptr) ::proto::steam::CParties_JoinParty_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CParties_JoinParty_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CParties_JoinParty_Response_steammessages_5fparties_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCParties_JoinParty_Response_steammessages_5fparties_2esteamclient_2eproto}, {}};

static void InitDefaultsCParties_BeaconLocation_steammessages_5fparties_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CParties_BeaconLocation_default_instance_;
    new (ptr) ::proto::steam::CParties_BeaconLocation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CParties_BeaconLocation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CParties_BeaconLocation_steammessages_5fparties_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCParties_BeaconLocation_steammessages_5fparties_2esteamclient_2eproto}, {}};

static void InitDefaultsCParties_CreateBeacon_Request_steammessages_5fparties_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CParties_CreateBeacon_Request_default_instance_;
    new (ptr) ::proto::steam::CParties_CreateBeacon_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CParties_CreateBeacon_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CParties_CreateBeacon_Request_steammessages_5fparties_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCParties_CreateBeacon_Request_steammessages_5fparties_2esteamclient_2eproto}, {
      &scc_info_CParties_BeaconLocation_steammessages_5fparties_2esteamclient_2eproto.base,}};

static void InitDefaultsCParties_CreateBeacon_Response_steammessages_5fparties_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CParties_CreateBeacon_Response_default_instance_;
    new (ptr) ::proto::steam::CParties_CreateBeacon_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CParties_CreateBeacon_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CParties_CreateBeacon_Response_steammessages_5fparties_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCParties_CreateBeacon_Response_steammessages_5fparties_2esteamclient_2eproto}, {}};

static void InitDefaultsCParties_OnReservationCompleted_Request_steammessages_5fparties_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CParties_OnReservationCompleted_Request_default_instance_;
    new (ptr) ::proto::steam::CParties_OnReservationCompleted_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CParties_OnReservationCompleted_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CParties_OnReservationCompleted_Request_steammessages_5fparties_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCParties_OnReservationCompleted_Request_steammessages_5fparties_2esteamclient_2eproto}, {}};

static void InitDefaultsCParties_OnReservationCompleted_Response_steammessages_5fparties_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CParties_OnReservationCompleted_Response_default_instance_;
    new (ptr) ::proto::steam::CParties_OnReservationCompleted_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CParties_OnReservationCompleted_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CParties_OnReservationCompleted_Response_steammessages_5fparties_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCParties_OnReservationCompleted_Response_steammessages_5fparties_2esteamclient_2eproto}, {}};

static void InitDefaultsCParties_CancelReservation_Request_steammessages_5fparties_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CParties_CancelReservation_Request_default_instance_;
    new (ptr) ::proto::steam::CParties_CancelReservation_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CParties_CancelReservation_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CParties_CancelReservation_Request_steammessages_5fparties_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCParties_CancelReservation_Request_steammessages_5fparties_2esteamclient_2eproto}, {}};

static void InitDefaultsCParties_CancelReservation_Response_steammessages_5fparties_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CParties_CancelReservation_Response_default_instance_;
    new (ptr) ::proto::steam::CParties_CancelReservation_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CParties_CancelReservation_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CParties_CancelReservation_Response_steammessages_5fparties_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCParties_CancelReservation_Response_steammessages_5fparties_2esteamclient_2eproto}, {}};

static void InitDefaultsCParties_ChangeNumOpenSlots_Request_steammessages_5fparties_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CParties_ChangeNumOpenSlots_Request_default_instance_;
    new (ptr) ::proto::steam::CParties_ChangeNumOpenSlots_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CParties_ChangeNumOpenSlots_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CParties_ChangeNumOpenSlots_Request_steammessages_5fparties_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCParties_ChangeNumOpenSlots_Request_steammessages_5fparties_2esteamclient_2eproto}, {}};

static void InitDefaultsCParties_ChangeNumOpenSlots_Response_steammessages_5fparties_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CParties_ChangeNumOpenSlots_Response_default_instance_;
    new (ptr) ::proto::steam::CParties_ChangeNumOpenSlots_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CParties_ChangeNumOpenSlots_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CParties_ChangeNumOpenSlots_Response_steammessages_5fparties_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCParties_ChangeNumOpenSlots_Response_steammessages_5fparties_2esteamclient_2eproto}, {}};

static void InitDefaultsCParties_DestroyBeacon_Request_steammessages_5fparties_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CParties_DestroyBeacon_Request_default_instance_;
    new (ptr) ::proto::steam::CParties_DestroyBeacon_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CParties_DestroyBeacon_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CParties_DestroyBeacon_Request_steammessages_5fparties_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCParties_DestroyBeacon_Request_steammessages_5fparties_2esteamclient_2eproto}, {}};

static void InitDefaultsCParties_DestroyBeacon_Response_steammessages_5fparties_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CParties_DestroyBeacon_Response_default_instance_;
    new (ptr) ::proto::steam::CParties_DestroyBeacon_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CParties_DestroyBeacon_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CParties_DestroyBeacon_Response_steammessages_5fparties_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCParties_DestroyBeacon_Response_steammessages_5fparties_2esteamclient_2eproto}, {}};

void InitDefaults_steammessages_5fparties_2esteamclient_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_CParties_JoinParty_Request_steammessages_5fparties_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CParties_JoinParty_Response_steammessages_5fparties_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CParties_BeaconLocation_steammessages_5fparties_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CParties_CreateBeacon_Request_steammessages_5fparties_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CParties_CreateBeacon_Response_steammessages_5fparties_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CParties_OnReservationCompleted_Request_steammessages_5fparties_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CParties_OnReservationCompleted_Response_steammessages_5fparties_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CParties_CancelReservation_Request_steammessages_5fparties_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CParties_CancelReservation_Response_steammessages_5fparties_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CParties_ChangeNumOpenSlots_Request_steammessages_5fparties_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CParties_ChangeNumOpenSlots_Response_steammessages_5fparties_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CParties_DestroyBeacon_Request_steammessages_5fparties_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CParties_DestroyBeacon_Response_steammessages_5fparties_2esteamclient_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_steammessages_5fparties_2esteamclient_2eproto[13];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_steammessages_5fparties_2esteamclient_2eproto = nullptr;
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors_steammessages_5fparties_2esteamclient_2eproto[1];

const ::google::protobuf::uint32 TableStruct_steammessages_5fparties_2esteamclient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::proto::steam::CParties_JoinParty_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CParties_JoinParty_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CParties_JoinParty_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CParties_JoinParty_Request, beacon_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CParties_JoinParty_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CParties_JoinParty_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CParties_JoinParty_Response, beacon_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CParties_JoinParty_Response, connect_string_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CParties_BeaconLocation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CParties_BeaconLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CParties_BeaconLocation, location_type_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CParties_BeaconLocation, location_id_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CParties_CreateBeacon_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CParties_CreateBeacon_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CParties_CreateBeacon_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CParties_CreateBeacon_Request, num_open_slots_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CParties_CreateBeacon_Request, locations_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CParties_CreateBeacon_Request, connect_string_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CParties_CreateBeacon_Request, metadata_),
  2,
  3,
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CParties_CreateBeacon_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CParties_CreateBeacon_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CParties_CreateBeacon_Response, beacon_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CParties_OnReservationCompleted_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CParties_OnReservationCompleted_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CParties_OnReservationCompleted_Request, beacon_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CParties_OnReservationCompleted_Request, user_steamid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CParties_OnReservationCompleted_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CParties_OnReservationCompleted_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CParties_OnReservationCompleted_Response, beacon_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CParties_CancelReservation_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CParties_CancelReservation_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CParties_CancelReservation_Request, beacon_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CParties_CancelReservation_Request, user_steamid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CParties_CancelReservation_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CParties_CancelReservation_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CParties_CancelReservation_Response, beacon_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CParties_ChangeNumOpenSlots_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CParties_ChangeNumOpenSlots_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CParties_ChangeNumOpenSlots_Request, beacon_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CParties_ChangeNumOpenSlots_Request, num_open_slots_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CParties_ChangeNumOpenSlots_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CParties_ChangeNumOpenSlots_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CParties_ChangeNumOpenSlots_Response, beacon_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CParties_DestroyBeacon_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CParties_DestroyBeacon_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CParties_DestroyBeacon_Request, beacon_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CParties_DestroyBeacon_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CParties_DestroyBeacon_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CParties_DestroyBeacon_Response, beacon_id_),
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::proto::steam::CParties_JoinParty_Request)},
  { 9, 16, sizeof(::proto::steam::CParties_JoinParty_Response)},
  { 18, 25, sizeof(::proto::steam::CParties_BeaconLocation)},
  { 27, 37, sizeof(::proto::steam::CParties_CreateBeacon_Request)},
  { 42, 48, sizeof(::proto::steam::CParties_CreateBeacon_Response)},
  { 49, 56, sizeof(::proto::steam::CParties_OnReservationCompleted_Request)},
  { 58, 64, sizeof(::proto::steam::CParties_OnReservationCompleted_Response)},
  { 65, 72, sizeof(::proto::steam::CParties_CancelReservation_Request)},
  { 74, 80, sizeof(::proto::steam::CParties_CancelReservation_Response)},
  { 81, 88, sizeof(::proto::steam::CParties_ChangeNumOpenSlots_Request)},
  { 90, 96, sizeof(::proto::steam::CParties_ChangeNumOpenSlots_Response)},
  { 97, 103, sizeof(::proto::steam::CParties_DestroyBeacon_Request)},
  { 104, 110, sizeof(::proto::steam::CParties_DestroyBeacon_Response)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CParties_JoinParty_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CParties_JoinParty_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CParties_BeaconLocation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CParties_CreateBeacon_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CParties_CreateBeacon_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CParties_OnReservationCompleted_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CParties_OnReservationCompleted_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CParties_CancelReservation_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CParties_CancelReservation_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CParties_ChangeNumOpenSlots_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CParties_ChangeNumOpenSlots_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CParties_DestroyBeacon_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CParties_DestroyBeacon_Response_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_steammessages_5fparties_2esteamclient_2eproto = {
  {}, AddDescriptors_steammessages_5fparties_2esteamclient_2eproto, "steammessages_parties.steamclient.proto", schemas,
  file_default_instances, TableStruct_steammessages_5fparties_2esteamclient_2eproto::offsets,
  file_level_metadata_steammessages_5fparties_2esteamclient_2eproto, 13, file_level_enum_descriptors_steammessages_5fparties_2esteamclient_2eproto, file_level_service_descriptors_steammessages_5fparties_2esteamclient_2eproto,
};

const char descriptor_table_protodef_steammessages_5fparties_2esteamclient_2eproto[] =
  "\n\'steammessages_parties.steamclient.prot"
  "o\022\013proto.steam\032,steammessages_unified_ba"
  "se.steamclient.proto\"@\n\032CParties_JoinPar"
  "ty_Request\022\017\n\007steamid\030\001 \001(\006\022\021\n\tbeacon_id"
  "\030\002 \001(\004\"H\n\033CParties_JoinParty_Response\022\021\n"
  "\tbeacon_id\030\001 \001(\004\022\026\n\016connect_string\030\002 \001(\t"
  "\"E\n\027CParties_BeaconLocation\022\025\n\rlocation_"
  "type\030\001 \001(\r\022\023\n\013location_id\030\002 \001(\004\"\251\001\n\035CPar"
  "ties_CreateBeacon_Request\022\r\n\005appid\030\001 \001(\r"
  "\022\026\n\016num_open_slots\030\002 \001(\r\0227\n\tlocations\030\003 "
  "\003(\0132$.proto.steam.CParties_BeaconLocatio"
  "n\022\026\n\016connect_string\030\004 \001(\t\022\020\n\010metadata\030\005 "
  "\001(\t\"3\n\036CParties_CreateBeacon_Response\022\021\n"
  "\tbeacon_id\030\001 \001(\004\"R\n\'CParties_OnReservati"
  "onCompleted_Request\022\021\n\tbeacon_id\030\001 \001(\004\022\024"
  "\n\014user_steamid\030\002 \001(\006\"=\n(CParties_OnReser"
  "vationCompleted_Response\022\021\n\tbeacon_id\030\001 "
  "\001(\004\"M\n\"CParties_CancelReservation_Reques"
  "t\022\021\n\tbeacon_id\030\001 \001(\004\022\024\n\014user_steamid\030\002 \001"
  "(\006\"8\n#CParties_CancelReservation_Respons"
  "e\022\021\n\tbeacon_id\030\001 \001(\004\"P\n#CParties_ChangeN"
  "umOpenSlots_Request\022\021\n\tbeacon_id\030\001 \001(\004\022\026"
  "\n\016num_open_slots\030\002 \001(\r\"9\n$CParties_Chang"
  "eNumOpenSlots_Response\022\021\n\tbeacon_id\030\001 \001("
  "\004\"3\n\036CParties_DestroyBeacon_Request\022\021\n\tb"
  "eacon_id\030\001 \001(\004\"4\n\037CParties_DestroyBeacon"
  "_Response\022\021\n\tbeacon_id\030\001 \001(\0042\352\010\n\007Parties"
  "\022\321\001\n\tJoinParty\022\'.proto.steam.CParties_Jo"
  "inParty_Request\032(.proto.steam.CParties_J"
  "oinParty_Response\"q\202\265\030mRequest to join a"
  " Party via the given Beacon ID. If succe"
  "ssful, will be given the necessary \'conn"
  "ect\' string.\022\235\001\n\014CreateBeacon\022*.proto.st"
  "eam.CParties_CreateBeacon_Request\032+.prot"
  "o.steam.CParties_CreateBeacon_Response\"4"
  "\202\265\0300Create a Beacon to attract people to"
  " your Party.\022\317\001\n\026OnReservationCompleted\022"
  "4.proto.steam.CParties_OnReservationComp"
  "leted_Request\0325.proto.steam.CParties_OnR"
  "eservationCompleted_Response\"H\202\265\030DNotify"
  " Steam that a user with a reservation ha"
  "s successfully joined.\022\326\001\n\021CancelReserva"
  "tion\022/.proto.steam.CParties_CancelReserv"
  "ation_Request\0320.proto.steam.CParties_Can"
  "celReservation_Response\"^\202\265\030ZNotify Stea"
  "m that a user with a reservation either "
  "never showed up, or has left the party.\022"
  "\236\001\n\022ChangeNumOpenSlots\0220.proto.steam.CPa"
  "rties_ChangeNumOpenSlots_Request\0321.proto"
  ".steam.CParties_ChangeNumOpenSlots_Respo"
  "nse\"#\202\265\030\037Change the number of open slots"
  "\022\202\001\n\rDestroyBeacon\022+.proto.steam.CPartie"
  "s_DestroyBeacon_Request\032,.proto.steam.CP"
  "arties_DestroyBeacon_Response\"\026\202\265\030\022Delet"
  "e the Beacon.\032\032\202\265\030\026Party-related service"
  "sB\003\200\001\001"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_steammessages_5fparties_2esteamclient_2eproto = {
  false, InitDefaults_steammessages_5fparties_2esteamclient_2eproto, 
  descriptor_table_protodef_steammessages_5fparties_2esteamclient_2eproto,
  "steammessages_parties.steamclient.proto", &assign_descriptors_table_steammessages_5fparties_2esteamclient_2eproto, 2206,
};

void AddDescriptors_steammessages_5fparties_2esteamclient_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_steammessages_5funified_5fbase_2esteamclient_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_steammessages_5fparties_2esteamclient_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_steammessages_5fparties_2esteamclient_2eproto = []() { AddDescriptors_steammessages_5fparties_2esteamclient_2eproto(); return true; }();
namespace proto {
namespace steam {

// ===================================================================

void CParties_JoinParty_Request::InitAsDefaultInstance() {
}
class CParties_JoinParty_Request::HasBitSetters {
 public:
  static void set_has_steamid(CParties_JoinParty_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_beacon_id(CParties_JoinParty_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CParties_JoinParty_Request::kSteamidFieldNumber;
const int CParties_JoinParty_Request::kBeaconIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CParties_JoinParty_Request::CParties_JoinParty_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CParties_JoinParty_Request)
}
CParties_JoinParty_Request::CParties_JoinParty_Request(const CParties_JoinParty_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&beacon_id_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(beacon_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CParties_JoinParty_Request)
}

void CParties_JoinParty_Request::SharedCtor() {
  ::memset(&steamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&beacon_id_) -
      reinterpret_cast<char*>(&steamid_)) + sizeof(beacon_id_));
}

CParties_JoinParty_Request::~CParties_JoinParty_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CParties_JoinParty_Request)
  SharedDtor();
}

void CParties_JoinParty_Request::SharedDtor() {
}

void CParties_JoinParty_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CParties_JoinParty_Request& CParties_JoinParty_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CParties_JoinParty_Request_steammessages_5fparties_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CParties_JoinParty_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CParties_JoinParty_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&beacon_id_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(beacon_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CParties_JoinParty_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CParties_JoinParty_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint64 beacon_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_beacon_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CParties_JoinParty_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CParties_JoinParty_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 beacon_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_beacon_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &beacon_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CParties_JoinParty_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CParties_JoinParty_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CParties_JoinParty_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CParties_JoinParty_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional uint64 beacon_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->beacon_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CParties_JoinParty_Request)
}

::google::protobuf::uint8* CParties_JoinParty_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CParties_JoinParty_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional uint64 beacon_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->beacon_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CParties_JoinParty_Request)
  return target;
}

size_t CParties_JoinParty_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CParties_JoinParty_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint64 beacon_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->beacon_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CParties_JoinParty_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CParties_JoinParty_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CParties_JoinParty_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CParties_JoinParty_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CParties_JoinParty_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CParties_JoinParty_Request)
    MergeFrom(*source);
  }
}

void CParties_JoinParty_Request::MergeFrom(const CParties_JoinParty_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CParties_JoinParty_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      beacon_id_ = from.beacon_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CParties_JoinParty_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CParties_JoinParty_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CParties_JoinParty_Request::CopyFrom(const CParties_JoinParty_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CParties_JoinParty_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CParties_JoinParty_Request::IsInitialized() const {
  return true;
}

void CParties_JoinParty_Request::Swap(CParties_JoinParty_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CParties_JoinParty_Request::InternalSwap(CParties_JoinParty_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
  swap(beacon_id_, other->beacon_id_);
}

::google::protobuf::Metadata CParties_JoinParty_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fparties_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fparties_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CParties_JoinParty_Response::InitAsDefaultInstance() {
}
class CParties_JoinParty_Response::HasBitSetters {
 public:
  static void set_has_beacon_id(CParties_JoinParty_Response* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_connect_string(CParties_JoinParty_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CParties_JoinParty_Response::kBeaconIdFieldNumber;
const int CParties_JoinParty_Response::kConnectStringFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CParties_JoinParty_Response::CParties_JoinParty_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CParties_JoinParty_Response)
}
CParties_JoinParty_Response::CParties_JoinParty_Response(const CParties_JoinParty_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  connect_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_connect_string()) {
    connect_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.connect_string_);
  }
  beacon_id_ = from.beacon_id_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CParties_JoinParty_Response)
}

void CParties_JoinParty_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CParties_JoinParty_Response_steammessages_5fparties_2esteamclient_2eproto.base);
  connect_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  beacon_id_ = PROTOBUF_ULONGLONG(0);
}

CParties_JoinParty_Response::~CParties_JoinParty_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CParties_JoinParty_Response)
  SharedDtor();
}

void CParties_JoinParty_Response::SharedDtor() {
  connect_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CParties_JoinParty_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CParties_JoinParty_Response& CParties_JoinParty_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CParties_JoinParty_Response_steammessages_5fparties_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CParties_JoinParty_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CParties_JoinParty_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    connect_string_.ClearNonDefaultToEmptyNoArena();
  }
  beacon_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CParties_JoinParty_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CParties_JoinParty_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 beacon_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_beacon_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string connect_string = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CParties_JoinParty_Response.connect_string");
        object = msg->mutable_connect_string();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CParties_JoinParty_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CParties_JoinParty_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 beacon_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_beacon_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &beacon_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string connect_string = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_connect_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->connect_string().data(), static_cast<int>(this->connect_string().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CParties_JoinParty_Response.connect_string");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CParties_JoinParty_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CParties_JoinParty_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CParties_JoinParty_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CParties_JoinParty_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 beacon_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->beacon_id(), output);
  }

  // optional string connect_string = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->connect_string().data(), static_cast<int>(this->connect_string().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CParties_JoinParty_Response.connect_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->connect_string(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CParties_JoinParty_Response)
}

::google::protobuf::uint8* CParties_JoinParty_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CParties_JoinParty_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 beacon_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->beacon_id(), target);
  }

  // optional string connect_string = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->connect_string().data(), static_cast<int>(this->connect_string().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CParties_JoinParty_Response.connect_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->connect_string(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CParties_JoinParty_Response)
  return target;
}

size_t CParties_JoinParty_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CParties_JoinParty_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string connect_string = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->connect_string());
    }

    // optional uint64 beacon_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->beacon_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CParties_JoinParty_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CParties_JoinParty_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CParties_JoinParty_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CParties_JoinParty_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CParties_JoinParty_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CParties_JoinParty_Response)
    MergeFrom(*source);
  }
}

void CParties_JoinParty_Response::MergeFrom(const CParties_JoinParty_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CParties_JoinParty_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      connect_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.connect_string_);
    }
    if (cached_has_bits & 0x00000002u) {
      beacon_id_ = from.beacon_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CParties_JoinParty_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CParties_JoinParty_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CParties_JoinParty_Response::CopyFrom(const CParties_JoinParty_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CParties_JoinParty_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CParties_JoinParty_Response::IsInitialized() const {
  return true;
}

void CParties_JoinParty_Response::Swap(CParties_JoinParty_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CParties_JoinParty_Response::InternalSwap(CParties_JoinParty_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  connect_string_.Swap(&other->connect_string_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(beacon_id_, other->beacon_id_);
}

::google::protobuf::Metadata CParties_JoinParty_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fparties_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fparties_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CParties_BeaconLocation::InitAsDefaultInstance() {
}
class CParties_BeaconLocation::HasBitSetters {
 public:
  static void set_has_location_type(CParties_BeaconLocation* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_location_id(CParties_BeaconLocation* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CParties_BeaconLocation::kLocationTypeFieldNumber;
const int CParties_BeaconLocation::kLocationIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CParties_BeaconLocation::CParties_BeaconLocation()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CParties_BeaconLocation)
}
CParties_BeaconLocation::CParties_BeaconLocation(const CParties_BeaconLocation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&location_id_, &from.location_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&location_type_) -
    reinterpret_cast<char*>(&location_id_)) + sizeof(location_type_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CParties_BeaconLocation)
}

void CParties_BeaconLocation::SharedCtor() {
  ::memset(&location_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&location_type_) -
      reinterpret_cast<char*>(&location_id_)) + sizeof(location_type_));
}

CParties_BeaconLocation::~CParties_BeaconLocation() {
  // @@protoc_insertion_point(destructor:proto.steam.CParties_BeaconLocation)
  SharedDtor();
}

void CParties_BeaconLocation::SharedDtor() {
}

void CParties_BeaconLocation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CParties_BeaconLocation& CParties_BeaconLocation::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CParties_BeaconLocation_steammessages_5fparties_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CParties_BeaconLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CParties_BeaconLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&location_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&location_type_) -
        reinterpret_cast<char*>(&location_id_)) + sizeof(location_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CParties_BeaconLocation::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CParties_BeaconLocation*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 location_type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_location_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 location_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_location_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CParties_BeaconLocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CParties_BeaconLocation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 location_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_location_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &location_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 location_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_location_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &location_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CParties_BeaconLocation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CParties_BeaconLocation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CParties_BeaconLocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CParties_BeaconLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 location_type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->location_type(), output);
  }

  // optional uint64 location_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->location_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CParties_BeaconLocation)
}

::google::protobuf::uint8* CParties_BeaconLocation::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CParties_BeaconLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 location_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->location_type(), target);
  }

  // optional uint64 location_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->location_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CParties_BeaconLocation)
  return target;
}

size_t CParties_BeaconLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CParties_BeaconLocation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 location_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->location_id());
    }

    // optional uint32 location_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->location_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CParties_BeaconLocation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CParties_BeaconLocation)
  GOOGLE_DCHECK_NE(&from, this);
  const CParties_BeaconLocation* source =
      ::google::protobuf::DynamicCastToGenerated<CParties_BeaconLocation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CParties_BeaconLocation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CParties_BeaconLocation)
    MergeFrom(*source);
  }
}

void CParties_BeaconLocation::MergeFrom(const CParties_BeaconLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CParties_BeaconLocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      location_id_ = from.location_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      location_type_ = from.location_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CParties_BeaconLocation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CParties_BeaconLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CParties_BeaconLocation::CopyFrom(const CParties_BeaconLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CParties_BeaconLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CParties_BeaconLocation::IsInitialized() const {
  return true;
}

void CParties_BeaconLocation::Swap(CParties_BeaconLocation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CParties_BeaconLocation::InternalSwap(CParties_BeaconLocation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(location_id_, other->location_id_);
  swap(location_type_, other->location_type_);
}

::google::protobuf::Metadata CParties_BeaconLocation::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fparties_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fparties_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CParties_CreateBeacon_Request::InitAsDefaultInstance() {
}
class CParties_CreateBeacon_Request::HasBitSetters {
 public:
  static void set_has_appid(CParties_CreateBeacon_Request* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_num_open_slots(CParties_CreateBeacon_Request* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_connect_string(CParties_CreateBeacon_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_metadata(CParties_CreateBeacon_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CParties_CreateBeacon_Request::kAppidFieldNumber;
const int CParties_CreateBeacon_Request::kNumOpenSlotsFieldNumber;
const int CParties_CreateBeacon_Request::kLocationsFieldNumber;
const int CParties_CreateBeacon_Request::kConnectStringFieldNumber;
const int CParties_CreateBeacon_Request::kMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CParties_CreateBeacon_Request::CParties_CreateBeacon_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CParties_CreateBeacon_Request)
}
CParties_CreateBeacon_Request::CParties_CreateBeacon_Request(const CParties_CreateBeacon_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      locations_(from.locations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  connect_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_connect_string()) {
    connect_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.connect_string_);
  }
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_metadata()) {
    metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_open_slots_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(num_open_slots_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CParties_CreateBeacon_Request)
}

void CParties_CreateBeacon_Request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CParties_CreateBeacon_Request_steammessages_5fparties_2esteamclient_2eproto.base);
  connect_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&appid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_open_slots_) -
      reinterpret_cast<char*>(&appid_)) + sizeof(num_open_slots_));
}

CParties_CreateBeacon_Request::~CParties_CreateBeacon_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CParties_CreateBeacon_Request)
  SharedDtor();
}

void CParties_CreateBeacon_Request::SharedDtor() {
  connect_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CParties_CreateBeacon_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CParties_CreateBeacon_Request& CParties_CreateBeacon_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CParties_CreateBeacon_Request_steammessages_5fparties_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CParties_CreateBeacon_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CParties_CreateBeacon_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  locations_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      connect_string_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      metadata_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_open_slots_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(num_open_slots_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CParties_CreateBeacon_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CParties_CreateBeacon_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 num_open_slots = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_num_open_slots(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.steam.CParties_BeaconLocation locations = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CParties_BeaconLocation::_InternalParse;
          object = msg->add_locations();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // optional string connect_string = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CParties_CreateBeacon_Request.connect_string");
        object = msg->mutable_connect_string();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string metadata = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CParties_CreateBeacon_Request.metadata");
        object = msg->mutable_metadata();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CParties_CreateBeacon_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CParties_CreateBeacon_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_open_slots = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_num_open_slots(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_open_slots_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CParties_BeaconLocation locations = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_locations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string connect_string = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_connect_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->connect_string().data(), static_cast<int>(this->connect_string().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CParties_CreateBeacon_Request.connect_string");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string metadata = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_metadata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->metadata().data(), static_cast<int>(this->metadata().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CParties_CreateBeacon_Request.metadata");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CParties_CreateBeacon_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CParties_CreateBeacon_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CParties_CreateBeacon_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CParties_CreateBeacon_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint32 num_open_slots = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num_open_slots(), output);
  }

  // repeated .proto.steam.CParties_BeaconLocation locations = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->locations_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->locations(static_cast<int>(i)),
      output);
  }

  // optional string connect_string = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->connect_string().data(), static_cast<int>(this->connect_string().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CParties_CreateBeacon_Request.connect_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->connect_string(), output);
  }

  // optional string metadata = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->metadata().data(), static_cast<int>(this->metadata().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CParties_CreateBeacon_Request.metadata");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->metadata(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CParties_CreateBeacon_Request)
}

::google::protobuf::uint8* CParties_CreateBeacon_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CParties_CreateBeacon_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint32 num_open_slots = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num_open_slots(), target);
  }

  // repeated .proto.steam.CParties_BeaconLocation locations = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->locations_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->locations(static_cast<int>(i)), target);
  }

  // optional string connect_string = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->connect_string().data(), static_cast<int>(this->connect_string().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CParties_CreateBeacon_Request.connect_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->connect_string(), target);
  }

  // optional string metadata = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->metadata().data(), static_cast<int>(this->metadata().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CParties_CreateBeacon_Request.metadata");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->metadata(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CParties_CreateBeacon_Request)
  return target;
}

size_t CParties_CreateBeacon_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CParties_CreateBeacon_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CParties_BeaconLocation locations = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->locations_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->locations(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string connect_string = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->connect_string());
    }

    // optional string metadata = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->metadata());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional uint32 num_open_slots = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_open_slots());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CParties_CreateBeacon_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CParties_CreateBeacon_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CParties_CreateBeacon_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CParties_CreateBeacon_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CParties_CreateBeacon_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CParties_CreateBeacon_Request)
    MergeFrom(*source);
  }
}

void CParties_CreateBeacon_Request::MergeFrom(const CParties_CreateBeacon_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CParties_CreateBeacon_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  locations_.MergeFrom(from.locations_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      connect_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.connect_string_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000008u) {
      num_open_slots_ = from.num_open_slots_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CParties_CreateBeacon_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CParties_CreateBeacon_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CParties_CreateBeacon_Request::CopyFrom(const CParties_CreateBeacon_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CParties_CreateBeacon_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CParties_CreateBeacon_Request::IsInitialized() const {
  return true;
}

void CParties_CreateBeacon_Request::Swap(CParties_CreateBeacon_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CParties_CreateBeacon_Request::InternalSwap(CParties_CreateBeacon_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&locations_)->InternalSwap(CastToBase(&other->locations_));
  connect_string_.Swap(&other->connect_string_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  metadata_.Swap(&other->metadata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(appid_, other->appid_);
  swap(num_open_slots_, other->num_open_slots_);
}

::google::protobuf::Metadata CParties_CreateBeacon_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fparties_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fparties_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CParties_CreateBeacon_Response::InitAsDefaultInstance() {
}
class CParties_CreateBeacon_Response::HasBitSetters {
 public:
  static void set_has_beacon_id(CParties_CreateBeacon_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CParties_CreateBeacon_Response::kBeaconIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CParties_CreateBeacon_Response::CParties_CreateBeacon_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CParties_CreateBeacon_Response)
}
CParties_CreateBeacon_Response::CParties_CreateBeacon_Response(const CParties_CreateBeacon_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  beacon_id_ = from.beacon_id_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CParties_CreateBeacon_Response)
}

void CParties_CreateBeacon_Response::SharedCtor() {
  beacon_id_ = PROTOBUF_ULONGLONG(0);
}

CParties_CreateBeacon_Response::~CParties_CreateBeacon_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CParties_CreateBeacon_Response)
  SharedDtor();
}

void CParties_CreateBeacon_Response::SharedDtor() {
}

void CParties_CreateBeacon_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CParties_CreateBeacon_Response& CParties_CreateBeacon_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CParties_CreateBeacon_Response_steammessages_5fparties_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CParties_CreateBeacon_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CParties_CreateBeacon_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  beacon_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CParties_CreateBeacon_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CParties_CreateBeacon_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 beacon_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_beacon_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CParties_CreateBeacon_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CParties_CreateBeacon_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 beacon_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_beacon_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &beacon_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CParties_CreateBeacon_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CParties_CreateBeacon_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CParties_CreateBeacon_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CParties_CreateBeacon_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 beacon_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->beacon_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CParties_CreateBeacon_Response)
}

::google::protobuf::uint8* CParties_CreateBeacon_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CParties_CreateBeacon_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 beacon_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->beacon_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CParties_CreateBeacon_Response)
  return target;
}

size_t CParties_CreateBeacon_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CParties_CreateBeacon_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 beacon_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->beacon_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CParties_CreateBeacon_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CParties_CreateBeacon_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CParties_CreateBeacon_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CParties_CreateBeacon_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CParties_CreateBeacon_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CParties_CreateBeacon_Response)
    MergeFrom(*source);
  }
}

void CParties_CreateBeacon_Response::MergeFrom(const CParties_CreateBeacon_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CParties_CreateBeacon_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_beacon_id()) {
    set_beacon_id(from.beacon_id());
  }
}

void CParties_CreateBeacon_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CParties_CreateBeacon_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CParties_CreateBeacon_Response::CopyFrom(const CParties_CreateBeacon_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CParties_CreateBeacon_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CParties_CreateBeacon_Response::IsInitialized() const {
  return true;
}

void CParties_CreateBeacon_Response::Swap(CParties_CreateBeacon_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CParties_CreateBeacon_Response::InternalSwap(CParties_CreateBeacon_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(beacon_id_, other->beacon_id_);
}

::google::protobuf::Metadata CParties_CreateBeacon_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fparties_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fparties_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CParties_OnReservationCompleted_Request::InitAsDefaultInstance() {
}
class CParties_OnReservationCompleted_Request::HasBitSetters {
 public:
  static void set_has_beacon_id(CParties_OnReservationCompleted_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_user_steamid(CParties_OnReservationCompleted_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CParties_OnReservationCompleted_Request::kBeaconIdFieldNumber;
const int CParties_OnReservationCompleted_Request::kUserSteamidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CParties_OnReservationCompleted_Request::CParties_OnReservationCompleted_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CParties_OnReservationCompleted_Request)
}
CParties_OnReservationCompleted_Request::CParties_OnReservationCompleted_Request(const CParties_OnReservationCompleted_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&beacon_id_, &from.beacon_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_steamid_) -
    reinterpret_cast<char*>(&beacon_id_)) + sizeof(user_steamid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CParties_OnReservationCompleted_Request)
}

void CParties_OnReservationCompleted_Request::SharedCtor() {
  ::memset(&beacon_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_steamid_) -
      reinterpret_cast<char*>(&beacon_id_)) + sizeof(user_steamid_));
}

CParties_OnReservationCompleted_Request::~CParties_OnReservationCompleted_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CParties_OnReservationCompleted_Request)
  SharedDtor();
}

void CParties_OnReservationCompleted_Request::SharedDtor() {
}

void CParties_OnReservationCompleted_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CParties_OnReservationCompleted_Request& CParties_OnReservationCompleted_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CParties_OnReservationCompleted_Request_steammessages_5fparties_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CParties_OnReservationCompleted_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CParties_OnReservationCompleted_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&beacon_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&user_steamid_) -
        reinterpret_cast<char*>(&beacon_id_)) + sizeof(user_steamid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CParties_OnReservationCompleted_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CParties_OnReservationCompleted_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 beacon_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_beacon_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 user_steamid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_user_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CParties_OnReservationCompleted_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CParties_OnReservationCompleted_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 beacon_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_beacon_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &beacon_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 user_steamid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_user_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &user_steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CParties_OnReservationCompleted_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CParties_OnReservationCompleted_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CParties_OnReservationCompleted_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CParties_OnReservationCompleted_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 beacon_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->beacon_id(), output);
  }

  // optional fixed64 user_steamid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->user_steamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CParties_OnReservationCompleted_Request)
}

::google::protobuf::uint8* CParties_OnReservationCompleted_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CParties_OnReservationCompleted_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 beacon_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->beacon_id(), target);
  }

  // optional fixed64 user_steamid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->user_steamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CParties_OnReservationCompleted_Request)
  return target;
}

size_t CParties_OnReservationCompleted_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CParties_OnReservationCompleted_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 beacon_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->beacon_id());
    }

    // optional fixed64 user_steamid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CParties_OnReservationCompleted_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CParties_OnReservationCompleted_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CParties_OnReservationCompleted_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CParties_OnReservationCompleted_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CParties_OnReservationCompleted_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CParties_OnReservationCompleted_Request)
    MergeFrom(*source);
  }
}

void CParties_OnReservationCompleted_Request::MergeFrom(const CParties_OnReservationCompleted_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CParties_OnReservationCompleted_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      beacon_id_ = from.beacon_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      user_steamid_ = from.user_steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CParties_OnReservationCompleted_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CParties_OnReservationCompleted_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CParties_OnReservationCompleted_Request::CopyFrom(const CParties_OnReservationCompleted_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CParties_OnReservationCompleted_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CParties_OnReservationCompleted_Request::IsInitialized() const {
  return true;
}

void CParties_OnReservationCompleted_Request::Swap(CParties_OnReservationCompleted_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CParties_OnReservationCompleted_Request::InternalSwap(CParties_OnReservationCompleted_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(beacon_id_, other->beacon_id_);
  swap(user_steamid_, other->user_steamid_);
}

::google::protobuf::Metadata CParties_OnReservationCompleted_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fparties_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fparties_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CParties_OnReservationCompleted_Response::InitAsDefaultInstance() {
}
class CParties_OnReservationCompleted_Response::HasBitSetters {
 public:
  static void set_has_beacon_id(CParties_OnReservationCompleted_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CParties_OnReservationCompleted_Response::kBeaconIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CParties_OnReservationCompleted_Response::CParties_OnReservationCompleted_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CParties_OnReservationCompleted_Response)
}
CParties_OnReservationCompleted_Response::CParties_OnReservationCompleted_Response(const CParties_OnReservationCompleted_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  beacon_id_ = from.beacon_id_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CParties_OnReservationCompleted_Response)
}

void CParties_OnReservationCompleted_Response::SharedCtor() {
  beacon_id_ = PROTOBUF_ULONGLONG(0);
}

CParties_OnReservationCompleted_Response::~CParties_OnReservationCompleted_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CParties_OnReservationCompleted_Response)
  SharedDtor();
}

void CParties_OnReservationCompleted_Response::SharedDtor() {
}

void CParties_OnReservationCompleted_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CParties_OnReservationCompleted_Response& CParties_OnReservationCompleted_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CParties_OnReservationCompleted_Response_steammessages_5fparties_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CParties_OnReservationCompleted_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CParties_OnReservationCompleted_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  beacon_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CParties_OnReservationCompleted_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CParties_OnReservationCompleted_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 beacon_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_beacon_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CParties_OnReservationCompleted_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CParties_OnReservationCompleted_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 beacon_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_beacon_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &beacon_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CParties_OnReservationCompleted_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CParties_OnReservationCompleted_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CParties_OnReservationCompleted_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CParties_OnReservationCompleted_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 beacon_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->beacon_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CParties_OnReservationCompleted_Response)
}

::google::protobuf::uint8* CParties_OnReservationCompleted_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CParties_OnReservationCompleted_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 beacon_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->beacon_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CParties_OnReservationCompleted_Response)
  return target;
}

size_t CParties_OnReservationCompleted_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CParties_OnReservationCompleted_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 beacon_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->beacon_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CParties_OnReservationCompleted_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CParties_OnReservationCompleted_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CParties_OnReservationCompleted_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CParties_OnReservationCompleted_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CParties_OnReservationCompleted_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CParties_OnReservationCompleted_Response)
    MergeFrom(*source);
  }
}

void CParties_OnReservationCompleted_Response::MergeFrom(const CParties_OnReservationCompleted_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CParties_OnReservationCompleted_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_beacon_id()) {
    set_beacon_id(from.beacon_id());
  }
}

void CParties_OnReservationCompleted_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CParties_OnReservationCompleted_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CParties_OnReservationCompleted_Response::CopyFrom(const CParties_OnReservationCompleted_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CParties_OnReservationCompleted_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CParties_OnReservationCompleted_Response::IsInitialized() const {
  return true;
}

void CParties_OnReservationCompleted_Response::Swap(CParties_OnReservationCompleted_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CParties_OnReservationCompleted_Response::InternalSwap(CParties_OnReservationCompleted_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(beacon_id_, other->beacon_id_);
}

::google::protobuf::Metadata CParties_OnReservationCompleted_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fparties_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fparties_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CParties_CancelReservation_Request::InitAsDefaultInstance() {
}
class CParties_CancelReservation_Request::HasBitSetters {
 public:
  static void set_has_beacon_id(CParties_CancelReservation_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_user_steamid(CParties_CancelReservation_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CParties_CancelReservation_Request::kBeaconIdFieldNumber;
const int CParties_CancelReservation_Request::kUserSteamidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CParties_CancelReservation_Request::CParties_CancelReservation_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CParties_CancelReservation_Request)
}
CParties_CancelReservation_Request::CParties_CancelReservation_Request(const CParties_CancelReservation_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&beacon_id_, &from.beacon_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_steamid_) -
    reinterpret_cast<char*>(&beacon_id_)) + sizeof(user_steamid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CParties_CancelReservation_Request)
}

void CParties_CancelReservation_Request::SharedCtor() {
  ::memset(&beacon_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_steamid_) -
      reinterpret_cast<char*>(&beacon_id_)) + sizeof(user_steamid_));
}

CParties_CancelReservation_Request::~CParties_CancelReservation_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CParties_CancelReservation_Request)
  SharedDtor();
}

void CParties_CancelReservation_Request::SharedDtor() {
}

void CParties_CancelReservation_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CParties_CancelReservation_Request& CParties_CancelReservation_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CParties_CancelReservation_Request_steammessages_5fparties_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CParties_CancelReservation_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CParties_CancelReservation_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&beacon_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&user_steamid_) -
        reinterpret_cast<char*>(&beacon_id_)) + sizeof(user_steamid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CParties_CancelReservation_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CParties_CancelReservation_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 beacon_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_beacon_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 user_steamid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_user_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CParties_CancelReservation_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CParties_CancelReservation_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 beacon_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_beacon_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &beacon_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 user_steamid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_user_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &user_steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CParties_CancelReservation_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CParties_CancelReservation_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CParties_CancelReservation_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CParties_CancelReservation_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 beacon_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->beacon_id(), output);
  }

  // optional fixed64 user_steamid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->user_steamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CParties_CancelReservation_Request)
}

::google::protobuf::uint8* CParties_CancelReservation_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CParties_CancelReservation_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 beacon_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->beacon_id(), target);
  }

  // optional fixed64 user_steamid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->user_steamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CParties_CancelReservation_Request)
  return target;
}

size_t CParties_CancelReservation_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CParties_CancelReservation_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 beacon_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->beacon_id());
    }

    // optional fixed64 user_steamid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CParties_CancelReservation_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CParties_CancelReservation_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CParties_CancelReservation_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CParties_CancelReservation_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CParties_CancelReservation_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CParties_CancelReservation_Request)
    MergeFrom(*source);
  }
}

void CParties_CancelReservation_Request::MergeFrom(const CParties_CancelReservation_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CParties_CancelReservation_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      beacon_id_ = from.beacon_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      user_steamid_ = from.user_steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CParties_CancelReservation_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CParties_CancelReservation_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CParties_CancelReservation_Request::CopyFrom(const CParties_CancelReservation_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CParties_CancelReservation_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CParties_CancelReservation_Request::IsInitialized() const {
  return true;
}

void CParties_CancelReservation_Request::Swap(CParties_CancelReservation_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CParties_CancelReservation_Request::InternalSwap(CParties_CancelReservation_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(beacon_id_, other->beacon_id_);
  swap(user_steamid_, other->user_steamid_);
}

::google::protobuf::Metadata CParties_CancelReservation_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fparties_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fparties_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CParties_CancelReservation_Response::InitAsDefaultInstance() {
}
class CParties_CancelReservation_Response::HasBitSetters {
 public:
  static void set_has_beacon_id(CParties_CancelReservation_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CParties_CancelReservation_Response::kBeaconIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CParties_CancelReservation_Response::CParties_CancelReservation_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CParties_CancelReservation_Response)
}
CParties_CancelReservation_Response::CParties_CancelReservation_Response(const CParties_CancelReservation_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  beacon_id_ = from.beacon_id_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CParties_CancelReservation_Response)
}

void CParties_CancelReservation_Response::SharedCtor() {
  beacon_id_ = PROTOBUF_ULONGLONG(0);
}

CParties_CancelReservation_Response::~CParties_CancelReservation_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CParties_CancelReservation_Response)
  SharedDtor();
}

void CParties_CancelReservation_Response::SharedDtor() {
}

void CParties_CancelReservation_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CParties_CancelReservation_Response& CParties_CancelReservation_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CParties_CancelReservation_Response_steammessages_5fparties_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CParties_CancelReservation_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CParties_CancelReservation_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  beacon_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CParties_CancelReservation_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CParties_CancelReservation_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 beacon_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_beacon_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CParties_CancelReservation_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CParties_CancelReservation_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 beacon_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_beacon_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &beacon_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CParties_CancelReservation_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CParties_CancelReservation_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CParties_CancelReservation_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CParties_CancelReservation_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 beacon_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->beacon_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CParties_CancelReservation_Response)
}

::google::protobuf::uint8* CParties_CancelReservation_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CParties_CancelReservation_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 beacon_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->beacon_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CParties_CancelReservation_Response)
  return target;
}

size_t CParties_CancelReservation_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CParties_CancelReservation_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 beacon_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->beacon_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CParties_CancelReservation_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CParties_CancelReservation_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CParties_CancelReservation_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CParties_CancelReservation_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CParties_CancelReservation_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CParties_CancelReservation_Response)
    MergeFrom(*source);
  }
}

void CParties_CancelReservation_Response::MergeFrom(const CParties_CancelReservation_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CParties_CancelReservation_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_beacon_id()) {
    set_beacon_id(from.beacon_id());
  }
}

void CParties_CancelReservation_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CParties_CancelReservation_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CParties_CancelReservation_Response::CopyFrom(const CParties_CancelReservation_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CParties_CancelReservation_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CParties_CancelReservation_Response::IsInitialized() const {
  return true;
}

void CParties_CancelReservation_Response::Swap(CParties_CancelReservation_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CParties_CancelReservation_Response::InternalSwap(CParties_CancelReservation_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(beacon_id_, other->beacon_id_);
}

::google::protobuf::Metadata CParties_CancelReservation_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fparties_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fparties_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CParties_ChangeNumOpenSlots_Request::InitAsDefaultInstance() {
}
class CParties_ChangeNumOpenSlots_Request::HasBitSetters {
 public:
  static void set_has_beacon_id(CParties_ChangeNumOpenSlots_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_num_open_slots(CParties_ChangeNumOpenSlots_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CParties_ChangeNumOpenSlots_Request::kBeaconIdFieldNumber;
const int CParties_ChangeNumOpenSlots_Request::kNumOpenSlotsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CParties_ChangeNumOpenSlots_Request::CParties_ChangeNumOpenSlots_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CParties_ChangeNumOpenSlots_Request)
}
CParties_ChangeNumOpenSlots_Request::CParties_ChangeNumOpenSlots_Request(const CParties_ChangeNumOpenSlots_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&beacon_id_, &from.beacon_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_open_slots_) -
    reinterpret_cast<char*>(&beacon_id_)) + sizeof(num_open_slots_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CParties_ChangeNumOpenSlots_Request)
}

void CParties_ChangeNumOpenSlots_Request::SharedCtor() {
  ::memset(&beacon_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_open_slots_) -
      reinterpret_cast<char*>(&beacon_id_)) + sizeof(num_open_slots_));
}

CParties_ChangeNumOpenSlots_Request::~CParties_ChangeNumOpenSlots_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CParties_ChangeNumOpenSlots_Request)
  SharedDtor();
}

void CParties_ChangeNumOpenSlots_Request::SharedDtor() {
}

void CParties_ChangeNumOpenSlots_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CParties_ChangeNumOpenSlots_Request& CParties_ChangeNumOpenSlots_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CParties_ChangeNumOpenSlots_Request_steammessages_5fparties_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CParties_ChangeNumOpenSlots_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CParties_ChangeNumOpenSlots_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&beacon_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_open_slots_) -
        reinterpret_cast<char*>(&beacon_id_)) + sizeof(num_open_slots_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CParties_ChangeNumOpenSlots_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CParties_ChangeNumOpenSlots_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 beacon_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_beacon_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 num_open_slots = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_num_open_slots(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CParties_ChangeNumOpenSlots_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CParties_ChangeNumOpenSlots_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 beacon_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_beacon_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &beacon_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_open_slots = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_num_open_slots(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_open_slots_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CParties_ChangeNumOpenSlots_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CParties_ChangeNumOpenSlots_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CParties_ChangeNumOpenSlots_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CParties_ChangeNumOpenSlots_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 beacon_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->beacon_id(), output);
  }

  // optional uint32 num_open_slots = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num_open_slots(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CParties_ChangeNumOpenSlots_Request)
}

::google::protobuf::uint8* CParties_ChangeNumOpenSlots_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CParties_ChangeNumOpenSlots_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 beacon_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->beacon_id(), target);
  }

  // optional uint32 num_open_slots = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num_open_slots(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CParties_ChangeNumOpenSlots_Request)
  return target;
}

size_t CParties_ChangeNumOpenSlots_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CParties_ChangeNumOpenSlots_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 beacon_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->beacon_id());
    }

    // optional uint32 num_open_slots = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_open_slots());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CParties_ChangeNumOpenSlots_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CParties_ChangeNumOpenSlots_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CParties_ChangeNumOpenSlots_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CParties_ChangeNumOpenSlots_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CParties_ChangeNumOpenSlots_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CParties_ChangeNumOpenSlots_Request)
    MergeFrom(*source);
  }
}

void CParties_ChangeNumOpenSlots_Request::MergeFrom(const CParties_ChangeNumOpenSlots_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CParties_ChangeNumOpenSlots_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      beacon_id_ = from.beacon_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_open_slots_ = from.num_open_slots_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CParties_ChangeNumOpenSlots_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CParties_ChangeNumOpenSlots_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CParties_ChangeNumOpenSlots_Request::CopyFrom(const CParties_ChangeNumOpenSlots_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CParties_ChangeNumOpenSlots_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CParties_ChangeNumOpenSlots_Request::IsInitialized() const {
  return true;
}

void CParties_ChangeNumOpenSlots_Request::Swap(CParties_ChangeNumOpenSlots_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CParties_ChangeNumOpenSlots_Request::InternalSwap(CParties_ChangeNumOpenSlots_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(beacon_id_, other->beacon_id_);
  swap(num_open_slots_, other->num_open_slots_);
}

::google::protobuf::Metadata CParties_ChangeNumOpenSlots_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fparties_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fparties_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CParties_ChangeNumOpenSlots_Response::InitAsDefaultInstance() {
}
class CParties_ChangeNumOpenSlots_Response::HasBitSetters {
 public:
  static void set_has_beacon_id(CParties_ChangeNumOpenSlots_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CParties_ChangeNumOpenSlots_Response::kBeaconIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CParties_ChangeNumOpenSlots_Response::CParties_ChangeNumOpenSlots_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CParties_ChangeNumOpenSlots_Response)
}
CParties_ChangeNumOpenSlots_Response::CParties_ChangeNumOpenSlots_Response(const CParties_ChangeNumOpenSlots_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  beacon_id_ = from.beacon_id_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CParties_ChangeNumOpenSlots_Response)
}

void CParties_ChangeNumOpenSlots_Response::SharedCtor() {
  beacon_id_ = PROTOBUF_ULONGLONG(0);
}

CParties_ChangeNumOpenSlots_Response::~CParties_ChangeNumOpenSlots_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CParties_ChangeNumOpenSlots_Response)
  SharedDtor();
}

void CParties_ChangeNumOpenSlots_Response::SharedDtor() {
}

void CParties_ChangeNumOpenSlots_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CParties_ChangeNumOpenSlots_Response& CParties_ChangeNumOpenSlots_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CParties_ChangeNumOpenSlots_Response_steammessages_5fparties_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CParties_ChangeNumOpenSlots_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CParties_ChangeNumOpenSlots_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  beacon_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CParties_ChangeNumOpenSlots_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CParties_ChangeNumOpenSlots_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 beacon_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_beacon_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CParties_ChangeNumOpenSlots_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CParties_ChangeNumOpenSlots_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 beacon_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_beacon_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &beacon_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CParties_ChangeNumOpenSlots_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CParties_ChangeNumOpenSlots_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CParties_ChangeNumOpenSlots_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CParties_ChangeNumOpenSlots_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 beacon_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->beacon_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CParties_ChangeNumOpenSlots_Response)
}

::google::protobuf::uint8* CParties_ChangeNumOpenSlots_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CParties_ChangeNumOpenSlots_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 beacon_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->beacon_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CParties_ChangeNumOpenSlots_Response)
  return target;
}

size_t CParties_ChangeNumOpenSlots_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CParties_ChangeNumOpenSlots_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 beacon_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->beacon_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CParties_ChangeNumOpenSlots_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CParties_ChangeNumOpenSlots_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CParties_ChangeNumOpenSlots_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CParties_ChangeNumOpenSlots_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CParties_ChangeNumOpenSlots_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CParties_ChangeNumOpenSlots_Response)
    MergeFrom(*source);
  }
}

void CParties_ChangeNumOpenSlots_Response::MergeFrom(const CParties_ChangeNumOpenSlots_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CParties_ChangeNumOpenSlots_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_beacon_id()) {
    set_beacon_id(from.beacon_id());
  }
}

void CParties_ChangeNumOpenSlots_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CParties_ChangeNumOpenSlots_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CParties_ChangeNumOpenSlots_Response::CopyFrom(const CParties_ChangeNumOpenSlots_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CParties_ChangeNumOpenSlots_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CParties_ChangeNumOpenSlots_Response::IsInitialized() const {
  return true;
}

void CParties_ChangeNumOpenSlots_Response::Swap(CParties_ChangeNumOpenSlots_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CParties_ChangeNumOpenSlots_Response::InternalSwap(CParties_ChangeNumOpenSlots_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(beacon_id_, other->beacon_id_);
}

::google::protobuf::Metadata CParties_ChangeNumOpenSlots_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fparties_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fparties_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CParties_DestroyBeacon_Request::InitAsDefaultInstance() {
}
class CParties_DestroyBeacon_Request::HasBitSetters {
 public:
  static void set_has_beacon_id(CParties_DestroyBeacon_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CParties_DestroyBeacon_Request::kBeaconIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CParties_DestroyBeacon_Request::CParties_DestroyBeacon_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CParties_DestroyBeacon_Request)
}
CParties_DestroyBeacon_Request::CParties_DestroyBeacon_Request(const CParties_DestroyBeacon_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  beacon_id_ = from.beacon_id_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CParties_DestroyBeacon_Request)
}

void CParties_DestroyBeacon_Request::SharedCtor() {
  beacon_id_ = PROTOBUF_ULONGLONG(0);
}

CParties_DestroyBeacon_Request::~CParties_DestroyBeacon_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CParties_DestroyBeacon_Request)
  SharedDtor();
}

void CParties_DestroyBeacon_Request::SharedDtor() {
}

void CParties_DestroyBeacon_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CParties_DestroyBeacon_Request& CParties_DestroyBeacon_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CParties_DestroyBeacon_Request_steammessages_5fparties_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CParties_DestroyBeacon_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CParties_DestroyBeacon_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  beacon_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CParties_DestroyBeacon_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CParties_DestroyBeacon_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 beacon_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_beacon_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CParties_DestroyBeacon_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CParties_DestroyBeacon_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 beacon_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_beacon_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &beacon_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CParties_DestroyBeacon_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CParties_DestroyBeacon_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CParties_DestroyBeacon_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CParties_DestroyBeacon_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 beacon_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->beacon_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CParties_DestroyBeacon_Request)
}

::google::protobuf::uint8* CParties_DestroyBeacon_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CParties_DestroyBeacon_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 beacon_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->beacon_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CParties_DestroyBeacon_Request)
  return target;
}

size_t CParties_DestroyBeacon_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CParties_DestroyBeacon_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 beacon_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->beacon_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CParties_DestroyBeacon_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CParties_DestroyBeacon_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CParties_DestroyBeacon_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CParties_DestroyBeacon_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CParties_DestroyBeacon_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CParties_DestroyBeacon_Request)
    MergeFrom(*source);
  }
}

void CParties_DestroyBeacon_Request::MergeFrom(const CParties_DestroyBeacon_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CParties_DestroyBeacon_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_beacon_id()) {
    set_beacon_id(from.beacon_id());
  }
}

void CParties_DestroyBeacon_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CParties_DestroyBeacon_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CParties_DestroyBeacon_Request::CopyFrom(const CParties_DestroyBeacon_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CParties_DestroyBeacon_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CParties_DestroyBeacon_Request::IsInitialized() const {
  return true;
}

void CParties_DestroyBeacon_Request::Swap(CParties_DestroyBeacon_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CParties_DestroyBeacon_Request::InternalSwap(CParties_DestroyBeacon_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(beacon_id_, other->beacon_id_);
}

::google::protobuf::Metadata CParties_DestroyBeacon_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fparties_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fparties_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CParties_DestroyBeacon_Response::InitAsDefaultInstance() {
}
class CParties_DestroyBeacon_Response::HasBitSetters {
 public:
  static void set_has_beacon_id(CParties_DestroyBeacon_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CParties_DestroyBeacon_Response::kBeaconIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CParties_DestroyBeacon_Response::CParties_DestroyBeacon_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CParties_DestroyBeacon_Response)
}
CParties_DestroyBeacon_Response::CParties_DestroyBeacon_Response(const CParties_DestroyBeacon_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  beacon_id_ = from.beacon_id_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CParties_DestroyBeacon_Response)
}

void CParties_DestroyBeacon_Response::SharedCtor() {
  beacon_id_ = PROTOBUF_ULONGLONG(0);
}

CParties_DestroyBeacon_Response::~CParties_DestroyBeacon_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CParties_DestroyBeacon_Response)
  SharedDtor();
}

void CParties_DestroyBeacon_Response::SharedDtor() {
}

void CParties_DestroyBeacon_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CParties_DestroyBeacon_Response& CParties_DestroyBeacon_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CParties_DestroyBeacon_Response_steammessages_5fparties_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CParties_DestroyBeacon_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CParties_DestroyBeacon_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  beacon_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CParties_DestroyBeacon_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CParties_DestroyBeacon_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 beacon_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_beacon_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CParties_DestroyBeacon_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CParties_DestroyBeacon_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 beacon_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_beacon_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &beacon_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CParties_DestroyBeacon_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CParties_DestroyBeacon_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CParties_DestroyBeacon_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CParties_DestroyBeacon_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 beacon_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->beacon_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CParties_DestroyBeacon_Response)
}

::google::protobuf::uint8* CParties_DestroyBeacon_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CParties_DestroyBeacon_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 beacon_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->beacon_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CParties_DestroyBeacon_Response)
  return target;
}

size_t CParties_DestroyBeacon_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CParties_DestroyBeacon_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 beacon_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->beacon_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CParties_DestroyBeacon_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CParties_DestroyBeacon_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CParties_DestroyBeacon_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CParties_DestroyBeacon_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CParties_DestroyBeacon_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CParties_DestroyBeacon_Response)
    MergeFrom(*source);
  }
}

void CParties_DestroyBeacon_Response::MergeFrom(const CParties_DestroyBeacon_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CParties_DestroyBeacon_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_beacon_id()) {
    set_beacon_id(from.beacon_id());
  }
}

void CParties_DestroyBeacon_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CParties_DestroyBeacon_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CParties_DestroyBeacon_Response::CopyFrom(const CParties_DestroyBeacon_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CParties_DestroyBeacon_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CParties_DestroyBeacon_Response::IsInitialized() const {
  return true;
}

void CParties_DestroyBeacon_Response::Swap(CParties_DestroyBeacon_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CParties_DestroyBeacon_Response::InternalSwap(CParties_DestroyBeacon_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(beacon_id_, other->beacon_id_);
}

::google::protobuf::Metadata CParties_DestroyBeacon_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fparties_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fparties_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

Parties::~Parties() {}

const ::google::protobuf::ServiceDescriptor* Parties::descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_steammessages_5fparties_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5fparties_2esteamclient_2eproto[0];
}

const ::google::protobuf::ServiceDescriptor* Parties::GetDescriptor() {
  return descriptor();
}

void Parties::JoinParty(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CParties_JoinParty_Request*,
                         ::proto::steam::CParties_JoinParty_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method JoinParty() not implemented.");
  done->Run();
}

void Parties::CreateBeacon(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CParties_CreateBeacon_Request*,
                         ::proto::steam::CParties_CreateBeacon_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CreateBeacon() not implemented.");
  done->Run();
}

void Parties::OnReservationCompleted(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CParties_OnReservationCompleted_Request*,
                         ::proto::steam::CParties_OnReservationCompleted_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method OnReservationCompleted() not implemented.");
  done->Run();
}

void Parties::CancelReservation(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CParties_CancelReservation_Request*,
                         ::proto::steam::CParties_CancelReservation_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CancelReservation() not implemented.");
  done->Run();
}

void Parties::ChangeNumOpenSlots(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CParties_ChangeNumOpenSlots_Request*,
                         ::proto::steam::CParties_ChangeNumOpenSlots_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ChangeNumOpenSlots() not implemented.");
  done->Run();
}

void Parties::DestroyBeacon(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CParties_DestroyBeacon_Request*,
                         ::proto::steam::CParties_DestroyBeacon_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method DestroyBeacon() not implemented.");
  done->Run();
}

void Parties::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5fparties_2esteamclient_2eproto[0]);
  switch(method->index()) {
    case 0:
      JoinParty(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CParties_JoinParty_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CParties_JoinParty_Response*>(response),
             done);
      break;
    case 1:
      CreateBeacon(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CParties_CreateBeacon_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CParties_CreateBeacon_Response*>(response),
             done);
      break;
    case 2:
      OnReservationCompleted(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CParties_OnReservationCompleted_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CParties_OnReservationCompleted_Response*>(response),
             done);
      break;
    case 3:
      CancelReservation(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CParties_CancelReservation_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CParties_CancelReservation_Response*>(response),
             done);
      break;
    case 4:
      ChangeNumOpenSlots(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CParties_ChangeNumOpenSlots_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CParties_ChangeNumOpenSlots_Response*>(response),
             done);
      break;
    case 5:
      DestroyBeacon(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CParties_DestroyBeacon_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CParties_DestroyBeacon_Response*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& Parties::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CParties_JoinParty_Request::default_instance();
    case 1:
      return ::proto::steam::CParties_CreateBeacon_Request::default_instance();
    case 2:
      return ::proto::steam::CParties_OnReservationCompleted_Request::default_instance();
    case 3:
      return ::proto::steam::CParties_CancelReservation_Request::default_instance();
    case 4:
      return ::proto::steam::CParties_ChangeNumOpenSlots_Request::default_instance();
    case 5:
      return ::proto::steam::CParties_DestroyBeacon_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& Parties::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CParties_JoinParty_Response::default_instance();
    case 1:
      return ::proto::steam::CParties_CreateBeacon_Response::default_instance();
    case 2:
      return ::proto::steam::CParties_OnReservationCompleted_Response::default_instance();
    case 3:
      return ::proto::steam::CParties_CancelReservation_Response::default_instance();
    case 4:
      return ::proto::steam::CParties_ChangeNumOpenSlots_Response::default_instance();
    case 5:
      return ::proto::steam::CParties_DestroyBeacon_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

Parties_Stub::Parties_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
Parties_Stub::Parties_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
Parties_Stub::~Parties_Stub() {
  if (owns_channel_) delete channel_;
}

void Parties_Stub::JoinParty(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CParties_JoinParty_Request* request,
                              ::proto::steam::CParties_JoinParty_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void Parties_Stub::CreateBeacon(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CParties_CreateBeacon_Request* request,
                              ::proto::steam::CParties_CreateBeacon_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void Parties_Stub::OnReservationCompleted(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CParties_OnReservationCompleted_Request* request,
                              ::proto::steam::CParties_OnReservationCompleted_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void Parties_Stub::CancelReservation(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CParties_CancelReservation_Request* request,
                              ::proto::steam::CParties_CancelReservation_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void Parties_Stub::ChangeNumOpenSlots(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CParties_ChangeNumOpenSlots_Request* request,
                              ::proto::steam::CParties_ChangeNumOpenSlots_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void Parties_Stub::DestroyBeacon(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CParties_DestroyBeacon_Request* request,
                              ::proto::steam::CParties_DestroyBeacon_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace steam
}  // namespace proto
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::proto::steam::CParties_JoinParty_Request* Arena::CreateMaybeMessage< ::proto::steam::CParties_JoinParty_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CParties_JoinParty_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CParties_JoinParty_Response* Arena::CreateMaybeMessage< ::proto::steam::CParties_JoinParty_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CParties_JoinParty_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CParties_BeaconLocation* Arena::CreateMaybeMessage< ::proto::steam::CParties_BeaconLocation >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CParties_BeaconLocation >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CParties_CreateBeacon_Request* Arena::CreateMaybeMessage< ::proto::steam::CParties_CreateBeacon_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CParties_CreateBeacon_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CParties_CreateBeacon_Response* Arena::CreateMaybeMessage< ::proto::steam::CParties_CreateBeacon_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CParties_CreateBeacon_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CParties_OnReservationCompleted_Request* Arena::CreateMaybeMessage< ::proto::steam::CParties_OnReservationCompleted_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CParties_OnReservationCompleted_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CParties_OnReservationCompleted_Response* Arena::CreateMaybeMessage< ::proto::steam::CParties_OnReservationCompleted_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CParties_OnReservationCompleted_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CParties_CancelReservation_Request* Arena::CreateMaybeMessage< ::proto::steam::CParties_CancelReservation_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CParties_CancelReservation_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CParties_CancelReservation_Response* Arena::CreateMaybeMessage< ::proto::steam::CParties_CancelReservation_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CParties_CancelReservation_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CParties_ChangeNumOpenSlots_Request* Arena::CreateMaybeMessage< ::proto::steam::CParties_ChangeNumOpenSlots_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CParties_ChangeNumOpenSlots_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CParties_ChangeNumOpenSlots_Response* Arena::CreateMaybeMessage< ::proto::steam::CParties_ChangeNumOpenSlots_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CParties_ChangeNumOpenSlots_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CParties_DestroyBeacon_Request* Arena::CreateMaybeMessage< ::proto::steam::CParties_DestroyBeacon_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CParties_DestroyBeacon_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CParties_DestroyBeacon_Response* Arena::CreateMaybeMessage< ::proto::steam::CParties_DestroyBeacon_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CParties_DestroyBeacon_Response >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
