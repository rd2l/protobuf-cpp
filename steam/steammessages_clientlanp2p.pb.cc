// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_clientlanp2p.proto

#include "steammessages_clientlanp2p.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fclientlanp2p_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientLANP2PRequestChunksResponse_ChunkData_steammessages_5fclientlanp2p_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fclientlanp2p_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientLANP2PRequestChunks_ChunkKey_steammessages_5fclientlanp2p_2eproto;
namespace proto {
namespace steam {
class CMsgClientLANP2PRequestChunks_ChunkKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientLANP2PRequestChunks_ChunkKey> _instance;
} _CMsgClientLANP2PRequestChunks_ChunkKey_default_instance_;
class CMsgClientLANP2PRequestChunksDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientLANP2PRequestChunks> _instance;
} _CMsgClientLANP2PRequestChunks_default_instance_;
class CMsgClientLANP2PRequestChunksResponse_ChunkDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientLANP2PRequestChunksResponse_ChunkData> _instance;
} _CMsgClientLANP2PRequestChunksResponse_ChunkData_default_instance_;
class CMsgClientLANP2PRequestChunksResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientLANP2PRequestChunksResponse> _instance;
} _CMsgClientLANP2PRequestChunksResponse_default_instance_;
}  // namespace steam
}  // namespace proto
static void InitDefaultsCMsgClientLANP2PRequestChunks_ChunkKey_steammessages_5fclientlanp2p_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientLANP2PRequestChunks_ChunkKey_default_instance_;
    new (ptr) ::proto::steam::CMsgClientLANP2PRequestChunks_ChunkKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientLANP2PRequestChunks_ChunkKey::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientLANP2PRequestChunks_ChunkKey_steammessages_5fclientlanp2p_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientLANP2PRequestChunks_ChunkKey_steammessages_5fclientlanp2p_2eproto}, {}};

static void InitDefaultsCMsgClientLANP2PRequestChunks_steammessages_5fclientlanp2p_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientLANP2PRequestChunks_default_instance_;
    new (ptr) ::proto::steam::CMsgClientLANP2PRequestChunks();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientLANP2PRequestChunks::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgClientLANP2PRequestChunks_steammessages_5fclientlanp2p_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgClientLANP2PRequestChunks_steammessages_5fclientlanp2p_2eproto}, {
      &scc_info_CMsgClientLANP2PRequestChunks_ChunkKey_steammessages_5fclientlanp2p_2eproto.base,}};

static void InitDefaultsCMsgClientLANP2PRequestChunksResponse_ChunkData_steammessages_5fclientlanp2p_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientLANP2PRequestChunksResponse_ChunkData_default_instance_;
    new (ptr) ::proto::steam::CMsgClientLANP2PRequestChunksResponse_ChunkData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientLANP2PRequestChunksResponse_ChunkData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientLANP2PRequestChunksResponse_ChunkData_steammessages_5fclientlanp2p_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientLANP2PRequestChunksResponse_ChunkData_steammessages_5fclientlanp2p_2eproto}, {}};

static void InitDefaultsCMsgClientLANP2PRequestChunksResponse_steammessages_5fclientlanp2p_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientLANP2PRequestChunksResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgClientLANP2PRequestChunksResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientLANP2PRequestChunksResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgClientLANP2PRequestChunksResponse_steammessages_5fclientlanp2p_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgClientLANP2PRequestChunksResponse_steammessages_5fclientlanp2p_2eproto}, {
      &scc_info_CMsgClientLANP2PRequestChunksResponse_ChunkData_steammessages_5fclientlanp2p_2eproto.base,}};

void InitDefaults_steammessages_5fclientlanp2p_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientLANP2PRequestChunks_ChunkKey_steammessages_5fclientlanp2p_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientLANP2PRequestChunks_steammessages_5fclientlanp2p_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientLANP2PRequestChunksResponse_ChunkData_steammessages_5fclientlanp2p_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientLANP2PRequestChunksResponse_steammessages_5fclientlanp2p_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_steammessages_5fclientlanp2p_2eproto[4];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_steammessages_5fclientlanp2p_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_steammessages_5fclientlanp2p_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_steammessages_5fclientlanp2p_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLANP2PRequestChunks_ChunkKey, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLANP2PRequestChunks_ChunkKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLANP2PRequestChunks_ChunkKey, depot_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLANP2PRequestChunks_ChunkKey, sha_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLANP2PRequestChunks, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLANP2PRequestChunks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLANP2PRequestChunks, chunk_keys_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLANP2PRequestChunksResponse_ChunkData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLANP2PRequestChunksResponse_ChunkData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLANP2PRequestChunksResponse_ChunkData, result_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLANP2PRequestChunksResponse_ChunkData, depot_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLANP2PRequestChunksResponse_ChunkData, sha_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLANP2PRequestChunksResponse_ChunkData, chunk_data_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLANP2PRequestChunksResponse_ChunkData, encrypted_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLANP2PRequestChunksResponse_ChunkData, compressed_),
  2,
  3,
  0,
  1,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLANP2PRequestChunksResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLANP2PRequestChunksResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLANP2PRequestChunksResponse, chunk_responses_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::proto::steam::CMsgClientLANP2PRequestChunks_ChunkKey)},
  { 9, 15, sizeof(::proto::steam::CMsgClientLANP2PRequestChunks)},
  { 16, 27, sizeof(::proto::steam::CMsgClientLANP2PRequestChunksResponse_ChunkData)},
  { 33, 39, sizeof(::proto::steam::CMsgClientLANP2PRequestChunksResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientLANP2PRequestChunks_ChunkKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientLANP2PRequestChunks_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientLANP2PRequestChunksResponse_ChunkData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientLANP2PRequestChunksResponse_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_steammessages_5fclientlanp2p_2eproto = {
  {}, AddDescriptors_steammessages_5fclientlanp2p_2eproto, "steammessages_clientlanp2p.proto", schemas,
  file_default_instances, TableStruct_steammessages_5fclientlanp2p_2eproto::offsets,
  file_level_metadata_steammessages_5fclientlanp2p_2eproto, 4, file_level_enum_descriptors_steammessages_5fclientlanp2p_2eproto, file_level_service_descriptors_steammessages_5fclientlanp2p_2eproto,
};

const char descriptor_table_protodef_steammessages_5fclientlanp2p_2eproto[] =
  "\n steammessages_clientlanp2p.proto\022\013prot"
  "o.steam\032\030steammessages_base.proto\"\223\001\n\035CM"
  "sgClientLANP2PRequestChunks\022G\n\nchunk_key"
  "s\030\001 \003(\01323.proto.steam.CMsgClientLANP2PRe"
  "questChunks.ChunkKey\032)\n\010ChunkKey\022\020\n\010depo"
  "t_id\030\001 \001(\r\022\013\n\003sha\030\002 \001(\014\"\365\001\n%CMsgClientLA"
  "NP2PRequestChunksResponse\022U\n\017chunk_respo"
  "nses\030\001 \003(\0132<.proto.steam.CMsgClientLANP2"
  "PRequestChunksResponse.ChunkData\032u\n\tChun"
  "kData\022\016\n\006result\030\001 \001(\r\022\020\n\010depot_id\030\002 \001(\r\022"
  "\013\n\003sha\030\003 \001(\014\022\022\n\nchunk_data\030\004 \001(\014\022\021\n\tencr"
  "ypted\030\005 \001(\010\022\022\n\ncompressed\030\006 \001(\010B\005H\001\200\001\000"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_steammessages_5fclientlanp2p_2eproto = {
  false, InitDefaults_steammessages_5fclientlanp2p_2eproto, 
  descriptor_table_protodef_steammessages_5fclientlanp2p_2eproto,
  "steammessages_clientlanp2p.proto", &assign_descriptors_table_steammessages_5fclientlanp2p_2eproto, 478,
};

void AddDescriptors_steammessages_5fclientlanp2p_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_steammessages_5fbase_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_steammessages_5fclientlanp2p_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_steammessages_5fclientlanp2p_2eproto = []() { AddDescriptors_steammessages_5fclientlanp2p_2eproto(); return true; }();
namespace proto {
namespace steam {

// ===================================================================

void CMsgClientLANP2PRequestChunks_ChunkKey::InitAsDefaultInstance() {
}
class CMsgClientLANP2PRequestChunks_ChunkKey::HasBitSetters {
 public:
  static void set_has_depot_id(CMsgClientLANP2PRequestChunks_ChunkKey* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_sha(CMsgClientLANP2PRequestChunks_ChunkKey* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientLANP2PRequestChunks_ChunkKey::kDepotIdFieldNumber;
const int CMsgClientLANP2PRequestChunks_ChunkKey::kShaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientLANP2PRequestChunks_ChunkKey::CMsgClientLANP2PRequestChunks_ChunkKey()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientLANP2PRequestChunks.ChunkKey)
}
CMsgClientLANP2PRequestChunks_ChunkKey::CMsgClientLANP2PRequestChunks_ChunkKey(const CMsgClientLANP2PRequestChunks_ChunkKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sha()) {
    sha_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_);
  }
  depot_id_ = from.depot_id_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientLANP2PRequestChunks.ChunkKey)
}

void CMsgClientLANP2PRequestChunks_ChunkKey::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientLANP2PRequestChunks_ChunkKey_steammessages_5fclientlanp2p_2eproto.base);
  sha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  depot_id_ = 0u;
}

CMsgClientLANP2PRequestChunks_ChunkKey::~CMsgClientLANP2PRequestChunks_ChunkKey() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientLANP2PRequestChunks.ChunkKey)
  SharedDtor();
}

void CMsgClientLANP2PRequestChunks_ChunkKey::SharedDtor() {
  sha_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientLANP2PRequestChunks_ChunkKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientLANP2PRequestChunks_ChunkKey& CMsgClientLANP2PRequestChunks_ChunkKey::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientLANP2PRequestChunks_ChunkKey_steammessages_5fclientlanp2p_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientLANP2PRequestChunks_ChunkKey::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientLANP2PRequestChunks.ChunkKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    sha_.ClearNonDefaultToEmptyNoArena();
  }
  depot_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientLANP2PRequestChunks_ChunkKey::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientLANP2PRequestChunks_ChunkKey*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 depot_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_depot_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes sha = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_sha();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientLANP2PRequestChunks_ChunkKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientLANP2PRequestChunks.ChunkKey)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 depot_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_depot_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &depot_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sha = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientLANP2PRequestChunks.ChunkKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientLANP2PRequestChunks.ChunkKey)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientLANP2PRequestChunks_ChunkKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientLANP2PRequestChunks.ChunkKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 depot_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->depot_id(), output);
  }

  // optional bytes sha = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->sha(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientLANP2PRequestChunks.ChunkKey)
}

::google::protobuf::uint8* CMsgClientLANP2PRequestChunks_ChunkKey::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientLANP2PRequestChunks.ChunkKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 depot_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->depot_id(), target);
  }

  // optional bytes sha = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->sha(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientLANP2PRequestChunks.ChunkKey)
  return target;
}

size_t CMsgClientLANP2PRequestChunks_ChunkKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientLANP2PRequestChunks.ChunkKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes sha = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha());
    }

    // optional uint32 depot_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->depot_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientLANP2PRequestChunks_ChunkKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientLANP2PRequestChunks.ChunkKey)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientLANP2PRequestChunks_ChunkKey* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientLANP2PRequestChunks_ChunkKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientLANP2PRequestChunks.ChunkKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientLANP2PRequestChunks.ChunkKey)
    MergeFrom(*source);
  }
}

void CMsgClientLANP2PRequestChunks_ChunkKey::MergeFrom(const CMsgClientLANP2PRequestChunks_ChunkKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientLANP2PRequestChunks.ChunkKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      sha_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_);
    }
    if (cached_has_bits & 0x00000002u) {
      depot_id_ = from.depot_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientLANP2PRequestChunks_ChunkKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientLANP2PRequestChunks.ChunkKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientLANP2PRequestChunks_ChunkKey::CopyFrom(const CMsgClientLANP2PRequestChunks_ChunkKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientLANP2PRequestChunks.ChunkKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLANP2PRequestChunks_ChunkKey::IsInitialized() const {
  return true;
}

void CMsgClientLANP2PRequestChunks_ChunkKey::Swap(CMsgClientLANP2PRequestChunks_ChunkKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientLANP2PRequestChunks_ChunkKey::InternalSwap(CMsgClientLANP2PRequestChunks_ChunkKey* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sha_.Swap(&other->sha_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(depot_id_, other->depot_id_);
}

::google::protobuf::Metadata CMsgClientLANP2PRequestChunks_ChunkKey::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientlanp2p_2eproto);
  return ::file_level_metadata_steammessages_5fclientlanp2p_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientLANP2PRequestChunks::InitAsDefaultInstance() {
}
class CMsgClientLANP2PRequestChunks::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientLANP2PRequestChunks::kChunkKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientLANP2PRequestChunks::CMsgClientLANP2PRequestChunks()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientLANP2PRequestChunks)
}
CMsgClientLANP2PRequestChunks::CMsgClientLANP2PRequestChunks(const CMsgClientLANP2PRequestChunks& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      chunk_keys_(from.chunk_keys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientLANP2PRequestChunks)
}

void CMsgClientLANP2PRequestChunks::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientLANP2PRequestChunks_steammessages_5fclientlanp2p_2eproto.base);
}

CMsgClientLANP2PRequestChunks::~CMsgClientLANP2PRequestChunks() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientLANP2PRequestChunks)
  SharedDtor();
}

void CMsgClientLANP2PRequestChunks::SharedDtor() {
}

void CMsgClientLANP2PRequestChunks::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientLANP2PRequestChunks& CMsgClientLANP2PRequestChunks::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientLANP2PRequestChunks_steammessages_5fclientlanp2p_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientLANP2PRequestChunks::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientLANP2PRequestChunks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chunk_keys_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientLANP2PRequestChunks::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientLANP2PRequestChunks*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.steam.CMsgClientLANP2PRequestChunks.ChunkKey chunk_keys = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgClientLANP2PRequestChunks_ChunkKey::_InternalParse;
          object = msg->add_chunk_keys();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientLANP2PRequestChunks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientLANP2PRequestChunks)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CMsgClientLANP2PRequestChunks.ChunkKey chunk_keys = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_chunk_keys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientLANP2PRequestChunks)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientLANP2PRequestChunks)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientLANP2PRequestChunks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientLANP2PRequestChunks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientLANP2PRequestChunks.ChunkKey chunk_keys = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chunk_keys_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->chunk_keys(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientLANP2PRequestChunks)
}

::google::protobuf::uint8* CMsgClientLANP2PRequestChunks::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientLANP2PRequestChunks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientLANP2PRequestChunks.ChunkKey chunk_keys = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chunk_keys_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->chunk_keys(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientLANP2PRequestChunks)
  return target;
}

size_t CMsgClientLANP2PRequestChunks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientLANP2PRequestChunks)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientLANP2PRequestChunks.ChunkKey chunk_keys = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->chunk_keys_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->chunk_keys(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientLANP2PRequestChunks::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientLANP2PRequestChunks)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientLANP2PRequestChunks* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientLANP2PRequestChunks>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientLANP2PRequestChunks)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientLANP2PRequestChunks)
    MergeFrom(*source);
  }
}

void CMsgClientLANP2PRequestChunks::MergeFrom(const CMsgClientLANP2PRequestChunks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientLANP2PRequestChunks)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chunk_keys_.MergeFrom(from.chunk_keys_);
}

void CMsgClientLANP2PRequestChunks::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientLANP2PRequestChunks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientLANP2PRequestChunks::CopyFrom(const CMsgClientLANP2PRequestChunks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientLANP2PRequestChunks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLANP2PRequestChunks::IsInitialized() const {
  return true;
}

void CMsgClientLANP2PRequestChunks::Swap(CMsgClientLANP2PRequestChunks* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientLANP2PRequestChunks::InternalSwap(CMsgClientLANP2PRequestChunks* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&chunk_keys_)->InternalSwap(CastToBase(&other->chunk_keys_));
}

::google::protobuf::Metadata CMsgClientLANP2PRequestChunks::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientlanp2p_2eproto);
  return ::file_level_metadata_steammessages_5fclientlanp2p_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientLANP2PRequestChunksResponse_ChunkData::InitAsDefaultInstance() {
}
class CMsgClientLANP2PRequestChunksResponse_ChunkData::HasBitSetters {
 public:
  static void set_has_result(CMsgClientLANP2PRequestChunksResponse_ChunkData* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_depot_id(CMsgClientLANP2PRequestChunksResponse_ChunkData* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_sha(CMsgClientLANP2PRequestChunksResponse_ChunkData* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_chunk_data(CMsgClientLANP2PRequestChunksResponse_ChunkData* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_encrypted(CMsgClientLANP2PRequestChunksResponse_ChunkData* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_compressed(CMsgClientLANP2PRequestChunksResponse_ChunkData* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientLANP2PRequestChunksResponse_ChunkData::kResultFieldNumber;
const int CMsgClientLANP2PRequestChunksResponse_ChunkData::kDepotIdFieldNumber;
const int CMsgClientLANP2PRequestChunksResponse_ChunkData::kShaFieldNumber;
const int CMsgClientLANP2PRequestChunksResponse_ChunkData::kChunkDataFieldNumber;
const int CMsgClientLANP2PRequestChunksResponse_ChunkData::kEncryptedFieldNumber;
const int CMsgClientLANP2PRequestChunksResponse_ChunkData::kCompressedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientLANP2PRequestChunksResponse_ChunkData::CMsgClientLANP2PRequestChunksResponse_ChunkData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData)
}
CMsgClientLANP2PRequestChunksResponse_ChunkData::CMsgClientLANP2PRequestChunksResponse_ChunkData(const CMsgClientLANP2PRequestChunksResponse_ChunkData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sha()) {
    sha_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_);
  }
  chunk_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_chunk_data()) {
    chunk_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chunk_data_);
  }
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&compressed_) -
    reinterpret_cast<char*>(&result_)) + sizeof(compressed_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData)
}

void CMsgClientLANP2PRequestChunksResponse_ChunkData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientLANP2PRequestChunksResponse_ChunkData_steammessages_5fclientlanp2p_2eproto.base);
  sha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chunk_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compressed_) -
      reinterpret_cast<char*>(&result_)) + sizeof(compressed_));
}

CMsgClientLANP2PRequestChunksResponse_ChunkData::~CMsgClientLANP2PRequestChunksResponse_ChunkData() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData)
  SharedDtor();
}

void CMsgClientLANP2PRequestChunksResponse_ChunkData::SharedDtor() {
  sha_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chunk_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientLANP2PRequestChunksResponse_ChunkData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientLANP2PRequestChunksResponse_ChunkData& CMsgClientLANP2PRequestChunksResponse_ChunkData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientLANP2PRequestChunksResponse_ChunkData_steammessages_5fclientlanp2p_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientLANP2PRequestChunksResponse_ChunkData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      sha_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      chunk_data_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&compressed_) -
        reinterpret_cast<char*>(&result_)) + sizeof(compressed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientLANP2PRequestChunksResponse_ChunkData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientLANP2PRequestChunksResponse_ChunkData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 result = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_result(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 depot_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_depot_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes sha = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_sha();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bytes chunk_data = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_chunk_data();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool encrypted = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_encrypted(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool compressed = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_compressed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientLANP2PRequestChunksResponse_ChunkData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_result(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 depot_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_depot_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &depot_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sha = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes chunk_data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_chunk_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool encrypted = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_encrypted(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool compressed = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_compressed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &compressed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientLANP2PRequestChunksResponse_ChunkData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // optional uint32 depot_id = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->depot_id(), output);
  }

  // optional bytes sha = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->sha(), output);
  }

  // optional bytes chunk_data = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->chunk_data(), output);
  }

  // optional bool encrypted = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->encrypted(), output);
  }

  // optional bool compressed = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->compressed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData)
}

::google::protobuf::uint8* CMsgClientLANP2PRequestChunksResponse_ChunkData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // optional uint32 depot_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->depot_id(), target);
  }

  // optional bytes sha = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->sha(), target);
  }

  // optional bytes chunk_data = 4;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->chunk_data(), target);
  }

  // optional bool encrypted = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->encrypted(), target);
  }

  // optional bool compressed = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->compressed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData)
  return target;
}

size_t CMsgClientLANP2PRequestChunksResponse_ChunkData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bytes sha = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha());
    }

    // optional bytes chunk_data = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->chunk_data());
    }

    // optional uint32 result = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional uint32 depot_id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->depot_id());
    }

    // optional bool encrypted = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool compressed = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientLANP2PRequestChunksResponse_ChunkData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientLANP2PRequestChunksResponse_ChunkData* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientLANP2PRequestChunksResponse_ChunkData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData)
    MergeFrom(*source);
  }
}

void CMsgClientLANP2PRequestChunksResponse_ChunkData::MergeFrom(const CMsgClientLANP2PRequestChunksResponse_ChunkData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      sha_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      chunk_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chunk_data_);
    }
    if (cached_has_bits & 0x00000004u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000008u) {
      depot_id_ = from.depot_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      encrypted_ = from.encrypted_;
    }
    if (cached_has_bits & 0x00000020u) {
      compressed_ = from.compressed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientLANP2PRequestChunksResponse_ChunkData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientLANP2PRequestChunksResponse_ChunkData::CopyFrom(const CMsgClientLANP2PRequestChunksResponse_ChunkData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLANP2PRequestChunksResponse_ChunkData::IsInitialized() const {
  return true;
}

void CMsgClientLANP2PRequestChunksResponse_ChunkData::Swap(CMsgClientLANP2PRequestChunksResponse_ChunkData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientLANP2PRequestChunksResponse_ChunkData::InternalSwap(CMsgClientLANP2PRequestChunksResponse_ChunkData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sha_.Swap(&other->sha_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  chunk_data_.Swap(&other->chunk_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(result_, other->result_);
  swap(depot_id_, other->depot_id_);
  swap(encrypted_, other->encrypted_);
  swap(compressed_, other->compressed_);
}

::google::protobuf::Metadata CMsgClientLANP2PRequestChunksResponse_ChunkData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientlanp2p_2eproto);
  return ::file_level_metadata_steammessages_5fclientlanp2p_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientLANP2PRequestChunksResponse::InitAsDefaultInstance() {
}
class CMsgClientLANP2PRequestChunksResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientLANP2PRequestChunksResponse::kChunkResponsesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientLANP2PRequestChunksResponse::CMsgClientLANP2PRequestChunksResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientLANP2PRequestChunksResponse)
}
CMsgClientLANP2PRequestChunksResponse::CMsgClientLANP2PRequestChunksResponse(const CMsgClientLANP2PRequestChunksResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      chunk_responses_(from.chunk_responses_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientLANP2PRequestChunksResponse)
}

void CMsgClientLANP2PRequestChunksResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientLANP2PRequestChunksResponse_steammessages_5fclientlanp2p_2eproto.base);
}

CMsgClientLANP2PRequestChunksResponse::~CMsgClientLANP2PRequestChunksResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientLANP2PRequestChunksResponse)
  SharedDtor();
}

void CMsgClientLANP2PRequestChunksResponse::SharedDtor() {
}

void CMsgClientLANP2PRequestChunksResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientLANP2PRequestChunksResponse& CMsgClientLANP2PRequestChunksResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientLANP2PRequestChunksResponse_steammessages_5fclientlanp2p_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientLANP2PRequestChunksResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientLANP2PRequestChunksResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chunk_responses_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientLANP2PRequestChunksResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientLANP2PRequestChunksResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData chunk_responses = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgClientLANP2PRequestChunksResponse_ChunkData::_InternalParse;
          object = msg->add_chunk_responses();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientLANP2PRequestChunksResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientLANP2PRequestChunksResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData chunk_responses = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_chunk_responses()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientLANP2PRequestChunksResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientLANP2PRequestChunksResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientLANP2PRequestChunksResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientLANP2PRequestChunksResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData chunk_responses = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chunk_responses_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->chunk_responses(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientLANP2PRequestChunksResponse)
}

::google::protobuf::uint8* CMsgClientLANP2PRequestChunksResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientLANP2PRequestChunksResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData chunk_responses = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chunk_responses_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->chunk_responses(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientLANP2PRequestChunksResponse)
  return target;
}

size_t CMsgClientLANP2PRequestChunksResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientLANP2PRequestChunksResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData chunk_responses = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->chunk_responses_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->chunk_responses(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientLANP2PRequestChunksResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientLANP2PRequestChunksResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientLANP2PRequestChunksResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientLANP2PRequestChunksResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientLANP2PRequestChunksResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientLANP2PRequestChunksResponse)
    MergeFrom(*source);
  }
}

void CMsgClientLANP2PRequestChunksResponse::MergeFrom(const CMsgClientLANP2PRequestChunksResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientLANP2PRequestChunksResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chunk_responses_.MergeFrom(from.chunk_responses_);
}

void CMsgClientLANP2PRequestChunksResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientLANP2PRequestChunksResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientLANP2PRequestChunksResponse::CopyFrom(const CMsgClientLANP2PRequestChunksResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientLANP2PRequestChunksResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLANP2PRequestChunksResponse::IsInitialized() const {
  return true;
}

void CMsgClientLANP2PRequestChunksResponse::Swap(CMsgClientLANP2PRequestChunksResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientLANP2PRequestChunksResponse::InternalSwap(CMsgClientLANP2PRequestChunksResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&chunk_responses_)->InternalSwap(CastToBase(&other->chunk_responses_));
}

::google::protobuf::Metadata CMsgClientLANP2PRequestChunksResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientlanp2p_2eproto);
  return ::file_level_metadata_steammessages_5fclientlanp2p_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace steam
}  // namespace proto
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientLANP2PRequestChunks_ChunkKey* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientLANP2PRequestChunks_ChunkKey >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientLANP2PRequestChunks_ChunkKey >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientLANP2PRequestChunks* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientLANP2PRequestChunks >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientLANP2PRequestChunks >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientLANP2PRequestChunksResponse_ChunkData* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientLANP2PRequestChunksResponse_ChunkData >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientLANP2PRequestChunksResponse_ChunkData >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientLANP2PRequestChunksResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientLANP2PRequestChunksResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientLANP2PRequestChunksResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
