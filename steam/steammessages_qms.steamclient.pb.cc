// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_qms.steamclient.proto

#include "steammessages_qms.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fqms_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GameSearchParam_steammessages_5fqms_2esteamclient_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fqms_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PlayerResult_steammessages_5fqms_2esteamclient_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fqms_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PlayerFound_steammessages_5fqms_2esteamclient_2eproto;
namespace proto {
namespace steam {
class GameSearchParamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameSearchParam> _instance;
} _GameSearchParam_default_instance_;
class CQueuedMatchmaking_SearchForGame_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CQueuedMatchmaking_SearchForGame_Request> _instance;
} _CQueuedMatchmaking_SearchForGame_Request_default_instance_;
class CQueuedMatchmaking_SearchForGame_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CQueuedMatchmaking_SearchForGame_Response> _instance;
} _CQueuedMatchmaking_SearchForGame_Response_default_instance_;
class CQueuedMatchmakingGameHost_SearchForPlayers_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CQueuedMatchmakingGameHost_SearchForPlayers_Request> _instance;
} _CQueuedMatchmakingGameHost_SearchForPlayers_Request_default_instance_;
class PlayerFoundDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerFound> _instance;
} _PlayerFound_default_instance_;
class CQueuedMatchmakingGameHost_SearchForPlayers_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CQueuedMatchmakingGameHost_SearchForPlayers_Response> _instance;
} _CQueuedMatchmakingGameHost_SearchForPlayers_Response_default_instance_;
class PlayerResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerResult> _instance;
} _PlayerResult_default_instance_;
class CQueuedMatchmakingGameHost_SubmitPlayerResult_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CQueuedMatchmakingGameHost_SubmitPlayerResult_Request> _instance;
} _CQueuedMatchmakingGameHost_SubmitPlayerResult_Request_default_instance_;
class CQueuedMatchmakingGameHost_SubmitPlayerResult_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CQueuedMatchmakingGameHost_SubmitPlayerResult_Response> _instance;
} _CQueuedMatchmakingGameHost_SubmitPlayerResult_Response_default_instance_;
class CQueuedMatchmakingGameHost_EndGame_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CQueuedMatchmakingGameHost_EndGame_Request> _instance;
} _CQueuedMatchmakingGameHost_EndGame_Request_default_instance_;
class CQueuedMatchmakingGameHost_EndGame_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CQueuedMatchmakingGameHost_EndGame_Response> _instance;
} _CQueuedMatchmakingGameHost_EndGame_Response_default_instance_;
}  // namespace steam
}  // namespace proto
static void InitDefaultsGameSearchParam_steammessages_5fqms_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_GameSearchParam_default_instance_;
    new (ptr) ::proto::steam::GameSearchParam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::GameSearchParam::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameSearchParam_steammessages_5fqms_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameSearchParam_steammessages_5fqms_2esteamclient_2eproto}, {}};

static void InitDefaultsCQueuedMatchmaking_SearchForGame_Request_steammessages_5fqms_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CQueuedMatchmaking_SearchForGame_Request_default_instance_;
    new (ptr) ::proto::steam::CQueuedMatchmaking_SearchForGame_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CQueuedMatchmaking_SearchForGame_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CQueuedMatchmaking_SearchForGame_Request_steammessages_5fqms_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCQueuedMatchmaking_SearchForGame_Request_steammessages_5fqms_2esteamclient_2eproto}, {
      &scc_info_GameSearchParam_steammessages_5fqms_2esteamclient_2eproto.base,}};

static void InitDefaultsCQueuedMatchmaking_SearchForGame_Response_steammessages_5fqms_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CQueuedMatchmaking_SearchForGame_Response_default_instance_;
    new (ptr) ::proto::steam::CQueuedMatchmaking_SearchForGame_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CQueuedMatchmaking_SearchForGame_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CQueuedMatchmaking_SearchForGame_Response_steammessages_5fqms_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCQueuedMatchmaking_SearchForGame_Response_steammessages_5fqms_2esteamclient_2eproto}, {}};

static void InitDefaultsCQueuedMatchmakingGameHost_SearchForPlayers_Request_steammessages_5fqms_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CQueuedMatchmakingGameHost_SearchForPlayers_Request_default_instance_;
    new (ptr) ::proto::steam::CQueuedMatchmakingGameHost_SearchForPlayers_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CQueuedMatchmakingGameHost_SearchForPlayers_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CQueuedMatchmakingGameHost_SearchForPlayers_Request_steammessages_5fqms_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCQueuedMatchmakingGameHost_SearchForPlayers_Request_steammessages_5fqms_2esteamclient_2eproto}, {
      &scc_info_GameSearchParam_steammessages_5fqms_2esteamclient_2eproto.base,}};

static void InitDefaultsPlayerFound_steammessages_5fqms_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_PlayerFound_default_instance_;
    new (ptr) ::proto::steam::PlayerFound();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::PlayerFound::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PlayerFound_steammessages_5fqms_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPlayerFound_steammessages_5fqms_2esteamclient_2eproto}, {
      &scc_info_GameSearchParam_steammessages_5fqms_2esteamclient_2eproto.base,}};

static void InitDefaultsCQueuedMatchmakingGameHost_SearchForPlayers_Response_steammessages_5fqms_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CQueuedMatchmakingGameHost_SearchForPlayers_Response_default_instance_;
    new (ptr) ::proto::steam::CQueuedMatchmakingGameHost_SearchForPlayers_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CQueuedMatchmakingGameHost_SearchForPlayers_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CQueuedMatchmakingGameHost_SearchForPlayers_Response_steammessages_5fqms_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCQueuedMatchmakingGameHost_SearchForPlayers_Response_steammessages_5fqms_2esteamclient_2eproto}, {
      &scc_info_PlayerFound_steammessages_5fqms_2esteamclient_2eproto.base,}};

static void InitDefaultsPlayerResult_steammessages_5fqms_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_PlayerResult_default_instance_;
    new (ptr) ::proto::steam::PlayerResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::PlayerResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayerResult_steammessages_5fqms_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerResult_steammessages_5fqms_2esteamclient_2eproto}, {}};

static void InitDefaultsCQueuedMatchmakingGameHost_SubmitPlayerResult_Request_steammessages_5fqms_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CQueuedMatchmakingGameHost_SubmitPlayerResult_Request_default_instance_;
    new (ptr) ::proto::steam::CQueuedMatchmakingGameHost_SubmitPlayerResult_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CQueuedMatchmakingGameHost_SubmitPlayerResult_Request_steammessages_5fqms_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCQueuedMatchmakingGameHost_SubmitPlayerResult_Request_steammessages_5fqms_2esteamclient_2eproto}, {
      &scc_info_PlayerResult_steammessages_5fqms_2esteamclient_2eproto.base,}};

static void InitDefaultsCQueuedMatchmakingGameHost_SubmitPlayerResult_Response_steammessages_5fqms_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CQueuedMatchmakingGameHost_SubmitPlayerResult_Response_default_instance_;
    new (ptr) ::proto::steam::CQueuedMatchmakingGameHost_SubmitPlayerResult_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CQueuedMatchmakingGameHost_SubmitPlayerResult_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CQueuedMatchmakingGameHost_SubmitPlayerResult_Response_steammessages_5fqms_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCQueuedMatchmakingGameHost_SubmitPlayerResult_Response_steammessages_5fqms_2esteamclient_2eproto}, {}};

static void InitDefaultsCQueuedMatchmakingGameHost_EndGame_Request_steammessages_5fqms_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CQueuedMatchmakingGameHost_EndGame_Request_default_instance_;
    new (ptr) ::proto::steam::CQueuedMatchmakingGameHost_EndGame_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CQueuedMatchmakingGameHost_EndGame_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CQueuedMatchmakingGameHost_EndGame_Request_steammessages_5fqms_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCQueuedMatchmakingGameHost_EndGame_Request_steammessages_5fqms_2esteamclient_2eproto}, {}};

static void InitDefaultsCQueuedMatchmakingGameHost_EndGame_Response_steammessages_5fqms_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CQueuedMatchmakingGameHost_EndGame_Response_default_instance_;
    new (ptr) ::proto::steam::CQueuedMatchmakingGameHost_EndGame_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CQueuedMatchmakingGameHost_EndGame_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CQueuedMatchmakingGameHost_EndGame_Response_steammessages_5fqms_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCQueuedMatchmakingGameHost_EndGame_Response_steammessages_5fqms_2esteamclient_2eproto}, {}};

void InitDefaults_steammessages_5fqms_2esteamclient_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_GameSearchParam_steammessages_5fqms_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CQueuedMatchmaking_SearchForGame_Request_steammessages_5fqms_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CQueuedMatchmaking_SearchForGame_Response_steammessages_5fqms_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CQueuedMatchmakingGameHost_SearchForPlayers_Request_steammessages_5fqms_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerFound_steammessages_5fqms_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CQueuedMatchmakingGameHost_SearchForPlayers_Response_steammessages_5fqms_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerResult_steammessages_5fqms_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CQueuedMatchmakingGameHost_SubmitPlayerResult_Request_steammessages_5fqms_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CQueuedMatchmakingGameHost_SubmitPlayerResult_Response_steammessages_5fqms_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CQueuedMatchmakingGameHost_EndGame_Request_steammessages_5fqms_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CQueuedMatchmakingGameHost_EndGame_Response_steammessages_5fqms_2esteamclient_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_steammessages_5fqms_2esteamclient_2eproto[11];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_steammessages_5fqms_2esteamclient_2eproto[2];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors_steammessages_5fqms_2esteamclient_2eproto[2];

const ::google::protobuf::uint32 TableStruct_steammessages_5fqms_2esteamclient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::proto::steam::GameSearchParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::GameSearchParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::GameSearchParam, key_name_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::GameSearchParam, value_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CQueuedMatchmaking_SearchForGame_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CQueuedMatchmaking_SearchForGame_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CQueuedMatchmaking_SearchForGame_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CQueuedMatchmaking_SearchForGame_Request, action_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CQueuedMatchmaking_SearchForGame_Request, params_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CQueuedMatchmaking_SearchForGame_Request, player_min_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CQueuedMatchmaking_SearchForGame_Request, player_max_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CQueuedMatchmaking_SearchForGame_Request, steamidlobby_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CQueuedMatchmaking_SearchForGame_Request, searchid_),
  0,
  1,
  ~0u,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CQueuedMatchmaking_SearchForGame_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CQueuedMatchmaking_SearchForGame_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CQueuedMatchmaking_SearchForGame_Response, gamesearchresult_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CQueuedMatchmaking_SearchForGame_Response, searchid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CQueuedMatchmaking_SearchForGame_Response, seconds_time_estimate_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CQueuedMatchmaking_SearchForGame_Response, poll_frequency_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CQueuedMatchmaking_SearchForGame_Response, count_searching_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CQueuedMatchmaking_SearchForGame_Response, players_in_match_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CQueuedMatchmaking_SearchForGame_Response, players_accepted_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CQueuedMatchmaking_SearchForGame_Response, connect_string_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CQueuedMatchmaking_SearchForGame_Response, steamidhost_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CQueuedMatchmaking_SearchForGame_Response, rtime_match_made_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CQueuedMatchmaking_SearchForGame_Response, rtime_now_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CQueuedMatchmaking_SearchForGame_Response, steamid_canceled_search_),
  2,
  1,
  3,
  4,
  5,
  6,
  7,
  0,
  8,
  9,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CQueuedMatchmakingGameHost_SearchForPlayers_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CQueuedMatchmakingGameHost_SearchForPlayers_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CQueuedMatchmakingGameHost_SearchForPlayers_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CQueuedMatchmakingGameHost_SearchForPlayers_Request, action_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CQueuedMatchmakingGameHost_SearchForPlayers_Request, params_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CQueuedMatchmakingGameHost_SearchForPlayers_Request, player_min_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CQueuedMatchmakingGameHost_SearchForPlayers_Request, player_max_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CQueuedMatchmakingGameHost_SearchForPlayers_Request, player_max_team_size_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CQueuedMatchmakingGameHost_SearchForPlayers_Request, connection_string_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CQueuedMatchmakingGameHost_SearchForPlayers_Request, searchid_),
  1,
  2,
  ~0u,
  3,
  4,
  6,
  0,
  5,
  PROTOBUF_FIELD_OFFSET(::proto::steam::PlayerFound, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::PlayerFound, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::PlayerFound, steamid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::PlayerFound, action_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::PlayerFound, params_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::PlayerFound, team_number_),
  0,
  1,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CQueuedMatchmakingGameHost_SearchForPlayers_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CQueuedMatchmakingGameHost_SearchForPlayers_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CQueuedMatchmakingGameHost_SearchForPlayers_Response, gamesearchresult_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CQueuedMatchmakingGameHost_SearchForPlayers_Response, searchid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CQueuedMatchmakingGameHost_SearchForPlayers_Response, poll_frequency_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CQueuedMatchmakingGameHost_SearchForPlayers_Response, matchid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CQueuedMatchmakingGameHost_SearchForPlayers_Response, players_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CQueuedMatchmakingGameHost_SearchForPlayers_Response, rtime_match_made_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CQueuedMatchmakingGameHost_SearchForPlayers_Response, rtime_now_),
  1,
  0,
  2,
  3,
  ~0u,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::proto::steam::PlayerResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::PlayerResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::PlayerResult, steamid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::PlayerResult, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CQueuedMatchmakingGameHost_SubmitPlayerResult_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CQueuedMatchmakingGameHost_SubmitPlayerResult_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CQueuedMatchmakingGameHost_SubmitPlayerResult_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CQueuedMatchmakingGameHost_SubmitPlayerResult_Request, matchid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CQueuedMatchmakingGameHost_SubmitPlayerResult_Request, player_results_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CQueuedMatchmakingGameHost_SubmitPlayerResult_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CQueuedMatchmakingGameHost_SubmitPlayerResult_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CQueuedMatchmakingGameHost_EndGame_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CQueuedMatchmakingGameHost_EndGame_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CQueuedMatchmakingGameHost_EndGame_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CQueuedMatchmakingGameHost_EndGame_Request, matchid_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CQueuedMatchmakingGameHost_EndGame_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CQueuedMatchmakingGameHost_EndGame_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::proto::steam::GameSearchParam)},
  { 9, 21, sizeof(::proto::steam::CQueuedMatchmaking_SearchForGame_Request)},
  { 28, 45, sizeof(::proto::steam::CQueuedMatchmaking_SearchForGame_Response)},
  { 57, 70, sizeof(::proto::steam::CQueuedMatchmakingGameHost_SearchForPlayers_Request)},
  { 78, 87, sizeof(::proto::steam::PlayerFound)},
  { 91, 103, sizeof(::proto::steam::CQueuedMatchmakingGameHost_SearchForPlayers_Response)},
  { 110, 117, sizeof(::proto::steam::PlayerResult)},
  { 119, 127, sizeof(::proto::steam::CQueuedMatchmakingGameHost_SubmitPlayerResult_Request)},
  { 130, 135, sizeof(::proto::steam::CQueuedMatchmakingGameHost_SubmitPlayerResult_Response)},
  { 135, 142, sizeof(::proto::steam::CQueuedMatchmakingGameHost_EndGame_Request)},
  { 144, 149, sizeof(::proto::steam::CQueuedMatchmakingGameHost_EndGame_Response)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_GameSearchParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CQueuedMatchmaking_SearchForGame_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CQueuedMatchmaking_SearchForGame_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CQueuedMatchmakingGameHost_SearchForPlayers_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_PlayerFound_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CQueuedMatchmakingGameHost_SearchForPlayers_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_PlayerResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CQueuedMatchmakingGameHost_SubmitPlayerResult_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CQueuedMatchmakingGameHost_SubmitPlayerResult_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CQueuedMatchmakingGameHost_EndGame_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CQueuedMatchmakingGameHost_EndGame_Response_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_steammessages_5fqms_2esteamclient_2eproto = {
  {}, AddDescriptors_steammessages_5fqms_2esteamclient_2eproto, "steammessages_qms.steamclient.proto", schemas,
  file_default_instances, TableStruct_steammessages_5fqms_2esteamclient_2eproto::offsets,
  file_level_metadata_steammessages_5fqms_2esteamclient_2eproto, 11, file_level_enum_descriptors_steammessages_5fqms_2esteamclient_2eproto, file_level_service_descriptors_steammessages_5fqms_2esteamclient_2eproto,
};

const char descriptor_table_protodef_steammessages_5fqms_2esteamclient_2eproto[] =
  "\n#steammessages_qms.steamclient.proto\022\013p"
  "roto.steam\032,steammessages_unified_base.s"
  "teamclient.proto\"2\n\017GameSearchParam\022\020\n\010k"
  "ey_name\030\001 \001(\t\022\r\n\005value\030\002 \003(\t\"\201\002\n(CQueued"
  "Matchmaking_SearchForGame_Request\022\r\n\005app"
  "id\030\001 \001(\r\022H\n\006action\030\002 \001(\0162\036.proto.steam.E"
  "GameSearchAction:\030k_EGameSearchAction_No"
  "ne\022,\n\006params\030\003 \003(\0132\034.proto.steam.GameSea"
  "rchParam\022\022\n\nplayer_min\030\004 \001(\r\022\022\n\nplayer_m"
  "ax\030\005 \001(\r\022\024\n\014steamidlobby\030\006 \001(\006\022\020\n\010search"
  "id\030\007 \001(\004\"\223\003\n)CQueuedMatchmaking_SearchFo"
  "rGame_Response\022U\n\020gamesearchresult\030\001 \001(\016"
  "2\036.proto.steam.EGameSearchResult:\033k_EGam"
  "eSearchResult_Invalid\022\020\n\010searchid\030\002 \001(\004\022"
  "\035\n\025seconds_time_estimate\030\003 \001(\r\022\026\n\016poll_f"
  "requency\030\004 \001(\r\022\027\n\017count_searching\030\005 \001(\r\022"
  "\030\n\020players_in_match\030\006 \001(\r\022\030\n\020players_acc"
  "epted\030\007 \001(\r\022\026\n\016connect_string\030\t \001(\t\022\023\n\013s"
  "teamidhost\030\n \001(\006\022\030\n\020rtime_match_made\030\013 \001"
  "(\r\022\021\n\trtime_now\030\014 \001(\r\022\037\n\027steamid_cancele"
  "d_search\030\r \001(\006\"\257\002\n3CQueuedMatchmakingGam"
  "eHost_SearchForPlayers_Request\022\r\n\005appid\030"
  "\001 \001(\r\022H\n\006action\030\002 \001(\0162\036.proto.steam.EGam"
  "eSearchAction:\030k_EGameSearchAction_None\022"
  ",\n\006params\030\003 \003(\0132\034.proto.steam.GameSearch"
  "Param\022\022\n\nplayer_min\030\004 \001(\r\022\022\n\nplayer_max\030"
  "\005 \001(\r\022\034\n\024player_max_team_size\030\006 \001(\r\022\031\n\021c"
  "onnection_string\030\007 \001(\t\022\020\n\010searchid\030\010 \001(\004"
  "\"\253\001\n\013PlayerFound\022\017\n\007steamid\030\001 \001(\006\022H\n\006act"
  "ion\030\002 \001(\0162\036.proto.steam.EGameSearchActio"
  "n:\030k_EGameSearchAction_None\022,\n\006params\030\003 "
  "\003(\0132\034.proto.steam.GameSearchParam\022\023\n\013tea"
  "m_number\030\004 \001(\r\"\240\002\n4CQueuedMatchmakingGam"
  "eHost_SearchForPlayers_Response\022U\n\020games"
  "earchresult\030\001 \001(\0162\036.proto.steam.EGameSea"
  "rchResult:\033k_EGameSearchResult_Invalid\022\020"
  "\n\010searchid\030\002 \001(\004\022\026\n\016poll_frequency\030\003 \001(\r"
  "\022\017\n\007matchid\030\004 \001(\004\022)\n\007players\030\005 \003(\0132\030.pro"
  "to.steam.PlayerFound\022\030\n\020rtime_match_made"
  "\030\006 \001(\r\022\021\n\trtime_now\030\007 \001(\r\".\n\014PlayerResul"
  "t\022\017\n\007steamid\030\001 \001(\006\022\r\n\005value\030\002 \001(\r\"\212\001\n5CQ"
  "ueuedMatchmakingGameHost_SubmitPlayerRes"
  "ult_Request\022\r\n\005appid\030\001 \001(\r\022\017\n\007matchid\030\002 "
  "\001(\004\0221\n\016player_results\030\003 \003(\0132\031.proto.stea"
  "m.PlayerResult\"8\n6CQueuedMatchmakingGame"
  "Host_SubmitPlayerResult_Response\"L\n*CQue"
  "uedMatchmakingGameHost_EndGame_Request\022\r"
  "\n\005appid\030\001 \001(\r\022\017\n\007matchid\030\002 \001(\004\"-\n+CQueue"
  "dMatchmakingGameHost_EndGame_Response*\222\001"
  "\n\021EGameSearchAction\022\034\n\030k_EGameSearchActi"
  "on_None\020\000\022\036\n\032k_EGameSearchAction_Accept\020"
  "\001\022\037\n\033k_EGameSearchAction_Decline\020\002\022\036\n\032k_"
  "EGameSearchAction_Cancel\020\003*\274\002\n\021EGameSear"
  "chResult\022\037\n\033k_EGameSearchResult_Invalid\020"
  "\000\022(\n$k_EGameSearchResult_SearchInProgres"
  "s\020\001\022+\n\'k_EGameSearchResult_SearchFailedN"
  "oHosts\020\002\022\'\n#k_EGameSearchResult_SearchGa"
  "meFound\020\003\022.\n*k_EGameSearchResult_SearchC"
  "ompleteAccepted\020\004\022.\n*k_EGameSearchResult"
  "_SearchCompleteDeclined\020\005\022&\n\"k_EGameSear"
  "chResult_SearchCanceled\020\0062\313\001\n\021QueuedMatc"
  "hmaking\022\225\001\n\rSearchForGame\0225.proto.steam."
  "CQueuedMatchmaking_SearchForGame_Request"
  "\0326.proto.steam.CQueuedMatchmaking_Search"
  "ForGame_Response\"\025\202\265\030\021Search for a game\032"
  "\036\202\265\030\032Queued matchmaking service2\264\004\n\031Queu"
  "edMatchmakingGameHost\022\255\001\n\020SearchForPlaye"
  "rs\022@.proto.steam.CQueuedMatchmakingGameH"
  "ost_SearchForPlayers_Request\032A.proto.ste"
  "am.CQueuedMatchmakingGameHost_SearchForP"
  "layers_Response\"\024\202\265\030\020SearchForPlayers\022\265\001"
  "\n\022SubmitPlayerResult\022B.proto.steam.CQueu"
  "edMatchmakingGameHost_SubmitPlayerResult"
  "_Request\032C.proto.steam.CQueuedMatchmakin"
  "gGameHost_SubmitPlayerResult_Response\"\026\202"
  "\265\030\022SubmitPlayerResult\022\211\001\n\007EndGame\0227.prot"
  "o.steam.CQueuedMatchmakingGameHost_EndGa"
  "me_Request\0328.proto.steam.CQueuedMatchmak"
  "ingGameHost_EndGame_Response\"\013\202\265\030\007EndGam"
  "e\032#\202\265\030\037Queued matchmaking host serviceB\003"
  "\200\001\001"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_steammessages_5fqms_2esteamclient_2eproto = {
  false, InitDefaults_steammessages_5fqms_2esteamclient_2eproto, 
  descriptor_table_protodef_steammessages_5fqms_2esteamclient_2eproto,
  "steammessages_qms.steamclient.proto", &assign_descriptors_table_steammessages_5fqms_2esteamclient_2eproto, 3203,
};

void AddDescriptors_steammessages_5fqms_2esteamclient_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_steammessages_5funified_5fbase_2esteamclient_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_steammessages_5fqms_2esteamclient_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_steammessages_5fqms_2esteamclient_2eproto = []() { AddDescriptors_steammessages_5fqms_2esteamclient_2eproto(); return true; }();
namespace proto {
namespace steam {
const ::google::protobuf::EnumDescriptor* EGameSearchAction_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_steammessages_5fqms_2esteamclient_2eproto);
  return file_level_enum_descriptors_steammessages_5fqms_2esteamclient_2eproto[0];
}
bool EGameSearchAction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EGameSearchResult_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_steammessages_5fqms_2esteamclient_2eproto);
  return file_level_enum_descriptors_steammessages_5fqms_2esteamclient_2eproto[1];
}
bool EGameSearchResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void GameSearchParam::InitAsDefaultInstance() {
}
class GameSearchParam::HasBitSetters {
 public:
  static void set_has_key_name(GameSearchParam* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameSearchParam::kKeyNameFieldNumber;
const int GameSearchParam::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameSearchParam::GameSearchParam()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.GameSearchParam)
}
GameSearchParam::GameSearchParam(const GameSearchParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      value_(from.value_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key_name()) {
    key_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_name_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.GameSearchParam)
}

void GameSearchParam::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GameSearchParam_steammessages_5fqms_2esteamclient_2eproto.base);
  key_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GameSearchParam::~GameSearchParam() {
  // @@protoc_insertion_point(destructor:proto.steam.GameSearchParam)
  SharedDtor();
}

void GameSearchParam::SharedDtor() {
  key_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GameSearchParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameSearchParam& GameSearchParam::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameSearchParam_steammessages_5fqms_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void GameSearchParam::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.GameSearchParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    key_name_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameSearchParam::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameSearchParam*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string key_name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.GameSearchParam.key_name");
        object = msg->mutable_key_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated string value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("proto.steam.GameSearchParam.value");
          object = msg->add_value();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameSearchParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.GameSearchParam)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key_name().data(), static_cast<int>(this->key_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.GameSearchParam.key_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value(this->value_size() - 1).data(),
            static_cast<int>(this->value(this->value_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.GameSearchParam.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.GameSearchParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.GameSearchParam)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameSearchParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.GameSearchParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key_name().data(), static_cast<int>(this->key_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.GameSearchParam.key_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key_name(), output);
  }

  // repeated string value = 2;
  for (int i = 0, n = this->value_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value(i).data(), static_cast<int>(this->value(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.GameSearchParam.value");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.GameSearchParam)
}

::google::protobuf::uint8* GameSearchParam::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.GameSearchParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key_name().data(), static_cast<int>(this->key_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.GameSearchParam.key_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key_name(), target);
  }

  // repeated string value = 2;
  for (int i = 0, n = this->value_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value(i).data(), static_cast<int>(this->value(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.GameSearchParam.value");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->value(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.GameSearchParam)
  return target;
}

size_t GameSearchParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.GameSearchParam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string value = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->value_size());
  for (int i = 0, n = this->value_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->value(i));
  }

  // optional string key_name = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameSearchParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.GameSearchParam)
  GOOGLE_DCHECK_NE(&from, this);
  const GameSearchParam* source =
      ::google::protobuf::DynamicCastToGenerated<GameSearchParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.GameSearchParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.GameSearchParam)
    MergeFrom(*source);
  }
}

void GameSearchParam::MergeFrom(const GameSearchParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.GameSearchParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
  if (from.has_key_name()) {
    _has_bits_[0] |= 0x00000001u;
    key_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_name_);
  }
}

void GameSearchParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.GameSearchParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameSearchParam::CopyFrom(const GameSearchParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.GameSearchParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameSearchParam::IsInitialized() const {
  return true;
}

void GameSearchParam::Swap(GameSearchParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameSearchParam::InternalSwap(GameSearchParam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  value_.InternalSwap(CastToBase(&other->value_));
  key_name_.Swap(&other->key_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata GameSearchParam::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fqms_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fqms_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CQueuedMatchmaking_SearchForGame_Request::InitAsDefaultInstance() {
}
class CQueuedMatchmaking_SearchForGame_Request::HasBitSetters {
 public:
  static void set_has_appid(CQueuedMatchmaking_SearchForGame_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_action(CQueuedMatchmaking_SearchForGame_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_player_min(CQueuedMatchmaking_SearchForGame_Request* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_player_max(CQueuedMatchmaking_SearchForGame_Request* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_steamidlobby(CQueuedMatchmaking_SearchForGame_Request* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_searchid(CQueuedMatchmaking_SearchForGame_Request* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CQueuedMatchmaking_SearchForGame_Request::kAppidFieldNumber;
const int CQueuedMatchmaking_SearchForGame_Request::kActionFieldNumber;
const int CQueuedMatchmaking_SearchForGame_Request::kParamsFieldNumber;
const int CQueuedMatchmaking_SearchForGame_Request::kPlayerMinFieldNumber;
const int CQueuedMatchmaking_SearchForGame_Request::kPlayerMaxFieldNumber;
const int CQueuedMatchmaking_SearchForGame_Request::kSteamidlobbyFieldNumber;
const int CQueuedMatchmaking_SearchForGame_Request::kSearchidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CQueuedMatchmaking_SearchForGame_Request::CQueuedMatchmaking_SearchForGame_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CQueuedMatchmaking_SearchForGame_Request)
}
CQueuedMatchmaking_SearchForGame_Request::CQueuedMatchmaking_SearchForGame_Request(const CQueuedMatchmaking_SearchForGame_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      params_(from.params_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&searchid_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(searchid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CQueuedMatchmaking_SearchForGame_Request)
}

void CQueuedMatchmaking_SearchForGame_Request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CQueuedMatchmaking_SearchForGame_Request_steammessages_5fqms_2esteamclient_2eproto.base);
  ::memset(&appid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&searchid_) -
      reinterpret_cast<char*>(&appid_)) + sizeof(searchid_));
}

CQueuedMatchmaking_SearchForGame_Request::~CQueuedMatchmaking_SearchForGame_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CQueuedMatchmaking_SearchForGame_Request)
  SharedDtor();
}

void CQueuedMatchmaking_SearchForGame_Request::SharedDtor() {
}

void CQueuedMatchmaking_SearchForGame_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CQueuedMatchmaking_SearchForGame_Request& CQueuedMatchmaking_SearchForGame_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CQueuedMatchmaking_SearchForGame_Request_steammessages_5fqms_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CQueuedMatchmaking_SearchForGame_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CQueuedMatchmaking_SearchForGame_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  params_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&searchid_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(searchid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CQueuedMatchmaking_SearchForGame_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CQueuedMatchmaking_SearchForGame_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.steam.EGameSearchAction action = 2 [default = k_EGameSearchAction_None];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::steam::EGameSearchAction_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_action(static_cast<::proto::steam::EGameSearchAction>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.steam.GameSearchParam params = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::GameSearchParam::_InternalParse;
          object = msg->add_params();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // optional uint32 player_min = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_player_min(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 player_max = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_player_max(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 steamidlobby = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 49) goto handle_unusual;
        msg->set_steamidlobby(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint64 searchid = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_searchid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CQueuedMatchmaking_SearchForGame_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CQueuedMatchmaking_SearchForGame_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.EGameSearchAction action = 2 [default = k_EGameSearchAction_None];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::steam::EGameSearchAction_IsValid(value)) {
            set_action(static_cast< ::proto::steam::EGameSearchAction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.GameSearchParam params = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 player_min = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_player_min(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 player_max = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_player_max(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steamidlobby = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (49 & 0xFF)) {
          HasBitSetters::set_has_steamidlobby(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamidlobby_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 searchid = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_searchid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &searchid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CQueuedMatchmaking_SearchForGame_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CQueuedMatchmaking_SearchForGame_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CQueuedMatchmaking_SearchForGame_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CQueuedMatchmaking_SearchForGame_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional .proto.steam.EGameSearchAction action = 2 [default = k_EGameSearchAction_None];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->action(), output);
  }

  // repeated .proto.steam.GameSearchParam params = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->params_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->params(static_cast<int>(i)),
      output);
  }

  // optional uint32 player_min = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->player_min(), output);
  }

  // optional uint32 player_max = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->player_max(), output);
  }

  // optional fixed64 steamidlobby = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->steamidlobby(), output);
  }

  // optional uint64 searchid = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->searchid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CQueuedMatchmaking_SearchForGame_Request)
}

::google::protobuf::uint8* CQueuedMatchmaking_SearchForGame_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CQueuedMatchmaking_SearchForGame_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional .proto.steam.EGameSearchAction action = 2 [default = k_EGameSearchAction_None];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->action(), target);
  }

  // repeated .proto.steam.GameSearchParam params = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->params_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->params(static_cast<int>(i)), target);
  }

  // optional uint32 player_min = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->player_min(), target);
  }

  // optional uint32 player_max = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->player_max(), target);
  }

  // optional fixed64 steamidlobby = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->steamidlobby(), target);
  }

  // optional uint64 searchid = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->searchid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CQueuedMatchmaking_SearchForGame_Request)
  return target;
}

size_t CQueuedMatchmaking_SearchForGame_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CQueuedMatchmaking_SearchForGame_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.GameSearchParam params = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->params_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->params(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional .proto.steam.EGameSearchAction action = 2 [default = k_EGameSearchAction_None];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

    // optional uint32 player_min = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_min());
    }

    // optional uint32 player_max = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_max());
    }

    // optional fixed64 steamidlobby = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional uint64 searchid = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->searchid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CQueuedMatchmaking_SearchForGame_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CQueuedMatchmaking_SearchForGame_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CQueuedMatchmaking_SearchForGame_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CQueuedMatchmaking_SearchForGame_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CQueuedMatchmaking_SearchForGame_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CQueuedMatchmaking_SearchForGame_Request)
    MergeFrom(*source);
  }
}

void CQueuedMatchmaking_SearchForGame_Request::MergeFrom(const CQueuedMatchmaking_SearchForGame_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CQueuedMatchmaking_SearchForGame_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  params_.MergeFrom(from.params_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      action_ = from.action_;
    }
    if (cached_has_bits & 0x00000004u) {
      player_min_ = from.player_min_;
    }
    if (cached_has_bits & 0x00000008u) {
      player_max_ = from.player_max_;
    }
    if (cached_has_bits & 0x00000010u) {
      steamidlobby_ = from.steamidlobby_;
    }
    if (cached_has_bits & 0x00000020u) {
      searchid_ = from.searchid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CQueuedMatchmaking_SearchForGame_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CQueuedMatchmaking_SearchForGame_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CQueuedMatchmaking_SearchForGame_Request::CopyFrom(const CQueuedMatchmaking_SearchForGame_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CQueuedMatchmaking_SearchForGame_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CQueuedMatchmaking_SearchForGame_Request::IsInitialized() const {
  return true;
}

void CQueuedMatchmaking_SearchForGame_Request::Swap(CQueuedMatchmaking_SearchForGame_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CQueuedMatchmaking_SearchForGame_Request::InternalSwap(CQueuedMatchmaking_SearchForGame_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&params_)->InternalSwap(CastToBase(&other->params_));
  swap(appid_, other->appid_);
  swap(action_, other->action_);
  swap(player_min_, other->player_min_);
  swap(player_max_, other->player_max_);
  swap(steamidlobby_, other->steamidlobby_);
  swap(searchid_, other->searchid_);
}

::google::protobuf::Metadata CQueuedMatchmaking_SearchForGame_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fqms_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fqms_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CQueuedMatchmaking_SearchForGame_Response::InitAsDefaultInstance() {
}
class CQueuedMatchmaking_SearchForGame_Response::HasBitSetters {
 public:
  static void set_has_gamesearchresult(CQueuedMatchmaking_SearchForGame_Response* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_searchid(CQueuedMatchmaking_SearchForGame_Response* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_seconds_time_estimate(CQueuedMatchmaking_SearchForGame_Response* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_poll_frequency(CQueuedMatchmaking_SearchForGame_Response* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_count_searching(CQueuedMatchmaking_SearchForGame_Response* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_players_in_match(CQueuedMatchmaking_SearchForGame_Response* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_players_accepted(CQueuedMatchmaking_SearchForGame_Response* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_connect_string(CQueuedMatchmaking_SearchForGame_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_steamidhost(CQueuedMatchmaking_SearchForGame_Response* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_rtime_match_made(CQueuedMatchmaking_SearchForGame_Response* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_rtime_now(CQueuedMatchmaking_SearchForGame_Response* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_steamid_canceled_search(CQueuedMatchmaking_SearchForGame_Response* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CQueuedMatchmaking_SearchForGame_Response::kGamesearchresultFieldNumber;
const int CQueuedMatchmaking_SearchForGame_Response::kSearchidFieldNumber;
const int CQueuedMatchmaking_SearchForGame_Response::kSecondsTimeEstimateFieldNumber;
const int CQueuedMatchmaking_SearchForGame_Response::kPollFrequencyFieldNumber;
const int CQueuedMatchmaking_SearchForGame_Response::kCountSearchingFieldNumber;
const int CQueuedMatchmaking_SearchForGame_Response::kPlayersInMatchFieldNumber;
const int CQueuedMatchmaking_SearchForGame_Response::kPlayersAcceptedFieldNumber;
const int CQueuedMatchmaking_SearchForGame_Response::kConnectStringFieldNumber;
const int CQueuedMatchmaking_SearchForGame_Response::kSteamidhostFieldNumber;
const int CQueuedMatchmaking_SearchForGame_Response::kRtimeMatchMadeFieldNumber;
const int CQueuedMatchmaking_SearchForGame_Response::kRtimeNowFieldNumber;
const int CQueuedMatchmaking_SearchForGame_Response::kSteamidCanceledSearchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CQueuedMatchmaking_SearchForGame_Response::CQueuedMatchmaking_SearchForGame_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CQueuedMatchmaking_SearchForGame_Response)
}
CQueuedMatchmaking_SearchForGame_Response::CQueuedMatchmaking_SearchForGame_Response(const CQueuedMatchmaking_SearchForGame_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  connect_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_connect_string()) {
    connect_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.connect_string_);
  }
  ::memcpy(&searchid_, &from.searchid_,
    static_cast<size_t>(reinterpret_cast<char*>(&steamid_canceled_search_) -
    reinterpret_cast<char*>(&searchid_)) + sizeof(steamid_canceled_search_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CQueuedMatchmaking_SearchForGame_Response)
}

void CQueuedMatchmaking_SearchForGame_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CQueuedMatchmaking_SearchForGame_Response_steammessages_5fqms_2esteamclient_2eproto.base);
  connect_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&searchid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&steamid_canceled_search_) -
      reinterpret_cast<char*>(&searchid_)) + sizeof(steamid_canceled_search_));
}

CQueuedMatchmaking_SearchForGame_Response::~CQueuedMatchmaking_SearchForGame_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CQueuedMatchmaking_SearchForGame_Response)
  SharedDtor();
}

void CQueuedMatchmaking_SearchForGame_Response::SharedDtor() {
  connect_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CQueuedMatchmaking_SearchForGame_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CQueuedMatchmaking_SearchForGame_Response& CQueuedMatchmaking_SearchForGame_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CQueuedMatchmaking_SearchForGame_Response_steammessages_5fqms_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CQueuedMatchmaking_SearchForGame_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CQueuedMatchmaking_SearchForGame_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    connect_string_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&searchid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&players_accepted_) -
        reinterpret_cast<char*>(&searchid_)) + sizeof(players_accepted_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&steamidhost_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steamid_canceled_search_) -
        reinterpret_cast<char*>(&steamidhost_)) + sizeof(steamid_canceled_search_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CQueuedMatchmaking_SearchForGame_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CQueuedMatchmaking_SearchForGame_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.steam.EGameSearchResult gamesearchresult = 1 [default = k_EGameSearchResult_Invalid];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::steam::EGameSearchResult_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_gamesearchresult(static_cast<::proto::steam::EGameSearchResult>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 searchid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_searchid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 seconds_time_estimate = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_seconds_time_estimate(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 poll_frequency = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_poll_frequency(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 count_searching = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_count_searching(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 players_in_match = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_players_in_match(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 players_accepted = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_players_accepted(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string connect_string = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CQueuedMatchmaking_SearchForGame_Response.connect_string");
        object = msg->mutable_connect_string();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional fixed64 steamidhost = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 81) goto handle_unusual;
        msg->set_steamidhost(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 rtime_match_made = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_rtime_match_made(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 rtime_now = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_rtime_now(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 steamid_canceled_search = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 105) goto handle_unusual;
        msg->set_steamid_canceled_search(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CQueuedMatchmaking_SearchForGame_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CQueuedMatchmaking_SearchForGame_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.steam.EGameSearchResult gamesearchresult = 1 [default = k_EGameSearchResult_Invalid];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::steam::EGameSearchResult_IsValid(value)) {
            set_gamesearchresult(static_cast< ::proto::steam::EGameSearchResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 searchid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_searchid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &searchid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 seconds_time_estimate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_seconds_time_estimate(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seconds_time_estimate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 poll_frequency = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_poll_frequency(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &poll_frequency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 count_searching = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_count_searching(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_searching_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 players_in_match = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_players_in_match(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &players_in_match_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 players_accepted = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_players_accepted(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &players_accepted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string connect_string = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_connect_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->connect_string().data(), static_cast<int>(this->connect_string().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CQueuedMatchmaking_SearchForGame_Response.connect_string");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steamidhost = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (81 & 0xFF)) {
          HasBitSetters::set_has_steamidhost(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamidhost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rtime_match_made = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_rtime_match_made(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rtime_match_made_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rtime_now = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_rtime_now(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rtime_now_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steamid_canceled_search = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (105 & 0xFF)) {
          HasBitSetters::set_has_steamid_canceled_search(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_canceled_search_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CQueuedMatchmaking_SearchForGame_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CQueuedMatchmaking_SearchForGame_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CQueuedMatchmaking_SearchForGame_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CQueuedMatchmaking_SearchForGame_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.EGameSearchResult gamesearchresult = 1 [default = k_EGameSearchResult_Invalid];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->gamesearchresult(), output);
  }

  // optional uint64 searchid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->searchid(), output);
  }

  // optional uint32 seconds_time_estimate = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->seconds_time_estimate(), output);
  }

  // optional uint32 poll_frequency = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->poll_frequency(), output);
  }

  // optional uint32 count_searching = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->count_searching(), output);
  }

  // optional uint32 players_in_match = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->players_in_match(), output);
  }

  // optional uint32 players_accepted = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->players_accepted(), output);
  }

  // optional string connect_string = 9;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->connect_string().data(), static_cast<int>(this->connect_string().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CQueuedMatchmaking_SearchForGame_Response.connect_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->connect_string(), output);
  }

  // optional fixed64 steamidhost = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(10, this->steamidhost(), output);
  }

  // optional uint32 rtime_match_made = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->rtime_match_made(), output);
  }

  // optional uint32 rtime_now = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->rtime_now(), output);
  }

  // optional fixed64 steamid_canceled_search = 13;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(13, this->steamid_canceled_search(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CQueuedMatchmaking_SearchForGame_Response)
}

::google::protobuf::uint8* CQueuedMatchmaking_SearchForGame_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CQueuedMatchmaking_SearchForGame_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.EGameSearchResult gamesearchresult = 1 [default = k_EGameSearchResult_Invalid];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->gamesearchresult(), target);
  }

  // optional uint64 searchid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->searchid(), target);
  }

  // optional uint32 seconds_time_estimate = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->seconds_time_estimate(), target);
  }

  // optional uint32 poll_frequency = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->poll_frequency(), target);
  }

  // optional uint32 count_searching = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->count_searching(), target);
  }

  // optional uint32 players_in_match = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->players_in_match(), target);
  }

  // optional uint32 players_accepted = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->players_accepted(), target);
  }

  // optional string connect_string = 9;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->connect_string().data(), static_cast<int>(this->connect_string().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CQueuedMatchmaking_SearchForGame_Response.connect_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->connect_string(), target);
  }

  // optional fixed64 steamidhost = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(10, this->steamidhost(), target);
  }

  // optional uint32 rtime_match_made = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->rtime_match_made(), target);
  }

  // optional uint32 rtime_now = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->rtime_now(), target);
  }

  // optional fixed64 steamid_canceled_search = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(13, this->steamid_canceled_search(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CQueuedMatchmaking_SearchForGame_Response)
  return target;
}

size_t CQueuedMatchmaking_SearchForGame_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CQueuedMatchmaking_SearchForGame_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string connect_string = 9;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->connect_string());
    }

    // optional uint64 searchid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->searchid());
    }

    // optional .proto.steam.EGameSearchResult gamesearchresult = 1 [default = k_EGameSearchResult_Invalid];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gamesearchresult());
    }

    // optional uint32 seconds_time_estimate = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seconds_time_estimate());
    }

    // optional uint32 poll_frequency = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->poll_frequency());
    }

    // optional uint32 count_searching = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count_searching());
    }

    // optional uint32 players_in_match = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->players_in_match());
    }

    // optional uint32 players_accepted = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->players_accepted());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional fixed64 steamidhost = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional uint32 rtime_match_made = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rtime_match_made());
    }

    // optional uint32 rtime_now = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rtime_now());
    }

    // optional fixed64 steamid_canceled_search = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CQueuedMatchmaking_SearchForGame_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CQueuedMatchmaking_SearchForGame_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CQueuedMatchmaking_SearchForGame_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CQueuedMatchmaking_SearchForGame_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CQueuedMatchmaking_SearchForGame_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CQueuedMatchmaking_SearchForGame_Response)
    MergeFrom(*source);
  }
}

void CQueuedMatchmaking_SearchForGame_Response::MergeFrom(const CQueuedMatchmaking_SearchForGame_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CQueuedMatchmaking_SearchForGame_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      connect_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.connect_string_);
    }
    if (cached_has_bits & 0x00000002u) {
      searchid_ = from.searchid_;
    }
    if (cached_has_bits & 0x00000004u) {
      gamesearchresult_ = from.gamesearchresult_;
    }
    if (cached_has_bits & 0x00000008u) {
      seconds_time_estimate_ = from.seconds_time_estimate_;
    }
    if (cached_has_bits & 0x00000010u) {
      poll_frequency_ = from.poll_frequency_;
    }
    if (cached_has_bits & 0x00000020u) {
      count_searching_ = from.count_searching_;
    }
    if (cached_has_bits & 0x00000040u) {
      players_in_match_ = from.players_in_match_;
    }
    if (cached_has_bits & 0x00000080u) {
      players_accepted_ = from.players_accepted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      steamidhost_ = from.steamidhost_;
    }
    if (cached_has_bits & 0x00000200u) {
      rtime_match_made_ = from.rtime_match_made_;
    }
    if (cached_has_bits & 0x00000400u) {
      rtime_now_ = from.rtime_now_;
    }
    if (cached_has_bits & 0x00000800u) {
      steamid_canceled_search_ = from.steamid_canceled_search_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CQueuedMatchmaking_SearchForGame_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CQueuedMatchmaking_SearchForGame_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CQueuedMatchmaking_SearchForGame_Response::CopyFrom(const CQueuedMatchmaking_SearchForGame_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CQueuedMatchmaking_SearchForGame_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CQueuedMatchmaking_SearchForGame_Response::IsInitialized() const {
  return true;
}

void CQueuedMatchmaking_SearchForGame_Response::Swap(CQueuedMatchmaking_SearchForGame_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CQueuedMatchmaking_SearchForGame_Response::InternalSwap(CQueuedMatchmaking_SearchForGame_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  connect_string_.Swap(&other->connect_string_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(searchid_, other->searchid_);
  swap(gamesearchresult_, other->gamesearchresult_);
  swap(seconds_time_estimate_, other->seconds_time_estimate_);
  swap(poll_frequency_, other->poll_frequency_);
  swap(count_searching_, other->count_searching_);
  swap(players_in_match_, other->players_in_match_);
  swap(players_accepted_, other->players_accepted_);
  swap(steamidhost_, other->steamidhost_);
  swap(rtime_match_made_, other->rtime_match_made_);
  swap(rtime_now_, other->rtime_now_);
  swap(steamid_canceled_search_, other->steamid_canceled_search_);
}

::google::protobuf::Metadata CQueuedMatchmaking_SearchForGame_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fqms_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fqms_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CQueuedMatchmakingGameHost_SearchForPlayers_Request::InitAsDefaultInstance() {
}
class CQueuedMatchmakingGameHost_SearchForPlayers_Request::HasBitSetters {
 public:
  static void set_has_appid(CQueuedMatchmakingGameHost_SearchForPlayers_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_action(CQueuedMatchmakingGameHost_SearchForPlayers_Request* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_player_min(CQueuedMatchmakingGameHost_SearchForPlayers_Request* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_player_max(CQueuedMatchmakingGameHost_SearchForPlayers_Request* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_player_max_team_size(CQueuedMatchmakingGameHost_SearchForPlayers_Request* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_connection_string(CQueuedMatchmakingGameHost_SearchForPlayers_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_searchid(CQueuedMatchmakingGameHost_SearchForPlayers_Request* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CQueuedMatchmakingGameHost_SearchForPlayers_Request::kAppidFieldNumber;
const int CQueuedMatchmakingGameHost_SearchForPlayers_Request::kActionFieldNumber;
const int CQueuedMatchmakingGameHost_SearchForPlayers_Request::kParamsFieldNumber;
const int CQueuedMatchmakingGameHost_SearchForPlayers_Request::kPlayerMinFieldNumber;
const int CQueuedMatchmakingGameHost_SearchForPlayers_Request::kPlayerMaxFieldNumber;
const int CQueuedMatchmakingGameHost_SearchForPlayers_Request::kPlayerMaxTeamSizeFieldNumber;
const int CQueuedMatchmakingGameHost_SearchForPlayers_Request::kConnectionStringFieldNumber;
const int CQueuedMatchmakingGameHost_SearchForPlayers_Request::kSearchidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CQueuedMatchmakingGameHost_SearchForPlayers_Request::CQueuedMatchmakingGameHost_SearchForPlayers_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CQueuedMatchmakingGameHost_SearchForPlayers_Request)
}
CQueuedMatchmakingGameHost_SearchForPlayers_Request::CQueuedMatchmakingGameHost_SearchForPlayers_Request(const CQueuedMatchmakingGameHost_SearchForPlayers_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      params_(from.params_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  connection_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_connection_string()) {
    connection_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.connection_string_);
  }
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&player_max_team_size_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(player_max_team_size_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CQueuedMatchmakingGameHost_SearchForPlayers_Request)
}

void CQueuedMatchmakingGameHost_SearchForPlayers_Request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CQueuedMatchmakingGameHost_SearchForPlayers_Request_steammessages_5fqms_2esteamclient_2eproto.base);
  connection_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&appid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_max_team_size_) -
      reinterpret_cast<char*>(&appid_)) + sizeof(player_max_team_size_));
}

CQueuedMatchmakingGameHost_SearchForPlayers_Request::~CQueuedMatchmakingGameHost_SearchForPlayers_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CQueuedMatchmakingGameHost_SearchForPlayers_Request)
  SharedDtor();
}

void CQueuedMatchmakingGameHost_SearchForPlayers_Request::SharedDtor() {
  connection_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CQueuedMatchmakingGameHost_SearchForPlayers_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CQueuedMatchmakingGameHost_SearchForPlayers_Request& CQueuedMatchmakingGameHost_SearchForPlayers_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CQueuedMatchmakingGameHost_SearchForPlayers_Request_steammessages_5fqms_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CQueuedMatchmakingGameHost_SearchForPlayers_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CQueuedMatchmakingGameHost_SearchForPlayers_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  params_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    connection_string_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&player_max_team_size_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(player_max_team_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CQueuedMatchmakingGameHost_SearchForPlayers_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CQueuedMatchmakingGameHost_SearchForPlayers_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.steam.EGameSearchAction action = 2 [default = k_EGameSearchAction_None];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::steam::EGameSearchAction_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_action(static_cast<::proto::steam::EGameSearchAction>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.steam.GameSearchParam params = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::GameSearchParam::_InternalParse;
          object = msg->add_params();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // optional uint32 player_min = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_player_min(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 player_max = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_player_max(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 player_max_team_size = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_player_max_team_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string connection_string = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CQueuedMatchmakingGameHost_SearchForPlayers_Request.connection_string");
        object = msg->mutable_connection_string();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint64 searchid = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_searchid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CQueuedMatchmakingGameHost_SearchForPlayers_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CQueuedMatchmakingGameHost_SearchForPlayers_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.EGameSearchAction action = 2 [default = k_EGameSearchAction_None];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::steam::EGameSearchAction_IsValid(value)) {
            set_action(static_cast< ::proto::steam::EGameSearchAction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.GameSearchParam params = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 player_min = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_player_min(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 player_max = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_player_max(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 player_max_team_size = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_player_max_team_size(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_max_team_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string connection_string = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_connection_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->connection_string().data(), static_cast<int>(this->connection_string().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CQueuedMatchmakingGameHost_SearchForPlayers_Request.connection_string");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 searchid = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_searchid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &searchid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CQueuedMatchmakingGameHost_SearchForPlayers_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CQueuedMatchmakingGameHost_SearchForPlayers_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CQueuedMatchmakingGameHost_SearchForPlayers_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CQueuedMatchmakingGameHost_SearchForPlayers_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional .proto.steam.EGameSearchAction action = 2 [default = k_EGameSearchAction_None];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->action(), output);
  }

  // repeated .proto.steam.GameSearchParam params = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->params_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->params(static_cast<int>(i)),
      output);
  }

  // optional uint32 player_min = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->player_min(), output);
  }

  // optional uint32 player_max = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->player_max(), output);
  }

  // optional uint32 player_max_team_size = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->player_max_team_size(), output);
  }

  // optional string connection_string = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->connection_string().data(), static_cast<int>(this->connection_string().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CQueuedMatchmakingGameHost_SearchForPlayers_Request.connection_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->connection_string(), output);
  }

  // optional uint64 searchid = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->searchid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CQueuedMatchmakingGameHost_SearchForPlayers_Request)
}

::google::protobuf::uint8* CQueuedMatchmakingGameHost_SearchForPlayers_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CQueuedMatchmakingGameHost_SearchForPlayers_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional .proto.steam.EGameSearchAction action = 2 [default = k_EGameSearchAction_None];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->action(), target);
  }

  // repeated .proto.steam.GameSearchParam params = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->params_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->params(static_cast<int>(i)), target);
  }

  // optional uint32 player_min = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->player_min(), target);
  }

  // optional uint32 player_max = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->player_max(), target);
  }

  // optional uint32 player_max_team_size = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->player_max_team_size(), target);
  }

  // optional string connection_string = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->connection_string().data(), static_cast<int>(this->connection_string().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CQueuedMatchmakingGameHost_SearchForPlayers_Request.connection_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->connection_string(), target);
  }

  // optional uint64 searchid = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->searchid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CQueuedMatchmakingGameHost_SearchForPlayers_Request)
  return target;
}

size_t CQueuedMatchmakingGameHost_SearchForPlayers_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CQueuedMatchmakingGameHost_SearchForPlayers_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.GameSearchParam params = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->params_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->params(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string connection_string = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->connection_string());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional .proto.steam.EGameSearchAction action = 2 [default = k_EGameSearchAction_None];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

    // optional uint32 player_min = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_min());
    }

    // optional uint32 player_max = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_max());
    }

    // optional uint64 searchid = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->searchid());
    }

    // optional uint32 player_max_team_size = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_max_team_size());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CQueuedMatchmakingGameHost_SearchForPlayers_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CQueuedMatchmakingGameHost_SearchForPlayers_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CQueuedMatchmakingGameHost_SearchForPlayers_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CQueuedMatchmakingGameHost_SearchForPlayers_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CQueuedMatchmakingGameHost_SearchForPlayers_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CQueuedMatchmakingGameHost_SearchForPlayers_Request)
    MergeFrom(*source);
  }
}

void CQueuedMatchmakingGameHost_SearchForPlayers_Request::MergeFrom(const CQueuedMatchmakingGameHost_SearchForPlayers_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CQueuedMatchmakingGameHost_SearchForPlayers_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  params_.MergeFrom(from.params_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      connection_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.connection_string_);
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000004u) {
      action_ = from.action_;
    }
    if (cached_has_bits & 0x00000008u) {
      player_min_ = from.player_min_;
    }
    if (cached_has_bits & 0x00000010u) {
      player_max_ = from.player_max_;
    }
    if (cached_has_bits & 0x00000020u) {
      searchid_ = from.searchid_;
    }
    if (cached_has_bits & 0x00000040u) {
      player_max_team_size_ = from.player_max_team_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CQueuedMatchmakingGameHost_SearchForPlayers_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CQueuedMatchmakingGameHost_SearchForPlayers_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CQueuedMatchmakingGameHost_SearchForPlayers_Request::CopyFrom(const CQueuedMatchmakingGameHost_SearchForPlayers_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CQueuedMatchmakingGameHost_SearchForPlayers_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CQueuedMatchmakingGameHost_SearchForPlayers_Request::IsInitialized() const {
  return true;
}

void CQueuedMatchmakingGameHost_SearchForPlayers_Request::Swap(CQueuedMatchmakingGameHost_SearchForPlayers_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CQueuedMatchmakingGameHost_SearchForPlayers_Request::InternalSwap(CQueuedMatchmakingGameHost_SearchForPlayers_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&params_)->InternalSwap(CastToBase(&other->params_));
  connection_string_.Swap(&other->connection_string_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(appid_, other->appid_);
  swap(action_, other->action_);
  swap(player_min_, other->player_min_);
  swap(player_max_, other->player_max_);
  swap(searchid_, other->searchid_);
  swap(player_max_team_size_, other->player_max_team_size_);
}

::google::protobuf::Metadata CQueuedMatchmakingGameHost_SearchForPlayers_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fqms_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fqms_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PlayerFound::InitAsDefaultInstance() {
}
class PlayerFound::HasBitSetters {
 public:
  static void set_has_steamid(PlayerFound* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_action(PlayerFound* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_team_number(PlayerFound* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerFound::kSteamidFieldNumber;
const int PlayerFound::kActionFieldNumber;
const int PlayerFound::kParamsFieldNumber;
const int PlayerFound::kTeamNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerFound::PlayerFound()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.PlayerFound)
}
PlayerFound::PlayerFound(const PlayerFound& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      params_(from.params_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&team_number_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(team_number_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.PlayerFound)
}

void PlayerFound::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PlayerFound_steammessages_5fqms_2esteamclient_2eproto.base);
  ::memset(&steamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&team_number_) -
      reinterpret_cast<char*>(&steamid_)) + sizeof(team_number_));
}

PlayerFound::~PlayerFound() {
  // @@protoc_insertion_point(destructor:proto.steam.PlayerFound)
  SharedDtor();
}

void PlayerFound::SharedDtor() {
}

void PlayerFound::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerFound& PlayerFound::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerFound_steammessages_5fqms_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void PlayerFound::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.PlayerFound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  params_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team_number_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(team_number_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerFound::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerFound*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional .proto.steam.EGameSearchAction action = 2 [default = k_EGameSearchAction_None];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::steam::EGameSearchAction_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_action(static_cast<::proto::steam::EGameSearchAction>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.steam.GameSearchParam params = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::GameSearchParam::_InternalParse;
          object = msg->add_params();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // optional uint32 team_number = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_team_number(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerFound::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.PlayerFound)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.EGameSearchAction action = 2 [default = k_EGameSearchAction_None];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::steam::EGameSearchAction_IsValid(value)) {
            set_action(static_cast< ::proto::steam::EGameSearchAction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.GameSearchParam params = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_number = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_team_number(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.PlayerFound)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.PlayerFound)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerFound::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.PlayerFound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional .proto.steam.EGameSearchAction action = 2 [default = k_EGameSearchAction_None];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->action(), output);
  }

  // repeated .proto.steam.GameSearchParam params = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->params_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->params(static_cast<int>(i)),
      output);
  }

  // optional uint32 team_number = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->team_number(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.PlayerFound)
}

::google::protobuf::uint8* PlayerFound::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.PlayerFound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional .proto.steam.EGameSearchAction action = 2 [default = k_EGameSearchAction_None];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->action(), target);
  }

  // repeated .proto.steam.GameSearchParam params = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->params_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->params(static_cast<int>(i)), target);
  }

  // optional uint32 team_number = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->team_number(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.PlayerFound)
  return target;
}

size_t PlayerFound::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.PlayerFound)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.GameSearchParam params = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->params_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->params(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional .proto.steam.EGameSearchAction action = 2 [default = k_EGameSearchAction_None];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

    // optional uint32 team_number = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_number());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerFound::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.PlayerFound)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerFound* source =
      ::google::protobuf::DynamicCastToGenerated<PlayerFound>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.PlayerFound)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.PlayerFound)
    MergeFrom(*source);
  }
}

void PlayerFound::MergeFrom(const PlayerFound& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.PlayerFound)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  params_.MergeFrom(from.params_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      action_ = from.action_;
    }
    if (cached_has_bits & 0x00000004u) {
      team_number_ = from.team_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerFound::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.PlayerFound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerFound::CopyFrom(const PlayerFound& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.PlayerFound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerFound::IsInitialized() const {
  return true;
}

void PlayerFound::Swap(PlayerFound* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerFound::InternalSwap(PlayerFound* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&params_)->InternalSwap(CastToBase(&other->params_));
  swap(steamid_, other->steamid_);
  swap(action_, other->action_);
  swap(team_number_, other->team_number_);
}

::google::protobuf::Metadata PlayerFound::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fqms_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fqms_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CQueuedMatchmakingGameHost_SearchForPlayers_Response::InitAsDefaultInstance() {
}
class CQueuedMatchmakingGameHost_SearchForPlayers_Response::HasBitSetters {
 public:
  static void set_has_gamesearchresult(CQueuedMatchmakingGameHost_SearchForPlayers_Response* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_searchid(CQueuedMatchmakingGameHost_SearchForPlayers_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_poll_frequency(CQueuedMatchmakingGameHost_SearchForPlayers_Response* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_matchid(CQueuedMatchmakingGameHost_SearchForPlayers_Response* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_rtime_match_made(CQueuedMatchmakingGameHost_SearchForPlayers_Response* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_rtime_now(CQueuedMatchmakingGameHost_SearchForPlayers_Response* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CQueuedMatchmakingGameHost_SearchForPlayers_Response::kGamesearchresultFieldNumber;
const int CQueuedMatchmakingGameHost_SearchForPlayers_Response::kSearchidFieldNumber;
const int CQueuedMatchmakingGameHost_SearchForPlayers_Response::kPollFrequencyFieldNumber;
const int CQueuedMatchmakingGameHost_SearchForPlayers_Response::kMatchidFieldNumber;
const int CQueuedMatchmakingGameHost_SearchForPlayers_Response::kPlayersFieldNumber;
const int CQueuedMatchmakingGameHost_SearchForPlayers_Response::kRtimeMatchMadeFieldNumber;
const int CQueuedMatchmakingGameHost_SearchForPlayers_Response::kRtimeNowFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CQueuedMatchmakingGameHost_SearchForPlayers_Response::CQueuedMatchmakingGameHost_SearchForPlayers_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CQueuedMatchmakingGameHost_SearchForPlayers_Response)
}
CQueuedMatchmakingGameHost_SearchForPlayers_Response::CQueuedMatchmakingGameHost_SearchForPlayers_Response(const CQueuedMatchmakingGameHost_SearchForPlayers_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      players_(from.players_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&searchid_, &from.searchid_,
    static_cast<size_t>(reinterpret_cast<char*>(&rtime_now_) -
    reinterpret_cast<char*>(&searchid_)) + sizeof(rtime_now_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CQueuedMatchmakingGameHost_SearchForPlayers_Response)
}

void CQueuedMatchmakingGameHost_SearchForPlayers_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CQueuedMatchmakingGameHost_SearchForPlayers_Response_steammessages_5fqms_2esteamclient_2eproto.base);
  ::memset(&searchid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rtime_now_) -
      reinterpret_cast<char*>(&searchid_)) + sizeof(rtime_now_));
}

CQueuedMatchmakingGameHost_SearchForPlayers_Response::~CQueuedMatchmakingGameHost_SearchForPlayers_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CQueuedMatchmakingGameHost_SearchForPlayers_Response)
  SharedDtor();
}

void CQueuedMatchmakingGameHost_SearchForPlayers_Response::SharedDtor() {
}

void CQueuedMatchmakingGameHost_SearchForPlayers_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CQueuedMatchmakingGameHost_SearchForPlayers_Response& CQueuedMatchmakingGameHost_SearchForPlayers_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CQueuedMatchmakingGameHost_SearchForPlayers_Response_steammessages_5fqms_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CQueuedMatchmakingGameHost_SearchForPlayers_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CQueuedMatchmakingGameHost_SearchForPlayers_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&searchid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rtime_now_) -
        reinterpret_cast<char*>(&searchid_)) + sizeof(rtime_now_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CQueuedMatchmakingGameHost_SearchForPlayers_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CQueuedMatchmakingGameHost_SearchForPlayers_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.steam.EGameSearchResult gamesearchresult = 1 [default = k_EGameSearchResult_Invalid];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::steam::EGameSearchResult_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_gamesearchresult(static_cast<::proto::steam::EGameSearchResult>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 searchid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_searchid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 poll_frequency = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_poll_frequency(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 matchid = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_matchid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.steam.PlayerFound players = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::PlayerFound::_InternalParse;
          object = msg->add_players();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      // optional uint32 rtime_match_made = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_rtime_match_made(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 rtime_now = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_rtime_now(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CQueuedMatchmakingGameHost_SearchForPlayers_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CQueuedMatchmakingGameHost_SearchForPlayers_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.steam.EGameSearchResult gamesearchresult = 1 [default = k_EGameSearchResult_Invalid];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::steam::EGameSearchResult_IsValid(value)) {
            set_gamesearchresult(static_cast< ::proto::steam::EGameSearchResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 searchid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_searchid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &searchid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 poll_frequency = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_poll_frequency(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &poll_frequency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 matchid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_matchid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &matchid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.PlayerFound players = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rtime_match_made = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_rtime_match_made(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rtime_match_made_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rtime_now = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_rtime_now(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rtime_now_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CQueuedMatchmakingGameHost_SearchForPlayers_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CQueuedMatchmakingGameHost_SearchForPlayers_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CQueuedMatchmakingGameHost_SearchForPlayers_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CQueuedMatchmakingGameHost_SearchForPlayers_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.EGameSearchResult gamesearchresult = 1 [default = k_EGameSearchResult_Invalid];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->gamesearchresult(), output);
  }

  // optional uint64 searchid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->searchid(), output);
  }

  // optional uint32 poll_frequency = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->poll_frequency(), output);
  }

  // optional uint64 matchid = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->matchid(), output);
  }

  // repeated .proto.steam.PlayerFound players = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->players(static_cast<int>(i)),
      output);
  }

  // optional uint32 rtime_match_made = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->rtime_match_made(), output);
  }

  // optional uint32 rtime_now = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->rtime_now(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CQueuedMatchmakingGameHost_SearchForPlayers_Response)
}

::google::protobuf::uint8* CQueuedMatchmakingGameHost_SearchForPlayers_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CQueuedMatchmakingGameHost_SearchForPlayers_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.EGameSearchResult gamesearchresult = 1 [default = k_EGameSearchResult_Invalid];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->gamesearchresult(), target);
  }

  // optional uint64 searchid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->searchid(), target);
  }

  // optional uint32 poll_frequency = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->poll_frequency(), target);
  }

  // optional uint64 matchid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->matchid(), target);
  }

  // repeated .proto.steam.PlayerFound players = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->players(static_cast<int>(i)), target);
  }

  // optional uint32 rtime_match_made = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->rtime_match_made(), target);
  }

  // optional uint32 rtime_now = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->rtime_now(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CQueuedMatchmakingGameHost_SearchForPlayers_Response)
  return target;
}

size_t CQueuedMatchmakingGameHost_SearchForPlayers_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CQueuedMatchmakingGameHost_SearchForPlayers_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.PlayerFound players = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->players_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->players(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint64 searchid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->searchid());
    }

    // optional .proto.steam.EGameSearchResult gamesearchresult = 1 [default = k_EGameSearchResult_Invalid];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gamesearchresult());
    }

    // optional uint32 poll_frequency = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->poll_frequency());
    }

    // optional uint64 matchid = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->matchid());
    }

    // optional uint32 rtime_match_made = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rtime_match_made());
    }

    // optional uint32 rtime_now = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rtime_now());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CQueuedMatchmakingGameHost_SearchForPlayers_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CQueuedMatchmakingGameHost_SearchForPlayers_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CQueuedMatchmakingGameHost_SearchForPlayers_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CQueuedMatchmakingGameHost_SearchForPlayers_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CQueuedMatchmakingGameHost_SearchForPlayers_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CQueuedMatchmakingGameHost_SearchForPlayers_Response)
    MergeFrom(*source);
  }
}

void CQueuedMatchmakingGameHost_SearchForPlayers_Response::MergeFrom(const CQueuedMatchmakingGameHost_SearchForPlayers_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CQueuedMatchmakingGameHost_SearchForPlayers_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      searchid_ = from.searchid_;
    }
    if (cached_has_bits & 0x00000002u) {
      gamesearchresult_ = from.gamesearchresult_;
    }
    if (cached_has_bits & 0x00000004u) {
      poll_frequency_ = from.poll_frequency_;
    }
    if (cached_has_bits & 0x00000008u) {
      matchid_ = from.matchid_;
    }
    if (cached_has_bits & 0x00000010u) {
      rtime_match_made_ = from.rtime_match_made_;
    }
    if (cached_has_bits & 0x00000020u) {
      rtime_now_ = from.rtime_now_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CQueuedMatchmakingGameHost_SearchForPlayers_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CQueuedMatchmakingGameHost_SearchForPlayers_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CQueuedMatchmakingGameHost_SearchForPlayers_Response::CopyFrom(const CQueuedMatchmakingGameHost_SearchForPlayers_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CQueuedMatchmakingGameHost_SearchForPlayers_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CQueuedMatchmakingGameHost_SearchForPlayers_Response::IsInitialized() const {
  return true;
}

void CQueuedMatchmakingGameHost_SearchForPlayers_Response::Swap(CQueuedMatchmakingGameHost_SearchForPlayers_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CQueuedMatchmakingGameHost_SearchForPlayers_Response::InternalSwap(CQueuedMatchmakingGameHost_SearchForPlayers_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&players_)->InternalSwap(CastToBase(&other->players_));
  swap(searchid_, other->searchid_);
  swap(gamesearchresult_, other->gamesearchresult_);
  swap(poll_frequency_, other->poll_frequency_);
  swap(matchid_, other->matchid_);
  swap(rtime_match_made_, other->rtime_match_made_);
  swap(rtime_now_, other->rtime_now_);
}

::google::protobuf::Metadata CQueuedMatchmakingGameHost_SearchForPlayers_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fqms_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fqms_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PlayerResult::InitAsDefaultInstance() {
}
class PlayerResult::HasBitSetters {
 public:
  static void set_has_steamid(PlayerResult* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_value(PlayerResult* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerResult::kSteamidFieldNumber;
const int PlayerResult::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerResult::PlayerResult()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.PlayerResult)
}
PlayerResult::PlayerResult(const PlayerResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.PlayerResult)
}

void PlayerResult::SharedCtor() {
  ::memset(&steamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&steamid_)) + sizeof(value_));
}

PlayerResult::~PlayerResult() {
  // @@protoc_insertion_point(destructor:proto.steam.PlayerResult)
  SharedDtor();
}

void PlayerResult::SharedDtor() {
}

void PlayerResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerResult& PlayerResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerResult_steammessages_5fqms_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void PlayerResult::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.PlayerResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerResult::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerResult*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_value(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.PlayerResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_value(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.PlayerResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.PlayerResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.PlayerResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional uint32 value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.PlayerResult)
}

::google::protobuf::uint8* PlayerResult::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.PlayerResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional uint32 value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.PlayerResult)
  return target;
}

size_t PlayerResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.PlayerResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.PlayerResult)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerResult* source =
      ::google::protobuf::DynamicCastToGenerated<PlayerResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.PlayerResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.PlayerResult)
    MergeFrom(*source);
  }
}

void PlayerResult::MergeFrom(const PlayerResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.PlayerResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.PlayerResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerResult::CopyFrom(const PlayerResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.PlayerResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerResult::IsInitialized() const {
  return true;
}

void PlayerResult::Swap(PlayerResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerResult::InternalSwap(PlayerResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
  swap(value_, other->value_);
}

::google::protobuf::Metadata PlayerResult::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fqms_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fqms_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::InitAsDefaultInstance() {
}
class CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::HasBitSetters {
 public:
  static void set_has_appid(CQueuedMatchmakingGameHost_SubmitPlayerResult_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_matchid(CQueuedMatchmakingGameHost_SubmitPlayerResult_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::kAppidFieldNumber;
const int CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::kMatchidFieldNumber;
const int CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::kPlayerResultsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::CQueuedMatchmakingGameHost_SubmitPlayerResult_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CQueuedMatchmakingGameHost_SubmitPlayerResult_Request)
}
CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::CQueuedMatchmakingGameHost_SubmitPlayerResult_Request(const CQueuedMatchmakingGameHost_SubmitPlayerResult_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      player_results_(from.player_results_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&matchid_, &from.matchid_,
    static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&matchid_)) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CQueuedMatchmakingGameHost_SubmitPlayerResult_Request)
}

void CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CQueuedMatchmakingGameHost_SubmitPlayerResult_Request_steammessages_5fqms_2esteamclient_2eproto.base);
  ::memset(&matchid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&appid_) -
      reinterpret_cast<char*>(&matchid_)) + sizeof(appid_));
}

CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::~CQueuedMatchmakingGameHost_SubmitPlayerResult_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CQueuedMatchmakingGameHost_SubmitPlayerResult_Request)
  SharedDtor();
}

void CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::SharedDtor() {
}

void CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CQueuedMatchmakingGameHost_SubmitPlayerResult_Request& CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CQueuedMatchmakingGameHost_SubmitPlayerResult_Request_steammessages_5fqms_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CQueuedMatchmakingGameHost_SubmitPlayerResult_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_results_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&matchid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&appid_) -
        reinterpret_cast<char*>(&matchid_)) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CQueuedMatchmakingGameHost_SubmitPlayerResult_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 matchid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_matchid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.steam.PlayerResult player_results = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::PlayerResult::_InternalParse;
          object = msg->add_player_results();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CQueuedMatchmakingGameHost_SubmitPlayerResult_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 matchid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_matchid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &matchid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.PlayerResult player_results = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_player_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CQueuedMatchmakingGameHost_SubmitPlayerResult_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CQueuedMatchmakingGameHost_SubmitPlayerResult_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CQueuedMatchmakingGameHost_SubmitPlayerResult_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint64 matchid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->matchid(), output);
  }

  // repeated .proto.steam.PlayerResult player_results = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_results_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->player_results(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CQueuedMatchmakingGameHost_SubmitPlayerResult_Request)
}

::google::protobuf::uint8* CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CQueuedMatchmakingGameHost_SubmitPlayerResult_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint64 matchid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->matchid(), target);
  }

  // repeated .proto.steam.PlayerResult player_results = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_results_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->player_results(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CQueuedMatchmakingGameHost_SubmitPlayerResult_Request)
  return target;
}

size_t CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CQueuedMatchmakingGameHost_SubmitPlayerResult_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.PlayerResult player_results = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->player_results_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->player_results(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 matchid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->matchid());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CQueuedMatchmakingGameHost_SubmitPlayerResult_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CQueuedMatchmakingGameHost_SubmitPlayerResult_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CQueuedMatchmakingGameHost_SubmitPlayerResult_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CQueuedMatchmakingGameHost_SubmitPlayerResult_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CQueuedMatchmakingGameHost_SubmitPlayerResult_Request)
    MergeFrom(*source);
  }
}

void CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::MergeFrom(const CQueuedMatchmakingGameHost_SubmitPlayerResult_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CQueuedMatchmakingGameHost_SubmitPlayerResult_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_results_.MergeFrom(from.player_results_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      matchid_ = from.matchid_;
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CQueuedMatchmakingGameHost_SubmitPlayerResult_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::CopyFrom(const CQueuedMatchmakingGameHost_SubmitPlayerResult_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CQueuedMatchmakingGameHost_SubmitPlayerResult_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::IsInitialized() const {
  return true;
}

void CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::Swap(CQueuedMatchmakingGameHost_SubmitPlayerResult_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::InternalSwap(CQueuedMatchmakingGameHost_SubmitPlayerResult_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&player_results_)->InternalSwap(CastToBase(&other->player_results_));
  swap(matchid_, other->matchid_);
  swap(appid_, other->appid_);
}

::google::protobuf::Metadata CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fqms_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fqms_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CQueuedMatchmakingGameHost_SubmitPlayerResult_Response::InitAsDefaultInstance() {
}
class CQueuedMatchmakingGameHost_SubmitPlayerResult_Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CQueuedMatchmakingGameHost_SubmitPlayerResult_Response::CQueuedMatchmakingGameHost_SubmitPlayerResult_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CQueuedMatchmakingGameHost_SubmitPlayerResult_Response)
}
CQueuedMatchmakingGameHost_SubmitPlayerResult_Response::CQueuedMatchmakingGameHost_SubmitPlayerResult_Response(const CQueuedMatchmakingGameHost_SubmitPlayerResult_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CQueuedMatchmakingGameHost_SubmitPlayerResult_Response)
}

void CQueuedMatchmakingGameHost_SubmitPlayerResult_Response::SharedCtor() {
}

CQueuedMatchmakingGameHost_SubmitPlayerResult_Response::~CQueuedMatchmakingGameHost_SubmitPlayerResult_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CQueuedMatchmakingGameHost_SubmitPlayerResult_Response)
  SharedDtor();
}

void CQueuedMatchmakingGameHost_SubmitPlayerResult_Response::SharedDtor() {
}

void CQueuedMatchmakingGameHost_SubmitPlayerResult_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CQueuedMatchmakingGameHost_SubmitPlayerResult_Response& CQueuedMatchmakingGameHost_SubmitPlayerResult_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CQueuedMatchmakingGameHost_SubmitPlayerResult_Response_steammessages_5fqms_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CQueuedMatchmakingGameHost_SubmitPlayerResult_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CQueuedMatchmakingGameHost_SubmitPlayerResult_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CQueuedMatchmakingGameHost_SubmitPlayerResult_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CQueuedMatchmakingGameHost_SubmitPlayerResult_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CQueuedMatchmakingGameHost_SubmitPlayerResult_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CQueuedMatchmakingGameHost_SubmitPlayerResult_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CQueuedMatchmakingGameHost_SubmitPlayerResult_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CQueuedMatchmakingGameHost_SubmitPlayerResult_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CQueuedMatchmakingGameHost_SubmitPlayerResult_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CQueuedMatchmakingGameHost_SubmitPlayerResult_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CQueuedMatchmakingGameHost_SubmitPlayerResult_Response)
}

::google::protobuf::uint8* CQueuedMatchmakingGameHost_SubmitPlayerResult_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CQueuedMatchmakingGameHost_SubmitPlayerResult_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CQueuedMatchmakingGameHost_SubmitPlayerResult_Response)
  return target;
}

size_t CQueuedMatchmakingGameHost_SubmitPlayerResult_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CQueuedMatchmakingGameHost_SubmitPlayerResult_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CQueuedMatchmakingGameHost_SubmitPlayerResult_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CQueuedMatchmakingGameHost_SubmitPlayerResult_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CQueuedMatchmakingGameHost_SubmitPlayerResult_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CQueuedMatchmakingGameHost_SubmitPlayerResult_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CQueuedMatchmakingGameHost_SubmitPlayerResult_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CQueuedMatchmakingGameHost_SubmitPlayerResult_Response)
    MergeFrom(*source);
  }
}

void CQueuedMatchmakingGameHost_SubmitPlayerResult_Response::MergeFrom(const CQueuedMatchmakingGameHost_SubmitPlayerResult_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CQueuedMatchmakingGameHost_SubmitPlayerResult_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CQueuedMatchmakingGameHost_SubmitPlayerResult_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CQueuedMatchmakingGameHost_SubmitPlayerResult_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CQueuedMatchmakingGameHost_SubmitPlayerResult_Response::CopyFrom(const CQueuedMatchmakingGameHost_SubmitPlayerResult_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CQueuedMatchmakingGameHost_SubmitPlayerResult_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CQueuedMatchmakingGameHost_SubmitPlayerResult_Response::IsInitialized() const {
  return true;
}

void CQueuedMatchmakingGameHost_SubmitPlayerResult_Response::Swap(CQueuedMatchmakingGameHost_SubmitPlayerResult_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CQueuedMatchmakingGameHost_SubmitPlayerResult_Response::InternalSwap(CQueuedMatchmakingGameHost_SubmitPlayerResult_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CQueuedMatchmakingGameHost_SubmitPlayerResult_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fqms_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fqms_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CQueuedMatchmakingGameHost_EndGame_Request::InitAsDefaultInstance() {
}
class CQueuedMatchmakingGameHost_EndGame_Request::HasBitSetters {
 public:
  static void set_has_appid(CQueuedMatchmakingGameHost_EndGame_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_matchid(CQueuedMatchmakingGameHost_EndGame_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CQueuedMatchmakingGameHost_EndGame_Request::kAppidFieldNumber;
const int CQueuedMatchmakingGameHost_EndGame_Request::kMatchidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CQueuedMatchmakingGameHost_EndGame_Request::CQueuedMatchmakingGameHost_EndGame_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CQueuedMatchmakingGameHost_EndGame_Request)
}
CQueuedMatchmakingGameHost_EndGame_Request::CQueuedMatchmakingGameHost_EndGame_Request(const CQueuedMatchmakingGameHost_EndGame_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&matchid_, &from.matchid_,
    static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&matchid_)) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CQueuedMatchmakingGameHost_EndGame_Request)
}

void CQueuedMatchmakingGameHost_EndGame_Request::SharedCtor() {
  ::memset(&matchid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&appid_) -
      reinterpret_cast<char*>(&matchid_)) + sizeof(appid_));
}

CQueuedMatchmakingGameHost_EndGame_Request::~CQueuedMatchmakingGameHost_EndGame_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CQueuedMatchmakingGameHost_EndGame_Request)
  SharedDtor();
}

void CQueuedMatchmakingGameHost_EndGame_Request::SharedDtor() {
}

void CQueuedMatchmakingGameHost_EndGame_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CQueuedMatchmakingGameHost_EndGame_Request& CQueuedMatchmakingGameHost_EndGame_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CQueuedMatchmakingGameHost_EndGame_Request_steammessages_5fqms_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CQueuedMatchmakingGameHost_EndGame_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CQueuedMatchmakingGameHost_EndGame_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&matchid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&appid_) -
        reinterpret_cast<char*>(&matchid_)) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CQueuedMatchmakingGameHost_EndGame_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CQueuedMatchmakingGameHost_EndGame_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 matchid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_matchid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CQueuedMatchmakingGameHost_EndGame_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CQueuedMatchmakingGameHost_EndGame_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 matchid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_matchid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &matchid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CQueuedMatchmakingGameHost_EndGame_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CQueuedMatchmakingGameHost_EndGame_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CQueuedMatchmakingGameHost_EndGame_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CQueuedMatchmakingGameHost_EndGame_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint64 matchid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->matchid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CQueuedMatchmakingGameHost_EndGame_Request)
}

::google::protobuf::uint8* CQueuedMatchmakingGameHost_EndGame_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CQueuedMatchmakingGameHost_EndGame_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint64 matchid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->matchid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CQueuedMatchmakingGameHost_EndGame_Request)
  return target;
}

size_t CQueuedMatchmakingGameHost_EndGame_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CQueuedMatchmakingGameHost_EndGame_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 matchid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->matchid());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CQueuedMatchmakingGameHost_EndGame_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CQueuedMatchmakingGameHost_EndGame_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CQueuedMatchmakingGameHost_EndGame_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CQueuedMatchmakingGameHost_EndGame_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CQueuedMatchmakingGameHost_EndGame_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CQueuedMatchmakingGameHost_EndGame_Request)
    MergeFrom(*source);
  }
}

void CQueuedMatchmakingGameHost_EndGame_Request::MergeFrom(const CQueuedMatchmakingGameHost_EndGame_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CQueuedMatchmakingGameHost_EndGame_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      matchid_ = from.matchid_;
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CQueuedMatchmakingGameHost_EndGame_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CQueuedMatchmakingGameHost_EndGame_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CQueuedMatchmakingGameHost_EndGame_Request::CopyFrom(const CQueuedMatchmakingGameHost_EndGame_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CQueuedMatchmakingGameHost_EndGame_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CQueuedMatchmakingGameHost_EndGame_Request::IsInitialized() const {
  return true;
}

void CQueuedMatchmakingGameHost_EndGame_Request::Swap(CQueuedMatchmakingGameHost_EndGame_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CQueuedMatchmakingGameHost_EndGame_Request::InternalSwap(CQueuedMatchmakingGameHost_EndGame_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(matchid_, other->matchid_);
  swap(appid_, other->appid_);
}

::google::protobuf::Metadata CQueuedMatchmakingGameHost_EndGame_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fqms_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fqms_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CQueuedMatchmakingGameHost_EndGame_Response::InitAsDefaultInstance() {
}
class CQueuedMatchmakingGameHost_EndGame_Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CQueuedMatchmakingGameHost_EndGame_Response::CQueuedMatchmakingGameHost_EndGame_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CQueuedMatchmakingGameHost_EndGame_Response)
}
CQueuedMatchmakingGameHost_EndGame_Response::CQueuedMatchmakingGameHost_EndGame_Response(const CQueuedMatchmakingGameHost_EndGame_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CQueuedMatchmakingGameHost_EndGame_Response)
}

void CQueuedMatchmakingGameHost_EndGame_Response::SharedCtor() {
}

CQueuedMatchmakingGameHost_EndGame_Response::~CQueuedMatchmakingGameHost_EndGame_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CQueuedMatchmakingGameHost_EndGame_Response)
  SharedDtor();
}

void CQueuedMatchmakingGameHost_EndGame_Response::SharedDtor() {
}

void CQueuedMatchmakingGameHost_EndGame_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CQueuedMatchmakingGameHost_EndGame_Response& CQueuedMatchmakingGameHost_EndGame_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CQueuedMatchmakingGameHost_EndGame_Response_steammessages_5fqms_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CQueuedMatchmakingGameHost_EndGame_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CQueuedMatchmakingGameHost_EndGame_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CQueuedMatchmakingGameHost_EndGame_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CQueuedMatchmakingGameHost_EndGame_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CQueuedMatchmakingGameHost_EndGame_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CQueuedMatchmakingGameHost_EndGame_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CQueuedMatchmakingGameHost_EndGame_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CQueuedMatchmakingGameHost_EndGame_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CQueuedMatchmakingGameHost_EndGame_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CQueuedMatchmakingGameHost_EndGame_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CQueuedMatchmakingGameHost_EndGame_Response)
}

::google::protobuf::uint8* CQueuedMatchmakingGameHost_EndGame_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CQueuedMatchmakingGameHost_EndGame_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CQueuedMatchmakingGameHost_EndGame_Response)
  return target;
}

size_t CQueuedMatchmakingGameHost_EndGame_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CQueuedMatchmakingGameHost_EndGame_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CQueuedMatchmakingGameHost_EndGame_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CQueuedMatchmakingGameHost_EndGame_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CQueuedMatchmakingGameHost_EndGame_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CQueuedMatchmakingGameHost_EndGame_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CQueuedMatchmakingGameHost_EndGame_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CQueuedMatchmakingGameHost_EndGame_Response)
    MergeFrom(*source);
  }
}

void CQueuedMatchmakingGameHost_EndGame_Response::MergeFrom(const CQueuedMatchmakingGameHost_EndGame_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CQueuedMatchmakingGameHost_EndGame_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CQueuedMatchmakingGameHost_EndGame_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CQueuedMatchmakingGameHost_EndGame_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CQueuedMatchmakingGameHost_EndGame_Response::CopyFrom(const CQueuedMatchmakingGameHost_EndGame_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CQueuedMatchmakingGameHost_EndGame_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CQueuedMatchmakingGameHost_EndGame_Response::IsInitialized() const {
  return true;
}

void CQueuedMatchmakingGameHost_EndGame_Response::Swap(CQueuedMatchmakingGameHost_EndGame_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CQueuedMatchmakingGameHost_EndGame_Response::InternalSwap(CQueuedMatchmakingGameHost_EndGame_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CQueuedMatchmakingGameHost_EndGame_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fqms_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fqms_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

QueuedMatchmaking::~QueuedMatchmaking() {}

const ::google::protobuf::ServiceDescriptor* QueuedMatchmaking::descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_steammessages_5fqms_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5fqms_2esteamclient_2eproto[0];
}

const ::google::protobuf::ServiceDescriptor* QueuedMatchmaking::GetDescriptor() {
  return descriptor();
}

void QueuedMatchmaking::SearchForGame(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CQueuedMatchmaking_SearchForGame_Request*,
                         ::proto::steam::CQueuedMatchmaking_SearchForGame_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SearchForGame() not implemented.");
  done->Run();
}

void QueuedMatchmaking::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5fqms_2esteamclient_2eproto[0]);
  switch(method->index()) {
    case 0:
      SearchForGame(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CQueuedMatchmaking_SearchForGame_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CQueuedMatchmaking_SearchForGame_Response*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& QueuedMatchmaking::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CQueuedMatchmaking_SearchForGame_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& QueuedMatchmaking::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CQueuedMatchmaking_SearchForGame_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

QueuedMatchmaking_Stub::QueuedMatchmaking_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
QueuedMatchmaking_Stub::QueuedMatchmaking_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
QueuedMatchmaking_Stub::~QueuedMatchmaking_Stub() {
  if (owns_channel_) delete channel_;
}

void QueuedMatchmaking_Stub::SearchForGame(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CQueuedMatchmaking_SearchForGame_Request* request,
                              ::proto::steam::CQueuedMatchmaking_SearchForGame_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
// ===================================================================

QueuedMatchmakingGameHost::~QueuedMatchmakingGameHost() {}

const ::google::protobuf::ServiceDescriptor* QueuedMatchmakingGameHost::descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_steammessages_5fqms_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5fqms_2esteamclient_2eproto[1];
}

const ::google::protobuf::ServiceDescriptor* QueuedMatchmakingGameHost::GetDescriptor() {
  return descriptor();
}

void QueuedMatchmakingGameHost::SearchForPlayers(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CQueuedMatchmakingGameHost_SearchForPlayers_Request*,
                         ::proto::steam::CQueuedMatchmakingGameHost_SearchForPlayers_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SearchForPlayers() not implemented.");
  done->Run();
}

void QueuedMatchmakingGameHost::SubmitPlayerResult(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CQueuedMatchmakingGameHost_SubmitPlayerResult_Request*,
                         ::proto::steam::CQueuedMatchmakingGameHost_SubmitPlayerResult_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SubmitPlayerResult() not implemented.");
  done->Run();
}

void QueuedMatchmakingGameHost::EndGame(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CQueuedMatchmakingGameHost_EndGame_Request*,
                         ::proto::steam::CQueuedMatchmakingGameHost_EndGame_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method EndGame() not implemented.");
  done->Run();
}

void QueuedMatchmakingGameHost::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5fqms_2esteamclient_2eproto[1]);
  switch(method->index()) {
    case 0:
      SearchForPlayers(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CQueuedMatchmakingGameHost_SearchForPlayers_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CQueuedMatchmakingGameHost_SearchForPlayers_Response*>(response),
             done);
      break;
    case 1:
      SubmitPlayerResult(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CQueuedMatchmakingGameHost_SubmitPlayerResult_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CQueuedMatchmakingGameHost_SubmitPlayerResult_Response*>(response),
             done);
      break;
    case 2:
      EndGame(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CQueuedMatchmakingGameHost_EndGame_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CQueuedMatchmakingGameHost_EndGame_Response*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& QueuedMatchmakingGameHost::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CQueuedMatchmakingGameHost_SearchForPlayers_Request::default_instance();
    case 1:
      return ::proto::steam::CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::default_instance();
    case 2:
      return ::proto::steam::CQueuedMatchmakingGameHost_EndGame_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& QueuedMatchmakingGameHost::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CQueuedMatchmakingGameHost_SearchForPlayers_Response::default_instance();
    case 1:
      return ::proto::steam::CQueuedMatchmakingGameHost_SubmitPlayerResult_Response::default_instance();
    case 2:
      return ::proto::steam::CQueuedMatchmakingGameHost_EndGame_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

QueuedMatchmakingGameHost_Stub::QueuedMatchmakingGameHost_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
QueuedMatchmakingGameHost_Stub::QueuedMatchmakingGameHost_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
QueuedMatchmakingGameHost_Stub::~QueuedMatchmakingGameHost_Stub() {
  if (owns_channel_) delete channel_;
}

void QueuedMatchmakingGameHost_Stub::SearchForPlayers(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CQueuedMatchmakingGameHost_SearchForPlayers_Request* request,
                              ::proto::steam::CQueuedMatchmakingGameHost_SearchForPlayers_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void QueuedMatchmakingGameHost_Stub::SubmitPlayerResult(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CQueuedMatchmakingGameHost_SubmitPlayerResult_Request* request,
                              ::proto::steam::CQueuedMatchmakingGameHost_SubmitPlayerResult_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void QueuedMatchmakingGameHost_Stub::EndGame(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CQueuedMatchmakingGameHost_EndGame_Request* request,
                              ::proto::steam::CQueuedMatchmakingGameHost_EndGame_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace steam
}  // namespace proto
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::proto::steam::GameSearchParam* Arena::CreateMaybeMessage< ::proto::steam::GameSearchParam >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::GameSearchParam >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CQueuedMatchmaking_SearchForGame_Request* Arena::CreateMaybeMessage< ::proto::steam::CQueuedMatchmaking_SearchForGame_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CQueuedMatchmaking_SearchForGame_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CQueuedMatchmaking_SearchForGame_Response* Arena::CreateMaybeMessage< ::proto::steam::CQueuedMatchmaking_SearchForGame_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CQueuedMatchmaking_SearchForGame_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CQueuedMatchmakingGameHost_SearchForPlayers_Request* Arena::CreateMaybeMessage< ::proto::steam::CQueuedMatchmakingGameHost_SearchForPlayers_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CQueuedMatchmakingGameHost_SearchForPlayers_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::PlayerFound* Arena::CreateMaybeMessage< ::proto::steam::PlayerFound >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::PlayerFound >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CQueuedMatchmakingGameHost_SearchForPlayers_Response* Arena::CreateMaybeMessage< ::proto::steam::CQueuedMatchmakingGameHost_SearchForPlayers_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CQueuedMatchmakingGameHost_SearchForPlayers_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::PlayerResult* Arena::CreateMaybeMessage< ::proto::steam::PlayerResult >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::PlayerResult >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CQueuedMatchmakingGameHost_SubmitPlayerResult_Request* Arena::CreateMaybeMessage< ::proto::steam::CQueuedMatchmakingGameHost_SubmitPlayerResult_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CQueuedMatchmakingGameHost_SubmitPlayerResult_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CQueuedMatchmakingGameHost_SubmitPlayerResult_Response* Arena::CreateMaybeMessage< ::proto::steam::CQueuedMatchmakingGameHost_SubmitPlayerResult_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CQueuedMatchmakingGameHost_SubmitPlayerResult_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CQueuedMatchmakingGameHost_EndGame_Request* Arena::CreateMaybeMessage< ::proto::steam::CQueuedMatchmakingGameHost_EndGame_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CQueuedMatchmakingGameHost_EndGame_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CQueuedMatchmakingGameHost_EndGame_Response* Arena::CreateMaybeMessage< ::proto::steam::CQueuedMatchmakingGameHost_EndGame_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CQueuedMatchmakingGameHost_EndGame_Response >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
