// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_clientserver.proto

#include "steammessages_clientserver.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_encrypted_5fapp_5fticket_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_EncryptedAppTicket_encrypted_5fapp_5fticket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fbase_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgAuthTicket_steammessages_5fbase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fclientserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance_steammessages_5fclientserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fclientserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientAMGetPersonaNameHistory_IdInstance_steammessages_5fclientserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fclientserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientAppInfoRequest_App_steammessages_5fclientserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fclientserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientAppInfoResponse_App_Section_steammessages_5fclientserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fclientserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientAppMinutesPlayedData_AppMinutesPlayedData_steammessages_5fclientserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fclientserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientClanState_Event_steammessages_5fclientserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fclientserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientClanState_NameInfo_steammessages_5fclientserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fclientserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientClanState_UserCounts_steammessages_5fclientserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fclientserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientConnectionStats_Stats_Logon_steammessages_5fclientserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fclientserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientConnectionStats_Stats_UDP_steammessages_5fclientserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fclientserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientGamesPlayed_GamePlayed_steammessages_5fclientserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fclientserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientGetClientAppListResponse_App_DLC_steammessages_5fclientserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fclientserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientGetClientDetailsResponse_Game_steammessages_5fclientserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fclientserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientGetUserStatsResponse_Achievement_Blocks_steammessages_5fclientserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fclientserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientGetUserStatsResponse_Stats_steammessages_5fclientserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fclientserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientLBSGetLBEntriesResponse_Entry_steammessages_5fclientserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fclientserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientLicenseList_License_steammessages_5fclientserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fclientserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientMMSGetLobbyListResponse_Lobby_steammessages_5fclientserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fclientserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientMMSGetLobbyList_Filter_steammessages_5fclientserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fclientserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientMMSJoinLobbyResponse_Member_steammessages_5fclientserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fclientserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientMMSLobbyData_Member_steammessages_5fclientserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fclientserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientPICSAccessTokenResponse_AppToken_steammessages_5fclientserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fclientserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientPICSAccessTokenResponse_PackageToken_steammessages_5fclientserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fclientserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientPICSChangesSinceResponse_AppChange_steammessages_5fclientserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fclientserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientPICSChangesSinceResponse_PackageChange_steammessages_5fclientserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fclientserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientPICSProductInfoRequest_AppInfo_steammessages_5fclientserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fclientserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientPICSProductInfoRequest_PackageInfo_steammessages_5fclientserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fclientserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientPICSProductInfoResponse_AppInfo_steammessages_5fclientserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fclientserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientPICSProductInfoResponse_PackageInfo_steammessages_5fclientserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fclientserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientPackageInfoResponse_Package_steammessages_5fclientserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fclientserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientRequestedClientStats_StatsToSend_steammessages_5fclientserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fclientserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientServerList_Server_steammessages_5fclientserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fclientserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientServersAvailable_Server_Types_Available_steammessages_5fclientserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fclientserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientStat2_StatDetail_steammessages_5fclientserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fclientserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientStatsUpdated_Updated_Stats_steammessages_5fclientserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fclientserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientStoreUserStats2_Stats_steammessages_5fclientserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fclientserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientStoreUserStatsResponse_Stats_Failed_Validation_steammessages_5fclientserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fclientserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientStoreUserStats_Stats_To_Store_steammessages_5fclientserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fclientserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientUFSGetFileListForAppResponse_File_steammessages_5fclientserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fclientserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientUFSUploadCommitResponse_File_steammessages_5fclientserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fclientserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientUFSUploadCommit_File_steammessages_5fclientserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fclientserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGSPlayerList_Player_steammessages_5fclientserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fclientserver_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_steammessages_5fclientserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fclientserver_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CMsgClientAppInfoResponse_App_steammessages_5fclientserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fclientserver_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CMsgClientConnectionStats_Stats_VConn_steammessages_5fclientserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fclientserver_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CMsgClientGetClientAppListResponse_App_steammessages_5fclientserver_2eproto;
namespace proto {
namespace steam {
class CMsgClientUDSP2PSessionStartedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientUDSP2PSessionStarted> _instance;
} _CMsgClientUDSP2PSessionStarted_default_instance_;
class CMsgClientUDSP2PSessionEndedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientUDSP2PSessionEnded> _instance;
} _CMsgClientUDSP2PSessionEnded_default_instance_;
class CMsgClientRegisterAuthTicketWithCMDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientRegisterAuthTicketWithCM> _instance;
} _CMsgClientRegisterAuthTicketWithCM_default_instance_;
class CMsgClientTicketAuthCompleteDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientTicketAuthComplete> _instance;
} _CMsgClientTicketAuthComplete_default_instance_;
class CMsgClientCMListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientCMList> _instance;
} _CMsgClientCMList_default_instance_;
class CMsgClientP2PConnectionInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientP2PConnectionInfo> _instance;
} _CMsgClientP2PConnectionInfo_default_instance_;
class CMsgClientP2PConnectionFailInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientP2PConnectionFailInfo> _instance;
} _CMsgClientP2PConnectionFailInfo_default_instance_;
class CMsgClientNetworkingCertRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientNetworkingCertRequest> _instance;
} _CMsgClientNetworkingCertRequest_default_instance_;
class CMsgClientNetworkingCertReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientNetworkingCertReply> _instance;
} _CMsgClientNetworkingCertReply_default_instance_;
class CMsgClientGetAppOwnershipTicketDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientGetAppOwnershipTicket> _instance;
} _CMsgClientGetAppOwnershipTicket_default_instance_;
class CMsgClientGetAppOwnershipTicketResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientGetAppOwnershipTicketResponse> _instance;
} _CMsgClientGetAppOwnershipTicketResponse_default_instance_;
class CMsgClientSessionTokenDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientSessionToken> _instance;
} _CMsgClientSessionToken_default_instance_;
class CMsgClientGameConnectTokensDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientGameConnectTokens> _instance;
} _CMsgClientGameConnectTokens_default_instance_;
class CMsgGSServerTypeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGSServerType> _instance;
} _CMsgGSServerType_default_instance_;
class CMsgGSStatusReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGSStatusReply> _instance;
} _CMsgGSStatusReply_default_instance_;
class CMsgGSPlayerList_PlayerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGSPlayerList_Player> _instance;
} _CMsgGSPlayerList_Player_default_instance_;
class CMsgGSPlayerListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGSPlayerList> _instance;
} _CMsgGSPlayerList_default_instance_;
class CMsgGSUserPlayingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGSUserPlaying> _instance;
} _CMsgGSUserPlaying_default_instance_;
class CMsgGSDisconnectNoticeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGSDisconnectNotice> _instance;
} _CMsgGSDisconnectNotice_default_instance_;
class CMsgClientGamesPlayed_GamePlayedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientGamesPlayed_GamePlayed> _instance;
} _CMsgClientGamesPlayed_GamePlayed_default_instance_;
class CMsgClientGamesPlayedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientGamesPlayed> _instance;
} _CMsgClientGamesPlayed_default_instance_;
class CMsgGSApproveDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGSApprove> _instance;
} _CMsgGSApprove_default_instance_;
class CMsgGSDenyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGSDeny> _instance;
} _CMsgGSDeny_default_instance_;
class CMsgGSKickDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGSKick> _instance;
} _CMsgGSKick_default_instance_;
class CMsgClientAuthListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientAuthList> _instance;
} _CMsgClientAuthList_default_instance_;
class CMsgClientAuthListAckDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientAuthListAck> _instance;
} _CMsgClientAuthListAck_default_instance_;
class CMsgClientLicenseList_LicenseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientLicenseList_License> _instance;
} _CMsgClientLicenseList_License_default_instance_;
class CMsgClientLicenseListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientLicenseList> _instance;
} _CMsgClientLicenseList_default_instance_;
class CMsgClientLBSSetScoreDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientLBSSetScore> _instance;
} _CMsgClientLBSSetScore_default_instance_;
class CMsgClientLBSSetScoreResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientLBSSetScoreResponse> _instance;
} _CMsgClientLBSSetScoreResponse_default_instance_;
class CMsgClientLBSSetUGCDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientLBSSetUGC> _instance;
} _CMsgClientLBSSetUGC_default_instance_;
class CMsgClientLBSSetUGCResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientLBSSetUGCResponse> _instance;
} _CMsgClientLBSSetUGCResponse_default_instance_;
class CMsgClientLBSFindOrCreateLBDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientLBSFindOrCreateLB> _instance;
} _CMsgClientLBSFindOrCreateLB_default_instance_;
class CMsgClientLBSFindOrCreateLBResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientLBSFindOrCreateLBResponse> _instance;
} _CMsgClientLBSFindOrCreateLBResponse_default_instance_;
class CMsgClientLBSGetLBEntriesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientLBSGetLBEntries> _instance;
} _CMsgClientLBSGetLBEntries_default_instance_;
class CMsgClientLBSGetLBEntriesResponse_EntryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientLBSGetLBEntriesResponse_Entry> _instance;
} _CMsgClientLBSGetLBEntriesResponse_Entry_default_instance_;
class CMsgClientLBSGetLBEntriesResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientLBSGetLBEntriesResponse> _instance;
} _CMsgClientLBSGetLBEntriesResponse_default_instance_;
class CMsgClientAppMinutesPlayedData_AppMinutesPlayedDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientAppMinutesPlayedData_AppMinutesPlayedData> _instance;
} _CMsgClientAppMinutesPlayedData_AppMinutesPlayedData_default_instance_;
class CMsgClientAppMinutesPlayedDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientAppMinutesPlayedData> _instance;
} _CMsgClientAppMinutesPlayedData_default_instance_;
class CMsgClientIsLimitedAccountDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientIsLimitedAccount> _instance;
} _CMsgClientIsLimitedAccount_default_instance_;
class CMsgClientServerList_ServerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientServerList_Server> _instance;
} _CMsgClientServerList_Server_default_instance_;
class CMsgClientServerListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientServerList> _instance;
} _CMsgClientServerList_default_instance_;
class CMsgClientRequestedClientStats_StatsToSendDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientRequestedClientStats_StatsToSend> _instance;
} _CMsgClientRequestedClientStats_StatsToSend_default_instance_;
class CMsgClientRequestedClientStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientRequestedClientStats> _instance;
} _CMsgClientRequestedClientStats_default_instance_;
class CMsgClientStat2_StatDetailDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientStat2_StatDetail> _instance;
} _CMsgClientStat2_StatDetail_default_instance_;
class CMsgClientStat2DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientStat2> _instance;
} _CMsgClientStat2_default_instance_;
class CMsgClientMMSCreateLobbyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientMMSCreateLobby> _instance;
} _CMsgClientMMSCreateLobby_default_instance_;
class CMsgClientMMSCreateLobbyResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientMMSCreateLobbyResponse> _instance;
} _CMsgClientMMSCreateLobbyResponse_default_instance_;
class CMsgClientMMSJoinLobbyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientMMSJoinLobby> _instance;
} _CMsgClientMMSJoinLobby_default_instance_;
class CMsgClientMMSJoinLobbyResponse_MemberDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientMMSJoinLobbyResponse_Member> _instance;
} _CMsgClientMMSJoinLobbyResponse_Member_default_instance_;
class CMsgClientMMSJoinLobbyResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientMMSJoinLobbyResponse> _instance;
} _CMsgClientMMSJoinLobbyResponse_default_instance_;
class CMsgClientMMSLeaveLobbyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientMMSLeaveLobby> _instance;
} _CMsgClientMMSLeaveLobby_default_instance_;
class CMsgClientMMSLeaveLobbyResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientMMSLeaveLobbyResponse> _instance;
} _CMsgClientMMSLeaveLobbyResponse_default_instance_;
class CMsgClientMMSGetLobbyList_FilterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientMMSGetLobbyList_Filter> _instance;
} _CMsgClientMMSGetLobbyList_Filter_default_instance_;
class CMsgClientMMSGetLobbyListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientMMSGetLobbyList> _instance;
} _CMsgClientMMSGetLobbyList_default_instance_;
class CMsgClientMMSGetLobbyListResponse_LobbyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientMMSGetLobbyListResponse_Lobby> _instance;
} _CMsgClientMMSGetLobbyListResponse_Lobby_default_instance_;
class CMsgClientMMSGetLobbyListResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientMMSGetLobbyListResponse> _instance;
} _CMsgClientMMSGetLobbyListResponse_default_instance_;
class CMsgClientMMSSetLobbyDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientMMSSetLobbyData> _instance;
} _CMsgClientMMSSetLobbyData_default_instance_;
class CMsgClientMMSSetLobbyDataResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientMMSSetLobbyDataResponse> _instance;
} _CMsgClientMMSSetLobbyDataResponse_default_instance_;
class CMsgClientMMSGetLobbyDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientMMSGetLobbyData> _instance;
} _CMsgClientMMSGetLobbyData_default_instance_;
class CMsgClientMMSLobbyData_MemberDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientMMSLobbyData_Member> _instance;
} _CMsgClientMMSLobbyData_Member_default_instance_;
class CMsgClientMMSLobbyDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientMMSLobbyData> _instance;
} _CMsgClientMMSLobbyData_default_instance_;
class CMsgClientMMSSendLobbyChatMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientMMSSendLobbyChatMsg> _instance;
} _CMsgClientMMSSendLobbyChatMsg_default_instance_;
class CMsgClientMMSLobbyChatMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientMMSLobbyChatMsg> _instance;
} _CMsgClientMMSLobbyChatMsg_default_instance_;
class CMsgClientMMSSetLobbyOwnerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientMMSSetLobbyOwner> _instance;
} _CMsgClientMMSSetLobbyOwner_default_instance_;
class CMsgClientMMSSetLobbyOwnerResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientMMSSetLobbyOwnerResponse> _instance;
} _CMsgClientMMSSetLobbyOwnerResponse_default_instance_;
class CMsgClientMMSSetLobbyLinkedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientMMSSetLobbyLinked> _instance;
} _CMsgClientMMSSetLobbyLinked_default_instance_;
class CMsgClientMMSSetLobbyGameServerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientMMSSetLobbyGameServer> _instance;
} _CMsgClientMMSSetLobbyGameServer_default_instance_;
class CMsgClientMMSLobbyGameServerSetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientMMSLobbyGameServerSet> _instance;
} _CMsgClientMMSLobbyGameServerSet_default_instance_;
class CMsgClientMMSUserJoinedLobbyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientMMSUserJoinedLobby> _instance;
} _CMsgClientMMSUserJoinedLobby_default_instance_;
class CMsgClientMMSUserLeftLobbyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientMMSUserLeftLobby> _instance;
} _CMsgClientMMSUserLeftLobby_default_instance_;
class CMsgClientMMSInviteToLobbyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientMMSInviteToLobby> _instance;
} _CMsgClientMMSInviteToLobby_default_instance_;
class CMsgClientInviteToGameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientInviteToGame> _instance;
} _CMsgClientInviteToGame_default_instance_;
class CMsgClientChatInviteDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientChatInvite> _instance;
} _CMsgClientChatInvite_default_instance_;
class CMsgClientConnectionStats_Stats_LogonDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientConnectionStats_Stats_Logon> _instance;
} _CMsgClientConnectionStats_Stats_Logon_default_instance_;
class CMsgClientConnectionStats_Stats_UDPDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientConnectionStats_Stats_UDP> _instance;
} _CMsgClientConnectionStats_Stats_UDP_default_instance_;
class CMsgClientConnectionStats_Stats_VConnDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientConnectionStats_Stats_VConn> _instance;
} _CMsgClientConnectionStats_Stats_VConn_default_instance_;
class CMsgClientConnectionStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientConnectionStats> _instance;
} _CMsgClientConnectionStats_default_instance_;
class CMsgClientServersAvailable_Server_Types_AvailableDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientServersAvailable_Server_Types_Available> _instance;
} _CMsgClientServersAvailable_Server_Types_Available_default_instance_;
class CMsgClientServersAvailableDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientServersAvailable> _instance;
} _CMsgClientServersAvailable_default_instance_;
class CMsgClientGetUserStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientGetUserStats> _instance;
} _CMsgClientGetUserStats_default_instance_;
class CMsgClientGetUserStatsResponse_StatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientGetUserStatsResponse_Stats> _instance;
} _CMsgClientGetUserStatsResponse_Stats_default_instance_;
class CMsgClientGetUserStatsResponse_Achievement_BlocksDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientGetUserStatsResponse_Achievement_Blocks> _instance;
} _CMsgClientGetUserStatsResponse_Achievement_Blocks_default_instance_;
class CMsgClientGetUserStatsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientGetUserStatsResponse> _instance;
} _CMsgClientGetUserStatsResponse_default_instance_;
class CMsgClientStoreUserStatsResponse_Stats_Failed_ValidationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientStoreUserStatsResponse_Stats_Failed_Validation> _instance;
} _CMsgClientStoreUserStatsResponse_Stats_Failed_Validation_default_instance_;
class CMsgClientStoreUserStatsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientStoreUserStatsResponse> _instance;
} _CMsgClientStoreUserStatsResponse_default_instance_;
class CMsgClientStoreUserStats2_StatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientStoreUserStats2_Stats> _instance;
} _CMsgClientStoreUserStats2_Stats_default_instance_;
class CMsgClientStoreUserStats2DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientStoreUserStats2> _instance;
} _CMsgClientStoreUserStats2_default_instance_;
class CMsgClientStatsUpdated_Updated_StatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientStatsUpdated_Updated_Stats> _instance;
} _CMsgClientStatsUpdated_Updated_Stats_default_instance_;
class CMsgClientStatsUpdatedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientStatsUpdated> _instance;
} _CMsgClientStatsUpdated_default_instance_;
class CMsgClientStoreUserStats_Stats_To_StoreDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientStoreUserStats_Stats_To_Store> _instance;
} _CMsgClientStoreUserStats_Stats_To_Store_default_instance_;
class CMsgClientStoreUserStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientStoreUserStats> _instance;
} _CMsgClientStoreUserStats_default_instance_;
class CMsgClientGetClientDetailsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientGetClientDetails> _instance;
} _CMsgClientGetClientDetails_default_instance_;
class CMsgClientReportOverlayDetourFailureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientReportOverlayDetourFailure> _instance;
} _CMsgClientReportOverlayDetourFailure_default_instance_;
class CMsgClientGetClientDetailsResponse_GameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientGetClientDetailsResponse_Game> _instance;
} _CMsgClientGetClientDetailsResponse_Game_default_instance_;
class CMsgClientGetClientDetailsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientGetClientDetailsResponse> _instance;
} _CMsgClientGetClientDetailsResponse_default_instance_;
class CMsgClientGetClientAppListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientGetClientAppList> _instance;
} _CMsgClientGetClientAppList_default_instance_;
class CMsgClientGetClientAppListResponse_App_DLCDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientGetClientAppListResponse_App_DLC> _instance;
} _CMsgClientGetClientAppListResponse_App_DLC_default_instance_;
class CMsgClientGetClientAppListResponse_AppDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientGetClientAppListResponse_App> _instance;
} _CMsgClientGetClientAppListResponse_App_default_instance_;
class CMsgClientGetClientAppListResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientGetClientAppListResponse> _instance;
} _CMsgClientGetClientAppListResponse_default_instance_;
class CMsgClientInstallClientAppDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientInstallClientApp> _instance;
} _CMsgClientInstallClientApp_default_instance_;
class CMsgClientInstallClientAppResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientInstallClientAppResponse> _instance;
} _CMsgClientInstallClientAppResponse_default_instance_;
class CMsgClientUninstallClientAppDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientUninstallClientApp> _instance;
} _CMsgClientUninstallClientApp_default_instance_;
class CMsgClientUninstallClientAppResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientUninstallClientAppResponse> _instance;
} _CMsgClientUninstallClientAppResponse_default_instance_;
class CMsgClientSetClientAppUpdateStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientSetClientAppUpdateState> _instance;
} _CMsgClientSetClientAppUpdateState_default_instance_;
class CMsgClientSetClientAppUpdateStateResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientSetClientAppUpdateStateResponse> _instance;
} _CMsgClientSetClientAppUpdateStateResponse_default_instance_;
class CMsgClientUFSUploadFileRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientUFSUploadFileRequest> _instance;
} _CMsgClientUFSUploadFileRequest_default_instance_;
class CMsgClientUFSUploadFileResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientUFSUploadFileResponse> _instance;
} _CMsgClientUFSUploadFileResponse_default_instance_;
class CMsgClientUFSUploadCommit_FileDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientUFSUploadCommit_File> _instance;
} _CMsgClientUFSUploadCommit_File_default_instance_;
class CMsgClientUFSUploadCommitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientUFSUploadCommit> _instance;
} _CMsgClientUFSUploadCommit_default_instance_;
class CMsgClientUFSUploadCommitResponse_FileDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientUFSUploadCommitResponse_File> _instance;
} _CMsgClientUFSUploadCommitResponse_File_default_instance_;
class CMsgClientUFSUploadCommitResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientUFSUploadCommitResponse> _instance;
} _CMsgClientUFSUploadCommitResponse_default_instance_;
class CMsgClientUFSFileChunkDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientUFSFileChunk> _instance;
} _CMsgClientUFSFileChunk_default_instance_;
class CMsgClientUFSTransferHeartbeatDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientUFSTransferHeartbeat> _instance;
} _CMsgClientUFSTransferHeartbeat_default_instance_;
class CMsgClientUFSUploadFileFinishedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientUFSUploadFileFinished> _instance;
} _CMsgClientUFSUploadFileFinished_default_instance_;
class CMsgClientUFSDeleteFileRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientUFSDeleteFileRequest> _instance;
} _CMsgClientUFSDeleteFileRequest_default_instance_;
class CMsgClientUFSDeleteFileResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientUFSDeleteFileResponse> _instance;
} _CMsgClientUFSDeleteFileResponse_default_instance_;
class CMsgClientUFSGetFileListForAppDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientUFSGetFileListForApp> _instance;
} _CMsgClientUFSGetFileListForApp_default_instance_;
class CMsgClientUFSGetFileListForAppResponse_FileDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientUFSGetFileListForAppResponse_File> _instance;
} _CMsgClientUFSGetFileListForAppResponse_File_default_instance_;
class CMsgClientUFSGetFileListForAppResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientUFSGetFileListForAppResponse> _instance;
} _CMsgClientUFSGetFileListForAppResponse_default_instance_;
class CMsgClientUFSDownloadRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientUFSDownloadRequest> _instance;
} _CMsgClientUFSDownloadRequest_default_instance_;
class CMsgClientUFSDownloadResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientUFSDownloadResponse> _instance;
} _CMsgClientUFSDownloadResponse_default_instance_;
class CMsgClientUFSLoginRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientUFSLoginRequest> _instance;
} _CMsgClientUFSLoginRequest_default_instance_;
class CMsgClientUFSLoginResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientUFSLoginResponse> _instance;
} _CMsgClientUFSLoginResponse_default_instance_;
class CMsgClientRequestEncryptedAppTicketDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientRequestEncryptedAppTicket> _instance;
} _CMsgClientRequestEncryptedAppTicket_default_instance_;
class CMsgClientRequestEncryptedAppTicketResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientRequestEncryptedAppTicketResponse> _instance;
} _CMsgClientRequestEncryptedAppTicketResponse_default_instance_;
class CMsgClientWalletInfoUpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientWalletInfoUpdate> _instance;
} _CMsgClientWalletInfoUpdate_default_instance_;
class CMsgClientAppInfoUpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientAppInfoUpdate> _instance;
} _CMsgClientAppInfoUpdate_default_instance_;
class CMsgClientAppInfoChangesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientAppInfoChanges> _instance;
} _CMsgClientAppInfoChanges_default_instance_;
class CMsgClientAppInfoRequest_AppDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientAppInfoRequest_App> _instance;
} _CMsgClientAppInfoRequest_App_default_instance_;
class CMsgClientAppInfoRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientAppInfoRequest> _instance;
} _CMsgClientAppInfoRequest_default_instance_;
class CMsgClientAppInfoResponse_App_SectionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientAppInfoResponse_App_Section> _instance;
} _CMsgClientAppInfoResponse_App_Section_default_instance_;
class CMsgClientAppInfoResponse_AppDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientAppInfoResponse_App> _instance;
} _CMsgClientAppInfoResponse_App_default_instance_;
class CMsgClientAppInfoResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientAppInfoResponse> _instance;
} _CMsgClientAppInfoResponse_default_instance_;
class CMsgClientPackageInfoRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientPackageInfoRequest> _instance;
} _CMsgClientPackageInfoRequest_default_instance_;
class CMsgClientPackageInfoResponse_PackageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientPackageInfoResponse_Package> _instance;
} _CMsgClientPackageInfoResponse_Package_default_instance_;
class CMsgClientPackageInfoResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientPackageInfoResponse> _instance;
} _CMsgClientPackageInfoResponse_default_instance_;
class CMsgClientPICSChangesSinceRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientPICSChangesSinceRequest> _instance;
} _CMsgClientPICSChangesSinceRequest_default_instance_;
class CMsgClientPICSChangesSinceResponse_PackageChangeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientPICSChangesSinceResponse_PackageChange> _instance;
} _CMsgClientPICSChangesSinceResponse_PackageChange_default_instance_;
class CMsgClientPICSChangesSinceResponse_AppChangeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientPICSChangesSinceResponse_AppChange> _instance;
} _CMsgClientPICSChangesSinceResponse_AppChange_default_instance_;
class CMsgClientPICSChangesSinceResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientPICSChangesSinceResponse> _instance;
} _CMsgClientPICSChangesSinceResponse_default_instance_;
class CMsgClientPICSProductInfoRequest_AppInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientPICSProductInfoRequest_AppInfo> _instance;
} _CMsgClientPICSProductInfoRequest_AppInfo_default_instance_;
class CMsgClientPICSProductInfoRequest_PackageInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientPICSProductInfoRequest_PackageInfo> _instance;
} _CMsgClientPICSProductInfoRequest_PackageInfo_default_instance_;
class CMsgClientPICSProductInfoRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientPICSProductInfoRequest> _instance;
} _CMsgClientPICSProductInfoRequest_default_instance_;
class CMsgClientPICSProductInfoResponse_AppInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientPICSProductInfoResponse_AppInfo> _instance;
} _CMsgClientPICSProductInfoResponse_AppInfo_default_instance_;
class CMsgClientPICSProductInfoResponse_PackageInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientPICSProductInfoResponse_PackageInfo> _instance;
} _CMsgClientPICSProductInfoResponse_PackageInfo_default_instance_;
class CMsgClientPICSProductInfoResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientPICSProductInfoResponse> _instance;
} _CMsgClientPICSProductInfoResponse_default_instance_;
class CMsgClientPICSAccessTokenRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientPICSAccessTokenRequest> _instance;
} _CMsgClientPICSAccessTokenRequest_default_instance_;
class CMsgClientPICSAccessTokenResponse_PackageTokenDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientPICSAccessTokenResponse_PackageToken> _instance;
} _CMsgClientPICSAccessTokenResponse_PackageToken_default_instance_;
class CMsgClientPICSAccessTokenResponse_AppTokenDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientPICSAccessTokenResponse_AppToken> _instance;
} _CMsgClientPICSAccessTokenResponse_AppToken_default_instance_;
class CMsgClientPICSAccessTokenResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientPICSAccessTokenResponse> _instance;
} _CMsgClientPICSAccessTokenResponse_default_instance_;
class CMsgClientUFSGetUGCDetailsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientUFSGetUGCDetails> _instance;
} _CMsgClientUFSGetUGCDetails_default_instance_;
class CMsgClientUFSGetUGCDetailsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientUFSGetUGCDetailsResponse> _instance;
} _CMsgClientUFSGetUGCDetailsResponse_default_instance_;
class CMsgClientUFSGetSingleFileInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientUFSGetSingleFileInfo> _instance;
} _CMsgClientUFSGetSingleFileInfo_default_instance_;
class CMsgClientUFSGetSingleFileInfoResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientUFSGetSingleFileInfoResponse> _instance;
} _CMsgClientUFSGetSingleFileInfoResponse_default_instance_;
class CMsgClientUFSShareFileDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientUFSShareFile> _instance;
} _CMsgClientUFSShareFile_default_instance_;
class CMsgClientUFSShareFileResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientUFSShareFileResponse> _instance;
} _CMsgClientUFSShareFileResponse_default_instance_;
class CMsgClientAMGetClanOfficersDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientAMGetClanOfficers> _instance;
} _CMsgClientAMGetClanOfficers_default_instance_;
class CMsgClientAMGetClanOfficersResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientAMGetClanOfficersResponse> _instance;
} _CMsgClientAMGetClanOfficersResponse_default_instance_;
class CMsgClientAMGetPersonaNameHistory_IdInstanceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientAMGetPersonaNameHistory_IdInstance> _instance;
} _CMsgClientAMGetPersonaNameHistory_IdInstance_default_instance_;
class CMsgClientAMGetPersonaNameHistoryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientAMGetPersonaNameHistory> _instance;
} _CMsgClientAMGetPersonaNameHistory_default_instance_;
class CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstanceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance> _instance;
} _CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance_default_instance_;
class CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstanceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance> _instance;
} _CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_default_instance_;
class CMsgClientAMGetPersonaNameHistoryResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientAMGetPersonaNameHistoryResponse> _instance;
} _CMsgClientAMGetPersonaNameHistoryResponse_default_instance_;
class CMsgClientDeregisterWithServerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientDeregisterWithServer> _instance;
} _CMsgClientDeregisterWithServer_default_instance_;
class CMsgClientClanState_NameInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientClanState_NameInfo> _instance;
} _CMsgClientClanState_NameInfo_default_instance_;
class CMsgClientClanState_UserCountsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientClanState_UserCounts> _instance;
} _CMsgClientClanState_UserCounts_default_instance_;
class CMsgClientClanState_EventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientClanState_Event> _instance;
} _CMsgClientClanState_Event_default_instance_;
class CMsgClientClanStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientClanState> _instance;
} _CMsgClientClanState_default_instance_;
class CMsgClientUnsignedInstallScriptDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientUnsignedInstallScript> _instance;
} _CMsgClientUnsignedInstallScript_default_instance_;
}  // namespace steam
}  // namespace proto
static void InitDefaultsCMsgClientUDSP2PSessionStarted_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientUDSP2PSessionStarted_default_instance_;
    new (ptr) ::proto::steam::CMsgClientUDSP2PSessionStarted();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientUDSP2PSessionStarted::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientUDSP2PSessionStarted_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientUDSP2PSessionStarted_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientUDSP2PSessionEnded_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientUDSP2PSessionEnded_default_instance_;
    new (ptr) ::proto::steam::CMsgClientUDSP2PSessionEnded();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientUDSP2PSessionEnded::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientUDSP2PSessionEnded_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientUDSP2PSessionEnded_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientRegisterAuthTicketWithCM_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientRegisterAuthTicketWithCM_default_instance_;
    new (ptr) ::proto::steam::CMsgClientRegisterAuthTicketWithCM();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientRegisterAuthTicketWithCM::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientRegisterAuthTicketWithCM_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientRegisterAuthTicketWithCM_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientTicketAuthComplete_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientTicketAuthComplete_default_instance_;
    new (ptr) ::proto::steam::CMsgClientTicketAuthComplete();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientTicketAuthComplete::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientTicketAuthComplete_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientTicketAuthComplete_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientCMList_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientCMList_default_instance_;
    new (ptr) ::proto::steam::CMsgClientCMList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientCMList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientCMList_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientCMList_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientP2PConnectionInfo_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientP2PConnectionInfo_default_instance_;
    new (ptr) ::proto::steam::CMsgClientP2PConnectionInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientP2PConnectionInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientP2PConnectionInfo_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientP2PConnectionInfo_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientP2PConnectionFailInfo_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientP2PConnectionFailInfo_default_instance_;
    new (ptr) ::proto::steam::CMsgClientP2PConnectionFailInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientP2PConnectionFailInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientP2PConnectionFailInfo_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientP2PConnectionFailInfo_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientNetworkingCertRequest_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientNetworkingCertRequest_default_instance_;
    new (ptr) ::proto::steam::CMsgClientNetworkingCertRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientNetworkingCertRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientNetworkingCertRequest_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientNetworkingCertRequest_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientNetworkingCertReply_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientNetworkingCertReply_default_instance_;
    new (ptr) ::proto::steam::CMsgClientNetworkingCertReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientNetworkingCertReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientNetworkingCertReply_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientNetworkingCertReply_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientGetAppOwnershipTicket_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientGetAppOwnershipTicket_default_instance_;
    new (ptr) ::proto::steam::CMsgClientGetAppOwnershipTicket();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientGetAppOwnershipTicket::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientGetAppOwnershipTicket_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientGetAppOwnershipTicket_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientGetAppOwnershipTicketResponse_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientGetAppOwnershipTicketResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgClientGetAppOwnershipTicketResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientGetAppOwnershipTicketResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientGetAppOwnershipTicketResponse_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientGetAppOwnershipTicketResponse_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientSessionToken_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientSessionToken_default_instance_;
    new (ptr) ::proto::steam::CMsgClientSessionToken();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientSessionToken::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientSessionToken_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientSessionToken_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientGameConnectTokens_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientGameConnectTokens_default_instance_;
    new (ptr) ::proto::steam::CMsgClientGameConnectTokens();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientGameConnectTokens::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientGameConnectTokens_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientGameConnectTokens_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgGSServerType_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgGSServerType_default_instance_;
    new (ptr) ::proto::steam::CMsgGSServerType();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgGSServerType::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGSServerType_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGSServerType_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgGSStatusReply_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgGSStatusReply_default_instance_;
    new (ptr) ::proto::steam::CMsgGSStatusReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgGSStatusReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGSStatusReply_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGSStatusReply_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgGSPlayerList_Player_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgGSPlayerList_Player_default_instance_;
    new (ptr) ::proto::steam::CMsgGSPlayerList_Player();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgGSPlayerList_Player::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGSPlayerList_Player_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGSPlayerList_Player_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgGSPlayerList_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgGSPlayerList_default_instance_;
    new (ptr) ::proto::steam::CMsgGSPlayerList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgGSPlayerList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgGSPlayerList_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgGSPlayerList_steammessages_5fclientserver_2eproto}, {
      &scc_info_CMsgGSPlayerList_Player_steammessages_5fclientserver_2eproto.base,}};

static void InitDefaultsCMsgGSUserPlaying_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgGSUserPlaying_default_instance_;
    new (ptr) ::proto::steam::CMsgGSUserPlaying();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgGSUserPlaying::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGSUserPlaying_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGSUserPlaying_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgGSDisconnectNotice_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgGSDisconnectNotice_default_instance_;
    new (ptr) ::proto::steam::CMsgGSDisconnectNotice();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgGSDisconnectNotice::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGSDisconnectNotice_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGSDisconnectNotice_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientGamesPlayed_GamePlayed_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientGamesPlayed_GamePlayed_default_instance_;
    new (ptr) ::proto::steam::CMsgClientGamesPlayed_GamePlayed();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientGamesPlayed_GamePlayed::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientGamesPlayed_GamePlayed_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientGamesPlayed_GamePlayed_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientGamesPlayed_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientGamesPlayed_default_instance_;
    new (ptr) ::proto::steam::CMsgClientGamesPlayed();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientGamesPlayed::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgClientGamesPlayed_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgClientGamesPlayed_steammessages_5fclientserver_2eproto}, {
      &scc_info_CMsgClientGamesPlayed_GamePlayed_steammessages_5fclientserver_2eproto.base,}};

static void InitDefaultsCMsgGSApprove_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgGSApprove_default_instance_;
    new (ptr) ::proto::steam::CMsgGSApprove();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgGSApprove::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGSApprove_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGSApprove_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgGSDeny_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgGSDeny_default_instance_;
    new (ptr) ::proto::steam::CMsgGSDeny();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgGSDeny::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGSDeny_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGSDeny_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgGSKick_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgGSKick_default_instance_;
    new (ptr) ::proto::steam::CMsgGSKick();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgGSKick::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGSKick_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGSKick_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientAuthList_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientAuthList_default_instance_;
    new (ptr) ::proto::steam::CMsgClientAuthList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientAuthList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgClientAuthList_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgClientAuthList_steammessages_5fclientserver_2eproto}, {
      &scc_info_CMsgAuthTicket_steammessages_5fbase_2eproto.base,}};

static void InitDefaultsCMsgClientAuthListAck_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientAuthListAck_default_instance_;
    new (ptr) ::proto::steam::CMsgClientAuthListAck();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientAuthListAck::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientAuthListAck_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientAuthListAck_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientLicenseList_License_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientLicenseList_License_default_instance_;
    new (ptr) ::proto::steam::CMsgClientLicenseList_License();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientLicenseList_License::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientLicenseList_License_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientLicenseList_License_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientLicenseList_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientLicenseList_default_instance_;
    new (ptr) ::proto::steam::CMsgClientLicenseList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientLicenseList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgClientLicenseList_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgClientLicenseList_steammessages_5fclientserver_2eproto}, {
      &scc_info_CMsgClientLicenseList_License_steammessages_5fclientserver_2eproto.base,}};

static void InitDefaultsCMsgClientLBSSetScore_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientLBSSetScore_default_instance_;
    new (ptr) ::proto::steam::CMsgClientLBSSetScore();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientLBSSetScore::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientLBSSetScore_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientLBSSetScore_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientLBSSetScoreResponse_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientLBSSetScoreResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgClientLBSSetScoreResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientLBSSetScoreResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientLBSSetScoreResponse_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientLBSSetScoreResponse_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientLBSSetUGC_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientLBSSetUGC_default_instance_;
    new (ptr) ::proto::steam::CMsgClientLBSSetUGC();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientLBSSetUGC::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientLBSSetUGC_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientLBSSetUGC_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientLBSSetUGCResponse_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientLBSSetUGCResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgClientLBSSetUGCResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientLBSSetUGCResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientLBSSetUGCResponse_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientLBSSetUGCResponse_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientLBSFindOrCreateLB_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientLBSFindOrCreateLB_default_instance_;
    new (ptr) ::proto::steam::CMsgClientLBSFindOrCreateLB();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientLBSFindOrCreateLB::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientLBSFindOrCreateLB_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientLBSFindOrCreateLB_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientLBSFindOrCreateLBResponse_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientLBSFindOrCreateLBResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgClientLBSFindOrCreateLBResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientLBSFindOrCreateLBResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientLBSFindOrCreateLBResponse_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientLBSFindOrCreateLBResponse_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientLBSGetLBEntries_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientLBSGetLBEntries_default_instance_;
    new (ptr) ::proto::steam::CMsgClientLBSGetLBEntries();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientLBSGetLBEntries::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientLBSGetLBEntries_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientLBSGetLBEntries_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientLBSGetLBEntriesResponse_Entry_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientLBSGetLBEntriesResponse_Entry_default_instance_;
    new (ptr) ::proto::steam::CMsgClientLBSGetLBEntriesResponse_Entry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientLBSGetLBEntriesResponse_Entry::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientLBSGetLBEntriesResponse_Entry_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientLBSGetLBEntriesResponse_Entry_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientLBSGetLBEntriesResponse_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientLBSGetLBEntriesResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgClientLBSGetLBEntriesResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientLBSGetLBEntriesResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgClientLBSGetLBEntriesResponse_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgClientLBSGetLBEntriesResponse_steammessages_5fclientserver_2eproto}, {
      &scc_info_CMsgClientLBSGetLBEntriesResponse_Entry_steammessages_5fclientserver_2eproto.base,}};

static void InitDefaultsCMsgClientAppMinutesPlayedData_AppMinutesPlayedData_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientAppMinutesPlayedData_AppMinutesPlayedData_default_instance_;
    new (ptr) ::proto::steam::CMsgClientAppMinutesPlayedData_AppMinutesPlayedData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientAppMinutesPlayedData_AppMinutesPlayedData_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientAppMinutesPlayedData_AppMinutesPlayedData_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientAppMinutesPlayedData_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientAppMinutesPlayedData_default_instance_;
    new (ptr) ::proto::steam::CMsgClientAppMinutesPlayedData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientAppMinutesPlayedData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgClientAppMinutesPlayedData_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgClientAppMinutesPlayedData_steammessages_5fclientserver_2eproto}, {
      &scc_info_CMsgClientAppMinutesPlayedData_AppMinutesPlayedData_steammessages_5fclientserver_2eproto.base,}};

static void InitDefaultsCMsgClientIsLimitedAccount_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientIsLimitedAccount_default_instance_;
    new (ptr) ::proto::steam::CMsgClientIsLimitedAccount();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientIsLimitedAccount::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientIsLimitedAccount_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientIsLimitedAccount_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientServerList_Server_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientServerList_Server_default_instance_;
    new (ptr) ::proto::steam::CMsgClientServerList_Server();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientServerList_Server::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientServerList_Server_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientServerList_Server_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientServerList_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientServerList_default_instance_;
    new (ptr) ::proto::steam::CMsgClientServerList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientServerList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgClientServerList_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgClientServerList_steammessages_5fclientserver_2eproto}, {
      &scc_info_CMsgClientServerList_Server_steammessages_5fclientserver_2eproto.base,}};

static void InitDefaultsCMsgClientRequestedClientStats_StatsToSend_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientRequestedClientStats_StatsToSend_default_instance_;
    new (ptr) ::proto::steam::CMsgClientRequestedClientStats_StatsToSend();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientRequestedClientStats_StatsToSend::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientRequestedClientStats_StatsToSend_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientRequestedClientStats_StatsToSend_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientRequestedClientStats_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientRequestedClientStats_default_instance_;
    new (ptr) ::proto::steam::CMsgClientRequestedClientStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientRequestedClientStats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgClientRequestedClientStats_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgClientRequestedClientStats_steammessages_5fclientserver_2eproto}, {
      &scc_info_CMsgClientRequestedClientStats_StatsToSend_steammessages_5fclientserver_2eproto.base,}};

static void InitDefaultsCMsgClientStat2_StatDetail_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientStat2_StatDetail_default_instance_;
    new (ptr) ::proto::steam::CMsgClientStat2_StatDetail();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientStat2_StatDetail::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientStat2_StatDetail_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientStat2_StatDetail_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientStat2_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientStat2_default_instance_;
    new (ptr) ::proto::steam::CMsgClientStat2();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientStat2::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgClientStat2_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgClientStat2_steammessages_5fclientserver_2eproto}, {
      &scc_info_CMsgClientStat2_StatDetail_steammessages_5fclientserver_2eproto.base,}};

static void InitDefaultsCMsgClientMMSCreateLobby_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientMMSCreateLobby_default_instance_;
    new (ptr) ::proto::steam::CMsgClientMMSCreateLobby();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientMMSCreateLobby::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientMMSCreateLobby_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientMMSCreateLobby_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientMMSCreateLobbyResponse_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientMMSCreateLobbyResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgClientMMSCreateLobbyResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientMMSCreateLobbyResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientMMSCreateLobbyResponse_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientMMSCreateLobbyResponse_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientMMSJoinLobby_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientMMSJoinLobby_default_instance_;
    new (ptr) ::proto::steam::CMsgClientMMSJoinLobby();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientMMSJoinLobby::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientMMSJoinLobby_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientMMSJoinLobby_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientMMSJoinLobbyResponse_Member_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientMMSJoinLobbyResponse_Member_default_instance_;
    new (ptr) ::proto::steam::CMsgClientMMSJoinLobbyResponse_Member();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientMMSJoinLobbyResponse_Member::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientMMSJoinLobbyResponse_Member_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientMMSJoinLobbyResponse_Member_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientMMSJoinLobbyResponse_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientMMSJoinLobbyResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgClientMMSJoinLobbyResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientMMSJoinLobbyResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgClientMMSJoinLobbyResponse_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgClientMMSJoinLobbyResponse_steammessages_5fclientserver_2eproto}, {
      &scc_info_CMsgClientMMSJoinLobbyResponse_Member_steammessages_5fclientserver_2eproto.base,}};

static void InitDefaultsCMsgClientMMSLeaveLobby_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientMMSLeaveLobby_default_instance_;
    new (ptr) ::proto::steam::CMsgClientMMSLeaveLobby();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientMMSLeaveLobby::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientMMSLeaveLobby_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientMMSLeaveLobby_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientMMSLeaveLobbyResponse_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientMMSLeaveLobbyResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgClientMMSLeaveLobbyResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientMMSLeaveLobbyResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientMMSLeaveLobbyResponse_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientMMSLeaveLobbyResponse_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientMMSGetLobbyList_Filter_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientMMSGetLobbyList_Filter_default_instance_;
    new (ptr) ::proto::steam::CMsgClientMMSGetLobbyList_Filter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientMMSGetLobbyList_Filter::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientMMSGetLobbyList_Filter_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientMMSGetLobbyList_Filter_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientMMSGetLobbyList_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientMMSGetLobbyList_default_instance_;
    new (ptr) ::proto::steam::CMsgClientMMSGetLobbyList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientMMSGetLobbyList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgClientMMSGetLobbyList_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgClientMMSGetLobbyList_steammessages_5fclientserver_2eproto}, {
      &scc_info_CMsgClientMMSGetLobbyList_Filter_steammessages_5fclientserver_2eproto.base,}};

static void InitDefaultsCMsgClientMMSGetLobbyListResponse_Lobby_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientMMSGetLobbyListResponse_Lobby_default_instance_;
    new (ptr) ::proto::steam::CMsgClientMMSGetLobbyListResponse_Lobby();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientMMSGetLobbyListResponse_Lobby::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientMMSGetLobbyListResponse_Lobby_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientMMSGetLobbyListResponse_Lobby_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientMMSGetLobbyListResponse_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientMMSGetLobbyListResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgClientMMSGetLobbyListResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientMMSGetLobbyListResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgClientMMSGetLobbyListResponse_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgClientMMSGetLobbyListResponse_steammessages_5fclientserver_2eproto}, {
      &scc_info_CMsgClientMMSGetLobbyListResponse_Lobby_steammessages_5fclientserver_2eproto.base,}};

static void InitDefaultsCMsgClientMMSSetLobbyData_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientMMSSetLobbyData_default_instance_;
    new (ptr) ::proto::steam::CMsgClientMMSSetLobbyData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientMMSSetLobbyData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientMMSSetLobbyData_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientMMSSetLobbyData_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientMMSSetLobbyDataResponse_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientMMSSetLobbyDataResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgClientMMSSetLobbyDataResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientMMSSetLobbyDataResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientMMSSetLobbyDataResponse_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientMMSSetLobbyDataResponse_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientMMSGetLobbyData_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientMMSGetLobbyData_default_instance_;
    new (ptr) ::proto::steam::CMsgClientMMSGetLobbyData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientMMSGetLobbyData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientMMSGetLobbyData_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientMMSGetLobbyData_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientMMSLobbyData_Member_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientMMSLobbyData_Member_default_instance_;
    new (ptr) ::proto::steam::CMsgClientMMSLobbyData_Member();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientMMSLobbyData_Member::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientMMSLobbyData_Member_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientMMSLobbyData_Member_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientMMSLobbyData_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientMMSLobbyData_default_instance_;
    new (ptr) ::proto::steam::CMsgClientMMSLobbyData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientMMSLobbyData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgClientMMSLobbyData_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgClientMMSLobbyData_steammessages_5fclientserver_2eproto}, {
      &scc_info_CMsgClientMMSLobbyData_Member_steammessages_5fclientserver_2eproto.base,}};

static void InitDefaultsCMsgClientMMSSendLobbyChatMsg_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientMMSSendLobbyChatMsg_default_instance_;
    new (ptr) ::proto::steam::CMsgClientMMSSendLobbyChatMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientMMSSendLobbyChatMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientMMSSendLobbyChatMsg_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientMMSSendLobbyChatMsg_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientMMSLobbyChatMsg_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientMMSLobbyChatMsg_default_instance_;
    new (ptr) ::proto::steam::CMsgClientMMSLobbyChatMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientMMSLobbyChatMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientMMSLobbyChatMsg_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientMMSLobbyChatMsg_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientMMSSetLobbyOwner_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientMMSSetLobbyOwner_default_instance_;
    new (ptr) ::proto::steam::CMsgClientMMSSetLobbyOwner();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientMMSSetLobbyOwner::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientMMSSetLobbyOwner_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientMMSSetLobbyOwner_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientMMSSetLobbyOwnerResponse_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientMMSSetLobbyOwnerResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgClientMMSSetLobbyOwnerResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientMMSSetLobbyOwnerResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientMMSSetLobbyOwnerResponse_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientMMSSetLobbyOwnerResponse_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientMMSSetLobbyLinked_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientMMSSetLobbyLinked_default_instance_;
    new (ptr) ::proto::steam::CMsgClientMMSSetLobbyLinked();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientMMSSetLobbyLinked::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientMMSSetLobbyLinked_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientMMSSetLobbyLinked_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientMMSSetLobbyGameServer_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientMMSSetLobbyGameServer_default_instance_;
    new (ptr) ::proto::steam::CMsgClientMMSSetLobbyGameServer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientMMSSetLobbyGameServer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientMMSSetLobbyGameServer_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientMMSSetLobbyGameServer_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientMMSLobbyGameServerSet_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientMMSLobbyGameServerSet_default_instance_;
    new (ptr) ::proto::steam::CMsgClientMMSLobbyGameServerSet();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientMMSLobbyGameServerSet::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientMMSLobbyGameServerSet_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientMMSLobbyGameServerSet_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientMMSUserJoinedLobby_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientMMSUserJoinedLobby_default_instance_;
    new (ptr) ::proto::steam::CMsgClientMMSUserJoinedLobby();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientMMSUserJoinedLobby::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientMMSUserJoinedLobby_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientMMSUserJoinedLobby_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientMMSUserLeftLobby_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientMMSUserLeftLobby_default_instance_;
    new (ptr) ::proto::steam::CMsgClientMMSUserLeftLobby();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientMMSUserLeftLobby::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientMMSUserLeftLobby_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientMMSUserLeftLobby_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientMMSInviteToLobby_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientMMSInviteToLobby_default_instance_;
    new (ptr) ::proto::steam::CMsgClientMMSInviteToLobby();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientMMSInviteToLobby::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientMMSInviteToLobby_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientMMSInviteToLobby_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientInviteToGame_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientInviteToGame_default_instance_;
    new (ptr) ::proto::steam::CMsgClientInviteToGame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientInviteToGame::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientInviteToGame_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientInviteToGame_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientChatInvite_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientChatInvite_default_instance_;
    new (ptr) ::proto::steam::CMsgClientChatInvite();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientChatInvite::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientChatInvite_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientChatInvite_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientConnectionStats_Stats_Logon_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientConnectionStats_Stats_Logon_default_instance_;
    new (ptr) ::proto::steam::CMsgClientConnectionStats_Stats_Logon();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientConnectionStats_Stats_Logon::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientConnectionStats_Stats_Logon_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientConnectionStats_Stats_Logon_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientConnectionStats_Stats_UDP_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientConnectionStats_Stats_UDP_default_instance_;
    new (ptr) ::proto::steam::CMsgClientConnectionStats_Stats_UDP();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientConnectionStats_Stats_UDP::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientConnectionStats_Stats_UDP_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientConnectionStats_Stats_UDP_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientConnectionStats_Stats_VConn_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientConnectionStats_Stats_VConn_default_instance_;
    new (ptr) ::proto::steam::CMsgClientConnectionStats_Stats_VConn();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientConnectionStats_Stats_VConn::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgClientConnectionStats_Stats_VConn_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgClientConnectionStats_Stats_VConn_steammessages_5fclientserver_2eproto}, {
      &scc_info_CMsgClientConnectionStats_Stats_UDP_steammessages_5fclientserver_2eproto.base,}};

static void InitDefaultsCMsgClientConnectionStats_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientConnectionStats_default_instance_;
    new (ptr) ::proto::steam::CMsgClientConnectionStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientConnectionStats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CMsgClientConnectionStats_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCMsgClientConnectionStats_steammessages_5fclientserver_2eproto}, {
      &scc_info_CMsgClientConnectionStats_Stats_Logon_steammessages_5fclientserver_2eproto.base,
      &scc_info_CMsgClientConnectionStats_Stats_VConn_steammessages_5fclientserver_2eproto.base,}};

static void InitDefaultsCMsgClientServersAvailable_Server_Types_Available_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientServersAvailable_Server_Types_Available_default_instance_;
    new (ptr) ::proto::steam::CMsgClientServersAvailable_Server_Types_Available();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientServersAvailable_Server_Types_Available::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientServersAvailable_Server_Types_Available_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientServersAvailable_Server_Types_Available_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientServersAvailable_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientServersAvailable_default_instance_;
    new (ptr) ::proto::steam::CMsgClientServersAvailable();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientServersAvailable::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgClientServersAvailable_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgClientServersAvailable_steammessages_5fclientserver_2eproto}, {
      &scc_info_CMsgClientServersAvailable_Server_Types_Available_steammessages_5fclientserver_2eproto.base,}};

static void InitDefaultsCMsgClientGetUserStats_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientGetUserStats_default_instance_;
    new (ptr) ::proto::steam::CMsgClientGetUserStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientGetUserStats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientGetUserStats_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientGetUserStats_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientGetUserStatsResponse_Stats_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientGetUserStatsResponse_Stats_default_instance_;
    new (ptr) ::proto::steam::CMsgClientGetUserStatsResponse_Stats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientGetUserStatsResponse_Stats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientGetUserStatsResponse_Stats_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientGetUserStatsResponse_Stats_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientGetUserStatsResponse_Achievement_Blocks_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientGetUserStatsResponse_Achievement_Blocks_default_instance_;
    new (ptr) ::proto::steam::CMsgClientGetUserStatsResponse_Achievement_Blocks();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientGetUserStatsResponse_Achievement_Blocks::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientGetUserStatsResponse_Achievement_Blocks_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientGetUserStatsResponse_Achievement_Blocks_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientGetUserStatsResponse_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientGetUserStatsResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgClientGetUserStatsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientGetUserStatsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CMsgClientGetUserStatsResponse_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCMsgClientGetUserStatsResponse_steammessages_5fclientserver_2eproto}, {
      &scc_info_CMsgClientGetUserStatsResponse_Stats_steammessages_5fclientserver_2eproto.base,
      &scc_info_CMsgClientGetUserStatsResponse_Achievement_Blocks_steammessages_5fclientserver_2eproto.base,}};

static void InitDefaultsCMsgClientStoreUserStatsResponse_Stats_Failed_Validation_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientStoreUserStatsResponse_Stats_Failed_Validation_default_instance_;
    new (ptr) ::proto::steam::CMsgClientStoreUserStatsResponse_Stats_Failed_Validation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientStoreUserStatsResponse_Stats_Failed_Validation_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientStoreUserStatsResponse_Stats_Failed_Validation_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientStoreUserStatsResponse_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientStoreUserStatsResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgClientStoreUserStatsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientStoreUserStatsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgClientStoreUserStatsResponse_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgClientStoreUserStatsResponse_steammessages_5fclientserver_2eproto}, {
      &scc_info_CMsgClientStoreUserStatsResponse_Stats_Failed_Validation_steammessages_5fclientserver_2eproto.base,}};

static void InitDefaultsCMsgClientStoreUserStats2_Stats_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientStoreUserStats2_Stats_default_instance_;
    new (ptr) ::proto::steam::CMsgClientStoreUserStats2_Stats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientStoreUserStats2_Stats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientStoreUserStats2_Stats_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientStoreUserStats2_Stats_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientStoreUserStats2_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientStoreUserStats2_default_instance_;
    new (ptr) ::proto::steam::CMsgClientStoreUserStats2();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientStoreUserStats2::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgClientStoreUserStats2_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgClientStoreUserStats2_steammessages_5fclientserver_2eproto}, {
      &scc_info_CMsgClientStoreUserStats2_Stats_steammessages_5fclientserver_2eproto.base,}};

static void InitDefaultsCMsgClientStatsUpdated_Updated_Stats_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientStatsUpdated_Updated_Stats_default_instance_;
    new (ptr) ::proto::steam::CMsgClientStatsUpdated_Updated_Stats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientStatsUpdated_Updated_Stats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientStatsUpdated_Updated_Stats_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientStatsUpdated_Updated_Stats_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientStatsUpdated_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientStatsUpdated_default_instance_;
    new (ptr) ::proto::steam::CMsgClientStatsUpdated();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientStatsUpdated::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgClientStatsUpdated_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgClientStatsUpdated_steammessages_5fclientserver_2eproto}, {
      &scc_info_CMsgClientStatsUpdated_Updated_Stats_steammessages_5fclientserver_2eproto.base,}};

static void InitDefaultsCMsgClientStoreUserStats_Stats_To_Store_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientStoreUserStats_Stats_To_Store_default_instance_;
    new (ptr) ::proto::steam::CMsgClientStoreUserStats_Stats_To_Store();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientStoreUserStats_Stats_To_Store::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientStoreUserStats_Stats_To_Store_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientStoreUserStats_Stats_To_Store_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientStoreUserStats_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientStoreUserStats_default_instance_;
    new (ptr) ::proto::steam::CMsgClientStoreUserStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientStoreUserStats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgClientStoreUserStats_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgClientStoreUserStats_steammessages_5fclientserver_2eproto}, {
      &scc_info_CMsgClientStoreUserStats_Stats_To_Store_steammessages_5fclientserver_2eproto.base,}};

static void InitDefaultsCMsgClientGetClientDetails_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientGetClientDetails_default_instance_;
    new (ptr) ::proto::steam::CMsgClientGetClientDetails();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientGetClientDetails::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientGetClientDetails_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientGetClientDetails_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientReportOverlayDetourFailure_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientReportOverlayDetourFailure_default_instance_;
    new (ptr) ::proto::steam::CMsgClientReportOverlayDetourFailure();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientReportOverlayDetourFailure::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientReportOverlayDetourFailure_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientReportOverlayDetourFailure_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientGetClientDetailsResponse_Game_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientGetClientDetailsResponse_Game_default_instance_;
    new (ptr) ::proto::steam::CMsgClientGetClientDetailsResponse_Game();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientGetClientDetailsResponse_Game::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientGetClientDetailsResponse_Game_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientGetClientDetailsResponse_Game_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientGetClientDetailsResponse_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientGetClientDetailsResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgClientGetClientDetailsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientGetClientDetailsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgClientGetClientDetailsResponse_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgClientGetClientDetailsResponse_steammessages_5fclientserver_2eproto}, {
      &scc_info_CMsgClientGetClientDetailsResponse_Game_steammessages_5fclientserver_2eproto.base,}};

static void InitDefaultsCMsgClientGetClientAppList_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientGetClientAppList_default_instance_;
    new (ptr) ::proto::steam::CMsgClientGetClientAppList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientGetClientAppList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientGetClientAppList_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientGetClientAppList_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientGetClientAppListResponse_App_DLC_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientGetClientAppListResponse_App_DLC_default_instance_;
    new (ptr) ::proto::steam::CMsgClientGetClientAppListResponse_App_DLC();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientGetClientAppListResponse_App_DLC::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientGetClientAppListResponse_App_DLC_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientGetClientAppListResponse_App_DLC_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientGetClientAppListResponse_App_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientGetClientAppListResponse_App_default_instance_;
    new (ptr) ::proto::steam::CMsgClientGetClientAppListResponse_App();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientGetClientAppListResponse_App::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgClientGetClientAppListResponse_App_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgClientGetClientAppListResponse_App_steammessages_5fclientserver_2eproto}, {
      &scc_info_CMsgClientGetClientAppListResponse_App_DLC_steammessages_5fclientserver_2eproto.base,}};

static void InitDefaultsCMsgClientGetClientAppListResponse_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientGetClientAppListResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgClientGetClientAppListResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientGetClientAppListResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgClientGetClientAppListResponse_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgClientGetClientAppListResponse_steammessages_5fclientserver_2eproto}, {
      &scc_info_CMsgClientGetClientAppListResponse_App_steammessages_5fclientserver_2eproto.base,}};

static void InitDefaultsCMsgClientInstallClientApp_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientInstallClientApp_default_instance_;
    new (ptr) ::proto::steam::CMsgClientInstallClientApp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientInstallClientApp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientInstallClientApp_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientInstallClientApp_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientInstallClientAppResponse_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientInstallClientAppResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgClientInstallClientAppResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientInstallClientAppResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientInstallClientAppResponse_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientInstallClientAppResponse_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientUninstallClientApp_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientUninstallClientApp_default_instance_;
    new (ptr) ::proto::steam::CMsgClientUninstallClientApp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientUninstallClientApp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientUninstallClientApp_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientUninstallClientApp_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientUninstallClientAppResponse_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientUninstallClientAppResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgClientUninstallClientAppResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientUninstallClientAppResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientUninstallClientAppResponse_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientUninstallClientAppResponse_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientSetClientAppUpdateState_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientSetClientAppUpdateState_default_instance_;
    new (ptr) ::proto::steam::CMsgClientSetClientAppUpdateState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientSetClientAppUpdateState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientSetClientAppUpdateState_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientSetClientAppUpdateState_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientSetClientAppUpdateStateResponse_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientSetClientAppUpdateStateResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgClientSetClientAppUpdateStateResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientSetClientAppUpdateStateResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientSetClientAppUpdateStateResponse_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientSetClientAppUpdateStateResponse_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientUFSUploadFileRequest_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientUFSUploadFileRequest_default_instance_;
    new (ptr) ::proto::steam::CMsgClientUFSUploadFileRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientUFSUploadFileRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientUFSUploadFileRequest_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientUFSUploadFileRequest_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientUFSUploadFileResponse_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientUFSUploadFileResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgClientUFSUploadFileResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientUFSUploadFileResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientUFSUploadFileResponse_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientUFSUploadFileResponse_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientUFSUploadCommit_File_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientUFSUploadCommit_File_default_instance_;
    new (ptr) ::proto::steam::CMsgClientUFSUploadCommit_File();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientUFSUploadCommit_File::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientUFSUploadCommit_File_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientUFSUploadCommit_File_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientUFSUploadCommit_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientUFSUploadCommit_default_instance_;
    new (ptr) ::proto::steam::CMsgClientUFSUploadCommit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientUFSUploadCommit::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgClientUFSUploadCommit_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgClientUFSUploadCommit_steammessages_5fclientserver_2eproto}, {
      &scc_info_CMsgClientUFSUploadCommit_File_steammessages_5fclientserver_2eproto.base,}};

static void InitDefaultsCMsgClientUFSUploadCommitResponse_File_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientUFSUploadCommitResponse_File_default_instance_;
    new (ptr) ::proto::steam::CMsgClientUFSUploadCommitResponse_File();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientUFSUploadCommitResponse_File::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientUFSUploadCommitResponse_File_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientUFSUploadCommitResponse_File_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientUFSUploadCommitResponse_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientUFSUploadCommitResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgClientUFSUploadCommitResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientUFSUploadCommitResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgClientUFSUploadCommitResponse_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgClientUFSUploadCommitResponse_steammessages_5fclientserver_2eproto}, {
      &scc_info_CMsgClientUFSUploadCommitResponse_File_steammessages_5fclientserver_2eproto.base,}};

static void InitDefaultsCMsgClientUFSFileChunk_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientUFSFileChunk_default_instance_;
    new (ptr) ::proto::steam::CMsgClientUFSFileChunk();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientUFSFileChunk::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientUFSFileChunk_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientUFSFileChunk_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientUFSTransferHeartbeat_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientUFSTransferHeartbeat_default_instance_;
    new (ptr) ::proto::steam::CMsgClientUFSTransferHeartbeat();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientUFSTransferHeartbeat::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientUFSTransferHeartbeat_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientUFSTransferHeartbeat_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientUFSUploadFileFinished_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientUFSUploadFileFinished_default_instance_;
    new (ptr) ::proto::steam::CMsgClientUFSUploadFileFinished();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientUFSUploadFileFinished::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientUFSUploadFileFinished_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientUFSUploadFileFinished_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientUFSDeleteFileRequest_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientUFSDeleteFileRequest_default_instance_;
    new (ptr) ::proto::steam::CMsgClientUFSDeleteFileRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientUFSDeleteFileRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientUFSDeleteFileRequest_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientUFSDeleteFileRequest_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientUFSDeleteFileResponse_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientUFSDeleteFileResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgClientUFSDeleteFileResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientUFSDeleteFileResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientUFSDeleteFileResponse_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientUFSDeleteFileResponse_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientUFSGetFileListForApp_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientUFSGetFileListForApp_default_instance_;
    new (ptr) ::proto::steam::CMsgClientUFSGetFileListForApp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientUFSGetFileListForApp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientUFSGetFileListForApp_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientUFSGetFileListForApp_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientUFSGetFileListForAppResponse_File_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientUFSGetFileListForAppResponse_File_default_instance_;
    new (ptr) ::proto::steam::CMsgClientUFSGetFileListForAppResponse_File();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientUFSGetFileListForAppResponse_File::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientUFSGetFileListForAppResponse_File_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientUFSGetFileListForAppResponse_File_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientUFSGetFileListForAppResponse_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientUFSGetFileListForAppResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgClientUFSGetFileListForAppResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientUFSGetFileListForAppResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgClientUFSGetFileListForAppResponse_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgClientUFSGetFileListForAppResponse_steammessages_5fclientserver_2eproto}, {
      &scc_info_CMsgClientUFSGetFileListForAppResponse_File_steammessages_5fclientserver_2eproto.base,}};

static void InitDefaultsCMsgClientUFSDownloadRequest_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientUFSDownloadRequest_default_instance_;
    new (ptr) ::proto::steam::CMsgClientUFSDownloadRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientUFSDownloadRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientUFSDownloadRequest_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientUFSDownloadRequest_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientUFSDownloadResponse_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientUFSDownloadResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgClientUFSDownloadResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientUFSDownloadResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientUFSDownloadResponse_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientUFSDownloadResponse_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientUFSLoginRequest_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientUFSLoginRequest_default_instance_;
    new (ptr) ::proto::steam::CMsgClientUFSLoginRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientUFSLoginRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientUFSLoginRequest_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientUFSLoginRequest_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientUFSLoginResponse_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientUFSLoginResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgClientUFSLoginResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientUFSLoginResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientUFSLoginResponse_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientUFSLoginResponse_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientRequestEncryptedAppTicket_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientRequestEncryptedAppTicket_default_instance_;
    new (ptr) ::proto::steam::CMsgClientRequestEncryptedAppTicket();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientRequestEncryptedAppTicket::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientRequestEncryptedAppTicket_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientRequestEncryptedAppTicket_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientRequestEncryptedAppTicketResponse_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientRequestEncryptedAppTicketResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgClientRequestEncryptedAppTicketResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientRequestEncryptedAppTicketResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgClientRequestEncryptedAppTicketResponse_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgClientRequestEncryptedAppTicketResponse_steammessages_5fclientserver_2eproto}, {
      &scc_info_EncryptedAppTicket_encrypted_5fapp_5fticket_2eproto.base,}};

static void InitDefaultsCMsgClientWalletInfoUpdate_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientWalletInfoUpdate_default_instance_;
    new (ptr) ::proto::steam::CMsgClientWalletInfoUpdate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientWalletInfoUpdate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientWalletInfoUpdate_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientWalletInfoUpdate_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientAppInfoUpdate_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientAppInfoUpdate_default_instance_;
    new (ptr) ::proto::steam::CMsgClientAppInfoUpdate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientAppInfoUpdate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientAppInfoUpdate_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientAppInfoUpdate_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientAppInfoChanges_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientAppInfoChanges_default_instance_;
    new (ptr) ::proto::steam::CMsgClientAppInfoChanges();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientAppInfoChanges::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientAppInfoChanges_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientAppInfoChanges_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientAppInfoRequest_App_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientAppInfoRequest_App_default_instance_;
    new (ptr) ::proto::steam::CMsgClientAppInfoRequest_App();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientAppInfoRequest_App::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientAppInfoRequest_App_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientAppInfoRequest_App_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientAppInfoRequest_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientAppInfoRequest_default_instance_;
    new (ptr) ::proto::steam::CMsgClientAppInfoRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientAppInfoRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgClientAppInfoRequest_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgClientAppInfoRequest_steammessages_5fclientserver_2eproto}, {
      &scc_info_CMsgClientAppInfoRequest_App_steammessages_5fclientserver_2eproto.base,}};

static void InitDefaultsCMsgClientAppInfoResponse_App_Section_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientAppInfoResponse_App_Section_default_instance_;
    new (ptr) ::proto::steam::CMsgClientAppInfoResponse_App_Section();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientAppInfoResponse_App_Section::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientAppInfoResponse_App_Section_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientAppInfoResponse_App_Section_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientAppInfoResponse_App_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientAppInfoResponse_App_default_instance_;
    new (ptr) ::proto::steam::CMsgClientAppInfoResponse_App();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientAppInfoResponse_App::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgClientAppInfoResponse_App_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgClientAppInfoResponse_App_steammessages_5fclientserver_2eproto}, {
      &scc_info_CMsgClientAppInfoResponse_App_Section_steammessages_5fclientserver_2eproto.base,}};

static void InitDefaultsCMsgClientAppInfoResponse_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientAppInfoResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgClientAppInfoResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientAppInfoResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgClientAppInfoResponse_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgClientAppInfoResponse_steammessages_5fclientserver_2eproto}, {
      &scc_info_CMsgClientAppInfoResponse_App_steammessages_5fclientserver_2eproto.base,}};

static void InitDefaultsCMsgClientPackageInfoRequest_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientPackageInfoRequest_default_instance_;
    new (ptr) ::proto::steam::CMsgClientPackageInfoRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientPackageInfoRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientPackageInfoRequest_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientPackageInfoRequest_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientPackageInfoResponse_Package_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientPackageInfoResponse_Package_default_instance_;
    new (ptr) ::proto::steam::CMsgClientPackageInfoResponse_Package();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientPackageInfoResponse_Package::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientPackageInfoResponse_Package_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientPackageInfoResponse_Package_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientPackageInfoResponse_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientPackageInfoResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgClientPackageInfoResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientPackageInfoResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgClientPackageInfoResponse_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgClientPackageInfoResponse_steammessages_5fclientserver_2eproto}, {
      &scc_info_CMsgClientPackageInfoResponse_Package_steammessages_5fclientserver_2eproto.base,}};

static void InitDefaultsCMsgClientPICSChangesSinceRequest_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientPICSChangesSinceRequest_default_instance_;
    new (ptr) ::proto::steam::CMsgClientPICSChangesSinceRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientPICSChangesSinceRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientPICSChangesSinceRequest_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientPICSChangesSinceRequest_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientPICSChangesSinceResponse_PackageChange_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientPICSChangesSinceResponse_PackageChange_default_instance_;
    new (ptr) ::proto::steam::CMsgClientPICSChangesSinceResponse_PackageChange();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientPICSChangesSinceResponse_PackageChange::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientPICSChangesSinceResponse_PackageChange_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientPICSChangesSinceResponse_PackageChange_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientPICSChangesSinceResponse_AppChange_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientPICSChangesSinceResponse_AppChange_default_instance_;
    new (ptr) ::proto::steam::CMsgClientPICSChangesSinceResponse_AppChange();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientPICSChangesSinceResponse_AppChange::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientPICSChangesSinceResponse_AppChange_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientPICSChangesSinceResponse_AppChange_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientPICSChangesSinceResponse_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientPICSChangesSinceResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgClientPICSChangesSinceResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientPICSChangesSinceResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CMsgClientPICSChangesSinceResponse_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCMsgClientPICSChangesSinceResponse_steammessages_5fclientserver_2eproto}, {
      &scc_info_CMsgClientPICSChangesSinceResponse_PackageChange_steammessages_5fclientserver_2eproto.base,
      &scc_info_CMsgClientPICSChangesSinceResponse_AppChange_steammessages_5fclientserver_2eproto.base,}};

static void InitDefaultsCMsgClientPICSProductInfoRequest_AppInfo_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientPICSProductInfoRequest_AppInfo_default_instance_;
    new (ptr) ::proto::steam::CMsgClientPICSProductInfoRequest_AppInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientPICSProductInfoRequest_AppInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientPICSProductInfoRequest_AppInfo_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientPICSProductInfoRequest_AppInfo_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientPICSProductInfoRequest_PackageInfo_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientPICSProductInfoRequest_PackageInfo_default_instance_;
    new (ptr) ::proto::steam::CMsgClientPICSProductInfoRequest_PackageInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientPICSProductInfoRequest_PackageInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientPICSProductInfoRequest_PackageInfo_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientPICSProductInfoRequest_PackageInfo_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientPICSProductInfoRequest_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientPICSProductInfoRequest_default_instance_;
    new (ptr) ::proto::steam::CMsgClientPICSProductInfoRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientPICSProductInfoRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CMsgClientPICSProductInfoRequest_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCMsgClientPICSProductInfoRequest_steammessages_5fclientserver_2eproto}, {
      &scc_info_CMsgClientPICSProductInfoRequest_PackageInfo_steammessages_5fclientserver_2eproto.base,
      &scc_info_CMsgClientPICSProductInfoRequest_AppInfo_steammessages_5fclientserver_2eproto.base,}};

static void InitDefaultsCMsgClientPICSProductInfoResponse_AppInfo_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientPICSProductInfoResponse_AppInfo_default_instance_;
    new (ptr) ::proto::steam::CMsgClientPICSProductInfoResponse_AppInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientPICSProductInfoResponse_AppInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientPICSProductInfoResponse_AppInfo_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientPICSProductInfoResponse_AppInfo_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientPICSProductInfoResponse_PackageInfo_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientPICSProductInfoResponse_PackageInfo_default_instance_;
    new (ptr) ::proto::steam::CMsgClientPICSProductInfoResponse_PackageInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientPICSProductInfoResponse_PackageInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientPICSProductInfoResponse_PackageInfo_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientPICSProductInfoResponse_PackageInfo_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientPICSProductInfoResponse_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientPICSProductInfoResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgClientPICSProductInfoResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientPICSProductInfoResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CMsgClientPICSProductInfoResponse_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCMsgClientPICSProductInfoResponse_steammessages_5fclientserver_2eproto}, {
      &scc_info_CMsgClientPICSProductInfoResponse_AppInfo_steammessages_5fclientserver_2eproto.base,
      &scc_info_CMsgClientPICSProductInfoResponse_PackageInfo_steammessages_5fclientserver_2eproto.base,}};

static void InitDefaultsCMsgClientPICSAccessTokenRequest_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientPICSAccessTokenRequest_default_instance_;
    new (ptr) ::proto::steam::CMsgClientPICSAccessTokenRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientPICSAccessTokenRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientPICSAccessTokenRequest_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientPICSAccessTokenRequest_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientPICSAccessTokenResponse_PackageToken_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientPICSAccessTokenResponse_PackageToken_default_instance_;
    new (ptr) ::proto::steam::CMsgClientPICSAccessTokenResponse_PackageToken();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientPICSAccessTokenResponse_PackageToken::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientPICSAccessTokenResponse_PackageToken_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientPICSAccessTokenResponse_PackageToken_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientPICSAccessTokenResponse_AppToken_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientPICSAccessTokenResponse_AppToken_default_instance_;
    new (ptr) ::proto::steam::CMsgClientPICSAccessTokenResponse_AppToken();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientPICSAccessTokenResponse_AppToken::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientPICSAccessTokenResponse_AppToken_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientPICSAccessTokenResponse_AppToken_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientPICSAccessTokenResponse_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientPICSAccessTokenResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgClientPICSAccessTokenResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientPICSAccessTokenResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CMsgClientPICSAccessTokenResponse_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCMsgClientPICSAccessTokenResponse_steammessages_5fclientserver_2eproto}, {
      &scc_info_CMsgClientPICSAccessTokenResponse_PackageToken_steammessages_5fclientserver_2eproto.base,
      &scc_info_CMsgClientPICSAccessTokenResponse_AppToken_steammessages_5fclientserver_2eproto.base,}};

static void InitDefaultsCMsgClientUFSGetUGCDetails_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientUFSGetUGCDetails_default_instance_;
    new (ptr) ::proto::steam::CMsgClientUFSGetUGCDetails();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientUFSGetUGCDetails::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientUFSGetUGCDetails_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientUFSGetUGCDetails_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientUFSGetUGCDetailsResponse_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientUFSGetUGCDetailsResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgClientUFSGetUGCDetailsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientUFSGetUGCDetailsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientUFSGetUGCDetailsResponse_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientUFSGetUGCDetailsResponse_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientUFSGetSingleFileInfo_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientUFSGetSingleFileInfo_default_instance_;
    new (ptr) ::proto::steam::CMsgClientUFSGetSingleFileInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientUFSGetSingleFileInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientUFSGetSingleFileInfo_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientUFSGetSingleFileInfo_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientUFSGetSingleFileInfoResponse_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientUFSGetSingleFileInfoResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgClientUFSGetSingleFileInfoResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientUFSGetSingleFileInfoResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientUFSGetSingleFileInfoResponse_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientUFSGetSingleFileInfoResponse_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientUFSShareFile_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientUFSShareFile_default_instance_;
    new (ptr) ::proto::steam::CMsgClientUFSShareFile();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientUFSShareFile::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientUFSShareFile_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientUFSShareFile_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientUFSShareFileResponse_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientUFSShareFileResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgClientUFSShareFileResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientUFSShareFileResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientUFSShareFileResponse_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientUFSShareFileResponse_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientAMGetClanOfficers_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientAMGetClanOfficers_default_instance_;
    new (ptr) ::proto::steam::CMsgClientAMGetClanOfficers();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientAMGetClanOfficers::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientAMGetClanOfficers_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientAMGetClanOfficers_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientAMGetClanOfficersResponse_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientAMGetClanOfficersResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgClientAMGetClanOfficersResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientAMGetClanOfficersResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientAMGetClanOfficersResponse_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientAMGetClanOfficersResponse_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientAMGetPersonaNameHistory_IdInstance_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientAMGetPersonaNameHistory_IdInstance_default_instance_;
    new (ptr) ::proto::steam::CMsgClientAMGetPersonaNameHistory_IdInstance();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientAMGetPersonaNameHistory_IdInstance::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientAMGetPersonaNameHistory_IdInstance_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientAMGetPersonaNameHistory_IdInstance_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientAMGetPersonaNameHistory_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientAMGetPersonaNameHistory_default_instance_;
    new (ptr) ::proto::steam::CMsgClientAMGetPersonaNameHistory();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientAMGetPersonaNameHistory::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgClientAMGetPersonaNameHistory_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgClientAMGetPersonaNameHistory_steammessages_5fclientserver_2eproto}, {
      &scc_info_CMsgClientAMGetPersonaNameHistory_IdInstance_steammessages_5fclientserver_2eproto.base,}};

static void InitDefaultsCMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance_default_instance_;
    new (ptr) ::proto::steam::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_default_instance_;
    new (ptr) ::proto::steam::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_steammessages_5fclientserver_2eproto}, {
      &scc_info_CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance_steammessages_5fclientserver_2eproto.base,}};

static void InitDefaultsCMsgClientAMGetPersonaNameHistoryResponse_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientAMGetPersonaNameHistoryResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgClientAMGetPersonaNameHistoryResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientAMGetPersonaNameHistoryResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgClientAMGetPersonaNameHistoryResponse_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgClientAMGetPersonaNameHistoryResponse_steammessages_5fclientserver_2eproto}, {
      &scc_info_CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_steammessages_5fclientserver_2eproto.base,}};

static void InitDefaultsCMsgClientDeregisterWithServer_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientDeregisterWithServer_default_instance_;
    new (ptr) ::proto::steam::CMsgClientDeregisterWithServer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientDeregisterWithServer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientDeregisterWithServer_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientDeregisterWithServer_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientClanState_NameInfo_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientClanState_NameInfo_default_instance_;
    new (ptr) ::proto::steam::CMsgClientClanState_NameInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientClanState_NameInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientClanState_NameInfo_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientClanState_NameInfo_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientClanState_UserCounts_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientClanState_UserCounts_default_instance_;
    new (ptr) ::proto::steam::CMsgClientClanState_UserCounts();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientClanState_UserCounts::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientClanState_UserCounts_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientClanState_UserCounts_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientClanState_Event_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientClanState_Event_default_instance_;
    new (ptr) ::proto::steam::CMsgClientClanState_Event();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientClanState_Event::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientClanState_Event_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientClanState_Event_steammessages_5fclientserver_2eproto}, {}};

static void InitDefaultsCMsgClientClanState_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientClanState_default_instance_;
    new (ptr) ::proto::steam::CMsgClientClanState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientClanState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_CMsgClientClanState_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsCMsgClientClanState_steammessages_5fclientserver_2eproto}, {
      &scc_info_CMsgClientClanState_NameInfo_steammessages_5fclientserver_2eproto.base,
      &scc_info_CMsgClientClanState_UserCounts_steammessages_5fclientserver_2eproto.base,
      &scc_info_CMsgClientClanState_Event_steammessages_5fclientserver_2eproto.base,}};

static void InitDefaultsCMsgClientUnsignedInstallScript_steammessages_5fclientserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientUnsignedInstallScript_default_instance_;
    new (ptr) ::proto::steam::CMsgClientUnsignedInstallScript();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientUnsignedInstallScript::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientUnsignedInstallScript_steammessages_5fclientserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientUnsignedInstallScript_steammessages_5fclientserver_2eproto}, {}};

void InitDefaults_steammessages_5fclientserver_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientUDSP2PSessionStarted_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientUDSP2PSessionEnded_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientRegisterAuthTicketWithCM_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientTicketAuthComplete_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientCMList_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientP2PConnectionInfo_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientP2PConnectionFailInfo_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientNetworkingCertRequest_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientNetworkingCertReply_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientGetAppOwnershipTicket_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientGetAppOwnershipTicketResponse_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientSessionToken_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientGameConnectTokens_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGSServerType_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGSStatusReply_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGSPlayerList_Player_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGSPlayerList_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGSUserPlaying_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGSDisconnectNotice_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientGamesPlayed_GamePlayed_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientGamesPlayed_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGSApprove_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGSDeny_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGSKick_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientAuthList_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientAuthListAck_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientLicenseList_License_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientLicenseList_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientLBSSetScore_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientLBSSetScoreResponse_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientLBSSetUGC_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientLBSSetUGCResponse_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientLBSFindOrCreateLB_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientLBSFindOrCreateLBResponse_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientLBSGetLBEntries_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientLBSGetLBEntriesResponse_Entry_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientLBSGetLBEntriesResponse_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientAppMinutesPlayedData_AppMinutesPlayedData_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientAppMinutesPlayedData_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientIsLimitedAccount_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientServerList_Server_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientServerList_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientRequestedClientStats_StatsToSend_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientRequestedClientStats_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientStat2_StatDetail_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientStat2_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientMMSCreateLobby_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientMMSCreateLobbyResponse_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientMMSJoinLobby_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientMMSJoinLobbyResponse_Member_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientMMSJoinLobbyResponse_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientMMSLeaveLobby_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientMMSLeaveLobbyResponse_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientMMSGetLobbyList_Filter_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientMMSGetLobbyList_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientMMSGetLobbyListResponse_Lobby_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientMMSGetLobbyListResponse_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientMMSSetLobbyData_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientMMSSetLobbyDataResponse_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientMMSGetLobbyData_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientMMSLobbyData_Member_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientMMSLobbyData_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientMMSSendLobbyChatMsg_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientMMSLobbyChatMsg_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientMMSSetLobbyOwner_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientMMSSetLobbyOwnerResponse_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientMMSSetLobbyLinked_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientMMSSetLobbyGameServer_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientMMSLobbyGameServerSet_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientMMSUserJoinedLobby_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientMMSUserLeftLobby_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientMMSInviteToLobby_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientInviteToGame_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientChatInvite_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientConnectionStats_Stats_Logon_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientConnectionStats_Stats_UDP_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientConnectionStats_Stats_VConn_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientConnectionStats_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientServersAvailable_Server_Types_Available_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientServersAvailable_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientGetUserStats_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientGetUserStatsResponse_Stats_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientGetUserStatsResponse_Achievement_Blocks_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientGetUserStatsResponse_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientStoreUserStatsResponse_Stats_Failed_Validation_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientStoreUserStatsResponse_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientStoreUserStats2_Stats_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientStoreUserStats2_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientStatsUpdated_Updated_Stats_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientStatsUpdated_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientStoreUserStats_Stats_To_Store_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientStoreUserStats_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientGetClientDetails_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientReportOverlayDetourFailure_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientGetClientDetailsResponse_Game_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientGetClientDetailsResponse_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientGetClientAppList_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientGetClientAppListResponse_App_DLC_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientGetClientAppListResponse_App_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientGetClientAppListResponse_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientInstallClientApp_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientInstallClientAppResponse_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientUninstallClientApp_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientUninstallClientAppResponse_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientSetClientAppUpdateState_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientSetClientAppUpdateStateResponse_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientUFSUploadFileRequest_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientUFSUploadFileResponse_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientUFSUploadCommit_File_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientUFSUploadCommit_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientUFSUploadCommitResponse_File_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientUFSUploadCommitResponse_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientUFSFileChunk_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientUFSTransferHeartbeat_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientUFSUploadFileFinished_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientUFSDeleteFileRequest_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientUFSDeleteFileResponse_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientUFSGetFileListForApp_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientUFSGetFileListForAppResponse_File_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientUFSGetFileListForAppResponse_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientUFSDownloadRequest_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientUFSDownloadResponse_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientUFSLoginRequest_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientUFSLoginResponse_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientRequestEncryptedAppTicket_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientRequestEncryptedAppTicketResponse_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientWalletInfoUpdate_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientAppInfoUpdate_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientAppInfoChanges_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientAppInfoRequest_App_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientAppInfoRequest_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientAppInfoResponse_App_Section_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientAppInfoResponse_App_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientAppInfoResponse_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientPackageInfoRequest_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientPackageInfoResponse_Package_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientPackageInfoResponse_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientPICSChangesSinceRequest_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientPICSChangesSinceResponse_PackageChange_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientPICSChangesSinceResponse_AppChange_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientPICSChangesSinceResponse_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientPICSProductInfoRequest_AppInfo_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientPICSProductInfoRequest_PackageInfo_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientPICSProductInfoRequest_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientPICSProductInfoResponse_AppInfo_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientPICSProductInfoResponse_PackageInfo_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientPICSProductInfoResponse_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientPICSAccessTokenRequest_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientPICSAccessTokenResponse_PackageToken_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientPICSAccessTokenResponse_AppToken_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientPICSAccessTokenResponse_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientUFSGetUGCDetails_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientUFSGetUGCDetailsResponse_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientUFSGetSingleFileInfo_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientUFSGetSingleFileInfoResponse_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientUFSShareFile_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientUFSShareFileResponse_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientAMGetClanOfficers_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientAMGetClanOfficersResponse_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientAMGetPersonaNameHistory_IdInstance_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientAMGetPersonaNameHistory_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientAMGetPersonaNameHistoryResponse_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientDeregisterWithServer_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientClanState_NameInfo_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientClanState_UserCounts_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientClanState_Event_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientClanState_steammessages_5fclientserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientUnsignedInstallScript_steammessages_5fclientserver_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_steammessages_5fclientserver_2eproto[170];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_steammessages_5fclientserver_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_steammessages_5fclientserver_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_steammessages_5fclientserver_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUDSP2PSessionStarted, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUDSP2PSessionStarted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUDSP2PSessionStarted, steamid_remote_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUDSP2PSessionStarted, appid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUDSP2PSessionEnded, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUDSP2PSessionEnded, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUDSP2PSessionEnded, steamid_remote_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUDSP2PSessionEnded, appid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUDSP2PSessionEnded, session_length_sec_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUDSP2PSessionEnded, session_error_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUDSP2PSessionEnded, nattype_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUDSP2PSessionEnded, bytes_recv_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUDSP2PSessionEnded, bytes_sent_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUDSP2PSessionEnded, bytes_sent_relay_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUDSP2PSessionEnded, bytes_recv_relay_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUDSP2PSessionEnded, time_to_connect_ms_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientRegisterAuthTicketWithCM, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientRegisterAuthTicketWithCM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientRegisterAuthTicketWithCM, protocol_version_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientRegisterAuthTicketWithCM, ticket_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientRegisterAuthTicketWithCM, client_instance_id_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientTicketAuthComplete, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientTicketAuthComplete, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientTicketAuthComplete, steam_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientTicketAuthComplete, game_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientTicketAuthComplete, estate_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientTicketAuthComplete, eauth_session_response_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientTicketAuthComplete, deprecated_ticket_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientTicketAuthComplete, ticket_crc_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientTicketAuthComplete, ticket_sequence_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientTicketAuthComplete, owner_steam_id_),
  1,
  2,
  3,
  4,
  0,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientCMList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientCMList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientCMList, cm_addresses_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientCMList, cm_ports_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientCMList, cm_websocket_addresses_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientCMList, percent_default_to_websocket_),
  ~0u,
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientP2PConnectionInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientP2PConnectionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientP2PConnectionInfo, steam_id_dest_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientP2PConnectionInfo, steam_id_src_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientP2PConnectionInfo, app_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientP2PConnectionInfo, candidate_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientP2PConnectionInfo, connection_id_src_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientP2PConnectionInfo, rendezvous_),
  2,
  3,
  5,
  0,
  4,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientP2PConnectionFailInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientP2PConnectionFailInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientP2PConnectionFailInfo, steam_id_dest_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientP2PConnectionFailInfo, steam_id_src_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientP2PConnectionFailInfo, app_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientP2PConnectionFailInfo, ep2p_session_error_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientP2PConnectionFailInfo, connection_id_dest_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientP2PConnectionFailInfo, close_reason_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientP2PConnectionFailInfo, close_message_),
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientNetworkingCertRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientNetworkingCertRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientNetworkingCertRequest, key_data_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientNetworkingCertRequest, app_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientNetworkingCertReply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientNetworkingCertReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientNetworkingCertReply, cert_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientNetworkingCertReply, ca_key_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientNetworkingCertReply, ca_signature_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetAppOwnershipTicket, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetAppOwnershipTicket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetAppOwnershipTicket, app_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetAppOwnershipTicketResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetAppOwnershipTicketResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetAppOwnershipTicketResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetAppOwnershipTicketResponse, app_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetAppOwnershipTicketResponse, ticket_),
  2,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientSessionToken, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientSessionToken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientSessionToken, token_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGameConnectTokens, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGameConnectTokens, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGameConnectTokens, max_tokens_to_keep_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGameConnectTokens, tokens_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGSServerType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGSServerType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGSServerType, app_id_served_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGSServerType, flags_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGSServerType, game_ip_address_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGSServerType, game_port_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGSServerType, game_dir_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGSServerType, game_version_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGSServerType, game_query_port_),
  2,
  3,
  4,
  5,
  0,
  1,
  6,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGSStatusReply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGSStatusReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGSStatusReply, is_secure_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGSPlayerList_Player, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGSPlayerList_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGSPlayerList_Player, steam_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGSPlayerList_Player, public_ip_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGSPlayerList_Player, token_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGSPlayerList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGSPlayerList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGSPlayerList, players_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGSUserPlaying, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGSUserPlaying, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGSUserPlaying, steam_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGSUserPlaying, public_ip_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGSUserPlaying, token_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGSDisconnectNotice, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGSDisconnectNotice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGSDisconnectNotice, steam_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGamesPlayed_GamePlayed, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGamesPlayed_GamePlayed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGamesPlayed_GamePlayed, steam_id_gs_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGamesPlayed_GamePlayed, game_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGamesPlayed_GamePlayed, game_ip_address_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGamesPlayed_GamePlayed, game_port_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGamesPlayed_GamePlayed, is_secure_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGamesPlayed_GamePlayed, token_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGamesPlayed_GamePlayed, game_extra_info_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGamesPlayed_GamePlayed, game_data_blob_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGamesPlayed_GamePlayed, process_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGamesPlayed_GamePlayed, streaming_provider_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGamesPlayed_GamePlayed, game_flags_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGamesPlayed_GamePlayed, owner_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGamesPlayed_GamePlayed, vr_hmd_vendor_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGamesPlayed_GamePlayed, vr_hmd_model_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGamesPlayed_GamePlayed, launch_option_type_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGamesPlayed_GamePlayed, primary_controller_type_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGamesPlayed_GamePlayed, primary_steam_controller_serial_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGamesPlayed_GamePlayed, total_steam_controller_count_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGamesPlayed_GamePlayed, total_non_steam_controller_count_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGamesPlayed_GamePlayed, controller_workshop_file_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGamesPlayed_GamePlayed, launch_source_),
  6,
  7,
  8,
  9,
  10,
  0,
  1,
  2,
  11,
  12,
  13,
  14,
  3,
  4,
  15,
  20,
  5,
  16,
  17,
  18,
  19,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGamesPlayed, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGamesPlayed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGamesPlayed, games_played_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGamesPlayed, client_os_type_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGSApprove, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGSApprove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGSApprove, steam_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGSApprove, owner_steam_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGSDeny, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGSDeny, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGSDeny, steam_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGSDeny, edeny_reason_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGSDeny, deny_string_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGSKick, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGSKick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGSKick, steam_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGSKick, edeny_reason_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAuthList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAuthList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAuthList, tokens_left_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAuthList, last_request_seq_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAuthList, last_request_seq_from_server_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAuthList, tickets_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAuthList, app_ids_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAuthList, message_sequence_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAuthListAck, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAuthListAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAuthListAck, ticket_crc_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAuthListAck, app_ids_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAuthListAck, message_sequence_),
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLicenseList_License, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLicenseList_License, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLicenseList_License, package_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLicenseList_License, time_created_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLicenseList_License, time_next_process_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLicenseList_License, minute_limit_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLicenseList_License, minutes_used_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLicenseList_License, payment_method_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLicenseList_License, flags_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLicenseList_License, purchase_country_code_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLicenseList_License, license_type_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLicenseList_License, territory_code_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLicenseList_License, change_number_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLicenseList_License, owner_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLicenseList_License, initial_period_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLicenseList_License, initial_time_unit_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLicenseList_License, renewal_period_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLicenseList_License, renewal_time_unit_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  0,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLicenseList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLicenseList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLicenseList, eresult_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLicenseList, licenses_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLBSSetScore, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLBSSetScore, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLBSSetScore, app_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLBSSetScore, leaderboard_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLBSSetScore, score_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLBSSetScore, details_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLBSSetScore, upload_score_method_),
  1,
  2,
  3,
  0,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLBSSetScoreResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLBSSetScoreResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLBSSetScoreResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLBSSetScoreResponse, leaderboard_entry_count_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLBSSetScoreResponse, score_changed_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLBSSetScoreResponse, global_rank_previous_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLBSSetScoreResponse, global_rank_new_),
  4,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLBSSetUGC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLBSSetUGC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLBSSetUGC, app_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLBSSetUGC, leaderboard_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLBSSetUGC, ugc_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLBSSetUGCResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLBSSetUGCResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLBSSetUGCResponse, eresult_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLBSFindOrCreateLB, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLBSFindOrCreateLB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLBSFindOrCreateLB, app_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLBSFindOrCreateLB, leaderboard_sort_method_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLBSFindOrCreateLB, leaderboard_display_type_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLBSFindOrCreateLB, create_if_not_found_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLBSFindOrCreateLB, leaderboard_name_),
  1,
  2,
  3,
  4,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLBSFindOrCreateLBResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLBSFindOrCreateLBResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLBSFindOrCreateLBResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLBSFindOrCreateLBResponse, leaderboard_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLBSFindOrCreateLBResponse, leaderboard_entry_count_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLBSFindOrCreateLBResponse, leaderboard_sort_method_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLBSFindOrCreateLBResponse, leaderboard_display_type_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLBSFindOrCreateLBResponse, leaderboard_name_),
  5,
  1,
  2,
  3,
  4,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLBSGetLBEntries, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLBSGetLBEntries, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLBSGetLBEntries, app_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLBSGetLBEntries, leaderboard_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLBSGetLBEntries, range_start_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLBSGetLBEntries, range_end_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLBSGetLBEntries, leaderboard_data_request_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLBSGetLBEntries, steamids_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLBSGetLBEntriesResponse_Entry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLBSGetLBEntriesResponse_Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLBSGetLBEntriesResponse_Entry, steam_id_user_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLBSGetLBEntriesResponse_Entry, global_rank_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLBSGetLBEntriesResponse_Entry, score_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLBSGetLBEntriesResponse_Entry, details_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLBSGetLBEntriesResponse_Entry, ugc_id_),
  1,
  2,
  3,
  0,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLBSGetLBEntriesResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLBSGetLBEntriesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLBSGetLBEntriesResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLBSGetLBEntriesResponse, leaderboard_entry_count_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLBSGetLBEntriesResponse, entries_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAppMinutesPlayedData_AppMinutesPlayedData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAppMinutesPlayedData_AppMinutesPlayedData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAppMinutesPlayedData_AppMinutesPlayedData, app_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAppMinutesPlayedData_AppMinutesPlayedData, forever_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAppMinutesPlayedData_AppMinutesPlayedData, last_two_weeks_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAppMinutesPlayedData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAppMinutesPlayedData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAppMinutesPlayedData, minutes_played_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientIsLimitedAccount, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientIsLimitedAccount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientIsLimitedAccount, bis_limited_account_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientIsLimitedAccount, bis_community_banned_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientIsLimitedAccount, bis_locked_account_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientIsLimitedAccount, bis_limited_account_allowed_to_invite_friends_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientServerList_Server, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientServerList_Server, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientServerList_Server, server_type_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientServerList_Server, server_ip_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientServerList_Server, server_port_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientServerList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientServerList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientServerList, servers_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientRequestedClientStats_StatsToSend, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientRequestedClientStats_StatsToSend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientRequestedClientStats_StatsToSend, client_stat_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientRequestedClientStats_StatsToSend, stat_aggregate_method_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientRequestedClientStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientRequestedClientStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientRequestedClientStats, stats_to_send_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientStat2_StatDetail, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientStat2_StatDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientStat2_StatDetail, client_stat_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientStat2_StatDetail, ll_value_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientStat2_StatDetail, time_of_day_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientStat2_StatDetail, cell_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientStat2_StatDetail, depot_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientStat2_StatDetail, app_id_),
  1,
  0,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientStat2, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientStat2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientStat2, stat_detail_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSCreateLobby, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSCreateLobby, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSCreateLobby, app_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSCreateLobby, max_members_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSCreateLobby, lobby_type_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSCreateLobby, lobby_flags_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSCreateLobby, cell_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSCreateLobby, public_ip_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSCreateLobby, metadata_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSCreateLobby, persona_name_owner_),
  2,
  3,
  4,
  5,
  6,
  7,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSCreateLobbyResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSCreateLobbyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSCreateLobbyResponse, app_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSCreateLobbyResponse, steam_id_lobby_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSCreateLobbyResponse, eresult_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSJoinLobby, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSJoinLobby, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSJoinLobby, app_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSJoinLobby, steam_id_lobby_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSJoinLobby, persona_name_),
  2,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSJoinLobbyResponse_Member, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSJoinLobbyResponse_Member, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSJoinLobbyResponse_Member, steam_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSJoinLobbyResponse_Member, persona_name_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSJoinLobbyResponse_Member, metadata_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSJoinLobbyResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSJoinLobbyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSJoinLobbyResponse, app_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSJoinLobbyResponse, steam_id_lobby_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSJoinLobbyResponse, chat_room_enter_response_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSJoinLobbyResponse, max_members_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSJoinLobbyResponse, lobby_type_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSJoinLobbyResponse, lobby_flags_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSJoinLobbyResponse, steam_id_owner_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSJoinLobbyResponse, metadata_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSJoinLobbyResponse, members_),
  2,
  1,
  3,
  4,
  5,
  7,
  6,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSLeaveLobby, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSLeaveLobby, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSLeaveLobby, app_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSLeaveLobby, steam_id_lobby_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSLeaveLobbyResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSLeaveLobbyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSLeaveLobbyResponse, app_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSLeaveLobbyResponse, steam_id_lobby_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSLeaveLobbyResponse, eresult_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSGetLobbyList_Filter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSGetLobbyList_Filter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSGetLobbyList_Filter, key_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSGetLobbyList_Filter, value_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSGetLobbyList_Filter, comparision_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSGetLobbyList_Filter, filter_type_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSGetLobbyList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSGetLobbyList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSGetLobbyList, app_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSGetLobbyList, num_lobbies_requested_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSGetLobbyList, cell_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSGetLobbyList, public_ip_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSGetLobbyList, filters_),
  0,
  1,
  2,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSGetLobbyListResponse_Lobby, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSGetLobbyListResponse_Lobby, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSGetLobbyListResponse_Lobby, steam_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSGetLobbyListResponse_Lobby, max_members_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSGetLobbyListResponse_Lobby, lobby_type_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSGetLobbyListResponse_Lobby, lobby_flags_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSGetLobbyListResponse_Lobby, metadata_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSGetLobbyListResponse_Lobby, num_members_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSGetLobbyListResponse_Lobby, distance_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSGetLobbyListResponse_Lobby, weight_),
  1,
  2,
  3,
  4,
  0,
  5,
  7,
  6,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSGetLobbyListResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSGetLobbyListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSGetLobbyListResponse, app_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSGetLobbyListResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSGetLobbyListResponse, lobbies_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSSetLobbyData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSSetLobbyData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSSetLobbyData, app_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSSetLobbyData, steam_id_lobby_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSSetLobbyData, steam_id_member_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSSetLobbyData, max_members_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSSetLobbyData, lobby_type_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSSetLobbyData, lobby_flags_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSSetLobbyData, metadata_),
  2,
  1,
  4,
  3,
  5,
  6,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSSetLobbyDataResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSSetLobbyDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSSetLobbyDataResponse, app_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSSetLobbyDataResponse, steam_id_lobby_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSSetLobbyDataResponse, eresult_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSGetLobbyData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSGetLobbyData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSGetLobbyData, app_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSGetLobbyData, steam_id_lobby_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSLobbyData_Member, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSLobbyData_Member, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSLobbyData_Member, steam_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSLobbyData_Member, persona_name_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSLobbyData_Member, metadata_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSLobbyData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSLobbyData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSLobbyData, app_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSLobbyData, steam_id_lobby_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSLobbyData, num_members_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSLobbyData, max_members_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSLobbyData, lobby_type_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSLobbyData, lobby_flags_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSLobbyData, steam_id_owner_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSLobbyData, metadata_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSLobbyData, members_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSLobbyData, lobby_cellid_),
  2,
  1,
  3,
  4,
  5,
  7,
  6,
  0,
  ~0u,
  8,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSSendLobbyChatMsg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSSendLobbyChatMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSSendLobbyChatMsg, app_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSSendLobbyChatMsg, steam_id_lobby_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSSendLobbyChatMsg, steam_id_target_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSSendLobbyChatMsg, lobby_message_),
  3,
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSLobbyChatMsg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSLobbyChatMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSLobbyChatMsg, app_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSLobbyChatMsg, steam_id_lobby_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSLobbyChatMsg, steam_id_sender_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSLobbyChatMsg, lobby_message_),
  3,
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSSetLobbyOwner, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSSetLobbyOwner, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSSetLobbyOwner, app_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSSetLobbyOwner, steam_id_lobby_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSSetLobbyOwner, steam_id_new_owner_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSSetLobbyOwnerResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSSetLobbyOwnerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSSetLobbyOwnerResponse, app_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSSetLobbyOwnerResponse, steam_id_lobby_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSSetLobbyOwnerResponse, eresult_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSSetLobbyLinked, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSSetLobbyLinked, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSSetLobbyLinked, app_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSSetLobbyLinked, steam_id_lobby_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSSetLobbyLinked, steam_id_lobby2_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSSetLobbyGameServer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSSetLobbyGameServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSSetLobbyGameServer, app_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSSetLobbyGameServer, steam_id_lobby_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSSetLobbyGameServer, game_server_ip_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSSetLobbyGameServer, game_server_port_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSSetLobbyGameServer, game_server_steam_id_),
  1,
  0,
  2,
  4,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSLobbyGameServerSet, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSLobbyGameServerSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSLobbyGameServerSet, app_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSLobbyGameServerSet, steam_id_lobby_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSLobbyGameServerSet, game_server_ip_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSLobbyGameServerSet, game_server_port_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSLobbyGameServerSet, game_server_steam_id_),
  1,
  0,
  2,
  4,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSUserJoinedLobby, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSUserJoinedLobby, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSUserJoinedLobby, app_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSUserJoinedLobby, steam_id_lobby_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSUserJoinedLobby, steam_id_user_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSUserJoinedLobby, persona_name_),
  3,
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSUserLeftLobby, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSUserLeftLobby, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSUserLeftLobby, app_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSUserLeftLobby, steam_id_lobby_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSUserLeftLobby, steam_id_user_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSUserLeftLobby, persona_name_),
  3,
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSInviteToLobby, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSInviteToLobby, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSInviteToLobby, app_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSInviteToLobby, steam_id_lobby_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientMMSInviteToLobby, steam_id_user_invited_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientInviteToGame, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientInviteToGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientInviteToGame, steam_id_dest_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientInviteToGame, steam_id_src_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientInviteToGame, connect_string_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientChatInvite, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientChatInvite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientChatInvite, steam_id_invited_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientChatInvite, steam_id_chat_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientChatInvite, steam_id_patron_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientChatInvite, chatroom_type_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientChatInvite, steam_id_friend_chat_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientChatInvite, chat_name_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientChatInvite, game_id_),
  1,
  2,
  3,
  6,
  4,
  0,
  5,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientConnectionStats_Stats_Logon, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientConnectionStats_Stats_Logon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientConnectionStats_Stats_Logon, connect_attempts_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientConnectionStats_Stats_Logon, connect_successes_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientConnectionStats_Stats_Logon, connect_failures_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientConnectionStats_Stats_Logon, connections_dropped_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientConnectionStats_Stats_Logon, seconds_running_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientConnectionStats_Stats_Logon, msec_tologonthistime_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientConnectionStats_Stats_Logon, count_bad_cms_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientConnectionStats_Stats_UDP, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientConnectionStats_Stats_UDP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientConnectionStats_Stats_UDP, pkts_sent_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientConnectionStats_Stats_UDP, bytes_sent_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientConnectionStats_Stats_UDP, pkts_recv_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientConnectionStats_Stats_UDP, pkts_processed_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientConnectionStats_Stats_UDP, bytes_recv_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientConnectionStats_Stats_VConn, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientConnectionStats_Stats_VConn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientConnectionStats_Stats_VConn, connections_udp_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientConnectionStats_Stats_VConn, connections_tcp_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientConnectionStats_Stats_VConn, stats_udp_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientConnectionStats_Stats_VConn, pkts_abandoned_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientConnectionStats_Stats_VConn, conn_req_received_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientConnectionStats_Stats_VConn, pkts_resent_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientConnectionStats_Stats_VConn, msgs_sent_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientConnectionStats_Stats_VConn, msgs_sent_failed_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientConnectionStats_Stats_VConn, msgs_recv_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientConnectionStats_Stats_VConn, datagrams_sent_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientConnectionStats_Stats_VConn, datagrams_recv_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientConnectionStats_Stats_VConn, bad_pkts_recv_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientConnectionStats_Stats_VConn, unknown_conn_pkts_recv_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientConnectionStats_Stats_VConn, missed_pkts_recv_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientConnectionStats_Stats_VConn, dup_pkts_recv_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientConnectionStats_Stats_VConn, failed_connect_challenges_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientConnectionStats_Stats_VConn, micro_sec_avg_latency_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientConnectionStats_Stats_VConn, micro_sec_min_latency_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientConnectionStats_Stats_VConn, micro_sec_max_latency_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientConnectionStats_Stats_VConn, mem_pool_msg_in_use_),
  1,
  2,
  0,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientConnectionStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientConnectionStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientConnectionStats, stats_logon_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientConnectionStats, stats_vconn_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientServersAvailable_Server_Types_Available, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientServersAvailable_Server_Types_Available, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientServersAvailable_Server_Types_Available, server_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientServersAvailable_Server_Types_Available, changed_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientServersAvailable, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientServersAvailable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientServersAvailable, server_types_available_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientServersAvailable, server_type_for_auth_services_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetUserStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetUserStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetUserStats, game_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetUserStats, crc_stats_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetUserStats, schema_local_version_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetUserStats, steam_id_for_user_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetUserStatsResponse_Stats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetUserStatsResponse_Stats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetUserStatsResponse_Stats, stat_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetUserStatsResponse_Stats, stat_value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetUserStatsResponse_Achievement_Blocks, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetUserStatsResponse_Achievement_Blocks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetUserStatsResponse_Achievement_Blocks, achievement_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetUserStatsResponse_Achievement_Blocks, unlock_time_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetUserStatsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetUserStatsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetUserStatsResponse, game_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetUserStatsResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetUserStatsResponse, crc_stats_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetUserStatsResponse, schema_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetUserStatsResponse, stats_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetUserStatsResponse, achievement_blocks_),
  1,
  3,
  2,
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientStoreUserStatsResponse_Stats_Failed_Validation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientStoreUserStatsResponse_Stats_Failed_Validation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientStoreUserStatsResponse_Stats_Failed_Validation, stat_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientStoreUserStatsResponse_Stats_Failed_Validation, reverted_stat_value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientStoreUserStatsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientStoreUserStatsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientStoreUserStatsResponse, game_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientStoreUserStatsResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientStoreUserStatsResponse, crc_stats_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientStoreUserStatsResponse, stats_failed_validation_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientStoreUserStatsResponse, stats_out_of_date_),
  0,
  3,
  1,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientStoreUserStats2_Stats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientStoreUserStats2_Stats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientStoreUserStats2_Stats, stat_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientStoreUserStats2_Stats, stat_value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientStoreUserStats2, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientStoreUserStats2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientStoreUserStats2, game_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientStoreUserStats2, settor_steam_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientStoreUserStats2, settee_steam_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientStoreUserStats2, crc_stats_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientStoreUserStats2, explicit_reset_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientStoreUserStats2, stats_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientStatsUpdated_Updated_Stats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientStatsUpdated_Updated_Stats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientStatsUpdated_Updated_Stats, stat_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientStatsUpdated_Updated_Stats, stat_value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientStatsUpdated, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientStatsUpdated, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientStatsUpdated, steam_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientStatsUpdated, game_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientStatsUpdated, crc_stats_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientStatsUpdated, updated_stats_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientStoreUserStats_Stats_To_Store, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientStoreUserStats_Stats_To_Store, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientStoreUserStats_Stats_To_Store, stat_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientStoreUserStats_Stats_To_Store, stat_value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientStoreUserStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientStoreUserStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientStoreUserStats, game_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientStoreUserStats, explicit_reset_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientStoreUserStats, stats_to_store_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetClientDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetClientDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientReportOverlayDetourFailure, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientReportOverlayDetourFailure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientReportOverlayDetourFailure, failure_strings_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetClientDetailsResponse_Game, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetClientDetailsResponse_Game, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetClientDetailsResponse_Game, appid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetClientDetailsResponse_Game, extra_info_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetClientDetailsResponse_Game, time_running_sec_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetClientDetailsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetClientDetailsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetClientDetailsResponse, package_version_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetClientDetailsResponse, protocol_version_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetClientDetailsResponse, os_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetClientDetailsResponse, machine_name_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetClientDetailsResponse, ip_public_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetClientDetailsResponse, ip_private_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetClientDetailsResponse, bytes_available_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetClientDetailsResponse, games_running_),
  4,
  5,
  0,
  1,
  2,
  3,
  6,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetClientAppList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetClientAppList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetClientAppList, media_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetClientAppList, tools_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetClientAppList, games_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetClientAppList, only_installed_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetClientAppList, only_changing_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetClientAppList, comics_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetClientAppListResponse_App_DLC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetClientAppListResponse_App_DLC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetClientAppListResponse_App_DLC, appid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetClientAppListResponse_App_DLC, installed_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetClientAppListResponse_App, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetClientAppListResponse_App, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetClientAppListResponse_App, appid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetClientAppListResponse_App, category_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetClientAppListResponse_App, app_type_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetClientAppListResponse_App, favorite_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetClientAppListResponse_App, installed_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetClientAppListResponse_App, auto_update_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetClientAppListResponse_App, bytes_downloaded_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetClientAppListResponse_App, bytes_needed_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetClientAppListResponse_App, bytes_download_rate_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetClientAppListResponse_App, download_paused_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetClientAppListResponse_App, num_downloading_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetClientAppListResponse_App, num_paused_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetClientAppListResponse_App, changing_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetClientAppListResponse_App, available_on_platform_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetClientAppListResponse_App, dlcs_),
  2,
  0,
  1,
  3,
  4,
  5,
  7,
  8,
  9,
  6,
  10,
  11,
  12,
  13,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetClientAppListResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetClientAppListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetClientAppListResponse, apps_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetClientAppListResponse, bytes_available_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientInstallClientApp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientInstallClientApp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientInstallClientApp, appid_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientInstallClientAppResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientInstallClientAppResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientInstallClientAppResponse, result_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUninstallClientApp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUninstallClientApp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUninstallClientApp, appid_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUninstallClientAppResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUninstallClientAppResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUninstallClientAppResponse, result_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientSetClientAppUpdateState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientSetClientAppUpdateState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientSetClientAppUpdateState, appid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientSetClientAppUpdateState, update_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientSetClientAppUpdateStateResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientSetClientAppUpdateStateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientSetClientAppUpdateStateResponse, result_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSUploadFileRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSUploadFileRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSUploadFileRequest, app_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSUploadFileRequest, file_size_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSUploadFileRequest, raw_file_size_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSUploadFileRequest, sha_file_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSUploadFileRequest, time_stamp_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSUploadFileRequest, file_name_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSUploadFileRequest, platforms_to_sync_deprecated_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSUploadFileRequest, platforms_to_sync_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSUploadFileRequest, cell_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSUploadFileRequest, can_encrypt_),
  2,
  3,
  5,
  0,
  4,
  1,
  6,
  9,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSUploadFileResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSUploadFileResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSUploadFileResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSUploadFileResponse, sha_file_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSUploadFileResponse, use_http_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSUploadFileResponse, http_host_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSUploadFileResponse, http_url_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSUploadFileResponse, kv_headers_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSUploadFileResponse, use_https_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSUploadFileResponse, encrypt_file_),
  7,
  0,
  4,
  1,
  2,
  3,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSUploadCommit_File, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSUploadCommit_File, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSUploadCommit_File, eresult_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSUploadCommit_File, app_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSUploadCommit_File, sha_file_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSUploadCommit_File, cub_file_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSUploadCommit_File, file_name_),
  4,
  2,
  0,
  3,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSUploadCommit, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSUploadCommit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSUploadCommit, files_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSUploadCommitResponse_File, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSUploadCommitResponse_File, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSUploadCommitResponse_File, eresult_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSUploadCommitResponse_File, app_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSUploadCommitResponse_File, sha_file_),
  2,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSUploadCommitResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSUploadCommitResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSUploadCommitResponse, files_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSFileChunk, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSFileChunk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSFileChunk, sha_file_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSFileChunk, file_start_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSFileChunk, data_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSTransferHeartbeat, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSTransferHeartbeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSUploadFileFinished, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSUploadFileFinished, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSUploadFileFinished, eresult_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSUploadFileFinished, sha_file_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSDeleteFileRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSDeleteFileRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSDeleteFileRequest, app_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSDeleteFileRequest, file_name_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSDeleteFileRequest, is_explicit_delete_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSDeleteFileResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSDeleteFileResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSDeleteFileResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSDeleteFileResponse, file_name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSGetFileListForApp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSGetFileListForApp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSGetFileListForApp, apps_to_query_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSGetFileListForApp, send_path_prefixes_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSGetFileListForAppResponse_File, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSGetFileListForAppResponse_File, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSGetFileListForAppResponse_File, app_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSGetFileListForAppResponse_File, file_name_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSGetFileListForAppResponse_File, sha_file_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSGetFileListForAppResponse_File, time_stamp_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSGetFileListForAppResponse_File, raw_file_size_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSGetFileListForAppResponse_File, is_explicit_delete_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSGetFileListForAppResponse_File, platforms_to_sync_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSGetFileListForAppResponse_File, path_prefix_index_),
  2,
  0,
  1,
  4,
  3,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSGetFileListForAppResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSGetFileListForAppResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSGetFileListForAppResponse, files_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSGetFileListForAppResponse, path_prefixes_),
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSDownloadRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSDownloadRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSDownloadRequest, app_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSDownloadRequest, file_name_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSDownloadRequest, can_handle_http_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSDownloadResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSDownloadResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSDownloadResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSDownloadResponse, app_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSDownloadResponse, file_size_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSDownloadResponse, raw_file_size_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSDownloadResponse, sha_file_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSDownloadResponse, time_stamp_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSDownloadResponse, is_explicit_delete_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSDownloadResponse, use_http_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSDownloadResponse, http_host_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSDownloadResponse, http_url_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSDownloadResponse, kv_headers_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSDownloadResponse, use_https_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSDownloadResponse, encrypted_),
  12,
  4,
  5,
  7,
  0,
  6,
  8,
  9,
  1,
  2,
  3,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSLoginRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSLoginRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSLoginRequest, protocol_version_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSLoginRequest, am_session_token_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSLoginRequest, apps_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSLoginResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSLoginResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSLoginResponse, eresult_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientRequestEncryptedAppTicket, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientRequestEncryptedAppTicket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientRequestEncryptedAppTicket, app_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientRequestEncryptedAppTicket, userdata_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientRequestEncryptedAppTicketResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientRequestEncryptedAppTicketResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientRequestEncryptedAppTicketResponse, app_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientRequestEncryptedAppTicketResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientRequestEncryptedAppTicketResponse, encrypted_app_ticket_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientWalletInfoUpdate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientWalletInfoUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientWalletInfoUpdate, has_wallet_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientWalletInfoUpdate, balance_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientWalletInfoUpdate, currency_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientWalletInfoUpdate, balance_delayed_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientWalletInfoUpdate, balance64_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientWalletInfoUpdate, balance64_delayed_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAppInfoUpdate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAppInfoUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAppInfoUpdate, last_changenumber_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAppInfoUpdate, send_changelist_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAppInfoChanges, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAppInfoChanges, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAppInfoChanges, current_change_number_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAppInfoChanges, force_full_update_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAppInfoChanges, appids_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAppInfoRequest_App, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAppInfoRequest_App, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAppInfoRequest_App, app_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAppInfoRequest_App, section_flags_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAppInfoRequest_App, section_crc_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAppInfoRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAppInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAppInfoRequest, apps_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAppInfoRequest, supports_batches_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAppInfoResponse_App_Section, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAppInfoResponse_App_Section, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAppInfoResponse_App_Section, section_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAppInfoResponse_App_Section, section_kv_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAppInfoResponse_App, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAppInfoResponse_App, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAppInfoResponse_App, app_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAppInfoResponse_App, change_number_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAppInfoResponse_App, sections_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAppInfoResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAppInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAppInfoResponse, apps_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAppInfoResponse, apps_unknown_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAppInfoResponse, apps_pending_),
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPackageInfoRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPackageInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPackageInfoRequest, package_ids_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPackageInfoRequest, meta_data_only_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPackageInfoResponse_Package, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPackageInfoResponse_Package, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPackageInfoResponse_Package, package_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPackageInfoResponse_Package, change_number_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPackageInfoResponse_Package, sha_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPackageInfoResponse_Package, buffer_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPackageInfoResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPackageInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPackageInfoResponse, packages_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPackageInfoResponse, packages_unknown_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPackageInfoResponse, packages_pending_),
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSChangesSinceRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSChangesSinceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSChangesSinceRequest, since_change_number_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSChangesSinceRequest, send_app_info_changes_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSChangesSinceRequest, send_package_info_changes_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSChangesSinceRequest, num_app_info_cached_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSChangesSinceRequest, num_package_info_cached_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSChangesSinceResponse_PackageChange, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSChangesSinceResponse_PackageChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSChangesSinceResponse_PackageChange, packageid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSChangesSinceResponse_PackageChange, change_number_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSChangesSinceResponse_PackageChange, needs_token_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSChangesSinceResponse_AppChange, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSChangesSinceResponse_AppChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSChangesSinceResponse_AppChange, appid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSChangesSinceResponse_AppChange, change_number_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSChangesSinceResponse_AppChange, needs_token_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSChangesSinceResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSChangesSinceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSChangesSinceResponse, current_change_number_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSChangesSinceResponse, since_change_number_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSChangesSinceResponse, force_full_update_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSChangesSinceResponse, package_changes_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSChangesSinceResponse, app_changes_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSChangesSinceResponse, force_full_app_update_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSChangesSinceResponse, force_full_package_update_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSProductInfoRequest_AppInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSProductInfoRequest_AppInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSProductInfoRequest_AppInfo, appid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSProductInfoRequest_AppInfo, access_token_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSProductInfoRequest_AppInfo, only_public_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSProductInfoRequest_PackageInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSProductInfoRequest_PackageInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSProductInfoRequest_PackageInfo, packageid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSProductInfoRequest_PackageInfo, access_token_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSProductInfoRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSProductInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSProductInfoRequest, packages_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSProductInfoRequest, apps_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSProductInfoRequest, meta_data_only_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSProductInfoRequest, num_prev_failed_),
  ~0u,
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSProductInfoResponse_AppInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSProductInfoResponse_AppInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSProductInfoResponse_AppInfo, appid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSProductInfoResponse_AppInfo, change_number_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSProductInfoResponse_AppInfo, missing_token_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSProductInfoResponse_AppInfo, sha_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSProductInfoResponse_AppInfo, buffer_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSProductInfoResponse_AppInfo, only_public_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSProductInfoResponse_AppInfo, size_),
  2,
  3,
  4,
  0,
  1,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSProductInfoResponse_PackageInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSProductInfoResponse_PackageInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSProductInfoResponse_PackageInfo, packageid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSProductInfoResponse_PackageInfo, change_number_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSProductInfoResponse_PackageInfo, missing_token_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSProductInfoResponse_PackageInfo, sha_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSProductInfoResponse_PackageInfo, buffer_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSProductInfoResponse_PackageInfo, size_),
  2,
  3,
  4,
  0,
  1,
  5,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSProductInfoResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSProductInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSProductInfoResponse, apps_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSProductInfoResponse, unknown_appids_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSProductInfoResponse, packages_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSProductInfoResponse, unknown_packageids_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSProductInfoResponse, meta_data_only_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSProductInfoResponse, response_pending_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSProductInfoResponse, http_min_size_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSProductInfoResponse, http_host_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSAccessTokenRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSAccessTokenRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSAccessTokenRequest, packageids_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSAccessTokenRequest, appids_),
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSAccessTokenResponse_PackageToken, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSAccessTokenResponse_PackageToken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSAccessTokenResponse_PackageToken, packageid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSAccessTokenResponse_PackageToken, access_token_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSAccessTokenResponse_AppToken, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSAccessTokenResponse_AppToken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSAccessTokenResponse_AppToken, appid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSAccessTokenResponse_AppToken, access_token_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSAccessTokenResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSAccessTokenResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSAccessTokenResponse, package_access_tokens_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSAccessTokenResponse, package_denied_tokens_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSAccessTokenResponse, app_access_tokens_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPICSAccessTokenResponse, app_denied_tokens_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSGetUGCDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSGetUGCDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSGetUGCDetails, hcontent_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSGetUGCDetailsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSGetUGCDetailsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSGetUGCDetailsResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSGetUGCDetailsResponse, url_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSGetUGCDetailsResponse, app_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSGetUGCDetailsResponse, filename_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSGetUGCDetailsResponse, steamid_creator_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSGetUGCDetailsResponse, file_size_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSGetUGCDetailsResponse, compressed_file_size_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSGetUGCDetailsResponse, rangecheck_host_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSGetUGCDetailsResponse, file_encoded_sha1_),
  8,
  0,
  4,
  1,
  6,
  5,
  7,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSGetSingleFileInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSGetSingleFileInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSGetSingleFileInfo, app_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSGetSingleFileInfo, file_name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSGetSingleFileInfoResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSGetSingleFileInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSGetSingleFileInfoResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSGetSingleFileInfoResponse, app_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSGetSingleFileInfoResponse, file_name_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSGetSingleFileInfoResponse, sha_file_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSGetSingleFileInfoResponse, time_stamp_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSGetSingleFileInfoResponse, raw_file_size_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSGetSingleFileInfoResponse, is_explicit_delete_),
  6,
  2,
  0,
  1,
  4,
  3,
  5,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSShareFile, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSShareFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSShareFile, app_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSShareFile, file_name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSShareFileResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSShareFileResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSShareFileResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUFSShareFileResponse, hcontent_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAMGetClanOfficers, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAMGetClanOfficers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAMGetClanOfficers, steamid_clan_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAMGetClanOfficersResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAMGetClanOfficersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAMGetClanOfficersResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAMGetClanOfficersResponse, steamid_clan_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAMGetClanOfficersResponse, officer_count_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAMGetPersonaNameHistory_IdInstance, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAMGetPersonaNameHistory_IdInstance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAMGetPersonaNameHistory_IdInstance, steamid_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAMGetPersonaNameHistory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAMGetPersonaNameHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAMGetPersonaNameHistory, id_count_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAMGetPersonaNameHistory, ids_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance, name_since_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance, name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance, eresult_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance, steamid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance, names_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAMGetPersonaNameHistoryResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAMGetPersonaNameHistoryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAMGetPersonaNameHistoryResponse, responses_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientDeregisterWithServer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientDeregisterWithServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientDeregisterWithServer, eservertype_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientDeregisterWithServer, app_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientClanState_NameInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientClanState_NameInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientClanState_NameInfo, clan_name_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientClanState_NameInfo, sha_avatar_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientClanState_UserCounts, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientClanState_UserCounts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientClanState_UserCounts, members_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientClanState_UserCounts, online_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientClanState_UserCounts, chatting_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientClanState_UserCounts, in_game_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientClanState_UserCounts, chat_room_members_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientClanState_Event, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientClanState_Event, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientClanState_Event, gid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientClanState_Event, event_time_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientClanState_Event, headline_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientClanState_Event, game_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientClanState_Event, just_posted_),
  1,
  2,
  0,
  4,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientClanState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientClanState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientClanState, steamid_clan_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientClanState, clan_account_flags_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientClanState, name_info_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientClanState, user_counts_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientClanState, events_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientClanState, announcements_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientClanState, chat_room_private_),
  2,
  3,
  0,
  1,
  ~0u,
  ~0u,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUnsignedInstallScript, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUnsignedInstallScript, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUnsignedInstallScript, app_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUnsignedInstallScript, file_name_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUnsignedInstallScript, file_size_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUnsignedInstallScript, signature_broken_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUnsignedInstallScript, depot_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUnsignedInstallScript, manifest_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientUnsignedInstallScript, file_flags_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::proto::steam::CMsgClientUDSP2PSessionStarted)},
  { 9, 24, sizeof(::proto::steam::CMsgClientUDSP2PSessionEnded)},
  { 34, 42, sizeof(::proto::steam::CMsgClientRegisterAuthTicketWithCM)},
  { 45, 58, sizeof(::proto::steam::CMsgClientTicketAuthComplete)},
  { 66, 75, sizeof(::proto::steam::CMsgClientCMList)},
  { 79, 90, sizeof(::proto::steam::CMsgClientP2PConnectionInfo)},
  { 96, 108, sizeof(::proto::steam::CMsgClientP2PConnectionFailInfo)},
  { 115, 122, sizeof(::proto::steam::CMsgClientNetworkingCertRequest)},
  { 124, 132, sizeof(::proto::steam::CMsgClientNetworkingCertReply)},
  { 135, 141, sizeof(::proto::steam::CMsgClientGetAppOwnershipTicket)},
  { 142, 150, sizeof(::proto::steam::CMsgClientGetAppOwnershipTicketResponse)},
  { 153, 159, sizeof(::proto::steam::CMsgClientSessionToken)},
  { 160, 167, sizeof(::proto::steam::CMsgClientGameConnectTokens)},
  { 169, 181, sizeof(::proto::steam::CMsgGSServerType)},
  { 188, 194, sizeof(::proto::steam::CMsgGSStatusReply)},
  { 195, 203, sizeof(::proto::steam::CMsgGSPlayerList_Player)},
  { 206, 212, sizeof(::proto::steam::CMsgGSPlayerList)},
  { 213, 221, sizeof(::proto::steam::CMsgGSUserPlaying)},
  { 224, 230, sizeof(::proto::steam::CMsgGSDisconnectNotice)},
  { 231, 257, sizeof(::proto::steam::CMsgClientGamesPlayed_GamePlayed)},
  { 278, 285, sizeof(::proto::steam::CMsgClientGamesPlayed)},
  { 287, 294, sizeof(::proto::steam::CMsgGSApprove)},
  { 296, 304, sizeof(::proto::steam::CMsgGSDeny)},
  { 307, 314, sizeof(::proto::steam::CMsgGSKick)},
  { 316, 327, sizeof(::proto::steam::CMsgClientAuthList)},
  { 333, 341, sizeof(::proto::steam::CMsgClientAuthListAck)},
  { 344, 365, sizeof(::proto::steam::CMsgClientLicenseList_License)},
  { 381, 388, sizeof(::proto::steam::CMsgClientLicenseList)},
  { 390, 400, sizeof(::proto::steam::CMsgClientLBSSetScore)},
  { 405, 415, sizeof(::proto::steam::CMsgClientLBSSetScoreResponse)},
  { 420, 428, sizeof(::proto::steam::CMsgClientLBSSetUGC)},
  { 431, 437, sizeof(::proto::steam::CMsgClientLBSSetUGCResponse)},
  { 438, 448, sizeof(::proto::steam::CMsgClientLBSFindOrCreateLB)},
  { 453, 464, sizeof(::proto::steam::CMsgClientLBSFindOrCreateLBResponse)},
  { 470, 481, sizeof(::proto::steam::CMsgClientLBSGetLBEntries)},
  { 487, 497, sizeof(::proto::steam::CMsgClientLBSGetLBEntriesResponse_Entry)},
  { 502, 510, sizeof(::proto::steam::CMsgClientLBSGetLBEntriesResponse)},
  { 513, 521, sizeof(::proto::steam::CMsgClientAppMinutesPlayedData_AppMinutesPlayedData)},
  { 524, 530, sizeof(::proto::steam::CMsgClientAppMinutesPlayedData)},
  { 531, 540, sizeof(::proto::steam::CMsgClientIsLimitedAccount)},
  { 544, 552, sizeof(::proto::steam::CMsgClientServerList_Server)},
  { 555, 561, sizeof(::proto::steam::CMsgClientServerList)},
  { 562, 569, sizeof(::proto::steam::CMsgClientRequestedClientStats_StatsToSend)},
  { 571, 577, sizeof(::proto::steam::CMsgClientRequestedClientStats)},
  { 578, 589, sizeof(::proto::steam::CMsgClientStat2_StatDetail)},
  { 595, 601, sizeof(::proto::steam::CMsgClientStat2)},
  { 602, 615, sizeof(::proto::steam::CMsgClientMMSCreateLobby)},
  { 623, 631, sizeof(::proto::steam::CMsgClientMMSCreateLobbyResponse)},
  { 634, 642, sizeof(::proto::steam::CMsgClientMMSJoinLobby)},
  { 645, 653, sizeof(::proto::steam::CMsgClientMMSJoinLobbyResponse_Member)},
  { 656, 670, sizeof(::proto::steam::CMsgClientMMSJoinLobbyResponse)},
  { 679, 686, sizeof(::proto::steam::CMsgClientMMSLeaveLobby)},
  { 688, 696, sizeof(::proto::steam::CMsgClientMMSLeaveLobbyResponse)},
  { 699, 708, sizeof(::proto::steam::CMsgClientMMSGetLobbyList_Filter)},
  { 712, 722, sizeof(::proto::steam::CMsgClientMMSGetLobbyList)},
  { 727, 740, sizeof(::proto::steam::CMsgClientMMSGetLobbyListResponse_Lobby)},
  { 748, 756, sizeof(::proto::steam::CMsgClientMMSGetLobbyListResponse)},
  { 759, 771, sizeof(::proto::steam::CMsgClientMMSSetLobbyData)},
  { 778, 786, sizeof(::proto::steam::CMsgClientMMSSetLobbyDataResponse)},
  { 789, 796, sizeof(::proto::steam::CMsgClientMMSGetLobbyData)},
  { 798, 806, sizeof(::proto::steam::CMsgClientMMSLobbyData_Member)},
  { 809, 824, sizeof(::proto::steam::CMsgClientMMSLobbyData)},
  { 834, 843, sizeof(::proto::steam::CMsgClientMMSSendLobbyChatMsg)},
  { 847, 856, sizeof(::proto::steam::CMsgClientMMSLobbyChatMsg)},
  { 860, 868, sizeof(::proto::steam::CMsgClientMMSSetLobbyOwner)},
  { 871, 879, sizeof(::proto::steam::CMsgClientMMSSetLobbyOwnerResponse)},
  { 882, 890, sizeof(::proto::steam::CMsgClientMMSSetLobbyLinked)},
  { 893, 903, sizeof(::proto::steam::CMsgClientMMSSetLobbyGameServer)},
  { 908, 918, sizeof(::proto::steam::CMsgClientMMSLobbyGameServerSet)},
  { 923, 932, sizeof(::proto::steam::CMsgClientMMSUserJoinedLobby)},
  { 936, 945, sizeof(::proto::steam::CMsgClientMMSUserLeftLobby)},
  { 949, 957, sizeof(::proto::steam::CMsgClientMMSInviteToLobby)},
  { 960, 968, sizeof(::proto::steam::CMsgClientInviteToGame)},
  { 971, 983, sizeof(::proto::steam::CMsgClientChatInvite)},
  { 990, 1002, sizeof(::proto::steam::CMsgClientConnectionStats_Stats_Logon)},
  { 1009, 1019, sizeof(::proto::steam::CMsgClientConnectionStats_Stats_UDP)},
  { 1024, 1049, sizeof(::proto::steam::CMsgClientConnectionStats_Stats_VConn)},
  { 1069, 1076, sizeof(::proto::steam::CMsgClientConnectionStats)},
  { 1078, 1085, sizeof(::proto::steam::CMsgClientServersAvailable_Server_Types_Available)},
  { 1087, 1094, sizeof(::proto::steam::CMsgClientServersAvailable)},
  { 1096, 1105, sizeof(::proto::steam::CMsgClientGetUserStats)},
  { 1109, 1116, sizeof(::proto::steam::CMsgClientGetUserStatsResponse_Stats)},
  { 1118, 1125, sizeof(::proto::steam::CMsgClientGetUserStatsResponse_Achievement_Blocks)},
  { 1127, 1138, sizeof(::proto::steam::CMsgClientGetUserStatsResponse)},
  { 1144, 1151, sizeof(::proto::steam::CMsgClientStoreUserStatsResponse_Stats_Failed_Validation)},
  { 1153, 1163, sizeof(::proto::steam::CMsgClientStoreUserStatsResponse)},
  { 1168, 1175, sizeof(::proto::steam::CMsgClientStoreUserStats2_Stats)},
  { 1177, 1188, sizeof(::proto::steam::CMsgClientStoreUserStats2)},
  { 1194, 1201, sizeof(::proto::steam::CMsgClientStatsUpdated_Updated_Stats)},
  { 1203, 1212, sizeof(::proto::steam::CMsgClientStatsUpdated)},
  { 1216, 1223, sizeof(::proto::steam::CMsgClientStoreUserStats_Stats_To_Store)},
  { 1225, 1233, sizeof(::proto::steam::CMsgClientStoreUserStats)},
  { 1236, 1241, sizeof(::proto::steam::CMsgClientGetClientDetails)},
  { 1241, 1247, sizeof(::proto::steam::CMsgClientReportOverlayDetourFailure)},
  { 1248, 1256, sizeof(::proto::steam::CMsgClientGetClientDetailsResponse_Game)},
  { 1259, 1272, sizeof(::proto::steam::CMsgClientGetClientDetailsResponse)},
  { 1280, 1291, sizeof(::proto::steam::CMsgClientGetClientAppList)},
  { 1297, 1304, sizeof(::proto::steam::CMsgClientGetClientAppListResponse_App_DLC)},
  { 1306, 1326, sizeof(::proto::steam::CMsgClientGetClientAppListResponse_App)},
  { 1341, 1348, sizeof(::proto::steam::CMsgClientGetClientAppListResponse)},
  { 1350, 1356, sizeof(::proto::steam::CMsgClientInstallClientApp)},
  { 1357, 1363, sizeof(::proto::steam::CMsgClientInstallClientAppResponse)},
  { 1364, 1370, sizeof(::proto::steam::CMsgClientUninstallClientApp)},
  { 1371, 1377, sizeof(::proto::steam::CMsgClientUninstallClientAppResponse)},
  { 1378, 1385, sizeof(::proto::steam::CMsgClientSetClientAppUpdateState)},
  { 1387, 1393, sizeof(::proto::steam::CMsgClientSetClientAppUpdateStateResponse)},
  { 1394, 1409, sizeof(::proto::steam::CMsgClientUFSUploadFileRequest)},
  { 1419, 1432, sizeof(::proto::steam::CMsgClientUFSUploadFileResponse)},
  { 1440, 1450, sizeof(::proto::steam::CMsgClientUFSUploadCommit_File)},
  { 1455, 1461, sizeof(::proto::steam::CMsgClientUFSUploadCommit)},
  { 1462, 1470, sizeof(::proto::steam::CMsgClientUFSUploadCommitResponse_File)},
  { 1473, 1479, sizeof(::proto::steam::CMsgClientUFSUploadCommitResponse)},
  { 1480, 1488, sizeof(::proto::steam::CMsgClientUFSFileChunk)},
  { 1491, 1496, sizeof(::proto::steam::CMsgClientUFSTransferHeartbeat)},
  { 1496, 1503, sizeof(::proto::steam::CMsgClientUFSUploadFileFinished)},
  { 1505, 1513, sizeof(::proto::steam::CMsgClientUFSDeleteFileRequest)},
  { 1516, 1523, sizeof(::proto::steam::CMsgClientUFSDeleteFileResponse)},
  { 1525, 1532, sizeof(::proto::steam::CMsgClientUFSGetFileListForApp)},
  { 1534, 1547, sizeof(::proto::steam::CMsgClientUFSGetFileListForAppResponse_File)},
  { 1555, 1562, sizeof(::proto::steam::CMsgClientUFSGetFileListForAppResponse)},
  { 1564, 1572, sizeof(::proto::steam::CMsgClientUFSDownloadRequest)},
  { 1575, 1593, sizeof(::proto::steam::CMsgClientUFSDownloadResponse)},
  { 1606, 1614, sizeof(::proto::steam::CMsgClientUFSLoginRequest)},
  { 1617, 1623, sizeof(::proto::steam::CMsgClientUFSLoginResponse)},
  { 1624, 1631, sizeof(::proto::steam::CMsgClientRequestEncryptedAppTicket)},
  { 1633, 1641, sizeof(::proto::steam::CMsgClientRequestEncryptedAppTicketResponse)},
  { 1644, 1655, sizeof(::proto::steam::CMsgClientWalletInfoUpdate)},
  { 1661, 1668, sizeof(::proto::steam::CMsgClientAppInfoUpdate)},
  { 1670, 1678, sizeof(::proto::steam::CMsgClientAppInfoChanges)},
  { 1681, 1689, sizeof(::proto::steam::CMsgClientAppInfoRequest_App)},
  { 1692, 1699, sizeof(::proto::steam::CMsgClientAppInfoRequest)},
  { 1701, 1708, sizeof(::proto::steam::CMsgClientAppInfoResponse_App_Section)},
  { 1710, 1718, sizeof(::proto::steam::CMsgClientAppInfoResponse_App)},
  { 1721, 1729, sizeof(::proto::steam::CMsgClientAppInfoResponse)},
  { 1732, 1739, sizeof(::proto::steam::CMsgClientPackageInfoRequest)},
  { 1741, 1750, sizeof(::proto::steam::CMsgClientPackageInfoResponse_Package)},
  { 1754, 1762, sizeof(::proto::steam::CMsgClientPackageInfoResponse)},
  { 1765, 1775, sizeof(::proto::steam::CMsgClientPICSChangesSinceRequest)},
  { 1780, 1788, sizeof(::proto::steam::CMsgClientPICSChangesSinceResponse_PackageChange)},
  { 1791, 1799, sizeof(::proto::steam::CMsgClientPICSChangesSinceResponse_AppChange)},
  { 1802, 1814, sizeof(::proto::steam::CMsgClientPICSChangesSinceResponse)},
  { 1821, 1829, sizeof(::proto::steam::CMsgClientPICSProductInfoRequest_AppInfo)},
  { 1832, 1839, sizeof(::proto::steam::CMsgClientPICSProductInfoRequest_PackageInfo)},
  { 1841, 1850, sizeof(::proto::steam::CMsgClientPICSProductInfoRequest)},
  { 1854, 1866, sizeof(::proto::steam::CMsgClientPICSProductInfoResponse_AppInfo)},
  { 1873, 1884, sizeof(::proto::steam::CMsgClientPICSProductInfoResponse_PackageInfo)},
  { 1890, 1903, sizeof(::proto::steam::CMsgClientPICSProductInfoResponse)},
  { 1911, 1918, sizeof(::proto::steam::CMsgClientPICSAccessTokenRequest)},
  { 1920, 1927, sizeof(::proto::steam::CMsgClientPICSAccessTokenResponse_PackageToken)},
  { 1929, 1936, sizeof(::proto::steam::CMsgClientPICSAccessTokenResponse_AppToken)},
  { 1938, 1947, sizeof(::proto::steam::CMsgClientPICSAccessTokenResponse)},
  { 1951, 1957, sizeof(::proto::steam::CMsgClientUFSGetUGCDetails)},
  { 1958, 1972, sizeof(::proto::steam::CMsgClientUFSGetUGCDetailsResponse)},
  { 1981, 1988, sizeof(::proto::steam::CMsgClientUFSGetSingleFileInfo)},
  { 1990, 2002, sizeof(::proto::steam::CMsgClientUFSGetSingleFileInfoResponse)},
  { 2009, 2016, sizeof(::proto::steam::CMsgClientUFSShareFile)},
  { 2018, 2025, sizeof(::proto::steam::CMsgClientUFSShareFileResponse)},
  { 2027, 2033, sizeof(::proto::steam::CMsgClientAMGetClanOfficers)},
  { 2034, 2042, sizeof(::proto::steam::CMsgClientAMGetClanOfficersResponse)},
  { 2045, 2051, sizeof(::proto::steam::CMsgClientAMGetPersonaNameHistory_IdInstance)},
  { 2052, 2059, sizeof(::proto::steam::CMsgClientAMGetPersonaNameHistory)},
  { 2061, 2068, sizeof(::proto::steam::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance)},
  { 2070, 2078, sizeof(::proto::steam::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance)},
  { 2081, 2087, sizeof(::proto::steam::CMsgClientAMGetPersonaNameHistoryResponse)},
  { 2088, 2095, sizeof(::proto::steam::CMsgClientDeregisterWithServer)},
  { 2097, 2104, sizeof(::proto::steam::CMsgClientClanState_NameInfo)},
  { 2106, 2116, sizeof(::proto::steam::CMsgClientClanState_UserCounts)},
  { 2121, 2131, sizeof(::proto::steam::CMsgClientClanState_Event)},
  { 2136, 2148, sizeof(::proto::steam::CMsgClientClanState)},
  { 2155, 2167, sizeof(::proto::steam::CMsgClientUnsignedInstallScript)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientUDSP2PSessionStarted_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientUDSP2PSessionEnded_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientRegisterAuthTicketWithCM_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientTicketAuthComplete_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientCMList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientP2PConnectionInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientP2PConnectionFailInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientNetworkingCertRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientNetworkingCertReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientGetAppOwnershipTicket_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientGetAppOwnershipTicketResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientSessionToken_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientGameConnectTokens_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgGSServerType_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgGSStatusReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgGSPlayerList_Player_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgGSPlayerList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgGSUserPlaying_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgGSDisconnectNotice_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientGamesPlayed_GamePlayed_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientGamesPlayed_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgGSApprove_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgGSDeny_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgGSKick_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientAuthList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientAuthListAck_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientLicenseList_License_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientLicenseList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientLBSSetScore_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientLBSSetScoreResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientLBSSetUGC_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientLBSSetUGCResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientLBSFindOrCreateLB_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientLBSFindOrCreateLBResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientLBSGetLBEntries_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientLBSGetLBEntriesResponse_Entry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientLBSGetLBEntriesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientAppMinutesPlayedData_AppMinutesPlayedData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientAppMinutesPlayedData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientIsLimitedAccount_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientServerList_Server_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientServerList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientRequestedClientStats_StatsToSend_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientRequestedClientStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientStat2_StatDetail_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientStat2_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientMMSCreateLobby_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientMMSCreateLobbyResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientMMSJoinLobby_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientMMSJoinLobbyResponse_Member_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientMMSJoinLobbyResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientMMSLeaveLobby_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientMMSLeaveLobbyResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientMMSGetLobbyList_Filter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientMMSGetLobbyList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientMMSGetLobbyListResponse_Lobby_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientMMSGetLobbyListResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientMMSSetLobbyData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientMMSSetLobbyDataResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientMMSGetLobbyData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientMMSLobbyData_Member_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientMMSLobbyData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientMMSSendLobbyChatMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientMMSLobbyChatMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientMMSSetLobbyOwner_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientMMSSetLobbyOwnerResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientMMSSetLobbyLinked_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientMMSSetLobbyGameServer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientMMSLobbyGameServerSet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientMMSUserJoinedLobby_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientMMSUserLeftLobby_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientMMSInviteToLobby_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientInviteToGame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientChatInvite_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientConnectionStats_Stats_Logon_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientConnectionStats_Stats_UDP_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientConnectionStats_Stats_VConn_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientConnectionStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientServersAvailable_Server_Types_Available_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientServersAvailable_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientGetUserStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientGetUserStatsResponse_Stats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientGetUserStatsResponse_Achievement_Blocks_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientGetUserStatsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientStoreUserStatsResponse_Stats_Failed_Validation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientStoreUserStatsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientStoreUserStats2_Stats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientStoreUserStats2_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientStatsUpdated_Updated_Stats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientStatsUpdated_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientStoreUserStats_Stats_To_Store_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientStoreUserStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientGetClientDetails_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientReportOverlayDetourFailure_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientGetClientDetailsResponse_Game_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientGetClientDetailsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientGetClientAppList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientGetClientAppListResponse_App_DLC_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientGetClientAppListResponse_App_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientGetClientAppListResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientInstallClientApp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientInstallClientAppResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientUninstallClientApp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientUninstallClientAppResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientSetClientAppUpdateState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientSetClientAppUpdateStateResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientUFSUploadFileRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientUFSUploadFileResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientUFSUploadCommit_File_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientUFSUploadCommit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientUFSUploadCommitResponse_File_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientUFSUploadCommitResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientUFSFileChunk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientUFSTransferHeartbeat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientUFSUploadFileFinished_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientUFSDeleteFileRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientUFSDeleteFileResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientUFSGetFileListForApp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientUFSGetFileListForAppResponse_File_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientUFSGetFileListForAppResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientUFSDownloadRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientUFSDownloadResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientUFSLoginRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientUFSLoginResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientRequestEncryptedAppTicket_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientRequestEncryptedAppTicketResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientWalletInfoUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientAppInfoUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientAppInfoChanges_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientAppInfoRequest_App_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientAppInfoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientAppInfoResponse_App_Section_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientAppInfoResponse_App_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientAppInfoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientPackageInfoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientPackageInfoResponse_Package_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientPackageInfoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientPICSChangesSinceRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientPICSChangesSinceResponse_PackageChange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientPICSChangesSinceResponse_AppChange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientPICSChangesSinceResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientPICSProductInfoRequest_AppInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientPICSProductInfoRequest_PackageInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientPICSProductInfoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientPICSProductInfoResponse_AppInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientPICSProductInfoResponse_PackageInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientPICSProductInfoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientPICSAccessTokenRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientPICSAccessTokenResponse_PackageToken_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientPICSAccessTokenResponse_AppToken_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientPICSAccessTokenResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientUFSGetUGCDetails_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientUFSGetUGCDetailsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientUFSGetSingleFileInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientUFSGetSingleFileInfoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientUFSShareFile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientUFSShareFileResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientAMGetClanOfficers_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientAMGetClanOfficersResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientAMGetPersonaNameHistory_IdInstance_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientAMGetPersonaNameHistory_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientAMGetPersonaNameHistoryResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientDeregisterWithServer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientClanState_NameInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientClanState_UserCounts_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientClanState_Event_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientClanState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientUnsignedInstallScript_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_steammessages_5fclientserver_2eproto = {
  {}, AddDescriptors_steammessages_5fclientserver_2eproto, "steammessages_clientserver.proto", schemas,
  file_default_instances, TableStruct_steammessages_5fclientserver_2eproto::offsets,
  file_level_metadata_steammessages_5fclientserver_2eproto, 170, file_level_enum_descriptors_steammessages_5fclientserver_2eproto, file_level_service_descriptors_steammessages_5fclientserver_2eproto,
};

const char descriptor_table_protodef_steammessages_5fclientserver_2eproto[] =
  "\n steammessages_clientserver.proto\022\013prot"
  "o.steam\032\030steammessages_base.proto\032\032encry"
  "pted_app_ticket.proto\"G\n\036CMsgClientUDSP2"
  "PSessionStarted\022\026\n\016steamid_remote\030\001 \001(\006\022"
  "\r\n\005appid\030\002 \001(\005\"\201\002\n\034CMsgClientUDSP2PSessi"
  "onEnded\022\026\n\016steamid_remote\030\001 \001(\006\022\r\n\005appid"
  "\030\002 \001(\005\022\032\n\022session_length_sec\030\003 \001(\005\022\025\n\rse"
  "ssion_error\030\004 \001(\005\022\017\n\007nattype\030\005 \001(\005\022\022\n\nby"
  "tes_recv\030\006 \001(\005\022\022\n\nbytes_sent\030\007 \001(\005\022\030\n\020by"
  "tes_sent_relay\030\010 \001(\005\022\030\n\020bytes_recv_relay"
  "\030\t \001(\005\022\032\n\022time_to_connect_ms\030\n \001(\005\"j\n\"CM"
  "sgClientRegisterAuthTicketWithCM\022\030\n\020prot"
  "ocol_version\030\001 \001(\r\022\016\n\006ticket\030\003 \001(\014\022\032\n\022cl"
  "ient_instance_id\030\004 \001(\004\"\321\001\n\034CMsgClientTic"
  "ketAuthComplete\022\020\n\010steam_id\030\001 \001(\006\022\017\n\007gam"
  "e_id\030\002 \001(\006\022\016\n\006estate\030\003 \001(\r\022\036\n\026eauth_sess"
  "ion_response\030\004 \001(\r\022\031\n\021DEPRECATED_ticket\030"
  "\005 \001(\014\022\022\n\nticket_crc\030\006 \001(\r\022\027\n\017ticket_sequ"
  "ence\030\007 \001(\r\022\026\n\016owner_steam_id\030\010 \001(\006\"\200\001\n\020C"
  "MsgClientCMList\022\024\n\014cm_addresses\030\001 \003(\r\022\020\n"
  "\010cm_ports\030\002 \003(\r\022\036\n\026cm_websocket_addresse"
  "s\030\003 \003(\t\022$\n\034percent_default_to_websocket\030"
  "\004 \001(\r\"\234\001\n\033CMsgClientP2PConnectionInfo\022\025\n"
  "\rsteam_id_dest\030\001 \001(\006\022\024\n\014steam_id_src\030\002 \001"
  "(\006\022\016\n\006app_id\030\003 \001(\r\022\021\n\tcandidate\030\004 \001(\014\022\031\n"
  "\021connection_id_src\030\005 \001(\006\022\022\n\nrendezvous\030\006"
  " \001(\014\"\303\001\n\037CMsgClientP2PConnectionFailInfo"
  "\022\025\n\rsteam_id_dest\030\001 \001(\006\022\024\n\014steam_id_src\030"
  "\002 \001(\006\022\016\n\006app_id\030\003 \001(\r\022\032\n\022ep2p_session_er"
  "ror\030\004 \001(\r\022\032\n\022connection_id_dest\030\005 \001(\006\022\024\n"
  "\014close_reason\030\007 \001(\r\022\025\n\rclose_message\030\010 \001"
  "(\t\"C\n\037CMsgClientNetworkingCertRequest\022\020\n"
  "\010key_data\030\002 \001(\014\022\016\n\006app_id\030\003 \001(\r\"V\n\035CMsgC"
  "lientNetworkingCertReply\022\014\n\004cert\030\004 \001(\014\022\021"
  "\n\tca_key_id\030\005 \001(\006\022\024\n\014ca_signature\030\006 \001(\014\""
  "1\n\037CMsgClientGetAppOwnershipTicket\022\016\n\006ap"
  "p_id\030\001 \001(\r\"]\n\'CMsgClientGetAppOwnershipT"
  "icketResponse\022\022\n\007eresult\030\001 \001(\r:\0012\022\016\n\006app"
  "_id\030\002 \001(\r\022\016\n\006ticket\030\003 \001(\014\"\'\n\026CMsgClientS"
  "essionToken\022\r\n\005token\030\001 \001(\004\"M\n\033CMsgClient"
  "GameConnectTokens\022\036\n\022max_tokens_to_keep\030"
  "\001 \001(\r:\00210\022\016\n\006tokens\030\002 \003(\014\"\245\001\n\020CMsgGSServ"
  "erType\022\025\n\rapp_id_served\030\001 \001(\r\022\r\n\005flags\030\002"
  " \001(\r\022\027\n\017game_ip_address\030\003 \001(\r\022\021\n\tgame_po"
  "rt\030\004 \001(\r\022\020\n\010game_dir\030\005 \001(\t\022\024\n\014game_versi"
  "on\030\006 \001(\t\022\027\n\017game_query_port\030\007 \001(\r\"&\n\021CMs"
  "gGSStatusReply\022\021\n\tis_secure\030\001 \001(\010\"\207\001\n\020CM"
  "sgGSPlayerList\0225\n\007players\030\001 \003(\0132$.proto."
  "steam.CMsgGSPlayerList.Player\032<\n\006Player\022"
  "\020\n\010steam_id\030\001 \001(\004\022\021\n\tpublic_ip\030\002 \001(\r\022\r\n\005"
  "token\030\003 \001(\014\"G\n\021CMsgGSUserPlaying\022\020\n\010stea"
  "m_id\030\001 \001(\006\022\021\n\tpublic_ip\030\002 \001(\r\022\r\n\005token\030\003"
  " \001(\014\"*\n\026CMsgGSDisconnectNotice\022\020\n\010steam_"
  "id\030\001 \001(\006\"\263\005\n\025CMsgClientGamesPlayed\022C\n\014ga"
  "mes_played\030\001 \003(\0132-.proto.steam.CMsgClien"
  "tGamesPlayed.GamePlayed\022\026\n\016client_os_typ"
  "e\030\002 \001(\r\032\274\004\n\nGamePlayed\022\023\n\013steam_id_gs\030\001 "
  "\001(\004\022\017\n\007game_id\030\002 \001(\006\022\027\n\017game_ip_address\030"
  "\003 \001(\r\022\021\n\tgame_port\030\004 \001(\r\022\021\n\tis_secure\030\005 "
  "\001(\010\022\r\n\005token\030\006 \001(\014\022\027\n\017game_extra_info\030\007 "
  "\001(\t\022\026\n\016game_data_blob\030\010 \001(\014\022\022\n\nprocess_i"
  "d\030\t \001(\r\022\035\n\025streaming_provider_id\030\n \001(\r\022\022"
  "\n\ngame_flags\030\013 \001(\r\022\020\n\010owner_id\030\014 \001(\r\022\025\n\r"
  "vr_hmd_vendor\030\r \001(\t\022\024\n\014vr_hmd_model\030\016 \001("
  "\t\022\035\n\022launch_option_type\030\017 \001(\r:\0010\022#\n\027prim"
  "ary_controller_type\030\020 \001(\005:\002-1\022\'\n\037primary"
  "_steam_controller_serial\030\021 \001(\t\022\'\n\034total_"
  "steam_controller_count\030\022 \001(\r:\0010\022+\n total"
  "_non_steam_controller_count\030\023 \001(\r:\0010\022&\n\033"
  "controller_workshop_file_id\030\024 \001(\004:\0010\022\030\n\r"
  "launch_source\030\025 \001(\r:\0010\"9\n\rCMsgGSApprove\022"
  "\020\n\010steam_id\030\001 \001(\006\022\026\n\016owner_steam_id\030\002 \001("
  "\006\"I\n\nCMsgGSDeny\022\020\n\010steam_id\030\001 \001(\006\022\024\n\014ede"
  "ny_reason\030\002 \001(\005\022\023\n\013deny_string\030\003 \001(\t\"4\n\n"
  "CMsgGSKick\022\020\n\010steam_id\030\001 \001(\006\022\024\n\014edeny_re"
  "ason\030\002 \001(\005\"\302\001\n\022CMsgClientAuthList\022\023\n\013tok"
  "ens_left\030\001 \001(\r\022\030\n\020last_request_seq\030\002 \001(\r"
  "\022$\n\034last_request_seq_from_server\030\003 \001(\r\022,"
  "\n\007tickets\030\004 \003(\0132\033.proto.steam.CMsgAuthTi"
  "cket\022\017\n\007app_ids\030\005 \003(\r\022\030\n\020message_sequenc"
  "e\030\006 \001(\r\"V\n\025CMsgClientAuthListAck\022\022\n\ntick"
  "et_crc\030\001 \003(\r\022\017\n\007app_ids\030\002 \003(\r\022\030\n\020message"
  "_sequence\030\003 \001(\r\"\351\003\n\025CMsgClientLicenseLis"
  "t\022\022\n\007eresult\030\001 \001(\005:\0012\022<\n\010licenses\030\002 \003(\0132"
  "*.proto.steam.CMsgClientLicenseList.Lice"
  "nse\032\375\002\n\007License\022\022\n\npackage_id\030\001 \001(\r\022\024\n\014t"
  "ime_created\030\002 \001(\007\022\031\n\021time_next_process\030\003"
  " \001(\007\022\024\n\014minute_limit\030\004 \001(\005\022\024\n\014minutes_us"
  "ed\030\005 \001(\005\022\026\n\016payment_method\030\006 \001(\r\022\r\n\005flag"
  "s\030\007 \001(\r\022\035\n\025purchase_country_code\030\010 \001(\t\022\024"
  "\n\014license_type\030\t \001(\r\022\026\n\016territory_code\030\n"
  " \001(\005\022\025\n\rchange_number\030\013 \001(\005\022\020\n\010owner_id\030"
  "\014 \001(\r\022\026\n\016initial_period\030\r \001(\r\022\031\n\021initial"
  "_time_unit\030\016 \001(\r\022\026\n\016renewal_period\030\017 \001(\r"
  "\022\031\n\021renewal_time_unit\030\020 \001(\r\"|\n\025CMsgClien"
  "tLBSSetScore\022\016\n\006app_id\030\001 \001(\r\022\026\n\016leaderbo"
  "ard_id\030\002 \001(\005\022\r\n\005score\030\003 \001(\005\022\017\n\007details\030\004"
  " \001(\014\022\033\n\023upload_score_method\030\005 \001(\005\"\242\001\n\035CM"
  "sgClientLBSSetScoreResponse\022\022\n\007eresult\030\001"
  " \001(\005:\0012\022\037\n\027leaderboard_entry_count\030\002 \001(\005"
  "\022\025\n\rscore_changed\030\003 \001(\010\022\034\n\024global_rank_p"
  "revious\030\004 \001(\005\022\027\n\017global_rank_new\030\005 \001(\005\"M"
  "\n\023CMsgClientLBSSetUGC\022\016\n\006app_id\030\001 \001(\r\022\026\n"
  "\016leaderboard_id\030\002 \001(\005\022\016\n\006ugc_id\030\003 \001(\006\"1\n"
  "\033CMsgClientLBSSetUGCResponse\022\022\n\007eresult\030"
  "\001 \001(\005:\0012\"\247\001\n\033CMsgClientLBSFindOrCreateLB"
  "\022\016\n\006app_id\030\001 \001(\r\022\037\n\027leaderboard_sort_met"
  "hod\030\002 \001(\005\022 \n\030leaderboard_display_type\030\003 "
  "\001(\005\022\033\n\023create_if_not_found\030\004 \001(\010\022\030\n\020lead"
  "erboard_name\030\005 \001(\t\"\325\001\n#CMsgClientLBSFind"
  "OrCreateLBResponse\022\022\n\007eresult\030\001 \001(\005:\0012\022\026"
  "\n\016leaderboard_id\030\002 \001(\005\022\037\n\027leaderboard_en"
  "try_count\030\003 \001(\005\022\"\n\027leaderboard_sort_meth"
  "od\030\004 \001(\005:\0010\022#\n\030leaderboard_display_type\030"
  "\005 \001(\005:\0010\022\030\n\020leaderboard_name\030\006 \001(\t\"\237\001\n\031C"
  "MsgClientLBSGetLBEntries\022\016\n\006app_id\030\001 \001(\005"
  "\022\026\n\016leaderboard_id\030\002 \001(\005\022\023\n\013range_start\030"
  "\003 \001(\005\022\021\n\trange_end\030\004 \001(\005\022 \n\030leaderboard_"
  "data_request\030\005 \001(\005\022\020\n\010steamids\030\006 \003(\006\"\204\002\n"
  "!CMsgClientLBSGetLBEntriesResponse\022\022\n\007er"
  "esult\030\001 \001(\005:\0012\022\037\n\027leaderboard_entry_coun"
  "t\030\002 \001(\005\022E\n\007entries\030\003 \003(\01324.proto.steam.C"
  "MsgClientLBSGetLBEntriesResponse.Entry\032c"
  "\n\005Entry\022\025\n\rsteam_id_user\030\001 \001(\006\022\023\n\013global"
  "_rank\030\002 \001(\005\022\r\n\005score\030\003 \001(\005\022\017\n\007details\030\004 "
  "\001(\014\022\016\n\006ugc_id\030\005 \001(\006\"\313\001\n\036CMsgClientAppMin"
  "utesPlayedData\022X\n\016minutes_played\030\001 \003(\0132@"
  ".proto.steam.CMsgClientAppMinutesPlayedD"
  "ata.AppMinutesPlayedData\032O\n\024AppMinutesPl"
  "ayedData\022\016\n\006app_id\030\001 \001(\r\022\017\n\007forever\030\002 \001("
  "\005\022\026\n\016last_two_weeks\030\003 \001(\005\"\252\001\n\032CMsgClient"
  "IsLimitedAccount\022\033\n\023bis_limited_account\030"
  "\001 \001(\010\022\034\n\024bis_community_banned\030\002 \001(\010\022\032\n\022b"
  "is_locked_account\030\003 \001(\010\0225\n-bis_limited_a"
  "ccount_allowed_to_invite_friends\030\004 \001(\010\"\230"
  "\001\n\024CMsgClientServerList\0229\n\007servers\030\001 \003(\013"
  "2(.proto.steam.CMsgClientServerList.Serv"
  "er\032E\n\006Server\022\023\n\013server_type\030\001 \001(\r\022\021\n\tser"
  "ver_ip\030\002 \001(\r\022\023\n\013server_port\030\003 \001(\r\"\263\001\n\036CM"
  "sgClientRequestedClientStats\022N\n\rstats_to"
  "_send\030\001 \003(\01327.proto.steam.CMsgClientRequ"
  "estedClientStats.StatsToSend\032A\n\013StatsToS"
  "end\022\023\n\013client_stat\030\001 \001(\r\022\035\n\025stat_aggrega"
  "te_method\030\002 \001(\r\"\314\001\n\017CMsgClientStat2\022<\n\013s"
  "tat_detail\030\001 \003(\0132\'.proto.steam.CMsgClien"
  "tStat2.StatDetail\032{\n\nStatDetail\022\023\n\013clien"
  "t_stat\030\001 \001(\r\022\020\n\010ll_value\030\002 \001(\003\022\023\n\013time_o"
  "f_day\030\003 \001(\r\022\017\n\007cell_id\030\004 \001(\r\022\020\n\010depot_id"
  "\030\005 \001(\r\022\016\n\006app_id\030\006 \001(\r\"\272\001\n\030CMsgClientMMS"
  "CreateLobby\022\016\n\006app_id\030\001 \001(\r\022\023\n\013max_membe"
  "rs\030\002 \001(\005\022\022\n\nlobby_type\030\003 \001(\005\022\023\n\013lobby_fl"
  "ags\030\004 \001(\005\022\017\n\007cell_id\030\005 \001(\r\022\021\n\tpublic_ip\030"
  "\006 \001(\r\022\020\n\010metadata\030\007 \001(\014\022\032\n\022persona_name_"
  "owner\030\010 \001(\t\"^\n CMsgClientMMSCreateLobbyR"
  "esponse\022\016\n\006app_id\030\001 \001(\r\022\026\n\016steam_id_lobb"
  "y\030\002 \001(\006\022\022\n\007eresult\030\003 \001(\005:\0012\"V\n\026CMsgClien"
  "tMMSJoinLobby\022\016\n\006app_id\030\001 \001(\r\022\026\n\016steam_i"
  "d_lobby\030\002 \001(\006\022\024\n\014persona_name\030\003 \001(\t\"\333\002\n\036"
  "CMsgClientMMSJoinLobbyResponse\022\016\n\006app_id"
  "\030\001 \001(\r\022\026\n\016steam_id_lobby\030\002 \001(\006\022 \n\030chat_r"
  "oom_enter_response\030\003 \001(\005\022\023\n\013max_members\030"
  "\004 \001(\005\022\022\n\nlobby_type\030\005 \001(\005\022\023\n\013lobby_flags"
  "\030\006 \001(\005\022\026\n\016steam_id_owner\030\007 \001(\006\022\020\n\010metada"
  "ta\030\010 \001(\014\022C\n\007members\030\t \003(\01322.proto.steam."
  "CMsgClientMMSJoinLobbyResponse.Member\032B\n"
  "\006Member\022\020\n\010steam_id\030\001 \001(\006\022\024\n\014persona_nam"
  "e\030\002 \001(\t\022\020\n\010metadata\030\003 \001(\014\"A\n\027CMsgClientM"
  "MSLeaveLobby\022\016\n\006app_id\030\001 \001(\r\022\026\n\016steam_id"
  "_lobby\030\002 \001(\006\"]\n\037CMsgClientMMSLeaveLobbyR"
  "esponse\022\016\n\006app_id\030\001 \001(\r\022\026\n\016steam_id_lobb"
  "y\030\002 \001(\006\022\022\n\007eresult\030\003 \001(\005:\0012\"\376\001\n\031CMsgClie"
  "ntMMSGetLobbyList\022\016\n\006app_id\030\001 \001(\r\022\035\n\025num"
  "_lobbies_requested\030\003 \001(\005\022\017\n\007cell_id\030\004 \001("
  "\r\022\021\n\tpublic_ip\030\005 \001(\r\022>\n\007filters\030\006 \003(\0132-."
  "proto.steam.CMsgClientMMSGetLobbyList.Fi"
  "lter\032N\n\006Filter\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001"
  "(\t\022\023\n\013comparision\030\003 \001(\005\022\023\n\013filter_type\030\004"
  " \001(\005\"\261\002\n!CMsgClientMMSGetLobbyListRespon"
  "se\022\016\n\006app_id\030\001 \001(\r\022\022\n\007eresult\030\003 \001(\005:\0012\022E"
  "\n\007lobbies\030\004 \003(\01324.proto.steam.CMsgClient"
  "MMSGetLobbyListResponse.Lobby\032\240\001\n\005Lobby\022"
  "\020\n\010steam_id\030\001 \001(\006\022\023\n\013max_members\030\002 \001(\005\022\022"
  "\n\nlobby_type\030\003 \001(\005\022\023\n\013lobby_flags\030\004 \001(\005\022"
  "\020\n\010metadata\030\005 \001(\014\022\023\n\013num_members\030\006 \001(\005\022\020"
  "\n\010distance\030\007 \001(\002\022\016\n\006weight\030\010 \001(\003\"\254\001\n\031CMs"
  "gClientMMSSetLobbyData\022\016\n\006app_id\030\001 \001(\r\022\026"
  "\n\016steam_id_lobby\030\002 \001(\006\022\027\n\017steam_id_membe"
  "r\030\003 \001(\006\022\023\n\013max_members\030\004 \001(\005\022\022\n\nlobby_ty"
  "pe\030\005 \001(\005\022\023\n\013lobby_flags\030\006 \001(\005\022\020\n\010metadat"
  "a\030\007 \001(\014\"_\n!CMsgClientMMSSetLobbyDataResp"
  "onse\022\016\n\006app_id\030\001 \001(\r\022\026\n\016steam_id_lobby\030\002"
  " \001(\006\022\022\n\007eresult\030\003 \001(\005:\0012\"C\n\031CMsgClientMM"
  "SGetLobbyData\022\016\n\006app_id\030\001 \001(\r\022\026\n\016steam_i"
  "d_lobby\030\002 \001(\006\"\324\002\n\026CMsgClientMMSLobbyData"
  "\022\016\n\006app_id\030\001 \001(\r\022\026\n\016steam_id_lobby\030\002 \001(\006"
  "\022\023\n\013num_members\030\003 \001(\005\022\023\n\013max_members\030\004 \001"
  "(\005\022\022\n\nlobby_type\030\005 \001(\005\022\023\n\013lobby_flags\030\006 "
  "\001(\005\022\026\n\016steam_id_owner\030\007 \001(\006\022\020\n\010metadata\030"
  "\010 \001(\014\022;\n\007members\030\t \003(\0132*.proto.steam.CMs"
  "gClientMMSLobbyData.Member\022\024\n\014lobby_cell"
  "id\030\n \001(\r\032B\n\006Member\022\020\n\010steam_id\030\001 \001(\006\022\024\n\014"
  "persona_name\030\002 \001(\t\022\020\n\010metadata\030\003 \001(\014\"w\n\035"
  "CMsgClientMMSSendLobbyChatMsg\022\016\n\006app_id\030"
  "\001 \001(\r\022\026\n\016steam_id_lobby\030\002 \001(\006\022\027\n\017steam_i"
  "d_target\030\003 \001(\006\022\025\n\rlobby_message\030\004 \001(\014\"s\n"
  "\031CMsgClientMMSLobbyChatMsg\022\016\n\006app_id\030\001 \001"
  "(\r\022\026\n\016steam_id_lobby\030\002 \001(\006\022\027\n\017steam_id_s"
  "ender\030\003 \001(\006\022\025\n\rlobby_message\030\004 \001(\014\"`\n\032CM"
  "sgClientMMSSetLobbyOwner\022\016\n\006app_id\030\001 \001(\r"
  "\022\026\n\016steam_id_lobby\030\002 \001(\006\022\032\n\022steam_id_new"
  "_owner\030\003 \001(\006\"`\n\"CMsgClientMMSSetLobbyOwn"
  "erResponse\022\016\n\006app_id\030\001 \001(\r\022\026\n\016steam_id_l"
  "obby\030\002 \001(\006\022\022\n\007eresult\030\003 \001(\005:\0012\"^\n\033CMsgCl"
  "ientMMSSetLobbyLinked\022\016\n\006app_id\030\001 \001(\r\022\026\n"
  "\016steam_id_lobby\030\002 \001(\006\022\027\n\017steam_id_lobby2"
  "\030\003 \001(\006\"\231\001\n\037CMsgClientMMSSetLobbyGameServ"
  "er\022\016\n\006app_id\030\001 \001(\r\022\026\n\016steam_id_lobby\030\002 \001"
  "(\006\022\026\n\016game_server_ip\030\003 \001(\r\022\030\n\020game_serve"
  "r_port\030\004 \001(\r\022\034\n\024game_server_steam_id\030\005 \001"
  "(\006\"\231\001\n\037CMsgClientMMSLobbyGameServerSet\022\016"
  "\n\006app_id\030\001 \001(\r\022\026\n\016steam_id_lobby\030\002 \001(\006\022\026"
  "\n\016game_server_ip\030\003 \001(\r\022\030\n\020game_server_po"
  "rt\030\004 \001(\r\022\034\n\024game_server_steam_id\030\005 \001(\006\"s"
  "\n\034CMsgClientMMSUserJoinedLobby\022\016\n\006app_id"
  "\030\001 \001(\r\022\026\n\016steam_id_lobby\030\002 \001(\006\022\025\n\rsteam_"
  "id_user\030\003 \001(\006\022\024\n\014persona_name\030\004 \001(\t\"q\n\032C"
  "MsgClientMMSUserLeftLobby\022\016\n\006app_id\030\001 \001("
  "\r\022\026\n\016steam_id_lobby\030\002 \001(\006\022\025\n\rsteam_id_us"
  "er\030\003 \001(\006\022\024\n\014persona_name\030\004 \001(\t\"c\n\032CMsgCl"
  "ientMMSInviteToLobby\022\016\n\006app_id\030\001 \001(\r\022\026\n\016"
  "steam_id_lobby\030\002 \001(\006\022\035\n\025steam_id_user_in"
  "vited\030\003 \001(\006\"]\n\026CMsgClientInviteToGame\022\025\n"
  "\rsteam_id_dest\030\001 \001(\006\022\024\n\014steam_id_src\030\002 \001"
  "(\006\022\026\n\016connect_string\030\003 \001(\t\"\271\001\n\024CMsgClien"
  "tChatInvite\022\030\n\020steam_id_invited\030\001 \001(\006\022\025\n"
  "\rsteam_id_chat\030\002 \001(\006\022\027\n\017steam_id_patron\030"
  "\003 \001(\006\022\025\n\rchatroom_type\030\004 \001(\005\022\034\n\024steam_id"
  "_friend_chat\030\005 \001(\006\022\021\n\tchat_name\030\006 \001(\t\022\017\n"
  "\007game_id\030\007 \001(\006\"\256\010\n\031CMsgClientConnectionS"
  "tats\022G\n\013stats_logon\030\001 \001(\01322.proto.steam."
  "CMsgClientConnectionStats.Stats_Logon\022G\n"
  "\013stats_vconn\030\002 \001(\01322.proto.steam.CMsgCli"
  "entConnectionStats.Stats_VConn\032\307\001\n\013Stats"
  "_Logon\022\030\n\020connect_attempts\030\001 \001(\005\022\031\n\021conn"
  "ect_successes\030\002 \001(\005\022\030\n\020connect_failures\030"
  "\003 \001(\005\022\033\n\023connections_dropped\030\004 \001(\005\022\027\n\017se"
  "conds_running\030\005 \001(\r\022\034\n\024msec_tologonthist"
  "ime\030\006 \001(\r\022\025\n\rcount_bad_cms\030\007 \001(\r\032q\n\tStat"
  "s_UDP\022\021\n\tpkts_sent\030\001 \001(\004\022\022\n\nbytes_sent\030\002"
  " \001(\004\022\021\n\tpkts_recv\030\003 \001(\004\022\026\n\016pkts_processe"
  "d\030\004 \001(\004\022\022\n\nbytes_recv\030\005 \001(\004\032\301\004\n\013Stats_VC"
  "onn\022\027\n\017connections_udp\030\001 \001(\r\022\027\n\017connecti"
  "ons_tcp\030\002 \001(\r\022C\n\tstats_udp\030\003 \001(\01320.proto"
  ".steam.CMsgClientConnectionStats.Stats_U"
  "DP\022\026\n\016pkts_abandoned\030\004 \001(\004\022\031\n\021conn_req_r"
  "eceived\030\005 \001(\004\022\023\n\013pkts_resent\030\006 \001(\004\022\021\n\tms"
  "gs_sent\030\007 \001(\004\022\030\n\020msgs_sent_failed\030\010 \001(\004\022"
  "\021\n\tmsgs_recv\030\t \001(\004\022\026\n\016datagrams_sent\030\n \001"
  "(\004\022\026\n\016datagrams_recv\030\013 \001(\004\022\025\n\rbad_pkts_r"
  "ecv\030\014 \001(\004\022\036\n\026unknown_conn_pkts_recv\030\r \001("
  "\004\022\030\n\020missed_pkts_recv\030\016 \001(\004\022\025\n\rdup_pkts_"
  "recv\030\017 \001(\004\022!\n\031failed_connect_challenges\030"
  "\020 \001(\004\022\035\n\025micro_sec_avg_latency\030\021 \001(\r\022\035\n\025"
  "micro_sec_min_latency\030\022 \001(\r\022\035\n\025micro_sec"
  "_max_latency\030\023 \001(\r\022\033\n\023mem_pool_msg_in_us"
  "e\030\024 \001(\r\"\336\001\n\032CMsgClientServersAvailable\022^"
  "\n\026server_types_available\030\001 \003(\0132>.proto.s"
  "team.CMsgClientServersAvailable.Server_T"
  "ypes_Available\022%\n\035server_type_for_auth_s"
  "ervices\030\002 \001(\r\0329\n\026Server_Types_Available\022"
  "\016\n\006server\030\001 \001(\r\022\017\n\007changed\030\002 \001(\010\"u\n\026CMsg"
  "ClientGetUserStats\022\017\n\007game_id\030\001 \001(\006\022\021\n\tc"
  "rc_stats\030\002 \001(\r\022\034\n\024schema_local_version\030\003"
  " \001(\005\022\031\n\021steam_id_for_user\030\004 \001(\006\"\367\002\n\036CMsg"
  "ClientGetUserStatsResponse\022\017\n\007game_id\030\001 "
  "\001(\006\022\022\n\007eresult\030\002 \001(\005:\0012\022\021\n\tcrc_stats\030\003 \001"
  "(\r\022\016\n\006schema\030\004 \001(\014\022@\n\005stats\030\005 \003(\01321.prot"
  "o.steam.CMsgClientGetUserStatsResponse.S"
  "tats\022Z\n\022achievement_blocks\030\006 \003(\0132>.proto"
  ".steam.CMsgClientGetUserStatsResponse.Ac"
  "hievement_Blocks\032,\n\005Stats\022\017\n\007stat_id\030\001 \001"
  "(\r\022\022\n\nstat_value\030\002 \001(\r\032A\n\022Achievement_Bl"
  "ocks\022\026\n\016achievement_id\030\001 \001(\r\022\023\n\013unlock_t"
  "ime\030\002 \003(\007\"\246\002\n CMsgClientStoreUserStatsRe"
  "sponse\022\017\n\007game_id\030\001 \001(\006\022\022\n\007eresult\030\002 \001(\005"
  ":\0012\022\021\n\tcrc_stats\030\003 \001(\r\022f\n\027stats_failed_v"
  "alidation\030\004 \003(\0132E.proto.steam.CMsgClient"
  "StoreUserStatsResponse.Stats_Failed_Vali"
  "dation\022\031\n\021stats_out_of_date\030\005 \001(\010\032G\n\027Sta"
  "ts_Failed_Validation\022\017\n\007stat_id\030\001 \001(\r\022\033\n"
  "\023reverted_stat_value\030\002 \001(\r\"\364\001\n\031CMsgClien"
  "tStoreUserStats2\022\017\n\007game_id\030\001 \001(\006\022\027\n\017set"
  "tor_steam_id\030\002 \001(\006\022\027\n\017settee_steam_id\030\003 "
  "\001(\006\022\021\n\tcrc_stats\030\004 \001(\r\022\026\n\016explicit_reset"
  "\030\005 \001(\010\022;\n\005stats\030\006 \003(\0132,.proto.steam.CMsg"
  "ClientStoreUserStats2.Stats\032,\n\005Stats\022\017\n\007"
  "stat_id\030\001 \001(\r\022\022\n\nstat_value\030\002 \001(\r\"\316\001\n\026CM"
  "sgClientStatsUpdated\022\020\n\010steam_id\030\001 \001(\006\022\017"
  "\n\007game_id\030\002 \001(\006\022\021\n\tcrc_stats\030\003 \001(\r\022H\n\rup"
  "dated_stats\030\004 \003(\01321.proto.steam.CMsgClie"
  "ntStatsUpdated.Updated_Stats\0324\n\rUpdated_"
  "Stats\022\017\n\007stat_id\030\001 \001(\r\022\022\n\nstat_value\030\002 \001"
  "(\r\"\310\001\n\030CMsgClientStoreUserStats\022\017\n\007game_"
  "id\030\001 \001(\006\022\026\n\016explicit_reset\030\002 \001(\010\022L\n\016stat"
  "s_to_store\030\003 \003(\01324.proto.steam.CMsgClien"
  "tStoreUserStats.Stats_To_Store\0325\n\016Stats_"
  "To_Store\022\017\n\007stat_id\030\001 \001(\r\022\022\n\nstat_value\030"
  "\002 \001(\r\"\034\n\032CMsgClientGetClientDetails\"\?\n$C"
  "MsgClientReportOverlayDetourFailure\022\027\n\017f"
  "ailure_strings\030\001 \003(\t\"\313\002\n\"CMsgClientGetCl"
  "ientDetailsResponse\022\027\n\017package_version\030\001"
  " \001(\r\022\030\n\020protocol_version\030\010 \001(\r\022\n\n\002os\030\002 \001"
  "(\t\022\024\n\014machine_name\030\003 \001(\t\022\021\n\tip_public\030\004 "
  "\001(\t\022\022\n\nip_private\030\005 \001(\t\022\027\n\017bytes_availab"
  "le\030\007 \001(\004\022K\n\rgames_running\030\006 \003(\01324.proto."
  "steam.CMsgClientGetClientDetailsResponse"
  ".Game\032C\n\004Game\022\r\n\005appid\030\001 \001(\r\022\022\n\nextra_in"
  "fo\030\002 \001(\t\022\030\n\020time_running_sec\030\003 \001(\r\"\210\001\n\032C"
  "MsgClientGetClientAppList\022\r\n\005media\030\001 \001(\010"
  "\022\r\n\005tools\030\002 \001(\010\022\r\n\005games\030\003 \001(\010\022\026\n\016only_i"
  "nstalled\030\004 \001(\010\022\025\n\ronly_changing\030\005 \001(\010\022\016\n"
  "\006comics\030\006 \001(\010\"\251\004\n\"CMsgClientGetClientApp"
  "ListResponse\022A\n\004apps\030\001 \003(\01323.proto.steam"
  ".CMsgClientGetClientAppListResponse.App\022"
  "\027\n\017bytes_available\030\002 \001(\004\032\246\003\n\003App\022\r\n\005appi"
  "d\030\001 \001(\r\022\020\n\010category\030\002 \001(\t\022\020\n\010app_type\030\n "
  "\001(\t\022\020\n\010favorite\030\003 \001(\010\022\021\n\tinstalled\030\004 \001(\010"
  "\022\023\n\013auto_update\030\005 \001(\010\022\030\n\020bytes_downloade"
  "d\030\006 \001(\004\022\024\n\014bytes_needed\030\007 \001(\004\022\033\n\023bytes_d"
  "ownload_rate\030\010 \001(\r\022\027\n\017download_paused\030\013 "
  "\001(\010\022\027\n\017num_downloading\030\014 \001(\r\022\022\n\nnum_paus"
  "ed\030\r \001(\r\022\020\n\010changing\030\016 \001(\010\022\035\n\025available_"
  "on_platform\030\017 \001(\010\022E\n\004dlcs\030\t \003(\01327.proto."
  "steam.CMsgClientGetClientAppListResponse"
  ".App.DLC\032\'\n\003DLC\022\r\n\005appid\030\001 \001(\r\022\021\n\tinstal"
  "led\030\002 \001(\010\"+\n\032CMsgClientInstallClientApp\022"
  "\r\n\005appid\030\001 \001(\r\"4\n\"CMsgClientInstallClien"
  "tAppResponse\022\016\n\006result\030\001 \001(\r\"-\n\034CMsgClie"
  "ntUninstallClientApp\022\r\n\005appid\030\001 \001(\r\"6\n$C"
  "MsgClientUninstallClientAppResponse\022\016\n\006r"
  "esult\030\001 \001(\r\"B\n!CMsgClientSetClientAppUpd"
  "ateState\022\r\n\005appid\030\001 \001(\r\022\016\n\006update\030\002 \001(\010\""
  ";\n)CMsgClientSetClientAppUpdateStateResp"
  "onse\022\016\n\006result\030\001 \001(\r\"\206\002\n\036CMsgClientUFSUp"
  "loadFileRequest\022\016\n\006app_id\030\001 \001(\r\022\021\n\tfile_"
  "size\030\002 \001(\r\022\025\n\rraw_file_size\030\003 \001(\r\022\020\n\010sha"
  "_file\030\004 \001(\014\022\022\n\ntime_stamp\030\005 \001(\004\022\021\n\tfile_"
  "name\030\006 \001(\t\022$\n\034platforms_to_sync_deprecat"
  "ed\030\007 \001(\r\022%\n\021platforms_to_sync\030\010 \001(\r:\n429"
  "4967295\022\017\n\007cell_id\030\t \001(\r\022\023\n\013can_encrypt\030"
  "\n \001(\010\"\273\001\n\037CMsgClientUFSUploadFileRespons"
  "e\022\022\n\007eresult\030\001 \001(\005:\0012\022\020\n\010sha_file\030\002 \001(\014\022"
  "\020\n\010use_http\030\003 \001(\010\022\021\n\thttp_host\030\004 \001(\t\022\020\n\010"
  "http_url\030\005 \001(\t\022\022\n\nkv_headers\030\006 \001(\014\022\021\n\tus"
  "e_https\030\007 \001(\010\022\024\n\014encrypt_file\030\010 \001(\010\"\272\001\n\031"
  "CMsgClientUFSUploadCommit\022:\n\005files\030\001 \003(\013"
  "2+.proto.steam.CMsgClientUFSUploadCommit"
  ".File\032a\n\004File\022\022\n\007eresult\030\001 \001(\005:\0012\022\016\n\006app"
  "_id\030\002 \001(\r\022\020\n\010sha_file\030\003 \001(\014\022\020\n\010cub_file\030"
  "\004 \001(\r\022\021\n\tfile_name\030\005 \001(\t\"\245\001\n!CMsgClientU"
  "FSUploadCommitResponse\022B\n\005files\030\001 \003(\01323."
  "proto.steam.CMsgClientUFSUploadCommitRes"
  "ponse.File\032<\n\004File\022\022\n\007eresult\030\001 \001(\005:\0012\022\016"
  "\n\006app_id\030\002 \001(\r\022\020\n\010sha_file\030\003 \001(\014\"L\n\026CMsg"
  "ClientUFSFileChunk\022\020\n\010sha_file\030\001 \001(\014\022\022\n\n"
  "file_start\030\002 \001(\r\022\014\n\004data\030\003 \001(\014\" \n\036CMsgCl"
  "ientUFSTransferHeartbeat\"G\n\037CMsgClientUF"
  "SUploadFileFinished\022\022\n\007eresult\030\001 \001(\005:\0012\022"
  "\020\n\010sha_file\030\002 \001(\014\"_\n\036CMsgClientUFSDelete"
  "FileRequest\022\016\n\006app_id\030\001 \001(\r\022\021\n\tfile_name"
  "\030\002 \001(\t\022\032\n\022is_explicit_delete\030\003 \001(\010\"H\n\037CM"
  "sgClientUFSDeleteFileResponse\022\022\n\007eresult"
  "\030\001 \001(\005:\0012\022\021\n\tfile_name\030\002 \001(\t\"S\n\036CMsgClie"
  "ntUFSGetFileListForApp\022\025\n\rapps_to_query\030"
  "\001 \003(\r\022\032\n\022send_path_prefixes\030\002 \001(\010\"\315\002\n&CM"
  "sgClientUFSGetFileListForAppResponse\022G\n\005"
  "files\030\001 \003(\01328.proto.steam.CMsgClientUFSG"
  "etFileListForAppResponse.File\022\025\n\rpath_pr"
  "efixes\030\002 \003(\t\032\270\001\n\004File\022\016\n\006app_id\030\001 \001(\r\022\021\n"
  "\tfile_name\030\002 \001(\t\022\020\n\010sha_file\030\003 \001(\014\022\022\n\nti"
  "me_stamp\030\004 \001(\004\022\025\n\rraw_file_size\030\005 \001(\r\022\032\n"
  "\022is_explicit_delete\030\006 \001(\010\022\031\n\021platforms_t"
  "o_sync\030\007 \001(\r\022\031\n\021path_prefix_index\030\010 \001(\r:"
  "\010\200\265\030\010\210\265\030\020\"Z\n\034CMsgClientUFSDownloadReques"
  "t\022\016\n\006app_id\030\001 \001(\r\022\021\n\tfile_name\030\002 \001(\t\022\027\n\017"
  "can_handle_http\030\003 \001(\010\"\240\002\n\035CMsgClientUFSD"
  "ownloadResponse\022\022\n\007eresult\030\001 \001(\005:\0012\022\016\n\006a"
  "pp_id\030\002 \001(\r\022\021\n\tfile_size\030\003 \001(\r\022\025\n\rraw_fi"
  "le_size\030\004 \001(\r\022\020\n\010sha_file\030\005 \001(\014\022\022\n\ntime_"
  "stamp\030\006 \001(\004\022\032\n\022is_explicit_delete\030\007 \001(\010\022"
  "\020\n\010use_http\030\010 \001(\010\022\021\n\thttp_host\030\t \001(\t\022\020\n\010"
  "http_url\030\n \001(\t\022\022\n\nkv_headers\030\013 \001(\014\022\021\n\tus"
  "e_https\030\014 \001(\010\022\021\n\tencrypted\030\r \001(\010\"]\n\031CMsg"
  "ClientUFSLoginRequest\022\030\n\020protocol_versio"
  "n\030\001 \001(\r\022\030\n\020am_session_token\030\002 \001(\004\022\014\n\004app"
  "s\030\003 \003(\r\"0\n\032CMsgClientUFSLoginResponse\022\022\n"
  "\007eresult\030\001 \001(\005:\0012\"G\n#CMsgClientRequestEn"
  "cryptedAppTicket\022\016\n\006app_id\030\001 \001(\r\022\020\n\010user"
  "data\030\002 \001(\014\"\220\001\n+CMsgClientRequestEncrypte"
  "dAppTicketResponse\022\016\n\006app_id\030\001 \001(\r\022\022\n\007er"
  "esult\030\002 \001(\005:\0012\022=\n\024encrypted_app_ticket\030\003"
  " \001(\0132\037.proto.steam.EncryptedAppTicket\"\246\001"
  "\n\032CMsgClientWalletInfoUpdate\022\022\n\nhas_wall"
  "et\030\001 \001(\010\022\017\n\007balance\030\002 \001(\005\022\020\n\010currency\030\003 "
  "\001(\005\022\027\n\017balance_delayed\030\004 \001(\005\022\027\n\tbalance6"
  "4\030\005 \001(\003B\004\240\266\030\001\022\037\n\021balance64_delayed\030\006 \001(\003"
  "B\004\240\266\030\001\"M\n\027CMsgClientAppInfoUpdate\022\031\n\021las"
  "t_changenumber\030\001 \001(\r\022\027\n\017send_changelist\030"
  "\002 \001(\010\"d\n\030CMsgClientAppInfoChanges\022\035\n\025cur"
  "rent_change_number\030\001 \001(\r\022\031\n\021force_full_u"
  "pdate\030\002 \001(\010\022\016\n\006appIDs\030\003 \003(\r\"\267\001\n\030CMsgClie"
  "ntAppInfoRequest\0227\n\004apps\030\001 \003(\0132).proto.s"
  "team.CMsgClientAppInfoRequest.App\022\037\n\020sup"
  "ports_batches\030\002 \001(\010:\005false\032A\n\003App\022\016\n\006app"
  "_id\030\001 \001(\r\022\025\n\rsection_flags\030\002 \001(\r\022\023\n\013sect"
  "ion_CRC\030\003 \003(\r\"\263\002\n\031CMsgClientAppInfoRespo"
  "nse\0228\n\004apps\030\001 \003(\0132*.proto.steam.CMsgClie"
  "ntAppInfoResponse.App\022\024\n\014apps_unknown\030\002 "
  "\003(\r\022\024\n\014apps_pending\030\003 \001(\r\032\245\001\n\003App\022\016\n\006app"
  "_id\030\001 \001(\r\022\025\n\rchange_number\030\002 \001(\r\022D\n\010sect"
  "ions\030\003 \003(\01322.proto.steam.CMsgClientAppIn"
  "foResponse.App.Section\0321\n\007Section\022\022\n\nsec"
  "tion_id\030\001 \001(\r\022\022\n\nsection_kv\030\002 \001(\014:\010\200\265\030\000\210"
  "\265\030\000\"K\n\034CMsgClientPackageInfoRequest\022\023\n\013p"
  "ackage_ids\030\001 \003(\r\022\026\n\016meta_data_only\030\002 \001(\010"
  "\"\354\001\n\035CMsgClientPackageInfoResponse\022D\n\010pa"
  "ckages\030\001 \003(\01322.proto.steam.CMsgClientPac"
  "kageInfoResponse.Package\022\030\n\020packages_unk"
  "nown\030\002 \003(\r\022\030\n\020packages_pending\030\003 \001(\r\032Q\n\007"
  "Package\022\022\n\npackage_id\030\001 \001(\r\022\025\n\rchange_nu"
  "mber\030\002 \001(\r\022\013\n\003sha\030\003 \001(\014\022\016\n\006buffer\030\004 \001(\014\""
  "\300\001\n!CMsgClientPICSChangesSinceRequest\022\033\n"
  "\023since_change_number\030\001 \001(\r\022\035\n\025send_app_i"
  "nfo_changes\030\002 \001(\010\022!\n\031send_package_info_c"
  "hanges\030\003 \001(\010\022\033\n\023num_app_info_cached\030\004 \001("
  "\r\022\037\n\027num_package_info_cached\030\005 \001(\r\"\375\003\n\"C"
  "MsgClientPICSChangesSinceResponse\022\035\n\025cur"
  "rent_change_number\030\001 \001(\r\022\033\n\023since_change"
  "_number\030\002 \001(\r\022\031\n\021force_full_update\030\003 \001(\010"
  "\022V\n\017package_changes\030\004 \003(\0132=.proto.steam."
  "CMsgClientPICSChangesSinceResponse.Packa"
  "geChange\022N\n\013app_changes\030\005 \003(\01329.proto.st"
  "eam.CMsgClientPICSChangesSinceResponse.A"
  "ppChange\022\035\n\025force_full_app_update\030\006 \001(\010\022"
  "!\n\031force_full_package_update\030\007 \001(\010\032N\n\rPa"
  "ckageChange\022\021\n\tpackageid\030\001 \001(\r\022\025\n\rchange"
  "_number\030\002 \001(\r\022\023\n\013needs_token\030\003 \001(\010\032F\n\tAp"
  "pChange\022\r\n\005appid\030\001 \001(\r\022\025\n\rchange_number\030"
  "\002 \001(\r\022\023\n\013needs_token\030\003 \001(\010\"\342\002\n CMsgClien"
  "tPICSProductInfoRequest\022K\n\010packages\030\001 \003("
  "\01329.proto.steam.CMsgClientPICSProductInf"
  "oRequest.PackageInfo\022C\n\004apps\030\002 \003(\01325.pro"
  "to.steam.CMsgClientPICSProductInfoReques"
  "t.AppInfo\022\026\n\016meta_data_only\030\003 \001(\010\022\027\n\017num"
  "_prev_failed\030\004 \001(\r\032C\n\007AppInfo\022\r\n\005appid\030\001"
  " \001(\r\022\024\n\014access_token\030\002 \001(\004\022\023\n\013only_publi"
  "c\030\003 \001(\010\0326\n\013PackageInfo\022\021\n\tpackageid\030\001 \001("
  "\r\022\024\n\014access_token\030\002 \001(\004\"\325\004\n!CMsgClientPI"
  "CSProductInfoResponse\022D\n\004apps\030\001 \003(\01326.pr"
  "oto.steam.CMsgClientPICSProductInfoRespo"
  "nse.AppInfo\022\026\n\016unknown_appids\030\002 \003(\r\022L\n\010p"
  "ackages\030\003 \003(\0132:.proto.steam.CMsgClientPI"
  "CSProductInfoResponse.PackageInfo\022\032\n\022unk"
  "nown_packageids\030\004 \003(\r\022\026\n\016meta_data_only\030"
  "\005 \001(\010\022\030\n\020response_pending\030\006 \001(\010\022\025\n\rhttp_"
  "min_size\030\007 \001(\r\022\021\n\thttp_host\030\010 \001(\t\032\206\001\n\007Ap"
  "pInfo\022\r\n\005appid\030\001 \001(\r\022\025\n\rchange_number\030\002 "
  "\001(\r\022\025\n\rmissing_token\030\003 \001(\010\022\013\n\003sha\030\004 \001(\014\022"
  "\016\n\006buffer\030\005 \001(\014\022\023\n\013only_public\030\006 \001(\010\022\014\n\004"
  "size\030\007 \001(\r\032y\n\013PackageInfo\022\021\n\tpackageid\030\001"
  " \001(\r\022\025\n\rchange_number\030\002 \001(\r\022\025\n\rmissing_t"
  "oken\030\003 \001(\010\022\013\n\003sha\030\004 \001(\014\022\016\n\006buffer\030\005 \001(\014\022"
  "\014\n\004size\030\006 \001(\r:\010\200\265\030\000\210\265\030\000\"F\n CMsgClientPIC"
  "SAccessTokenRequest\022\022\n\npackageids\030\001 \003(\r\022"
  "\016\n\006appids\030\002 \003(\r\"\367\002\n!CMsgClientPICSAccess"
  "TokenResponse\022Z\n\025package_access_tokens\030\001"
  " \003(\0132;.proto.steam.CMsgClientPICSAccessT"
  "okenResponse.PackageToken\022\035\n\025package_den"
  "ied_tokens\030\002 \003(\r\022R\n\021app_access_tokens\030\003 "
  "\003(\01327.proto.steam.CMsgClientPICSAccessTo"
  "kenResponse.AppToken\022\031\n\021app_denied_token"
  "s\030\004 \003(\r\0327\n\014PackageToken\022\021\n\tpackageid\030\001 \001"
  "(\r\022\024\n\014access_token\030\002 \001(\004\032/\n\010AppToken\022\r\n\005"
  "appid\030\001 \001(\r\022\024\n\014access_token\030\002 \001(\004\"D\n\032CMs"
  "gClientUFSGetUGCDetails\022&\n\010hcontent\030\001 \001("
  "\006:\02418446744073709551615\"\345\001\n\"CMsgClientUF"
  "SGetUGCDetailsResponse\022\022\n\007eresult\030\001 \001(\005:"
  "\0012\022\013\n\003url\030\002 \001(\t\022\016\n\006app_id\030\003 \001(\r\022\020\n\010filen"
  "ame\030\004 \001(\t\022\027\n\017steamid_creator\030\005 \001(\006\022\021\n\tfi"
  "le_size\030\006 \001(\r\022\034\n\024compressed_file_size\030\007 "
  "\001(\r\022\027\n\017rangecheck_host\030\010 \001(\t\022\031\n\021file_enc"
  "oded_sha1\030\t \001(\t\"C\n\036CMsgClientUFSGetSingl"
  "eFileInfo\022\016\n\006app_id\030\001 \001(\r\022\021\n\tfile_name\030\002"
  " \001(\t\"\270\001\n&CMsgClientUFSGetSingleFileInfoR"
  "esponse\022\022\n\007eresult\030\001 \001(\005:\0012\022\016\n\006app_id\030\002 "
  "\001(\r\022\021\n\tfile_name\030\003 \001(\t\022\020\n\010sha_file\030\004 \001(\014"
  "\022\022\n\ntime_stamp\030\005 \001(\004\022\025\n\rraw_file_size\030\006 "
  "\001(\r\022\032\n\022is_explicit_delete\030\007 \001(\010\";\n\026CMsgC"
  "lientUFSShareFile\022\016\n\006app_id\030\001 \001(\r\022\021\n\tfil"
  "e_name\030\002 \001(\t\"\\\n\036CMsgClientUFSShareFileRe"
  "sponse\022\022\n\007eresult\030\001 \001(\005:\0012\022&\n\010hcontent\030\002"
  " \001(\006:\02418446744073709551615\"3\n\033CMsgClient"
  "AMGetClanOfficers\022\024\n\014steamid_clan\030\001 \001(\006\""
  "f\n#CMsgClientAMGetClanOfficersResponse\022\022"
  "\n\007eresult\030\001 \001(\005:\0012\022\024\n\014steamid_clan\030\002 \001(\006"
  "\022\025\n\rofficer_count\030\003 \001(\005\"\234\001\n!CMsgClientAM"
  "GetPersonaNameHistory\022\020\n\010id_count\030\001 \001(\005\022"
  "F\n\003Ids\030\002 \003(\01329.proto.steam.CMsgClientAMG"
  "etPersonaNameHistory.IdInstance\032\035\n\nIdIns"
  "tance\022\017\n\007steamid\030\001 \001(\006\"\333\002\n)CMsgClientAMG"
  "etPersonaNameHistoryResponse\022[\n\tresponse"
  "s\030\002 \003(\0132H.proto.steam.CMsgClientAMGetPer"
  "sonaNameHistoryResponse.NameTableInstanc"
  "e\032\320\001\n\021NameTableInstance\022\022\n\007eresult\030\001 \001(\005"
  ":\0012\022\017\n\007steamid\030\002 \001(\006\022d\n\005names\030\003 \003(\0132U.pr"
  "oto.steam.CMsgClientAMGetPersonaNameHist"
  "oryResponse.NameTableInstance.NameInstan"
  "ce\0320\n\014NameInstance\022\022\n\nname_since\030\001 \001(\007\022\014"
  "\n\004name\030\002 \001(\t\"E\n\036CMsgClientDeregisterWith"
  "Server\022\023\n\013eservertype\030\001 \001(\r\022\016\n\006app_id\030\002 "
  "\001(\r\"\333\004\n\023CMsgClientClanState\022\024\n\014steamid_c"
  "lan\030\001 \001(\006\022\032\n\022clan_account_flags\030\003 \001(\r\022<\n"
  "\tname_info\030\004 \001(\0132).proto.steam.CMsgClien"
  "tClanState.NameInfo\022@\n\013user_counts\030\005 \001(\013"
  "2+.proto.steam.CMsgClientClanState.UserC"
  "ounts\0226\n\006events\030\006 \003(\0132&.proto.steam.CMsg"
  "ClientClanState.Event\022=\n\rannouncements\030\007"
  " \003(\0132&.proto.steam.CMsgClientClanState.E"
  "vent\022\031\n\021chat_room_private\030\010 \001(\010\0321\n\010NameI"
  "nfo\022\021\n\tclan_name\030\001 \001(\t\022\022\n\nsha_avatar\030\002 \001"
  "(\014\032k\n\nUserCounts\022\017\n\007members\030\001 \001(\r\022\016\n\006onl"
  "ine\030\002 \001(\r\022\020\n\010chatting\030\003 \001(\r\022\017\n\007in_game\030\004"
  " \001(\r\022\031\n\021chat_room_members\030\005 \001(\r\032`\n\005Event"
  "\022\013\n\003gid\030\001 \001(\006\022\022\n\nevent_time\030\002 \001(\r\022\020\n\010hea"
  "dline\030\003 \001(\t\022\017\n\007game_id\030\004 \001(\006\022\023\n\013just_pos"
  "ted\030\005 \001(\010\"\254\001\n\037CMsgClientUnsignedInstallS"
  "cript\022\016\n\006app_id\030\001 \001(\r\022\021\n\tfile_name\030\002 \001(\t"
  "\022\021\n\tfile_size\030\003 \001(\r\022\030\n\020signature_broken\030"
  "\004 \001(\010\022\020\n\010depot_id\030\005 \001(\r\022\023\n\013manifest_id\030\006"
  " \001(\004\022\022\n\nfile_flags\030\007 \001(\rB\005H\001\200\001\000"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_steammessages_5fclientserver_2eproto = {
  false, InitDefaults_steammessages_5fclientserver_2eproto, 
  descriptor_table_protodef_steammessages_5fclientserver_2eproto,
  "steammessages_clientserver.proto", &assign_descriptors_table_steammessages_5fclientserver_2eproto, 21591,
};

void AddDescriptors_steammessages_5fclientserver_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[2] =
  {
    ::AddDescriptors_steammessages_5fbase_2eproto,
    ::AddDescriptors_encrypted_5fapp_5fticket_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_steammessages_5fclientserver_2eproto, deps, 2);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_steammessages_5fclientserver_2eproto = []() { AddDescriptors_steammessages_5fclientserver_2eproto(); return true; }();
namespace proto {
namespace steam {

// ===================================================================

void CMsgClientUDSP2PSessionStarted::InitAsDefaultInstance() {
}
class CMsgClientUDSP2PSessionStarted::HasBitSetters {
 public:
  static void set_has_steamid_remote(CMsgClientUDSP2PSessionStarted* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_appid(CMsgClientUDSP2PSessionStarted* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientUDSP2PSessionStarted::kSteamidRemoteFieldNumber;
const int CMsgClientUDSP2PSessionStarted::kAppidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientUDSP2PSessionStarted::CMsgClientUDSP2PSessionStarted()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientUDSP2PSessionStarted)
}
CMsgClientUDSP2PSessionStarted::CMsgClientUDSP2PSessionStarted(const CMsgClientUDSP2PSessionStarted& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_remote_, &from.steamid_remote_,
    static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&steamid_remote_)) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientUDSP2PSessionStarted)
}

void CMsgClientUDSP2PSessionStarted::SharedCtor() {
  ::memset(&steamid_remote_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&appid_) -
      reinterpret_cast<char*>(&steamid_remote_)) + sizeof(appid_));
}

CMsgClientUDSP2PSessionStarted::~CMsgClientUDSP2PSessionStarted() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientUDSP2PSessionStarted)
  SharedDtor();
}

void CMsgClientUDSP2PSessionStarted::SharedDtor() {
}

void CMsgClientUDSP2PSessionStarted::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientUDSP2PSessionStarted& CMsgClientUDSP2PSessionStarted::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientUDSP2PSessionStarted_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientUDSP2PSessionStarted::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientUDSP2PSessionStarted)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steamid_remote_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&appid_) -
        reinterpret_cast<char*>(&steamid_remote_)) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientUDSP2PSessionStarted::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientUDSP2PSessionStarted*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid_remote = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steamid_remote(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional int32 appid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientUDSP2PSessionStarted::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientUDSP2PSessionStarted)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid_remote = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steamid_remote(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_remote_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 appid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientUDSP2PSessionStarted)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientUDSP2PSessionStarted)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientUDSP2PSessionStarted::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientUDSP2PSessionStarted)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid_remote = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid_remote(), output);
  }

  // optional int32 appid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->appid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientUDSP2PSessionStarted)
}

::google::protobuf::uint8* CMsgClientUDSP2PSessionStarted::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientUDSP2PSessionStarted)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid_remote = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid_remote(), target);
  }

  // optional int32 appid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->appid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientUDSP2PSessionStarted)
  return target;
}

size_t CMsgClientUDSP2PSessionStarted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientUDSP2PSessionStarted)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steamid_remote = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional int32 appid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientUDSP2PSessionStarted::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientUDSP2PSessionStarted)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUDSP2PSessionStarted* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientUDSP2PSessionStarted>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientUDSP2PSessionStarted)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientUDSP2PSessionStarted)
    MergeFrom(*source);
  }
}

void CMsgClientUDSP2PSessionStarted::MergeFrom(const CMsgClientUDSP2PSessionStarted& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientUDSP2PSessionStarted)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_remote_ = from.steamid_remote_;
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientUDSP2PSessionStarted::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientUDSP2PSessionStarted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUDSP2PSessionStarted::CopyFrom(const CMsgClientUDSP2PSessionStarted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientUDSP2PSessionStarted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUDSP2PSessionStarted::IsInitialized() const {
  return true;
}

void CMsgClientUDSP2PSessionStarted::Swap(CMsgClientUDSP2PSessionStarted* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientUDSP2PSessionStarted::InternalSwap(CMsgClientUDSP2PSessionStarted* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_remote_, other->steamid_remote_);
  swap(appid_, other->appid_);
}

::google::protobuf::Metadata CMsgClientUDSP2PSessionStarted::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientUDSP2PSessionEnded::InitAsDefaultInstance() {
}
class CMsgClientUDSP2PSessionEnded::HasBitSetters {
 public:
  static void set_has_steamid_remote(CMsgClientUDSP2PSessionEnded* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_appid(CMsgClientUDSP2PSessionEnded* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_session_length_sec(CMsgClientUDSP2PSessionEnded* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_session_error(CMsgClientUDSP2PSessionEnded* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_nattype(CMsgClientUDSP2PSessionEnded* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_bytes_recv(CMsgClientUDSP2PSessionEnded* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_bytes_sent(CMsgClientUDSP2PSessionEnded* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_bytes_sent_relay(CMsgClientUDSP2PSessionEnded* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_bytes_recv_relay(CMsgClientUDSP2PSessionEnded* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_time_to_connect_ms(CMsgClientUDSP2PSessionEnded* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientUDSP2PSessionEnded::kSteamidRemoteFieldNumber;
const int CMsgClientUDSP2PSessionEnded::kAppidFieldNumber;
const int CMsgClientUDSP2PSessionEnded::kSessionLengthSecFieldNumber;
const int CMsgClientUDSP2PSessionEnded::kSessionErrorFieldNumber;
const int CMsgClientUDSP2PSessionEnded::kNattypeFieldNumber;
const int CMsgClientUDSP2PSessionEnded::kBytesRecvFieldNumber;
const int CMsgClientUDSP2PSessionEnded::kBytesSentFieldNumber;
const int CMsgClientUDSP2PSessionEnded::kBytesSentRelayFieldNumber;
const int CMsgClientUDSP2PSessionEnded::kBytesRecvRelayFieldNumber;
const int CMsgClientUDSP2PSessionEnded::kTimeToConnectMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientUDSP2PSessionEnded::CMsgClientUDSP2PSessionEnded()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientUDSP2PSessionEnded)
}
CMsgClientUDSP2PSessionEnded::CMsgClientUDSP2PSessionEnded(const CMsgClientUDSP2PSessionEnded& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_remote_, &from.steamid_remote_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_to_connect_ms_) -
    reinterpret_cast<char*>(&steamid_remote_)) + sizeof(time_to_connect_ms_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientUDSP2PSessionEnded)
}

void CMsgClientUDSP2PSessionEnded::SharedCtor() {
  ::memset(&steamid_remote_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_to_connect_ms_) -
      reinterpret_cast<char*>(&steamid_remote_)) + sizeof(time_to_connect_ms_));
}

CMsgClientUDSP2PSessionEnded::~CMsgClientUDSP2PSessionEnded() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientUDSP2PSessionEnded)
  SharedDtor();
}

void CMsgClientUDSP2PSessionEnded::SharedDtor() {
}

void CMsgClientUDSP2PSessionEnded::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientUDSP2PSessionEnded& CMsgClientUDSP2PSessionEnded::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientUDSP2PSessionEnded_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientUDSP2PSessionEnded::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientUDSP2PSessionEnded)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&steamid_remote_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bytes_sent_relay_) -
        reinterpret_cast<char*>(&steamid_remote_)) + sizeof(bytes_sent_relay_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&bytes_recv_relay_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_to_connect_ms_) -
        reinterpret_cast<char*>(&bytes_recv_relay_)) + sizeof(time_to_connect_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientUDSP2PSessionEnded::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientUDSP2PSessionEnded*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid_remote = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steamid_remote(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional int32 appid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 session_length_sec = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_session_length_sec(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 session_error = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_session_error(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 nattype = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_nattype(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 bytes_recv = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_bytes_recv(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 bytes_sent = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_bytes_sent(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 bytes_sent_relay = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_bytes_sent_relay(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 bytes_recv_relay = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_bytes_recv_relay(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 time_to_connect_ms = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_time_to_connect_ms(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientUDSP2PSessionEnded::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientUDSP2PSessionEnded)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid_remote = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steamid_remote(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_remote_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 appid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 session_length_sec = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_session_length_sec(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &session_length_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 session_error = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_session_error(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &session_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 nattype = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_nattype(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nattype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 bytes_recv = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_bytes_recv(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bytes_recv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 bytes_sent = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_bytes_sent(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bytes_sent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 bytes_sent_relay = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_bytes_sent_relay(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bytes_sent_relay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 bytes_recv_relay = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_bytes_recv_relay(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bytes_recv_relay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 time_to_connect_ms = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_time_to_connect_ms(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_to_connect_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientUDSP2PSessionEnded)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientUDSP2PSessionEnded)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientUDSP2PSessionEnded::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientUDSP2PSessionEnded)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid_remote = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid_remote(), output);
  }

  // optional int32 appid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->appid(), output);
  }

  // optional int32 session_length_sec = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->session_length_sec(), output);
  }

  // optional int32 session_error = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->session_error(), output);
  }

  // optional int32 nattype = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->nattype(), output);
  }

  // optional int32 bytes_recv = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->bytes_recv(), output);
  }

  // optional int32 bytes_sent = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->bytes_sent(), output);
  }

  // optional int32 bytes_sent_relay = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->bytes_sent_relay(), output);
  }

  // optional int32 bytes_recv_relay = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->bytes_recv_relay(), output);
  }

  // optional int32 time_to_connect_ms = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->time_to_connect_ms(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientUDSP2PSessionEnded)
}

::google::protobuf::uint8* CMsgClientUDSP2PSessionEnded::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientUDSP2PSessionEnded)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid_remote = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid_remote(), target);
  }

  // optional int32 appid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->appid(), target);
  }

  // optional int32 session_length_sec = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->session_length_sec(), target);
  }

  // optional int32 session_error = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->session_error(), target);
  }

  // optional int32 nattype = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->nattype(), target);
  }

  // optional int32 bytes_recv = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->bytes_recv(), target);
  }

  // optional int32 bytes_sent = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->bytes_sent(), target);
  }

  // optional int32 bytes_sent_relay = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->bytes_sent_relay(), target);
  }

  // optional int32 bytes_recv_relay = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->bytes_recv_relay(), target);
  }

  // optional int32 time_to_connect_ms = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->time_to_connect_ms(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientUDSP2PSessionEnded)
  return target;
}

size_t CMsgClientUDSP2PSessionEnded::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientUDSP2PSessionEnded)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional fixed64 steamid_remote = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional int32 appid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }

    // optional int32 session_length_sec = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->session_length_sec());
    }

    // optional int32 session_error = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->session_error());
    }

    // optional int32 nattype = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nattype());
    }

    // optional int32 bytes_recv = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bytes_recv());
    }

    // optional int32 bytes_sent = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bytes_sent());
    }

    // optional int32 bytes_sent_relay = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bytes_sent_relay());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional int32 bytes_recv_relay = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bytes_recv_relay());
    }

    // optional int32 time_to_connect_ms = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time_to_connect_ms());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientUDSP2PSessionEnded::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientUDSP2PSessionEnded)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUDSP2PSessionEnded* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientUDSP2PSessionEnded>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientUDSP2PSessionEnded)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientUDSP2PSessionEnded)
    MergeFrom(*source);
  }
}

void CMsgClientUDSP2PSessionEnded::MergeFrom(const CMsgClientUDSP2PSessionEnded& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientUDSP2PSessionEnded)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      steamid_remote_ = from.steamid_remote_;
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000004u) {
      session_length_sec_ = from.session_length_sec_;
    }
    if (cached_has_bits & 0x00000008u) {
      session_error_ = from.session_error_;
    }
    if (cached_has_bits & 0x00000010u) {
      nattype_ = from.nattype_;
    }
    if (cached_has_bits & 0x00000020u) {
      bytes_recv_ = from.bytes_recv_;
    }
    if (cached_has_bits & 0x00000040u) {
      bytes_sent_ = from.bytes_sent_;
    }
    if (cached_has_bits & 0x00000080u) {
      bytes_sent_relay_ = from.bytes_sent_relay_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      bytes_recv_relay_ = from.bytes_recv_relay_;
    }
    if (cached_has_bits & 0x00000200u) {
      time_to_connect_ms_ = from.time_to_connect_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientUDSP2PSessionEnded::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientUDSP2PSessionEnded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUDSP2PSessionEnded::CopyFrom(const CMsgClientUDSP2PSessionEnded& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientUDSP2PSessionEnded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUDSP2PSessionEnded::IsInitialized() const {
  return true;
}

void CMsgClientUDSP2PSessionEnded::Swap(CMsgClientUDSP2PSessionEnded* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientUDSP2PSessionEnded::InternalSwap(CMsgClientUDSP2PSessionEnded* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_remote_, other->steamid_remote_);
  swap(appid_, other->appid_);
  swap(session_length_sec_, other->session_length_sec_);
  swap(session_error_, other->session_error_);
  swap(nattype_, other->nattype_);
  swap(bytes_recv_, other->bytes_recv_);
  swap(bytes_sent_, other->bytes_sent_);
  swap(bytes_sent_relay_, other->bytes_sent_relay_);
  swap(bytes_recv_relay_, other->bytes_recv_relay_);
  swap(time_to_connect_ms_, other->time_to_connect_ms_);
}

::google::protobuf::Metadata CMsgClientUDSP2PSessionEnded::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientRegisterAuthTicketWithCM::InitAsDefaultInstance() {
}
class CMsgClientRegisterAuthTicketWithCM::HasBitSetters {
 public:
  static void set_has_protocol_version(CMsgClientRegisterAuthTicketWithCM* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_ticket(CMsgClientRegisterAuthTicketWithCM* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_client_instance_id(CMsgClientRegisterAuthTicketWithCM* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientRegisterAuthTicketWithCM::kProtocolVersionFieldNumber;
const int CMsgClientRegisterAuthTicketWithCM::kTicketFieldNumber;
const int CMsgClientRegisterAuthTicketWithCM::kClientInstanceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientRegisterAuthTicketWithCM::CMsgClientRegisterAuthTicketWithCM()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientRegisterAuthTicketWithCM)
}
CMsgClientRegisterAuthTicketWithCM::CMsgClientRegisterAuthTicketWithCM(const CMsgClientRegisterAuthTicketWithCM& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ticket()) {
    ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_);
  }
  ::memcpy(&client_instance_id_, &from.client_instance_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&protocol_version_) -
    reinterpret_cast<char*>(&client_instance_id_)) + sizeof(protocol_version_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientRegisterAuthTicketWithCM)
}

void CMsgClientRegisterAuthTicketWithCM::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientRegisterAuthTicketWithCM_steammessages_5fclientserver_2eproto.base);
  ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&client_instance_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&protocol_version_) -
      reinterpret_cast<char*>(&client_instance_id_)) + sizeof(protocol_version_));
}

CMsgClientRegisterAuthTicketWithCM::~CMsgClientRegisterAuthTicketWithCM() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientRegisterAuthTicketWithCM)
  SharedDtor();
}

void CMsgClientRegisterAuthTicketWithCM::SharedDtor() {
  ticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientRegisterAuthTicketWithCM::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientRegisterAuthTicketWithCM& CMsgClientRegisterAuthTicketWithCM::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientRegisterAuthTicketWithCM_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientRegisterAuthTicketWithCM::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientRegisterAuthTicketWithCM)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ticket_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&client_instance_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&protocol_version_) -
        reinterpret_cast<char*>(&client_instance_id_)) + sizeof(protocol_version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientRegisterAuthTicketWithCM::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientRegisterAuthTicketWithCM*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 protocol_version = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_protocol_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes ticket = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_ticket();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint64 client_instance_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_client_instance_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientRegisterAuthTicketWithCM::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientRegisterAuthTicketWithCM)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 protocol_version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_protocol_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protocol_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes ticket = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ticket()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 client_instance_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_client_instance_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &client_instance_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientRegisterAuthTicketWithCM)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientRegisterAuthTicketWithCM)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientRegisterAuthTicketWithCM::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientRegisterAuthTicketWithCM)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 protocol_version = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->protocol_version(), output);
  }

  // optional bytes ticket = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->ticket(), output);
  }

  // optional uint64 client_instance_id = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->client_instance_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientRegisterAuthTicketWithCM)
}

::google::protobuf::uint8* CMsgClientRegisterAuthTicketWithCM::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientRegisterAuthTicketWithCM)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 protocol_version = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->protocol_version(), target);
  }

  // optional bytes ticket = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->ticket(), target);
  }

  // optional uint64 client_instance_id = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->client_instance_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientRegisterAuthTicketWithCM)
  return target;
}

size_t CMsgClientRegisterAuthTicketWithCM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientRegisterAuthTicketWithCM)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes ticket = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ticket());
    }

    // optional uint64 client_instance_id = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->client_instance_id());
    }

    // optional uint32 protocol_version = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->protocol_version());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientRegisterAuthTicketWithCM::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientRegisterAuthTicketWithCM)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientRegisterAuthTicketWithCM* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientRegisterAuthTicketWithCM>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientRegisterAuthTicketWithCM)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientRegisterAuthTicketWithCM)
    MergeFrom(*source);
  }
}

void CMsgClientRegisterAuthTicketWithCM::MergeFrom(const CMsgClientRegisterAuthTicketWithCM& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientRegisterAuthTicketWithCM)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_);
    }
    if (cached_has_bits & 0x00000002u) {
      client_instance_id_ = from.client_instance_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      protocol_version_ = from.protocol_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientRegisterAuthTicketWithCM::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientRegisterAuthTicketWithCM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientRegisterAuthTicketWithCM::CopyFrom(const CMsgClientRegisterAuthTicketWithCM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientRegisterAuthTicketWithCM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRegisterAuthTicketWithCM::IsInitialized() const {
  return true;
}

void CMsgClientRegisterAuthTicketWithCM::Swap(CMsgClientRegisterAuthTicketWithCM* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientRegisterAuthTicketWithCM::InternalSwap(CMsgClientRegisterAuthTicketWithCM* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ticket_.Swap(&other->ticket_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(client_instance_id_, other->client_instance_id_);
  swap(protocol_version_, other->protocol_version_);
}

::google::protobuf::Metadata CMsgClientRegisterAuthTicketWithCM::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientTicketAuthComplete::InitAsDefaultInstance() {
}
class CMsgClientTicketAuthComplete::HasBitSetters {
 public:
  static void set_has_steam_id(CMsgClientTicketAuthComplete* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_game_id(CMsgClientTicketAuthComplete* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_estate(CMsgClientTicketAuthComplete* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_eauth_session_response(CMsgClientTicketAuthComplete* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_deprecated_ticket(CMsgClientTicketAuthComplete* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_ticket_crc(CMsgClientTicketAuthComplete* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_ticket_sequence(CMsgClientTicketAuthComplete* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_owner_steam_id(CMsgClientTicketAuthComplete* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientTicketAuthComplete::kSteamIdFieldNumber;
const int CMsgClientTicketAuthComplete::kGameIdFieldNumber;
const int CMsgClientTicketAuthComplete::kEstateFieldNumber;
const int CMsgClientTicketAuthComplete::kEauthSessionResponseFieldNumber;
const int CMsgClientTicketAuthComplete::kDEPRECATEDTicketFieldNumber;
const int CMsgClientTicketAuthComplete::kTicketCrcFieldNumber;
const int CMsgClientTicketAuthComplete::kTicketSequenceFieldNumber;
const int CMsgClientTicketAuthComplete::kOwnerSteamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientTicketAuthComplete::CMsgClientTicketAuthComplete()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientTicketAuthComplete)
}
CMsgClientTicketAuthComplete::CMsgClientTicketAuthComplete(const CMsgClientTicketAuthComplete& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  deprecated_ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_deprecated_ticket()) {
    deprecated_ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deprecated_ticket_);
  }
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&owner_steam_id_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(owner_steam_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientTicketAuthComplete)
}

void CMsgClientTicketAuthComplete::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientTicketAuthComplete_steammessages_5fclientserver_2eproto.base);
  deprecated_ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steam_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&owner_steam_id_) -
      reinterpret_cast<char*>(&steam_id_)) + sizeof(owner_steam_id_));
}

CMsgClientTicketAuthComplete::~CMsgClientTicketAuthComplete() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientTicketAuthComplete)
  SharedDtor();
}

void CMsgClientTicketAuthComplete::SharedDtor() {
  deprecated_ticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientTicketAuthComplete::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientTicketAuthComplete& CMsgClientTicketAuthComplete::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientTicketAuthComplete_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientTicketAuthComplete::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientTicketAuthComplete)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    deprecated_ticket_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&owner_steam_id_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(owner_steam_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientTicketAuthComplete::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientTicketAuthComplete*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steam_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed64 game_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_game_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 estate = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_estate(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 eauth_session_response = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_eauth_session_response(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes DEPRECATED_ticket = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_deprecated_ticket();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 ticket_crc = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_ticket_crc(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 ticket_sequence = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_ticket_sequence(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 owner_steam_id = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 65) goto handle_unusual;
        msg->set_owner_steam_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientTicketAuthComplete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientTicketAuthComplete)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 game_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_game_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 estate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_estate(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &estate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 eauth_session_response = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_eauth_session_response(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eauth_session_response_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes DEPRECATED_ticket = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_deprecated_ticket()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ticket_crc = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_ticket_crc(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ticket_crc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ticket_sequence = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_ticket_sequence(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ticket_sequence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 owner_steam_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (65 & 0xFF)) {
          HasBitSetters::set_has_owner_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &owner_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientTicketAuthComplete)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientTicketAuthComplete)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientTicketAuthComplete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientTicketAuthComplete)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional fixed64 game_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->game_id(), output);
  }

  // optional uint32 estate = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->estate(), output);
  }

  // optional uint32 eauth_session_response = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->eauth_session_response(), output);
  }

  // optional bytes DEPRECATED_ticket = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->deprecated_ticket(), output);
  }

  // optional uint32 ticket_crc = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->ticket_crc(), output);
  }

  // optional uint32 ticket_sequence = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->ticket_sequence(), output);
  }

  // optional fixed64 owner_steam_id = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(8, this->owner_steam_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientTicketAuthComplete)
}

::google::protobuf::uint8* CMsgClientTicketAuthComplete::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientTicketAuthComplete)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional fixed64 game_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->game_id(), target);
  }

  // optional uint32 estate = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->estate(), target);
  }

  // optional uint32 eauth_session_response = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->eauth_session_response(), target);
  }

  // optional bytes DEPRECATED_ticket = 5;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->deprecated_ticket(), target);
  }

  // optional uint32 ticket_crc = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->ticket_crc(), target);
  }

  // optional uint32 ticket_sequence = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->ticket_sequence(), target);
  }

  // optional fixed64 owner_steam_id = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(8, this->owner_steam_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientTicketAuthComplete)
  return target;
}

size_t CMsgClientTicketAuthComplete::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientTicketAuthComplete)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes DEPRECATED_ticket = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->deprecated_ticket());
    }

    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 game_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 estate = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->estate());
    }

    // optional uint32 eauth_session_response = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eauth_session_response());
    }

    // optional uint32 ticket_crc = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ticket_crc());
    }

    // optional uint32 ticket_sequence = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ticket_sequence());
    }

    // optional fixed64 owner_steam_id = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientTicketAuthComplete::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientTicketAuthComplete)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientTicketAuthComplete* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientTicketAuthComplete>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientTicketAuthComplete)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientTicketAuthComplete)
    MergeFrom(*source);
  }
}

void CMsgClientTicketAuthComplete::MergeFrom(const CMsgClientTicketAuthComplete& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientTicketAuthComplete)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      deprecated_ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deprecated_ticket_);
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      game_id_ = from.game_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      estate_ = from.estate_;
    }
    if (cached_has_bits & 0x00000010u) {
      eauth_session_response_ = from.eauth_session_response_;
    }
    if (cached_has_bits & 0x00000020u) {
      ticket_crc_ = from.ticket_crc_;
    }
    if (cached_has_bits & 0x00000040u) {
      ticket_sequence_ = from.ticket_sequence_;
    }
    if (cached_has_bits & 0x00000080u) {
      owner_steam_id_ = from.owner_steam_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientTicketAuthComplete::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientTicketAuthComplete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientTicketAuthComplete::CopyFrom(const CMsgClientTicketAuthComplete& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientTicketAuthComplete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientTicketAuthComplete::IsInitialized() const {
  return true;
}

void CMsgClientTicketAuthComplete::Swap(CMsgClientTicketAuthComplete* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientTicketAuthComplete::InternalSwap(CMsgClientTicketAuthComplete* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  deprecated_ticket_.Swap(&other->deprecated_ticket_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(steam_id_, other->steam_id_);
  swap(game_id_, other->game_id_);
  swap(estate_, other->estate_);
  swap(eauth_session_response_, other->eauth_session_response_);
  swap(ticket_crc_, other->ticket_crc_);
  swap(ticket_sequence_, other->ticket_sequence_);
  swap(owner_steam_id_, other->owner_steam_id_);
}

::google::protobuf::Metadata CMsgClientTicketAuthComplete::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientCMList::InitAsDefaultInstance() {
}
class CMsgClientCMList::HasBitSetters {
 public:
  static void set_has_percent_default_to_websocket(CMsgClientCMList* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientCMList::kCmAddressesFieldNumber;
const int CMsgClientCMList::kCmPortsFieldNumber;
const int CMsgClientCMList::kCmWebsocketAddressesFieldNumber;
const int CMsgClientCMList::kPercentDefaultToWebsocketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientCMList::CMsgClientCMList()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientCMList)
}
CMsgClientCMList::CMsgClientCMList(const CMsgClientCMList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      cm_addresses_(from.cm_addresses_),
      cm_ports_(from.cm_ports_),
      cm_websocket_addresses_(from.cm_websocket_addresses_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  percent_default_to_websocket_ = from.percent_default_to_websocket_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientCMList)
}

void CMsgClientCMList::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientCMList_steammessages_5fclientserver_2eproto.base);
  percent_default_to_websocket_ = 0u;
}

CMsgClientCMList::~CMsgClientCMList() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientCMList)
  SharedDtor();
}

void CMsgClientCMList::SharedDtor() {
}

void CMsgClientCMList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientCMList& CMsgClientCMList::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientCMList_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientCMList::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientCMList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cm_addresses_.Clear();
  cm_ports_.Clear();
  cm_websocket_addresses_.Clear();
  percent_default_to_websocket_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientCMList::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientCMList*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated uint32 cm_addresses = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 8) {
          do {
            msg->add_cm_addresses(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_cm_addresses();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated uint32 cm_ports = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 16) {
          do {
            msg->add_cm_ports(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 16 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_cm_ports();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated string cm_websocket_addresses = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientCMList.cm_websocket_addresses");
          object = msg->add_cm_websocket_addresses();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // optional uint32 percent_default_to_websocket = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_percent_default_to_websocket(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientCMList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientCMList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 cm_addresses = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_cm_addresses())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cm_addresses())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 cm_ports = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_cm_ports())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cm_ports())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string cm_websocket_addresses = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_cm_websocket_addresses()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cm_websocket_addresses(this->cm_websocket_addresses_size() - 1).data(),
            static_cast<int>(this->cm_websocket_addresses(this->cm_websocket_addresses_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientCMList.cm_websocket_addresses");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 percent_default_to_websocket = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_percent_default_to_websocket(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &percent_default_to_websocket_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientCMList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientCMList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientCMList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientCMList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 cm_addresses = 1;
  for (int i = 0, n = this->cm_addresses_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->cm_addresses(i), output);
  }

  // repeated uint32 cm_ports = 2;
  for (int i = 0, n = this->cm_ports_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->cm_ports(i), output);
  }

  // repeated string cm_websocket_addresses = 3;
  for (int i = 0, n = this->cm_websocket_addresses_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cm_websocket_addresses(i).data(), static_cast<int>(this->cm_websocket_addresses(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientCMList.cm_websocket_addresses");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->cm_websocket_addresses(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 percent_default_to_websocket = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->percent_default_to_websocket(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientCMList)
}

::google::protobuf::uint8* CMsgClientCMList::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientCMList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 cm_addresses = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->cm_addresses_, target);

  // repeated uint32 cm_ports = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->cm_ports_, target);

  // repeated string cm_websocket_addresses = 3;
  for (int i = 0, n = this->cm_websocket_addresses_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cm_websocket_addresses(i).data(), static_cast<int>(this->cm_websocket_addresses(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientCMList.cm_websocket_addresses");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->cm_websocket_addresses(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 percent_default_to_websocket = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->percent_default_to_websocket(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientCMList)
  return target;
}

size_t CMsgClientCMList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientCMList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 cm_addresses = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->cm_addresses_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->cm_addresses_size());
    total_size += data_size;
  }

  // repeated uint32 cm_ports = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->cm_ports_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->cm_ports_size());
    total_size += data_size;
  }

  // repeated string cm_websocket_addresses = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->cm_websocket_addresses_size());
  for (int i = 0, n = this->cm_websocket_addresses_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->cm_websocket_addresses(i));
  }

  // optional uint32 percent_default_to_websocket = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->percent_default_to_websocket());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientCMList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientCMList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientCMList* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientCMList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientCMList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientCMList)
    MergeFrom(*source);
  }
}

void CMsgClientCMList::MergeFrom(const CMsgClientCMList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientCMList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cm_addresses_.MergeFrom(from.cm_addresses_);
  cm_ports_.MergeFrom(from.cm_ports_);
  cm_websocket_addresses_.MergeFrom(from.cm_websocket_addresses_);
  if (from.has_percent_default_to_websocket()) {
    set_percent_default_to_websocket(from.percent_default_to_websocket());
  }
}

void CMsgClientCMList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientCMList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientCMList::CopyFrom(const CMsgClientCMList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientCMList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientCMList::IsInitialized() const {
  return true;
}

void CMsgClientCMList::Swap(CMsgClientCMList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientCMList::InternalSwap(CMsgClientCMList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  cm_addresses_.InternalSwap(&other->cm_addresses_);
  cm_ports_.InternalSwap(&other->cm_ports_);
  cm_websocket_addresses_.InternalSwap(CastToBase(&other->cm_websocket_addresses_));
  swap(percent_default_to_websocket_, other->percent_default_to_websocket_);
}

::google::protobuf::Metadata CMsgClientCMList::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientP2PConnectionInfo::InitAsDefaultInstance() {
}
class CMsgClientP2PConnectionInfo::HasBitSetters {
 public:
  static void set_has_steam_id_dest(CMsgClientP2PConnectionInfo* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_steam_id_src(CMsgClientP2PConnectionInfo* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_app_id(CMsgClientP2PConnectionInfo* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_candidate(CMsgClientP2PConnectionInfo* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_connection_id_src(CMsgClientP2PConnectionInfo* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_rendezvous(CMsgClientP2PConnectionInfo* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientP2PConnectionInfo::kSteamIdDestFieldNumber;
const int CMsgClientP2PConnectionInfo::kSteamIdSrcFieldNumber;
const int CMsgClientP2PConnectionInfo::kAppIdFieldNumber;
const int CMsgClientP2PConnectionInfo::kCandidateFieldNumber;
const int CMsgClientP2PConnectionInfo::kConnectionIdSrcFieldNumber;
const int CMsgClientP2PConnectionInfo::kRendezvousFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientP2PConnectionInfo::CMsgClientP2PConnectionInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientP2PConnectionInfo)
}
CMsgClientP2PConnectionInfo::CMsgClientP2PConnectionInfo(const CMsgClientP2PConnectionInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  candidate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_candidate()) {
    candidate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.candidate_);
  }
  rendezvous_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rendezvous()) {
    rendezvous_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rendezvous_);
  }
  ::memcpy(&steam_id_dest_, &from.steam_id_dest_,
    static_cast<size_t>(reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&steam_id_dest_)) + sizeof(app_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientP2PConnectionInfo)
}

void CMsgClientP2PConnectionInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientP2PConnectionInfo_steammessages_5fclientserver_2eproto.base);
  candidate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rendezvous_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steam_id_dest_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&app_id_) -
      reinterpret_cast<char*>(&steam_id_dest_)) + sizeof(app_id_));
}

CMsgClientP2PConnectionInfo::~CMsgClientP2PConnectionInfo() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientP2PConnectionInfo)
  SharedDtor();
}

void CMsgClientP2PConnectionInfo::SharedDtor() {
  candidate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rendezvous_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientP2PConnectionInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientP2PConnectionInfo& CMsgClientP2PConnectionInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientP2PConnectionInfo_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientP2PConnectionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientP2PConnectionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      candidate_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      rendezvous_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&steam_id_dest_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&app_id_) -
        reinterpret_cast<char*>(&steam_id_dest_)) + sizeof(app_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientP2PConnectionInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientP2PConnectionInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steam_id_dest = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steam_id_dest(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed64 steam_id_src = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_steam_id_src(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 app_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes candidate = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_candidate();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional fixed64 connection_id_src = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 41) goto handle_unusual;
        msg->set_connection_id_src(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional bytes rendezvous = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_rendezvous();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientP2PConnectionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientP2PConnectionInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id_dest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steam_id_dest(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_dest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_src = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_steam_id_src(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_src_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 app_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes candidate = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_candidate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 connection_id_src = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (41 & 0xFF)) {
          HasBitSetters::set_has_connection_id_src(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &connection_id_src_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes rendezvous = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rendezvous()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientP2PConnectionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientP2PConnectionInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientP2PConnectionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientP2PConnectionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id_dest = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id_dest(), output);
  }

  // optional fixed64 steam_id_src = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_src(), output);
  }

  // optional uint32 app_id = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->app_id(), output);
  }

  // optional bytes candidate = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->candidate(), output);
  }

  // optional fixed64 connection_id_src = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->connection_id_src(), output);
  }

  // optional bytes rendezvous = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->rendezvous(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientP2PConnectionInfo)
}

::google::protobuf::uint8* CMsgClientP2PConnectionInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientP2PConnectionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id_dest = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id_dest(), target);
  }

  // optional fixed64 steam_id_src = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id_src(), target);
  }

  // optional uint32 app_id = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->app_id(), target);
  }

  // optional bytes candidate = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->candidate(), target);
  }

  // optional fixed64 connection_id_src = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->connection_id_src(), target);
  }

  // optional bytes rendezvous = 6;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->rendezvous(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientP2PConnectionInfo)
  return target;
}

size_t CMsgClientP2PConnectionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientP2PConnectionInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bytes candidate = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->candidate());
    }

    // optional bytes rendezvous = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->rendezvous());
    }

    // optional fixed64 steam_id_dest = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional fixed64 steam_id_src = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional fixed64 connection_id_src = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientP2PConnectionInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientP2PConnectionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientP2PConnectionInfo* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientP2PConnectionInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientP2PConnectionInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientP2PConnectionInfo)
    MergeFrom(*source);
  }
}

void CMsgClientP2PConnectionInfo::MergeFrom(const CMsgClientP2PConnectionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientP2PConnectionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      candidate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.candidate_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      rendezvous_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rendezvous_);
    }
    if (cached_has_bits & 0x00000004u) {
      steam_id_dest_ = from.steam_id_dest_;
    }
    if (cached_has_bits & 0x00000008u) {
      steam_id_src_ = from.steam_id_src_;
    }
    if (cached_has_bits & 0x00000010u) {
      connection_id_src_ = from.connection_id_src_;
    }
    if (cached_has_bits & 0x00000020u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientP2PConnectionInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientP2PConnectionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientP2PConnectionInfo::CopyFrom(const CMsgClientP2PConnectionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientP2PConnectionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientP2PConnectionInfo::IsInitialized() const {
  return true;
}

void CMsgClientP2PConnectionInfo::Swap(CMsgClientP2PConnectionInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientP2PConnectionInfo::InternalSwap(CMsgClientP2PConnectionInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  candidate_.Swap(&other->candidate_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  rendezvous_.Swap(&other->rendezvous_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(steam_id_dest_, other->steam_id_dest_);
  swap(steam_id_src_, other->steam_id_src_);
  swap(connection_id_src_, other->connection_id_src_);
  swap(app_id_, other->app_id_);
}

::google::protobuf::Metadata CMsgClientP2PConnectionInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientP2PConnectionFailInfo::InitAsDefaultInstance() {
}
class CMsgClientP2PConnectionFailInfo::HasBitSetters {
 public:
  static void set_has_steam_id_dest(CMsgClientP2PConnectionFailInfo* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_steam_id_src(CMsgClientP2PConnectionFailInfo* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_app_id(CMsgClientP2PConnectionFailInfo* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_ep2p_session_error(CMsgClientP2PConnectionFailInfo* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_connection_id_dest(CMsgClientP2PConnectionFailInfo* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_close_reason(CMsgClientP2PConnectionFailInfo* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_close_message(CMsgClientP2PConnectionFailInfo* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientP2PConnectionFailInfo::kSteamIdDestFieldNumber;
const int CMsgClientP2PConnectionFailInfo::kSteamIdSrcFieldNumber;
const int CMsgClientP2PConnectionFailInfo::kAppIdFieldNumber;
const int CMsgClientP2PConnectionFailInfo::kEp2PSessionErrorFieldNumber;
const int CMsgClientP2PConnectionFailInfo::kConnectionIdDestFieldNumber;
const int CMsgClientP2PConnectionFailInfo::kCloseReasonFieldNumber;
const int CMsgClientP2PConnectionFailInfo::kCloseMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientP2PConnectionFailInfo::CMsgClientP2PConnectionFailInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientP2PConnectionFailInfo)
}
CMsgClientP2PConnectionFailInfo::CMsgClientP2PConnectionFailInfo(const CMsgClientP2PConnectionFailInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  close_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_close_message()) {
    close_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.close_message_);
  }
  ::memcpy(&steam_id_dest_, &from.steam_id_dest_,
    static_cast<size_t>(reinterpret_cast<char*>(&close_reason_) -
    reinterpret_cast<char*>(&steam_id_dest_)) + sizeof(close_reason_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientP2PConnectionFailInfo)
}

void CMsgClientP2PConnectionFailInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientP2PConnectionFailInfo_steammessages_5fclientserver_2eproto.base);
  close_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steam_id_dest_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&close_reason_) -
      reinterpret_cast<char*>(&steam_id_dest_)) + sizeof(close_reason_));
}

CMsgClientP2PConnectionFailInfo::~CMsgClientP2PConnectionFailInfo() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientP2PConnectionFailInfo)
  SharedDtor();
}

void CMsgClientP2PConnectionFailInfo::SharedDtor() {
  close_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientP2PConnectionFailInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientP2PConnectionFailInfo& CMsgClientP2PConnectionFailInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientP2PConnectionFailInfo_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientP2PConnectionFailInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientP2PConnectionFailInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    close_message_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&steam_id_dest_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&close_reason_) -
        reinterpret_cast<char*>(&steam_id_dest_)) + sizeof(close_reason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientP2PConnectionFailInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientP2PConnectionFailInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steam_id_dest = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steam_id_dest(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed64 steam_id_src = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_steam_id_src(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 app_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 ep2p_session_error = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_ep2p_session_error(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 connection_id_dest = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 41) goto handle_unusual;
        msg->set_connection_id_dest(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 close_reason = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_close_reason(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string close_message = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientP2PConnectionFailInfo.close_message");
        object = msg->mutable_close_message();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientP2PConnectionFailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientP2PConnectionFailInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id_dest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steam_id_dest(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_dest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_src = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_steam_id_src(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_src_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 app_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ep2p_session_error = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_ep2p_session_error(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ep2p_session_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 connection_id_dest = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (41 & 0xFF)) {
          HasBitSetters::set_has_connection_id_dest(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &connection_id_dest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 close_reason = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_close_reason(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &close_reason_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string close_message = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_close_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->close_message().data(), static_cast<int>(this->close_message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientP2PConnectionFailInfo.close_message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientP2PConnectionFailInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientP2PConnectionFailInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientP2PConnectionFailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientP2PConnectionFailInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id_dest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id_dest(), output);
  }

  // optional fixed64 steam_id_src = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_src(), output);
  }

  // optional uint32 app_id = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->app_id(), output);
  }

  // optional uint32 ep2p_session_error = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ep2p_session_error(), output);
  }

  // optional fixed64 connection_id_dest = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->connection_id_dest(), output);
  }

  // optional uint32 close_reason = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->close_reason(), output);
  }

  // optional string close_message = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->close_message().data(), static_cast<int>(this->close_message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientP2PConnectionFailInfo.close_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->close_message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientP2PConnectionFailInfo)
}

::google::protobuf::uint8* CMsgClientP2PConnectionFailInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientP2PConnectionFailInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id_dest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id_dest(), target);
  }

  // optional fixed64 steam_id_src = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id_src(), target);
  }

  // optional uint32 app_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->app_id(), target);
  }

  // optional uint32 ep2p_session_error = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ep2p_session_error(), target);
  }

  // optional fixed64 connection_id_dest = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->connection_id_dest(), target);
  }

  // optional uint32 close_reason = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->close_reason(), target);
  }

  // optional string close_message = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->close_message().data(), static_cast<int>(this->close_message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientP2PConnectionFailInfo.close_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->close_message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientP2PConnectionFailInfo)
  return target;
}

size_t CMsgClientP2PConnectionFailInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientP2PConnectionFailInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string close_message = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->close_message());
    }

    // optional fixed64 steam_id_dest = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 steam_id_src = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional uint32 ep2p_session_error = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ep2p_session_error());
    }

    // optional fixed64 connection_id_dest = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional uint32 close_reason = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->close_reason());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientP2PConnectionFailInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientP2PConnectionFailInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientP2PConnectionFailInfo* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientP2PConnectionFailInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientP2PConnectionFailInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientP2PConnectionFailInfo)
    MergeFrom(*source);
  }
}

void CMsgClientP2PConnectionFailInfo::MergeFrom(const CMsgClientP2PConnectionFailInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientP2PConnectionFailInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      close_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.close_message_);
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_dest_ = from.steam_id_dest_;
    }
    if (cached_has_bits & 0x00000004u) {
      steam_id_src_ = from.steam_id_src_;
    }
    if (cached_has_bits & 0x00000008u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      ep2p_session_error_ = from.ep2p_session_error_;
    }
    if (cached_has_bits & 0x00000020u) {
      connection_id_dest_ = from.connection_id_dest_;
    }
    if (cached_has_bits & 0x00000040u) {
      close_reason_ = from.close_reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientP2PConnectionFailInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientP2PConnectionFailInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientP2PConnectionFailInfo::CopyFrom(const CMsgClientP2PConnectionFailInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientP2PConnectionFailInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientP2PConnectionFailInfo::IsInitialized() const {
  return true;
}

void CMsgClientP2PConnectionFailInfo::Swap(CMsgClientP2PConnectionFailInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientP2PConnectionFailInfo::InternalSwap(CMsgClientP2PConnectionFailInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  close_message_.Swap(&other->close_message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(steam_id_dest_, other->steam_id_dest_);
  swap(steam_id_src_, other->steam_id_src_);
  swap(app_id_, other->app_id_);
  swap(ep2p_session_error_, other->ep2p_session_error_);
  swap(connection_id_dest_, other->connection_id_dest_);
  swap(close_reason_, other->close_reason_);
}

::google::protobuf::Metadata CMsgClientP2PConnectionFailInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientNetworkingCertRequest::InitAsDefaultInstance() {
}
class CMsgClientNetworkingCertRequest::HasBitSetters {
 public:
  static void set_has_key_data(CMsgClientNetworkingCertRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_app_id(CMsgClientNetworkingCertRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientNetworkingCertRequest::kKeyDataFieldNumber;
const int CMsgClientNetworkingCertRequest::kAppIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientNetworkingCertRequest::CMsgClientNetworkingCertRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientNetworkingCertRequest)
}
CMsgClientNetworkingCertRequest::CMsgClientNetworkingCertRequest(const CMsgClientNetworkingCertRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key_data()) {
    key_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_data_);
  }
  app_id_ = from.app_id_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientNetworkingCertRequest)
}

void CMsgClientNetworkingCertRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientNetworkingCertRequest_steammessages_5fclientserver_2eproto.base);
  key_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_id_ = 0u;
}

CMsgClientNetworkingCertRequest::~CMsgClientNetworkingCertRequest() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientNetworkingCertRequest)
  SharedDtor();
}

void CMsgClientNetworkingCertRequest::SharedDtor() {
  key_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientNetworkingCertRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientNetworkingCertRequest& CMsgClientNetworkingCertRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientNetworkingCertRequest_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientNetworkingCertRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientNetworkingCertRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    key_data_.ClearNonDefaultToEmptyNoArena();
  }
  app_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientNetworkingCertRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientNetworkingCertRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bytes key_data = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_key_data();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 app_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientNetworkingCertRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientNetworkingCertRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes key_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 app_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientNetworkingCertRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientNetworkingCertRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientNetworkingCertRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientNetworkingCertRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes key_data = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key_data(), output);
  }

  // optional uint32 app_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->app_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientNetworkingCertRequest)
}

::google::protobuf::uint8* CMsgClientNetworkingCertRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientNetworkingCertRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes key_data = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key_data(), target);
  }

  // optional uint32 app_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->app_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientNetworkingCertRequest)
  return target;
}

size_t CMsgClientNetworkingCertRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientNetworkingCertRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes key_data = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key_data());
    }

    // optional uint32 app_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientNetworkingCertRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientNetworkingCertRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientNetworkingCertRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientNetworkingCertRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientNetworkingCertRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientNetworkingCertRequest)
    MergeFrom(*source);
  }
}

void CMsgClientNetworkingCertRequest::MergeFrom(const CMsgClientNetworkingCertRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientNetworkingCertRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      key_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_data_);
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientNetworkingCertRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientNetworkingCertRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientNetworkingCertRequest::CopyFrom(const CMsgClientNetworkingCertRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientNetworkingCertRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientNetworkingCertRequest::IsInitialized() const {
  return true;
}

void CMsgClientNetworkingCertRequest::Swap(CMsgClientNetworkingCertRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientNetworkingCertRequest::InternalSwap(CMsgClientNetworkingCertRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_data_.Swap(&other->key_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(app_id_, other->app_id_);
}

::google::protobuf::Metadata CMsgClientNetworkingCertRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientNetworkingCertReply::InitAsDefaultInstance() {
}
class CMsgClientNetworkingCertReply::HasBitSetters {
 public:
  static void set_has_cert(CMsgClientNetworkingCertReply* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_ca_key_id(CMsgClientNetworkingCertReply* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_ca_signature(CMsgClientNetworkingCertReply* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientNetworkingCertReply::kCertFieldNumber;
const int CMsgClientNetworkingCertReply::kCaKeyIdFieldNumber;
const int CMsgClientNetworkingCertReply::kCaSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientNetworkingCertReply::CMsgClientNetworkingCertReply()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientNetworkingCertReply)
}
CMsgClientNetworkingCertReply::CMsgClientNetworkingCertReply(const CMsgClientNetworkingCertReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cert_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cert()) {
    cert_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cert_);
  }
  ca_signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ca_signature()) {
    ca_signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ca_signature_);
  }
  ca_key_id_ = from.ca_key_id_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientNetworkingCertReply)
}

void CMsgClientNetworkingCertReply::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientNetworkingCertReply_steammessages_5fclientserver_2eproto.base);
  cert_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ca_signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ca_key_id_ = PROTOBUF_ULONGLONG(0);
}

CMsgClientNetworkingCertReply::~CMsgClientNetworkingCertReply() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientNetworkingCertReply)
  SharedDtor();
}

void CMsgClientNetworkingCertReply::SharedDtor() {
  cert_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ca_signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientNetworkingCertReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientNetworkingCertReply& CMsgClientNetworkingCertReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientNetworkingCertReply_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientNetworkingCertReply::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientNetworkingCertReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      cert_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      ca_signature_.ClearNonDefaultToEmptyNoArena();
    }
  }
  ca_key_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientNetworkingCertReply::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientNetworkingCertReply*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bytes cert = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_cert();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional fixed64 ca_key_id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 41) goto handle_unusual;
        msg->set_ca_key_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional bytes ca_signature = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_ca_signature();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientNetworkingCertReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientNetworkingCertReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes cert = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cert()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 ca_key_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (41 & 0xFF)) {
          HasBitSetters::set_has_ca_key_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &ca_key_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes ca_signature = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ca_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientNetworkingCertReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientNetworkingCertReply)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientNetworkingCertReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientNetworkingCertReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes cert = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->cert(), output);
  }

  // optional fixed64 ca_key_id = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->ca_key_id(), output);
  }

  // optional bytes ca_signature = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->ca_signature(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientNetworkingCertReply)
}

::google::protobuf::uint8* CMsgClientNetworkingCertReply::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientNetworkingCertReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes cert = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->cert(), target);
  }

  // optional fixed64 ca_key_id = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->ca_key_id(), target);
  }

  // optional bytes ca_signature = 6;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->ca_signature(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientNetworkingCertReply)
  return target;
}

size_t CMsgClientNetworkingCertReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientNetworkingCertReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes cert = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cert());
    }

    // optional bytes ca_signature = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ca_signature());
    }

    // optional fixed64 ca_key_id = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientNetworkingCertReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientNetworkingCertReply)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientNetworkingCertReply* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientNetworkingCertReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientNetworkingCertReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientNetworkingCertReply)
    MergeFrom(*source);
  }
}

void CMsgClientNetworkingCertReply::MergeFrom(const CMsgClientNetworkingCertReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientNetworkingCertReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      cert_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cert_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      ca_signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ca_signature_);
    }
    if (cached_has_bits & 0x00000004u) {
      ca_key_id_ = from.ca_key_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientNetworkingCertReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientNetworkingCertReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientNetworkingCertReply::CopyFrom(const CMsgClientNetworkingCertReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientNetworkingCertReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientNetworkingCertReply::IsInitialized() const {
  return true;
}

void CMsgClientNetworkingCertReply::Swap(CMsgClientNetworkingCertReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientNetworkingCertReply::InternalSwap(CMsgClientNetworkingCertReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  cert_.Swap(&other->cert_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ca_signature_.Swap(&other->ca_signature_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ca_key_id_, other->ca_key_id_);
}

::google::protobuf::Metadata CMsgClientNetworkingCertReply::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientGetAppOwnershipTicket::InitAsDefaultInstance() {
}
class CMsgClientGetAppOwnershipTicket::HasBitSetters {
 public:
  static void set_has_app_id(CMsgClientGetAppOwnershipTicket* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientGetAppOwnershipTicket::kAppIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientGetAppOwnershipTicket::CMsgClientGetAppOwnershipTicket()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientGetAppOwnershipTicket)
}
CMsgClientGetAppOwnershipTicket::CMsgClientGetAppOwnershipTicket(const CMsgClientGetAppOwnershipTicket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  app_id_ = from.app_id_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientGetAppOwnershipTicket)
}

void CMsgClientGetAppOwnershipTicket::SharedCtor() {
  app_id_ = 0u;
}

CMsgClientGetAppOwnershipTicket::~CMsgClientGetAppOwnershipTicket() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientGetAppOwnershipTicket)
  SharedDtor();
}

void CMsgClientGetAppOwnershipTicket::SharedDtor() {
}

void CMsgClientGetAppOwnershipTicket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientGetAppOwnershipTicket& CMsgClientGetAppOwnershipTicket::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientGetAppOwnershipTicket_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientGetAppOwnershipTicket::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientGetAppOwnershipTicket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  app_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientGetAppOwnershipTicket::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientGetAppOwnershipTicket*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientGetAppOwnershipTicket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientGetAppOwnershipTicket)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientGetAppOwnershipTicket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientGetAppOwnershipTicket)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientGetAppOwnershipTicket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientGetAppOwnershipTicket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientGetAppOwnershipTicket)
}

::google::protobuf::uint8* CMsgClientGetAppOwnershipTicket::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientGetAppOwnershipTicket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientGetAppOwnershipTicket)
  return target;
}

size_t CMsgClientGetAppOwnershipTicket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientGetAppOwnershipTicket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 app_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->app_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientGetAppOwnershipTicket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientGetAppOwnershipTicket)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientGetAppOwnershipTicket* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientGetAppOwnershipTicket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientGetAppOwnershipTicket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientGetAppOwnershipTicket)
    MergeFrom(*source);
  }
}

void CMsgClientGetAppOwnershipTicket::MergeFrom(const CMsgClientGetAppOwnershipTicket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientGetAppOwnershipTicket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_app_id()) {
    set_app_id(from.app_id());
  }
}

void CMsgClientGetAppOwnershipTicket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientGetAppOwnershipTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientGetAppOwnershipTicket::CopyFrom(const CMsgClientGetAppOwnershipTicket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientGetAppOwnershipTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetAppOwnershipTicket::IsInitialized() const {
  return true;
}

void CMsgClientGetAppOwnershipTicket::Swap(CMsgClientGetAppOwnershipTicket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientGetAppOwnershipTicket::InternalSwap(CMsgClientGetAppOwnershipTicket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(app_id_, other->app_id_);
}

::google::protobuf::Metadata CMsgClientGetAppOwnershipTicket::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientGetAppOwnershipTicketResponse::InitAsDefaultInstance() {
}
class CMsgClientGetAppOwnershipTicketResponse::HasBitSetters {
 public:
  static void set_has_eresult(CMsgClientGetAppOwnershipTicketResponse* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_app_id(CMsgClientGetAppOwnershipTicketResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_ticket(CMsgClientGetAppOwnershipTicketResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientGetAppOwnershipTicketResponse::kEresultFieldNumber;
const int CMsgClientGetAppOwnershipTicketResponse::kAppIdFieldNumber;
const int CMsgClientGetAppOwnershipTicketResponse::kTicketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientGetAppOwnershipTicketResponse::CMsgClientGetAppOwnershipTicketResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientGetAppOwnershipTicketResponse)
}
CMsgClientGetAppOwnershipTicketResponse::CMsgClientGetAppOwnershipTicketResponse(const CMsgClientGetAppOwnershipTicketResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ticket()) {
    ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_);
  }
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientGetAppOwnershipTicketResponse)
}

void CMsgClientGetAppOwnershipTicketResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientGetAppOwnershipTicketResponse_steammessages_5fclientserver_2eproto.base);
  ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_id_ = 0u;
  eresult_ = 2u;
}

CMsgClientGetAppOwnershipTicketResponse::~CMsgClientGetAppOwnershipTicketResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientGetAppOwnershipTicketResponse)
  SharedDtor();
}

void CMsgClientGetAppOwnershipTicketResponse::SharedDtor() {
  ticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientGetAppOwnershipTicketResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientGetAppOwnershipTicketResponse& CMsgClientGetAppOwnershipTicketResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientGetAppOwnershipTicketResponse_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientGetAppOwnershipTicketResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientGetAppOwnershipTicketResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ticket_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    app_id_ = 0u;
    eresult_ = 2u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientGetAppOwnershipTicketResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientGetAppOwnershipTicketResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_eresult(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 app_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes ticket = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_ticket();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientGetAppOwnershipTicketResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientGetAppOwnershipTicketResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_eresult(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 app_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes ticket = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ticket()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientGetAppOwnershipTicketResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientGetAppOwnershipTicketResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientGetAppOwnershipTicketResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientGetAppOwnershipTicketResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eresult(), output);
  }

  // optional uint32 app_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->app_id(), output);
  }

  // optional bytes ticket = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->ticket(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientGetAppOwnershipTicketResponse)
}

::google::protobuf::uint8* CMsgClientGetAppOwnershipTicketResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientGetAppOwnershipTicketResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eresult(), target);
  }

  // optional uint32 app_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->app_id(), target);
  }

  // optional bytes ticket = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->ticket(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientGetAppOwnershipTicketResponse)
  return target;
}

size_t CMsgClientGetAppOwnershipTicketResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientGetAppOwnershipTicketResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes ticket = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ticket());
    }

    // optional uint32 app_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional uint32 eresult = 1 [default = 2];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientGetAppOwnershipTicketResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientGetAppOwnershipTicketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientGetAppOwnershipTicketResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientGetAppOwnershipTicketResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientGetAppOwnershipTicketResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientGetAppOwnershipTicketResponse)
    MergeFrom(*source);
  }
}

void CMsgClientGetAppOwnershipTicketResponse::MergeFrom(const CMsgClientGetAppOwnershipTicketResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientGetAppOwnershipTicketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_);
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientGetAppOwnershipTicketResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientGetAppOwnershipTicketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientGetAppOwnershipTicketResponse::CopyFrom(const CMsgClientGetAppOwnershipTicketResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientGetAppOwnershipTicketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetAppOwnershipTicketResponse::IsInitialized() const {
  return true;
}

void CMsgClientGetAppOwnershipTicketResponse::Swap(CMsgClientGetAppOwnershipTicketResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientGetAppOwnershipTicketResponse::InternalSwap(CMsgClientGetAppOwnershipTicketResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ticket_.Swap(&other->ticket_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(app_id_, other->app_id_);
  swap(eresult_, other->eresult_);
}

::google::protobuf::Metadata CMsgClientGetAppOwnershipTicketResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientSessionToken::InitAsDefaultInstance() {
}
class CMsgClientSessionToken::HasBitSetters {
 public:
  static void set_has_token(CMsgClientSessionToken* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientSessionToken::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientSessionToken::CMsgClientSessionToken()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientSessionToken)
}
CMsgClientSessionToken::CMsgClientSessionToken(const CMsgClientSessionToken& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_ = from.token_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientSessionToken)
}

void CMsgClientSessionToken::SharedCtor() {
  token_ = PROTOBUF_ULONGLONG(0);
}

CMsgClientSessionToken::~CMsgClientSessionToken() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientSessionToken)
  SharedDtor();
}

void CMsgClientSessionToken::SharedDtor() {
}

void CMsgClientSessionToken::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientSessionToken& CMsgClientSessionToken::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientSessionToken_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientSessionToken::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientSessionToken)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientSessionToken::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientSessionToken*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 token = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_token(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientSessionToken::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientSessionToken)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_token(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientSessionToken)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientSessionToken)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientSessionToken::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientSessionToken)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 token = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientSessionToken)
}

::google::protobuf::uint8* CMsgClientSessionToken::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientSessionToken)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 token = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientSessionToken)
  return target;
}

size_t CMsgClientSessionToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientSessionToken)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 token = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientSessionToken::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientSessionToken)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientSessionToken* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientSessionToken>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientSessionToken)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientSessionToken)
    MergeFrom(*source);
  }
}

void CMsgClientSessionToken::MergeFrom(const CMsgClientSessionToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientSessionToken)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_token()) {
    set_token(from.token());
  }
}

void CMsgClientSessionToken::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientSessionToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientSessionToken::CopyFrom(const CMsgClientSessionToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientSessionToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientSessionToken::IsInitialized() const {
  return true;
}

void CMsgClientSessionToken::Swap(CMsgClientSessionToken* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientSessionToken::InternalSwap(CMsgClientSessionToken* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(token_, other->token_);
}

::google::protobuf::Metadata CMsgClientSessionToken::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientGameConnectTokens::InitAsDefaultInstance() {
}
class CMsgClientGameConnectTokens::HasBitSetters {
 public:
  static void set_has_max_tokens_to_keep(CMsgClientGameConnectTokens* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientGameConnectTokens::kMaxTokensToKeepFieldNumber;
const int CMsgClientGameConnectTokens::kTokensFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientGameConnectTokens::CMsgClientGameConnectTokens()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientGameConnectTokens)
}
CMsgClientGameConnectTokens::CMsgClientGameConnectTokens(const CMsgClientGameConnectTokens& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      tokens_(from.tokens_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  max_tokens_to_keep_ = from.max_tokens_to_keep_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientGameConnectTokens)
}

void CMsgClientGameConnectTokens::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientGameConnectTokens_steammessages_5fclientserver_2eproto.base);
  max_tokens_to_keep_ = 10u;
}

CMsgClientGameConnectTokens::~CMsgClientGameConnectTokens() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientGameConnectTokens)
  SharedDtor();
}

void CMsgClientGameConnectTokens::SharedDtor() {
}

void CMsgClientGameConnectTokens::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientGameConnectTokens& CMsgClientGameConnectTokens::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientGameConnectTokens_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientGameConnectTokens::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientGameConnectTokens)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tokens_.Clear();
  max_tokens_to_keep_ = 10u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientGameConnectTokens::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientGameConnectTokens*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 max_tokens_to_keep = 1 [default = 10];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_max_tokens_to_keep(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated bytes tokens = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          object = msg->add_tokens();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParser;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientGameConnectTokens::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientGameConnectTokens)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 max_tokens_to_keep = 1 [default = 10];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_max_tokens_to_keep(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_tokens_to_keep_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes tokens = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_tokens()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientGameConnectTokens)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientGameConnectTokens)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientGameConnectTokens::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientGameConnectTokens)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 max_tokens_to_keep = 1 [default = 10];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->max_tokens_to_keep(), output);
  }

  // repeated bytes tokens = 2;
  for (int i = 0, n = this->tokens_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->tokens(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientGameConnectTokens)
}

::google::protobuf::uint8* CMsgClientGameConnectTokens::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientGameConnectTokens)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 max_tokens_to_keep = 1 [default = 10];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->max_tokens_to_keep(), target);
  }

  // repeated bytes tokens = 2;
  for (int i = 0, n = this->tokens_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->tokens(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientGameConnectTokens)
  return target;
}

size_t CMsgClientGameConnectTokens::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientGameConnectTokens)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes tokens = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->tokens_size());
  for (int i = 0, n = this->tokens_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->tokens(i));
  }

  // optional uint32 max_tokens_to_keep = 1 [default = 10];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_tokens_to_keep());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientGameConnectTokens::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientGameConnectTokens)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientGameConnectTokens* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientGameConnectTokens>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientGameConnectTokens)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientGameConnectTokens)
    MergeFrom(*source);
  }
}

void CMsgClientGameConnectTokens::MergeFrom(const CMsgClientGameConnectTokens& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientGameConnectTokens)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tokens_.MergeFrom(from.tokens_);
  if (from.has_max_tokens_to_keep()) {
    set_max_tokens_to_keep(from.max_tokens_to_keep());
  }
}

void CMsgClientGameConnectTokens::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientGameConnectTokens)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientGameConnectTokens::CopyFrom(const CMsgClientGameConnectTokens& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientGameConnectTokens)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGameConnectTokens::IsInitialized() const {
  return true;
}

void CMsgClientGameConnectTokens::Swap(CMsgClientGameConnectTokens* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientGameConnectTokens::InternalSwap(CMsgClientGameConnectTokens* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tokens_.InternalSwap(CastToBase(&other->tokens_));
  swap(max_tokens_to_keep_, other->max_tokens_to_keep_);
}

::google::protobuf::Metadata CMsgClientGameConnectTokens::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGSServerType::InitAsDefaultInstance() {
}
class CMsgGSServerType::HasBitSetters {
 public:
  static void set_has_app_id_served(CMsgGSServerType* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_flags(CMsgGSServerType* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_game_ip_address(CMsgGSServerType* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_game_port(CMsgGSServerType* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_game_dir(CMsgGSServerType* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_game_version(CMsgGSServerType* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_game_query_port(CMsgGSServerType* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGSServerType::kAppIdServedFieldNumber;
const int CMsgGSServerType::kFlagsFieldNumber;
const int CMsgGSServerType::kGameIpAddressFieldNumber;
const int CMsgGSServerType::kGamePortFieldNumber;
const int CMsgGSServerType::kGameDirFieldNumber;
const int CMsgGSServerType::kGameVersionFieldNumber;
const int CMsgGSServerType::kGameQueryPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGSServerType::CMsgGSServerType()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgGSServerType)
}
CMsgGSServerType::CMsgGSServerType(const CMsgGSServerType& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  game_dir_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_game_dir()) {
    game_dir_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_dir_);
  }
  game_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_game_version()) {
    game_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_version_);
  }
  ::memcpy(&app_id_served_, &from.app_id_served_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_query_port_) -
    reinterpret_cast<char*>(&app_id_served_)) + sizeof(game_query_port_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgGSServerType)
}

void CMsgGSServerType::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgGSServerType_steammessages_5fclientserver_2eproto.base);
  game_dir_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&app_id_served_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_query_port_) -
      reinterpret_cast<char*>(&app_id_served_)) + sizeof(game_query_port_));
}

CMsgGSServerType::~CMsgGSServerType() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgGSServerType)
  SharedDtor();
}

void CMsgGSServerType::SharedDtor() {
  game_dir_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGSServerType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGSServerType& CMsgGSServerType::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGSServerType_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgGSServerType::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgGSServerType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      game_dir_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      game_version_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&app_id_served_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&game_query_port_) -
        reinterpret_cast<char*>(&app_id_served_)) + sizeof(game_query_port_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGSServerType::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGSServerType*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id_served = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_app_id_served(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 flags = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_flags(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 game_ip_address = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_game_ip_address(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 game_port = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_game_port(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string game_dir = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgGSServerType.game_dir");
        object = msg->mutable_game_dir();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string game_version = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgGSServerType.game_version");
        object = msg->mutable_game_version();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 game_query_port = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_game_query_port(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGSServerType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgGSServerType)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id_served = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_app_id_served(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_served_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 flags = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_flags(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 game_ip_address = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_game_ip_address(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_ip_address_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 game_port = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_game_port(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string game_dir = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_dir().data(), static_cast<int>(this->game_dir().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgGSServerType.game_dir");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string game_version = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_version().data(), static_cast<int>(this->game_version().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgGSServerType.game_version");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 game_query_port = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_game_query_port(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_query_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgGSServerType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgGSServerType)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGSServerType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgGSServerType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id_served = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id_served(), output);
  }

  // optional uint32 flags = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flags(), output);
  }

  // optional uint32 game_ip_address = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->game_ip_address(), output);
  }

  // optional uint32 game_port = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->game_port(), output);
  }

  // optional string game_dir = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_dir().data(), static_cast<int>(this->game_dir().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgGSServerType.game_dir");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->game_dir(), output);
  }

  // optional string game_version = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_version().data(), static_cast<int>(this->game_version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgGSServerType.game_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->game_version(), output);
  }

  // optional uint32 game_query_port = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->game_query_port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgGSServerType)
}

::google::protobuf::uint8* CMsgGSServerType::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgGSServerType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id_served = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id_served(), target);
  }

  // optional uint32 flags = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->flags(), target);
  }

  // optional uint32 game_ip_address = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->game_ip_address(), target);
  }

  // optional uint32 game_port = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->game_port(), target);
  }

  // optional string game_dir = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_dir().data(), static_cast<int>(this->game_dir().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgGSServerType.game_dir");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->game_dir(), target);
  }

  // optional string game_version = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_version().data(), static_cast<int>(this->game_version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgGSServerType.game_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->game_version(), target);
  }

  // optional uint32 game_query_port = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->game_query_port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgGSServerType)
  return target;
}

size_t CMsgGSServerType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgGSServerType)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string game_dir = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_dir());
    }

    // optional string game_version = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_version());
    }

    // optional uint32 app_id_served = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id_served());
    }

    // optional uint32 flags = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional uint32 game_ip_address = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_ip_address());
    }

    // optional uint32 game_port = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_port());
    }

    // optional uint32 game_query_port = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_query_port());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGSServerType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgGSServerType)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGSServerType* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGSServerType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgGSServerType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgGSServerType)
    MergeFrom(*source);
  }
}

void CMsgGSServerType::MergeFrom(const CMsgGSServerType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgGSServerType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      game_dir_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_dir_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      game_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_version_);
    }
    if (cached_has_bits & 0x00000004u) {
      app_id_served_ = from.app_id_served_;
    }
    if (cached_has_bits & 0x00000008u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000010u) {
      game_ip_address_ = from.game_ip_address_;
    }
    if (cached_has_bits & 0x00000020u) {
      game_port_ = from.game_port_;
    }
    if (cached_has_bits & 0x00000040u) {
      game_query_port_ = from.game_query_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGSServerType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgGSServerType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGSServerType::CopyFrom(const CMsgGSServerType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgGSServerType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGSServerType::IsInitialized() const {
  return true;
}

void CMsgGSServerType::Swap(CMsgGSServerType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGSServerType::InternalSwap(CMsgGSServerType* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  game_dir_.Swap(&other->game_dir_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  game_version_.Swap(&other->game_version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(app_id_served_, other->app_id_served_);
  swap(flags_, other->flags_);
  swap(game_ip_address_, other->game_ip_address_);
  swap(game_port_, other->game_port_);
  swap(game_query_port_, other->game_query_port_);
}

::google::protobuf::Metadata CMsgGSServerType::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGSStatusReply::InitAsDefaultInstance() {
}
class CMsgGSStatusReply::HasBitSetters {
 public:
  static void set_has_is_secure(CMsgGSStatusReply* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGSStatusReply::kIsSecureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGSStatusReply::CMsgGSStatusReply()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgGSStatusReply)
}
CMsgGSStatusReply::CMsgGSStatusReply(const CMsgGSStatusReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  is_secure_ = from.is_secure_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgGSStatusReply)
}

void CMsgGSStatusReply::SharedCtor() {
  is_secure_ = false;
}

CMsgGSStatusReply::~CMsgGSStatusReply() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgGSStatusReply)
  SharedDtor();
}

void CMsgGSStatusReply::SharedDtor() {
}

void CMsgGSStatusReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGSStatusReply& CMsgGSStatusReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGSStatusReply_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgGSStatusReply::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgGSStatusReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_secure_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGSStatusReply::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGSStatusReply*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool is_secure = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_is_secure(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGSStatusReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgGSStatusReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_secure = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_is_secure(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_secure_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgGSStatusReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgGSStatusReply)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGSStatusReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgGSStatusReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_secure = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_secure(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgGSStatusReply)
}

::google::protobuf::uint8* CMsgGSStatusReply::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgGSStatusReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_secure = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_secure(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgGSStatusReply)
  return target;
}

size_t CMsgGSStatusReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgGSStatusReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool is_secure = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGSStatusReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgGSStatusReply)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGSStatusReply* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGSStatusReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgGSStatusReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgGSStatusReply)
    MergeFrom(*source);
  }
}

void CMsgGSStatusReply::MergeFrom(const CMsgGSStatusReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgGSStatusReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_is_secure()) {
    set_is_secure(from.is_secure());
  }
}

void CMsgGSStatusReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgGSStatusReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGSStatusReply::CopyFrom(const CMsgGSStatusReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgGSStatusReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGSStatusReply::IsInitialized() const {
  return true;
}

void CMsgGSStatusReply::Swap(CMsgGSStatusReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGSStatusReply::InternalSwap(CMsgGSStatusReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(is_secure_, other->is_secure_);
}

::google::protobuf::Metadata CMsgGSStatusReply::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGSPlayerList_Player::InitAsDefaultInstance() {
}
class CMsgGSPlayerList_Player::HasBitSetters {
 public:
  static void set_has_steam_id(CMsgGSPlayerList_Player* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_public_ip(CMsgGSPlayerList_Player* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_token(CMsgGSPlayerList_Player* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGSPlayerList_Player::kSteamIdFieldNumber;
const int CMsgGSPlayerList_Player::kPublicIpFieldNumber;
const int CMsgGSPlayerList_Player::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGSPlayerList_Player::CMsgGSPlayerList_Player()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgGSPlayerList.Player)
}
CMsgGSPlayerList_Player::CMsgGSPlayerList_Player(const CMsgGSPlayerList_Player& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_token()) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&public_ip_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(public_ip_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgGSPlayerList.Player)
}

void CMsgGSPlayerList_Player::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgGSPlayerList_Player_steammessages_5fclientserver_2eproto.base);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steam_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&public_ip_) -
      reinterpret_cast<char*>(&steam_id_)) + sizeof(public_ip_));
}

CMsgGSPlayerList_Player::~CMsgGSPlayerList_Player() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgGSPlayerList.Player)
  SharedDtor();
}

void CMsgGSPlayerList_Player::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGSPlayerList_Player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGSPlayerList_Player& CMsgGSPlayerList_Player::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGSPlayerList_Player_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgGSPlayerList_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgGSPlayerList.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    token_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&public_ip_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(public_ip_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGSPlayerList_Player::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGSPlayerList_Player*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 steam_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_steam_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 public_ip = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_public_ip(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes token = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGSPlayerList_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgGSPlayerList.Player)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 public_ip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_public_ip(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &public_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes token = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgGSPlayerList.Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgGSPlayerList.Player)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGSPlayerList_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgGSPlayerList.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 steam_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->steam_id(), output);
  }

  // optional uint32 public_ip = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->public_ip(), output);
  }

  // optional bytes token = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgGSPlayerList.Player)
}

::google::protobuf::uint8* CMsgGSPlayerList_Player::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgGSPlayerList.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 steam_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->steam_id(), target);
  }

  // optional uint32 public_ip = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->public_ip(), target);
  }

  // optional bytes token = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgGSPlayerList.Player)
  return target;
}

size_t CMsgGSPlayerList_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgGSPlayerList.Player)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes token = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->token());
    }

    // optional uint64 steam_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->steam_id());
    }

    // optional uint32 public_ip = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->public_ip());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGSPlayerList_Player::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgGSPlayerList.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGSPlayerList_Player* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGSPlayerList_Player>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgGSPlayerList.Player)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgGSPlayerList.Player)
    MergeFrom(*source);
  }
}

void CMsgGSPlayerList_Player::MergeFrom(const CMsgGSPlayerList_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgGSPlayerList.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      public_ip_ = from.public_ip_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGSPlayerList_Player::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgGSPlayerList.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGSPlayerList_Player::CopyFrom(const CMsgGSPlayerList_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgGSPlayerList.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGSPlayerList_Player::IsInitialized() const {
  return true;
}

void CMsgGSPlayerList_Player::Swap(CMsgGSPlayerList_Player* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGSPlayerList_Player::InternalSwap(CMsgGSPlayerList_Player* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  token_.Swap(&other->token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(steam_id_, other->steam_id_);
  swap(public_ip_, other->public_ip_);
}

::google::protobuf::Metadata CMsgGSPlayerList_Player::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGSPlayerList::InitAsDefaultInstance() {
}
class CMsgGSPlayerList::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGSPlayerList::kPlayersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGSPlayerList::CMsgGSPlayerList()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgGSPlayerList)
}
CMsgGSPlayerList::CMsgGSPlayerList(const CMsgGSPlayerList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      players_(from.players_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgGSPlayerList)
}

void CMsgGSPlayerList::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgGSPlayerList_steammessages_5fclientserver_2eproto.base);
}

CMsgGSPlayerList::~CMsgGSPlayerList() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgGSPlayerList)
  SharedDtor();
}

void CMsgGSPlayerList::SharedDtor() {
}

void CMsgGSPlayerList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGSPlayerList& CMsgGSPlayerList::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGSPlayerList_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgGSPlayerList::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgGSPlayerList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGSPlayerList::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGSPlayerList*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.steam.CMsgGSPlayerList.Player players = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgGSPlayerList_Player::_InternalParse;
          object = msg->add_players();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGSPlayerList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgGSPlayerList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CMsgGSPlayerList.Player players = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgGSPlayerList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgGSPlayerList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGSPlayerList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgGSPlayerList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgGSPlayerList.Player players = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->players(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgGSPlayerList)
}

::google::protobuf::uint8* CMsgGSPlayerList::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgGSPlayerList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgGSPlayerList.Player players = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->players(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgGSPlayerList)
  return target;
}

size_t CMsgGSPlayerList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgGSPlayerList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgGSPlayerList.Player players = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->players_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->players(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGSPlayerList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgGSPlayerList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGSPlayerList* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGSPlayerList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgGSPlayerList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgGSPlayerList)
    MergeFrom(*source);
  }
}

void CMsgGSPlayerList::MergeFrom(const CMsgGSPlayerList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgGSPlayerList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
}

void CMsgGSPlayerList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgGSPlayerList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGSPlayerList::CopyFrom(const CMsgGSPlayerList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgGSPlayerList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGSPlayerList::IsInitialized() const {
  return true;
}

void CMsgGSPlayerList::Swap(CMsgGSPlayerList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGSPlayerList::InternalSwap(CMsgGSPlayerList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&players_)->InternalSwap(CastToBase(&other->players_));
}

::google::protobuf::Metadata CMsgGSPlayerList::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGSUserPlaying::InitAsDefaultInstance() {
}
class CMsgGSUserPlaying::HasBitSetters {
 public:
  static void set_has_steam_id(CMsgGSUserPlaying* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_public_ip(CMsgGSUserPlaying* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_token(CMsgGSUserPlaying* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGSUserPlaying::kSteamIdFieldNumber;
const int CMsgGSUserPlaying::kPublicIpFieldNumber;
const int CMsgGSUserPlaying::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGSUserPlaying::CMsgGSUserPlaying()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgGSUserPlaying)
}
CMsgGSUserPlaying::CMsgGSUserPlaying(const CMsgGSUserPlaying& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_token()) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&public_ip_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(public_ip_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgGSUserPlaying)
}

void CMsgGSUserPlaying::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgGSUserPlaying_steammessages_5fclientserver_2eproto.base);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steam_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&public_ip_) -
      reinterpret_cast<char*>(&steam_id_)) + sizeof(public_ip_));
}

CMsgGSUserPlaying::~CMsgGSUserPlaying() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgGSUserPlaying)
  SharedDtor();
}

void CMsgGSUserPlaying::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGSUserPlaying::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGSUserPlaying& CMsgGSUserPlaying::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGSUserPlaying_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgGSUserPlaying::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgGSUserPlaying)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    token_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&public_ip_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(public_ip_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGSUserPlaying::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGSUserPlaying*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steam_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 public_ip = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_public_ip(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes token = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGSUserPlaying::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgGSUserPlaying)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 public_ip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_public_ip(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &public_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes token = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgGSUserPlaying)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgGSUserPlaying)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGSUserPlaying::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgGSUserPlaying)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional uint32 public_ip = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->public_ip(), output);
  }

  // optional bytes token = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgGSUserPlaying)
}

::google::protobuf::uint8* CMsgGSUserPlaying::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgGSUserPlaying)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional uint32 public_ip = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->public_ip(), target);
  }

  // optional bytes token = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgGSUserPlaying)
  return target;
}

size_t CMsgGSUserPlaying::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgGSUserPlaying)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes token = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->token());
    }

    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 public_ip = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->public_ip());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGSUserPlaying::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgGSUserPlaying)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGSUserPlaying* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGSUserPlaying>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgGSUserPlaying)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgGSUserPlaying)
    MergeFrom(*source);
  }
}

void CMsgGSUserPlaying::MergeFrom(const CMsgGSUserPlaying& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgGSUserPlaying)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      public_ip_ = from.public_ip_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGSUserPlaying::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgGSUserPlaying)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGSUserPlaying::CopyFrom(const CMsgGSUserPlaying& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgGSUserPlaying)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGSUserPlaying::IsInitialized() const {
  return true;
}

void CMsgGSUserPlaying::Swap(CMsgGSUserPlaying* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGSUserPlaying::InternalSwap(CMsgGSUserPlaying* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  token_.Swap(&other->token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(steam_id_, other->steam_id_);
  swap(public_ip_, other->public_ip_);
}

::google::protobuf::Metadata CMsgGSUserPlaying::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGSDisconnectNotice::InitAsDefaultInstance() {
}
class CMsgGSDisconnectNotice::HasBitSetters {
 public:
  static void set_has_steam_id(CMsgGSDisconnectNotice* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGSDisconnectNotice::kSteamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGSDisconnectNotice::CMsgGSDisconnectNotice()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgGSDisconnectNotice)
}
CMsgGSDisconnectNotice::CMsgGSDisconnectNotice(const CMsgGSDisconnectNotice& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  steam_id_ = from.steam_id_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgGSDisconnectNotice)
}

void CMsgGSDisconnectNotice::SharedCtor() {
  steam_id_ = PROTOBUF_ULONGLONG(0);
}

CMsgGSDisconnectNotice::~CMsgGSDisconnectNotice() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgGSDisconnectNotice)
  SharedDtor();
}

void CMsgGSDisconnectNotice::SharedDtor() {
}

void CMsgGSDisconnectNotice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGSDisconnectNotice& CMsgGSDisconnectNotice::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGSDisconnectNotice_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgGSDisconnectNotice::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgGSDisconnectNotice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steam_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGSDisconnectNotice::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGSDisconnectNotice*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steam_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGSDisconnectNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgGSDisconnectNotice)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgGSDisconnectNotice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgGSDisconnectNotice)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGSDisconnectNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgGSDisconnectNotice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgGSDisconnectNotice)
}

::google::protobuf::uint8* CMsgGSDisconnectNotice::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgGSDisconnectNotice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgGSDisconnectNotice)
  return target;
}

size_t CMsgGSDisconnectNotice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgGSDisconnectNotice)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 steam_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGSDisconnectNotice::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgGSDisconnectNotice)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGSDisconnectNotice* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGSDisconnectNotice>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgGSDisconnectNotice)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgGSDisconnectNotice)
    MergeFrom(*source);
  }
}

void CMsgGSDisconnectNotice::MergeFrom(const CMsgGSDisconnectNotice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgGSDisconnectNotice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_steam_id()) {
    set_steam_id(from.steam_id());
  }
}

void CMsgGSDisconnectNotice::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgGSDisconnectNotice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGSDisconnectNotice::CopyFrom(const CMsgGSDisconnectNotice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgGSDisconnectNotice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGSDisconnectNotice::IsInitialized() const {
  return true;
}

void CMsgGSDisconnectNotice::Swap(CMsgGSDisconnectNotice* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGSDisconnectNotice::InternalSwap(CMsgGSDisconnectNotice* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steam_id_, other->steam_id_);
}

::google::protobuf::Metadata CMsgGSDisconnectNotice::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientGamesPlayed_GamePlayed::InitAsDefaultInstance() {
}
class CMsgClientGamesPlayed_GamePlayed::HasBitSetters {
 public:
  static void set_has_steam_id_gs(CMsgClientGamesPlayed_GamePlayed* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_game_id(CMsgClientGamesPlayed_GamePlayed* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_game_ip_address(CMsgClientGamesPlayed_GamePlayed* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_game_port(CMsgClientGamesPlayed_GamePlayed* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_is_secure(CMsgClientGamesPlayed_GamePlayed* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_token(CMsgClientGamesPlayed_GamePlayed* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_game_extra_info(CMsgClientGamesPlayed_GamePlayed* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_game_data_blob(CMsgClientGamesPlayed_GamePlayed* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_process_id(CMsgClientGamesPlayed_GamePlayed* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_streaming_provider_id(CMsgClientGamesPlayed_GamePlayed* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_game_flags(CMsgClientGamesPlayed_GamePlayed* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static void set_has_owner_id(CMsgClientGamesPlayed_GamePlayed* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
  static void set_has_vr_hmd_vendor(CMsgClientGamesPlayed_GamePlayed* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_vr_hmd_model(CMsgClientGamesPlayed_GamePlayed* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_launch_option_type(CMsgClientGamesPlayed_GamePlayed* msg) {
    msg->_has_bits_[0] |= 0x00008000u;
  }
  static void set_has_primary_controller_type(CMsgClientGamesPlayed_GamePlayed* msg) {
    msg->_has_bits_[0] |= 0x00100000u;
  }
  static void set_has_primary_steam_controller_serial(CMsgClientGamesPlayed_GamePlayed* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_total_steam_controller_count(CMsgClientGamesPlayed_GamePlayed* msg) {
    msg->_has_bits_[0] |= 0x00010000u;
  }
  static void set_has_total_non_steam_controller_count(CMsgClientGamesPlayed_GamePlayed* msg) {
    msg->_has_bits_[0] |= 0x00020000u;
  }
  static void set_has_controller_workshop_file_id(CMsgClientGamesPlayed_GamePlayed* msg) {
    msg->_has_bits_[0] |= 0x00040000u;
  }
  static void set_has_launch_source(CMsgClientGamesPlayed_GamePlayed* msg) {
    msg->_has_bits_[0] |= 0x00080000u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientGamesPlayed_GamePlayed::kSteamIdGsFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kGameIdFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kGameIpAddressFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kGamePortFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kIsSecureFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kTokenFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kGameExtraInfoFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kGameDataBlobFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kProcessIdFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kStreamingProviderIdFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kGameFlagsFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kOwnerIdFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kVrHmdVendorFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kVrHmdModelFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kLaunchOptionTypeFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kPrimaryControllerTypeFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kPrimarySteamControllerSerialFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kTotalSteamControllerCountFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kTotalNonSteamControllerCountFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kControllerWorkshopFileIdFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kLaunchSourceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientGamesPlayed_GamePlayed::CMsgClientGamesPlayed_GamePlayed()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientGamesPlayed.GamePlayed)
}
CMsgClientGamesPlayed_GamePlayed::CMsgClientGamesPlayed_GamePlayed(const CMsgClientGamesPlayed_GamePlayed& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_token()) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  game_extra_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_game_extra_info()) {
    game_extra_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_extra_info_);
  }
  game_data_blob_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_game_data_blob()) {
    game_data_blob_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_data_blob_);
  }
  vr_hmd_vendor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_vr_hmd_vendor()) {
    vr_hmd_vendor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vr_hmd_vendor_);
  }
  vr_hmd_model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_vr_hmd_model()) {
    vr_hmd_model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vr_hmd_model_);
  }
  primary_steam_controller_serial_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_primary_steam_controller_serial()) {
    primary_steam_controller_serial_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.primary_steam_controller_serial_);
  }
  ::memcpy(&steam_id_gs_, &from.steam_id_gs_,
    static_cast<size_t>(reinterpret_cast<char*>(&primary_controller_type_) -
    reinterpret_cast<char*>(&steam_id_gs_)) + sizeof(primary_controller_type_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientGamesPlayed.GamePlayed)
}

void CMsgClientGamesPlayed_GamePlayed::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientGamesPlayed_GamePlayed_steammessages_5fclientserver_2eproto.base);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_extra_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_data_blob_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vr_hmd_vendor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vr_hmd_model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  primary_steam_controller_serial_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steam_id_gs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&launch_source_) -
      reinterpret_cast<char*>(&steam_id_gs_)) + sizeof(launch_source_));
  primary_controller_type_ = -1;
}

CMsgClientGamesPlayed_GamePlayed::~CMsgClientGamesPlayed_GamePlayed() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientGamesPlayed.GamePlayed)
  SharedDtor();
}

void CMsgClientGamesPlayed_GamePlayed::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_extra_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_data_blob_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vr_hmd_vendor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vr_hmd_model_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  primary_steam_controller_serial_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientGamesPlayed_GamePlayed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientGamesPlayed_GamePlayed& CMsgClientGamesPlayed_GamePlayed::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientGamesPlayed_GamePlayed_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientGamesPlayed_GamePlayed::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientGamesPlayed.GamePlayed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      token_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      game_extra_info_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      game_data_blob_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      vr_hmd_vendor_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      vr_hmd_model_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      primary_steam_controller_serial_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&steam_id_gs_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&game_id_) -
        reinterpret_cast<char*>(&steam_id_gs_)) + sizeof(game_id_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&game_ip_address_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&launch_option_type_) -
        reinterpret_cast<char*>(&game_ip_address_)) + sizeof(launch_option_type_));
  }
  if (cached_has_bits & 0x001f0000u) {
    ::memset(&total_steam_controller_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&launch_source_) -
        reinterpret_cast<char*>(&total_steam_controller_count_)) + sizeof(launch_source_));
    primary_controller_type_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientGamesPlayed_GamePlayed::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientGamesPlayed_GamePlayed*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 steam_id_gs = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_steam_id_gs(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 game_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_game_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 game_ip_address = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_game_ip_address(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 game_port = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_game_port(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool is_secure = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_is_secure(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes token = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string game_extra_info = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientGamesPlayed.GamePlayed.game_extra_info");
        object = msg->mutable_game_extra_info();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bytes game_data_blob = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_game_data_blob();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 process_id = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_process_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 streaming_provider_id = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_streaming_provider_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 game_flags = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_game_flags(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 owner_id = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_owner_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string vr_hmd_vendor = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 106) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientGamesPlayed.GamePlayed.vr_hmd_vendor");
        object = msg->mutable_vr_hmd_vendor();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string vr_hmd_model = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 114) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientGamesPlayed.GamePlayed.vr_hmd_model");
        object = msg->mutable_vr_hmd_model();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 launch_option_type = 15 [default = 0];
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_launch_option_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 primary_controller_type = 16 [default = -1];
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_primary_controller_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string primary_steam_controller_serial = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 138) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientGamesPlayed.GamePlayed.primary_steam_controller_serial");
        object = msg->mutable_primary_steam_controller_serial();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 total_steam_controller_count = 18 [default = 0];
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        msg->set_total_steam_controller_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 total_non_steam_controller_count = 19 [default = 0];
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        msg->set_total_non_steam_controller_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 controller_workshop_file_id = 20 [default = 0];
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 160) goto handle_unusual;
        msg->set_controller_workshop_file_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 launch_source = 21 [default = 0];
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 168) goto handle_unusual;
        msg->set_launch_source(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientGamesPlayed_GamePlayed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientGamesPlayed.GamePlayed)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 steam_id_gs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_steam_id_gs(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &steam_id_gs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 game_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_game_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 game_ip_address = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_game_ip_address(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_ip_address_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 game_port = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_game_port(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_secure = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_is_secure(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_secure_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes token = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string game_extra_info = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_extra_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_extra_info().data(), static_cast<int>(this->game_extra_info().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientGamesPlayed.GamePlayed.game_extra_info");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes game_data_blob = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_game_data_blob()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 process_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_process_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &process_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 streaming_provider_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_streaming_provider_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &streaming_provider_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 game_flags = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_game_flags(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 owner_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_owner_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string vr_hmd_vendor = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (106 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vr_hmd_vendor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vr_hmd_vendor().data(), static_cast<int>(this->vr_hmd_vendor().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientGamesPlayed.GamePlayed.vr_hmd_vendor");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string vr_hmd_model = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (114 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vr_hmd_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vr_hmd_model().data(), static_cast<int>(this->vr_hmd_model().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientGamesPlayed.GamePlayed.vr_hmd_model");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 launch_option_type = 15 [default = 0];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (120 & 0xFF)) {
          HasBitSetters::set_has_launch_option_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &launch_option_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 primary_controller_type = 16 [default = -1];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (128 & 0xFF)) {
          HasBitSetters::set_has_primary_controller_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &primary_controller_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string primary_steam_controller_serial = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (138 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_primary_steam_controller_serial()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->primary_steam_controller_serial().data(), static_cast<int>(this->primary_steam_controller_serial().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientGamesPlayed.GamePlayed.primary_steam_controller_serial");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 total_steam_controller_count = 18 [default = 0];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (144 & 0xFF)) {
          HasBitSetters::set_has_total_steam_controller_count(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_steam_controller_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 total_non_steam_controller_count = 19 [default = 0];
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (152 & 0xFF)) {
          HasBitSetters::set_has_total_non_steam_controller_count(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_non_steam_controller_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 controller_workshop_file_id = 20 [default = 0];
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (160 & 0xFF)) {
          HasBitSetters::set_has_controller_workshop_file_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &controller_workshop_file_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 launch_source = 21 [default = 0];
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (168 & 0xFF)) {
          HasBitSetters::set_has_launch_source(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &launch_source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientGamesPlayed.GamePlayed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientGamesPlayed.GamePlayed)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientGamesPlayed_GamePlayed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientGamesPlayed.GamePlayed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 steam_id_gs = 1;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->steam_id_gs(), output);
  }

  // optional fixed64 game_id = 2;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->game_id(), output);
  }

  // optional uint32 game_ip_address = 3;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->game_ip_address(), output);
  }

  // optional uint32 game_port = 4;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->game_port(), output);
  }

  // optional bool is_secure = 5;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_secure(), output);
  }

  // optional bytes token = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->token(), output);
  }

  // optional string game_extra_info = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_extra_info().data(), static_cast<int>(this->game_extra_info().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientGamesPlayed.GamePlayed.game_extra_info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->game_extra_info(), output);
  }

  // optional bytes game_data_blob = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->game_data_blob(), output);
  }

  // optional uint32 process_id = 9;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->process_id(), output);
  }

  // optional uint32 streaming_provider_id = 10;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->streaming_provider_id(), output);
  }

  // optional uint32 game_flags = 11;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->game_flags(), output);
  }

  // optional uint32 owner_id = 12;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->owner_id(), output);
  }

  // optional string vr_hmd_vendor = 13;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vr_hmd_vendor().data(), static_cast<int>(this->vr_hmd_vendor().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientGamesPlayed.GamePlayed.vr_hmd_vendor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->vr_hmd_vendor(), output);
  }

  // optional string vr_hmd_model = 14;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vr_hmd_model().data(), static_cast<int>(this->vr_hmd_model().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientGamesPlayed.GamePlayed.vr_hmd_model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->vr_hmd_model(), output);
  }

  // optional uint32 launch_option_type = 15 [default = 0];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->launch_option_type(), output);
  }

  // optional int32 primary_controller_type = 16 [default = -1];
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->primary_controller_type(), output);
  }

  // optional string primary_steam_controller_serial = 17;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->primary_steam_controller_serial().data(), static_cast<int>(this->primary_steam_controller_serial().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientGamesPlayed.GamePlayed.primary_steam_controller_serial");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->primary_steam_controller_serial(), output);
  }

  // optional uint32 total_steam_controller_count = 18 [default = 0];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->total_steam_controller_count(), output);
  }

  // optional uint32 total_non_steam_controller_count = 19 [default = 0];
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->total_non_steam_controller_count(), output);
  }

  // optional uint64 controller_workshop_file_id = 20 [default = 0];
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(20, this->controller_workshop_file_id(), output);
  }

  // optional uint32 launch_source = 21 [default = 0];
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->launch_source(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientGamesPlayed.GamePlayed)
}

::google::protobuf::uint8* CMsgClientGamesPlayed_GamePlayed::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientGamesPlayed.GamePlayed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 steam_id_gs = 1;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->steam_id_gs(), target);
  }

  // optional fixed64 game_id = 2;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->game_id(), target);
  }

  // optional uint32 game_ip_address = 3;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->game_ip_address(), target);
  }

  // optional uint32 game_port = 4;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->game_port(), target);
  }

  // optional bool is_secure = 5;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_secure(), target);
  }

  // optional bytes token = 6;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->token(), target);
  }

  // optional string game_extra_info = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_extra_info().data(), static_cast<int>(this->game_extra_info().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientGamesPlayed.GamePlayed.game_extra_info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->game_extra_info(), target);
  }

  // optional bytes game_data_blob = 8;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->game_data_blob(), target);
  }

  // optional uint32 process_id = 9;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->process_id(), target);
  }

  // optional uint32 streaming_provider_id = 10;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->streaming_provider_id(), target);
  }

  // optional uint32 game_flags = 11;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->game_flags(), target);
  }

  // optional uint32 owner_id = 12;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->owner_id(), target);
  }

  // optional string vr_hmd_vendor = 13;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vr_hmd_vendor().data(), static_cast<int>(this->vr_hmd_vendor().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientGamesPlayed.GamePlayed.vr_hmd_vendor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->vr_hmd_vendor(), target);
  }

  // optional string vr_hmd_model = 14;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vr_hmd_model().data(), static_cast<int>(this->vr_hmd_model().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientGamesPlayed.GamePlayed.vr_hmd_model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->vr_hmd_model(), target);
  }

  // optional uint32 launch_option_type = 15 [default = 0];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->launch_option_type(), target);
  }

  // optional int32 primary_controller_type = 16 [default = -1];
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->primary_controller_type(), target);
  }

  // optional string primary_steam_controller_serial = 17;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->primary_steam_controller_serial().data(), static_cast<int>(this->primary_steam_controller_serial().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientGamesPlayed.GamePlayed.primary_steam_controller_serial");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->primary_steam_controller_serial(), target);
  }

  // optional uint32 total_steam_controller_count = 18 [default = 0];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->total_steam_controller_count(), target);
  }

  // optional uint32 total_non_steam_controller_count = 19 [default = 0];
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->total_non_steam_controller_count(), target);
  }

  // optional uint64 controller_workshop_file_id = 20 [default = 0];
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(20, this->controller_workshop_file_id(), target);
  }

  // optional uint32 launch_source = 21 [default = 0];
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->launch_source(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientGamesPlayed.GamePlayed)
  return target;
}

size_t CMsgClientGamesPlayed_GamePlayed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientGamesPlayed.GamePlayed)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes token = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->token());
    }

    // optional string game_extra_info = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_extra_info());
    }

    // optional bytes game_data_blob = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->game_data_blob());
    }

    // optional string vr_hmd_vendor = 13;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vr_hmd_vendor());
    }

    // optional string vr_hmd_model = 14;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vr_hmd_model());
    }

    // optional string primary_steam_controller_serial = 17;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->primary_steam_controller_serial());
    }

    // optional uint64 steam_id_gs = 1;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->steam_id_gs());
    }

    // optional fixed64 game_id = 2;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 game_ip_address = 3;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_ip_address());
    }

    // optional uint32 game_port = 4;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_port());
    }

    // optional bool is_secure = 5;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional uint32 process_id = 9;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->process_id());
    }

    // optional uint32 streaming_provider_id = 10;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->streaming_provider_id());
    }

    // optional uint32 game_flags = 11;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_flags());
    }

    // optional uint32 owner_id = 12;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->owner_id());
    }

    // optional uint32 launch_option_type = 15 [default = 0];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->launch_option_type());
    }

  }
  if (cached_has_bits & 0x001f0000u) {
    // optional uint32 total_steam_controller_count = 18 [default = 0];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_steam_controller_count());
    }

    // optional uint32 total_non_steam_controller_count = 19 [default = 0];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_non_steam_controller_count());
    }

    // optional uint64 controller_workshop_file_id = 20 [default = 0];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->controller_workshop_file_id());
    }

    // optional uint32 launch_source = 21 [default = 0];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->launch_source());
    }

    // optional int32 primary_controller_type = 16 [default = -1];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->primary_controller_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientGamesPlayed_GamePlayed::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientGamesPlayed.GamePlayed)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientGamesPlayed_GamePlayed* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientGamesPlayed_GamePlayed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientGamesPlayed.GamePlayed)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientGamesPlayed.GamePlayed)
    MergeFrom(*source);
  }
}

void CMsgClientGamesPlayed_GamePlayed::MergeFrom(const CMsgClientGamesPlayed_GamePlayed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientGamesPlayed.GamePlayed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      game_extra_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_extra_info_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      game_data_blob_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_data_blob_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      vr_hmd_vendor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vr_hmd_vendor_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      vr_hmd_model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vr_hmd_model_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      primary_steam_controller_serial_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.primary_steam_controller_serial_);
    }
    if (cached_has_bits & 0x00000040u) {
      steam_id_gs_ = from.steam_id_gs_;
    }
    if (cached_has_bits & 0x00000080u) {
      game_id_ = from.game_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      game_ip_address_ = from.game_ip_address_;
    }
    if (cached_has_bits & 0x00000200u) {
      game_port_ = from.game_port_;
    }
    if (cached_has_bits & 0x00000400u) {
      is_secure_ = from.is_secure_;
    }
    if (cached_has_bits & 0x00000800u) {
      process_id_ = from.process_id_;
    }
    if (cached_has_bits & 0x00001000u) {
      streaming_provider_id_ = from.streaming_provider_id_;
    }
    if (cached_has_bits & 0x00002000u) {
      game_flags_ = from.game_flags_;
    }
    if (cached_has_bits & 0x00004000u) {
      owner_id_ = from.owner_id_;
    }
    if (cached_has_bits & 0x00008000u) {
      launch_option_type_ = from.launch_option_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x001f0000u) {
    if (cached_has_bits & 0x00010000u) {
      total_steam_controller_count_ = from.total_steam_controller_count_;
    }
    if (cached_has_bits & 0x00020000u) {
      total_non_steam_controller_count_ = from.total_non_steam_controller_count_;
    }
    if (cached_has_bits & 0x00040000u) {
      controller_workshop_file_id_ = from.controller_workshop_file_id_;
    }
    if (cached_has_bits & 0x00080000u) {
      launch_source_ = from.launch_source_;
    }
    if (cached_has_bits & 0x00100000u) {
      primary_controller_type_ = from.primary_controller_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientGamesPlayed_GamePlayed::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientGamesPlayed.GamePlayed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientGamesPlayed_GamePlayed::CopyFrom(const CMsgClientGamesPlayed_GamePlayed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientGamesPlayed.GamePlayed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGamesPlayed_GamePlayed::IsInitialized() const {
  return true;
}

void CMsgClientGamesPlayed_GamePlayed::Swap(CMsgClientGamesPlayed_GamePlayed* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientGamesPlayed_GamePlayed::InternalSwap(CMsgClientGamesPlayed_GamePlayed* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  token_.Swap(&other->token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  game_extra_info_.Swap(&other->game_extra_info_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  game_data_blob_.Swap(&other->game_data_blob_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  vr_hmd_vendor_.Swap(&other->vr_hmd_vendor_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  vr_hmd_model_.Swap(&other->vr_hmd_model_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  primary_steam_controller_serial_.Swap(&other->primary_steam_controller_serial_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(steam_id_gs_, other->steam_id_gs_);
  swap(game_id_, other->game_id_);
  swap(game_ip_address_, other->game_ip_address_);
  swap(game_port_, other->game_port_);
  swap(is_secure_, other->is_secure_);
  swap(process_id_, other->process_id_);
  swap(streaming_provider_id_, other->streaming_provider_id_);
  swap(game_flags_, other->game_flags_);
  swap(owner_id_, other->owner_id_);
  swap(launch_option_type_, other->launch_option_type_);
  swap(total_steam_controller_count_, other->total_steam_controller_count_);
  swap(total_non_steam_controller_count_, other->total_non_steam_controller_count_);
  swap(controller_workshop_file_id_, other->controller_workshop_file_id_);
  swap(launch_source_, other->launch_source_);
  swap(primary_controller_type_, other->primary_controller_type_);
}

::google::protobuf::Metadata CMsgClientGamesPlayed_GamePlayed::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientGamesPlayed::InitAsDefaultInstance() {
}
class CMsgClientGamesPlayed::HasBitSetters {
 public:
  static void set_has_client_os_type(CMsgClientGamesPlayed* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientGamesPlayed::kGamesPlayedFieldNumber;
const int CMsgClientGamesPlayed::kClientOsTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientGamesPlayed::CMsgClientGamesPlayed()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientGamesPlayed)
}
CMsgClientGamesPlayed::CMsgClientGamesPlayed(const CMsgClientGamesPlayed& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      games_played_(from.games_played_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_os_type_ = from.client_os_type_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientGamesPlayed)
}

void CMsgClientGamesPlayed::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientGamesPlayed_steammessages_5fclientserver_2eproto.base);
  client_os_type_ = 0u;
}

CMsgClientGamesPlayed::~CMsgClientGamesPlayed() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientGamesPlayed)
  SharedDtor();
}

void CMsgClientGamesPlayed::SharedDtor() {
}

void CMsgClientGamesPlayed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientGamesPlayed& CMsgClientGamesPlayed::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientGamesPlayed_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientGamesPlayed::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientGamesPlayed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  games_played_.Clear();
  client_os_type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientGamesPlayed::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientGamesPlayed*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.steam.CMsgClientGamesPlayed.GamePlayed games_played = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgClientGamesPlayed_GamePlayed::_InternalParse;
          object = msg->add_games_played();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // optional uint32 client_os_type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_client_os_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientGamesPlayed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientGamesPlayed)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CMsgClientGamesPlayed.GamePlayed games_played = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_games_played()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_os_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_client_os_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_os_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientGamesPlayed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientGamesPlayed)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientGamesPlayed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientGamesPlayed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientGamesPlayed.GamePlayed games_played = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->games_played_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->games_played(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 client_os_type = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->client_os_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientGamesPlayed)
}

::google::protobuf::uint8* CMsgClientGamesPlayed::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientGamesPlayed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientGamesPlayed.GamePlayed games_played = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->games_played_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->games_played(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 client_os_type = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->client_os_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientGamesPlayed)
  return target;
}

size_t CMsgClientGamesPlayed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientGamesPlayed)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientGamesPlayed.GamePlayed games_played = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->games_played_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->games_played(static_cast<int>(i)));
    }
  }

  // optional uint32 client_os_type = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->client_os_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientGamesPlayed::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientGamesPlayed)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientGamesPlayed* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientGamesPlayed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientGamesPlayed)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientGamesPlayed)
    MergeFrom(*source);
  }
}

void CMsgClientGamesPlayed::MergeFrom(const CMsgClientGamesPlayed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientGamesPlayed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  games_played_.MergeFrom(from.games_played_);
  if (from.has_client_os_type()) {
    set_client_os_type(from.client_os_type());
  }
}

void CMsgClientGamesPlayed::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientGamesPlayed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientGamesPlayed::CopyFrom(const CMsgClientGamesPlayed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientGamesPlayed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGamesPlayed::IsInitialized() const {
  return true;
}

void CMsgClientGamesPlayed::Swap(CMsgClientGamesPlayed* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientGamesPlayed::InternalSwap(CMsgClientGamesPlayed* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&games_played_)->InternalSwap(CastToBase(&other->games_played_));
  swap(client_os_type_, other->client_os_type_);
}

::google::protobuf::Metadata CMsgClientGamesPlayed::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGSApprove::InitAsDefaultInstance() {
}
class CMsgGSApprove::HasBitSetters {
 public:
  static void set_has_steam_id(CMsgGSApprove* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_owner_steam_id(CMsgGSApprove* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGSApprove::kSteamIdFieldNumber;
const int CMsgGSApprove::kOwnerSteamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGSApprove::CMsgGSApprove()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgGSApprove)
}
CMsgGSApprove::CMsgGSApprove(const CMsgGSApprove& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&owner_steam_id_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(owner_steam_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgGSApprove)
}

void CMsgGSApprove::SharedCtor() {
  ::memset(&steam_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&owner_steam_id_) -
      reinterpret_cast<char*>(&steam_id_)) + sizeof(owner_steam_id_));
}

CMsgGSApprove::~CMsgGSApprove() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgGSApprove)
  SharedDtor();
}

void CMsgGSApprove::SharedDtor() {
}

void CMsgGSApprove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGSApprove& CMsgGSApprove::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGSApprove_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgGSApprove::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgGSApprove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&owner_steam_id_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(owner_steam_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGSApprove::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGSApprove*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steam_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed64 owner_steam_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_owner_steam_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGSApprove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgGSApprove)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 owner_steam_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_owner_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &owner_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgGSApprove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgGSApprove)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGSApprove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgGSApprove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional fixed64 owner_steam_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->owner_steam_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgGSApprove)
}

::google::protobuf::uint8* CMsgGSApprove::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgGSApprove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional fixed64 owner_steam_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->owner_steam_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgGSApprove)
  return target;
}

size_t CMsgGSApprove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgGSApprove)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 owner_steam_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGSApprove::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgGSApprove)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGSApprove* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGSApprove>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgGSApprove)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgGSApprove)
    MergeFrom(*source);
  }
}

void CMsgGSApprove::MergeFrom(const CMsgGSApprove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgGSApprove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      owner_steam_id_ = from.owner_steam_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGSApprove::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgGSApprove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGSApprove::CopyFrom(const CMsgGSApprove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgGSApprove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGSApprove::IsInitialized() const {
  return true;
}

void CMsgGSApprove::Swap(CMsgGSApprove* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGSApprove::InternalSwap(CMsgGSApprove* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steam_id_, other->steam_id_);
  swap(owner_steam_id_, other->owner_steam_id_);
}

::google::protobuf::Metadata CMsgGSApprove::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGSDeny::InitAsDefaultInstance() {
}
class CMsgGSDeny::HasBitSetters {
 public:
  static void set_has_steam_id(CMsgGSDeny* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_edeny_reason(CMsgGSDeny* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_deny_string(CMsgGSDeny* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGSDeny::kSteamIdFieldNumber;
const int CMsgGSDeny::kEdenyReasonFieldNumber;
const int CMsgGSDeny::kDenyStringFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGSDeny::CMsgGSDeny()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgGSDeny)
}
CMsgGSDeny::CMsgGSDeny(const CMsgGSDeny& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  deny_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_deny_string()) {
    deny_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deny_string_);
  }
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&edeny_reason_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(edeny_reason_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgGSDeny)
}

void CMsgGSDeny::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgGSDeny_steammessages_5fclientserver_2eproto.base);
  deny_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steam_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&edeny_reason_) -
      reinterpret_cast<char*>(&steam_id_)) + sizeof(edeny_reason_));
}

CMsgGSDeny::~CMsgGSDeny() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgGSDeny)
  SharedDtor();
}

void CMsgGSDeny::SharedDtor() {
  deny_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGSDeny::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGSDeny& CMsgGSDeny::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGSDeny_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgGSDeny::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgGSDeny)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    deny_string_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&edeny_reason_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(edeny_reason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGSDeny::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGSDeny*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steam_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional int32 edeny_reason = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_edeny_reason(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string deny_string = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgGSDeny.deny_string");
        object = msg->mutable_deny_string();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGSDeny::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgGSDeny)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 edeny_reason = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_edeny_reason(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &edeny_reason_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string deny_string = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deny_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deny_string().data(), static_cast<int>(this->deny_string().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgGSDeny.deny_string");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgGSDeny)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgGSDeny)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGSDeny::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgGSDeny)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional int32 edeny_reason = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->edeny_reason(), output);
  }

  // optional string deny_string = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deny_string().data(), static_cast<int>(this->deny_string().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgGSDeny.deny_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->deny_string(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgGSDeny)
}

::google::protobuf::uint8* CMsgGSDeny::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgGSDeny)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional int32 edeny_reason = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->edeny_reason(), target);
  }

  // optional string deny_string = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deny_string().data(), static_cast<int>(this->deny_string().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgGSDeny.deny_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->deny_string(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgGSDeny)
  return target;
}

size_t CMsgGSDeny::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgGSDeny)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string deny_string = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deny_string());
    }

    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional int32 edeny_reason = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->edeny_reason());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGSDeny::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgGSDeny)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGSDeny* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGSDeny>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgGSDeny)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgGSDeny)
    MergeFrom(*source);
  }
}

void CMsgGSDeny::MergeFrom(const CMsgGSDeny& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgGSDeny)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      deny_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deny_string_);
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      edeny_reason_ = from.edeny_reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGSDeny::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgGSDeny)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGSDeny::CopyFrom(const CMsgGSDeny& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgGSDeny)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGSDeny::IsInitialized() const {
  return true;
}

void CMsgGSDeny::Swap(CMsgGSDeny* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGSDeny::InternalSwap(CMsgGSDeny* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  deny_string_.Swap(&other->deny_string_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(steam_id_, other->steam_id_);
  swap(edeny_reason_, other->edeny_reason_);
}

::google::protobuf::Metadata CMsgGSDeny::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGSKick::InitAsDefaultInstance() {
}
class CMsgGSKick::HasBitSetters {
 public:
  static void set_has_steam_id(CMsgGSKick* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_edeny_reason(CMsgGSKick* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGSKick::kSteamIdFieldNumber;
const int CMsgGSKick::kEdenyReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGSKick::CMsgGSKick()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgGSKick)
}
CMsgGSKick::CMsgGSKick(const CMsgGSKick& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&edeny_reason_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(edeny_reason_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgGSKick)
}

void CMsgGSKick::SharedCtor() {
  ::memset(&steam_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&edeny_reason_) -
      reinterpret_cast<char*>(&steam_id_)) + sizeof(edeny_reason_));
}

CMsgGSKick::~CMsgGSKick() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgGSKick)
  SharedDtor();
}

void CMsgGSKick::SharedDtor() {
}

void CMsgGSKick::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGSKick& CMsgGSKick::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGSKick_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgGSKick::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgGSKick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&edeny_reason_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(edeny_reason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGSKick::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGSKick*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steam_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional int32 edeny_reason = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_edeny_reason(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGSKick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgGSKick)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 edeny_reason = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_edeny_reason(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &edeny_reason_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgGSKick)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgGSKick)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGSKick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgGSKick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional int32 edeny_reason = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->edeny_reason(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgGSKick)
}

::google::protobuf::uint8* CMsgGSKick::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgGSKick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional int32 edeny_reason = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->edeny_reason(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgGSKick)
  return target;
}

size_t CMsgGSKick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgGSKick)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional int32 edeny_reason = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->edeny_reason());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGSKick::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgGSKick)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGSKick* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGSKick>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgGSKick)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgGSKick)
    MergeFrom(*source);
  }
}

void CMsgGSKick::MergeFrom(const CMsgGSKick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgGSKick)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      edeny_reason_ = from.edeny_reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGSKick::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgGSKick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGSKick::CopyFrom(const CMsgGSKick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgGSKick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGSKick::IsInitialized() const {
  return true;
}

void CMsgGSKick::Swap(CMsgGSKick* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGSKick::InternalSwap(CMsgGSKick* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steam_id_, other->steam_id_);
  swap(edeny_reason_, other->edeny_reason_);
}

::google::protobuf::Metadata CMsgGSKick::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientAuthList::InitAsDefaultInstance() {
}
class CMsgClientAuthList::HasBitSetters {
 public:
  static void set_has_tokens_left(CMsgClientAuthList* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_last_request_seq(CMsgClientAuthList* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_last_request_seq_from_server(CMsgClientAuthList* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_message_sequence(CMsgClientAuthList* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

void CMsgClientAuthList::clear_tickets() {
  tickets_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientAuthList::kTokensLeftFieldNumber;
const int CMsgClientAuthList::kLastRequestSeqFieldNumber;
const int CMsgClientAuthList::kLastRequestSeqFromServerFieldNumber;
const int CMsgClientAuthList::kTicketsFieldNumber;
const int CMsgClientAuthList::kAppIdsFieldNumber;
const int CMsgClientAuthList::kMessageSequenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientAuthList::CMsgClientAuthList()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientAuthList)
}
CMsgClientAuthList::CMsgClientAuthList(const CMsgClientAuthList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      tickets_(from.tickets_),
      app_ids_(from.app_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tokens_left_, &from.tokens_left_,
    static_cast<size_t>(reinterpret_cast<char*>(&message_sequence_) -
    reinterpret_cast<char*>(&tokens_left_)) + sizeof(message_sequence_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientAuthList)
}

void CMsgClientAuthList::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientAuthList_steammessages_5fclientserver_2eproto.base);
  ::memset(&tokens_left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&message_sequence_) -
      reinterpret_cast<char*>(&tokens_left_)) + sizeof(message_sequence_));
}

CMsgClientAuthList::~CMsgClientAuthList() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientAuthList)
  SharedDtor();
}

void CMsgClientAuthList::SharedDtor() {
}

void CMsgClientAuthList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientAuthList& CMsgClientAuthList::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientAuthList_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientAuthList::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientAuthList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tickets_.Clear();
  app_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&tokens_left_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&message_sequence_) -
        reinterpret_cast<char*>(&tokens_left_)) + sizeof(message_sequence_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientAuthList::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientAuthList*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 tokens_left = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_tokens_left(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 last_request_seq = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_last_request_seq(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 last_request_seq_from_server = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_last_request_seq_from_server(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.steam.CMsgAuthTicket tickets = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgAuthTicket::_InternalParse;
          object = msg->add_tickets();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // repeated uint32 app_ids = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) == 40) {
          do {
            msg->add_app_ids(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 40 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_app_ids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional uint32 message_sequence = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_message_sequence(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientAuthList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientAuthList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tokens_left = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_tokens_left(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tokens_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 last_request_seq = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_last_request_seq(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_request_seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 last_request_seq_from_server = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_last_request_seq_from_server(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_request_seq_from_server_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgAuthTicket tickets = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_tickets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 app_ids = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40u, input, this->mutable_app_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_app_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 message_sequence = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_message_sequence(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &message_sequence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientAuthList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientAuthList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientAuthList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientAuthList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 tokens_left = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tokens_left(), output);
  }

  // optional uint32 last_request_seq = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->last_request_seq(), output);
  }

  // optional uint32 last_request_seq_from_server = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->last_request_seq_from_server(), output);
  }

  // repeated .proto.steam.CMsgAuthTicket tickets = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tickets_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->tickets(static_cast<int>(i)),
      output);
  }

  // repeated uint32 app_ids = 5;
  for (int i = 0, n = this->app_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->app_ids(i), output);
  }

  // optional uint32 message_sequence = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->message_sequence(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientAuthList)
}

::google::protobuf::uint8* CMsgClientAuthList::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientAuthList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 tokens_left = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tokens_left(), target);
  }

  // optional uint32 last_request_seq = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->last_request_seq(), target);
  }

  // optional uint32 last_request_seq_from_server = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->last_request_seq_from_server(), target);
  }

  // repeated .proto.steam.CMsgAuthTicket tickets = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tickets_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->tickets(static_cast<int>(i)), target);
  }

  // repeated uint32 app_ids = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(5, this->app_ids_, target);

  // optional uint32 message_sequence = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->message_sequence(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientAuthList)
  return target;
}

size_t CMsgClientAuthList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientAuthList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgAuthTicket tickets = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->tickets_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tickets(static_cast<int>(i)));
    }
  }

  // repeated uint32 app_ids = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->app_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->app_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 tokens_left = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tokens_left());
    }

    // optional uint32 last_request_seq = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_request_seq());
    }

    // optional uint32 last_request_seq_from_server = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_request_seq_from_server());
    }

    // optional uint32 message_sequence = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->message_sequence());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientAuthList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientAuthList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientAuthList* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientAuthList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientAuthList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientAuthList)
    MergeFrom(*source);
  }
}

void CMsgClientAuthList::MergeFrom(const CMsgClientAuthList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientAuthList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tickets_.MergeFrom(from.tickets_);
  app_ids_.MergeFrom(from.app_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      tokens_left_ = from.tokens_left_;
    }
    if (cached_has_bits & 0x00000002u) {
      last_request_seq_ = from.last_request_seq_;
    }
    if (cached_has_bits & 0x00000004u) {
      last_request_seq_from_server_ = from.last_request_seq_from_server_;
    }
    if (cached_has_bits & 0x00000008u) {
      message_sequence_ = from.message_sequence_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientAuthList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientAuthList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAuthList::CopyFrom(const CMsgClientAuthList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientAuthList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAuthList::IsInitialized() const {
  return true;
}

void CMsgClientAuthList::Swap(CMsgClientAuthList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientAuthList::InternalSwap(CMsgClientAuthList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&tickets_)->InternalSwap(CastToBase(&other->tickets_));
  app_ids_.InternalSwap(&other->app_ids_);
  swap(tokens_left_, other->tokens_left_);
  swap(last_request_seq_, other->last_request_seq_);
  swap(last_request_seq_from_server_, other->last_request_seq_from_server_);
  swap(message_sequence_, other->message_sequence_);
}

::google::protobuf::Metadata CMsgClientAuthList::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientAuthListAck::InitAsDefaultInstance() {
}
class CMsgClientAuthListAck::HasBitSetters {
 public:
  static void set_has_message_sequence(CMsgClientAuthListAck* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientAuthListAck::kTicketCrcFieldNumber;
const int CMsgClientAuthListAck::kAppIdsFieldNumber;
const int CMsgClientAuthListAck::kMessageSequenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientAuthListAck::CMsgClientAuthListAck()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientAuthListAck)
}
CMsgClientAuthListAck::CMsgClientAuthListAck(const CMsgClientAuthListAck& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      ticket_crc_(from.ticket_crc_),
      app_ids_(from.app_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_sequence_ = from.message_sequence_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientAuthListAck)
}

void CMsgClientAuthListAck::SharedCtor() {
  message_sequence_ = 0u;
}

CMsgClientAuthListAck::~CMsgClientAuthListAck() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientAuthListAck)
  SharedDtor();
}

void CMsgClientAuthListAck::SharedDtor() {
}

void CMsgClientAuthListAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientAuthListAck& CMsgClientAuthListAck::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientAuthListAck_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientAuthListAck::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientAuthListAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ticket_crc_.Clear();
  app_ids_.Clear();
  message_sequence_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientAuthListAck::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientAuthListAck*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated uint32 ticket_crc = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 8) {
          do {
            msg->add_ticket_crc(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_ticket_crc();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated uint32 app_ids = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 16) {
          do {
            msg->add_app_ids(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 16 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_app_ids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional uint32 message_sequence = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_message_sequence(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientAuthListAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientAuthListAck)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 ticket_crc = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_ticket_crc())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ticket_crc())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 app_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_app_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_app_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 message_sequence = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_message_sequence(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &message_sequence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientAuthListAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientAuthListAck)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientAuthListAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientAuthListAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 ticket_crc = 1;
  for (int i = 0, n = this->ticket_crc_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->ticket_crc(i), output);
  }

  // repeated uint32 app_ids = 2;
  for (int i = 0, n = this->app_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->app_ids(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 message_sequence = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->message_sequence(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientAuthListAck)
}

::google::protobuf::uint8* CMsgClientAuthListAck::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientAuthListAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 ticket_crc = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->ticket_crc_, target);

  // repeated uint32 app_ids = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->app_ids_, target);

  cached_has_bits = _has_bits_[0];
  // optional uint32 message_sequence = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->message_sequence(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientAuthListAck)
  return target;
}

size_t CMsgClientAuthListAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientAuthListAck)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 ticket_crc = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->ticket_crc_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->ticket_crc_size());
    total_size += data_size;
  }

  // repeated uint32 app_ids = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->app_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->app_ids_size());
    total_size += data_size;
  }

  // optional uint32 message_sequence = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->message_sequence());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientAuthListAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientAuthListAck)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientAuthListAck* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientAuthListAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientAuthListAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientAuthListAck)
    MergeFrom(*source);
  }
}

void CMsgClientAuthListAck::MergeFrom(const CMsgClientAuthListAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientAuthListAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ticket_crc_.MergeFrom(from.ticket_crc_);
  app_ids_.MergeFrom(from.app_ids_);
  if (from.has_message_sequence()) {
    set_message_sequence(from.message_sequence());
  }
}

void CMsgClientAuthListAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientAuthListAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAuthListAck::CopyFrom(const CMsgClientAuthListAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientAuthListAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAuthListAck::IsInitialized() const {
  return true;
}

void CMsgClientAuthListAck::Swap(CMsgClientAuthListAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientAuthListAck::InternalSwap(CMsgClientAuthListAck* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ticket_crc_.InternalSwap(&other->ticket_crc_);
  app_ids_.InternalSwap(&other->app_ids_);
  swap(message_sequence_, other->message_sequence_);
}

::google::protobuf::Metadata CMsgClientAuthListAck::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientLicenseList_License::InitAsDefaultInstance() {
}
class CMsgClientLicenseList_License::HasBitSetters {
 public:
  static void set_has_package_id(CMsgClientLicenseList_License* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_time_created(CMsgClientLicenseList_License* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_time_next_process(CMsgClientLicenseList_License* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_minute_limit(CMsgClientLicenseList_License* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_minutes_used(CMsgClientLicenseList_License* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_payment_method(CMsgClientLicenseList_License* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_flags(CMsgClientLicenseList_License* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_purchase_country_code(CMsgClientLicenseList_License* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_license_type(CMsgClientLicenseList_License* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_territory_code(CMsgClientLicenseList_License* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_change_number(CMsgClientLicenseList_License* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_owner_id(CMsgClientLicenseList_License* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_initial_period(CMsgClientLicenseList_License* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_initial_time_unit(CMsgClientLicenseList_License* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static void set_has_renewal_period(CMsgClientLicenseList_License* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
  static void set_has_renewal_time_unit(CMsgClientLicenseList_License* msg) {
    msg->_has_bits_[0] |= 0x00008000u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientLicenseList_License::kPackageIdFieldNumber;
const int CMsgClientLicenseList_License::kTimeCreatedFieldNumber;
const int CMsgClientLicenseList_License::kTimeNextProcessFieldNumber;
const int CMsgClientLicenseList_License::kMinuteLimitFieldNumber;
const int CMsgClientLicenseList_License::kMinutesUsedFieldNumber;
const int CMsgClientLicenseList_License::kPaymentMethodFieldNumber;
const int CMsgClientLicenseList_License::kFlagsFieldNumber;
const int CMsgClientLicenseList_License::kPurchaseCountryCodeFieldNumber;
const int CMsgClientLicenseList_License::kLicenseTypeFieldNumber;
const int CMsgClientLicenseList_License::kTerritoryCodeFieldNumber;
const int CMsgClientLicenseList_License::kChangeNumberFieldNumber;
const int CMsgClientLicenseList_License::kOwnerIdFieldNumber;
const int CMsgClientLicenseList_License::kInitialPeriodFieldNumber;
const int CMsgClientLicenseList_License::kInitialTimeUnitFieldNumber;
const int CMsgClientLicenseList_License::kRenewalPeriodFieldNumber;
const int CMsgClientLicenseList_License::kRenewalTimeUnitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientLicenseList_License::CMsgClientLicenseList_License()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientLicenseList.License)
}
CMsgClientLicenseList_License::CMsgClientLicenseList_License(const CMsgClientLicenseList_License& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  purchase_country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_purchase_country_code()) {
    purchase_country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.purchase_country_code_);
  }
  ::memcpy(&package_id_, &from.package_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&renewal_time_unit_) -
    reinterpret_cast<char*>(&package_id_)) + sizeof(renewal_time_unit_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientLicenseList.License)
}

void CMsgClientLicenseList_License::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientLicenseList_License_steammessages_5fclientserver_2eproto.base);
  purchase_country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&package_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&renewal_time_unit_) -
      reinterpret_cast<char*>(&package_id_)) + sizeof(renewal_time_unit_));
}

CMsgClientLicenseList_License::~CMsgClientLicenseList_License() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientLicenseList.License)
  SharedDtor();
}

void CMsgClientLicenseList_License::SharedDtor() {
  purchase_country_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientLicenseList_License::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientLicenseList_License& CMsgClientLicenseList_License::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientLicenseList_License_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientLicenseList_License::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientLicenseList.License)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    purchase_country_code_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&package_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&flags_) -
        reinterpret_cast<char*>(&package_id_)) + sizeof(flags_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&license_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&renewal_time_unit_) -
        reinterpret_cast<char*>(&license_type_)) + sizeof(renewal_time_unit_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientLicenseList_License::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientLicenseList_License*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 package_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_package_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed32 time_created = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_time_created(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional fixed32 time_next_process = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_time_next_process(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional int32 minute_limit = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_minute_limit(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 minutes_used = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_minutes_used(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 payment_method = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_payment_method(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 flags = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_flags(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string purchase_country_code = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientLicenseList.License.purchase_country_code");
        object = msg->mutable_purchase_country_code();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 license_type = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_license_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 territory_code = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_territory_code(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 change_number = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_change_number(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 owner_id = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_owner_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 initial_period = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_initial_period(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 initial_time_unit = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_initial_time_unit(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 renewal_period = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_renewal_period(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 renewal_time_unit = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_renewal_time_unit(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientLicenseList_License::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientLicenseList.License)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 package_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_package_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &package_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 time_created = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_time_created(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &time_created_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 time_next_process = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_time_next_process(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &time_next_process_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 minute_limit = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_minute_limit(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minute_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 minutes_used = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_minutes_used(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minutes_used_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 payment_method = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_payment_method(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &payment_method_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 flags = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_flags(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string purchase_country_code = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_purchase_country_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->purchase_country_code().data(), static_cast<int>(this->purchase_country_code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientLicenseList.License.purchase_country_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 license_type = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_license_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &license_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 territory_code = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_territory_code(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &territory_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 change_number = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_change_number(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &change_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 owner_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_owner_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 initial_period = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {
          HasBitSetters::set_has_initial_period(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &initial_period_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 initial_time_unit = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {
          HasBitSetters::set_has_initial_time_unit(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &initial_time_unit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 renewal_period = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (120 & 0xFF)) {
          HasBitSetters::set_has_renewal_period(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &renewal_period_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 renewal_time_unit = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (128 & 0xFF)) {
          HasBitSetters::set_has_renewal_time_unit(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &renewal_time_unit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientLicenseList.License)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientLicenseList.License)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientLicenseList_License::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientLicenseList.License)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 package_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->package_id(), output);
  }

  // optional fixed32 time_created = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->time_created(), output);
  }

  // optional fixed32 time_next_process = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->time_next_process(), output);
  }

  // optional int32 minute_limit = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->minute_limit(), output);
  }

  // optional int32 minutes_used = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->minutes_used(), output);
  }

  // optional uint32 payment_method = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->payment_method(), output);
  }

  // optional uint32 flags = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->flags(), output);
  }

  // optional string purchase_country_code = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->purchase_country_code().data(), static_cast<int>(this->purchase_country_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLicenseList.License.purchase_country_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->purchase_country_code(), output);
  }

  // optional uint32 license_type = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->license_type(), output);
  }

  // optional int32 territory_code = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->territory_code(), output);
  }

  // optional int32 change_number = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->change_number(), output);
  }

  // optional uint32 owner_id = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->owner_id(), output);
  }

  // optional uint32 initial_period = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->initial_period(), output);
  }

  // optional uint32 initial_time_unit = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->initial_time_unit(), output);
  }

  // optional uint32 renewal_period = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->renewal_period(), output);
  }

  // optional uint32 renewal_time_unit = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->renewal_time_unit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientLicenseList.License)
}

::google::protobuf::uint8* CMsgClientLicenseList_License::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientLicenseList.License)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 package_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->package_id(), target);
  }

  // optional fixed32 time_created = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->time_created(), target);
  }

  // optional fixed32 time_next_process = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->time_next_process(), target);
  }

  // optional int32 minute_limit = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->minute_limit(), target);
  }

  // optional int32 minutes_used = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->minutes_used(), target);
  }

  // optional uint32 payment_method = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->payment_method(), target);
  }

  // optional uint32 flags = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->flags(), target);
  }

  // optional string purchase_country_code = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->purchase_country_code().data(), static_cast<int>(this->purchase_country_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLicenseList.License.purchase_country_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->purchase_country_code(), target);
  }

  // optional uint32 license_type = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->license_type(), target);
  }

  // optional int32 territory_code = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->territory_code(), target);
  }

  // optional int32 change_number = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->change_number(), target);
  }

  // optional uint32 owner_id = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->owner_id(), target);
  }

  // optional uint32 initial_period = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->initial_period(), target);
  }

  // optional uint32 initial_time_unit = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->initial_time_unit(), target);
  }

  // optional uint32 renewal_period = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->renewal_period(), target);
  }

  // optional uint32 renewal_time_unit = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->renewal_time_unit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientLicenseList.License)
  return target;
}

size_t CMsgClientLicenseList_License::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientLicenseList.License)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string purchase_country_code = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->purchase_country_code());
    }

    // optional uint32 package_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->package_id());
    }

    // optional fixed32 time_created = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional fixed32 time_next_process = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional int32 minute_limit = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minute_limit());
    }

    // optional int32 minutes_used = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minutes_used());
    }

    // optional uint32 payment_method = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->payment_method());
    }

    // optional uint32 flags = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 license_type = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->license_type());
    }

    // optional int32 territory_code = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->territory_code());
    }

    // optional int32 change_number = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->change_number());
    }

    // optional uint32 owner_id = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->owner_id());
    }

    // optional uint32 initial_period = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->initial_period());
    }

    // optional uint32 initial_time_unit = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->initial_time_unit());
    }

    // optional uint32 renewal_period = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->renewal_period());
    }

    // optional uint32 renewal_time_unit = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->renewal_time_unit());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientLicenseList_License::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientLicenseList.License)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientLicenseList_License* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientLicenseList_License>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientLicenseList.License)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientLicenseList.License)
    MergeFrom(*source);
  }
}

void CMsgClientLicenseList_License::MergeFrom(const CMsgClientLicenseList_License& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientLicenseList.License)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      purchase_country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.purchase_country_code_);
    }
    if (cached_has_bits & 0x00000002u) {
      package_id_ = from.package_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_created_ = from.time_created_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_next_process_ = from.time_next_process_;
    }
    if (cached_has_bits & 0x00000010u) {
      minute_limit_ = from.minute_limit_;
    }
    if (cached_has_bits & 0x00000020u) {
      minutes_used_ = from.minutes_used_;
    }
    if (cached_has_bits & 0x00000040u) {
      payment_method_ = from.payment_method_;
    }
    if (cached_has_bits & 0x00000080u) {
      flags_ = from.flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      license_type_ = from.license_type_;
    }
    if (cached_has_bits & 0x00000200u) {
      territory_code_ = from.territory_code_;
    }
    if (cached_has_bits & 0x00000400u) {
      change_number_ = from.change_number_;
    }
    if (cached_has_bits & 0x00000800u) {
      owner_id_ = from.owner_id_;
    }
    if (cached_has_bits & 0x00001000u) {
      initial_period_ = from.initial_period_;
    }
    if (cached_has_bits & 0x00002000u) {
      initial_time_unit_ = from.initial_time_unit_;
    }
    if (cached_has_bits & 0x00004000u) {
      renewal_period_ = from.renewal_period_;
    }
    if (cached_has_bits & 0x00008000u) {
      renewal_time_unit_ = from.renewal_time_unit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientLicenseList_License::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientLicenseList.License)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientLicenseList_License::CopyFrom(const CMsgClientLicenseList_License& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientLicenseList.License)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLicenseList_License::IsInitialized() const {
  return true;
}

void CMsgClientLicenseList_License::Swap(CMsgClientLicenseList_License* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientLicenseList_License::InternalSwap(CMsgClientLicenseList_License* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  purchase_country_code_.Swap(&other->purchase_country_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(package_id_, other->package_id_);
  swap(time_created_, other->time_created_);
  swap(time_next_process_, other->time_next_process_);
  swap(minute_limit_, other->minute_limit_);
  swap(minutes_used_, other->minutes_used_);
  swap(payment_method_, other->payment_method_);
  swap(flags_, other->flags_);
  swap(license_type_, other->license_type_);
  swap(territory_code_, other->territory_code_);
  swap(change_number_, other->change_number_);
  swap(owner_id_, other->owner_id_);
  swap(initial_period_, other->initial_period_);
  swap(initial_time_unit_, other->initial_time_unit_);
  swap(renewal_period_, other->renewal_period_);
  swap(renewal_time_unit_, other->renewal_time_unit_);
}

::google::protobuf::Metadata CMsgClientLicenseList_License::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientLicenseList::InitAsDefaultInstance() {
}
class CMsgClientLicenseList::HasBitSetters {
 public:
  static void set_has_eresult(CMsgClientLicenseList* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientLicenseList::kEresultFieldNumber;
const int CMsgClientLicenseList::kLicensesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientLicenseList::CMsgClientLicenseList()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientLicenseList)
}
CMsgClientLicenseList::CMsgClientLicenseList(const CMsgClientLicenseList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      licenses_(from.licenses_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientLicenseList)
}

void CMsgClientLicenseList::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientLicenseList_steammessages_5fclientserver_2eproto.base);
  eresult_ = 2;
}

CMsgClientLicenseList::~CMsgClientLicenseList() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientLicenseList)
  SharedDtor();
}

void CMsgClientLicenseList::SharedDtor() {
}

void CMsgClientLicenseList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientLicenseList& CMsgClientLicenseList::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientLicenseList_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientLicenseList::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientLicenseList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  licenses_.Clear();
  eresult_ = 2;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientLicenseList::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientLicenseList*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_eresult(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.steam.CMsgClientLicenseList.License licenses = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgClientLicenseList_License::_InternalParse;
          object = msg->add_licenses();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientLicenseList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientLicenseList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_eresult(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgClientLicenseList.License licenses = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_licenses()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientLicenseList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientLicenseList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientLicenseList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientLicenseList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // repeated .proto.steam.CMsgClientLicenseList.License licenses = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->licenses_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->licenses(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientLicenseList)
}

::google::protobuf::uint8* CMsgClientLicenseList::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientLicenseList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // repeated .proto.steam.CMsgClientLicenseList.License licenses = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->licenses_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->licenses(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientLicenseList)
  return target;
}

size_t CMsgClientLicenseList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientLicenseList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientLicenseList.License licenses = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->licenses_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->licenses(static_cast<int>(i)));
    }
  }

  // optional int32 eresult = 1 [default = 2];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->eresult());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientLicenseList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientLicenseList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientLicenseList* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientLicenseList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientLicenseList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientLicenseList)
    MergeFrom(*source);
  }
}

void CMsgClientLicenseList::MergeFrom(const CMsgClientLicenseList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientLicenseList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  licenses_.MergeFrom(from.licenses_);
  if (from.has_eresult()) {
    set_eresult(from.eresult());
  }
}

void CMsgClientLicenseList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientLicenseList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientLicenseList::CopyFrom(const CMsgClientLicenseList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientLicenseList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLicenseList::IsInitialized() const {
  return true;
}

void CMsgClientLicenseList::Swap(CMsgClientLicenseList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientLicenseList::InternalSwap(CMsgClientLicenseList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&licenses_)->InternalSwap(CastToBase(&other->licenses_));
  swap(eresult_, other->eresult_);
}

::google::protobuf::Metadata CMsgClientLicenseList::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientLBSSetScore::InitAsDefaultInstance() {
}
class CMsgClientLBSSetScore::HasBitSetters {
 public:
  static void set_has_app_id(CMsgClientLBSSetScore* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_leaderboard_id(CMsgClientLBSSetScore* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_score(CMsgClientLBSSetScore* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_details(CMsgClientLBSSetScore* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_upload_score_method(CMsgClientLBSSetScore* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientLBSSetScore::kAppIdFieldNumber;
const int CMsgClientLBSSetScore::kLeaderboardIdFieldNumber;
const int CMsgClientLBSSetScore::kScoreFieldNumber;
const int CMsgClientLBSSetScore::kDetailsFieldNumber;
const int CMsgClientLBSSetScore::kUploadScoreMethodFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientLBSSetScore::CMsgClientLBSSetScore()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientLBSSetScore)
}
CMsgClientLBSSetScore::CMsgClientLBSSetScore(const CMsgClientLBSSetScore& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  details_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_details()) {
    details_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.details_);
  }
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&upload_score_method_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(upload_score_method_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientLBSSetScore)
}

void CMsgClientLBSSetScore::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientLBSSetScore_steammessages_5fclientserver_2eproto.base);
  details_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&upload_score_method_) -
      reinterpret_cast<char*>(&app_id_)) + sizeof(upload_score_method_));
}

CMsgClientLBSSetScore::~CMsgClientLBSSetScore() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientLBSSetScore)
  SharedDtor();
}

void CMsgClientLBSSetScore::SharedDtor() {
  details_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientLBSSetScore::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientLBSSetScore& CMsgClientLBSSetScore::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientLBSSetScore_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientLBSSetScore::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientLBSSetScore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    details_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&upload_score_method_) -
        reinterpret_cast<char*>(&app_id_)) + sizeof(upload_score_method_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientLBSSetScore::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientLBSSetScore*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 leaderboard_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_leaderboard_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 score = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_score(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes details = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_details();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional int32 upload_score_method = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_upload_score_method(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientLBSSetScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientLBSSetScore)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 leaderboard_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_leaderboard_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leaderboard_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 score = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_score(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes details = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_details()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 upload_score_method = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_upload_score_method(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upload_score_method_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientLBSSetScore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientLBSSetScore)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientLBSSetScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientLBSSetScore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional int32 leaderboard_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->leaderboard_id(), output);
  }

  // optional int32 score = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->score(), output);
  }

  // optional bytes details = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->details(), output);
  }

  // optional int32 upload_score_method = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->upload_score_method(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientLBSSetScore)
}

::google::protobuf::uint8* CMsgClientLBSSetScore::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientLBSSetScore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional int32 leaderboard_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->leaderboard_id(), target);
  }

  // optional int32 score = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->score(), target);
  }

  // optional bytes details = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->details(), target);
  }

  // optional int32 upload_score_method = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->upload_score_method(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientLBSSetScore)
  return target;
}

size_t CMsgClientLBSSetScore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientLBSSetScore)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes details = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->details());
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional int32 leaderboard_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leaderboard_id());
    }

    // optional int32 score = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional int32 upload_score_method = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upload_score_method());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientLBSSetScore::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientLBSSetScore)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientLBSSetScore* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientLBSSetScore>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientLBSSetScore)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientLBSSetScore)
    MergeFrom(*source);
  }
}

void CMsgClientLBSSetScore::MergeFrom(const CMsgClientLBSSetScore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientLBSSetScore)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      details_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.details_);
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      leaderboard_id_ = from.leaderboard_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000010u) {
      upload_score_method_ = from.upload_score_method_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientLBSSetScore::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientLBSSetScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientLBSSetScore::CopyFrom(const CMsgClientLBSSetScore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientLBSSetScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLBSSetScore::IsInitialized() const {
  return true;
}

void CMsgClientLBSSetScore::Swap(CMsgClientLBSSetScore* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientLBSSetScore::InternalSwap(CMsgClientLBSSetScore* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  details_.Swap(&other->details_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(app_id_, other->app_id_);
  swap(leaderboard_id_, other->leaderboard_id_);
  swap(score_, other->score_);
  swap(upload_score_method_, other->upload_score_method_);
}

::google::protobuf::Metadata CMsgClientLBSSetScore::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientLBSSetScoreResponse::InitAsDefaultInstance() {
}
class CMsgClientLBSSetScoreResponse::HasBitSetters {
 public:
  static void set_has_eresult(CMsgClientLBSSetScoreResponse* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_leaderboard_entry_count(CMsgClientLBSSetScoreResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_score_changed(CMsgClientLBSSetScoreResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_global_rank_previous(CMsgClientLBSSetScoreResponse* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_global_rank_new(CMsgClientLBSSetScoreResponse* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientLBSSetScoreResponse::kEresultFieldNumber;
const int CMsgClientLBSSetScoreResponse::kLeaderboardEntryCountFieldNumber;
const int CMsgClientLBSSetScoreResponse::kScoreChangedFieldNumber;
const int CMsgClientLBSSetScoreResponse::kGlobalRankPreviousFieldNumber;
const int CMsgClientLBSSetScoreResponse::kGlobalRankNewFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientLBSSetScoreResponse::CMsgClientLBSSetScoreResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientLBSSetScoreResponse)
}
CMsgClientLBSSetScoreResponse::CMsgClientLBSSetScoreResponse(const CMsgClientLBSSetScoreResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&leaderboard_entry_count_, &from.leaderboard_entry_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&leaderboard_entry_count_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientLBSSetScoreResponse)
}

void CMsgClientLBSSetScoreResponse::SharedCtor() {
  ::memset(&leaderboard_entry_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&global_rank_new_) -
      reinterpret_cast<char*>(&leaderboard_entry_count_)) + sizeof(global_rank_new_));
  eresult_ = 2;
}

CMsgClientLBSSetScoreResponse::~CMsgClientLBSSetScoreResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientLBSSetScoreResponse)
  SharedDtor();
}

void CMsgClientLBSSetScoreResponse::SharedDtor() {
}

void CMsgClientLBSSetScoreResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientLBSSetScoreResponse& CMsgClientLBSSetScoreResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientLBSSetScoreResponse_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientLBSSetScoreResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientLBSSetScoreResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&leaderboard_entry_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&global_rank_new_) -
        reinterpret_cast<char*>(&leaderboard_entry_count_)) + sizeof(global_rank_new_));
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientLBSSetScoreResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientLBSSetScoreResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_eresult(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 leaderboard_entry_count = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_leaderboard_entry_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool score_changed = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_score_changed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 global_rank_previous = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_global_rank_previous(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 global_rank_new = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_global_rank_new(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientLBSSetScoreResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientLBSSetScoreResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_eresult(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 leaderboard_entry_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_leaderboard_entry_count(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leaderboard_entry_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool score_changed = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_score_changed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &score_changed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 global_rank_previous = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_global_rank_previous(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &global_rank_previous_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 global_rank_new = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_global_rank_new(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &global_rank_new_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientLBSSetScoreResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientLBSSetScoreResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientLBSSetScoreResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientLBSSetScoreResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional int32 leaderboard_entry_count = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->leaderboard_entry_count(), output);
  }

  // optional bool score_changed = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->score_changed(), output);
  }

  // optional int32 global_rank_previous = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->global_rank_previous(), output);
  }

  // optional int32 global_rank_new = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->global_rank_new(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientLBSSetScoreResponse)
}

::google::protobuf::uint8* CMsgClientLBSSetScoreResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientLBSSetScoreResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // optional int32 leaderboard_entry_count = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->leaderboard_entry_count(), target);
  }

  // optional bool score_changed = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->score_changed(), target);
  }

  // optional int32 global_rank_previous = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->global_rank_previous(), target);
  }

  // optional int32 global_rank_new = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->global_rank_new(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientLBSSetScoreResponse)
  return target;
}

size_t CMsgClientLBSSetScoreResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientLBSSetScoreResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int32 leaderboard_entry_count = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leaderboard_entry_count());
    }

    // optional bool score_changed = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional int32 global_rank_previous = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->global_rank_previous());
    }

    // optional int32 global_rank_new = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->global_rank_new());
    }

    // optional int32 eresult = 1 [default = 2];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientLBSSetScoreResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientLBSSetScoreResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientLBSSetScoreResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientLBSSetScoreResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientLBSSetScoreResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientLBSSetScoreResponse)
    MergeFrom(*source);
  }
}

void CMsgClientLBSSetScoreResponse::MergeFrom(const CMsgClientLBSSetScoreResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientLBSSetScoreResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      leaderboard_entry_count_ = from.leaderboard_entry_count_;
    }
    if (cached_has_bits & 0x00000002u) {
      score_changed_ = from.score_changed_;
    }
    if (cached_has_bits & 0x00000004u) {
      global_rank_previous_ = from.global_rank_previous_;
    }
    if (cached_has_bits & 0x00000008u) {
      global_rank_new_ = from.global_rank_new_;
    }
    if (cached_has_bits & 0x00000010u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientLBSSetScoreResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientLBSSetScoreResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientLBSSetScoreResponse::CopyFrom(const CMsgClientLBSSetScoreResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientLBSSetScoreResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLBSSetScoreResponse::IsInitialized() const {
  return true;
}

void CMsgClientLBSSetScoreResponse::Swap(CMsgClientLBSSetScoreResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientLBSSetScoreResponse::InternalSwap(CMsgClientLBSSetScoreResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(leaderboard_entry_count_, other->leaderboard_entry_count_);
  swap(score_changed_, other->score_changed_);
  swap(global_rank_previous_, other->global_rank_previous_);
  swap(global_rank_new_, other->global_rank_new_);
  swap(eresult_, other->eresult_);
}

::google::protobuf::Metadata CMsgClientLBSSetScoreResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientLBSSetUGC::InitAsDefaultInstance() {
}
class CMsgClientLBSSetUGC::HasBitSetters {
 public:
  static void set_has_app_id(CMsgClientLBSSetUGC* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_leaderboard_id(CMsgClientLBSSetUGC* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_ugc_id(CMsgClientLBSSetUGC* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientLBSSetUGC::kAppIdFieldNumber;
const int CMsgClientLBSSetUGC::kLeaderboardIdFieldNumber;
const int CMsgClientLBSSetUGC::kUgcIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientLBSSetUGC::CMsgClientLBSSetUGC()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientLBSSetUGC)
}
CMsgClientLBSSetUGC::CMsgClientLBSSetUGC(const CMsgClientLBSSetUGC& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ugc_id_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(ugc_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientLBSSetUGC)
}

void CMsgClientLBSSetUGC::SharedCtor() {
  ::memset(&app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ugc_id_) -
      reinterpret_cast<char*>(&app_id_)) + sizeof(ugc_id_));
}

CMsgClientLBSSetUGC::~CMsgClientLBSSetUGC() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientLBSSetUGC)
  SharedDtor();
}

void CMsgClientLBSSetUGC::SharedDtor() {
}

void CMsgClientLBSSetUGC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientLBSSetUGC& CMsgClientLBSSetUGC::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientLBSSetUGC_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientLBSSetUGC::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientLBSSetUGC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ugc_id_) -
        reinterpret_cast<char*>(&app_id_)) + sizeof(ugc_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientLBSSetUGC::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientLBSSetUGC*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 leaderboard_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_leaderboard_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 ugc_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_ugc_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientLBSSetUGC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientLBSSetUGC)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 leaderboard_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_leaderboard_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leaderboard_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 ugc_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          HasBitSetters::set_has_ugc_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &ugc_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientLBSSetUGC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientLBSSetUGC)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientLBSSetUGC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientLBSSetUGC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional int32 leaderboard_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->leaderboard_id(), output);
  }

  // optional fixed64 ugc_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->ugc_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientLBSSetUGC)
}

::google::protobuf::uint8* CMsgClientLBSSetUGC::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientLBSSetUGC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional int32 leaderboard_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->leaderboard_id(), target);
  }

  // optional fixed64 ugc_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->ugc_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientLBSSetUGC)
  return target;
}

size_t CMsgClientLBSSetUGC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientLBSSetUGC)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional int32 leaderboard_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leaderboard_id());
    }

    // optional fixed64 ugc_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientLBSSetUGC::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientLBSSetUGC)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientLBSSetUGC* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientLBSSetUGC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientLBSSetUGC)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientLBSSetUGC)
    MergeFrom(*source);
  }
}

void CMsgClientLBSSetUGC::MergeFrom(const CMsgClientLBSSetUGC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientLBSSetUGC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      leaderboard_id_ = from.leaderboard_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      ugc_id_ = from.ugc_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientLBSSetUGC::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientLBSSetUGC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientLBSSetUGC::CopyFrom(const CMsgClientLBSSetUGC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientLBSSetUGC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLBSSetUGC::IsInitialized() const {
  return true;
}

void CMsgClientLBSSetUGC::Swap(CMsgClientLBSSetUGC* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientLBSSetUGC::InternalSwap(CMsgClientLBSSetUGC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(app_id_, other->app_id_);
  swap(leaderboard_id_, other->leaderboard_id_);
  swap(ugc_id_, other->ugc_id_);
}

::google::protobuf::Metadata CMsgClientLBSSetUGC::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientLBSSetUGCResponse::InitAsDefaultInstance() {
}
class CMsgClientLBSSetUGCResponse::HasBitSetters {
 public:
  static void set_has_eresult(CMsgClientLBSSetUGCResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientLBSSetUGCResponse::kEresultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientLBSSetUGCResponse::CMsgClientLBSSetUGCResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientLBSSetUGCResponse)
}
CMsgClientLBSSetUGCResponse::CMsgClientLBSSetUGCResponse(const CMsgClientLBSSetUGCResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientLBSSetUGCResponse)
}

void CMsgClientLBSSetUGCResponse::SharedCtor() {
  eresult_ = 2;
}

CMsgClientLBSSetUGCResponse::~CMsgClientLBSSetUGCResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientLBSSetUGCResponse)
  SharedDtor();
}

void CMsgClientLBSSetUGCResponse::SharedDtor() {
}

void CMsgClientLBSSetUGCResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientLBSSetUGCResponse& CMsgClientLBSSetUGCResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientLBSSetUGCResponse_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientLBSSetUGCResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientLBSSetUGCResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  eresult_ = 2;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientLBSSetUGCResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientLBSSetUGCResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_eresult(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientLBSSetUGCResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientLBSSetUGCResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_eresult(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientLBSSetUGCResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientLBSSetUGCResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientLBSSetUGCResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientLBSSetUGCResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientLBSSetUGCResponse)
}

::google::protobuf::uint8* CMsgClientLBSSetUGCResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientLBSSetUGCResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientLBSSetUGCResponse)
  return target;
}

size_t CMsgClientLBSSetUGCResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientLBSSetUGCResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 eresult = 1 [default = 2];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->eresult());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientLBSSetUGCResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientLBSSetUGCResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientLBSSetUGCResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientLBSSetUGCResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientLBSSetUGCResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientLBSSetUGCResponse)
    MergeFrom(*source);
  }
}

void CMsgClientLBSSetUGCResponse::MergeFrom(const CMsgClientLBSSetUGCResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientLBSSetUGCResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_eresult()) {
    set_eresult(from.eresult());
  }
}

void CMsgClientLBSSetUGCResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientLBSSetUGCResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientLBSSetUGCResponse::CopyFrom(const CMsgClientLBSSetUGCResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientLBSSetUGCResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLBSSetUGCResponse::IsInitialized() const {
  return true;
}

void CMsgClientLBSSetUGCResponse::Swap(CMsgClientLBSSetUGCResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientLBSSetUGCResponse::InternalSwap(CMsgClientLBSSetUGCResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(eresult_, other->eresult_);
}

::google::protobuf::Metadata CMsgClientLBSSetUGCResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientLBSFindOrCreateLB::InitAsDefaultInstance() {
}
class CMsgClientLBSFindOrCreateLB::HasBitSetters {
 public:
  static void set_has_app_id(CMsgClientLBSFindOrCreateLB* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_leaderboard_sort_method(CMsgClientLBSFindOrCreateLB* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_leaderboard_display_type(CMsgClientLBSFindOrCreateLB* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_create_if_not_found(CMsgClientLBSFindOrCreateLB* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_leaderboard_name(CMsgClientLBSFindOrCreateLB* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientLBSFindOrCreateLB::kAppIdFieldNumber;
const int CMsgClientLBSFindOrCreateLB::kLeaderboardSortMethodFieldNumber;
const int CMsgClientLBSFindOrCreateLB::kLeaderboardDisplayTypeFieldNumber;
const int CMsgClientLBSFindOrCreateLB::kCreateIfNotFoundFieldNumber;
const int CMsgClientLBSFindOrCreateLB::kLeaderboardNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientLBSFindOrCreateLB::CMsgClientLBSFindOrCreateLB()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientLBSFindOrCreateLB)
}
CMsgClientLBSFindOrCreateLB::CMsgClientLBSFindOrCreateLB(const CMsgClientLBSFindOrCreateLB& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  leaderboard_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_leaderboard_name()) {
    leaderboard_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leaderboard_name_);
  }
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&create_if_not_found_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(create_if_not_found_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientLBSFindOrCreateLB)
}

void CMsgClientLBSFindOrCreateLB::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientLBSFindOrCreateLB_steammessages_5fclientserver_2eproto.base);
  leaderboard_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&create_if_not_found_) -
      reinterpret_cast<char*>(&app_id_)) + sizeof(create_if_not_found_));
}

CMsgClientLBSFindOrCreateLB::~CMsgClientLBSFindOrCreateLB() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientLBSFindOrCreateLB)
  SharedDtor();
}

void CMsgClientLBSFindOrCreateLB::SharedDtor() {
  leaderboard_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientLBSFindOrCreateLB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientLBSFindOrCreateLB& CMsgClientLBSFindOrCreateLB::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientLBSFindOrCreateLB_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientLBSFindOrCreateLB::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientLBSFindOrCreateLB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    leaderboard_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&create_if_not_found_) -
        reinterpret_cast<char*>(&app_id_)) + sizeof(create_if_not_found_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientLBSFindOrCreateLB::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientLBSFindOrCreateLB*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 leaderboard_sort_method = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_leaderboard_sort_method(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 leaderboard_display_type = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_leaderboard_display_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool create_if_not_found = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_create_if_not_found(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string leaderboard_name = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientLBSFindOrCreateLB.leaderboard_name");
        object = msg->mutable_leaderboard_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientLBSFindOrCreateLB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientLBSFindOrCreateLB)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 leaderboard_sort_method = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_leaderboard_sort_method(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leaderboard_sort_method_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 leaderboard_display_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_leaderboard_display_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leaderboard_display_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool create_if_not_found = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_create_if_not_found(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &create_if_not_found_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string leaderboard_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leaderboard_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->leaderboard_name().data(), static_cast<int>(this->leaderboard_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientLBSFindOrCreateLB.leaderboard_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientLBSFindOrCreateLB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientLBSFindOrCreateLB)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientLBSFindOrCreateLB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientLBSFindOrCreateLB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional int32 leaderboard_sort_method = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->leaderboard_sort_method(), output);
  }

  // optional int32 leaderboard_display_type = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->leaderboard_display_type(), output);
  }

  // optional bool create_if_not_found = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->create_if_not_found(), output);
  }

  // optional string leaderboard_name = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leaderboard_name().data(), static_cast<int>(this->leaderboard_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLBSFindOrCreateLB.leaderboard_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->leaderboard_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientLBSFindOrCreateLB)
}

::google::protobuf::uint8* CMsgClientLBSFindOrCreateLB::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientLBSFindOrCreateLB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional int32 leaderboard_sort_method = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->leaderboard_sort_method(), target);
  }

  // optional int32 leaderboard_display_type = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->leaderboard_display_type(), target);
  }

  // optional bool create_if_not_found = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->create_if_not_found(), target);
  }

  // optional string leaderboard_name = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leaderboard_name().data(), static_cast<int>(this->leaderboard_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLBSFindOrCreateLB.leaderboard_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->leaderboard_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientLBSFindOrCreateLB)
  return target;
}

size_t CMsgClientLBSFindOrCreateLB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientLBSFindOrCreateLB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string leaderboard_name = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leaderboard_name());
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional int32 leaderboard_sort_method = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leaderboard_sort_method());
    }

    // optional int32 leaderboard_display_type = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leaderboard_display_type());
    }

    // optional bool create_if_not_found = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientLBSFindOrCreateLB::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientLBSFindOrCreateLB)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientLBSFindOrCreateLB* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientLBSFindOrCreateLB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientLBSFindOrCreateLB)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientLBSFindOrCreateLB)
    MergeFrom(*source);
  }
}

void CMsgClientLBSFindOrCreateLB::MergeFrom(const CMsgClientLBSFindOrCreateLB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientLBSFindOrCreateLB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      leaderboard_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leaderboard_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      leaderboard_sort_method_ = from.leaderboard_sort_method_;
    }
    if (cached_has_bits & 0x00000008u) {
      leaderboard_display_type_ = from.leaderboard_display_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      create_if_not_found_ = from.create_if_not_found_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientLBSFindOrCreateLB::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientLBSFindOrCreateLB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientLBSFindOrCreateLB::CopyFrom(const CMsgClientLBSFindOrCreateLB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientLBSFindOrCreateLB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLBSFindOrCreateLB::IsInitialized() const {
  return true;
}

void CMsgClientLBSFindOrCreateLB::Swap(CMsgClientLBSFindOrCreateLB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientLBSFindOrCreateLB::InternalSwap(CMsgClientLBSFindOrCreateLB* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  leaderboard_name_.Swap(&other->leaderboard_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(app_id_, other->app_id_);
  swap(leaderboard_sort_method_, other->leaderboard_sort_method_);
  swap(leaderboard_display_type_, other->leaderboard_display_type_);
  swap(create_if_not_found_, other->create_if_not_found_);
}

::google::protobuf::Metadata CMsgClientLBSFindOrCreateLB::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientLBSFindOrCreateLBResponse::InitAsDefaultInstance() {
}
class CMsgClientLBSFindOrCreateLBResponse::HasBitSetters {
 public:
  static void set_has_eresult(CMsgClientLBSFindOrCreateLBResponse* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_leaderboard_id(CMsgClientLBSFindOrCreateLBResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_leaderboard_entry_count(CMsgClientLBSFindOrCreateLBResponse* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_leaderboard_sort_method(CMsgClientLBSFindOrCreateLBResponse* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_leaderboard_display_type(CMsgClientLBSFindOrCreateLBResponse* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_leaderboard_name(CMsgClientLBSFindOrCreateLBResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientLBSFindOrCreateLBResponse::kEresultFieldNumber;
const int CMsgClientLBSFindOrCreateLBResponse::kLeaderboardIdFieldNumber;
const int CMsgClientLBSFindOrCreateLBResponse::kLeaderboardEntryCountFieldNumber;
const int CMsgClientLBSFindOrCreateLBResponse::kLeaderboardSortMethodFieldNumber;
const int CMsgClientLBSFindOrCreateLBResponse::kLeaderboardDisplayTypeFieldNumber;
const int CMsgClientLBSFindOrCreateLBResponse::kLeaderboardNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientLBSFindOrCreateLBResponse::CMsgClientLBSFindOrCreateLBResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientLBSFindOrCreateLBResponse)
}
CMsgClientLBSFindOrCreateLBResponse::CMsgClientLBSFindOrCreateLBResponse(const CMsgClientLBSFindOrCreateLBResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  leaderboard_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_leaderboard_name()) {
    leaderboard_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leaderboard_name_);
  }
  ::memcpy(&leaderboard_id_, &from.leaderboard_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&leaderboard_id_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientLBSFindOrCreateLBResponse)
}

void CMsgClientLBSFindOrCreateLBResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientLBSFindOrCreateLBResponse_steammessages_5fclientserver_2eproto.base);
  leaderboard_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&leaderboard_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leaderboard_display_type_) -
      reinterpret_cast<char*>(&leaderboard_id_)) + sizeof(leaderboard_display_type_));
  eresult_ = 2;
}

CMsgClientLBSFindOrCreateLBResponse::~CMsgClientLBSFindOrCreateLBResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientLBSFindOrCreateLBResponse)
  SharedDtor();
}

void CMsgClientLBSFindOrCreateLBResponse::SharedDtor() {
  leaderboard_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientLBSFindOrCreateLBResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientLBSFindOrCreateLBResponse& CMsgClientLBSFindOrCreateLBResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientLBSFindOrCreateLBResponse_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientLBSFindOrCreateLBResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientLBSFindOrCreateLBResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    leaderboard_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&leaderboard_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&leaderboard_display_type_) -
        reinterpret_cast<char*>(&leaderboard_id_)) + sizeof(leaderboard_display_type_));
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientLBSFindOrCreateLBResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientLBSFindOrCreateLBResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_eresult(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 leaderboard_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_leaderboard_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 leaderboard_entry_count = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_leaderboard_entry_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 leaderboard_sort_method = 4 [default = 0];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_leaderboard_sort_method(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 leaderboard_display_type = 5 [default = 0];
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_leaderboard_display_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string leaderboard_name = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientLBSFindOrCreateLBResponse.leaderboard_name");
        object = msg->mutable_leaderboard_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientLBSFindOrCreateLBResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientLBSFindOrCreateLBResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_eresult(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 leaderboard_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_leaderboard_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leaderboard_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 leaderboard_entry_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_leaderboard_entry_count(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leaderboard_entry_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 leaderboard_sort_method = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_leaderboard_sort_method(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leaderboard_sort_method_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 leaderboard_display_type = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_leaderboard_display_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leaderboard_display_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string leaderboard_name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leaderboard_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->leaderboard_name().data(), static_cast<int>(this->leaderboard_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientLBSFindOrCreateLBResponse.leaderboard_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientLBSFindOrCreateLBResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientLBSFindOrCreateLBResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientLBSFindOrCreateLBResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientLBSFindOrCreateLBResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional int32 leaderboard_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->leaderboard_id(), output);
  }

  // optional int32 leaderboard_entry_count = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->leaderboard_entry_count(), output);
  }

  // optional int32 leaderboard_sort_method = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->leaderboard_sort_method(), output);
  }

  // optional int32 leaderboard_display_type = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->leaderboard_display_type(), output);
  }

  // optional string leaderboard_name = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leaderboard_name().data(), static_cast<int>(this->leaderboard_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLBSFindOrCreateLBResponse.leaderboard_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->leaderboard_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientLBSFindOrCreateLBResponse)
}

::google::protobuf::uint8* CMsgClientLBSFindOrCreateLBResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientLBSFindOrCreateLBResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // optional int32 leaderboard_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->leaderboard_id(), target);
  }

  // optional int32 leaderboard_entry_count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->leaderboard_entry_count(), target);
  }

  // optional int32 leaderboard_sort_method = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->leaderboard_sort_method(), target);
  }

  // optional int32 leaderboard_display_type = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->leaderboard_display_type(), target);
  }

  // optional string leaderboard_name = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leaderboard_name().data(), static_cast<int>(this->leaderboard_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLBSFindOrCreateLBResponse.leaderboard_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->leaderboard_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientLBSFindOrCreateLBResponse)
  return target;
}

size_t CMsgClientLBSFindOrCreateLBResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientLBSFindOrCreateLBResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string leaderboard_name = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leaderboard_name());
    }

    // optional int32 leaderboard_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leaderboard_id());
    }

    // optional int32 leaderboard_entry_count = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leaderboard_entry_count());
    }

    // optional int32 leaderboard_sort_method = 4 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leaderboard_sort_method());
    }

    // optional int32 leaderboard_display_type = 5 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leaderboard_display_type());
    }

    // optional int32 eresult = 1 [default = 2];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientLBSFindOrCreateLBResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientLBSFindOrCreateLBResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientLBSFindOrCreateLBResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientLBSFindOrCreateLBResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientLBSFindOrCreateLBResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientLBSFindOrCreateLBResponse)
    MergeFrom(*source);
  }
}

void CMsgClientLBSFindOrCreateLBResponse::MergeFrom(const CMsgClientLBSFindOrCreateLBResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientLBSFindOrCreateLBResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      leaderboard_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leaderboard_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      leaderboard_id_ = from.leaderboard_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      leaderboard_entry_count_ = from.leaderboard_entry_count_;
    }
    if (cached_has_bits & 0x00000008u) {
      leaderboard_sort_method_ = from.leaderboard_sort_method_;
    }
    if (cached_has_bits & 0x00000010u) {
      leaderboard_display_type_ = from.leaderboard_display_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientLBSFindOrCreateLBResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientLBSFindOrCreateLBResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientLBSFindOrCreateLBResponse::CopyFrom(const CMsgClientLBSFindOrCreateLBResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientLBSFindOrCreateLBResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLBSFindOrCreateLBResponse::IsInitialized() const {
  return true;
}

void CMsgClientLBSFindOrCreateLBResponse::Swap(CMsgClientLBSFindOrCreateLBResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientLBSFindOrCreateLBResponse::InternalSwap(CMsgClientLBSFindOrCreateLBResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  leaderboard_name_.Swap(&other->leaderboard_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(leaderboard_id_, other->leaderboard_id_);
  swap(leaderboard_entry_count_, other->leaderboard_entry_count_);
  swap(leaderboard_sort_method_, other->leaderboard_sort_method_);
  swap(leaderboard_display_type_, other->leaderboard_display_type_);
  swap(eresult_, other->eresult_);
}

::google::protobuf::Metadata CMsgClientLBSFindOrCreateLBResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientLBSGetLBEntries::InitAsDefaultInstance() {
}
class CMsgClientLBSGetLBEntries::HasBitSetters {
 public:
  static void set_has_app_id(CMsgClientLBSGetLBEntries* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_leaderboard_id(CMsgClientLBSGetLBEntries* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_range_start(CMsgClientLBSGetLBEntries* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_range_end(CMsgClientLBSGetLBEntries* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_leaderboard_data_request(CMsgClientLBSGetLBEntries* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientLBSGetLBEntries::kAppIdFieldNumber;
const int CMsgClientLBSGetLBEntries::kLeaderboardIdFieldNumber;
const int CMsgClientLBSGetLBEntries::kRangeStartFieldNumber;
const int CMsgClientLBSGetLBEntries::kRangeEndFieldNumber;
const int CMsgClientLBSGetLBEntries::kLeaderboardDataRequestFieldNumber;
const int CMsgClientLBSGetLBEntries::kSteamidsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientLBSGetLBEntries::CMsgClientLBSGetLBEntries()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientLBSGetLBEntries)
}
CMsgClientLBSGetLBEntries::CMsgClientLBSGetLBEntries(const CMsgClientLBSGetLBEntries& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      steamids_(from.steamids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&leaderboard_data_request_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(leaderboard_data_request_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientLBSGetLBEntries)
}

void CMsgClientLBSGetLBEntries::SharedCtor() {
  ::memset(&app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leaderboard_data_request_) -
      reinterpret_cast<char*>(&app_id_)) + sizeof(leaderboard_data_request_));
}

CMsgClientLBSGetLBEntries::~CMsgClientLBSGetLBEntries() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientLBSGetLBEntries)
  SharedDtor();
}

void CMsgClientLBSGetLBEntries::SharedDtor() {
}

void CMsgClientLBSGetLBEntries::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientLBSGetLBEntries& CMsgClientLBSGetLBEntries::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientLBSGetLBEntries_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientLBSGetLBEntries::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientLBSGetLBEntries)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steamids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&leaderboard_data_request_) -
        reinterpret_cast<char*>(&app_id_)) + sizeof(leaderboard_data_request_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientLBSGetLBEntries::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientLBSGetLBEntries*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 app_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 leaderboard_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_leaderboard_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 range_start = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_range_start(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 range_end = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_range_end(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 leaderboard_data_request = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_leaderboard_data_request(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated fixed64 steamids = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) == 49) {
          do {
            msg->add_steamids(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
            ptr += sizeof(::google::protobuf::uint64);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 49 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedFixed64Parser;
        object = msg->mutable_steamids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientLBSGetLBEntries::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientLBSGetLBEntries)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 leaderboard_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_leaderboard_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leaderboard_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 range_start = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_range_start(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &range_start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 range_end = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_range_end(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &range_end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 leaderboard_data_request = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_leaderboard_data_request(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leaderboard_data_request_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed64 steamids = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (49 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 49u, input, this->mutable_steamids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_steamids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientLBSGetLBEntries)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientLBSGetLBEntries)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientLBSGetLBEntries::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientLBSGetLBEntries)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->app_id(), output);
  }

  // optional int32 leaderboard_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->leaderboard_id(), output);
  }

  // optional int32 range_start = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->range_start(), output);
  }

  // optional int32 range_end = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->range_end(), output);
  }

  // optional int32 leaderboard_data_request = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->leaderboard_data_request(), output);
  }

  // repeated fixed64 steamids = 6;
  for (int i = 0, n = this->steamids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      6, this->steamids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientLBSGetLBEntries)
}

::google::protobuf::uint8* CMsgClientLBSGetLBEntries::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientLBSGetLBEntries)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->app_id(), target);
  }

  // optional int32 leaderboard_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->leaderboard_id(), target);
  }

  // optional int32 range_start = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->range_start(), target);
  }

  // optional int32 range_end = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->range_end(), target);
  }

  // optional int32 leaderboard_data_request = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->leaderboard_data_request(), target);
  }

  // repeated fixed64 steamids = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed64ToArray(6, this->steamids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientLBSGetLBEntries)
  return target;
}

size_t CMsgClientLBSGetLBEntries::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientLBSGetLBEntries)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 steamids = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->steamids_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->steamids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int32 app_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->app_id());
    }

    // optional int32 leaderboard_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leaderboard_id());
    }

    // optional int32 range_start = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->range_start());
    }

    // optional int32 range_end = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->range_end());
    }

    // optional int32 leaderboard_data_request = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leaderboard_data_request());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientLBSGetLBEntries::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientLBSGetLBEntries)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientLBSGetLBEntries* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientLBSGetLBEntries>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientLBSGetLBEntries)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientLBSGetLBEntries)
    MergeFrom(*source);
  }
}

void CMsgClientLBSGetLBEntries::MergeFrom(const CMsgClientLBSGetLBEntries& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientLBSGetLBEntries)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  steamids_.MergeFrom(from.steamids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      leaderboard_id_ = from.leaderboard_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      range_start_ = from.range_start_;
    }
    if (cached_has_bits & 0x00000008u) {
      range_end_ = from.range_end_;
    }
    if (cached_has_bits & 0x00000010u) {
      leaderboard_data_request_ = from.leaderboard_data_request_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientLBSGetLBEntries::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientLBSGetLBEntries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientLBSGetLBEntries::CopyFrom(const CMsgClientLBSGetLBEntries& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientLBSGetLBEntries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLBSGetLBEntries::IsInitialized() const {
  return true;
}

void CMsgClientLBSGetLBEntries::Swap(CMsgClientLBSGetLBEntries* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientLBSGetLBEntries::InternalSwap(CMsgClientLBSGetLBEntries* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  steamids_.InternalSwap(&other->steamids_);
  swap(app_id_, other->app_id_);
  swap(leaderboard_id_, other->leaderboard_id_);
  swap(range_start_, other->range_start_);
  swap(range_end_, other->range_end_);
  swap(leaderboard_data_request_, other->leaderboard_data_request_);
}

::google::protobuf::Metadata CMsgClientLBSGetLBEntries::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientLBSGetLBEntriesResponse_Entry::InitAsDefaultInstance() {
}
class CMsgClientLBSGetLBEntriesResponse_Entry::HasBitSetters {
 public:
  static void set_has_steam_id_user(CMsgClientLBSGetLBEntriesResponse_Entry* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_global_rank(CMsgClientLBSGetLBEntriesResponse_Entry* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_score(CMsgClientLBSGetLBEntriesResponse_Entry* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_details(CMsgClientLBSGetLBEntriesResponse_Entry* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_ugc_id(CMsgClientLBSGetLBEntriesResponse_Entry* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientLBSGetLBEntriesResponse_Entry::kSteamIdUserFieldNumber;
const int CMsgClientLBSGetLBEntriesResponse_Entry::kGlobalRankFieldNumber;
const int CMsgClientLBSGetLBEntriesResponse_Entry::kScoreFieldNumber;
const int CMsgClientLBSGetLBEntriesResponse_Entry::kDetailsFieldNumber;
const int CMsgClientLBSGetLBEntriesResponse_Entry::kUgcIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientLBSGetLBEntriesResponse_Entry::CMsgClientLBSGetLBEntriesResponse_Entry()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientLBSGetLBEntriesResponse.Entry)
}
CMsgClientLBSGetLBEntriesResponse_Entry::CMsgClientLBSGetLBEntriesResponse_Entry(const CMsgClientLBSGetLBEntriesResponse_Entry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  details_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_details()) {
    details_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.details_);
  }
  ::memcpy(&steam_id_user_, &from.steam_id_user_,
    static_cast<size_t>(reinterpret_cast<char*>(&ugc_id_) -
    reinterpret_cast<char*>(&steam_id_user_)) + sizeof(ugc_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientLBSGetLBEntriesResponse.Entry)
}

void CMsgClientLBSGetLBEntriesResponse_Entry::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientLBSGetLBEntriesResponse_Entry_steammessages_5fclientserver_2eproto.base);
  details_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steam_id_user_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ugc_id_) -
      reinterpret_cast<char*>(&steam_id_user_)) + sizeof(ugc_id_));
}

CMsgClientLBSGetLBEntriesResponse_Entry::~CMsgClientLBSGetLBEntriesResponse_Entry() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientLBSGetLBEntriesResponse.Entry)
  SharedDtor();
}

void CMsgClientLBSGetLBEntriesResponse_Entry::SharedDtor() {
  details_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientLBSGetLBEntriesResponse_Entry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientLBSGetLBEntriesResponse_Entry& CMsgClientLBSGetLBEntriesResponse_Entry::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientLBSGetLBEntriesResponse_Entry_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientLBSGetLBEntriesResponse_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientLBSGetLBEntriesResponse.Entry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    details_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&steam_id_user_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ugc_id_) -
        reinterpret_cast<char*>(&steam_id_user_)) + sizeof(ugc_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientLBSGetLBEntriesResponse_Entry::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientLBSGetLBEntriesResponse_Entry*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steam_id_user = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steam_id_user(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional int32 global_rank = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_global_rank(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 score = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_score(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes details = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_details();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional fixed64 ugc_id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 41) goto handle_unusual;
        msg->set_ugc_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientLBSGetLBEntriesResponse_Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientLBSGetLBEntriesResponse.Entry)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id_user = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steam_id_user(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_user_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 global_rank = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_global_rank(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &global_rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 score = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_score(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes details = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_details()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 ugc_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (41 & 0xFF)) {
          HasBitSetters::set_has_ugc_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &ugc_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientLBSGetLBEntriesResponse.Entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientLBSGetLBEntriesResponse.Entry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientLBSGetLBEntriesResponse_Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientLBSGetLBEntriesResponse.Entry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id_user = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id_user(), output);
  }

  // optional int32 global_rank = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->global_rank(), output);
  }

  // optional int32 score = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->score(), output);
  }

  // optional bytes details = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->details(), output);
  }

  // optional fixed64 ugc_id = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->ugc_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientLBSGetLBEntriesResponse.Entry)
}

::google::protobuf::uint8* CMsgClientLBSGetLBEntriesResponse_Entry::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientLBSGetLBEntriesResponse.Entry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id_user = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id_user(), target);
  }

  // optional int32 global_rank = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->global_rank(), target);
  }

  // optional int32 score = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->score(), target);
  }

  // optional bytes details = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->details(), target);
  }

  // optional fixed64 ugc_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->ugc_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientLBSGetLBEntriesResponse.Entry)
  return target;
}

size_t CMsgClientLBSGetLBEntriesResponse_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientLBSGetLBEntriesResponse.Entry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes details = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->details());
    }

    // optional fixed64 steam_id_user = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional int32 global_rank = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->global_rank());
    }

    // optional int32 score = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional fixed64 ugc_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientLBSGetLBEntriesResponse_Entry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientLBSGetLBEntriesResponse.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientLBSGetLBEntriesResponse_Entry* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientLBSGetLBEntriesResponse_Entry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientLBSGetLBEntriesResponse.Entry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientLBSGetLBEntriesResponse.Entry)
    MergeFrom(*source);
  }
}

void CMsgClientLBSGetLBEntriesResponse_Entry::MergeFrom(const CMsgClientLBSGetLBEntriesResponse_Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientLBSGetLBEntriesResponse.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      details_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.details_);
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_user_ = from.steam_id_user_;
    }
    if (cached_has_bits & 0x00000004u) {
      global_rank_ = from.global_rank_;
    }
    if (cached_has_bits & 0x00000008u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000010u) {
      ugc_id_ = from.ugc_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientLBSGetLBEntriesResponse_Entry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientLBSGetLBEntriesResponse.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientLBSGetLBEntriesResponse_Entry::CopyFrom(const CMsgClientLBSGetLBEntriesResponse_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientLBSGetLBEntriesResponse.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLBSGetLBEntriesResponse_Entry::IsInitialized() const {
  return true;
}

void CMsgClientLBSGetLBEntriesResponse_Entry::Swap(CMsgClientLBSGetLBEntriesResponse_Entry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientLBSGetLBEntriesResponse_Entry::InternalSwap(CMsgClientLBSGetLBEntriesResponse_Entry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  details_.Swap(&other->details_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(steam_id_user_, other->steam_id_user_);
  swap(global_rank_, other->global_rank_);
  swap(score_, other->score_);
  swap(ugc_id_, other->ugc_id_);
}

::google::protobuf::Metadata CMsgClientLBSGetLBEntriesResponse_Entry::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientLBSGetLBEntriesResponse::InitAsDefaultInstance() {
}
class CMsgClientLBSGetLBEntriesResponse::HasBitSetters {
 public:
  static void set_has_eresult(CMsgClientLBSGetLBEntriesResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_leaderboard_entry_count(CMsgClientLBSGetLBEntriesResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientLBSGetLBEntriesResponse::kEresultFieldNumber;
const int CMsgClientLBSGetLBEntriesResponse::kLeaderboardEntryCountFieldNumber;
const int CMsgClientLBSGetLBEntriesResponse::kEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientLBSGetLBEntriesResponse::CMsgClientLBSGetLBEntriesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientLBSGetLBEntriesResponse)
}
CMsgClientLBSGetLBEntriesResponse::CMsgClientLBSGetLBEntriesResponse(const CMsgClientLBSGetLBEntriesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&leaderboard_entry_count_, &from.leaderboard_entry_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&leaderboard_entry_count_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientLBSGetLBEntriesResponse)
}

void CMsgClientLBSGetLBEntriesResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientLBSGetLBEntriesResponse_steammessages_5fclientserver_2eproto.base);
  leaderboard_entry_count_ = 0;
  eresult_ = 2;
}

CMsgClientLBSGetLBEntriesResponse::~CMsgClientLBSGetLBEntriesResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientLBSGetLBEntriesResponse)
  SharedDtor();
}

void CMsgClientLBSGetLBEntriesResponse::SharedDtor() {
}

void CMsgClientLBSGetLBEntriesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientLBSGetLBEntriesResponse& CMsgClientLBSGetLBEntriesResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientLBSGetLBEntriesResponse_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientLBSGetLBEntriesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientLBSGetLBEntriesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    leaderboard_entry_count_ = 0;
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientLBSGetLBEntriesResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientLBSGetLBEntriesResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_eresult(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 leaderboard_entry_count = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_leaderboard_entry_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.steam.CMsgClientLBSGetLBEntriesResponse.Entry entries = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgClientLBSGetLBEntriesResponse_Entry::_InternalParse;
          object = msg->add_entries();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientLBSGetLBEntriesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientLBSGetLBEntriesResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_eresult(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 leaderboard_entry_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_leaderboard_entry_count(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leaderboard_entry_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgClientLBSGetLBEntriesResponse.Entry entries = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientLBSGetLBEntriesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientLBSGetLBEntriesResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientLBSGetLBEntriesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientLBSGetLBEntriesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional int32 leaderboard_entry_count = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->leaderboard_entry_count(), output);
  }

  // repeated .proto.steam.CMsgClientLBSGetLBEntriesResponse.Entry entries = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->entries(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientLBSGetLBEntriesResponse)
}

::google::protobuf::uint8* CMsgClientLBSGetLBEntriesResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientLBSGetLBEntriesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // optional int32 leaderboard_entry_count = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->leaderboard_entry_count(), target);
  }

  // repeated .proto.steam.CMsgClientLBSGetLBEntriesResponse.Entry entries = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->entries(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientLBSGetLBEntriesResponse)
  return target;
}

size_t CMsgClientLBSGetLBEntriesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientLBSGetLBEntriesResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientLBSGetLBEntriesResponse.Entry entries = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->entries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->entries(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 leaderboard_entry_count = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leaderboard_entry_count());
    }

    // optional int32 eresult = 1 [default = 2];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientLBSGetLBEntriesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientLBSGetLBEntriesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientLBSGetLBEntriesResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientLBSGetLBEntriesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientLBSGetLBEntriesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientLBSGetLBEntriesResponse)
    MergeFrom(*source);
  }
}

void CMsgClientLBSGetLBEntriesResponse::MergeFrom(const CMsgClientLBSGetLBEntriesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientLBSGetLBEntriesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      leaderboard_entry_count_ = from.leaderboard_entry_count_;
    }
    if (cached_has_bits & 0x00000002u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientLBSGetLBEntriesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientLBSGetLBEntriesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientLBSGetLBEntriesResponse::CopyFrom(const CMsgClientLBSGetLBEntriesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientLBSGetLBEntriesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLBSGetLBEntriesResponse::IsInitialized() const {
  return true;
}

void CMsgClientLBSGetLBEntriesResponse::Swap(CMsgClientLBSGetLBEntriesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientLBSGetLBEntriesResponse::InternalSwap(CMsgClientLBSGetLBEntriesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&entries_)->InternalSwap(CastToBase(&other->entries_));
  swap(leaderboard_entry_count_, other->leaderboard_entry_count_);
  swap(eresult_, other->eresult_);
}

::google::protobuf::Metadata CMsgClientLBSGetLBEntriesResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::InitAsDefaultInstance() {
}
class CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::HasBitSetters {
 public:
  static void set_has_app_id(CMsgClientAppMinutesPlayedData_AppMinutesPlayedData* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_forever(CMsgClientAppMinutesPlayedData_AppMinutesPlayedData* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_last_two_weeks(CMsgClientAppMinutesPlayedData_AppMinutesPlayedData* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::kAppIdFieldNumber;
const int CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::kForeverFieldNumber;
const int CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::kLastTwoWeeksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::CMsgClientAppMinutesPlayedData_AppMinutesPlayedData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientAppMinutesPlayedData.AppMinutesPlayedData)
}
CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::CMsgClientAppMinutesPlayedData_AppMinutesPlayedData(const CMsgClientAppMinutesPlayedData_AppMinutesPlayedData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_two_weeks_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(last_two_weeks_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientAppMinutesPlayedData.AppMinutesPlayedData)
}

void CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::SharedCtor() {
  ::memset(&app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_two_weeks_) -
      reinterpret_cast<char*>(&app_id_)) + sizeof(last_two_weeks_));
}

CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::~CMsgClientAppMinutesPlayedData_AppMinutesPlayedData() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientAppMinutesPlayedData.AppMinutesPlayedData)
  SharedDtor();
}

void CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::SharedDtor() {
}

void CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientAppMinutesPlayedData_AppMinutesPlayedData& CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientAppMinutesPlayedData_AppMinutesPlayedData_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientAppMinutesPlayedData.AppMinutesPlayedData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_two_weeks_) -
        reinterpret_cast<char*>(&app_id_)) + sizeof(last_two_weeks_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientAppMinutesPlayedData_AppMinutesPlayedData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 forever = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_forever(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 last_two_weeks = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_last_two_weeks(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientAppMinutesPlayedData.AppMinutesPlayedData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 forever = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_forever(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &forever_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 last_two_weeks = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_last_two_weeks(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_two_weeks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientAppMinutesPlayedData.AppMinutesPlayedData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientAppMinutesPlayedData.AppMinutesPlayedData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientAppMinutesPlayedData.AppMinutesPlayedData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional int32 forever = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->forever(), output);
  }

  // optional int32 last_two_weeks = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->last_two_weeks(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientAppMinutesPlayedData.AppMinutesPlayedData)
}

::google::protobuf::uint8* CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientAppMinutesPlayedData.AppMinutesPlayedData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional int32 forever = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->forever(), target);
  }

  // optional int32 last_two_weeks = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->last_two_weeks(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientAppMinutesPlayedData.AppMinutesPlayedData)
  return target;
}

size_t CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientAppMinutesPlayedData.AppMinutesPlayedData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional int32 forever = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->forever());
    }

    // optional int32 last_two_weeks = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->last_two_weeks());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientAppMinutesPlayedData.AppMinutesPlayedData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientAppMinutesPlayedData_AppMinutesPlayedData* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientAppMinutesPlayedData_AppMinutesPlayedData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientAppMinutesPlayedData.AppMinutesPlayedData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientAppMinutesPlayedData.AppMinutesPlayedData)
    MergeFrom(*source);
  }
}

void CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::MergeFrom(const CMsgClientAppMinutesPlayedData_AppMinutesPlayedData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientAppMinutesPlayedData.AppMinutesPlayedData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      forever_ = from.forever_;
    }
    if (cached_has_bits & 0x00000004u) {
      last_two_weeks_ = from.last_two_weeks_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientAppMinutesPlayedData.AppMinutesPlayedData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::CopyFrom(const CMsgClientAppMinutesPlayedData_AppMinutesPlayedData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientAppMinutesPlayedData.AppMinutesPlayedData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::IsInitialized() const {
  return true;
}

void CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::Swap(CMsgClientAppMinutesPlayedData_AppMinutesPlayedData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::InternalSwap(CMsgClientAppMinutesPlayedData_AppMinutesPlayedData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(app_id_, other->app_id_);
  swap(forever_, other->forever_);
  swap(last_two_weeks_, other->last_two_weeks_);
}

::google::protobuf::Metadata CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientAppMinutesPlayedData::InitAsDefaultInstance() {
}
class CMsgClientAppMinutesPlayedData::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientAppMinutesPlayedData::kMinutesPlayedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientAppMinutesPlayedData::CMsgClientAppMinutesPlayedData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientAppMinutesPlayedData)
}
CMsgClientAppMinutesPlayedData::CMsgClientAppMinutesPlayedData(const CMsgClientAppMinutesPlayedData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      minutes_played_(from.minutes_played_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientAppMinutesPlayedData)
}

void CMsgClientAppMinutesPlayedData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientAppMinutesPlayedData_steammessages_5fclientserver_2eproto.base);
}

CMsgClientAppMinutesPlayedData::~CMsgClientAppMinutesPlayedData() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientAppMinutesPlayedData)
  SharedDtor();
}

void CMsgClientAppMinutesPlayedData::SharedDtor() {
}

void CMsgClientAppMinutesPlayedData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientAppMinutesPlayedData& CMsgClientAppMinutesPlayedData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientAppMinutesPlayedData_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientAppMinutesPlayedData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientAppMinutesPlayedData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  minutes_played_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientAppMinutesPlayedData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientAppMinutesPlayedData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.steam.CMsgClientAppMinutesPlayedData.AppMinutesPlayedData minutes_played = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::_InternalParse;
          object = msg->add_minutes_played();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientAppMinutesPlayedData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientAppMinutesPlayedData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CMsgClientAppMinutesPlayedData.AppMinutesPlayedData minutes_played = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_minutes_played()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientAppMinutesPlayedData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientAppMinutesPlayedData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientAppMinutesPlayedData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientAppMinutesPlayedData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientAppMinutesPlayedData.AppMinutesPlayedData minutes_played = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->minutes_played_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->minutes_played(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientAppMinutesPlayedData)
}

::google::protobuf::uint8* CMsgClientAppMinutesPlayedData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientAppMinutesPlayedData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientAppMinutesPlayedData.AppMinutesPlayedData minutes_played = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->minutes_played_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->minutes_played(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientAppMinutesPlayedData)
  return target;
}

size_t CMsgClientAppMinutesPlayedData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientAppMinutesPlayedData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientAppMinutesPlayedData.AppMinutesPlayedData minutes_played = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->minutes_played_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->minutes_played(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientAppMinutesPlayedData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientAppMinutesPlayedData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientAppMinutesPlayedData* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientAppMinutesPlayedData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientAppMinutesPlayedData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientAppMinutesPlayedData)
    MergeFrom(*source);
  }
}

void CMsgClientAppMinutesPlayedData::MergeFrom(const CMsgClientAppMinutesPlayedData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientAppMinutesPlayedData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  minutes_played_.MergeFrom(from.minutes_played_);
}

void CMsgClientAppMinutesPlayedData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientAppMinutesPlayedData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAppMinutesPlayedData::CopyFrom(const CMsgClientAppMinutesPlayedData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientAppMinutesPlayedData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAppMinutesPlayedData::IsInitialized() const {
  return true;
}

void CMsgClientAppMinutesPlayedData::Swap(CMsgClientAppMinutesPlayedData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientAppMinutesPlayedData::InternalSwap(CMsgClientAppMinutesPlayedData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&minutes_played_)->InternalSwap(CastToBase(&other->minutes_played_));
}

::google::protobuf::Metadata CMsgClientAppMinutesPlayedData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientIsLimitedAccount::InitAsDefaultInstance() {
}
class CMsgClientIsLimitedAccount::HasBitSetters {
 public:
  static void set_has_bis_limited_account(CMsgClientIsLimitedAccount* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_bis_community_banned(CMsgClientIsLimitedAccount* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_bis_locked_account(CMsgClientIsLimitedAccount* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_bis_limited_account_allowed_to_invite_friends(CMsgClientIsLimitedAccount* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientIsLimitedAccount::kBisLimitedAccountFieldNumber;
const int CMsgClientIsLimitedAccount::kBisCommunityBannedFieldNumber;
const int CMsgClientIsLimitedAccount::kBisLockedAccountFieldNumber;
const int CMsgClientIsLimitedAccount::kBisLimitedAccountAllowedToInviteFriendsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientIsLimitedAccount::CMsgClientIsLimitedAccount()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientIsLimitedAccount)
}
CMsgClientIsLimitedAccount::CMsgClientIsLimitedAccount(const CMsgClientIsLimitedAccount& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bis_limited_account_, &from.bis_limited_account_,
    static_cast<size_t>(reinterpret_cast<char*>(&bis_limited_account_allowed_to_invite_friends_) -
    reinterpret_cast<char*>(&bis_limited_account_)) + sizeof(bis_limited_account_allowed_to_invite_friends_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientIsLimitedAccount)
}

void CMsgClientIsLimitedAccount::SharedCtor() {
  ::memset(&bis_limited_account_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bis_limited_account_allowed_to_invite_friends_) -
      reinterpret_cast<char*>(&bis_limited_account_)) + sizeof(bis_limited_account_allowed_to_invite_friends_));
}

CMsgClientIsLimitedAccount::~CMsgClientIsLimitedAccount() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientIsLimitedAccount)
  SharedDtor();
}

void CMsgClientIsLimitedAccount::SharedDtor() {
}

void CMsgClientIsLimitedAccount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientIsLimitedAccount& CMsgClientIsLimitedAccount::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientIsLimitedAccount_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientIsLimitedAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientIsLimitedAccount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&bis_limited_account_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bis_limited_account_allowed_to_invite_friends_) -
      reinterpret_cast<char*>(&bis_limited_account_)) + sizeof(bis_limited_account_allowed_to_invite_friends_));
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientIsLimitedAccount::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientIsLimitedAccount*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool bis_limited_account = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_bis_limited_account(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool bis_community_banned = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_bis_community_banned(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool bis_locked_account = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_bis_locked_account(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool bis_limited_account_allowed_to_invite_friends = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_bis_limited_account_allowed_to_invite_friends(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientIsLimitedAccount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientIsLimitedAccount)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool bis_limited_account = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_bis_limited_account(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bis_limited_account_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bis_community_banned = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_bis_community_banned(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bis_community_banned_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bis_locked_account = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_bis_locked_account(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bis_locked_account_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bis_limited_account_allowed_to_invite_friends = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_bis_limited_account_allowed_to_invite_friends(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bis_limited_account_allowed_to_invite_friends_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientIsLimitedAccount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientIsLimitedAccount)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientIsLimitedAccount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientIsLimitedAccount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bis_limited_account = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->bis_limited_account(), output);
  }

  // optional bool bis_community_banned = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bis_community_banned(), output);
  }

  // optional bool bis_locked_account = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bis_locked_account(), output);
  }

  // optional bool bis_limited_account_allowed_to_invite_friends = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->bis_limited_account_allowed_to_invite_friends(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientIsLimitedAccount)
}

::google::protobuf::uint8* CMsgClientIsLimitedAccount::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientIsLimitedAccount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bis_limited_account = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->bis_limited_account(), target);
  }

  // optional bool bis_community_banned = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bis_community_banned(), target);
  }

  // optional bool bis_locked_account = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->bis_locked_account(), target);
  }

  // optional bool bis_limited_account_allowed_to_invite_friends = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->bis_limited_account_allowed_to_invite_friends(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientIsLimitedAccount)
  return target;
}

size_t CMsgClientIsLimitedAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientIsLimitedAccount)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bool bis_limited_account = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool bis_community_banned = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool bis_locked_account = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool bis_limited_account_allowed_to_invite_friends = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientIsLimitedAccount::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientIsLimitedAccount)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientIsLimitedAccount* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientIsLimitedAccount>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientIsLimitedAccount)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientIsLimitedAccount)
    MergeFrom(*source);
  }
}

void CMsgClientIsLimitedAccount::MergeFrom(const CMsgClientIsLimitedAccount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientIsLimitedAccount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      bis_limited_account_ = from.bis_limited_account_;
    }
    if (cached_has_bits & 0x00000002u) {
      bis_community_banned_ = from.bis_community_banned_;
    }
    if (cached_has_bits & 0x00000004u) {
      bis_locked_account_ = from.bis_locked_account_;
    }
    if (cached_has_bits & 0x00000008u) {
      bis_limited_account_allowed_to_invite_friends_ = from.bis_limited_account_allowed_to_invite_friends_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientIsLimitedAccount::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientIsLimitedAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientIsLimitedAccount::CopyFrom(const CMsgClientIsLimitedAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientIsLimitedAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientIsLimitedAccount::IsInitialized() const {
  return true;
}

void CMsgClientIsLimitedAccount::Swap(CMsgClientIsLimitedAccount* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientIsLimitedAccount::InternalSwap(CMsgClientIsLimitedAccount* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bis_limited_account_, other->bis_limited_account_);
  swap(bis_community_banned_, other->bis_community_banned_);
  swap(bis_locked_account_, other->bis_locked_account_);
  swap(bis_limited_account_allowed_to_invite_friends_, other->bis_limited_account_allowed_to_invite_friends_);
}

::google::protobuf::Metadata CMsgClientIsLimitedAccount::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientServerList_Server::InitAsDefaultInstance() {
}
class CMsgClientServerList_Server::HasBitSetters {
 public:
  static void set_has_server_type(CMsgClientServerList_Server* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_server_ip(CMsgClientServerList_Server* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_server_port(CMsgClientServerList_Server* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientServerList_Server::kServerTypeFieldNumber;
const int CMsgClientServerList_Server::kServerIpFieldNumber;
const int CMsgClientServerList_Server::kServerPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientServerList_Server::CMsgClientServerList_Server()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientServerList.Server)
}
CMsgClientServerList_Server::CMsgClientServerList_Server(const CMsgClientServerList_Server& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&server_type_, &from.server_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&server_port_) -
    reinterpret_cast<char*>(&server_type_)) + sizeof(server_port_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientServerList.Server)
}

void CMsgClientServerList_Server::SharedCtor() {
  ::memset(&server_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_port_) -
      reinterpret_cast<char*>(&server_type_)) + sizeof(server_port_));
}

CMsgClientServerList_Server::~CMsgClientServerList_Server() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientServerList.Server)
  SharedDtor();
}

void CMsgClientServerList_Server::SharedDtor() {
}

void CMsgClientServerList_Server::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientServerList_Server& CMsgClientServerList_Server::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientServerList_Server_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientServerList_Server::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientServerList.Server)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&server_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&server_port_) -
        reinterpret_cast<char*>(&server_type_)) + sizeof(server_port_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientServerList_Server::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientServerList_Server*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 server_type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_server_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 server_ip = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_server_ip(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 server_port = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_server_port(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientServerList_Server::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientServerList.Server)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_server_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 server_ip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_server_ip(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 server_port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_server_port(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientServerList.Server)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientServerList.Server)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientServerList_Server::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientServerList.Server)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 server_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_type(), output);
  }

  // optional uint32 server_ip = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->server_ip(), output);
  }

  // optional uint32 server_port = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->server_port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientServerList.Server)
}

::google::protobuf::uint8* CMsgClientServerList_Server::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientServerList.Server)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 server_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_type(), target);
  }

  // optional uint32 server_ip = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->server_ip(), target);
  }

  // optional uint32 server_port = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->server_port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientServerList.Server)
  return target;
}

size_t CMsgClientServerList_Server::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientServerList.Server)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 server_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_type());
    }

    // optional uint32 server_ip = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_ip());
    }

    // optional uint32 server_port = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_port());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientServerList_Server::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientServerList.Server)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientServerList_Server* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientServerList_Server>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientServerList.Server)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientServerList.Server)
    MergeFrom(*source);
  }
}

void CMsgClientServerList_Server::MergeFrom(const CMsgClientServerList_Server& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientServerList.Server)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      server_type_ = from.server_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      server_ip_ = from.server_ip_;
    }
    if (cached_has_bits & 0x00000004u) {
      server_port_ = from.server_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientServerList_Server::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientServerList.Server)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientServerList_Server::CopyFrom(const CMsgClientServerList_Server& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientServerList.Server)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientServerList_Server::IsInitialized() const {
  return true;
}

void CMsgClientServerList_Server::Swap(CMsgClientServerList_Server* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientServerList_Server::InternalSwap(CMsgClientServerList_Server* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(server_type_, other->server_type_);
  swap(server_ip_, other->server_ip_);
  swap(server_port_, other->server_port_);
}

::google::protobuf::Metadata CMsgClientServerList_Server::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientServerList::InitAsDefaultInstance() {
}
class CMsgClientServerList::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientServerList::kServersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientServerList::CMsgClientServerList()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientServerList)
}
CMsgClientServerList::CMsgClientServerList(const CMsgClientServerList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      servers_(from.servers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientServerList)
}

void CMsgClientServerList::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientServerList_steammessages_5fclientserver_2eproto.base);
}

CMsgClientServerList::~CMsgClientServerList() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientServerList)
  SharedDtor();
}

void CMsgClientServerList::SharedDtor() {
}

void CMsgClientServerList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientServerList& CMsgClientServerList::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientServerList_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientServerList::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientServerList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  servers_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientServerList::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientServerList*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.steam.CMsgClientServerList.Server servers = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgClientServerList_Server::_InternalParse;
          object = msg->add_servers();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientServerList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientServerList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CMsgClientServerList.Server servers = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_servers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientServerList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientServerList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientServerList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientServerList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientServerList.Server servers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->servers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->servers(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientServerList)
}

::google::protobuf::uint8* CMsgClientServerList::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientServerList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientServerList.Server servers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->servers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->servers(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientServerList)
  return target;
}

size_t CMsgClientServerList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientServerList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientServerList.Server servers = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->servers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->servers(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientServerList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientServerList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientServerList* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientServerList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientServerList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientServerList)
    MergeFrom(*source);
  }
}

void CMsgClientServerList::MergeFrom(const CMsgClientServerList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientServerList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  servers_.MergeFrom(from.servers_);
}

void CMsgClientServerList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientServerList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientServerList::CopyFrom(const CMsgClientServerList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientServerList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientServerList::IsInitialized() const {
  return true;
}

void CMsgClientServerList::Swap(CMsgClientServerList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientServerList::InternalSwap(CMsgClientServerList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&servers_)->InternalSwap(CastToBase(&other->servers_));
}

::google::protobuf::Metadata CMsgClientServerList::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientRequestedClientStats_StatsToSend::InitAsDefaultInstance() {
}
class CMsgClientRequestedClientStats_StatsToSend::HasBitSetters {
 public:
  static void set_has_client_stat(CMsgClientRequestedClientStats_StatsToSend* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_stat_aggregate_method(CMsgClientRequestedClientStats_StatsToSend* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientRequestedClientStats_StatsToSend::kClientStatFieldNumber;
const int CMsgClientRequestedClientStats_StatsToSend::kStatAggregateMethodFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientRequestedClientStats_StatsToSend::CMsgClientRequestedClientStats_StatsToSend()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientRequestedClientStats.StatsToSend)
}
CMsgClientRequestedClientStats_StatsToSend::CMsgClientRequestedClientStats_StatsToSend(const CMsgClientRequestedClientStats_StatsToSend& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&client_stat_, &from.client_stat_,
    static_cast<size_t>(reinterpret_cast<char*>(&stat_aggregate_method_) -
    reinterpret_cast<char*>(&client_stat_)) + sizeof(stat_aggregate_method_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientRequestedClientStats.StatsToSend)
}

void CMsgClientRequestedClientStats_StatsToSend::SharedCtor() {
  ::memset(&client_stat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stat_aggregate_method_) -
      reinterpret_cast<char*>(&client_stat_)) + sizeof(stat_aggregate_method_));
}

CMsgClientRequestedClientStats_StatsToSend::~CMsgClientRequestedClientStats_StatsToSend() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientRequestedClientStats.StatsToSend)
  SharedDtor();
}

void CMsgClientRequestedClientStats_StatsToSend::SharedDtor() {
}

void CMsgClientRequestedClientStats_StatsToSend::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientRequestedClientStats_StatsToSend& CMsgClientRequestedClientStats_StatsToSend::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientRequestedClientStats_StatsToSend_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientRequestedClientStats_StatsToSend::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientRequestedClientStats.StatsToSend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&client_stat_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stat_aggregate_method_) -
        reinterpret_cast<char*>(&client_stat_)) + sizeof(stat_aggregate_method_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientRequestedClientStats_StatsToSend::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientRequestedClientStats_StatsToSend*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 client_stat = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_client_stat(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 stat_aggregate_method = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_stat_aggregate_method(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientRequestedClientStats_StatsToSend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientRequestedClientStats.StatsToSend)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 client_stat = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_client_stat(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_stat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 stat_aggregate_method = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_stat_aggregate_method(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stat_aggregate_method_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientRequestedClientStats.StatsToSend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientRequestedClientStats.StatsToSend)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientRequestedClientStats_StatsToSend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientRequestedClientStats.StatsToSend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 client_stat = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->client_stat(), output);
  }

  // optional uint32 stat_aggregate_method = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stat_aggregate_method(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientRequestedClientStats.StatsToSend)
}

::google::protobuf::uint8* CMsgClientRequestedClientStats_StatsToSend::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientRequestedClientStats.StatsToSend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 client_stat = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->client_stat(), target);
  }

  // optional uint32 stat_aggregate_method = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->stat_aggregate_method(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientRequestedClientStats.StatsToSend)
  return target;
}

size_t CMsgClientRequestedClientStats_StatsToSend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientRequestedClientStats.StatsToSend)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 client_stat = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_stat());
    }

    // optional uint32 stat_aggregate_method = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stat_aggregate_method());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientRequestedClientStats_StatsToSend::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientRequestedClientStats.StatsToSend)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientRequestedClientStats_StatsToSend* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientRequestedClientStats_StatsToSend>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientRequestedClientStats.StatsToSend)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientRequestedClientStats.StatsToSend)
    MergeFrom(*source);
  }
}

void CMsgClientRequestedClientStats_StatsToSend::MergeFrom(const CMsgClientRequestedClientStats_StatsToSend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientRequestedClientStats.StatsToSend)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      client_stat_ = from.client_stat_;
    }
    if (cached_has_bits & 0x00000002u) {
      stat_aggregate_method_ = from.stat_aggregate_method_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientRequestedClientStats_StatsToSend::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientRequestedClientStats.StatsToSend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientRequestedClientStats_StatsToSend::CopyFrom(const CMsgClientRequestedClientStats_StatsToSend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientRequestedClientStats.StatsToSend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRequestedClientStats_StatsToSend::IsInitialized() const {
  return true;
}

void CMsgClientRequestedClientStats_StatsToSend::Swap(CMsgClientRequestedClientStats_StatsToSend* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientRequestedClientStats_StatsToSend::InternalSwap(CMsgClientRequestedClientStats_StatsToSend* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(client_stat_, other->client_stat_);
  swap(stat_aggregate_method_, other->stat_aggregate_method_);
}

::google::protobuf::Metadata CMsgClientRequestedClientStats_StatsToSend::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientRequestedClientStats::InitAsDefaultInstance() {
}
class CMsgClientRequestedClientStats::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientRequestedClientStats::kStatsToSendFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientRequestedClientStats::CMsgClientRequestedClientStats()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientRequestedClientStats)
}
CMsgClientRequestedClientStats::CMsgClientRequestedClientStats(const CMsgClientRequestedClientStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      stats_to_send_(from.stats_to_send_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientRequestedClientStats)
}

void CMsgClientRequestedClientStats::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientRequestedClientStats_steammessages_5fclientserver_2eproto.base);
}

CMsgClientRequestedClientStats::~CMsgClientRequestedClientStats() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientRequestedClientStats)
  SharedDtor();
}

void CMsgClientRequestedClientStats::SharedDtor() {
}

void CMsgClientRequestedClientStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientRequestedClientStats& CMsgClientRequestedClientStats::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientRequestedClientStats_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientRequestedClientStats::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientRequestedClientStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stats_to_send_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientRequestedClientStats::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientRequestedClientStats*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.steam.CMsgClientRequestedClientStats.StatsToSend stats_to_send = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgClientRequestedClientStats_StatsToSend::_InternalParse;
          object = msg->add_stats_to_send();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientRequestedClientStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientRequestedClientStats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CMsgClientRequestedClientStats.StatsToSend stats_to_send = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_stats_to_send()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientRequestedClientStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientRequestedClientStats)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientRequestedClientStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientRequestedClientStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientRequestedClientStats.StatsToSend stats_to_send = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stats_to_send_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->stats_to_send(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientRequestedClientStats)
}

::google::protobuf::uint8* CMsgClientRequestedClientStats::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientRequestedClientStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientRequestedClientStats.StatsToSend stats_to_send = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stats_to_send_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->stats_to_send(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientRequestedClientStats)
  return target;
}

size_t CMsgClientRequestedClientStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientRequestedClientStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientRequestedClientStats.StatsToSend stats_to_send = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->stats_to_send_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->stats_to_send(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientRequestedClientStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientRequestedClientStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientRequestedClientStats* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientRequestedClientStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientRequestedClientStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientRequestedClientStats)
    MergeFrom(*source);
  }
}

void CMsgClientRequestedClientStats::MergeFrom(const CMsgClientRequestedClientStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientRequestedClientStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stats_to_send_.MergeFrom(from.stats_to_send_);
}

void CMsgClientRequestedClientStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientRequestedClientStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientRequestedClientStats::CopyFrom(const CMsgClientRequestedClientStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientRequestedClientStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRequestedClientStats::IsInitialized() const {
  return true;
}

void CMsgClientRequestedClientStats::Swap(CMsgClientRequestedClientStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientRequestedClientStats::InternalSwap(CMsgClientRequestedClientStats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&stats_to_send_)->InternalSwap(CastToBase(&other->stats_to_send_));
}

::google::protobuf::Metadata CMsgClientRequestedClientStats::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientStat2_StatDetail::InitAsDefaultInstance() {
}
class CMsgClientStat2_StatDetail::HasBitSetters {
 public:
  static void set_has_client_stat(CMsgClientStat2_StatDetail* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_ll_value(CMsgClientStat2_StatDetail* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_time_of_day(CMsgClientStat2_StatDetail* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_cell_id(CMsgClientStat2_StatDetail* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_depot_id(CMsgClientStat2_StatDetail* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_app_id(CMsgClientStat2_StatDetail* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientStat2_StatDetail::kClientStatFieldNumber;
const int CMsgClientStat2_StatDetail::kLlValueFieldNumber;
const int CMsgClientStat2_StatDetail::kTimeOfDayFieldNumber;
const int CMsgClientStat2_StatDetail::kCellIdFieldNumber;
const int CMsgClientStat2_StatDetail::kDepotIdFieldNumber;
const int CMsgClientStat2_StatDetail::kAppIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientStat2_StatDetail::CMsgClientStat2_StatDetail()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientStat2.StatDetail)
}
CMsgClientStat2_StatDetail::CMsgClientStat2_StatDetail(const CMsgClientStat2_StatDetail& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ll_value_, &from.ll_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&ll_value_)) + sizeof(app_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientStat2.StatDetail)
}

void CMsgClientStat2_StatDetail::SharedCtor() {
  ::memset(&ll_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&app_id_) -
      reinterpret_cast<char*>(&ll_value_)) + sizeof(app_id_));
}

CMsgClientStat2_StatDetail::~CMsgClientStat2_StatDetail() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientStat2.StatDetail)
  SharedDtor();
}

void CMsgClientStat2_StatDetail::SharedDtor() {
}

void CMsgClientStat2_StatDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientStat2_StatDetail& CMsgClientStat2_StatDetail::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientStat2_StatDetail_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientStat2_StatDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientStat2.StatDetail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&ll_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&app_id_) -
        reinterpret_cast<char*>(&ll_value_)) + sizeof(app_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientStat2_StatDetail::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientStat2_StatDetail*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 client_stat = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_client_stat(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int64 ll_value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_ll_value(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 time_of_day = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_time_of_day(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 cell_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_cell_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 depot_id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_depot_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 app_id = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientStat2_StatDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientStat2.StatDetail)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 client_stat = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_client_stat(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_stat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 ll_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_ll_value(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ll_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_of_day = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_time_of_day(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_of_day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cell_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_cell_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cell_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 depot_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_depot_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &depot_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 app_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientStat2.StatDetail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientStat2.StatDetail)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientStat2_StatDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientStat2.StatDetail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 client_stat = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->client_stat(), output);
  }

  // optional int64 ll_value = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->ll_value(), output);
  }

  // optional uint32 time_of_day = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time_of_day(), output);
  }

  // optional uint32 cell_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cell_id(), output);
  }

  // optional uint32 depot_id = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->depot_id(), output);
  }

  // optional uint32 app_id = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->app_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientStat2.StatDetail)
}

::google::protobuf::uint8* CMsgClientStat2_StatDetail::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientStat2.StatDetail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 client_stat = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->client_stat(), target);
  }

  // optional int64 ll_value = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->ll_value(), target);
  }

  // optional uint32 time_of_day = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time_of_day(), target);
  }

  // optional uint32 cell_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cell_id(), target);
  }

  // optional uint32 depot_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->depot_id(), target);
  }

  // optional uint32 app_id = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->app_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientStat2.StatDetail)
  return target;
}

size_t CMsgClientStat2_StatDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientStat2.StatDetail)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional int64 ll_value = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ll_value());
    }

    // optional uint32 client_stat = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_stat());
    }

    // optional uint32 time_of_day = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_of_day());
    }

    // optional uint32 cell_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cell_id());
    }

    // optional uint32 depot_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->depot_id());
    }

    // optional uint32 app_id = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientStat2_StatDetail::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientStat2.StatDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientStat2_StatDetail* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientStat2_StatDetail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientStat2.StatDetail)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientStat2.StatDetail)
    MergeFrom(*source);
  }
}

void CMsgClientStat2_StatDetail::MergeFrom(const CMsgClientStat2_StatDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientStat2.StatDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      ll_value_ = from.ll_value_;
    }
    if (cached_has_bits & 0x00000002u) {
      client_stat_ = from.client_stat_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_of_day_ = from.time_of_day_;
    }
    if (cached_has_bits & 0x00000008u) {
      cell_id_ = from.cell_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      depot_id_ = from.depot_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientStat2_StatDetail::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientStat2.StatDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientStat2_StatDetail::CopyFrom(const CMsgClientStat2_StatDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientStat2.StatDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientStat2_StatDetail::IsInitialized() const {
  return true;
}

void CMsgClientStat2_StatDetail::Swap(CMsgClientStat2_StatDetail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientStat2_StatDetail::InternalSwap(CMsgClientStat2_StatDetail* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ll_value_, other->ll_value_);
  swap(client_stat_, other->client_stat_);
  swap(time_of_day_, other->time_of_day_);
  swap(cell_id_, other->cell_id_);
  swap(depot_id_, other->depot_id_);
  swap(app_id_, other->app_id_);
}

::google::protobuf::Metadata CMsgClientStat2_StatDetail::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientStat2::InitAsDefaultInstance() {
}
class CMsgClientStat2::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientStat2::kStatDetailFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientStat2::CMsgClientStat2()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientStat2)
}
CMsgClientStat2::CMsgClientStat2(const CMsgClientStat2& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      stat_detail_(from.stat_detail_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientStat2)
}

void CMsgClientStat2::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientStat2_steammessages_5fclientserver_2eproto.base);
}

CMsgClientStat2::~CMsgClientStat2() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientStat2)
  SharedDtor();
}

void CMsgClientStat2::SharedDtor() {
}

void CMsgClientStat2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientStat2& CMsgClientStat2::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientStat2_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientStat2::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientStat2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stat_detail_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientStat2::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientStat2*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.steam.CMsgClientStat2.StatDetail stat_detail = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgClientStat2_StatDetail::_InternalParse;
          object = msg->add_stat_detail();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientStat2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientStat2)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CMsgClientStat2.StatDetail stat_detail = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_stat_detail()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientStat2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientStat2)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientStat2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientStat2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientStat2.StatDetail stat_detail = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stat_detail_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->stat_detail(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientStat2)
}

::google::protobuf::uint8* CMsgClientStat2::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientStat2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientStat2.StatDetail stat_detail = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stat_detail_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->stat_detail(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientStat2)
  return target;
}

size_t CMsgClientStat2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientStat2)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientStat2.StatDetail stat_detail = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->stat_detail_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->stat_detail(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientStat2::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientStat2)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientStat2* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientStat2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientStat2)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientStat2)
    MergeFrom(*source);
  }
}

void CMsgClientStat2::MergeFrom(const CMsgClientStat2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientStat2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stat_detail_.MergeFrom(from.stat_detail_);
}

void CMsgClientStat2::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientStat2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientStat2::CopyFrom(const CMsgClientStat2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientStat2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientStat2::IsInitialized() const {
  return true;
}

void CMsgClientStat2::Swap(CMsgClientStat2* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientStat2::InternalSwap(CMsgClientStat2* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&stat_detail_)->InternalSwap(CastToBase(&other->stat_detail_));
}

::google::protobuf::Metadata CMsgClientStat2::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientMMSCreateLobby::InitAsDefaultInstance() {
}
class CMsgClientMMSCreateLobby::HasBitSetters {
 public:
  static void set_has_app_id(CMsgClientMMSCreateLobby* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_max_members(CMsgClientMMSCreateLobby* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_lobby_type(CMsgClientMMSCreateLobby* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_lobby_flags(CMsgClientMMSCreateLobby* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_cell_id(CMsgClientMMSCreateLobby* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_public_ip(CMsgClientMMSCreateLobby* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_metadata(CMsgClientMMSCreateLobby* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_persona_name_owner(CMsgClientMMSCreateLobby* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientMMSCreateLobby::kAppIdFieldNumber;
const int CMsgClientMMSCreateLobby::kMaxMembersFieldNumber;
const int CMsgClientMMSCreateLobby::kLobbyTypeFieldNumber;
const int CMsgClientMMSCreateLobby::kLobbyFlagsFieldNumber;
const int CMsgClientMMSCreateLobby::kCellIdFieldNumber;
const int CMsgClientMMSCreateLobby::kPublicIpFieldNumber;
const int CMsgClientMMSCreateLobby::kMetadataFieldNumber;
const int CMsgClientMMSCreateLobby::kPersonaNameOwnerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientMMSCreateLobby::CMsgClientMMSCreateLobby()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientMMSCreateLobby)
}
CMsgClientMMSCreateLobby::CMsgClientMMSCreateLobby(const CMsgClientMMSCreateLobby& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_metadata()) {
    metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
  persona_name_owner_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_persona_name_owner()) {
    persona_name_owner_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_owner_);
  }
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&public_ip_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(public_ip_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientMMSCreateLobby)
}

void CMsgClientMMSCreateLobby::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientMMSCreateLobby_steammessages_5fclientserver_2eproto.base);
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  persona_name_owner_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&public_ip_) -
      reinterpret_cast<char*>(&app_id_)) + sizeof(public_ip_));
}

CMsgClientMMSCreateLobby::~CMsgClientMMSCreateLobby() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientMMSCreateLobby)
  SharedDtor();
}

void CMsgClientMMSCreateLobby::SharedDtor() {
  metadata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  persona_name_owner_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientMMSCreateLobby::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientMMSCreateLobby& CMsgClientMMSCreateLobby::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientMMSCreateLobby_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientMMSCreateLobby::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientMMSCreateLobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      metadata_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      persona_name_owner_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&public_ip_) -
        reinterpret_cast<char*>(&app_id_)) + sizeof(public_ip_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientMMSCreateLobby::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientMMSCreateLobby*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 max_members = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_max_members(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 lobby_type = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_lobby_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 lobby_flags = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_lobby_flags(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 cell_id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_cell_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 public_ip = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_public_ip(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes metadata = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_metadata();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string persona_name_owner = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientMMSCreateLobby.persona_name_owner");
        object = msg->mutable_persona_name_owner();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientMMSCreateLobby::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientMMSCreateLobby)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_members = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_max_members(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_members_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 lobby_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_lobby_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lobby_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 lobby_flags = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_lobby_flags(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lobby_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cell_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_cell_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cell_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 public_ip = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_public_ip(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &public_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes metadata = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string persona_name_owner = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_persona_name_owner()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->persona_name_owner().data(), static_cast<int>(this->persona_name_owner().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientMMSCreateLobby.persona_name_owner");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientMMSCreateLobby)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientMMSCreateLobby)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientMMSCreateLobby::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientMMSCreateLobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional int32 max_members = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_members(), output);
  }

  // optional int32 lobby_type = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lobby_type(), output);
  }

  // optional int32 lobby_flags = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lobby_flags(), output);
  }

  // optional uint32 cell_id = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->cell_id(), output);
  }

  // optional uint32 public_ip = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->public_ip(), output);
  }

  // optional bytes metadata = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->metadata(), output);
  }

  // optional string persona_name_owner = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name_owner().data(), static_cast<int>(this->persona_name_owner().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientMMSCreateLobby.persona_name_owner");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->persona_name_owner(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientMMSCreateLobby)
}

::google::protobuf::uint8* CMsgClientMMSCreateLobby::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientMMSCreateLobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional int32 max_members = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max_members(), target);
  }

  // optional int32 lobby_type = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lobby_type(), target);
  }

  // optional int32 lobby_flags = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lobby_flags(), target);
  }

  // optional uint32 cell_id = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->cell_id(), target);
  }

  // optional uint32 public_ip = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->public_ip(), target);
  }

  // optional bytes metadata = 7;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->metadata(), target);
  }

  // optional string persona_name_owner = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name_owner().data(), static_cast<int>(this->persona_name_owner().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientMMSCreateLobby.persona_name_owner");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->persona_name_owner(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientMMSCreateLobby)
  return target;
}

size_t CMsgClientMMSCreateLobby::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientMMSCreateLobby)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes metadata = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->metadata());
    }

    // optional string persona_name_owner = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->persona_name_owner());
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional int32 max_members = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_members());
    }

    // optional int32 lobby_type = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lobby_type());
    }

    // optional int32 lobby_flags = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lobby_flags());
    }

    // optional uint32 cell_id = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cell_id());
    }

    // optional uint32 public_ip = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->public_ip());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientMMSCreateLobby::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientMMSCreateLobby)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSCreateLobby* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientMMSCreateLobby>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientMMSCreateLobby)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientMMSCreateLobby)
    MergeFrom(*source);
  }
}

void CMsgClientMMSCreateLobby::MergeFrom(const CMsgClientMMSCreateLobby& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientMMSCreateLobby)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      persona_name_owner_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_owner_);
    }
    if (cached_has_bits & 0x00000004u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_members_ = from.max_members_;
    }
    if (cached_has_bits & 0x00000010u) {
      lobby_type_ = from.lobby_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      lobby_flags_ = from.lobby_flags_;
    }
    if (cached_has_bits & 0x00000040u) {
      cell_id_ = from.cell_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      public_ip_ = from.public_ip_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSCreateLobby::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientMMSCreateLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSCreateLobby::CopyFrom(const CMsgClientMMSCreateLobby& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientMMSCreateLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSCreateLobby::IsInitialized() const {
  return true;
}

void CMsgClientMMSCreateLobby::Swap(CMsgClientMMSCreateLobby* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientMMSCreateLobby::InternalSwap(CMsgClientMMSCreateLobby* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  metadata_.Swap(&other->metadata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  persona_name_owner_.Swap(&other->persona_name_owner_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(app_id_, other->app_id_);
  swap(max_members_, other->max_members_);
  swap(lobby_type_, other->lobby_type_);
  swap(lobby_flags_, other->lobby_flags_);
  swap(cell_id_, other->cell_id_);
  swap(public_ip_, other->public_ip_);
}

::google::protobuf::Metadata CMsgClientMMSCreateLobby::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientMMSCreateLobbyResponse::InitAsDefaultInstance() {
}
class CMsgClientMMSCreateLobbyResponse::HasBitSetters {
 public:
  static void set_has_app_id(CMsgClientMMSCreateLobbyResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_steam_id_lobby(CMsgClientMMSCreateLobbyResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_eresult(CMsgClientMMSCreateLobbyResponse* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientMMSCreateLobbyResponse::kAppIdFieldNumber;
const int CMsgClientMMSCreateLobbyResponse::kSteamIdLobbyFieldNumber;
const int CMsgClientMMSCreateLobbyResponse::kEresultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientMMSCreateLobbyResponse::CMsgClientMMSCreateLobbyResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientMMSCreateLobbyResponse)
}
CMsgClientMMSCreateLobbyResponse::CMsgClientMMSCreateLobbyResponse(const CMsgClientMMSCreateLobbyResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steam_id_lobby_, &from.steam_id_lobby_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientMMSCreateLobbyResponse)
}

void CMsgClientMMSCreateLobbyResponse::SharedCtor() {
  ::memset(&steam_id_lobby_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&app_id_) -
      reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
  eresult_ = 2;
}

CMsgClientMMSCreateLobbyResponse::~CMsgClientMMSCreateLobbyResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientMMSCreateLobbyResponse)
  SharedDtor();
}

void CMsgClientMMSCreateLobbyResponse::SharedDtor() {
}

void CMsgClientMMSCreateLobbyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientMMSCreateLobbyResponse& CMsgClientMMSCreateLobbyResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientMMSCreateLobbyResponse_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientMMSCreateLobbyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientMMSCreateLobbyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&steam_id_lobby_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&app_id_) -
        reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientMMSCreateLobbyResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientMMSCreateLobbyResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_steam_id_lobby(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional int32 eresult = 3 [default = 2];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_eresult(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientMMSCreateLobbyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientMMSCreateLobbyResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_steam_id_lobby(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_lobby_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 eresult = 3 [default = 2];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_eresult(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientMMSCreateLobbyResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientMMSCreateLobbyResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientMMSCreateLobbyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientMMSCreateLobbyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_lobby(), output);
  }

  // optional int32 eresult = 3 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->eresult(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientMMSCreateLobbyResponse)
}

::google::protobuf::uint8* CMsgClientMMSCreateLobbyResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientMMSCreateLobbyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id_lobby(), target);
  }

  // optional int32 eresult = 3 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->eresult(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientMMSCreateLobbyResponse)
  return target;
}

size_t CMsgClientMMSCreateLobbyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientMMSCreateLobbyResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 steam_id_lobby = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional int32 eresult = 3 [default = 2];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientMMSCreateLobbyResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientMMSCreateLobbyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSCreateLobbyResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientMMSCreateLobbyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientMMSCreateLobbyResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientMMSCreateLobbyResponse)
    MergeFrom(*source);
  }
}

void CMsgClientMMSCreateLobbyResponse::MergeFrom(const CMsgClientMMSCreateLobbyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientMMSCreateLobbyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_lobby_ = from.steam_id_lobby_;
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSCreateLobbyResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientMMSCreateLobbyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSCreateLobbyResponse::CopyFrom(const CMsgClientMMSCreateLobbyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientMMSCreateLobbyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSCreateLobbyResponse::IsInitialized() const {
  return true;
}

void CMsgClientMMSCreateLobbyResponse::Swap(CMsgClientMMSCreateLobbyResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientMMSCreateLobbyResponse::InternalSwap(CMsgClientMMSCreateLobbyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steam_id_lobby_, other->steam_id_lobby_);
  swap(app_id_, other->app_id_);
  swap(eresult_, other->eresult_);
}

::google::protobuf::Metadata CMsgClientMMSCreateLobbyResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientMMSJoinLobby::InitAsDefaultInstance() {
}
class CMsgClientMMSJoinLobby::HasBitSetters {
 public:
  static void set_has_app_id(CMsgClientMMSJoinLobby* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_steam_id_lobby(CMsgClientMMSJoinLobby* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_persona_name(CMsgClientMMSJoinLobby* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientMMSJoinLobby::kAppIdFieldNumber;
const int CMsgClientMMSJoinLobby::kSteamIdLobbyFieldNumber;
const int CMsgClientMMSJoinLobby::kPersonaNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientMMSJoinLobby::CMsgClientMMSJoinLobby()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientMMSJoinLobby)
}
CMsgClientMMSJoinLobby::CMsgClientMMSJoinLobby(const CMsgClientMMSJoinLobby& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  persona_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_persona_name()) {
    persona_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_);
  }
  ::memcpy(&steam_id_lobby_, &from.steam_id_lobby_,
    static_cast<size_t>(reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientMMSJoinLobby)
}

void CMsgClientMMSJoinLobby::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientMMSJoinLobby_steammessages_5fclientserver_2eproto.base);
  persona_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steam_id_lobby_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&app_id_) -
      reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
}

CMsgClientMMSJoinLobby::~CMsgClientMMSJoinLobby() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientMMSJoinLobby)
  SharedDtor();
}

void CMsgClientMMSJoinLobby::SharedDtor() {
  persona_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientMMSJoinLobby::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientMMSJoinLobby& CMsgClientMMSJoinLobby::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientMMSJoinLobby_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientMMSJoinLobby::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientMMSJoinLobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    persona_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&steam_id_lobby_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&app_id_) -
        reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientMMSJoinLobby::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientMMSJoinLobby*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_steam_id_lobby(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional string persona_name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientMMSJoinLobby.persona_name");
        object = msg->mutable_persona_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientMMSJoinLobby::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientMMSJoinLobby)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_steam_id_lobby(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_lobby_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string persona_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_persona_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->persona_name().data(), static_cast<int>(this->persona_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientMMSJoinLobby.persona_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientMMSJoinLobby)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientMMSJoinLobby)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientMMSJoinLobby::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientMMSJoinLobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_lobby(), output);
  }

  // optional string persona_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), static_cast<int>(this->persona_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientMMSJoinLobby.persona_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->persona_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientMMSJoinLobby)
}

::google::protobuf::uint8* CMsgClientMMSJoinLobby::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientMMSJoinLobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id_lobby(), target);
  }

  // optional string persona_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), static_cast<int>(this->persona_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientMMSJoinLobby.persona_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->persona_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientMMSJoinLobby)
  return target;
}

size_t CMsgClientMMSJoinLobby::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientMMSJoinLobby)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string persona_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->persona_name());
    }

    // optional fixed64 steam_id_lobby = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientMMSJoinLobby::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientMMSJoinLobby)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSJoinLobby* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientMMSJoinLobby>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientMMSJoinLobby)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientMMSJoinLobby)
    MergeFrom(*source);
  }
}

void CMsgClientMMSJoinLobby::MergeFrom(const CMsgClientMMSJoinLobby& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientMMSJoinLobby)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      persona_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_lobby_ = from.steam_id_lobby_;
    }
    if (cached_has_bits & 0x00000004u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSJoinLobby::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientMMSJoinLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSJoinLobby::CopyFrom(const CMsgClientMMSJoinLobby& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientMMSJoinLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSJoinLobby::IsInitialized() const {
  return true;
}

void CMsgClientMMSJoinLobby::Swap(CMsgClientMMSJoinLobby* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientMMSJoinLobby::InternalSwap(CMsgClientMMSJoinLobby* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  persona_name_.Swap(&other->persona_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(steam_id_lobby_, other->steam_id_lobby_);
  swap(app_id_, other->app_id_);
}

::google::protobuf::Metadata CMsgClientMMSJoinLobby::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientMMSJoinLobbyResponse_Member::InitAsDefaultInstance() {
}
class CMsgClientMMSJoinLobbyResponse_Member::HasBitSetters {
 public:
  static void set_has_steam_id(CMsgClientMMSJoinLobbyResponse_Member* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_persona_name(CMsgClientMMSJoinLobbyResponse_Member* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_metadata(CMsgClientMMSJoinLobbyResponse_Member* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientMMSJoinLobbyResponse_Member::kSteamIdFieldNumber;
const int CMsgClientMMSJoinLobbyResponse_Member::kPersonaNameFieldNumber;
const int CMsgClientMMSJoinLobbyResponse_Member::kMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientMMSJoinLobbyResponse_Member::CMsgClientMMSJoinLobbyResponse_Member()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientMMSJoinLobbyResponse.Member)
}
CMsgClientMMSJoinLobbyResponse_Member::CMsgClientMMSJoinLobbyResponse_Member(const CMsgClientMMSJoinLobbyResponse_Member& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  persona_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_persona_name()) {
    persona_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_);
  }
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_metadata()) {
    metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
  steam_id_ = from.steam_id_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientMMSJoinLobbyResponse.Member)
}

void CMsgClientMMSJoinLobbyResponse_Member::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientMMSJoinLobbyResponse_Member_steammessages_5fclientserver_2eproto.base);
  persona_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  steam_id_ = PROTOBUF_ULONGLONG(0);
}

CMsgClientMMSJoinLobbyResponse_Member::~CMsgClientMMSJoinLobbyResponse_Member() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientMMSJoinLobbyResponse.Member)
  SharedDtor();
}

void CMsgClientMMSJoinLobbyResponse_Member::SharedDtor() {
  persona_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientMMSJoinLobbyResponse_Member::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientMMSJoinLobbyResponse_Member& CMsgClientMMSJoinLobbyResponse_Member::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientMMSJoinLobbyResponse_Member_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientMMSJoinLobbyResponse_Member::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientMMSJoinLobbyResponse.Member)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      persona_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      metadata_.ClearNonDefaultToEmptyNoArena();
    }
  }
  steam_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientMMSJoinLobbyResponse_Member::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientMMSJoinLobbyResponse_Member*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steam_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional string persona_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientMMSJoinLobbyResponse.Member.persona_name");
        object = msg->mutable_persona_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bytes metadata = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_metadata();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientMMSJoinLobbyResponse_Member::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientMMSJoinLobbyResponse.Member)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string persona_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_persona_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->persona_name().data(), static_cast<int>(this->persona_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientMMSJoinLobbyResponse.Member.persona_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes metadata = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientMMSJoinLobbyResponse.Member)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientMMSJoinLobbyResponse.Member)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientMMSJoinLobbyResponse_Member::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientMMSJoinLobbyResponse.Member)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional string persona_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), static_cast<int>(this->persona_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientMMSJoinLobbyResponse.Member.persona_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->persona_name(), output);
  }

  // optional bytes metadata = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->metadata(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientMMSJoinLobbyResponse.Member)
}

::google::protobuf::uint8* CMsgClientMMSJoinLobbyResponse_Member::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientMMSJoinLobbyResponse.Member)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional string persona_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), static_cast<int>(this->persona_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientMMSJoinLobbyResponse.Member.persona_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->persona_name(), target);
  }

  // optional bytes metadata = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->metadata(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientMMSJoinLobbyResponse.Member)
  return target;
}

size_t CMsgClientMMSJoinLobbyResponse_Member::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientMMSJoinLobbyResponse.Member)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string persona_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->persona_name());
    }

    // optional bytes metadata = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->metadata());
    }

    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientMMSJoinLobbyResponse_Member::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientMMSJoinLobbyResponse.Member)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSJoinLobbyResponse_Member* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientMMSJoinLobbyResponse_Member>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientMMSJoinLobbyResponse.Member)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientMMSJoinLobbyResponse.Member)
    MergeFrom(*source);
  }
}

void CMsgClientMMSJoinLobbyResponse_Member::MergeFrom(const CMsgClientMMSJoinLobbyResponse_Member& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientMMSJoinLobbyResponse.Member)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      persona_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
    }
    if (cached_has_bits & 0x00000004u) {
      steam_id_ = from.steam_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSJoinLobbyResponse_Member::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientMMSJoinLobbyResponse.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSJoinLobbyResponse_Member::CopyFrom(const CMsgClientMMSJoinLobbyResponse_Member& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientMMSJoinLobbyResponse.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSJoinLobbyResponse_Member::IsInitialized() const {
  return true;
}

void CMsgClientMMSJoinLobbyResponse_Member::Swap(CMsgClientMMSJoinLobbyResponse_Member* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientMMSJoinLobbyResponse_Member::InternalSwap(CMsgClientMMSJoinLobbyResponse_Member* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  persona_name_.Swap(&other->persona_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  metadata_.Swap(&other->metadata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(steam_id_, other->steam_id_);
}

::google::protobuf::Metadata CMsgClientMMSJoinLobbyResponse_Member::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientMMSJoinLobbyResponse::InitAsDefaultInstance() {
}
class CMsgClientMMSJoinLobbyResponse::HasBitSetters {
 public:
  static void set_has_app_id(CMsgClientMMSJoinLobbyResponse* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_steam_id_lobby(CMsgClientMMSJoinLobbyResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_chat_room_enter_response(CMsgClientMMSJoinLobbyResponse* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_max_members(CMsgClientMMSJoinLobbyResponse* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_lobby_type(CMsgClientMMSJoinLobbyResponse* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_lobby_flags(CMsgClientMMSJoinLobbyResponse* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_steam_id_owner(CMsgClientMMSJoinLobbyResponse* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_metadata(CMsgClientMMSJoinLobbyResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientMMSJoinLobbyResponse::kAppIdFieldNumber;
const int CMsgClientMMSJoinLobbyResponse::kSteamIdLobbyFieldNumber;
const int CMsgClientMMSJoinLobbyResponse::kChatRoomEnterResponseFieldNumber;
const int CMsgClientMMSJoinLobbyResponse::kMaxMembersFieldNumber;
const int CMsgClientMMSJoinLobbyResponse::kLobbyTypeFieldNumber;
const int CMsgClientMMSJoinLobbyResponse::kLobbyFlagsFieldNumber;
const int CMsgClientMMSJoinLobbyResponse::kSteamIdOwnerFieldNumber;
const int CMsgClientMMSJoinLobbyResponse::kMetadataFieldNumber;
const int CMsgClientMMSJoinLobbyResponse::kMembersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientMMSJoinLobbyResponse::CMsgClientMMSJoinLobbyResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientMMSJoinLobbyResponse)
}
CMsgClientMMSJoinLobbyResponse::CMsgClientMMSJoinLobbyResponse(const CMsgClientMMSJoinLobbyResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      members_(from.members_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_metadata()) {
    metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
  ::memcpy(&steam_id_lobby_, &from.steam_id_lobby_,
    static_cast<size_t>(reinterpret_cast<char*>(&lobby_flags_) -
    reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(lobby_flags_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientMMSJoinLobbyResponse)
}

void CMsgClientMMSJoinLobbyResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientMMSJoinLobbyResponse_steammessages_5fclientserver_2eproto.base);
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steam_id_lobby_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lobby_flags_) -
      reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(lobby_flags_));
}

CMsgClientMMSJoinLobbyResponse::~CMsgClientMMSJoinLobbyResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientMMSJoinLobbyResponse)
  SharedDtor();
}

void CMsgClientMMSJoinLobbyResponse::SharedDtor() {
  metadata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientMMSJoinLobbyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientMMSJoinLobbyResponse& CMsgClientMMSJoinLobbyResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientMMSJoinLobbyResponse_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientMMSJoinLobbyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientMMSJoinLobbyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    metadata_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&steam_id_lobby_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lobby_flags_) -
        reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(lobby_flags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientMMSJoinLobbyResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientMMSJoinLobbyResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_steam_id_lobby(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional int32 chat_room_enter_response = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_chat_room_enter_response(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 max_members = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_max_members(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 lobby_type = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_lobby_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 lobby_flags = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_lobby_flags(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 steam_id_owner = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 57) goto handle_unusual;
        msg->set_steam_id_owner(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional bytes metadata = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_metadata();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .proto.steam.CMsgClientMMSJoinLobbyResponse.Member members = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgClientMMSJoinLobbyResponse_Member::_InternalParse;
          object = msg->add_members();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 74 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientMMSJoinLobbyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientMMSJoinLobbyResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_steam_id_lobby(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_lobby_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 chat_room_enter_response = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_chat_room_enter_response(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chat_room_enter_response_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_members = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_max_members(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_members_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 lobby_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_lobby_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lobby_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 lobby_flags = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_lobby_flags(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lobby_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_owner = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (57 & 0xFF)) {
          HasBitSetters::set_has_steam_id_owner(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_owner_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes metadata = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgClientMMSJoinLobbyResponse.Member members = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientMMSJoinLobbyResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientMMSJoinLobbyResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientMMSJoinLobbyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientMMSJoinLobbyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_lobby(), output);
  }

  // optional int32 chat_room_enter_response = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->chat_room_enter_response(), output);
  }

  // optional int32 max_members = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_members(), output);
  }

  // optional int32 lobby_type = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->lobby_type(), output);
  }

  // optional int32 lobby_flags = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->lobby_flags(), output);
  }

  // optional fixed64 steam_id_owner = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->steam_id_owner(), output);
  }

  // optional bytes metadata = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->metadata(), output);
  }

  // repeated .proto.steam.CMsgClientMMSJoinLobbyResponse.Member members = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->members_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9,
      this->members(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientMMSJoinLobbyResponse)
}

::google::protobuf::uint8* CMsgClientMMSJoinLobbyResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientMMSJoinLobbyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id_lobby(), target);
  }

  // optional int32 chat_room_enter_response = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->chat_room_enter_response(), target);
  }

  // optional int32 max_members = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->max_members(), target);
  }

  // optional int32 lobby_type = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->lobby_type(), target);
  }

  // optional int32 lobby_flags = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->lobby_flags(), target);
  }

  // optional fixed64 steam_id_owner = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(7, this->steam_id_owner(), target);
  }

  // optional bytes metadata = 8;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->metadata(), target);
  }

  // repeated .proto.steam.CMsgClientMMSJoinLobbyResponse.Member members = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->members_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->members(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientMMSJoinLobbyResponse)
  return target;
}

size_t CMsgClientMMSJoinLobbyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientMMSJoinLobbyResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientMMSJoinLobbyResponse.Member members = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->members_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->members(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes metadata = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->metadata());
    }

    // optional fixed64 steam_id_lobby = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional int32 chat_room_enter_response = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chat_room_enter_response());
    }

    // optional int32 max_members = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_members());
    }

    // optional int32 lobby_type = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lobby_type());
    }

    // optional fixed64 steam_id_owner = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional int32 lobby_flags = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lobby_flags());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientMMSJoinLobbyResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientMMSJoinLobbyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSJoinLobbyResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientMMSJoinLobbyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientMMSJoinLobbyResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientMMSJoinLobbyResponse)
    MergeFrom(*source);
  }
}

void CMsgClientMMSJoinLobbyResponse::MergeFrom(const CMsgClientMMSJoinLobbyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientMMSJoinLobbyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_lobby_ = from.steam_id_lobby_;
    }
    if (cached_has_bits & 0x00000004u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      chat_room_enter_response_ = from.chat_room_enter_response_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_members_ = from.max_members_;
    }
    if (cached_has_bits & 0x00000020u) {
      lobby_type_ = from.lobby_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      steam_id_owner_ = from.steam_id_owner_;
    }
    if (cached_has_bits & 0x00000080u) {
      lobby_flags_ = from.lobby_flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSJoinLobbyResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientMMSJoinLobbyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSJoinLobbyResponse::CopyFrom(const CMsgClientMMSJoinLobbyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientMMSJoinLobbyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSJoinLobbyResponse::IsInitialized() const {
  return true;
}

void CMsgClientMMSJoinLobbyResponse::Swap(CMsgClientMMSJoinLobbyResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientMMSJoinLobbyResponse::InternalSwap(CMsgClientMMSJoinLobbyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&members_)->InternalSwap(CastToBase(&other->members_));
  metadata_.Swap(&other->metadata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(steam_id_lobby_, other->steam_id_lobby_);
  swap(app_id_, other->app_id_);
  swap(chat_room_enter_response_, other->chat_room_enter_response_);
  swap(max_members_, other->max_members_);
  swap(lobby_type_, other->lobby_type_);
  swap(steam_id_owner_, other->steam_id_owner_);
  swap(lobby_flags_, other->lobby_flags_);
}

::google::protobuf::Metadata CMsgClientMMSJoinLobbyResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientMMSLeaveLobby::InitAsDefaultInstance() {
}
class CMsgClientMMSLeaveLobby::HasBitSetters {
 public:
  static void set_has_app_id(CMsgClientMMSLeaveLobby* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_steam_id_lobby(CMsgClientMMSLeaveLobby* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientMMSLeaveLobby::kAppIdFieldNumber;
const int CMsgClientMMSLeaveLobby::kSteamIdLobbyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientMMSLeaveLobby::CMsgClientMMSLeaveLobby()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientMMSLeaveLobby)
}
CMsgClientMMSLeaveLobby::CMsgClientMMSLeaveLobby(const CMsgClientMMSLeaveLobby& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steam_id_lobby_, &from.steam_id_lobby_,
    static_cast<size_t>(reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientMMSLeaveLobby)
}

void CMsgClientMMSLeaveLobby::SharedCtor() {
  ::memset(&steam_id_lobby_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&app_id_) -
      reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
}

CMsgClientMMSLeaveLobby::~CMsgClientMMSLeaveLobby() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientMMSLeaveLobby)
  SharedDtor();
}

void CMsgClientMMSLeaveLobby::SharedDtor() {
}

void CMsgClientMMSLeaveLobby::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientMMSLeaveLobby& CMsgClientMMSLeaveLobby::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientMMSLeaveLobby_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientMMSLeaveLobby::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientMMSLeaveLobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steam_id_lobby_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&app_id_) -
        reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientMMSLeaveLobby::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientMMSLeaveLobby*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_steam_id_lobby(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientMMSLeaveLobby::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientMMSLeaveLobby)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_steam_id_lobby(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_lobby_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientMMSLeaveLobby)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientMMSLeaveLobby)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientMMSLeaveLobby::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientMMSLeaveLobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_lobby(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientMMSLeaveLobby)
}

::google::protobuf::uint8* CMsgClientMMSLeaveLobby::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientMMSLeaveLobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id_lobby(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientMMSLeaveLobby)
  return target;
}

size_t CMsgClientMMSLeaveLobby::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientMMSLeaveLobby)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steam_id_lobby = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientMMSLeaveLobby::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientMMSLeaveLobby)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSLeaveLobby* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientMMSLeaveLobby>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientMMSLeaveLobby)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientMMSLeaveLobby)
    MergeFrom(*source);
  }
}

void CMsgClientMMSLeaveLobby::MergeFrom(const CMsgClientMMSLeaveLobby& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientMMSLeaveLobby)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_lobby_ = from.steam_id_lobby_;
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSLeaveLobby::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientMMSLeaveLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSLeaveLobby::CopyFrom(const CMsgClientMMSLeaveLobby& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientMMSLeaveLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSLeaveLobby::IsInitialized() const {
  return true;
}

void CMsgClientMMSLeaveLobby::Swap(CMsgClientMMSLeaveLobby* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientMMSLeaveLobby::InternalSwap(CMsgClientMMSLeaveLobby* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steam_id_lobby_, other->steam_id_lobby_);
  swap(app_id_, other->app_id_);
}

::google::protobuf::Metadata CMsgClientMMSLeaveLobby::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientMMSLeaveLobbyResponse::InitAsDefaultInstance() {
}
class CMsgClientMMSLeaveLobbyResponse::HasBitSetters {
 public:
  static void set_has_app_id(CMsgClientMMSLeaveLobbyResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_steam_id_lobby(CMsgClientMMSLeaveLobbyResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_eresult(CMsgClientMMSLeaveLobbyResponse* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientMMSLeaveLobbyResponse::kAppIdFieldNumber;
const int CMsgClientMMSLeaveLobbyResponse::kSteamIdLobbyFieldNumber;
const int CMsgClientMMSLeaveLobbyResponse::kEresultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientMMSLeaveLobbyResponse::CMsgClientMMSLeaveLobbyResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientMMSLeaveLobbyResponse)
}
CMsgClientMMSLeaveLobbyResponse::CMsgClientMMSLeaveLobbyResponse(const CMsgClientMMSLeaveLobbyResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steam_id_lobby_, &from.steam_id_lobby_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientMMSLeaveLobbyResponse)
}

void CMsgClientMMSLeaveLobbyResponse::SharedCtor() {
  ::memset(&steam_id_lobby_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&app_id_) -
      reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
  eresult_ = 2;
}

CMsgClientMMSLeaveLobbyResponse::~CMsgClientMMSLeaveLobbyResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientMMSLeaveLobbyResponse)
  SharedDtor();
}

void CMsgClientMMSLeaveLobbyResponse::SharedDtor() {
}

void CMsgClientMMSLeaveLobbyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientMMSLeaveLobbyResponse& CMsgClientMMSLeaveLobbyResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientMMSLeaveLobbyResponse_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientMMSLeaveLobbyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientMMSLeaveLobbyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&steam_id_lobby_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&app_id_) -
        reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientMMSLeaveLobbyResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientMMSLeaveLobbyResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_steam_id_lobby(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional int32 eresult = 3 [default = 2];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_eresult(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientMMSLeaveLobbyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientMMSLeaveLobbyResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_steam_id_lobby(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_lobby_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 eresult = 3 [default = 2];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_eresult(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientMMSLeaveLobbyResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientMMSLeaveLobbyResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientMMSLeaveLobbyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientMMSLeaveLobbyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_lobby(), output);
  }

  // optional int32 eresult = 3 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->eresult(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientMMSLeaveLobbyResponse)
}

::google::protobuf::uint8* CMsgClientMMSLeaveLobbyResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientMMSLeaveLobbyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id_lobby(), target);
  }

  // optional int32 eresult = 3 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->eresult(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientMMSLeaveLobbyResponse)
  return target;
}

size_t CMsgClientMMSLeaveLobbyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientMMSLeaveLobbyResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 steam_id_lobby = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional int32 eresult = 3 [default = 2];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientMMSLeaveLobbyResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientMMSLeaveLobbyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSLeaveLobbyResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientMMSLeaveLobbyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientMMSLeaveLobbyResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientMMSLeaveLobbyResponse)
    MergeFrom(*source);
  }
}

void CMsgClientMMSLeaveLobbyResponse::MergeFrom(const CMsgClientMMSLeaveLobbyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientMMSLeaveLobbyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_lobby_ = from.steam_id_lobby_;
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSLeaveLobbyResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientMMSLeaveLobbyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSLeaveLobbyResponse::CopyFrom(const CMsgClientMMSLeaveLobbyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientMMSLeaveLobbyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSLeaveLobbyResponse::IsInitialized() const {
  return true;
}

void CMsgClientMMSLeaveLobbyResponse::Swap(CMsgClientMMSLeaveLobbyResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientMMSLeaveLobbyResponse::InternalSwap(CMsgClientMMSLeaveLobbyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steam_id_lobby_, other->steam_id_lobby_);
  swap(app_id_, other->app_id_);
  swap(eresult_, other->eresult_);
}

::google::protobuf::Metadata CMsgClientMMSLeaveLobbyResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientMMSGetLobbyList_Filter::InitAsDefaultInstance() {
}
class CMsgClientMMSGetLobbyList_Filter::HasBitSetters {
 public:
  static void set_has_key(CMsgClientMMSGetLobbyList_Filter* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_value(CMsgClientMMSGetLobbyList_Filter* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_comparision(CMsgClientMMSGetLobbyList_Filter* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_filter_type(CMsgClientMMSGetLobbyList_Filter* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientMMSGetLobbyList_Filter::kKeyFieldNumber;
const int CMsgClientMMSGetLobbyList_Filter::kValueFieldNumber;
const int CMsgClientMMSGetLobbyList_Filter::kComparisionFieldNumber;
const int CMsgClientMMSGetLobbyList_Filter::kFilterTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientMMSGetLobbyList_Filter::CMsgClientMMSGetLobbyList_Filter()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientMMSGetLobbyList.Filter)
}
CMsgClientMMSGetLobbyList_Filter::CMsgClientMMSGetLobbyList_Filter(const CMsgClientMMSGetLobbyList_Filter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  ::memcpy(&comparision_, &from.comparision_,
    static_cast<size_t>(reinterpret_cast<char*>(&filter_type_) -
    reinterpret_cast<char*>(&comparision_)) + sizeof(filter_type_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientMMSGetLobbyList.Filter)
}

void CMsgClientMMSGetLobbyList_Filter::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientMMSGetLobbyList_Filter_steammessages_5fclientserver_2eproto.base);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&comparision_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&filter_type_) -
      reinterpret_cast<char*>(&comparision_)) + sizeof(filter_type_));
}

CMsgClientMMSGetLobbyList_Filter::~CMsgClientMMSGetLobbyList_Filter() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientMMSGetLobbyList.Filter)
  SharedDtor();
}

void CMsgClientMMSGetLobbyList_Filter::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientMMSGetLobbyList_Filter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientMMSGetLobbyList_Filter& CMsgClientMMSGetLobbyList_Filter::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientMMSGetLobbyList_Filter_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientMMSGetLobbyList_Filter::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientMMSGetLobbyList.Filter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&comparision_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&filter_type_) -
        reinterpret_cast<char*>(&comparision_)) + sizeof(filter_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientMMSGetLobbyList_Filter::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientMMSGetLobbyList_Filter*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string key = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientMMSGetLobbyList.Filter.key");
        object = msg->mutable_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientMMSGetLobbyList.Filter.value");
        object = msg->mutable_value();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional int32 comparision = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_comparision(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 filter_type = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_filter_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientMMSGetLobbyList_Filter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientMMSGetLobbyList.Filter)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientMMSGetLobbyList.Filter.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientMMSGetLobbyList.Filter.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 comparision = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_comparision(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &comparision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 filter_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_filter_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &filter_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientMMSGetLobbyList.Filter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientMMSGetLobbyList.Filter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientMMSGetLobbyList_Filter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientMMSGetLobbyList.Filter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientMMSGetLobbyList.Filter.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientMMSGetLobbyList.Filter.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // optional int32 comparision = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->comparision(), output);
  }

  // optional int32 filter_type = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->filter_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientMMSGetLobbyList.Filter)
}

::google::protobuf::uint8* CMsgClientMMSGetLobbyList_Filter::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientMMSGetLobbyList.Filter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientMMSGetLobbyList.Filter.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientMMSGetLobbyList.Filter.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // optional int32 comparision = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->comparision(), target);
  }

  // optional int32 filter_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->filter_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientMMSGetLobbyList.Filter)
  return target;
}

size_t CMsgClientMMSGetLobbyList_Filter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientMMSGetLobbyList.Filter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

    // optional int32 comparision = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->comparision());
    }

    // optional int32 filter_type = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->filter_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientMMSGetLobbyList_Filter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientMMSGetLobbyList.Filter)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSGetLobbyList_Filter* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientMMSGetLobbyList_Filter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientMMSGetLobbyList.Filter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientMMSGetLobbyList.Filter)
    MergeFrom(*source);
  }
}

void CMsgClientMMSGetLobbyList_Filter::MergeFrom(const CMsgClientMMSGetLobbyList_Filter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientMMSGetLobbyList.Filter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
    if (cached_has_bits & 0x00000004u) {
      comparision_ = from.comparision_;
    }
    if (cached_has_bits & 0x00000008u) {
      filter_type_ = from.filter_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSGetLobbyList_Filter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientMMSGetLobbyList.Filter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSGetLobbyList_Filter::CopyFrom(const CMsgClientMMSGetLobbyList_Filter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientMMSGetLobbyList.Filter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSGetLobbyList_Filter::IsInitialized() const {
  return true;
}

void CMsgClientMMSGetLobbyList_Filter::Swap(CMsgClientMMSGetLobbyList_Filter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientMMSGetLobbyList_Filter::InternalSwap(CMsgClientMMSGetLobbyList_Filter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(comparision_, other->comparision_);
  swap(filter_type_, other->filter_type_);
}

::google::protobuf::Metadata CMsgClientMMSGetLobbyList_Filter::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientMMSGetLobbyList::InitAsDefaultInstance() {
}
class CMsgClientMMSGetLobbyList::HasBitSetters {
 public:
  static void set_has_app_id(CMsgClientMMSGetLobbyList* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_num_lobbies_requested(CMsgClientMMSGetLobbyList* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_cell_id(CMsgClientMMSGetLobbyList* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_public_ip(CMsgClientMMSGetLobbyList* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientMMSGetLobbyList::kAppIdFieldNumber;
const int CMsgClientMMSGetLobbyList::kNumLobbiesRequestedFieldNumber;
const int CMsgClientMMSGetLobbyList::kCellIdFieldNumber;
const int CMsgClientMMSGetLobbyList::kPublicIpFieldNumber;
const int CMsgClientMMSGetLobbyList::kFiltersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientMMSGetLobbyList::CMsgClientMMSGetLobbyList()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientMMSGetLobbyList)
}
CMsgClientMMSGetLobbyList::CMsgClientMMSGetLobbyList(const CMsgClientMMSGetLobbyList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      filters_(from.filters_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&public_ip_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(public_ip_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientMMSGetLobbyList)
}

void CMsgClientMMSGetLobbyList::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientMMSGetLobbyList_steammessages_5fclientserver_2eproto.base);
  ::memset(&app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&public_ip_) -
      reinterpret_cast<char*>(&app_id_)) + sizeof(public_ip_));
}

CMsgClientMMSGetLobbyList::~CMsgClientMMSGetLobbyList() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientMMSGetLobbyList)
  SharedDtor();
}

void CMsgClientMMSGetLobbyList::SharedDtor() {
}

void CMsgClientMMSGetLobbyList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientMMSGetLobbyList& CMsgClientMMSGetLobbyList::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientMMSGetLobbyList_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientMMSGetLobbyList::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientMMSGetLobbyList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filters_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&public_ip_) -
        reinterpret_cast<char*>(&app_id_)) + sizeof(public_ip_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientMMSGetLobbyList::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientMMSGetLobbyList*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 num_lobbies_requested = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_num_lobbies_requested(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 cell_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_cell_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 public_ip = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_public_ip(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.steam.CMsgClientMMSGetLobbyList.Filter filters = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgClientMMSGetLobbyList_Filter::_InternalParse;
          object = msg->add_filters();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 50 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientMMSGetLobbyList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientMMSGetLobbyList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_lobbies_requested = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_num_lobbies_requested(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_lobbies_requested_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cell_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_cell_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cell_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 public_ip = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_public_ip(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &public_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgClientMMSGetLobbyList.Filter filters = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_filters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientMMSGetLobbyList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientMMSGetLobbyList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientMMSGetLobbyList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientMMSGetLobbyList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional int32 num_lobbies_requested = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_lobbies_requested(), output);
  }

  // optional uint32 cell_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cell_id(), output);
  }

  // optional uint32 public_ip = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->public_ip(), output);
  }

  // repeated .proto.steam.CMsgClientMMSGetLobbyList.Filter filters = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->filters_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->filters(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientMMSGetLobbyList)
}

::google::protobuf::uint8* CMsgClientMMSGetLobbyList::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientMMSGetLobbyList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional int32 num_lobbies_requested = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num_lobbies_requested(), target);
  }

  // optional uint32 cell_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cell_id(), target);
  }

  // optional uint32 public_ip = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->public_ip(), target);
  }

  // repeated .proto.steam.CMsgClientMMSGetLobbyList.Filter filters = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->filters_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->filters(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientMMSGetLobbyList)
  return target;
}

size_t CMsgClientMMSGetLobbyList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientMMSGetLobbyList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientMMSGetLobbyList.Filter filters = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->filters_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->filters(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional int32 num_lobbies_requested = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_lobbies_requested());
    }

    // optional uint32 cell_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cell_id());
    }

    // optional uint32 public_ip = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->public_ip());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientMMSGetLobbyList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientMMSGetLobbyList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSGetLobbyList* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientMMSGetLobbyList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientMMSGetLobbyList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientMMSGetLobbyList)
    MergeFrom(*source);
  }
}

void CMsgClientMMSGetLobbyList::MergeFrom(const CMsgClientMMSGetLobbyList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientMMSGetLobbyList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  filters_.MergeFrom(from.filters_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_lobbies_requested_ = from.num_lobbies_requested_;
    }
    if (cached_has_bits & 0x00000004u) {
      cell_id_ = from.cell_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      public_ip_ = from.public_ip_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSGetLobbyList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientMMSGetLobbyList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSGetLobbyList::CopyFrom(const CMsgClientMMSGetLobbyList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientMMSGetLobbyList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSGetLobbyList::IsInitialized() const {
  return true;
}

void CMsgClientMMSGetLobbyList::Swap(CMsgClientMMSGetLobbyList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientMMSGetLobbyList::InternalSwap(CMsgClientMMSGetLobbyList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&filters_)->InternalSwap(CastToBase(&other->filters_));
  swap(app_id_, other->app_id_);
  swap(num_lobbies_requested_, other->num_lobbies_requested_);
  swap(cell_id_, other->cell_id_);
  swap(public_ip_, other->public_ip_);
}

::google::protobuf::Metadata CMsgClientMMSGetLobbyList::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientMMSGetLobbyListResponse_Lobby::InitAsDefaultInstance() {
}
class CMsgClientMMSGetLobbyListResponse_Lobby::HasBitSetters {
 public:
  static void set_has_steam_id(CMsgClientMMSGetLobbyListResponse_Lobby* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_max_members(CMsgClientMMSGetLobbyListResponse_Lobby* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_lobby_type(CMsgClientMMSGetLobbyListResponse_Lobby* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_lobby_flags(CMsgClientMMSGetLobbyListResponse_Lobby* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_metadata(CMsgClientMMSGetLobbyListResponse_Lobby* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_num_members(CMsgClientMMSGetLobbyListResponse_Lobby* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_distance(CMsgClientMMSGetLobbyListResponse_Lobby* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_weight(CMsgClientMMSGetLobbyListResponse_Lobby* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientMMSGetLobbyListResponse_Lobby::kSteamIdFieldNumber;
const int CMsgClientMMSGetLobbyListResponse_Lobby::kMaxMembersFieldNumber;
const int CMsgClientMMSGetLobbyListResponse_Lobby::kLobbyTypeFieldNumber;
const int CMsgClientMMSGetLobbyListResponse_Lobby::kLobbyFlagsFieldNumber;
const int CMsgClientMMSGetLobbyListResponse_Lobby::kMetadataFieldNumber;
const int CMsgClientMMSGetLobbyListResponse_Lobby::kNumMembersFieldNumber;
const int CMsgClientMMSGetLobbyListResponse_Lobby::kDistanceFieldNumber;
const int CMsgClientMMSGetLobbyListResponse_Lobby::kWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientMMSGetLobbyListResponse_Lobby::CMsgClientMMSGetLobbyListResponse_Lobby()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientMMSGetLobbyListResponse.Lobby)
}
CMsgClientMMSGetLobbyListResponse_Lobby::CMsgClientMMSGetLobbyListResponse_Lobby(const CMsgClientMMSGetLobbyListResponse_Lobby& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_metadata()) {
    metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&distance_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(distance_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientMMSGetLobbyListResponse.Lobby)
}

void CMsgClientMMSGetLobbyListResponse_Lobby::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientMMSGetLobbyListResponse_Lobby_steammessages_5fclientserver_2eproto.base);
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steam_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&distance_) -
      reinterpret_cast<char*>(&steam_id_)) + sizeof(distance_));
}

CMsgClientMMSGetLobbyListResponse_Lobby::~CMsgClientMMSGetLobbyListResponse_Lobby() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientMMSGetLobbyListResponse.Lobby)
  SharedDtor();
}

void CMsgClientMMSGetLobbyListResponse_Lobby::SharedDtor() {
  metadata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientMMSGetLobbyListResponse_Lobby::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientMMSGetLobbyListResponse_Lobby& CMsgClientMMSGetLobbyListResponse_Lobby::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientMMSGetLobbyListResponse_Lobby_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientMMSGetLobbyListResponse_Lobby::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientMMSGetLobbyListResponse.Lobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    metadata_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&distance_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(distance_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientMMSGetLobbyListResponse_Lobby::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientMMSGetLobbyListResponse_Lobby*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steam_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional int32 max_members = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_max_members(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 lobby_type = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_lobby_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 lobby_flags = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_lobby_flags(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes metadata = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_metadata();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional int32 num_members = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_num_members(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float distance = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 61) goto handle_unusual;
        msg->set_distance(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional int64 weight = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_weight(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientMMSGetLobbyListResponse_Lobby::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientMMSGetLobbyListResponse.Lobby)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_members = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_max_members(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_members_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 lobby_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_lobby_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lobby_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 lobby_flags = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_lobby_flags(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lobby_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes metadata = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_members = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_num_members(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_members_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float distance = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (61 & 0xFF)) {
          HasBitSetters::set_has_distance(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 weight = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_weight(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientMMSGetLobbyListResponse.Lobby)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientMMSGetLobbyListResponse.Lobby)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientMMSGetLobbyListResponse_Lobby::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientMMSGetLobbyListResponse.Lobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional int32 max_members = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_members(), output);
  }

  // optional int32 lobby_type = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lobby_type(), output);
  }

  // optional int32 lobby_flags = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lobby_flags(), output);
  }

  // optional bytes metadata = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->metadata(), output);
  }

  // optional int32 num_members = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->num_members(), output);
  }

  // optional float distance = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->distance(), output);
  }

  // optional int64 weight = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->weight(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientMMSGetLobbyListResponse.Lobby)
}

::google::protobuf::uint8* CMsgClientMMSGetLobbyListResponse_Lobby::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientMMSGetLobbyListResponse.Lobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional int32 max_members = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max_members(), target);
  }

  // optional int32 lobby_type = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lobby_type(), target);
  }

  // optional int32 lobby_flags = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lobby_flags(), target);
  }

  // optional bytes metadata = 5;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->metadata(), target);
  }

  // optional int32 num_members = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->num_members(), target);
  }

  // optional float distance = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->distance(), target);
  }

  // optional int64 weight = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->weight(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientMMSGetLobbyListResponse.Lobby)
  return target;
}

size_t CMsgClientMMSGetLobbyListResponse_Lobby::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientMMSGetLobbyListResponse.Lobby)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes metadata = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->metadata());
    }

    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional int32 max_members = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_members());
    }

    // optional int32 lobby_type = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lobby_type());
    }

    // optional int32 lobby_flags = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lobby_flags());
    }

    // optional int32 num_members = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_members());
    }

    // optional int64 weight = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->weight());
    }

    // optional float distance = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientMMSGetLobbyListResponse_Lobby::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientMMSGetLobbyListResponse.Lobby)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSGetLobbyListResponse_Lobby* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientMMSGetLobbyListResponse_Lobby>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientMMSGetLobbyListResponse.Lobby)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientMMSGetLobbyListResponse.Lobby)
    MergeFrom(*source);
  }
}

void CMsgClientMMSGetLobbyListResponse_Lobby::MergeFrom(const CMsgClientMMSGetLobbyListResponse_Lobby& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientMMSGetLobbyListResponse.Lobby)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_members_ = from.max_members_;
    }
    if (cached_has_bits & 0x00000008u) {
      lobby_type_ = from.lobby_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      lobby_flags_ = from.lobby_flags_;
    }
    if (cached_has_bits & 0x00000020u) {
      num_members_ = from.num_members_;
    }
    if (cached_has_bits & 0x00000040u) {
      weight_ = from.weight_;
    }
    if (cached_has_bits & 0x00000080u) {
      distance_ = from.distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSGetLobbyListResponse_Lobby::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientMMSGetLobbyListResponse.Lobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSGetLobbyListResponse_Lobby::CopyFrom(const CMsgClientMMSGetLobbyListResponse_Lobby& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientMMSGetLobbyListResponse.Lobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSGetLobbyListResponse_Lobby::IsInitialized() const {
  return true;
}

void CMsgClientMMSGetLobbyListResponse_Lobby::Swap(CMsgClientMMSGetLobbyListResponse_Lobby* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientMMSGetLobbyListResponse_Lobby::InternalSwap(CMsgClientMMSGetLobbyListResponse_Lobby* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  metadata_.Swap(&other->metadata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(steam_id_, other->steam_id_);
  swap(max_members_, other->max_members_);
  swap(lobby_type_, other->lobby_type_);
  swap(lobby_flags_, other->lobby_flags_);
  swap(num_members_, other->num_members_);
  swap(weight_, other->weight_);
  swap(distance_, other->distance_);
}

::google::protobuf::Metadata CMsgClientMMSGetLobbyListResponse_Lobby::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientMMSGetLobbyListResponse::InitAsDefaultInstance() {
}
class CMsgClientMMSGetLobbyListResponse::HasBitSetters {
 public:
  static void set_has_app_id(CMsgClientMMSGetLobbyListResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_eresult(CMsgClientMMSGetLobbyListResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientMMSGetLobbyListResponse::kAppIdFieldNumber;
const int CMsgClientMMSGetLobbyListResponse::kEresultFieldNumber;
const int CMsgClientMMSGetLobbyListResponse::kLobbiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientMMSGetLobbyListResponse::CMsgClientMMSGetLobbyListResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientMMSGetLobbyListResponse)
}
CMsgClientMMSGetLobbyListResponse::CMsgClientMMSGetLobbyListResponse(const CMsgClientMMSGetLobbyListResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      lobbies_(from.lobbies_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientMMSGetLobbyListResponse)
}

void CMsgClientMMSGetLobbyListResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientMMSGetLobbyListResponse_steammessages_5fclientserver_2eproto.base);
  app_id_ = 0u;
  eresult_ = 2;
}

CMsgClientMMSGetLobbyListResponse::~CMsgClientMMSGetLobbyListResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientMMSGetLobbyListResponse)
  SharedDtor();
}

void CMsgClientMMSGetLobbyListResponse::SharedDtor() {
}

void CMsgClientMMSGetLobbyListResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientMMSGetLobbyListResponse& CMsgClientMMSGetLobbyListResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientMMSGetLobbyListResponse_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientMMSGetLobbyListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientMMSGetLobbyListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lobbies_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    app_id_ = 0u;
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientMMSGetLobbyListResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientMMSGetLobbyListResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 eresult = 3 [default = 2];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_eresult(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.steam.CMsgClientMMSGetLobbyListResponse.Lobby lobbies = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgClientMMSGetLobbyListResponse_Lobby::_InternalParse;
          object = msg->add_lobbies();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientMMSGetLobbyListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientMMSGetLobbyListResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 eresult = 3 [default = 2];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_eresult(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgClientMMSGetLobbyListResponse.Lobby lobbies = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_lobbies()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientMMSGetLobbyListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientMMSGetLobbyListResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientMMSGetLobbyListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientMMSGetLobbyListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional int32 eresult = 3 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->eresult(), output);
  }

  // repeated .proto.steam.CMsgClientMMSGetLobbyListResponse.Lobby lobbies = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lobbies_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->lobbies(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientMMSGetLobbyListResponse)
}

::google::protobuf::uint8* CMsgClientMMSGetLobbyListResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientMMSGetLobbyListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional int32 eresult = 3 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->eresult(), target);
  }

  // repeated .proto.steam.CMsgClientMMSGetLobbyListResponse.Lobby lobbies = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lobbies_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->lobbies(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientMMSGetLobbyListResponse)
  return target;
}

size_t CMsgClientMMSGetLobbyListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientMMSGetLobbyListResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientMMSGetLobbyListResponse.Lobby lobbies = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->lobbies_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lobbies(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional int32 eresult = 3 [default = 2];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientMMSGetLobbyListResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientMMSGetLobbyListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSGetLobbyListResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientMMSGetLobbyListResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientMMSGetLobbyListResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientMMSGetLobbyListResponse)
    MergeFrom(*source);
  }
}

void CMsgClientMMSGetLobbyListResponse::MergeFrom(const CMsgClientMMSGetLobbyListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientMMSGetLobbyListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lobbies_.MergeFrom(from.lobbies_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSGetLobbyListResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientMMSGetLobbyListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSGetLobbyListResponse::CopyFrom(const CMsgClientMMSGetLobbyListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientMMSGetLobbyListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSGetLobbyListResponse::IsInitialized() const {
  return true;
}

void CMsgClientMMSGetLobbyListResponse::Swap(CMsgClientMMSGetLobbyListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientMMSGetLobbyListResponse::InternalSwap(CMsgClientMMSGetLobbyListResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&lobbies_)->InternalSwap(CastToBase(&other->lobbies_));
  swap(app_id_, other->app_id_);
  swap(eresult_, other->eresult_);
}

::google::protobuf::Metadata CMsgClientMMSGetLobbyListResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientMMSSetLobbyData::InitAsDefaultInstance() {
}
class CMsgClientMMSSetLobbyData::HasBitSetters {
 public:
  static void set_has_app_id(CMsgClientMMSSetLobbyData* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_steam_id_lobby(CMsgClientMMSSetLobbyData* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_steam_id_member(CMsgClientMMSSetLobbyData* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_max_members(CMsgClientMMSSetLobbyData* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_lobby_type(CMsgClientMMSSetLobbyData* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_lobby_flags(CMsgClientMMSSetLobbyData* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_metadata(CMsgClientMMSSetLobbyData* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientMMSSetLobbyData::kAppIdFieldNumber;
const int CMsgClientMMSSetLobbyData::kSteamIdLobbyFieldNumber;
const int CMsgClientMMSSetLobbyData::kSteamIdMemberFieldNumber;
const int CMsgClientMMSSetLobbyData::kMaxMembersFieldNumber;
const int CMsgClientMMSSetLobbyData::kLobbyTypeFieldNumber;
const int CMsgClientMMSSetLobbyData::kLobbyFlagsFieldNumber;
const int CMsgClientMMSSetLobbyData::kMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientMMSSetLobbyData::CMsgClientMMSSetLobbyData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientMMSSetLobbyData)
}
CMsgClientMMSSetLobbyData::CMsgClientMMSSetLobbyData(const CMsgClientMMSSetLobbyData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_metadata()) {
    metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
  ::memcpy(&steam_id_lobby_, &from.steam_id_lobby_,
    static_cast<size_t>(reinterpret_cast<char*>(&lobby_flags_) -
    reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(lobby_flags_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientMMSSetLobbyData)
}

void CMsgClientMMSSetLobbyData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientMMSSetLobbyData_steammessages_5fclientserver_2eproto.base);
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steam_id_lobby_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lobby_flags_) -
      reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(lobby_flags_));
}

CMsgClientMMSSetLobbyData::~CMsgClientMMSSetLobbyData() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientMMSSetLobbyData)
  SharedDtor();
}

void CMsgClientMMSSetLobbyData::SharedDtor() {
  metadata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientMMSSetLobbyData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientMMSSetLobbyData& CMsgClientMMSSetLobbyData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientMMSSetLobbyData_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientMMSSetLobbyData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientMMSSetLobbyData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    metadata_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&steam_id_lobby_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lobby_flags_) -
        reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(lobby_flags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientMMSSetLobbyData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientMMSSetLobbyData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_steam_id_lobby(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed64 steam_id_member = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_steam_id_member(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional int32 max_members = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_max_members(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 lobby_type = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_lobby_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 lobby_flags = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_lobby_flags(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes metadata = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_metadata();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientMMSSetLobbyData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientMMSSetLobbyData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_steam_id_lobby(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_lobby_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_member = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          HasBitSetters::set_has_steam_id_member(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_member_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_members = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_max_members(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_members_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 lobby_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_lobby_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lobby_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 lobby_flags = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_lobby_flags(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lobby_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes metadata = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientMMSSetLobbyData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientMMSSetLobbyData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientMMSSetLobbyData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientMMSSetLobbyData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_lobby(), output);
  }

  // optional fixed64 steam_id_member = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->steam_id_member(), output);
  }

  // optional int32 max_members = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_members(), output);
  }

  // optional int32 lobby_type = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->lobby_type(), output);
  }

  // optional int32 lobby_flags = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->lobby_flags(), output);
  }

  // optional bytes metadata = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->metadata(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientMMSSetLobbyData)
}

::google::protobuf::uint8* CMsgClientMMSSetLobbyData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientMMSSetLobbyData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id_lobby(), target);
  }

  // optional fixed64 steam_id_member = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->steam_id_member(), target);
  }

  // optional int32 max_members = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->max_members(), target);
  }

  // optional int32 lobby_type = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->lobby_type(), target);
  }

  // optional int32 lobby_flags = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->lobby_flags(), target);
  }

  // optional bytes metadata = 7;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->metadata(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientMMSSetLobbyData)
  return target;
}

size_t CMsgClientMMSSetLobbyData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientMMSSetLobbyData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional bytes metadata = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->metadata());
    }

    // optional fixed64 steam_id_lobby = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional int32 max_members = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_members());
    }

    // optional fixed64 steam_id_member = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional int32 lobby_type = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lobby_type());
    }

    // optional int32 lobby_flags = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lobby_flags());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientMMSSetLobbyData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientMMSSetLobbyData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSSetLobbyData* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientMMSSetLobbyData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientMMSSetLobbyData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientMMSSetLobbyData)
    MergeFrom(*source);
  }
}

void CMsgClientMMSSetLobbyData::MergeFrom(const CMsgClientMMSSetLobbyData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientMMSSetLobbyData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_lobby_ = from.steam_id_lobby_;
    }
    if (cached_has_bits & 0x00000004u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_members_ = from.max_members_;
    }
    if (cached_has_bits & 0x00000010u) {
      steam_id_member_ = from.steam_id_member_;
    }
    if (cached_has_bits & 0x00000020u) {
      lobby_type_ = from.lobby_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      lobby_flags_ = from.lobby_flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSSetLobbyData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientMMSSetLobbyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSSetLobbyData::CopyFrom(const CMsgClientMMSSetLobbyData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientMMSSetLobbyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSSetLobbyData::IsInitialized() const {
  return true;
}

void CMsgClientMMSSetLobbyData::Swap(CMsgClientMMSSetLobbyData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientMMSSetLobbyData::InternalSwap(CMsgClientMMSSetLobbyData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  metadata_.Swap(&other->metadata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(steam_id_lobby_, other->steam_id_lobby_);
  swap(app_id_, other->app_id_);
  swap(max_members_, other->max_members_);
  swap(steam_id_member_, other->steam_id_member_);
  swap(lobby_type_, other->lobby_type_);
  swap(lobby_flags_, other->lobby_flags_);
}

::google::protobuf::Metadata CMsgClientMMSSetLobbyData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientMMSSetLobbyDataResponse::InitAsDefaultInstance() {
}
class CMsgClientMMSSetLobbyDataResponse::HasBitSetters {
 public:
  static void set_has_app_id(CMsgClientMMSSetLobbyDataResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_steam_id_lobby(CMsgClientMMSSetLobbyDataResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_eresult(CMsgClientMMSSetLobbyDataResponse* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientMMSSetLobbyDataResponse::kAppIdFieldNumber;
const int CMsgClientMMSSetLobbyDataResponse::kSteamIdLobbyFieldNumber;
const int CMsgClientMMSSetLobbyDataResponse::kEresultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientMMSSetLobbyDataResponse::CMsgClientMMSSetLobbyDataResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientMMSSetLobbyDataResponse)
}
CMsgClientMMSSetLobbyDataResponse::CMsgClientMMSSetLobbyDataResponse(const CMsgClientMMSSetLobbyDataResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steam_id_lobby_, &from.steam_id_lobby_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientMMSSetLobbyDataResponse)
}

void CMsgClientMMSSetLobbyDataResponse::SharedCtor() {
  ::memset(&steam_id_lobby_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&app_id_) -
      reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
  eresult_ = 2;
}

CMsgClientMMSSetLobbyDataResponse::~CMsgClientMMSSetLobbyDataResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientMMSSetLobbyDataResponse)
  SharedDtor();
}

void CMsgClientMMSSetLobbyDataResponse::SharedDtor() {
}

void CMsgClientMMSSetLobbyDataResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientMMSSetLobbyDataResponse& CMsgClientMMSSetLobbyDataResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientMMSSetLobbyDataResponse_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientMMSSetLobbyDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientMMSSetLobbyDataResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&steam_id_lobby_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&app_id_) -
        reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientMMSSetLobbyDataResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientMMSSetLobbyDataResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_steam_id_lobby(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional int32 eresult = 3 [default = 2];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_eresult(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientMMSSetLobbyDataResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientMMSSetLobbyDataResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_steam_id_lobby(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_lobby_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 eresult = 3 [default = 2];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_eresult(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientMMSSetLobbyDataResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientMMSSetLobbyDataResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientMMSSetLobbyDataResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientMMSSetLobbyDataResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_lobby(), output);
  }

  // optional int32 eresult = 3 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->eresult(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientMMSSetLobbyDataResponse)
}

::google::protobuf::uint8* CMsgClientMMSSetLobbyDataResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientMMSSetLobbyDataResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id_lobby(), target);
  }

  // optional int32 eresult = 3 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->eresult(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientMMSSetLobbyDataResponse)
  return target;
}

size_t CMsgClientMMSSetLobbyDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientMMSSetLobbyDataResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 steam_id_lobby = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional int32 eresult = 3 [default = 2];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientMMSSetLobbyDataResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientMMSSetLobbyDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSSetLobbyDataResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientMMSSetLobbyDataResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientMMSSetLobbyDataResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientMMSSetLobbyDataResponse)
    MergeFrom(*source);
  }
}

void CMsgClientMMSSetLobbyDataResponse::MergeFrom(const CMsgClientMMSSetLobbyDataResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientMMSSetLobbyDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_lobby_ = from.steam_id_lobby_;
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSSetLobbyDataResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientMMSSetLobbyDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSSetLobbyDataResponse::CopyFrom(const CMsgClientMMSSetLobbyDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientMMSSetLobbyDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSSetLobbyDataResponse::IsInitialized() const {
  return true;
}

void CMsgClientMMSSetLobbyDataResponse::Swap(CMsgClientMMSSetLobbyDataResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientMMSSetLobbyDataResponse::InternalSwap(CMsgClientMMSSetLobbyDataResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steam_id_lobby_, other->steam_id_lobby_);
  swap(app_id_, other->app_id_);
  swap(eresult_, other->eresult_);
}

::google::protobuf::Metadata CMsgClientMMSSetLobbyDataResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientMMSGetLobbyData::InitAsDefaultInstance() {
}
class CMsgClientMMSGetLobbyData::HasBitSetters {
 public:
  static void set_has_app_id(CMsgClientMMSGetLobbyData* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_steam_id_lobby(CMsgClientMMSGetLobbyData* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientMMSGetLobbyData::kAppIdFieldNumber;
const int CMsgClientMMSGetLobbyData::kSteamIdLobbyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientMMSGetLobbyData::CMsgClientMMSGetLobbyData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientMMSGetLobbyData)
}
CMsgClientMMSGetLobbyData::CMsgClientMMSGetLobbyData(const CMsgClientMMSGetLobbyData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steam_id_lobby_, &from.steam_id_lobby_,
    static_cast<size_t>(reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientMMSGetLobbyData)
}

void CMsgClientMMSGetLobbyData::SharedCtor() {
  ::memset(&steam_id_lobby_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&app_id_) -
      reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
}

CMsgClientMMSGetLobbyData::~CMsgClientMMSGetLobbyData() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientMMSGetLobbyData)
  SharedDtor();
}

void CMsgClientMMSGetLobbyData::SharedDtor() {
}

void CMsgClientMMSGetLobbyData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientMMSGetLobbyData& CMsgClientMMSGetLobbyData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientMMSGetLobbyData_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientMMSGetLobbyData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientMMSGetLobbyData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steam_id_lobby_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&app_id_) -
        reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientMMSGetLobbyData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientMMSGetLobbyData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_steam_id_lobby(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientMMSGetLobbyData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientMMSGetLobbyData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_steam_id_lobby(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_lobby_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientMMSGetLobbyData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientMMSGetLobbyData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientMMSGetLobbyData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientMMSGetLobbyData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_lobby(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientMMSGetLobbyData)
}

::google::protobuf::uint8* CMsgClientMMSGetLobbyData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientMMSGetLobbyData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id_lobby(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientMMSGetLobbyData)
  return target;
}

size_t CMsgClientMMSGetLobbyData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientMMSGetLobbyData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steam_id_lobby = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientMMSGetLobbyData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientMMSGetLobbyData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSGetLobbyData* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientMMSGetLobbyData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientMMSGetLobbyData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientMMSGetLobbyData)
    MergeFrom(*source);
  }
}

void CMsgClientMMSGetLobbyData::MergeFrom(const CMsgClientMMSGetLobbyData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientMMSGetLobbyData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_lobby_ = from.steam_id_lobby_;
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSGetLobbyData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientMMSGetLobbyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSGetLobbyData::CopyFrom(const CMsgClientMMSGetLobbyData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientMMSGetLobbyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSGetLobbyData::IsInitialized() const {
  return true;
}

void CMsgClientMMSGetLobbyData::Swap(CMsgClientMMSGetLobbyData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientMMSGetLobbyData::InternalSwap(CMsgClientMMSGetLobbyData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steam_id_lobby_, other->steam_id_lobby_);
  swap(app_id_, other->app_id_);
}

::google::protobuf::Metadata CMsgClientMMSGetLobbyData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientMMSLobbyData_Member::InitAsDefaultInstance() {
}
class CMsgClientMMSLobbyData_Member::HasBitSetters {
 public:
  static void set_has_steam_id(CMsgClientMMSLobbyData_Member* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_persona_name(CMsgClientMMSLobbyData_Member* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_metadata(CMsgClientMMSLobbyData_Member* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientMMSLobbyData_Member::kSteamIdFieldNumber;
const int CMsgClientMMSLobbyData_Member::kPersonaNameFieldNumber;
const int CMsgClientMMSLobbyData_Member::kMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientMMSLobbyData_Member::CMsgClientMMSLobbyData_Member()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientMMSLobbyData.Member)
}
CMsgClientMMSLobbyData_Member::CMsgClientMMSLobbyData_Member(const CMsgClientMMSLobbyData_Member& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  persona_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_persona_name()) {
    persona_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_);
  }
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_metadata()) {
    metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
  steam_id_ = from.steam_id_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientMMSLobbyData.Member)
}

void CMsgClientMMSLobbyData_Member::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientMMSLobbyData_Member_steammessages_5fclientserver_2eproto.base);
  persona_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  steam_id_ = PROTOBUF_ULONGLONG(0);
}

CMsgClientMMSLobbyData_Member::~CMsgClientMMSLobbyData_Member() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientMMSLobbyData.Member)
  SharedDtor();
}

void CMsgClientMMSLobbyData_Member::SharedDtor() {
  persona_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientMMSLobbyData_Member::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientMMSLobbyData_Member& CMsgClientMMSLobbyData_Member::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientMMSLobbyData_Member_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientMMSLobbyData_Member::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientMMSLobbyData.Member)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      persona_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      metadata_.ClearNonDefaultToEmptyNoArena();
    }
  }
  steam_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientMMSLobbyData_Member::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientMMSLobbyData_Member*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steam_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional string persona_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientMMSLobbyData.Member.persona_name");
        object = msg->mutable_persona_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bytes metadata = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_metadata();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientMMSLobbyData_Member::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientMMSLobbyData.Member)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string persona_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_persona_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->persona_name().data(), static_cast<int>(this->persona_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientMMSLobbyData.Member.persona_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes metadata = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientMMSLobbyData.Member)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientMMSLobbyData.Member)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientMMSLobbyData_Member::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientMMSLobbyData.Member)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional string persona_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), static_cast<int>(this->persona_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientMMSLobbyData.Member.persona_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->persona_name(), output);
  }

  // optional bytes metadata = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->metadata(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientMMSLobbyData.Member)
}

::google::protobuf::uint8* CMsgClientMMSLobbyData_Member::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientMMSLobbyData.Member)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional string persona_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), static_cast<int>(this->persona_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientMMSLobbyData.Member.persona_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->persona_name(), target);
  }

  // optional bytes metadata = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->metadata(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientMMSLobbyData.Member)
  return target;
}

size_t CMsgClientMMSLobbyData_Member::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientMMSLobbyData.Member)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string persona_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->persona_name());
    }

    // optional bytes metadata = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->metadata());
    }

    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientMMSLobbyData_Member::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientMMSLobbyData.Member)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSLobbyData_Member* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientMMSLobbyData_Member>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientMMSLobbyData.Member)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientMMSLobbyData.Member)
    MergeFrom(*source);
  }
}

void CMsgClientMMSLobbyData_Member::MergeFrom(const CMsgClientMMSLobbyData_Member& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientMMSLobbyData.Member)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      persona_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
    }
    if (cached_has_bits & 0x00000004u) {
      steam_id_ = from.steam_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSLobbyData_Member::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientMMSLobbyData.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSLobbyData_Member::CopyFrom(const CMsgClientMMSLobbyData_Member& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientMMSLobbyData.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSLobbyData_Member::IsInitialized() const {
  return true;
}

void CMsgClientMMSLobbyData_Member::Swap(CMsgClientMMSLobbyData_Member* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientMMSLobbyData_Member::InternalSwap(CMsgClientMMSLobbyData_Member* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  persona_name_.Swap(&other->persona_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  metadata_.Swap(&other->metadata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(steam_id_, other->steam_id_);
}

::google::protobuf::Metadata CMsgClientMMSLobbyData_Member::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientMMSLobbyData::InitAsDefaultInstance() {
}
class CMsgClientMMSLobbyData::HasBitSetters {
 public:
  static void set_has_app_id(CMsgClientMMSLobbyData* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_steam_id_lobby(CMsgClientMMSLobbyData* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_num_members(CMsgClientMMSLobbyData* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_max_members(CMsgClientMMSLobbyData* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_lobby_type(CMsgClientMMSLobbyData* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_lobby_flags(CMsgClientMMSLobbyData* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_steam_id_owner(CMsgClientMMSLobbyData* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_metadata(CMsgClientMMSLobbyData* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_lobby_cellid(CMsgClientMMSLobbyData* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientMMSLobbyData::kAppIdFieldNumber;
const int CMsgClientMMSLobbyData::kSteamIdLobbyFieldNumber;
const int CMsgClientMMSLobbyData::kNumMembersFieldNumber;
const int CMsgClientMMSLobbyData::kMaxMembersFieldNumber;
const int CMsgClientMMSLobbyData::kLobbyTypeFieldNumber;
const int CMsgClientMMSLobbyData::kLobbyFlagsFieldNumber;
const int CMsgClientMMSLobbyData::kSteamIdOwnerFieldNumber;
const int CMsgClientMMSLobbyData::kMetadataFieldNumber;
const int CMsgClientMMSLobbyData::kMembersFieldNumber;
const int CMsgClientMMSLobbyData::kLobbyCellidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientMMSLobbyData::CMsgClientMMSLobbyData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientMMSLobbyData)
}
CMsgClientMMSLobbyData::CMsgClientMMSLobbyData(const CMsgClientMMSLobbyData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      members_(from.members_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_metadata()) {
    metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
  ::memcpy(&steam_id_lobby_, &from.steam_id_lobby_,
    static_cast<size_t>(reinterpret_cast<char*>(&lobby_cellid_) -
    reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(lobby_cellid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientMMSLobbyData)
}

void CMsgClientMMSLobbyData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientMMSLobbyData_steammessages_5fclientserver_2eproto.base);
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steam_id_lobby_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lobby_cellid_) -
      reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(lobby_cellid_));
}

CMsgClientMMSLobbyData::~CMsgClientMMSLobbyData() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientMMSLobbyData)
  SharedDtor();
}

void CMsgClientMMSLobbyData::SharedDtor() {
  metadata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientMMSLobbyData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientMMSLobbyData& CMsgClientMMSLobbyData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientMMSLobbyData_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientMMSLobbyData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientMMSLobbyData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    metadata_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&steam_id_lobby_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lobby_flags_) -
        reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(lobby_flags_));
  }
  lobby_cellid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientMMSLobbyData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientMMSLobbyData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_steam_id_lobby(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional int32 num_members = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_num_members(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 max_members = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_max_members(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 lobby_type = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_lobby_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 lobby_flags = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_lobby_flags(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 steam_id_owner = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 57) goto handle_unusual;
        msg->set_steam_id_owner(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional bytes metadata = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_metadata();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .proto.steam.CMsgClientMMSLobbyData.Member members = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgClientMMSLobbyData_Member::_InternalParse;
          object = msg->add_members();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 74 && (ptr += 1));
        break;
      }
      // optional uint32 lobby_cellid = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_lobby_cellid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientMMSLobbyData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientMMSLobbyData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_steam_id_lobby(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_lobby_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_members = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_num_members(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_members_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_members = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_max_members(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_members_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 lobby_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_lobby_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lobby_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 lobby_flags = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_lobby_flags(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lobby_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_owner = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (57 & 0xFF)) {
          HasBitSetters::set_has_steam_id_owner(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_owner_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes metadata = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgClientMMSLobbyData.Member members = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 lobby_cellid = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_lobby_cellid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lobby_cellid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientMMSLobbyData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientMMSLobbyData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientMMSLobbyData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientMMSLobbyData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_lobby(), output);
  }

  // optional int32 num_members = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_members(), output);
  }

  // optional int32 max_members = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_members(), output);
  }

  // optional int32 lobby_type = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->lobby_type(), output);
  }

  // optional int32 lobby_flags = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->lobby_flags(), output);
  }

  // optional fixed64 steam_id_owner = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->steam_id_owner(), output);
  }

  // optional bytes metadata = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->metadata(), output);
  }

  // repeated .proto.steam.CMsgClientMMSLobbyData.Member members = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->members_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9,
      this->members(static_cast<int>(i)),
      output);
  }

  // optional uint32 lobby_cellid = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->lobby_cellid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientMMSLobbyData)
}

::google::protobuf::uint8* CMsgClientMMSLobbyData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientMMSLobbyData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id_lobby(), target);
  }

  // optional int32 num_members = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num_members(), target);
  }

  // optional int32 max_members = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->max_members(), target);
  }

  // optional int32 lobby_type = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->lobby_type(), target);
  }

  // optional int32 lobby_flags = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->lobby_flags(), target);
  }

  // optional fixed64 steam_id_owner = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(7, this->steam_id_owner(), target);
  }

  // optional bytes metadata = 8;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->metadata(), target);
  }

  // repeated .proto.steam.CMsgClientMMSLobbyData.Member members = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->members_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->members(static_cast<int>(i)), target);
  }

  // optional uint32 lobby_cellid = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->lobby_cellid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientMMSLobbyData)
  return target;
}

size_t CMsgClientMMSLobbyData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientMMSLobbyData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientMMSLobbyData.Member members = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->members_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->members(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes metadata = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->metadata());
    }

    // optional fixed64 steam_id_lobby = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional int32 num_members = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_members());
    }

    // optional int32 max_members = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_members());
    }

    // optional int32 lobby_type = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lobby_type());
    }

    // optional fixed64 steam_id_owner = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional int32 lobby_flags = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lobby_flags());
    }

  }
  // optional uint32 lobby_cellid = 10;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->lobby_cellid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientMMSLobbyData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientMMSLobbyData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSLobbyData* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientMMSLobbyData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientMMSLobbyData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientMMSLobbyData)
    MergeFrom(*source);
  }
}

void CMsgClientMMSLobbyData::MergeFrom(const CMsgClientMMSLobbyData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientMMSLobbyData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_lobby_ = from.steam_id_lobby_;
    }
    if (cached_has_bits & 0x00000004u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      num_members_ = from.num_members_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_members_ = from.max_members_;
    }
    if (cached_has_bits & 0x00000020u) {
      lobby_type_ = from.lobby_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      steam_id_owner_ = from.steam_id_owner_;
    }
    if (cached_has_bits & 0x00000080u) {
      lobby_flags_ = from.lobby_flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_lobby_cellid(from.lobby_cellid());
  }
}

void CMsgClientMMSLobbyData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientMMSLobbyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSLobbyData::CopyFrom(const CMsgClientMMSLobbyData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientMMSLobbyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSLobbyData::IsInitialized() const {
  return true;
}

void CMsgClientMMSLobbyData::Swap(CMsgClientMMSLobbyData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientMMSLobbyData::InternalSwap(CMsgClientMMSLobbyData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&members_)->InternalSwap(CastToBase(&other->members_));
  metadata_.Swap(&other->metadata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(steam_id_lobby_, other->steam_id_lobby_);
  swap(app_id_, other->app_id_);
  swap(num_members_, other->num_members_);
  swap(max_members_, other->max_members_);
  swap(lobby_type_, other->lobby_type_);
  swap(steam_id_owner_, other->steam_id_owner_);
  swap(lobby_flags_, other->lobby_flags_);
  swap(lobby_cellid_, other->lobby_cellid_);
}

::google::protobuf::Metadata CMsgClientMMSLobbyData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientMMSSendLobbyChatMsg::InitAsDefaultInstance() {
}
class CMsgClientMMSSendLobbyChatMsg::HasBitSetters {
 public:
  static void set_has_app_id(CMsgClientMMSSendLobbyChatMsg* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_steam_id_lobby(CMsgClientMMSSendLobbyChatMsg* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_steam_id_target(CMsgClientMMSSendLobbyChatMsg* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_lobby_message(CMsgClientMMSSendLobbyChatMsg* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientMMSSendLobbyChatMsg::kAppIdFieldNumber;
const int CMsgClientMMSSendLobbyChatMsg::kSteamIdLobbyFieldNumber;
const int CMsgClientMMSSendLobbyChatMsg::kSteamIdTargetFieldNumber;
const int CMsgClientMMSSendLobbyChatMsg::kLobbyMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientMMSSendLobbyChatMsg::CMsgClientMMSSendLobbyChatMsg()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientMMSSendLobbyChatMsg)
}
CMsgClientMMSSendLobbyChatMsg::CMsgClientMMSSendLobbyChatMsg(const CMsgClientMMSSendLobbyChatMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lobby_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_lobby_message()) {
    lobby_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lobby_message_);
  }
  ::memcpy(&steam_id_lobby_, &from.steam_id_lobby_,
    static_cast<size_t>(reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientMMSSendLobbyChatMsg)
}

void CMsgClientMMSSendLobbyChatMsg::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientMMSSendLobbyChatMsg_steammessages_5fclientserver_2eproto.base);
  lobby_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steam_id_lobby_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&app_id_) -
      reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
}

CMsgClientMMSSendLobbyChatMsg::~CMsgClientMMSSendLobbyChatMsg() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientMMSSendLobbyChatMsg)
  SharedDtor();
}

void CMsgClientMMSSendLobbyChatMsg::SharedDtor() {
  lobby_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientMMSSendLobbyChatMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientMMSSendLobbyChatMsg& CMsgClientMMSSendLobbyChatMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientMMSSendLobbyChatMsg_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientMMSSendLobbyChatMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientMMSSendLobbyChatMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    lobby_message_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&steam_id_lobby_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&app_id_) -
        reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientMMSSendLobbyChatMsg::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientMMSSendLobbyChatMsg*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_steam_id_lobby(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed64 steam_id_target = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_steam_id_target(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional bytes lobby_message = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_lobby_message();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientMMSSendLobbyChatMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientMMSSendLobbyChatMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_steam_id_lobby(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_lobby_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_target = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          HasBitSetters::set_has_steam_id_target(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_target_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes lobby_message = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_lobby_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientMMSSendLobbyChatMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientMMSSendLobbyChatMsg)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientMMSSendLobbyChatMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientMMSSendLobbyChatMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_lobby(), output);
  }

  // optional fixed64 steam_id_target = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->steam_id_target(), output);
  }

  // optional bytes lobby_message = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->lobby_message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientMMSSendLobbyChatMsg)
}

::google::protobuf::uint8* CMsgClientMMSSendLobbyChatMsg::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientMMSSendLobbyChatMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id_lobby(), target);
  }

  // optional fixed64 steam_id_target = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->steam_id_target(), target);
  }

  // optional bytes lobby_message = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->lobby_message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientMMSSendLobbyChatMsg)
  return target;
}

size_t CMsgClientMMSSendLobbyChatMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientMMSSendLobbyChatMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes lobby_message = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->lobby_message());
    }

    // optional fixed64 steam_id_lobby = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 steam_id_target = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientMMSSendLobbyChatMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientMMSSendLobbyChatMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSSendLobbyChatMsg* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientMMSSendLobbyChatMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientMMSSendLobbyChatMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientMMSSendLobbyChatMsg)
    MergeFrom(*source);
  }
}

void CMsgClientMMSSendLobbyChatMsg::MergeFrom(const CMsgClientMMSSendLobbyChatMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientMMSSendLobbyChatMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      lobby_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lobby_message_);
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_lobby_ = from.steam_id_lobby_;
    }
    if (cached_has_bits & 0x00000004u) {
      steam_id_target_ = from.steam_id_target_;
    }
    if (cached_has_bits & 0x00000008u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSSendLobbyChatMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientMMSSendLobbyChatMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSSendLobbyChatMsg::CopyFrom(const CMsgClientMMSSendLobbyChatMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientMMSSendLobbyChatMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSSendLobbyChatMsg::IsInitialized() const {
  return true;
}

void CMsgClientMMSSendLobbyChatMsg::Swap(CMsgClientMMSSendLobbyChatMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientMMSSendLobbyChatMsg::InternalSwap(CMsgClientMMSSendLobbyChatMsg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  lobby_message_.Swap(&other->lobby_message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(steam_id_lobby_, other->steam_id_lobby_);
  swap(steam_id_target_, other->steam_id_target_);
  swap(app_id_, other->app_id_);
}

::google::protobuf::Metadata CMsgClientMMSSendLobbyChatMsg::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientMMSLobbyChatMsg::InitAsDefaultInstance() {
}
class CMsgClientMMSLobbyChatMsg::HasBitSetters {
 public:
  static void set_has_app_id(CMsgClientMMSLobbyChatMsg* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_steam_id_lobby(CMsgClientMMSLobbyChatMsg* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_steam_id_sender(CMsgClientMMSLobbyChatMsg* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_lobby_message(CMsgClientMMSLobbyChatMsg* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientMMSLobbyChatMsg::kAppIdFieldNumber;
const int CMsgClientMMSLobbyChatMsg::kSteamIdLobbyFieldNumber;
const int CMsgClientMMSLobbyChatMsg::kSteamIdSenderFieldNumber;
const int CMsgClientMMSLobbyChatMsg::kLobbyMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientMMSLobbyChatMsg::CMsgClientMMSLobbyChatMsg()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientMMSLobbyChatMsg)
}
CMsgClientMMSLobbyChatMsg::CMsgClientMMSLobbyChatMsg(const CMsgClientMMSLobbyChatMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lobby_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_lobby_message()) {
    lobby_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lobby_message_);
  }
  ::memcpy(&steam_id_lobby_, &from.steam_id_lobby_,
    static_cast<size_t>(reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientMMSLobbyChatMsg)
}

void CMsgClientMMSLobbyChatMsg::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientMMSLobbyChatMsg_steammessages_5fclientserver_2eproto.base);
  lobby_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steam_id_lobby_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&app_id_) -
      reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
}

CMsgClientMMSLobbyChatMsg::~CMsgClientMMSLobbyChatMsg() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientMMSLobbyChatMsg)
  SharedDtor();
}

void CMsgClientMMSLobbyChatMsg::SharedDtor() {
  lobby_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientMMSLobbyChatMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientMMSLobbyChatMsg& CMsgClientMMSLobbyChatMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientMMSLobbyChatMsg_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientMMSLobbyChatMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientMMSLobbyChatMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    lobby_message_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&steam_id_lobby_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&app_id_) -
        reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientMMSLobbyChatMsg::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientMMSLobbyChatMsg*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_steam_id_lobby(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed64 steam_id_sender = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_steam_id_sender(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional bytes lobby_message = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_lobby_message();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientMMSLobbyChatMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientMMSLobbyChatMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_steam_id_lobby(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_lobby_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_sender = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          HasBitSetters::set_has_steam_id_sender(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_sender_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes lobby_message = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_lobby_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientMMSLobbyChatMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientMMSLobbyChatMsg)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientMMSLobbyChatMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientMMSLobbyChatMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_lobby(), output);
  }

  // optional fixed64 steam_id_sender = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->steam_id_sender(), output);
  }

  // optional bytes lobby_message = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->lobby_message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientMMSLobbyChatMsg)
}

::google::protobuf::uint8* CMsgClientMMSLobbyChatMsg::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientMMSLobbyChatMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id_lobby(), target);
  }

  // optional fixed64 steam_id_sender = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->steam_id_sender(), target);
  }

  // optional bytes lobby_message = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->lobby_message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientMMSLobbyChatMsg)
  return target;
}

size_t CMsgClientMMSLobbyChatMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientMMSLobbyChatMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes lobby_message = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->lobby_message());
    }

    // optional fixed64 steam_id_lobby = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 steam_id_sender = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientMMSLobbyChatMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientMMSLobbyChatMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSLobbyChatMsg* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientMMSLobbyChatMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientMMSLobbyChatMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientMMSLobbyChatMsg)
    MergeFrom(*source);
  }
}

void CMsgClientMMSLobbyChatMsg::MergeFrom(const CMsgClientMMSLobbyChatMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientMMSLobbyChatMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      lobby_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lobby_message_);
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_lobby_ = from.steam_id_lobby_;
    }
    if (cached_has_bits & 0x00000004u) {
      steam_id_sender_ = from.steam_id_sender_;
    }
    if (cached_has_bits & 0x00000008u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSLobbyChatMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientMMSLobbyChatMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSLobbyChatMsg::CopyFrom(const CMsgClientMMSLobbyChatMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientMMSLobbyChatMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSLobbyChatMsg::IsInitialized() const {
  return true;
}

void CMsgClientMMSLobbyChatMsg::Swap(CMsgClientMMSLobbyChatMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientMMSLobbyChatMsg::InternalSwap(CMsgClientMMSLobbyChatMsg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  lobby_message_.Swap(&other->lobby_message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(steam_id_lobby_, other->steam_id_lobby_);
  swap(steam_id_sender_, other->steam_id_sender_);
  swap(app_id_, other->app_id_);
}

::google::protobuf::Metadata CMsgClientMMSLobbyChatMsg::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientMMSSetLobbyOwner::InitAsDefaultInstance() {
}
class CMsgClientMMSSetLobbyOwner::HasBitSetters {
 public:
  static void set_has_app_id(CMsgClientMMSSetLobbyOwner* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_steam_id_lobby(CMsgClientMMSSetLobbyOwner* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_steam_id_new_owner(CMsgClientMMSSetLobbyOwner* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientMMSSetLobbyOwner::kAppIdFieldNumber;
const int CMsgClientMMSSetLobbyOwner::kSteamIdLobbyFieldNumber;
const int CMsgClientMMSSetLobbyOwner::kSteamIdNewOwnerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientMMSSetLobbyOwner::CMsgClientMMSSetLobbyOwner()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientMMSSetLobbyOwner)
}
CMsgClientMMSSetLobbyOwner::CMsgClientMMSSetLobbyOwner(const CMsgClientMMSSetLobbyOwner& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steam_id_lobby_, &from.steam_id_lobby_,
    static_cast<size_t>(reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientMMSSetLobbyOwner)
}

void CMsgClientMMSSetLobbyOwner::SharedCtor() {
  ::memset(&steam_id_lobby_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&app_id_) -
      reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
}

CMsgClientMMSSetLobbyOwner::~CMsgClientMMSSetLobbyOwner() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientMMSSetLobbyOwner)
  SharedDtor();
}

void CMsgClientMMSSetLobbyOwner::SharedDtor() {
}

void CMsgClientMMSSetLobbyOwner::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientMMSSetLobbyOwner& CMsgClientMMSSetLobbyOwner::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientMMSSetLobbyOwner_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientMMSSetLobbyOwner::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientMMSSetLobbyOwner)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&steam_id_lobby_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&app_id_) -
        reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientMMSSetLobbyOwner::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientMMSSetLobbyOwner*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_steam_id_lobby(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed64 steam_id_new_owner = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_steam_id_new_owner(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientMMSSetLobbyOwner::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientMMSSetLobbyOwner)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_steam_id_lobby(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_lobby_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_new_owner = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          HasBitSetters::set_has_steam_id_new_owner(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_new_owner_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientMMSSetLobbyOwner)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientMMSSetLobbyOwner)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientMMSSetLobbyOwner::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientMMSSetLobbyOwner)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_lobby(), output);
  }

  // optional fixed64 steam_id_new_owner = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->steam_id_new_owner(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientMMSSetLobbyOwner)
}

::google::protobuf::uint8* CMsgClientMMSSetLobbyOwner::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientMMSSetLobbyOwner)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id_lobby(), target);
  }

  // optional fixed64 steam_id_new_owner = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->steam_id_new_owner(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientMMSSetLobbyOwner)
  return target;
}

size_t CMsgClientMMSSetLobbyOwner::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientMMSSetLobbyOwner)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 steam_id_lobby = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 steam_id_new_owner = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientMMSSetLobbyOwner::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientMMSSetLobbyOwner)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSSetLobbyOwner* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientMMSSetLobbyOwner>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientMMSSetLobbyOwner)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientMMSSetLobbyOwner)
    MergeFrom(*source);
  }
}

void CMsgClientMMSSetLobbyOwner::MergeFrom(const CMsgClientMMSSetLobbyOwner& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientMMSSetLobbyOwner)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_lobby_ = from.steam_id_lobby_;
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_new_owner_ = from.steam_id_new_owner_;
    }
    if (cached_has_bits & 0x00000004u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSSetLobbyOwner::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientMMSSetLobbyOwner)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSSetLobbyOwner::CopyFrom(const CMsgClientMMSSetLobbyOwner& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientMMSSetLobbyOwner)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSSetLobbyOwner::IsInitialized() const {
  return true;
}

void CMsgClientMMSSetLobbyOwner::Swap(CMsgClientMMSSetLobbyOwner* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientMMSSetLobbyOwner::InternalSwap(CMsgClientMMSSetLobbyOwner* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steam_id_lobby_, other->steam_id_lobby_);
  swap(steam_id_new_owner_, other->steam_id_new_owner_);
  swap(app_id_, other->app_id_);
}

::google::protobuf::Metadata CMsgClientMMSSetLobbyOwner::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientMMSSetLobbyOwnerResponse::InitAsDefaultInstance() {
}
class CMsgClientMMSSetLobbyOwnerResponse::HasBitSetters {
 public:
  static void set_has_app_id(CMsgClientMMSSetLobbyOwnerResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_steam_id_lobby(CMsgClientMMSSetLobbyOwnerResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_eresult(CMsgClientMMSSetLobbyOwnerResponse* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientMMSSetLobbyOwnerResponse::kAppIdFieldNumber;
const int CMsgClientMMSSetLobbyOwnerResponse::kSteamIdLobbyFieldNumber;
const int CMsgClientMMSSetLobbyOwnerResponse::kEresultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientMMSSetLobbyOwnerResponse::CMsgClientMMSSetLobbyOwnerResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientMMSSetLobbyOwnerResponse)
}
CMsgClientMMSSetLobbyOwnerResponse::CMsgClientMMSSetLobbyOwnerResponse(const CMsgClientMMSSetLobbyOwnerResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steam_id_lobby_, &from.steam_id_lobby_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientMMSSetLobbyOwnerResponse)
}

void CMsgClientMMSSetLobbyOwnerResponse::SharedCtor() {
  ::memset(&steam_id_lobby_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&app_id_) -
      reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
  eresult_ = 2;
}

CMsgClientMMSSetLobbyOwnerResponse::~CMsgClientMMSSetLobbyOwnerResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientMMSSetLobbyOwnerResponse)
  SharedDtor();
}

void CMsgClientMMSSetLobbyOwnerResponse::SharedDtor() {
}

void CMsgClientMMSSetLobbyOwnerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientMMSSetLobbyOwnerResponse& CMsgClientMMSSetLobbyOwnerResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientMMSSetLobbyOwnerResponse_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientMMSSetLobbyOwnerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientMMSSetLobbyOwnerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&steam_id_lobby_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&app_id_) -
        reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientMMSSetLobbyOwnerResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientMMSSetLobbyOwnerResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_steam_id_lobby(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional int32 eresult = 3 [default = 2];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_eresult(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientMMSSetLobbyOwnerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientMMSSetLobbyOwnerResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_steam_id_lobby(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_lobby_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 eresult = 3 [default = 2];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_eresult(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientMMSSetLobbyOwnerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientMMSSetLobbyOwnerResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientMMSSetLobbyOwnerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientMMSSetLobbyOwnerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_lobby(), output);
  }

  // optional int32 eresult = 3 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->eresult(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientMMSSetLobbyOwnerResponse)
}

::google::protobuf::uint8* CMsgClientMMSSetLobbyOwnerResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientMMSSetLobbyOwnerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id_lobby(), target);
  }

  // optional int32 eresult = 3 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->eresult(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientMMSSetLobbyOwnerResponse)
  return target;
}

size_t CMsgClientMMSSetLobbyOwnerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientMMSSetLobbyOwnerResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 steam_id_lobby = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional int32 eresult = 3 [default = 2];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientMMSSetLobbyOwnerResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientMMSSetLobbyOwnerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSSetLobbyOwnerResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientMMSSetLobbyOwnerResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientMMSSetLobbyOwnerResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientMMSSetLobbyOwnerResponse)
    MergeFrom(*source);
  }
}

void CMsgClientMMSSetLobbyOwnerResponse::MergeFrom(const CMsgClientMMSSetLobbyOwnerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientMMSSetLobbyOwnerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_lobby_ = from.steam_id_lobby_;
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSSetLobbyOwnerResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientMMSSetLobbyOwnerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSSetLobbyOwnerResponse::CopyFrom(const CMsgClientMMSSetLobbyOwnerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientMMSSetLobbyOwnerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSSetLobbyOwnerResponse::IsInitialized() const {
  return true;
}

void CMsgClientMMSSetLobbyOwnerResponse::Swap(CMsgClientMMSSetLobbyOwnerResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientMMSSetLobbyOwnerResponse::InternalSwap(CMsgClientMMSSetLobbyOwnerResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steam_id_lobby_, other->steam_id_lobby_);
  swap(app_id_, other->app_id_);
  swap(eresult_, other->eresult_);
}

::google::protobuf::Metadata CMsgClientMMSSetLobbyOwnerResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientMMSSetLobbyLinked::InitAsDefaultInstance() {
}
class CMsgClientMMSSetLobbyLinked::HasBitSetters {
 public:
  static void set_has_app_id(CMsgClientMMSSetLobbyLinked* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_steam_id_lobby(CMsgClientMMSSetLobbyLinked* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_steam_id_lobby2(CMsgClientMMSSetLobbyLinked* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientMMSSetLobbyLinked::kAppIdFieldNumber;
const int CMsgClientMMSSetLobbyLinked::kSteamIdLobbyFieldNumber;
const int CMsgClientMMSSetLobbyLinked::kSteamIdLobby2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientMMSSetLobbyLinked::CMsgClientMMSSetLobbyLinked()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientMMSSetLobbyLinked)
}
CMsgClientMMSSetLobbyLinked::CMsgClientMMSSetLobbyLinked(const CMsgClientMMSSetLobbyLinked& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steam_id_lobby_, &from.steam_id_lobby_,
    static_cast<size_t>(reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientMMSSetLobbyLinked)
}

void CMsgClientMMSSetLobbyLinked::SharedCtor() {
  ::memset(&steam_id_lobby_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&app_id_) -
      reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
}

CMsgClientMMSSetLobbyLinked::~CMsgClientMMSSetLobbyLinked() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientMMSSetLobbyLinked)
  SharedDtor();
}

void CMsgClientMMSSetLobbyLinked::SharedDtor() {
}

void CMsgClientMMSSetLobbyLinked::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientMMSSetLobbyLinked& CMsgClientMMSSetLobbyLinked::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientMMSSetLobbyLinked_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientMMSSetLobbyLinked::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientMMSSetLobbyLinked)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&steam_id_lobby_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&app_id_) -
        reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientMMSSetLobbyLinked::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientMMSSetLobbyLinked*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_steam_id_lobby(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed64 steam_id_lobby2 = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_steam_id_lobby2(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientMMSSetLobbyLinked::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientMMSSetLobbyLinked)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_steam_id_lobby(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_lobby_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_lobby2 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          HasBitSetters::set_has_steam_id_lobby2(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_lobby2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientMMSSetLobbyLinked)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientMMSSetLobbyLinked)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientMMSSetLobbyLinked::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientMMSSetLobbyLinked)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_lobby(), output);
  }

  // optional fixed64 steam_id_lobby2 = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->steam_id_lobby2(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientMMSSetLobbyLinked)
}

::google::protobuf::uint8* CMsgClientMMSSetLobbyLinked::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientMMSSetLobbyLinked)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id_lobby(), target);
  }

  // optional fixed64 steam_id_lobby2 = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->steam_id_lobby2(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientMMSSetLobbyLinked)
  return target;
}

size_t CMsgClientMMSSetLobbyLinked::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientMMSSetLobbyLinked)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 steam_id_lobby = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 steam_id_lobby2 = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientMMSSetLobbyLinked::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientMMSSetLobbyLinked)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSSetLobbyLinked* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientMMSSetLobbyLinked>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientMMSSetLobbyLinked)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientMMSSetLobbyLinked)
    MergeFrom(*source);
  }
}

void CMsgClientMMSSetLobbyLinked::MergeFrom(const CMsgClientMMSSetLobbyLinked& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientMMSSetLobbyLinked)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_lobby_ = from.steam_id_lobby_;
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_lobby2_ = from.steam_id_lobby2_;
    }
    if (cached_has_bits & 0x00000004u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSSetLobbyLinked::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientMMSSetLobbyLinked)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSSetLobbyLinked::CopyFrom(const CMsgClientMMSSetLobbyLinked& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientMMSSetLobbyLinked)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSSetLobbyLinked::IsInitialized() const {
  return true;
}

void CMsgClientMMSSetLobbyLinked::Swap(CMsgClientMMSSetLobbyLinked* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientMMSSetLobbyLinked::InternalSwap(CMsgClientMMSSetLobbyLinked* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steam_id_lobby_, other->steam_id_lobby_);
  swap(steam_id_lobby2_, other->steam_id_lobby2_);
  swap(app_id_, other->app_id_);
}

::google::protobuf::Metadata CMsgClientMMSSetLobbyLinked::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientMMSSetLobbyGameServer::InitAsDefaultInstance() {
}
class CMsgClientMMSSetLobbyGameServer::HasBitSetters {
 public:
  static void set_has_app_id(CMsgClientMMSSetLobbyGameServer* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_steam_id_lobby(CMsgClientMMSSetLobbyGameServer* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_game_server_ip(CMsgClientMMSSetLobbyGameServer* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_game_server_port(CMsgClientMMSSetLobbyGameServer* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_game_server_steam_id(CMsgClientMMSSetLobbyGameServer* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientMMSSetLobbyGameServer::kAppIdFieldNumber;
const int CMsgClientMMSSetLobbyGameServer::kSteamIdLobbyFieldNumber;
const int CMsgClientMMSSetLobbyGameServer::kGameServerIpFieldNumber;
const int CMsgClientMMSSetLobbyGameServer::kGameServerPortFieldNumber;
const int CMsgClientMMSSetLobbyGameServer::kGameServerSteamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientMMSSetLobbyGameServer::CMsgClientMMSSetLobbyGameServer()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientMMSSetLobbyGameServer)
}
CMsgClientMMSSetLobbyGameServer::CMsgClientMMSSetLobbyGameServer(const CMsgClientMMSSetLobbyGameServer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steam_id_lobby_, &from.steam_id_lobby_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_server_port_) -
    reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(game_server_port_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientMMSSetLobbyGameServer)
}

void CMsgClientMMSSetLobbyGameServer::SharedCtor() {
  ::memset(&steam_id_lobby_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_server_port_) -
      reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(game_server_port_));
}

CMsgClientMMSSetLobbyGameServer::~CMsgClientMMSSetLobbyGameServer() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientMMSSetLobbyGameServer)
  SharedDtor();
}

void CMsgClientMMSSetLobbyGameServer::SharedDtor() {
}

void CMsgClientMMSSetLobbyGameServer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientMMSSetLobbyGameServer& CMsgClientMMSSetLobbyGameServer::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientMMSSetLobbyGameServer_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientMMSSetLobbyGameServer::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientMMSSetLobbyGameServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&steam_id_lobby_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&game_server_port_) -
        reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(game_server_port_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientMMSSetLobbyGameServer::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientMMSSetLobbyGameServer*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_steam_id_lobby(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 game_server_ip = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_game_server_ip(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 game_server_port = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_game_server_port(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 game_server_steam_id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 41) goto handle_unusual;
        msg->set_game_server_steam_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientMMSSetLobbyGameServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientMMSSetLobbyGameServer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_steam_id_lobby(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_lobby_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 game_server_ip = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_game_server_ip(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_server_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 game_server_port = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_game_server_port(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_server_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 game_server_steam_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (41 & 0xFF)) {
          HasBitSetters::set_has_game_server_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &game_server_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientMMSSetLobbyGameServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientMMSSetLobbyGameServer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientMMSSetLobbyGameServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientMMSSetLobbyGameServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_lobby(), output);
  }

  // optional uint32 game_server_ip = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->game_server_ip(), output);
  }

  // optional uint32 game_server_port = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->game_server_port(), output);
  }

  // optional fixed64 game_server_steam_id = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->game_server_steam_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientMMSSetLobbyGameServer)
}

::google::protobuf::uint8* CMsgClientMMSSetLobbyGameServer::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientMMSSetLobbyGameServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id_lobby(), target);
  }

  // optional uint32 game_server_ip = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->game_server_ip(), target);
  }

  // optional uint32 game_server_port = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->game_server_port(), target);
  }

  // optional fixed64 game_server_steam_id = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->game_server_steam_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientMMSSetLobbyGameServer)
  return target;
}

size_t CMsgClientMMSSetLobbyGameServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientMMSSetLobbyGameServer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional fixed64 steam_id_lobby = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional uint32 game_server_ip = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_server_ip());
    }

    // optional fixed64 game_server_steam_id = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional uint32 game_server_port = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_server_port());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientMMSSetLobbyGameServer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientMMSSetLobbyGameServer)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSSetLobbyGameServer* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientMMSSetLobbyGameServer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientMMSSetLobbyGameServer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientMMSSetLobbyGameServer)
    MergeFrom(*source);
  }
}

void CMsgClientMMSSetLobbyGameServer::MergeFrom(const CMsgClientMMSSetLobbyGameServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientMMSSetLobbyGameServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_lobby_ = from.steam_id_lobby_;
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      game_server_ip_ = from.game_server_ip_;
    }
    if (cached_has_bits & 0x00000008u) {
      game_server_steam_id_ = from.game_server_steam_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      game_server_port_ = from.game_server_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSSetLobbyGameServer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientMMSSetLobbyGameServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSSetLobbyGameServer::CopyFrom(const CMsgClientMMSSetLobbyGameServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientMMSSetLobbyGameServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSSetLobbyGameServer::IsInitialized() const {
  return true;
}

void CMsgClientMMSSetLobbyGameServer::Swap(CMsgClientMMSSetLobbyGameServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientMMSSetLobbyGameServer::InternalSwap(CMsgClientMMSSetLobbyGameServer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steam_id_lobby_, other->steam_id_lobby_);
  swap(app_id_, other->app_id_);
  swap(game_server_ip_, other->game_server_ip_);
  swap(game_server_steam_id_, other->game_server_steam_id_);
  swap(game_server_port_, other->game_server_port_);
}

::google::protobuf::Metadata CMsgClientMMSSetLobbyGameServer::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientMMSLobbyGameServerSet::InitAsDefaultInstance() {
}
class CMsgClientMMSLobbyGameServerSet::HasBitSetters {
 public:
  static void set_has_app_id(CMsgClientMMSLobbyGameServerSet* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_steam_id_lobby(CMsgClientMMSLobbyGameServerSet* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_game_server_ip(CMsgClientMMSLobbyGameServerSet* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_game_server_port(CMsgClientMMSLobbyGameServerSet* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_game_server_steam_id(CMsgClientMMSLobbyGameServerSet* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientMMSLobbyGameServerSet::kAppIdFieldNumber;
const int CMsgClientMMSLobbyGameServerSet::kSteamIdLobbyFieldNumber;
const int CMsgClientMMSLobbyGameServerSet::kGameServerIpFieldNumber;
const int CMsgClientMMSLobbyGameServerSet::kGameServerPortFieldNumber;
const int CMsgClientMMSLobbyGameServerSet::kGameServerSteamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientMMSLobbyGameServerSet::CMsgClientMMSLobbyGameServerSet()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientMMSLobbyGameServerSet)
}
CMsgClientMMSLobbyGameServerSet::CMsgClientMMSLobbyGameServerSet(const CMsgClientMMSLobbyGameServerSet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steam_id_lobby_, &from.steam_id_lobby_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_server_port_) -
    reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(game_server_port_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientMMSLobbyGameServerSet)
}

void CMsgClientMMSLobbyGameServerSet::SharedCtor() {
  ::memset(&steam_id_lobby_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_server_port_) -
      reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(game_server_port_));
}

CMsgClientMMSLobbyGameServerSet::~CMsgClientMMSLobbyGameServerSet() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientMMSLobbyGameServerSet)
  SharedDtor();
}

void CMsgClientMMSLobbyGameServerSet::SharedDtor() {
}

void CMsgClientMMSLobbyGameServerSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientMMSLobbyGameServerSet& CMsgClientMMSLobbyGameServerSet::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientMMSLobbyGameServerSet_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientMMSLobbyGameServerSet::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientMMSLobbyGameServerSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&steam_id_lobby_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&game_server_port_) -
        reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(game_server_port_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientMMSLobbyGameServerSet::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientMMSLobbyGameServerSet*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_steam_id_lobby(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 game_server_ip = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_game_server_ip(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 game_server_port = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_game_server_port(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 game_server_steam_id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 41) goto handle_unusual;
        msg->set_game_server_steam_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientMMSLobbyGameServerSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientMMSLobbyGameServerSet)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_steam_id_lobby(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_lobby_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 game_server_ip = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_game_server_ip(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_server_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 game_server_port = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_game_server_port(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_server_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 game_server_steam_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (41 & 0xFF)) {
          HasBitSetters::set_has_game_server_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &game_server_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientMMSLobbyGameServerSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientMMSLobbyGameServerSet)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientMMSLobbyGameServerSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientMMSLobbyGameServerSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_lobby(), output);
  }

  // optional uint32 game_server_ip = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->game_server_ip(), output);
  }

  // optional uint32 game_server_port = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->game_server_port(), output);
  }

  // optional fixed64 game_server_steam_id = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->game_server_steam_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientMMSLobbyGameServerSet)
}

::google::protobuf::uint8* CMsgClientMMSLobbyGameServerSet::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientMMSLobbyGameServerSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id_lobby(), target);
  }

  // optional uint32 game_server_ip = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->game_server_ip(), target);
  }

  // optional uint32 game_server_port = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->game_server_port(), target);
  }

  // optional fixed64 game_server_steam_id = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->game_server_steam_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientMMSLobbyGameServerSet)
  return target;
}

size_t CMsgClientMMSLobbyGameServerSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientMMSLobbyGameServerSet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional fixed64 steam_id_lobby = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional uint32 game_server_ip = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_server_ip());
    }

    // optional fixed64 game_server_steam_id = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional uint32 game_server_port = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_server_port());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientMMSLobbyGameServerSet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientMMSLobbyGameServerSet)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSLobbyGameServerSet* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientMMSLobbyGameServerSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientMMSLobbyGameServerSet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientMMSLobbyGameServerSet)
    MergeFrom(*source);
  }
}

void CMsgClientMMSLobbyGameServerSet::MergeFrom(const CMsgClientMMSLobbyGameServerSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientMMSLobbyGameServerSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_lobby_ = from.steam_id_lobby_;
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      game_server_ip_ = from.game_server_ip_;
    }
    if (cached_has_bits & 0x00000008u) {
      game_server_steam_id_ = from.game_server_steam_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      game_server_port_ = from.game_server_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSLobbyGameServerSet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientMMSLobbyGameServerSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSLobbyGameServerSet::CopyFrom(const CMsgClientMMSLobbyGameServerSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientMMSLobbyGameServerSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSLobbyGameServerSet::IsInitialized() const {
  return true;
}

void CMsgClientMMSLobbyGameServerSet::Swap(CMsgClientMMSLobbyGameServerSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientMMSLobbyGameServerSet::InternalSwap(CMsgClientMMSLobbyGameServerSet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steam_id_lobby_, other->steam_id_lobby_);
  swap(app_id_, other->app_id_);
  swap(game_server_ip_, other->game_server_ip_);
  swap(game_server_steam_id_, other->game_server_steam_id_);
  swap(game_server_port_, other->game_server_port_);
}

::google::protobuf::Metadata CMsgClientMMSLobbyGameServerSet::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientMMSUserJoinedLobby::InitAsDefaultInstance() {
}
class CMsgClientMMSUserJoinedLobby::HasBitSetters {
 public:
  static void set_has_app_id(CMsgClientMMSUserJoinedLobby* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_steam_id_lobby(CMsgClientMMSUserJoinedLobby* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_steam_id_user(CMsgClientMMSUserJoinedLobby* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_persona_name(CMsgClientMMSUserJoinedLobby* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientMMSUserJoinedLobby::kAppIdFieldNumber;
const int CMsgClientMMSUserJoinedLobby::kSteamIdLobbyFieldNumber;
const int CMsgClientMMSUserJoinedLobby::kSteamIdUserFieldNumber;
const int CMsgClientMMSUserJoinedLobby::kPersonaNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientMMSUserJoinedLobby::CMsgClientMMSUserJoinedLobby()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientMMSUserJoinedLobby)
}
CMsgClientMMSUserJoinedLobby::CMsgClientMMSUserJoinedLobby(const CMsgClientMMSUserJoinedLobby& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  persona_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_persona_name()) {
    persona_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_);
  }
  ::memcpy(&steam_id_lobby_, &from.steam_id_lobby_,
    static_cast<size_t>(reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientMMSUserJoinedLobby)
}

void CMsgClientMMSUserJoinedLobby::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientMMSUserJoinedLobby_steammessages_5fclientserver_2eproto.base);
  persona_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steam_id_lobby_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&app_id_) -
      reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
}

CMsgClientMMSUserJoinedLobby::~CMsgClientMMSUserJoinedLobby() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientMMSUserJoinedLobby)
  SharedDtor();
}

void CMsgClientMMSUserJoinedLobby::SharedDtor() {
  persona_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientMMSUserJoinedLobby::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientMMSUserJoinedLobby& CMsgClientMMSUserJoinedLobby::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientMMSUserJoinedLobby_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientMMSUserJoinedLobby::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientMMSUserJoinedLobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    persona_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&steam_id_lobby_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&app_id_) -
        reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientMMSUserJoinedLobby::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientMMSUserJoinedLobby*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_steam_id_lobby(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed64 steam_id_user = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_steam_id_user(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional string persona_name = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientMMSUserJoinedLobby.persona_name");
        object = msg->mutable_persona_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientMMSUserJoinedLobby::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientMMSUserJoinedLobby)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_steam_id_lobby(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_lobby_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_user = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          HasBitSetters::set_has_steam_id_user(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_user_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string persona_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_persona_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->persona_name().data(), static_cast<int>(this->persona_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientMMSUserJoinedLobby.persona_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientMMSUserJoinedLobby)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientMMSUserJoinedLobby)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientMMSUserJoinedLobby::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientMMSUserJoinedLobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_lobby(), output);
  }

  // optional fixed64 steam_id_user = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->steam_id_user(), output);
  }

  // optional string persona_name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), static_cast<int>(this->persona_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientMMSUserJoinedLobby.persona_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->persona_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientMMSUserJoinedLobby)
}

::google::protobuf::uint8* CMsgClientMMSUserJoinedLobby::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientMMSUserJoinedLobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id_lobby(), target);
  }

  // optional fixed64 steam_id_user = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->steam_id_user(), target);
  }

  // optional string persona_name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), static_cast<int>(this->persona_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientMMSUserJoinedLobby.persona_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->persona_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientMMSUserJoinedLobby)
  return target;
}

size_t CMsgClientMMSUserJoinedLobby::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientMMSUserJoinedLobby)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string persona_name = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->persona_name());
    }

    // optional fixed64 steam_id_lobby = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 steam_id_user = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientMMSUserJoinedLobby::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientMMSUserJoinedLobby)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSUserJoinedLobby* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientMMSUserJoinedLobby>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientMMSUserJoinedLobby)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientMMSUserJoinedLobby)
    MergeFrom(*source);
  }
}

void CMsgClientMMSUserJoinedLobby::MergeFrom(const CMsgClientMMSUserJoinedLobby& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientMMSUserJoinedLobby)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      persona_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_lobby_ = from.steam_id_lobby_;
    }
    if (cached_has_bits & 0x00000004u) {
      steam_id_user_ = from.steam_id_user_;
    }
    if (cached_has_bits & 0x00000008u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSUserJoinedLobby::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientMMSUserJoinedLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSUserJoinedLobby::CopyFrom(const CMsgClientMMSUserJoinedLobby& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientMMSUserJoinedLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSUserJoinedLobby::IsInitialized() const {
  return true;
}

void CMsgClientMMSUserJoinedLobby::Swap(CMsgClientMMSUserJoinedLobby* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientMMSUserJoinedLobby::InternalSwap(CMsgClientMMSUserJoinedLobby* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  persona_name_.Swap(&other->persona_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(steam_id_lobby_, other->steam_id_lobby_);
  swap(steam_id_user_, other->steam_id_user_);
  swap(app_id_, other->app_id_);
}

::google::protobuf::Metadata CMsgClientMMSUserJoinedLobby::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientMMSUserLeftLobby::InitAsDefaultInstance() {
}
class CMsgClientMMSUserLeftLobby::HasBitSetters {
 public:
  static void set_has_app_id(CMsgClientMMSUserLeftLobby* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_steam_id_lobby(CMsgClientMMSUserLeftLobby* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_steam_id_user(CMsgClientMMSUserLeftLobby* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_persona_name(CMsgClientMMSUserLeftLobby* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientMMSUserLeftLobby::kAppIdFieldNumber;
const int CMsgClientMMSUserLeftLobby::kSteamIdLobbyFieldNumber;
const int CMsgClientMMSUserLeftLobby::kSteamIdUserFieldNumber;
const int CMsgClientMMSUserLeftLobby::kPersonaNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientMMSUserLeftLobby::CMsgClientMMSUserLeftLobby()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientMMSUserLeftLobby)
}
CMsgClientMMSUserLeftLobby::CMsgClientMMSUserLeftLobby(const CMsgClientMMSUserLeftLobby& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  persona_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_persona_name()) {
    persona_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_);
  }
  ::memcpy(&steam_id_lobby_, &from.steam_id_lobby_,
    static_cast<size_t>(reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientMMSUserLeftLobby)
}

void CMsgClientMMSUserLeftLobby::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientMMSUserLeftLobby_steammessages_5fclientserver_2eproto.base);
  persona_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steam_id_lobby_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&app_id_) -
      reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
}

CMsgClientMMSUserLeftLobby::~CMsgClientMMSUserLeftLobby() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientMMSUserLeftLobby)
  SharedDtor();
}

void CMsgClientMMSUserLeftLobby::SharedDtor() {
  persona_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientMMSUserLeftLobby::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientMMSUserLeftLobby& CMsgClientMMSUserLeftLobby::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientMMSUserLeftLobby_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientMMSUserLeftLobby::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientMMSUserLeftLobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    persona_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&steam_id_lobby_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&app_id_) -
        reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientMMSUserLeftLobby::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientMMSUserLeftLobby*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_steam_id_lobby(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed64 steam_id_user = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_steam_id_user(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional string persona_name = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientMMSUserLeftLobby.persona_name");
        object = msg->mutable_persona_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientMMSUserLeftLobby::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientMMSUserLeftLobby)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_steam_id_lobby(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_lobby_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_user = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          HasBitSetters::set_has_steam_id_user(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_user_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string persona_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_persona_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->persona_name().data(), static_cast<int>(this->persona_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientMMSUserLeftLobby.persona_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientMMSUserLeftLobby)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientMMSUserLeftLobby)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientMMSUserLeftLobby::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientMMSUserLeftLobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_lobby(), output);
  }

  // optional fixed64 steam_id_user = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->steam_id_user(), output);
  }

  // optional string persona_name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), static_cast<int>(this->persona_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientMMSUserLeftLobby.persona_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->persona_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientMMSUserLeftLobby)
}

::google::protobuf::uint8* CMsgClientMMSUserLeftLobby::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientMMSUserLeftLobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id_lobby(), target);
  }

  // optional fixed64 steam_id_user = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->steam_id_user(), target);
  }

  // optional string persona_name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), static_cast<int>(this->persona_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientMMSUserLeftLobby.persona_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->persona_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientMMSUserLeftLobby)
  return target;
}

size_t CMsgClientMMSUserLeftLobby::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientMMSUserLeftLobby)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string persona_name = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->persona_name());
    }

    // optional fixed64 steam_id_lobby = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 steam_id_user = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientMMSUserLeftLobby::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientMMSUserLeftLobby)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSUserLeftLobby* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientMMSUserLeftLobby>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientMMSUserLeftLobby)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientMMSUserLeftLobby)
    MergeFrom(*source);
  }
}

void CMsgClientMMSUserLeftLobby::MergeFrom(const CMsgClientMMSUserLeftLobby& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientMMSUserLeftLobby)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      persona_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_lobby_ = from.steam_id_lobby_;
    }
    if (cached_has_bits & 0x00000004u) {
      steam_id_user_ = from.steam_id_user_;
    }
    if (cached_has_bits & 0x00000008u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSUserLeftLobby::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientMMSUserLeftLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSUserLeftLobby::CopyFrom(const CMsgClientMMSUserLeftLobby& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientMMSUserLeftLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSUserLeftLobby::IsInitialized() const {
  return true;
}

void CMsgClientMMSUserLeftLobby::Swap(CMsgClientMMSUserLeftLobby* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientMMSUserLeftLobby::InternalSwap(CMsgClientMMSUserLeftLobby* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  persona_name_.Swap(&other->persona_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(steam_id_lobby_, other->steam_id_lobby_);
  swap(steam_id_user_, other->steam_id_user_);
  swap(app_id_, other->app_id_);
}

::google::protobuf::Metadata CMsgClientMMSUserLeftLobby::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientMMSInviteToLobby::InitAsDefaultInstance() {
}
class CMsgClientMMSInviteToLobby::HasBitSetters {
 public:
  static void set_has_app_id(CMsgClientMMSInviteToLobby* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_steam_id_lobby(CMsgClientMMSInviteToLobby* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_steam_id_user_invited(CMsgClientMMSInviteToLobby* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientMMSInviteToLobby::kAppIdFieldNumber;
const int CMsgClientMMSInviteToLobby::kSteamIdLobbyFieldNumber;
const int CMsgClientMMSInviteToLobby::kSteamIdUserInvitedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientMMSInviteToLobby::CMsgClientMMSInviteToLobby()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientMMSInviteToLobby)
}
CMsgClientMMSInviteToLobby::CMsgClientMMSInviteToLobby(const CMsgClientMMSInviteToLobby& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steam_id_lobby_, &from.steam_id_lobby_,
    static_cast<size_t>(reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientMMSInviteToLobby)
}

void CMsgClientMMSInviteToLobby::SharedCtor() {
  ::memset(&steam_id_lobby_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&app_id_) -
      reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
}

CMsgClientMMSInviteToLobby::~CMsgClientMMSInviteToLobby() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientMMSInviteToLobby)
  SharedDtor();
}

void CMsgClientMMSInviteToLobby::SharedDtor() {
}

void CMsgClientMMSInviteToLobby::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientMMSInviteToLobby& CMsgClientMMSInviteToLobby::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientMMSInviteToLobby_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientMMSInviteToLobby::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientMMSInviteToLobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&steam_id_lobby_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&app_id_) -
        reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientMMSInviteToLobby::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientMMSInviteToLobby*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_steam_id_lobby(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed64 steam_id_user_invited = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_steam_id_user_invited(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientMMSInviteToLobby::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientMMSInviteToLobby)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_steam_id_lobby(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_lobby_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_user_invited = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          HasBitSetters::set_has_steam_id_user_invited(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_user_invited_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientMMSInviteToLobby)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientMMSInviteToLobby)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientMMSInviteToLobby::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientMMSInviteToLobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_lobby(), output);
  }

  // optional fixed64 steam_id_user_invited = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->steam_id_user_invited(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientMMSInviteToLobby)
}

::google::protobuf::uint8* CMsgClientMMSInviteToLobby::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientMMSInviteToLobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id_lobby(), target);
  }

  // optional fixed64 steam_id_user_invited = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->steam_id_user_invited(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientMMSInviteToLobby)
  return target;
}

size_t CMsgClientMMSInviteToLobby::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientMMSInviteToLobby)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 steam_id_lobby = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 steam_id_user_invited = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientMMSInviteToLobby::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientMMSInviteToLobby)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSInviteToLobby* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientMMSInviteToLobby>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientMMSInviteToLobby)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientMMSInviteToLobby)
    MergeFrom(*source);
  }
}

void CMsgClientMMSInviteToLobby::MergeFrom(const CMsgClientMMSInviteToLobby& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientMMSInviteToLobby)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_lobby_ = from.steam_id_lobby_;
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_user_invited_ = from.steam_id_user_invited_;
    }
    if (cached_has_bits & 0x00000004u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSInviteToLobby::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientMMSInviteToLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSInviteToLobby::CopyFrom(const CMsgClientMMSInviteToLobby& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientMMSInviteToLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSInviteToLobby::IsInitialized() const {
  return true;
}

void CMsgClientMMSInviteToLobby::Swap(CMsgClientMMSInviteToLobby* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientMMSInviteToLobby::InternalSwap(CMsgClientMMSInviteToLobby* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steam_id_lobby_, other->steam_id_lobby_);
  swap(steam_id_user_invited_, other->steam_id_user_invited_);
  swap(app_id_, other->app_id_);
}

::google::protobuf::Metadata CMsgClientMMSInviteToLobby::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientInviteToGame::InitAsDefaultInstance() {
}
class CMsgClientInviteToGame::HasBitSetters {
 public:
  static void set_has_steam_id_dest(CMsgClientInviteToGame* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_steam_id_src(CMsgClientInviteToGame* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_connect_string(CMsgClientInviteToGame* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientInviteToGame::kSteamIdDestFieldNumber;
const int CMsgClientInviteToGame::kSteamIdSrcFieldNumber;
const int CMsgClientInviteToGame::kConnectStringFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientInviteToGame::CMsgClientInviteToGame()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientInviteToGame)
}
CMsgClientInviteToGame::CMsgClientInviteToGame(const CMsgClientInviteToGame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  connect_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_connect_string()) {
    connect_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.connect_string_);
  }
  ::memcpy(&steam_id_dest_, &from.steam_id_dest_,
    static_cast<size_t>(reinterpret_cast<char*>(&steam_id_src_) -
    reinterpret_cast<char*>(&steam_id_dest_)) + sizeof(steam_id_src_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientInviteToGame)
}

void CMsgClientInviteToGame::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientInviteToGame_steammessages_5fclientserver_2eproto.base);
  connect_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steam_id_dest_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&steam_id_src_) -
      reinterpret_cast<char*>(&steam_id_dest_)) + sizeof(steam_id_src_));
}

CMsgClientInviteToGame::~CMsgClientInviteToGame() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientInviteToGame)
  SharedDtor();
}

void CMsgClientInviteToGame::SharedDtor() {
  connect_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientInviteToGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientInviteToGame& CMsgClientInviteToGame::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientInviteToGame_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientInviteToGame::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientInviteToGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    connect_string_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&steam_id_dest_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steam_id_src_) -
        reinterpret_cast<char*>(&steam_id_dest_)) + sizeof(steam_id_src_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientInviteToGame::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientInviteToGame*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steam_id_dest = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steam_id_dest(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed64 steam_id_src = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_steam_id_src(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional string connect_string = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientInviteToGame.connect_string");
        object = msg->mutable_connect_string();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientInviteToGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientInviteToGame)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id_dest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steam_id_dest(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_dest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_src = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_steam_id_src(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_src_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string connect_string = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_connect_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->connect_string().data(), static_cast<int>(this->connect_string().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientInviteToGame.connect_string");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientInviteToGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientInviteToGame)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientInviteToGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientInviteToGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id_dest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id_dest(), output);
  }

  // optional fixed64 steam_id_src = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_src(), output);
  }

  // optional string connect_string = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->connect_string().data(), static_cast<int>(this->connect_string().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientInviteToGame.connect_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->connect_string(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientInviteToGame)
}

::google::protobuf::uint8* CMsgClientInviteToGame::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientInviteToGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id_dest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id_dest(), target);
  }

  // optional fixed64 steam_id_src = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id_src(), target);
  }

  // optional string connect_string = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->connect_string().data(), static_cast<int>(this->connect_string().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientInviteToGame.connect_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->connect_string(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientInviteToGame)
  return target;
}

size_t CMsgClientInviteToGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientInviteToGame)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string connect_string = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->connect_string());
    }

    // optional fixed64 steam_id_dest = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 steam_id_src = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientInviteToGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientInviteToGame)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientInviteToGame* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientInviteToGame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientInviteToGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientInviteToGame)
    MergeFrom(*source);
  }
}

void CMsgClientInviteToGame::MergeFrom(const CMsgClientInviteToGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientInviteToGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      connect_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.connect_string_);
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_dest_ = from.steam_id_dest_;
    }
    if (cached_has_bits & 0x00000004u) {
      steam_id_src_ = from.steam_id_src_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientInviteToGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientInviteToGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientInviteToGame::CopyFrom(const CMsgClientInviteToGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientInviteToGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientInviteToGame::IsInitialized() const {
  return true;
}

void CMsgClientInviteToGame::Swap(CMsgClientInviteToGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientInviteToGame::InternalSwap(CMsgClientInviteToGame* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  connect_string_.Swap(&other->connect_string_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(steam_id_dest_, other->steam_id_dest_);
  swap(steam_id_src_, other->steam_id_src_);
}

::google::protobuf::Metadata CMsgClientInviteToGame::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientChatInvite::InitAsDefaultInstance() {
}
class CMsgClientChatInvite::HasBitSetters {
 public:
  static void set_has_steam_id_invited(CMsgClientChatInvite* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_steam_id_chat(CMsgClientChatInvite* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_steam_id_patron(CMsgClientChatInvite* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_chatroom_type(CMsgClientChatInvite* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_steam_id_friend_chat(CMsgClientChatInvite* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_chat_name(CMsgClientChatInvite* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_game_id(CMsgClientChatInvite* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientChatInvite::kSteamIdInvitedFieldNumber;
const int CMsgClientChatInvite::kSteamIdChatFieldNumber;
const int CMsgClientChatInvite::kSteamIdPatronFieldNumber;
const int CMsgClientChatInvite::kChatroomTypeFieldNumber;
const int CMsgClientChatInvite::kSteamIdFriendChatFieldNumber;
const int CMsgClientChatInvite::kChatNameFieldNumber;
const int CMsgClientChatInvite::kGameIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientChatInvite::CMsgClientChatInvite()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientChatInvite)
}
CMsgClientChatInvite::CMsgClientChatInvite(const CMsgClientChatInvite& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chat_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_chat_name()) {
    chat_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chat_name_);
  }
  ::memcpy(&steam_id_invited_, &from.steam_id_invited_,
    static_cast<size_t>(reinterpret_cast<char*>(&chatroom_type_) -
    reinterpret_cast<char*>(&steam_id_invited_)) + sizeof(chatroom_type_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientChatInvite)
}

void CMsgClientChatInvite::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientChatInvite_steammessages_5fclientserver_2eproto.base);
  chat_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steam_id_invited_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chatroom_type_) -
      reinterpret_cast<char*>(&steam_id_invited_)) + sizeof(chatroom_type_));
}

CMsgClientChatInvite::~CMsgClientChatInvite() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientChatInvite)
  SharedDtor();
}

void CMsgClientChatInvite::SharedDtor() {
  chat_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientChatInvite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientChatInvite& CMsgClientChatInvite::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientChatInvite_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientChatInvite::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientChatInvite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    chat_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&steam_id_invited_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chatroom_type_) -
        reinterpret_cast<char*>(&steam_id_invited_)) + sizeof(chatroom_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientChatInvite::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientChatInvite*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steam_id_invited = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steam_id_invited(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed64 steam_id_chat = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_steam_id_chat(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed64 steam_id_patron = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_steam_id_patron(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional int32 chatroom_type = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_chatroom_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 steam_id_friend_chat = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 41) goto handle_unusual;
        msg->set_steam_id_friend_chat(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional string chat_name = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientChatInvite.chat_name");
        object = msg->mutable_chat_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional fixed64 game_id = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 57) goto handle_unusual;
        msg->set_game_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientChatInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientChatInvite)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id_invited = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steam_id_invited(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_invited_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_chat = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_steam_id_chat(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_chat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_patron = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          HasBitSetters::set_has_steam_id_patron(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_patron_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 chatroom_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_chatroom_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chatroom_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_friend_chat = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (41 & 0xFF)) {
          HasBitSetters::set_has_steam_id_friend_chat(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_friend_chat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string chat_name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chat_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->chat_name().data(), static_cast<int>(this->chat_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientChatInvite.chat_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 game_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (57 & 0xFF)) {
          HasBitSetters::set_has_game_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientChatInvite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientChatInvite)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientChatInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientChatInvite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id_invited = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id_invited(), output);
  }

  // optional fixed64 steam_id_chat = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_chat(), output);
  }

  // optional fixed64 steam_id_patron = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->steam_id_patron(), output);
  }

  // optional int32 chatroom_type = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->chatroom_type(), output);
  }

  // optional fixed64 steam_id_friend_chat = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->steam_id_friend_chat(), output);
  }

  // optional string chat_name = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chat_name().data(), static_cast<int>(this->chat_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientChatInvite.chat_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->chat_name(), output);
  }

  // optional fixed64 game_id = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->game_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientChatInvite)
}

::google::protobuf::uint8* CMsgClientChatInvite::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientChatInvite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id_invited = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id_invited(), target);
  }

  // optional fixed64 steam_id_chat = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id_chat(), target);
  }

  // optional fixed64 steam_id_patron = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->steam_id_patron(), target);
  }

  // optional int32 chatroom_type = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->chatroom_type(), target);
  }

  // optional fixed64 steam_id_friend_chat = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->steam_id_friend_chat(), target);
  }

  // optional string chat_name = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chat_name().data(), static_cast<int>(this->chat_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientChatInvite.chat_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->chat_name(), target);
  }

  // optional fixed64 game_id = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(7, this->game_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientChatInvite)
  return target;
}

size_t CMsgClientChatInvite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientChatInvite)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string chat_name = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chat_name());
    }

    // optional fixed64 steam_id_invited = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 steam_id_chat = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional fixed64 steam_id_patron = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional fixed64 steam_id_friend_chat = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional fixed64 game_id = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional int32 chatroom_type = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chatroom_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientChatInvite::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientChatInvite)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientChatInvite* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientChatInvite>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientChatInvite)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientChatInvite)
    MergeFrom(*source);
  }
}

void CMsgClientChatInvite::MergeFrom(const CMsgClientChatInvite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientChatInvite)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      chat_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chat_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_invited_ = from.steam_id_invited_;
    }
    if (cached_has_bits & 0x00000004u) {
      steam_id_chat_ = from.steam_id_chat_;
    }
    if (cached_has_bits & 0x00000008u) {
      steam_id_patron_ = from.steam_id_patron_;
    }
    if (cached_has_bits & 0x00000010u) {
      steam_id_friend_chat_ = from.steam_id_friend_chat_;
    }
    if (cached_has_bits & 0x00000020u) {
      game_id_ = from.game_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      chatroom_type_ = from.chatroom_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientChatInvite::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientChatInvite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientChatInvite::CopyFrom(const CMsgClientChatInvite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientChatInvite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientChatInvite::IsInitialized() const {
  return true;
}

void CMsgClientChatInvite::Swap(CMsgClientChatInvite* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientChatInvite::InternalSwap(CMsgClientChatInvite* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  chat_name_.Swap(&other->chat_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(steam_id_invited_, other->steam_id_invited_);
  swap(steam_id_chat_, other->steam_id_chat_);
  swap(steam_id_patron_, other->steam_id_patron_);
  swap(steam_id_friend_chat_, other->steam_id_friend_chat_);
  swap(game_id_, other->game_id_);
  swap(chatroom_type_, other->chatroom_type_);
}

::google::protobuf::Metadata CMsgClientChatInvite::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientConnectionStats_Stats_Logon::InitAsDefaultInstance() {
}
class CMsgClientConnectionStats_Stats_Logon::HasBitSetters {
 public:
  static void set_has_connect_attempts(CMsgClientConnectionStats_Stats_Logon* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_connect_successes(CMsgClientConnectionStats_Stats_Logon* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_connect_failures(CMsgClientConnectionStats_Stats_Logon* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_connections_dropped(CMsgClientConnectionStats_Stats_Logon* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_seconds_running(CMsgClientConnectionStats_Stats_Logon* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_msec_tologonthistime(CMsgClientConnectionStats_Stats_Logon* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_count_bad_cms(CMsgClientConnectionStats_Stats_Logon* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientConnectionStats_Stats_Logon::kConnectAttemptsFieldNumber;
const int CMsgClientConnectionStats_Stats_Logon::kConnectSuccessesFieldNumber;
const int CMsgClientConnectionStats_Stats_Logon::kConnectFailuresFieldNumber;
const int CMsgClientConnectionStats_Stats_Logon::kConnectionsDroppedFieldNumber;
const int CMsgClientConnectionStats_Stats_Logon::kSecondsRunningFieldNumber;
const int CMsgClientConnectionStats_Stats_Logon::kMsecTologonthistimeFieldNumber;
const int CMsgClientConnectionStats_Stats_Logon::kCountBadCmsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientConnectionStats_Stats_Logon::CMsgClientConnectionStats_Stats_Logon()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientConnectionStats.Stats_Logon)
}
CMsgClientConnectionStats_Stats_Logon::CMsgClientConnectionStats_Stats_Logon(const CMsgClientConnectionStats_Stats_Logon& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&connect_attempts_, &from.connect_attempts_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_bad_cms_) -
    reinterpret_cast<char*>(&connect_attempts_)) + sizeof(count_bad_cms_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientConnectionStats.Stats_Logon)
}

void CMsgClientConnectionStats_Stats_Logon::SharedCtor() {
  ::memset(&connect_attempts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_bad_cms_) -
      reinterpret_cast<char*>(&connect_attempts_)) + sizeof(count_bad_cms_));
}

CMsgClientConnectionStats_Stats_Logon::~CMsgClientConnectionStats_Stats_Logon() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientConnectionStats.Stats_Logon)
  SharedDtor();
}

void CMsgClientConnectionStats_Stats_Logon::SharedDtor() {
}

void CMsgClientConnectionStats_Stats_Logon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientConnectionStats_Stats_Logon& CMsgClientConnectionStats_Stats_Logon::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientConnectionStats_Stats_Logon_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientConnectionStats_Stats_Logon::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientConnectionStats.Stats_Logon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&connect_attempts_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&count_bad_cms_) -
        reinterpret_cast<char*>(&connect_attempts_)) + sizeof(count_bad_cms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientConnectionStats_Stats_Logon::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientConnectionStats_Stats_Logon*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 connect_attempts = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_connect_attempts(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 connect_successes = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_connect_successes(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 connect_failures = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_connect_failures(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 connections_dropped = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_connections_dropped(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 seconds_running = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_seconds_running(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 msec_tologonthistime = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_msec_tologonthistime(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 count_bad_cms = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_count_bad_cms(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientConnectionStats_Stats_Logon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientConnectionStats.Stats_Logon)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 connect_attempts = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_connect_attempts(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &connect_attempts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 connect_successes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_connect_successes(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &connect_successes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 connect_failures = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_connect_failures(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &connect_failures_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 connections_dropped = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_connections_dropped(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &connections_dropped_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 seconds_running = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_seconds_running(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seconds_running_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 msec_tologonthistime = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_msec_tologonthistime(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msec_tologonthistime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 count_bad_cms = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_count_bad_cms(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_bad_cms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientConnectionStats.Stats_Logon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientConnectionStats.Stats_Logon)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientConnectionStats_Stats_Logon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientConnectionStats.Stats_Logon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 connect_attempts = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->connect_attempts(), output);
  }

  // optional int32 connect_successes = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->connect_successes(), output);
  }

  // optional int32 connect_failures = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->connect_failures(), output);
  }

  // optional int32 connections_dropped = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->connections_dropped(), output);
  }

  // optional uint32 seconds_running = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->seconds_running(), output);
  }

  // optional uint32 msec_tologonthistime = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->msec_tologonthistime(), output);
  }

  // optional uint32 count_bad_cms = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->count_bad_cms(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientConnectionStats.Stats_Logon)
}

::google::protobuf::uint8* CMsgClientConnectionStats_Stats_Logon::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientConnectionStats.Stats_Logon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 connect_attempts = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->connect_attempts(), target);
  }

  // optional int32 connect_successes = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->connect_successes(), target);
  }

  // optional int32 connect_failures = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->connect_failures(), target);
  }

  // optional int32 connections_dropped = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->connections_dropped(), target);
  }

  // optional uint32 seconds_running = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->seconds_running(), target);
  }

  // optional uint32 msec_tologonthistime = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->msec_tologonthistime(), target);
  }

  // optional uint32 count_bad_cms = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->count_bad_cms(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientConnectionStats.Stats_Logon)
  return target;
}

size_t CMsgClientConnectionStats_Stats_Logon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientConnectionStats.Stats_Logon)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional int32 connect_attempts = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->connect_attempts());
    }

    // optional int32 connect_successes = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->connect_successes());
    }

    // optional int32 connect_failures = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->connect_failures());
    }

    // optional int32 connections_dropped = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->connections_dropped());
    }

    // optional uint32 seconds_running = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seconds_running());
    }

    // optional uint32 msec_tologonthistime = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msec_tologonthistime());
    }

    // optional uint32 count_bad_cms = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count_bad_cms());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientConnectionStats_Stats_Logon::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientConnectionStats.Stats_Logon)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientConnectionStats_Stats_Logon* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientConnectionStats_Stats_Logon>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientConnectionStats.Stats_Logon)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientConnectionStats.Stats_Logon)
    MergeFrom(*source);
  }
}

void CMsgClientConnectionStats_Stats_Logon::MergeFrom(const CMsgClientConnectionStats_Stats_Logon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientConnectionStats.Stats_Logon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      connect_attempts_ = from.connect_attempts_;
    }
    if (cached_has_bits & 0x00000002u) {
      connect_successes_ = from.connect_successes_;
    }
    if (cached_has_bits & 0x00000004u) {
      connect_failures_ = from.connect_failures_;
    }
    if (cached_has_bits & 0x00000008u) {
      connections_dropped_ = from.connections_dropped_;
    }
    if (cached_has_bits & 0x00000010u) {
      seconds_running_ = from.seconds_running_;
    }
    if (cached_has_bits & 0x00000020u) {
      msec_tologonthistime_ = from.msec_tologonthistime_;
    }
    if (cached_has_bits & 0x00000040u) {
      count_bad_cms_ = from.count_bad_cms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientConnectionStats_Stats_Logon::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientConnectionStats.Stats_Logon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientConnectionStats_Stats_Logon::CopyFrom(const CMsgClientConnectionStats_Stats_Logon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientConnectionStats.Stats_Logon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientConnectionStats_Stats_Logon::IsInitialized() const {
  return true;
}

void CMsgClientConnectionStats_Stats_Logon::Swap(CMsgClientConnectionStats_Stats_Logon* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientConnectionStats_Stats_Logon::InternalSwap(CMsgClientConnectionStats_Stats_Logon* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(connect_attempts_, other->connect_attempts_);
  swap(connect_successes_, other->connect_successes_);
  swap(connect_failures_, other->connect_failures_);
  swap(connections_dropped_, other->connections_dropped_);
  swap(seconds_running_, other->seconds_running_);
  swap(msec_tologonthistime_, other->msec_tologonthistime_);
  swap(count_bad_cms_, other->count_bad_cms_);
}

::google::protobuf::Metadata CMsgClientConnectionStats_Stats_Logon::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientConnectionStats_Stats_UDP::InitAsDefaultInstance() {
}
class CMsgClientConnectionStats_Stats_UDP::HasBitSetters {
 public:
  static void set_has_pkts_sent(CMsgClientConnectionStats_Stats_UDP* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_bytes_sent(CMsgClientConnectionStats_Stats_UDP* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_pkts_recv(CMsgClientConnectionStats_Stats_UDP* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_pkts_processed(CMsgClientConnectionStats_Stats_UDP* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_bytes_recv(CMsgClientConnectionStats_Stats_UDP* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientConnectionStats_Stats_UDP::kPktsSentFieldNumber;
const int CMsgClientConnectionStats_Stats_UDP::kBytesSentFieldNumber;
const int CMsgClientConnectionStats_Stats_UDP::kPktsRecvFieldNumber;
const int CMsgClientConnectionStats_Stats_UDP::kPktsProcessedFieldNumber;
const int CMsgClientConnectionStats_Stats_UDP::kBytesRecvFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientConnectionStats_Stats_UDP::CMsgClientConnectionStats_Stats_UDP()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientConnectionStats.Stats_UDP)
}
CMsgClientConnectionStats_Stats_UDP::CMsgClientConnectionStats_Stats_UDP(const CMsgClientConnectionStats_Stats_UDP& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pkts_sent_, &from.pkts_sent_,
    static_cast<size_t>(reinterpret_cast<char*>(&bytes_recv_) -
    reinterpret_cast<char*>(&pkts_sent_)) + sizeof(bytes_recv_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientConnectionStats.Stats_UDP)
}

void CMsgClientConnectionStats_Stats_UDP::SharedCtor() {
  ::memset(&pkts_sent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bytes_recv_) -
      reinterpret_cast<char*>(&pkts_sent_)) + sizeof(bytes_recv_));
}

CMsgClientConnectionStats_Stats_UDP::~CMsgClientConnectionStats_Stats_UDP() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientConnectionStats.Stats_UDP)
  SharedDtor();
}

void CMsgClientConnectionStats_Stats_UDP::SharedDtor() {
}

void CMsgClientConnectionStats_Stats_UDP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientConnectionStats_Stats_UDP& CMsgClientConnectionStats_Stats_UDP::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientConnectionStats_Stats_UDP_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientConnectionStats_Stats_UDP::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientConnectionStats.Stats_UDP)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&pkts_sent_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bytes_recv_) -
        reinterpret_cast<char*>(&pkts_sent_)) + sizeof(bytes_recv_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientConnectionStats_Stats_UDP::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientConnectionStats_Stats_UDP*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 pkts_sent = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_pkts_sent(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 bytes_sent = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_bytes_sent(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 pkts_recv = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_pkts_recv(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 pkts_processed = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_pkts_processed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 bytes_recv = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_bytes_recv(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientConnectionStats_Stats_UDP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientConnectionStats.Stats_UDP)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 pkts_sent = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_pkts_sent(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pkts_sent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 bytes_sent = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_bytes_sent(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_sent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 pkts_recv = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_pkts_recv(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pkts_recv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 pkts_processed = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_pkts_processed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pkts_processed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 bytes_recv = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_bytes_recv(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_recv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientConnectionStats.Stats_UDP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientConnectionStats.Stats_UDP)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientConnectionStats_Stats_UDP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientConnectionStats.Stats_UDP)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 pkts_sent = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->pkts_sent(), output);
  }

  // optional uint64 bytes_sent = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->bytes_sent(), output);
  }

  // optional uint64 pkts_recv = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->pkts_recv(), output);
  }

  // optional uint64 pkts_processed = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->pkts_processed(), output);
  }

  // optional uint64 bytes_recv = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->bytes_recv(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientConnectionStats.Stats_UDP)
}

::google::protobuf::uint8* CMsgClientConnectionStats_Stats_UDP::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientConnectionStats.Stats_UDP)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 pkts_sent = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->pkts_sent(), target);
  }

  // optional uint64 bytes_sent = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->bytes_sent(), target);
  }

  // optional uint64 pkts_recv = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->pkts_recv(), target);
  }

  // optional uint64 pkts_processed = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->pkts_processed(), target);
  }

  // optional uint64 bytes_recv = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->bytes_recv(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientConnectionStats.Stats_UDP)
  return target;
}

size_t CMsgClientConnectionStats_Stats_UDP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientConnectionStats.Stats_UDP)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint64 pkts_sent = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pkts_sent());
    }

    // optional uint64 bytes_sent = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bytes_sent());
    }

    // optional uint64 pkts_recv = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pkts_recv());
    }

    // optional uint64 pkts_processed = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pkts_processed());
    }

    // optional uint64 bytes_recv = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bytes_recv());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientConnectionStats_Stats_UDP::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientConnectionStats.Stats_UDP)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientConnectionStats_Stats_UDP* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientConnectionStats_Stats_UDP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientConnectionStats.Stats_UDP)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientConnectionStats.Stats_UDP)
    MergeFrom(*source);
  }
}

void CMsgClientConnectionStats_Stats_UDP::MergeFrom(const CMsgClientConnectionStats_Stats_UDP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientConnectionStats.Stats_UDP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      pkts_sent_ = from.pkts_sent_;
    }
    if (cached_has_bits & 0x00000002u) {
      bytes_sent_ = from.bytes_sent_;
    }
    if (cached_has_bits & 0x00000004u) {
      pkts_recv_ = from.pkts_recv_;
    }
    if (cached_has_bits & 0x00000008u) {
      pkts_processed_ = from.pkts_processed_;
    }
    if (cached_has_bits & 0x00000010u) {
      bytes_recv_ = from.bytes_recv_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientConnectionStats_Stats_UDP::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientConnectionStats.Stats_UDP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientConnectionStats_Stats_UDP::CopyFrom(const CMsgClientConnectionStats_Stats_UDP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientConnectionStats.Stats_UDP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientConnectionStats_Stats_UDP::IsInitialized() const {
  return true;
}

void CMsgClientConnectionStats_Stats_UDP::Swap(CMsgClientConnectionStats_Stats_UDP* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientConnectionStats_Stats_UDP::InternalSwap(CMsgClientConnectionStats_Stats_UDP* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pkts_sent_, other->pkts_sent_);
  swap(bytes_sent_, other->bytes_sent_);
  swap(pkts_recv_, other->pkts_recv_);
  swap(pkts_processed_, other->pkts_processed_);
  swap(bytes_recv_, other->bytes_recv_);
}

::google::protobuf::Metadata CMsgClientConnectionStats_Stats_UDP::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientConnectionStats_Stats_VConn::InitAsDefaultInstance() {
  ::proto::steam::_CMsgClientConnectionStats_Stats_VConn_default_instance_._instance.get_mutable()->stats_udp_ = const_cast< ::proto::steam::CMsgClientConnectionStats_Stats_UDP*>(
      ::proto::steam::CMsgClientConnectionStats_Stats_UDP::internal_default_instance());
}
class CMsgClientConnectionStats_Stats_VConn::HasBitSetters {
 public:
  static void set_has_connections_udp(CMsgClientConnectionStats_Stats_VConn* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_connections_tcp(CMsgClientConnectionStats_Stats_VConn* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static const ::proto::steam::CMsgClientConnectionStats_Stats_UDP& stats_udp(const CMsgClientConnectionStats_Stats_VConn* msg);
  static void set_has_stats_udp(CMsgClientConnectionStats_Stats_VConn* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_pkts_abandoned(CMsgClientConnectionStats_Stats_VConn* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_conn_req_received(CMsgClientConnectionStats_Stats_VConn* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_pkts_resent(CMsgClientConnectionStats_Stats_VConn* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_msgs_sent(CMsgClientConnectionStats_Stats_VConn* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_msgs_sent_failed(CMsgClientConnectionStats_Stats_VConn* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_msgs_recv(CMsgClientConnectionStats_Stats_VConn* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_datagrams_sent(CMsgClientConnectionStats_Stats_VConn* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_datagrams_recv(CMsgClientConnectionStats_Stats_VConn* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_bad_pkts_recv(CMsgClientConnectionStats_Stats_VConn* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_unknown_conn_pkts_recv(CMsgClientConnectionStats_Stats_VConn* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_missed_pkts_recv(CMsgClientConnectionStats_Stats_VConn* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static void set_has_dup_pkts_recv(CMsgClientConnectionStats_Stats_VConn* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
  static void set_has_failed_connect_challenges(CMsgClientConnectionStats_Stats_VConn* msg) {
    msg->_has_bits_[0] |= 0x00008000u;
  }
  static void set_has_micro_sec_avg_latency(CMsgClientConnectionStats_Stats_VConn* msg) {
    msg->_has_bits_[0] |= 0x00010000u;
  }
  static void set_has_micro_sec_min_latency(CMsgClientConnectionStats_Stats_VConn* msg) {
    msg->_has_bits_[0] |= 0x00020000u;
  }
  static void set_has_micro_sec_max_latency(CMsgClientConnectionStats_Stats_VConn* msg) {
    msg->_has_bits_[0] |= 0x00040000u;
  }
  static void set_has_mem_pool_msg_in_use(CMsgClientConnectionStats_Stats_VConn* msg) {
    msg->_has_bits_[0] |= 0x00080000u;
  }
};

const ::proto::steam::CMsgClientConnectionStats_Stats_UDP&
CMsgClientConnectionStats_Stats_VConn::HasBitSetters::stats_udp(const CMsgClientConnectionStats_Stats_VConn* msg) {
  return *msg->stats_udp_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientConnectionStats_Stats_VConn::kConnectionsUdpFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kConnectionsTcpFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kStatsUdpFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kPktsAbandonedFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kConnReqReceivedFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kPktsResentFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kMsgsSentFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kMsgsSentFailedFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kMsgsRecvFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kDatagramsSentFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kDatagramsRecvFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kBadPktsRecvFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kUnknownConnPktsRecvFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kMissedPktsRecvFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kDupPktsRecvFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kFailedConnectChallengesFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kMicroSecAvgLatencyFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kMicroSecMinLatencyFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kMicroSecMaxLatencyFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kMemPoolMsgInUseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientConnectionStats_Stats_VConn::CMsgClientConnectionStats_Stats_VConn()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientConnectionStats.Stats_VConn)
}
CMsgClientConnectionStats_Stats_VConn::CMsgClientConnectionStats_Stats_VConn(const CMsgClientConnectionStats_Stats_VConn& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_stats_udp()) {
    stats_udp_ = new ::proto::steam::CMsgClientConnectionStats_Stats_UDP(*from.stats_udp_);
  } else {
    stats_udp_ = nullptr;
  }
  ::memcpy(&connections_udp_, &from.connections_udp_,
    static_cast<size_t>(reinterpret_cast<char*>(&mem_pool_msg_in_use_) -
    reinterpret_cast<char*>(&connections_udp_)) + sizeof(mem_pool_msg_in_use_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientConnectionStats.Stats_VConn)
}

void CMsgClientConnectionStats_Stats_VConn::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientConnectionStats_Stats_VConn_steammessages_5fclientserver_2eproto.base);
  ::memset(&stats_udp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mem_pool_msg_in_use_) -
      reinterpret_cast<char*>(&stats_udp_)) + sizeof(mem_pool_msg_in_use_));
}

CMsgClientConnectionStats_Stats_VConn::~CMsgClientConnectionStats_Stats_VConn() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientConnectionStats.Stats_VConn)
  SharedDtor();
}

void CMsgClientConnectionStats_Stats_VConn::SharedDtor() {
  if (this != internal_default_instance()) delete stats_udp_;
}

void CMsgClientConnectionStats_Stats_VConn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientConnectionStats_Stats_VConn& CMsgClientConnectionStats_Stats_VConn::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientConnectionStats_Stats_VConn_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientConnectionStats_Stats_VConn::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientConnectionStats.Stats_VConn)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(stats_udp_ != nullptr);
    stats_udp_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&connections_udp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&msgs_sent_failed_) -
        reinterpret_cast<char*>(&connections_udp_)) + sizeof(msgs_sent_failed_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&msgs_recv_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&failed_connect_challenges_) -
        reinterpret_cast<char*>(&msgs_recv_)) + sizeof(failed_connect_challenges_));
  }
  if (cached_has_bits & 0x000f0000u) {
    ::memset(&micro_sec_avg_latency_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mem_pool_msg_in_use_) -
        reinterpret_cast<char*>(&micro_sec_avg_latency_)) + sizeof(mem_pool_msg_in_use_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientConnectionStats_Stats_VConn::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientConnectionStats_Stats_VConn*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 connections_udp = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_connections_udp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 connections_tcp = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_connections_tcp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.steam.CMsgClientConnectionStats.Stats_UDP stats_udp = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::steam::CMsgClientConnectionStats_Stats_UDP::_InternalParse;
        object = msg->mutable_stats_udp();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional uint64 pkts_abandoned = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_pkts_abandoned(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 conn_req_received = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_conn_req_received(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 pkts_resent = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_pkts_resent(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 msgs_sent = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_msgs_sent(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 msgs_sent_failed = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_msgs_sent_failed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 msgs_recv = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_msgs_recv(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 datagrams_sent = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_datagrams_sent(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 datagrams_recv = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_datagrams_recv(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 bad_pkts_recv = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_bad_pkts_recv(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 unknown_conn_pkts_recv = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_unknown_conn_pkts_recv(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 missed_pkts_recv = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_missed_pkts_recv(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 dup_pkts_recv = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_dup_pkts_recv(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 failed_connect_challenges = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_failed_connect_challenges(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 micro_sec_avg_latency = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_micro_sec_avg_latency(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 micro_sec_min_latency = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        msg->set_micro_sec_min_latency(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 micro_sec_max_latency = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        msg->set_micro_sec_max_latency(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 mem_pool_msg_in_use = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 160) goto handle_unusual;
        msg->set_mem_pool_msg_in_use(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientConnectionStats_Stats_VConn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientConnectionStats.Stats_VConn)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 connections_udp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_connections_udp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &connections_udp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 connections_tcp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_connections_tcp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &connections_tcp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CMsgClientConnectionStats.Stats_UDP stats_udp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stats_udp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 pkts_abandoned = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_pkts_abandoned(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pkts_abandoned_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 conn_req_received = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_conn_req_received(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &conn_req_received_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 pkts_resent = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_pkts_resent(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pkts_resent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 msgs_sent = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_msgs_sent(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msgs_sent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 msgs_sent_failed = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_msgs_sent_failed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msgs_sent_failed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 msgs_recv = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_msgs_recv(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msgs_recv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 datagrams_sent = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_datagrams_sent(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &datagrams_sent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 datagrams_recv = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_datagrams_recv(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &datagrams_recv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 bad_pkts_recv = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_bad_pkts_recv(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bad_pkts_recv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 unknown_conn_pkts_recv = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {
          HasBitSetters::set_has_unknown_conn_pkts_recv(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &unknown_conn_pkts_recv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 missed_pkts_recv = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {
          HasBitSetters::set_has_missed_pkts_recv(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &missed_pkts_recv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 dup_pkts_recv = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (120 & 0xFF)) {
          HasBitSetters::set_has_dup_pkts_recv(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dup_pkts_recv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 failed_connect_challenges = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (128 & 0xFF)) {
          HasBitSetters::set_has_failed_connect_challenges(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &failed_connect_challenges_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 micro_sec_avg_latency = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (136 & 0xFF)) {
          HasBitSetters::set_has_micro_sec_avg_latency(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &micro_sec_avg_latency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 micro_sec_min_latency = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (144 & 0xFF)) {
          HasBitSetters::set_has_micro_sec_min_latency(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &micro_sec_min_latency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 micro_sec_max_latency = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (152 & 0xFF)) {
          HasBitSetters::set_has_micro_sec_max_latency(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &micro_sec_max_latency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 mem_pool_msg_in_use = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (160 & 0xFF)) {
          HasBitSetters::set_has_mem_pool_msg_in_use(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mem_pool_msg_in_use_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientConnectionStats.Stats_VConn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientConnectionStats.Stats_VConn)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientConnectionStats_Stats_VConn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientConnectionStats.Stats_VConn)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 connections_udp = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->connections_udp(), output);
  }

  // optional uint32 connections_tcp = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->connections_tcp(), output);
  }

  // optional .proto.steam.CMsgClientConnectionStats.Stats_UDP stats_udp = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::stats_udp(this), output);
  }

  // optional uint64 pkts_abandoned = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->pkts_abandoned(), output);
  }

  // optional uint64 conn_req_received = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->conn_req_received(), output);
  }

  // optional uint64 pkts_resent = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->pkts_resent(), output);
  }

  // optional uint64 msgs_sent = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->msgs_sent(), output);
  }

  // optional uint64 msgs_sent_failed = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->msgs_sent_failed(), output);
  }

  // optional uint64 msgs_recv = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->msgs_recv(), output);
  }

  // optional uint64 datagrams_sent = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->datagrams_sent(), output);
  }

  // optional uint64 datagrams_recv = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->datagrams_recv(), output);
  }

  // optional uint64 bad_pkts_recv = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->bad_pkts_recv(), output);
  }

  // optional uint64 unknown_conn_pkts_recv = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->unknown_conn_pkts_recv(), output);
  }

  // optional uint64 missed_pkts_recv = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->missed_pkts_recv(), output);
  }

  // optional uint64 dup_pkts_recv = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->dup_pkts_recv(), output);
  }

  // optional uint64 failed_connect_challenges = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->failed_connect_challenges(), output);
  }

  // optional uint32 micro_sec_avg_latency = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->micro_sec_avg_latency(), output);
  }

  // optional uint32 micro_sec_min_latency = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->micro_sec_min_latency(), output);
  }

  // optional uint32 micro_sec_max_latency = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->micro_sec_max_latency(), output);
  }

  // optional uint32 mem_pool_msg_in_use = 20;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->mem_pool_msg_in_use(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientConnectionStats.Stats_VConn)
}

::google::protobuf::uint8* CMsgClientConnectionStats_Stats_VConn::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientConnectionStats.Stats_VConn)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 connections_udp = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->connections_udp(), target);
  }

  // optional uint32 connections_tcp = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->connections_tcp(), target);
  }

  // optional .proto.steam.CMsgClientConnectionStats.Stats_UDP stats_udp = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::stats_udp(this), target);
  }

  // optional uint64 pkts_abandoned = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->pkts_abandoned(), target);
  }

  // optional uint64 conn_req_received = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->conn_req_received(), target);
  }

  // optional uint64 pkts_resent = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->pkts_resent(), target);
  }

  // optional uint64 msgs_sent = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->msgs_sent(), target);
  }

  // optional uint64 msgs_sent_failed = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->msgs_sent_failed(), target);
  }

  // optional uint64 msgs_recv = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->msgs_recv(), target);
  }

  // optional uint64 datagrams_sent = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->datagrams_sent(), target);
  }

  // optional uint64 datagrams_recv = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->datagrams_recv(), target);
  }

  // optional uint64 bad_pkts_recv = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->bad_pkts_recv(), target);
  }

  // optional uint64 unknown_conn_pkts_recv = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->unknown_conn_pkts_recv(), target);
  }

  // optional uint64 missed_pkts_recv = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->missed_pkts_recv(), target);
  }

  // optional uint64 dup_pkts_recv = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->dup_pkts_recv(), target);
  }

  // optional uint64 failed_connect_challenges = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->failed_connect_challenges(), target);
  }

  // optional uint32 micro_sec_avg_latency = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->micro_sec_avg_latency(), target);
  }

  // optional uint32 micro_sec_min_latency = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->micro_sec_min_latency(), target);
  }

  // optional uint32 micro_sec_max_latency = 19;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->micro_sec_max_latency(), target);
  }

  // optional uint32 mem_pool_msg_in_use = 20;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->mem_pool_msg_in_use(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientConnectionStats.Stats_VConn)
  return target;
}

size_t CMsgClientConnectionStats_Stats_VConn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientConnectionStats.Stats_VConn)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .proto.steam.CMsgClientConnectionStats.Stats_UDP stats_udp = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *stats_udp_);
    }

    // optional uint32 connections_udp = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->connections_udp());
    }

    // optional uint32 connections_tcp = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->connections_tcp());
    }

    // optional uint64 pkts_abandoned = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pkts_abandoned());
    }

    // optional uint64 conn_req_received = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->conn_req_received());
    }

    // optional uint64 pkts_resent = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pkts_resent());
    }

    // optional uint64 msgs_sent = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->msgs_sent());
    }

    // optional uint64 msgs_sent_failed = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->msgs_sent_failed());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint64 msgs_recv = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->msgs_recv());
    }

    // optional uint64 datagrams_sent = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->datagrams_sent());
    }

    // optional uint64 datagrams_recv = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->datagrams_recv());
    }

    // optional uint64 bad_pkts_recv = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bad_pkts_recv());
    }

    // optional uint64 unknown_conn_pkts_recv = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->unknown_conn_pkts_recv());
    }

    // optional uint64 missed_pkts_recv = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->missed_pkts_recv());
    }

    // optional uint64 dup_pkts_recv = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dup_pkts_recv());
    }

    // optional uint64 failed_connect_challenges = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->failed_connect_challenges());
    }

  }
  if (cached_has_bits & 0x000f0000u) {
    // optional uint32 micro_sec_avg_latency = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->micro_sec_avg_latency());
    }

    // optional uint32 micro_sec_min_latency = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->micro_sec_min_latency());
    }

    // optional uint32 micro_sec_max_latency = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->micro_sec_max_latency());
    }

    // optional uint32 mem_pool_msg_in_use = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mem_pool_msg_in_use());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientConnectionStats_Stats_VConn::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientConnectionStats.Stats_VConn)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientConnectionStats_Stats_VConn* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientConnectionStats_Stats_VConn>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientConnectionStats.Stats_VConn)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientConnectionStats.Stats_VConn)
    MergeFrom(*source);
  }
}

void CMsgClientConnectionStats_Stats_VConn::MergeFrom(const CMsgClientConnectionStats_Stats_VConn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientConnectionStats.Stats_VConn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_stats_udp()->::proto::steam::CMsgClientConnectionStats_Stats_UDP::MergeFrom(from.stats_udp());
    }
    if (cached_has_bits & 0x00000002u) {
      connections_udp_ = from.connections_udp_;
    }
    if (cached_has_bits & 0x00000004u) {
      connections_tcp_ = from.connections_tcp_;
    }
    if (cached_has_bits & 0x00000008u) {
      pkts_abandoned_ = from.pkts_abandoned_;
    }
    if (cached_has_bits & 0x00000010u) {
      conn_req_received_ = from.conn_req_received_;
    }
    if (cached_has_bits & 0x00000020u) {
      pkts_resent_ = from.pkts_resent_;
    }
    if (cached_has_bits & 0x00000040u) {
      msgs_sent_ = from.msgs_sent_;
    }
    if (cached_has_bits & 0x00000080u) {
      msgs_sent_failed_ = from.msgs_sent_failed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      msgs_recv_ = from.msgs_recv_;
    }
    if (cached_has_bits & 0x00000200u) {
      datagrams_sent_ = from.datagrams_sent_;
    }
    if (cached_has_bits & 0x00000400u) {
      datagrams_recv_ = from.datagrams_recv_;
    }
    if (cached_has_bits & 0x00000800u) {
      bad_pkts_recv_ = from.bad_pkts_recv_;
    }
    if (cached_has_bits & 0x00001000u) {
      unknown_conn_pkts_recv_ = from.unknown_conn_pkts_recv_;
    }
    if (cached_has_bits & 0x00002000u) {
      missed_pkts_recv_ = from.missed_pkts_recv_;
    }
    if (cached_has_bits & 0x00004000u) {
      dup_pkts_recv_ = from.dup_pkts_recv_;
    }
    if (cached_has_bits & 0x00008000u) {
      failed_connect_challenges_ = from.failed_connect_challenges_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      micro_sec_avg_latency_ = from.micro_sec_avg_latency_;
    }
    if (cached_has_bits & 0x00020000u) {
      micro_sec_min_latency_ = from.micro_sec_min_latency_;
    }
    if (cached_has_bits & 0x00040000u) {
      micro_sec_max_latency_ = from.micro_sec_max_latency_;
    }
    if (cached_has_bits & 0x00080000u) {
      mem_pool_msg_in_use_ = from.mem_pool_msg_in_use_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientConnectionStats_Stats_VConn::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientConnectionStats.Stats_VConn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientConnectionStats_Stats_VConn::CopyFrom(const CMsgClientConnectionStats_Stats_VConn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientConnectionStats.Stats_VConn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientConnectionStats_Stats_VConn::IsInitialized() const {
  return true;
}

void CMsgClientConnectionStats_Stats_VConn::Swap(CMsgClientConnectionStats_Stats_VConn* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientConnectionStats_Stats_VConn::InternalSwap(CMsgClientConnectionStats_Stats_VConn* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(stats_udp_, other->stats_udp_);
  swap(connections_udp_, other->connections_udp_);
  swap(connections_tcp_, other->connections_tcp_);
  swap(pkts_abandoned_, other->pkts_abandoned_);
  swap(conn_req_received_, other->conn_req_received_);
  swap(pkts_resent_, other->pkts_resent_);
  swap(msgs_sent_, other->msgs_sent_);
  swap(msgs_sent_failed_, other->msgs_sent_failed_);
  swap(msgs_recv_, other->msgs_recv_);
  swap(datagrams_sent_, other->datagrams_sent_);
  swap(datagrams_recv_, other->datagrams_recv_);
  swap(bad_pkts_recv_, other->bad_pkts_recv_);
  swap(unknown_conn_pkts_recv_, other->unknown_conn_pkts_recv_);
  swap(missed_pkts_recv_, other->missed_pkts_recv_);
  swap(dup_pkts_recv_, other->dup_pkts_recv_);
  swap(failed_connect_challenges_, other->failed_connect_challenges_);
  swap(micro_sec_avg_latency_, other->micro_sec_avg_latency_);
  swap(micro_sec_min_latency_, other->micro_sec_min_latency_);
  swap(micro_sec_max_latency_, other->micro_sec_max_latency_);
  swap(mem_pool_msg_in_use_, other->mem_pool_msg_in_use_);
}

::google::protobuf::Metadata CMsgClientConnectionStats_Stats_VConn::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientConnectionStats::InitAsDefaultInstance() {
  ::proto::steam::_CMsgClientConnectionStats_default_instance_._instance.get_mutable()->stats_logon_ = const_cast< ::proto::steam::CMsgClientConnectionStats_Stats_Logon*>(
      ::proto::steam::CMsgClientConnectionStats_Stats_Logon::internal_default_instance());
  ::proto::steam::_CMsgClientConnectionStats_default_instance_._instance.get_mutable()->stats_vconn_ = const_cast< ::proto::steam::CMsgClientConnectionStats_Stats_VConn*>(
      ::proto::steam::CMsgClientConnectionStats_Stats_VConn::internal_default_instance());
}
class CMsgClientConnectionStats::HasBitSetters {
 public:
  static const ::proto::steam::CMsgClientConnectionStats_Stats_Logon& stats_logon(const CMsgClientConnectionStats* msg);
  static void set_has_stats_logon(CMsgClientConnectionStats* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::proto::steam::CMsgClientConnectionStats_Stats_VConn& stats_vconn(const CMsgClientConnectionStats* msg);
  static void set_has_stats_vconn(CMsgClientConnectionStats* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

const ::proto::steam::CMsgClientConnectionStats_Stats_Logon&
CMsgClientConnectionStats::HasBitSetters::stats_logon(const CMsgClientConnectionStats* msg) {
  return *msg->stats_logon_;
}
const ::proto::steam::CMsgClientConnectionStats_Stats_VConn&
CMsgClientConnectionStats::HasBitSetters::stats_vconn(const CMsgClientConnectionStats* msg) {
  return *msg->stats_vconn_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientConnectionStats::kStatsLogonFieldNumber;
const int CMsgClientConnectionStats::kStatsVconnFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientConnectionStats::CMsgClientConnectionStats()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientConnectionStats)
}
CMsgClientConnectionStats::CMsgClientConnectionStats(const CMsgClientConnectionStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_stats_logon()) {
    stats_logon_ = new ::proto::steam::CMsgClientConnectionStats_Stats_Logon(*from.stats_logon_);
  } else {
    stats_logon_ = nullptr;
  }
  if (from.has_stats_vconn()) {
    stats_vconn_ = new ::proto::steam::CMsgClientConnectionStats_Stats_VConn(*from.stats_vconn_);
  } else {
    stats_vconn_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientConnectionStats)
}

void CMsgClientConnectionStats::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientConnectionStats_steammessages_5fclientserver_2eproto.base);
  ::memset(&stats_logon_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stats_vconn_) -
      reinterpret_cast<char*>(&stats_logon_)) + sizeof(stats_vconn_));
}

CMsgClientConnectionStats::~CMsgClientConnectionStats() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientConnectionStats)
  SharedDtor();
}

void CMsgClientConnectionStats::SharedDtor() {
  if (this != internal_default_instance()) delete stats_logon_;
  if (this != internal_default_instance()) delete stats_vconn_;
}

void CMsgClientConnectionStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientConnectionStats& CMsgClientConnectionStats::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientConnectionStats_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientConnectionStats::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientConnectionStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(stats_logon_ != nullptr);
      stats_logon_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(stats_vconn_ != nullptr);
      stats_vconn_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientConnectionStats::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientConnectionStats*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.steam.CMsgClientConnectionStats.Stats_Logon stats_logon = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::steam::CMsgClientConnectionStats_Stats_Logon::_InternalParse;
        object = msg->mutable_stats_logon();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .proto.steam.CMsgClientConnectionStats.Stats_VConn stats_vconn = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::steam::CMsgClientConnectionStats_Stats_VConn::_InternalParse;
        object = msg->mutable_stats_vconn();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientConnectionStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientConnectionStats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.steam.CMsgClientConnectionStats.Stats_Logon stats_logon = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stats_logon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CMsgClientConnectionStats.Stats_VConn stats_vconn = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stats_vconn()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientConnectionStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientConnectionStats)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientConnectionStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientConnectionStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.CMsgClientConnectionStats.Stats_Logon stats_logon = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::stats_logon(this), output);
  }

  // optional .proto.steam.CMsgClientConnectionStats.Stats_VConn stats_vconn = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::stats_vconn(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientConnectionStats)
}

::google::protobuf::uint8* CMsgClientConnectionStats::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientConnectionStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.CMsgClientConnectionStats.Stats_Logon stats_logon = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::stats_logon(this), target);
  }

  // optional .proto.steam.CMsgClientConnectionStats.Stats_VConn stats_vconn = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::stats_vconn(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientConnectionStats)
  return target;
}

size_t CMsgClientConnectionStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientConnectionStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .proto.steam.CMsgClientConnectionStats.Stats_Logon stats_logon = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *stats_logon_);
    }

    // optional .proto.steam.CMsgClientConnectionStats.Stats_VConn stats_vconn = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *stats_vconn_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientConnectionStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientConnectionStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientConnectionStats* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientConnectionStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientConnectionStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientConnectionStats)
    MergeFrom(*source);
  }
}

void CMsgClientConnectionStats::MergeFrom(const CMsgClientConnectionStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientConnectionStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_stats_logon()->::proto::steam::CMsgClientConnectionStats_Stats_Logon::MergeFrom(from.stats_logon());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_stats_vconn()->::proto::steam::CMsgClientConnectionStats_Stats_VConn::MergeFrom(from.stats_vconn());
    }
  }
}

void CMsgClientConnectionStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientConnectionStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientConnectionStats::CopyFrom(const CMsgClientConnectionStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientConnectionStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientConnectionStats::IsInitialized() const {
  return true;
}

void CMsgClientConnectionStats::Swap(CMsgClientConnectionStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientConnectionStats::InternalSwap(CMsgClientConnectionStats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(stats_logon_, other->stats_logon_);
  swap(stats_vconn_, other->stats_vconn_);
}

::google::protobuf::Metadata CMsgClientConnectionStats::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientServersAvailable_Server_Types_Available::InitAsDefaultInstance() {
}
class CMsgClientServersAvailable_Server_Types_Available::HasBitSetters {
 public:
  static void set_has_server(CMsgClientServersAvailable_Server_Types_Available* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_changed(CMsgClientServersAvailable_Server_Types_Available* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientServersAvailable_Server_Types_Available::kServerFieldNumber;
const int CMsgClientServersAvailable_Server_Types_Available::kChangedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientServersAvailable_Server_Types_Available::CMsgClientServersAvailable_Server_Types_Available()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientServersAvailable.Server_Types_Available)
}
CMsgClientServersAvailable_Server_Types_Available::CMsgClientServersAvailable_Server_Types_Available(const CMsgClientServersAvailable_Server_Types_Available& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&server_, &from.server_,
    static_cast<size_t>(reinterpret_cast<char*>(&changed_) -
    reinterpret_cast<char*>(&server_)) + sizeof(changed_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientServersAvailable.Server_Types_Available)
}

void CMsgClientServersAvailable_Server_Types_Available::SharedCtor() {
  ::memset(&server_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&changed_) -
      reinterpret_cast<char*>(&server_)) + sizeof(changed_));
}

CMsgClientServersAvailable_Server_Types_Available::~CMsgClientServersAvailable_Server_Types_Available() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientServersAvailable.Server_Types_Available)
  SharedDtor();
}

void CMsgClientServersAvailable_Server_Types_Available::SharedDtor() {
}

void CMsgClientServersAvailable_Server_Types_Available::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientServersAvailable_Server_Types_Available& CMsgClientServersAvailable_Server_Types_Available::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientServersAvailable_Server_Types_Available_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientServersAvailable_Server_Types_Available::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientServersAvailable.Server_Types_Available)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&server_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&changed_) -
        reinterpret_cast<char*>(&server_)) + sizeof(changed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientServersAvailable_Server_Types_Available::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientServersAvailable_Server_Types_Available*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 server = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_server(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool changed = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_changed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientServersAvailable_Server_Types_Available::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientServersAvailable.Server_Types_Available)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_server(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool changed = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_changed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &changed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientServersAvailable.Server_Types_Available)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientServersAvailable.Server_Types_Available)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientServersAvailable_Server_Types_Available::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientServersAvailable.Server_Types_Available)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 server = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server(), output);
  }

  // optional bool changed = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->changed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientServersAvailable.Server_Types_Available)
}

::google::protobuf::uint8* CMsgClientServersAvailable_Server_Types_Available::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientServersAvailable.Server_Types_Available)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 server = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server(), target);
  }

  // optional bool changed = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->changed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientServersAvailable.Server_Types_Available)
  return target;
}

size_t CMsgClientServersAvailable_Server_Types_Available::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientServersAvailable.Server_Types_Available)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 server = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server());
    }

    // optional bool changed = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientServersAvailable_Server_Types_Available::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientServersAvailable.Server_Types_Available)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientServersAvailable_Server_Types_Available* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientServersAvailable_Server_Types_Available>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientServersAvailable.Server_Types_Available)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientServersAvailable.Server_Types_Available)
    MergeFrom(*source);
  }
}

void CMsgClientServersAvailable_Server_Types_Available::MergeFrom(const CMsgClientServersAvailable_Server_Types_Available& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientServersAvailable.Server_Types_Available)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      server_ = from.server_;
    }
    if (cached_has_bits & 0x00000002u) {
      changed_ = from.changed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientServersAvailable_Server_Types_Available::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientServersAvailable.Server_Types_Available)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientServersAvailable_Server_Types_Available::CopyFrom(const CMsgClientServersAvailable_Server_Types_Available& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientServersAvailable.Server_Types_Available)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientServersAvailable_Server_Types_Available::IsInitialized() const {
  return true;
}

void CMsgClientServersAvailable_Server_Types_Available::Swap(CMsgClientServersAvailable_Server_Types_Available* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientServersAvailable_Server_Types_Available::InternalSwap(CMsgClientServersAvailable_Server_Types_Available* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(server_, other->server_);
  swap(changed_, other->changed_);
}

::google::protobuf::Metadata CMsgClientServersAvailable_Server_Types_Available::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientServersAvailable::InitAsDefaultInstance() {
}
class CMsgClientServersAvailable::HasBitSetters {
 public:
  static void set_has_server_type_for_auth_services(CMsgClientServersAvailable* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientServersAvailable::kServerTypesAvailableFieldNumber;
const int CMsgClientServersAvailable::kServerTypeForAuthServicesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientServersAvailable::CMsgClientServersAvailable()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientServersAvailable)
}
CMsgClientServersAvailable::CMsgClientServersAvailable(const CMsgClientServersAvailable& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      server_types_available_(from.server_types_available_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  server_type_for_auth_services_ = from.server_type_for_auth_services_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientServersAvailable)
}

void CMsgClientServersAvailable::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientServersAvailable_steammessages_5fclientserver_2eproto.base);
  server_type_for_auth_services_ = 0u;
}

CMsgClientServersAvailable::~CMsgClientServersAvailable() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientServersAvailable)
  SharedDtor();
}

void CMsgClientServersAvailable::SharedDtor() {
}

void CMsgClientServersAvailable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientServersAvailable& CMsgClientServersAvailable::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientServersAvailable_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientServersAvailable::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientServersAvailable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_types_available_.Clear();
  server_type_for_auth_services_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientServersAvailable::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientServersAvailable*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.steam.CMsgClientServersAvailable.Server_Types_Available server_types_available = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgClientServersAvailable_Server_Types_Available::_InternalParse;
          object = msg->add_server_types_available();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // optional uint32 server_type_for_auth_services = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_server_type_for_auth_services(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientServersAvailable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientServersAvailable)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CMsgClientServersAvailable.Server_Types_Available server_types_available = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_server_types_available()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 server_type_for_auth_services = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_server_type_for_auth_services(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_type_for_auth_services_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientServersAvailable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientServersAvailable)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientServersAvailable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientServersAvailable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientServersAvailable.Server_Types_Available server_types_available = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->server_types_available_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->server_types_available(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 server_type_for_auth_services = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->server_type_for_auth_services(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientServersAvailable)
}

::google::protobuf::uint8* CMsgClientServersAvailable::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientServersAvailable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientServersAvailable.Server_Types_Available server_types_available = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->server_types_available_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->server_types_available(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 server_type_for_auth_services = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->server_type_for_auth_services(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientServersAvailable)
  return target;
}

size_t CMsgClientServersAvailable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientServersAvailable)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientServersAvailable.Server_Types_Available server_types_available = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->server_types_available_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->server_types_available(static_cast<int>(i)));
    }
  }

  // optional uint32 server_type_for_auth_services = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->server_type_for_auth_services());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientServersAvailable::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientServersAvailable)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientServersAvailable* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientServersAvailable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientServersAvailable)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientServersAvailable)
    MergeFrom(*source);
  }
}

void CMsgClientServersAvailable::MergeFrom(const CMsgClientServersAvailable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientServersAvailable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  server_types_available_.MergeFrom(from.server_types_available_);
  if (from.has_server_type_for_auth_services()) {
    set_server_type_for_auth_services(from.server_type_for_auth_services());
  }
}

void CMsgClientServersAvailable::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientServersAvailable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientServersAvailable::CopyFrom(const CMsgClientServersAvailable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientServersAvailable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientServersAvailable::IsInitialized() const {
  return true;
}

void CMsgClientServersAvailable::Swap(CMsgClientServersAvailable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientServersAvailable::InternalSwap(CMsgClientServersAvailable* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&server_types_available_)->InternalSwap(CastToBase(&other->server_types_available_));
  swap(server_type_for_auth_services_, other->server_type_for_auth_services_);
}

::google::protobuf::Metadata CMsgClientServersAvailable::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientGetUserStats::InitAsDefaultInstance() {
}
class CMsgClientGetUserStats::HasBitSetters {
 public:
  static void set_has_game_id(CMsgClientGetUserStats* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_crc_stats(CMsgClientGetUserStats* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_schema_local_version(CMsgClientGetUserStats* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_steam_id_for_user(CMsgClientGetUserStats* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientGetUserStats::kGameIdFieldNumber;
const int CMsgClientGetUserStats::kCrcStatsFieldNumber;
const int CMsgClientGetUserStats::kSchemaLocalVersionFieldNumber;
const int CMsgClientGetUserStats::kSteamIdForUserFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientGetUserStats::CMsgClientGetUserStats()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientGetUserStats)
}
CMsgClientGetUserStats::CMsgClientGetUserStats(const CMsgClientGetUserStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&game_id_, &from.game_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&steam_id_for_user_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(steam_id_for_user_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientGetUserStats)
}

void CMsgClientGetUserStats::SharedCtor() {
  ::memset(&game_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&steam_id_for_user_) -
      reinterpret_cast<char*>(&game_id_)) + sizeof(steam_id_for_user_));
}

CMsgClientGetUserStats::~CMsgClientGetUserStats() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientGetUserStats)
  SharedDtor();
}

void CMsgClientGetUserStats::SharedDtor() {
}

void CMsgClientGetUserStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientGetUserStats& CMsgClientGetUserStats::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientGetUserStats_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientGetUserStats::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientGetUserStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&game_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steam_id_for_user_) -
        reinterpret_cast<char*>(&game_id_)) + sizeof(steam_id_for_user_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientGetUserStats::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientGetUserStats*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 game_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_game_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 crc_stats = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_crc_stats(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 schema_local_version = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_schema_local_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 steam_id_for_user = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_steam_id_for_user(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientGetUserStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientGetUserStats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 game_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_game_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 crc_stats = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_crc_stats(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crc_stats_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 schema_local_version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_schema_local_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &schema_local_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_for_user = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {
          HasBitSetters::set_has_steam_id_for_user(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_for_user_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientGetUserStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientGetUserStats)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientGetUserStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientGetUserStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 game_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->game_id(), output);
  }

  // optional uint32 crc_stats = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->crc_stats(), output);
  }

  // optional int32 schema_local_version = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->schema_local_version(), output);
  }

  // optional fixed64 steam_id_for_user = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->steam_id_for_user(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientGetUserStats)
}

::google::protobuf::uint8* CMsgClientGetUserStats::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientGetUserStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 game_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->game_id(), target);
  }

  // optional uint32 crc_stats = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->crc_stats(), target);
  }

  // optional int32 schema_local_version = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->schema_local_version(), target);
  }

  // optional fixed64 steam_id_for_user = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->steam_id_for_user(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientGetUserStats)
  return target;
}

size_t CMsgClientGetUserStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientGetUserStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional fixed64 game_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 crc_stats = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crc_stats());
    }

    // optional int32 schema_local_version = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->schema_local_version());
    }

    // optional fixed64 steam_id_for_user = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientGetUserStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientGetUserStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientGetUserStats* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientGetUserStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientGetUserStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientGetUserStats)
    MergeFrom(*source);
  }
}

void CMsgClientGetUserStats::MergeFrom(const CMsgClientGetUserStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientGetUserStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      game_id_ = from.game_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      crc_stats_ = from.crc_stats_;
    }
    if (cached_has_bits & 0x00000004u) {
      schema_local_version_ = from.schema_local_version_;
    }
    if (cached_has_bits & 0x00000008u) {
      steam_id_for_user_ = from.steam_id_for_user_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientGetUserStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientGetUserStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientGetUserStats::CopyFrom(const CMsgClientGetUserStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientGetUserStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetUserStats::IsInitialized() const {
  return true;
}

void CMsgClientGetUserStats::Swap(CMsgClientGetUserStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientGetUserStats::InternalSwap(CMsgClientGetUserStats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(game_id_, other->game_id_);
  swap(crc_stats_, other->crc_stats_);
  swap(schema_local_version_, other->schema_local_version_);
  swap(steam_id_for_user_, other->steam_id_for_user_);
}

::google::protobuf::Metadata CMsgClientGetUserStats::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientGetUserStatsResponse_Stats::InitAsDefaultInstance() {
}
class CMsgClientGetUserStatsResponse_Stats::HasBitSetters {
 public:
  static void set_has_stat_id(CMsgClientGetUserStatsResponse_Stats* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_stat_value(CMsgClientGetUserStatsResponse_Stats* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientGetUserStatsResponse_Stats::kStatIdFieldNumber;
const int CMsgClientGetUserStatsResponse_Stats::kStatValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientGetUserStatsResponse_Stats::CMsgClientGetUserStatsResponse_Stats()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientGetUserStatsResponse.Stats)
}
CMsgClientGetUserStatsResponse_Stats::CMsgClientGetUserStatsResponse_Stats(const CMsgClientGetUserStatsResponse_Stats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stat_id_, &from.stat_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&stat_value_) -
    reinterpret_cast<char*>(&stat_id_)) + sizeof(stat_value_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientGetUserStatsResponse.Stats)
}

void CMsgClientGetUserStatsResponse_Stats::SharedCtor() {
  ::memset(&stat_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stat_value_) -
      reinterpret_cast<char*>(&stat_id_)) + sizeof(stat_value_));
}

CMsgClientGetUserStatsResponse_Stats::~CMsgClientGetUserStatsResponse_Stats() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientGetUserStatsResponse.Stats)
  SharedDtor();
}

void CMsgClientGetUserStatsResponse_Stats::SharedDtor() {
}

void CMsgClientGetUserStatsResponse_Stats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientGetUserStatsResponse_Stats& CMsgClientGetUserStatsResponse_Stats::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientGetUserStatsResponse_Stats_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientGetUserStatsResponse_Stats::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientGetUserStatsResponse.Stats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&stat_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stat_value_) -
        reinterpret_cast<char*>(&stat_id_)) + sizeof(stat_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientGetUserStatsResponse_Stats::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientGetUserStatsResponse_Stats*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 stat_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_stat_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 stat_value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_stat_value(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientGetUserStatsResponse_Stats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientGetUserStatsResponse.Stats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 stat_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_stat_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 stat_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_stat_value(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stat_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientGetUserStatsResponse.Stats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientGetUserStatsResponse.Stats)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientGetUserStatsResponse_Stats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientGetUserStatsResponse.Stats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 stat_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stat_id(), output);
  }

  // optional uint32 stat_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stat_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientGetUserStatsResponse.Stats)
}

::google::protobuf::uint8* CMsgClientGetUserStatsResponse_Stats::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientGetUserStatsResponse.Stats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 stat_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stat_id(), target);
  }

  // optional uint32 stat_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->stat_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientGetUserStatsResponse.Stats)
  return target;
}

size_t CMsgClientGetUserStatsResponse_Stats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientGetUserStatsResponse.Stats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 stat_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stat_id());
    }

    // optional uint32 stat_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stat_value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientGetUserStatsResponse_Stats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientGetUserStatsResponse.Stats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientGetUserStatsResponse_Stats* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientGetUserStatsResponse_Stats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientGetUserStatsResponse.Stats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientGetUserStatsResponse.Stats)
    MergeFrom(*source);
  }
}

void CMsgClientGetUserStatsResponse_Stats::MergeFrom(const CMsgClientGetUserStatsResponse_Stats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientGetUserStatsResponse.Stats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      stat_id_ = from.stat_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      stat_value_ = from.stat_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientGetUserStatsResponse_Stats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientGetUserStatsResponse.Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientGetUserStatsResponse_Stats::CopyFrom(const CMsgClientGetUserStatsResponse_Stats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientGetUserStatsResponse.Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetUserStatsResponse_Stats::IsInitialized() const {
  return true;
}

void CMsgClientGetUserStatsResponse_Stats::Swap(CMsgClientGetUserStatsResponse_Stats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientGetUserStatsResponse_Stats::InternalSwap(CMsgClientGetUserStatsResponse_Stats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(stat_id_, other->stat_id_);
  swap(stat_value_, other->stat_value_);
}

::google::protobuf::Metadata CMsgClientGetUserStatsResponse_Stats::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientGetUserStatsResponse_Achievement_Blocks::InitAsDefaultInstance() {
}
class CMsgClientGetUserStatsResponse_Achievement_Blocks::HasBitSetters {
 public:
  static void set_has_achievement_id(CMsgClientGetUserStatsResponse_Achievement_Blocks* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientGetUserStatsResponse_Achievement_Blocks::kAchievementIdFieldNumber;
const int CMsgClientGetUserStatsResponse_Achievement_Blocks::kUnlockTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientGetUserStatsResponse_Achievement_Blocks::CMsgClientGetUserStatsResponse_Achievement_Blocks()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientGetUserStatsResponse.Achievement_Blocks)
}
CMsgClientGetUserStatsResponse_Achievement_Blocks::CMsgClientGetUserStatsResponse_Achievement_Blocks(const CMsgClientGetUserStatsResponse_Achievement_Blocks& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      unlock_time_(from.unlock_time_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  achievement_id_ = from.achievement_id_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientGetUserStatsResponse.Achievement_Blocks)
}

void CMsgClientGetUserStatsResponse_Achievement_Blocks::SharedCtor() {
  achievement_id_ = 0u;
}

CMsgClientGetUserStatsResponse_Achievement_Blocks::~CMsgClientGetUserStatsResponse_Achievement_Blocks() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientGetUserStatsResponse.Achievement_Blocks)
  SharedDtor();
}

void CMsgClientGetUserStatsResponse_Achievement_Blocks::SharedDtor() {
}

void CMsgClientGetUserStatsResponse_Achievement_Blocks::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientGetUserStatsResponse_Achievement_Blocks& CMsgClientGetUserStatsResponse_Achievement_Blocks::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientGetUserStatsResponse_Achievement_Blocks_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientGetUserStatsResponse_Achievement_Blocks::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientGetUserStatsResponse.Achievement_Blocks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unlock_time_.Clear();
  achievement_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientGetUserStatsResponse_Achievement_Blocks::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientGetUserStatsResponse_Achievement_Blocks*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 achievement_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_achievement_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated fixed32 unlock_time = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 21) {
          do {
            msg->add_unlock_time(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
            ptr += sizeof(::google::protobuf::uint32);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 21 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedFixed32Parser;
        object = msg->mutable_unlock_time();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientGetUserStatsResponse_Achievement_Blocks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientGetUserStatsResponse.Achievement_Blocks)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 achievement_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_achievement_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &achievement_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed32 unlock_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 21u, input, this->mutable_unlock_time())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_unlock_time())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientGetUserStatsResponse.Achievement_Blocks)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientGetUserStatsResponse.Achievement_Blocks)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientGetUserStatsResponse_Achievement_Blocks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientGetUserStatsResponse.Achievement_Blocks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 achievement_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->achievement_id(), output);
  }

  // repeated fixed32 unlock_time = 2;
  for (int i = 0, n = this->unlock_time_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      2, this->unlock_time(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientGetUserStatsResponse.Achievement_Blocks)
}

::google::protobuf::uint8* CMsgClientGetUserStatsResponse_Achievement_Blocks::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientGetUserStatsResponse.Achievement_Blocks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 achievement_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->achievement_id(), target);
  }

  // repeated fixed32 unlock_time = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed32ToArray(2, this->unlock_time_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientGetUserStatsResponse.Achievement_Blocks)
  return target;
}

size_t CMsgClientGetUserStatsResponse_Achievement_Blocks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientGetUserStatsResponse.Achievement_Blocks)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed32 unlock_time = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->unlock_time_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->unlock_time_size());
    total_size += data_size;
  }

  // optional uint32 achievement_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->achievement_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientGetUserStatsResponse_Achievement_Blocks::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientGetUserStatsResponse.Achievement_Blocks)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientGetUserStatsResponse_Achievement_Blocks* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientGetUserStatsResponse_Achievement_Blocks>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientGetUserStatsResponse.Achievement_Blocks)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientGetUserStatsResponse.Achievement_Blocks)
    MergeFrom(*source);
  }
}

void CMsgClientGetUserStatsResponse_Achievement_Blocks::MergeFrom(const CMsgClientGetUserStatsResponse_Achievement_Blocks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientGetUserStatsResponse.Achievement_Blocks)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  unlock_time_.MergeFrom(from.unlock_time_);
  if (from.has_achievement_id()) {
    set_achievement_id(from.achievement_id());
  }
}

void CMsgClientGetUserStatsResponse_Achievement_Blocks::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientGetUserStatsResponse.Achievement_Blocks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientGetUserStatsResponse_Achievement_Blocks::CopyFrom(const CMsgClientGetUserStatsResponse_Achievement_Blocks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientGetUserStatsResponse.Achievement_Blocks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetUserStatsResponse_Achievement_Blocks::IsInitialized() const {
  return true;
}

void CMsgClientGetUserStatsResponse_Achievement_Blocks::Swap(CMsgClientGetUserStatsResponse_Achievement_Blocks* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientGetUserStatsResponse_Achievement_Blocks::InternalSwap(CMsgClientGetUserStatsResponse_Achievement_Blocks* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  unlock_time_.InternalSwap(&other->unlock_time_);
  swap(achievement_id_, other->achievement_id_);
}

::google::protobuf::Metadata CMsgClientGetUserStatsResponse_Achievement_Blocks::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientGetUserStatsResponse::InitAsDefaultInstance() {
}
class CMsgClientGetUserStatsResponse::HasBitSetters {
 public:
  static void set_has_game_id(CMsgClientGetUserStatsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_eresult(CMsgClientGetUserStatsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_crc_stats(CMsgClientGetUserStatsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_schema(CMsgClientGetUserStatsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientGetUserStatsResponse::kGameIdFieldNumber;
const int CMsgClientGetUserStatsResponse::kEresultFieldNumber;
const int CMsgClientGetUserStatsResponse::kCrcStatsFieldNumber;
const int CMsgClientGetUserStatsResponse::kSchemaFieldNumber;
const int CMsgClientGetUserStatsResponse::kStatsFieldNumber;
const int CMsgClientGetUserStatsResponse::kAchievementBlocksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientGetUserStatsResponse::CMsgClientGetUserStatsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientGetUserStatsResponse)
}
CMsgClientGetUserStatsResponse::CMsgClientGetUserStatsResponse(const CMsgClientGetUserStatsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      stats_(from.stats_),
      achievement_blocks_(from.achievement_blocks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  schema_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_schema()) {
    schema_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.schema_);
  }
  ::memcpy(&game_id_, &from.game_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientGetUserStatsResponse)
}

void CMsgClientGetUserStatsResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientGetUserStatsResponse_steammessages_5fclientserver_2eproto.base);
  schema_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&game_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&crc_stats_) -
      reinterpret_cast<char*>(&game_id_)) + sizeof(crc_stats_));
  eresult_ = 2;
}

CMsgClientGetUserStatsResponse::~CMsgClientGetUserStatsResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientGetUserStatsResponse)
  SharedDtor();
}

void CMsgClientGetUserStatsResponse::SharedDtor() {
  schema_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientGetUserStatsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientGetUserStatsResponse& CMsgClientGetUserStatsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientGetUserStatsResponse_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientGetUserStatsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientGetUserStatsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stats_.Clear();
  achievement_blocks_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    schema_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&game_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&crc_stats_) -
        reinterpret_cast<char*>(&game_id_)) + sizeof(crc_stats_));
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientGetUserStatsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientGetUserStatsResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 game_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_game_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional int32 eresult = 2 [default = 2];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_eresult(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 crc_stats = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_crc_stats(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes schema = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_schema();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .proto.steam.CMsgClientGetUserStatsResponse.Stats stats = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgClientGetUserStatsResponse_Stats::_InternalParse;
          object = msg->add_stats();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      // repeated .proto.steam.CMsgClientGetUserStatsResponse.Achievement_Blocks achievement_blocks = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgClientGetUserStatsResponse_Achievement_Blocks::_InternalParse;
          object = msg->add_achievement_blocks();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 50 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientGetUserStatsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientGetUserStatsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 game_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_game_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 eresult = 2 [default = 2];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_eresult(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 crc_stats = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_crc_stats(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crc_stats_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes schema = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_schema()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgClientGetUserStatsResponse.Stats stats = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgClientGetUserStatsResponse.Achievement_Blocks achievement_blocks = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_achievement_blocks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientGetUserStatsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientGetUserStatsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientGetUserStatsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientGetUserStatsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 game_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->game_id(), output);
  }

  // optional int32 eresult = 2 [default = 2];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->eresult(), output);
  }

  // optional uint32 crc_stats = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->crc_stats(), output);
  }

  // optional bytes schema = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->schema(), output);
  }

  // repeated .proto.steam.CMsgClientGetUserStatsResponse.Stats stats = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stats_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->stats(static_cast<int>(i)),
      output);
  }

  // repeated .proto.steam.CMsgClientGetUserStatsResponse.Achievement_Blocks achievement_blocks = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->achievement_blocks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->achievement_blocks(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientGetUserStatsResponse)
}

::google::protobuf::uint8* CMsgClientGetUserStatsResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientGetUserStatsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 game_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->game_id(), target);
  }

  // optional int32 eresult = 2 [default = 2];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->eresult(), target);
  }

  // optional uint32 crc_stats = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->crc_stats(), target);
  }

  // optional bytes schema = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->schema(), target);
  }

  // repeated .proto.steam.CMsgClientGetUserStatsResponse.Stats stats = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stats_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->stats(static_cast<int>(i)), target);
  }

  // repeated .proto.steam.CMsgClientGetUserStatsResponse.Achievement_Blocks achievement_blocks = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->achievement_blocks_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->achievement_blocks(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientGetUserStatsResponse)
  return target;
}

size_t CMsgClientGetUserStatsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientGetUserStatsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientGetUserStatsResponse.Stats stats = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->stats_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->stats(static_cast<int>(i)));
    }
  }

  // repeated .proto.steam.CMsgClientGetUserStatsResponse.Achievement_Blocks achievement_blocks = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->achievement_blocks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->achievement_blocks(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes schema = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->schema());
    }

    // optional fixed64 game_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 crc_stats = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crc_stats());
    }

    // optional int32 eresult = 2 [default = 2];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientGetUserStatsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientGetUserStatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientGetUserStatsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientGetUserStatsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientGetUserStatsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientGetUserStatsResponse)
    MergeFrom(*source);
  }
}

void CMsgClientGetUserStatsResponse::MergeFrom(const CMsgClientGetUserStatsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientGetUserStatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stats_.MergeFrom(from.stats_);
  achievement_blocks_.MergeFrom(from.achievement_blocks_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      schema_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.schema_);
    }
    if (cached_has_bits & 0x00000002u) {
      game_id_ = from.game_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      crc_stats_ = from.crc_stats_;
    }
    if (cached_has_bits & 0x00000008u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientGetUserStatsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientGetUserStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientGetUserStatsResponse::CopyFrom(const CMsgClientGetUserStatsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientGetUserStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetUserStatsResponse::IsInitialized() const {
  return true;
}

void CMsgClientGetUserStatsResponse::Swap(CMsgClientGetUserStatsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientGetUserStatsResponse::InternalSwap(CMsgClientGetUserStatsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&stats_)->InternalSwap(CastToBase(&other->stats_));
  CastToBase(&achievement_blocks_)->InternalSwap(CastToBase(&other->achievement_blocks_));
  schema_.Swap(&other->schema_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(game_id_, other->game_id_);
  swap(crc_stats_, other->crc_stats_);
  swap(eresult_, other->eresult_);
}

::google::protobuf::Metadata CMsgClientGetUserStatsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::InitAsDefaultInstance() {
}
class CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::HasBitSetters {
 public:
  static void set_has_stat_id(CMsgClientStoreUserStatsResponse_Stats_Failed_Validation* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_reverted_stat_value(CMsgClientStoreUserStatsResponse_Stats_Failed_Validation* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::kStatIdFieldNumber;
const int CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::kRevertedStatValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::CMsgClientStoreUserStatsResponse_Stats_Failed_Validation()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientStoreUserStatsResponse.Stats_Failed_Validation)
}
CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::CMsgClientStoreUserStatsResponse_Stats_Failed_Validation(const CMsgClientStoreUserStatsResponse_Stats_Failed_Validation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stat_id_, &from.stat_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&reverted_stat_value_) -
    reinterpret_cast<char*>(&stat_id_)) + sizeof(reverted_stat_value_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientStoreUserStatsResponse.Stats_Failed_Validation)
}

void CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::SharedCtor() {
  ::memset(&stat_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reverted_stat_value_) -
      reinterpret_cast<char*>(&stat_id_)) + sizeof(reverted_stat_value_));
}

CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::~CMsgClientStoreUserStatsResponse_Stats_Failed_Validation() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientStoreUserStatsResponse.Stats_Failed_Validation)
  SharedDtor();
}

void CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::SharedDtor() {
}

void CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientStoreUserStatsResponse_Stats_Failed_Validation& CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientStoreUserStatsResponse_Stats_Failed_Validation_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientStoreUserStatsResponse.Stats_Failed_Validation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&stat_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reverted_stat_value_) -
        reinterpret_cast<char*>(&stat_id_)) + sizeof(reverted_stat_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientStoreUserStatsResponse_Stats_Failed_Validation*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 stat_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_stat_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 reverted_stat_value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_reverted_stat_value(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientStoreUserStatsResponse.Stats_Failed_Validation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 stat_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_stat_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 reverted_stat_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_reverted_stat_value(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reverted_stat_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientStoreUserStatsResponse.Stats_Failed_Validation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientStoreUserStatsResponse.Stats_Failed_Validation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientStoreUserStatsResponse.Stats_Failed_Validation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 stat_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stat_id(), output);
  }

  // optional uint32 reverted_stat_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reverted_stat_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientStoreUserStatsResponse.Stats_Failed_Validation)
}

::google::protobuf::uint8* CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientStoreUserStatsResponse.Stats_Failed_Validation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 stat_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stat_id(), target);
  }

  // optional uint32 reverted_stat_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reverted_stat_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientStoreUserStatsResponse.Stats_Failed_Validation)
  return target;
}

size_t CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientStoreUserStatsResponse.Stats_Failed_Validation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 stat_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stat_id());
    }

    // optional uint32 reverted_stat_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reverted_stat_value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientStoreUserStatsResponse.Stats_Failed_Validation)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientStoreUserStatsResponse_Stats_Failed_Validation* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientStoreUserStatsResponse_Stats_Failed_Validation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientStoreUserStatsResponse.Stats_Failed_Validation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientStoreUserStatsResponse.Stats_Failed_Validation)
    MergeFrom(*source);
  }
}

void CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::MergeFrom(const CMsgClientStoreUserStatsResponse_Stats_Failed_Validation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientStoreUserStatsResponse.Stats_Failed_Validation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      stat_id_ = from.stat_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      reverted_stat_value_ = from.reverted_stat_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientStoreUserStatsResponse.Stats_Failed_Validation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::CopyFrom(const CMsgClientStoreUserStatsResponse_Stats_Failed_Validation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientStoreUserStatsResponse.Stats_Failed_Validation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::IsInitialized() const {
  return true;
}

void CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::Swap(CMsgClientStoreUserStatsResponse_Stats_Failed_Validation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::InternalSwap(CMsgClientStoreUserStatsResponse_Stats_Failed_Validation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(stat_id_, other->stat_id_);
  swap(reverted_stat_value_, other->reverted_stat_value_);
}

::google::protobuf::Metadata CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientStoreUserStatsResponse::InitAsDefaultInstance() {
}
class CMsgClientStoreUserStatsResponse::HasBitSetters {
 public:
  static void set_has_game_id(CMsgClientStoreUserStatsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_eresult(CMsgClientStoreUserStatsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_crc_stats(CMsgClientStoreUserStatsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_stats_out_of_date(CMsgClientStoreUserStatsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientStoreUserStatsResponse::kGameIdFieldNumber;
const int CMsgClientStoreUserStatsResponse::kEresultFieldNumber;
const int CMsgClientStoreUserStatsResponse::kCrcStatsFieldNumber;
const int CMsgClientStoreUserStatsResponse::kStatsFailedValidationFieldNumber;
const int CMsgClientStoreUserStatsResponse::kStatsOutOfDateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientStoreUserStatsResponse::CMsgClientStoreUserStatsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientStoreUserStatsResponse)
}
CMsgClientStoreUserStatsResponse::CMsgClientStoreUserStatsResponse(const CMsgClientStoreUserStatsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      stats_failed_validation_(from.stats_failed_validation_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&game_id_, &from.game_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientStoreUserStatsResponse)
}

void CMsgClientStoreUserStatsResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientStoreUserStatsResponse_steammessages_5fclientserver_2eproto.base);
  ::memset(&game_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stats_out_of_date_) -
      reinterpret_cast<char*>(&game_id_)) + sizeof(stats_out_of_date_));
  eresult_ = 2;
}

CMsgClientStoreUserStatsResponse::~CMsgClientStoreUserStatsResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientStoreUserStatsResponse)
  SharedDtor();
}

void CMsgClientStoreUserStatsResponse::SharedDtor() {
}

void CMsgClientStoreUserStatsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientStoreUserStatsResponse& CMsgClientStoreUserStatsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientStoreUserStatsResponse_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientStoreUserStatsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientStoreUserStatsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stats_failed_validation_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&game_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stats_out_of_date_) -
        reinterpret_cast<char*>(&game_id_)) + sizeof(stats_out_of_date_));
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientStoreUserStatsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientStoreUserStatsResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 game_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_game_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional int32 eresult = 2 [default = 2];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_eresult(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 crc_stats = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_crc_stats(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.steam.CMsgClientStoreUserStatsResponse.Stats_Failed_Validation stats_failed_validation = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::_InternalParse;
          object = msg->add_stats_failed_validation();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // optional bool stats_out_of_date = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_stats_out_of_date(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientStoreUserStatsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientStoreUserStatsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 game_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_game_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 eresult = 2 [default = 2];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_eresult(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 crc_stats = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_crc_stats(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crc_stats_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgClientStoreUserStatsResponse.Stats_Failed_Validation stats_failed_validation = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_stats_failed_validation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool stats_out_of_date = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_stats_out_of_date(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stats_out_of_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientStoreUserStatsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientStoreUserStatsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientStoreUserStatsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientStoreUserStatsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 game_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->game_id(), output);
  }

  // optional int32 eresult = 2 [default = 2];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->eresult(), output);
  }

  // optional uint32 crc_stats = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->crc_stats(), output);
  }

  // repeated .proto.steam.CMsgClientStoreUserStatsResponse.Stats_Failed_Validation stats_failed_validation = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stats_failed_validation_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->stats_failed_validation(static_cast<int>(i)),
      output);
  }

  // optional bool stats_out_of_date = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->stats_out_of_date(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientStoreUserStatsResponse)
}

::google::protobuf::uint8* CMsgClientStoreUserStatsResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientStoreUserStatsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 game_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->game_id(), target);
  }

  // optional int32 eresult = 2 [default = 2];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->eresult(), target);
  }

  // optional uint32 crc_stats = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->crc_stats(), target);
  }

  // repeated .proto.steam.CMsgClientStoreUserStatsResponse.Stats_Failed_Validation stats_failed_validation = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stats_failed_validation_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->stats_failed_validation(static_cast<int>(i)), target);
  }

  // optional bool stats_out_of_date = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->stats_out_of_date(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientStoreUserStatsResponse)
  return target;
}

size_t CMsgClientStoreUserStatsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientStoreUserStatsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientStoreUserStatsResponse.Stats_Failed_Validation stats_failed_validation = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->stats_failed_validation_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->stats_failed_validation(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional fixed64 game_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 crc_stats = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crc_stats());
    }

    // optional bool stats_out_of_date = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional int32 eresult = 2 [default = 2];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientStoreUserStatsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientStoreUserStatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientStoreUserStatsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientStoreUserStatsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientStoreUserStatsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientStoreUserStatsResponse)
    MergeFrom(*source);
  }
}

void CMsgClientStoreUserStatsResponse::MergeFrom(const CMsgClientStoreUserStatsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientStoreUserStatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stats_failed_validation_.MergeFrom(from.stats_failed_validation_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      game_id_ = from.game_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      crc_stats_ = from.crc_stats_;
    }
    if (cached_has_bits & 0x00000004u) {
      stats_out_of_date_ = from.stats_out_of_date_;
    }
    if (cached_has_bits & 0x00000008u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientStoreUserStatsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientStoreUserStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientStoreUserStatsResponse::CopyFrom(const CMsgClientStoreUserStatsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientStoreUserStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientStoreUserStatsResponse::IsInitialized() const {
  return true;
}

void CMsgClientStoreUserStatsResponse::Swap(CMsgClientStoreUserStatsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientStoreUserStatsResponse::InternalSwap(CMsgClientStoreUserStatsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&stats_failed_validation_)->InternalSwap(CastToBase(&other->stats_failed_validation_));
  swap(game_id_, other->game_id_);
  swap(crc_stats_, other->crc_stats_);
  swap(stats_out_of_date_, other->stats_out_of_date_);
  swap(eresult_, other->eresult_);
}

::google::protobuf::Metadata CMsgClientStoreUserStatsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientStoreUserStats2_Stats::InitAsDefaultInstance() {
}
class CMsgClientStoreUserStats2_Stats::HasBitSetters {
 public:
  static void set_has_stat_id(CMsgClientStoreUserStats2_Stats* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_stat_value(CMsgClientStoreUserStats2_Stats* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientStoreUserStats2_Stats::kStatIdFieldNumber;
const int CMsgClientStoreUserStats2_Stats::kStatValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientStoreUserStats2_Stats::CMsgClientStoreUserStats2_Stats()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientStoreUserStats2.Stats)
}
CMsgClientStoreUserStats2_Stats::CMsgClientStoreUserStats2_Stats(const CMsgClientStoreUserStats2_Stats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stat_id_, &from.stat_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&stat_value_) -
    reinterpret_cast<char*>(&stat_id_)) + sizeof(stat_value_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientStoreUserStats2.Stats)
}

void CMsgClientStoreUserStats2_Stats::SharedCtor() {
  ::memset(&stat_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stat_value_) -
      reinterpret_cast<char*>(&stat_id_)) + sizeof(stat_value_));
}

CMsgClientStoreUserStats2_Stats::~CMsgClientStoreUserStats2_Stats() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientStoreUserStats2.Stats)
  SharedDtor();
}

void CMsgClientStoreUserStats2_Stats::SharedDtor() {
}

void CMsgClientStoreUserStats2_Stats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientStoreUserStats2_Stats& CMsgClientStoreUserStats2_Stats::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientStoreUserStats2_Stats_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientStoreUserStats2_Stats::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientStoreUserStats2.Stats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&stat_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stat_value_) -
        reinterpret_cast<char*>(&stat_id_)) + sizeof(stat_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientStoreUserStats2_Stats::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientStoreUserStats2_Stats*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 stat_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_stat_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 stat_value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_stat_value(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientStoreUserStats2_Stats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientStoreUserStats2.Stats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 stat_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_stat_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 stat_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_stat_value(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stat_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientStoreUserStats2.Stats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientStoreUserStats2.Stats)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientStoreUserStats2_Stats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientStoreUserStats2.Stats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 stat_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stat_id(), output);
  }

  // optional uint32 stat_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stat_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientStoreUserStats2.Stats)
}

::google::protobuf::uint8* CMsgClientStoreUserStats2_Stats::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientStoreUserStats2.Stats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 stat_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stat_id(), target);
  }

  // optional uint32 stat_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->stat_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientStoreUserStats2.Stats)
  return target;
}

size_t CMsgClientStoreUserStats2_Stats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientStoreUserStats2.Stats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 stat_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stat_id());
    }

    // optional uint32 stat_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stat_value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientStoreUserStats2_Stats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientStoreUserStats2.Stats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientStoreUserStats2_Stats* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientStoreUserStats2_Stats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientStoreUserStats2.Stats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientStoreUserStats2.Stats)
    MergeFrom(*source);
  }
}

void CMsgClientStoreUserStats2_Stats::MergeFrom(const CMsgClientStoreUserStats2_Stats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientStoreUserStats2.Stats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      stat_id_ = from.stat_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      stat_value_ = from.stat_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientStoreUserStats2_Stats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientStoreUserStats2.Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientStoreUserStats2_Stats::CopyFrom(const CMsgClientStoreUserStats2_Stats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientStoreUserStats2.Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientStoreUserStats2_Stats::IsInitialized() const {
  return true;
}

void CMsgClientStoreUserStats2_Stats::Swap(CMsgClientStoreUserStats2_Stats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientStoreUserStats2_Stats::InternalSwap(CMsgClientStoreUserStats2_Stats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(stat_id_, other->stat_id_);
  swap(stat_value_, other->stat_value_);
}

::google::protobuf::Metadata CMsgClientStoreUserStats2_Stats::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientStoreUserStats2::InitAsDefaultInstance() {
}
class CMsgClientStoreUserStats2::HasBitSetters {
 public:
  static void set_has_game_id(CMsgClientStoreUserStats2* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_settor_steam_id(CMsgClientStoreUserStats2* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_settee_steam_id(CMsgClientStoreUserStats2* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_crc_stats(CMsgClientStoreUserStats2* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_explicit_reset(CMsgClientStoreUserStats2* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientStoreUserStats2::kGameIdFieldNumber;
const int CMsgClientStoreUserStats2::kSettorSteamIdFieldNumber;
const int CMsgClientStoreUserStats2::kSetteeSteamIdFieldNumber;
const int CMsgClientStoreUserStats2::kCrcStatsFieldNumber;
const int CMsgClientStoreUserStats2::kExplicitResetFieldNumber;
const int CMsgClientStoreUserStats2::kStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientStoreUserStats2::CMsgClientStoreUserStats2()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientStoreUserStats2)
}
CMsgClientStoreUserStats2::CMsgClientStoreUserStats2(const CMsgClientStoreUserStats2& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      stats_(from.stats_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&game_id_, &from.game_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&explicit_reset_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(explicit_reset_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientStoreUserStats2)
}

void CMsgClientStoreUserStats2::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientStoreUserStats2_steammessages_5fclientserver_2eproto.base);
  ::memset(&game_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&explicit_reset_) -
      reinterpret_cast<char*>(&game_id_)) + sizeof(explicit_reset_));
}

CMsgClientStoreUserStats2::~CMsgClientStoreUserStats2() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientStoreUserStats2)
  SharedDtor();
}

void CMsgClientStoreUserStats2::SharedDtor() {
}

void CMsgClientStoreUserStats2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientStoreUserStats2& CMsgClientStoreUserStats2::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientStoreUserStats2_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientStoreUserStats2::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientStoreUserStats2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stats_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&game_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&explicit_reset_) -
        reinterpret_cast<char*>(&game_id_)) + sizeof(explicit_reset_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientStoreUserStats2::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientStoreUserStats2*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 game_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_game_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed64 settor_steam_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_settor_steam_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed64 settee_steam_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_settee_steam_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 crc_stats = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_crc_stats(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool explicit_reset = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_explicit_reset(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.steam.CMsgClientStoreUserStats2.Stats stats = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgClientStoreUserStats2_Stats::_InternalParse;
          object = msg->add_stats();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 50 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientStoreUserStats2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientStoreUserStats2)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 game_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_game_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 settor_steam_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_settor_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &settor_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 settee_steam_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          HasBitSetters::set_has_settee_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &settee_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 crc_stats = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_crc_stats(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crc_stats_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool explicit_reset = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_explicit_reset(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &explicit_reset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgClientStoreUserStats2.Stats stats = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientStoreUserStats2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientStoreUserStats2)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientStoreUserStats2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientStoreUserStats2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 game_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->game_id(), output);
  }

  // optional fixed64 settor_steam_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->settor_steam_id(), output);
  }

  // optional fixed64 settee_steam_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->settee_steam_id(), output);
  }

  // optional uint32 crc_stats = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->crc_stats(), output);
  }

  // optional bool explicit_reset = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->explicit_reset(), output);
  }

  // repeated .proto.steam.CMsgClientStoreUserStats2.Stats stats = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stats_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->stats(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientStoreUserStats2)
}

::google::protobuf::uint8* CMsgClientStoreUserStats2::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientStoreUserStats2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 game_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->game_id(), target);
  }

  // optional fixed64 settor_steam_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->settor_steam_id(), target);
  }

  // optional fixed64 settee_steam_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->settee_steam_id(), target);
  }

  // optional uint32 crc_stats = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->crc_stats(), target);
  }

  // optional bool explicit_reset = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->explicit_reset(), target);
  }

  // repeated .proto.steam.CMsgClientStoreUserStats2.Stats stats = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stats_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->stats(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientStoreUserStats2)
  return target;
}

size_t CMsgClientStoreUserStats2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientStoreUserStats2)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientStoreUserStats2.Stats stats = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->stats_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->stats(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional fixed64 game_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 settor_steam_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 settee_steam_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 crc_stats = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crc_stats());
    }

    // optional bool explicit_reset = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientStoreUserStats2::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientStoreUserStats2)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientStoreUserStats2* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientStoreUserStats2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientStoreUserStats2)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientStoreUserStats2)
    MergeFrom(*source);
  }
}

void CMsgClientStoreUserStats2::MergeFrom(const CMsgClientStoreUserStats2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientStoreUserStats2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stats_.MergeFrom(from.stats_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      game_id_ = from.game_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      settor_steam_id_ = from.settor_steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      settee_steam_id_ = from.settee_steam_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      crc_stats_ = from.crc_stats_;
    }
    if (cached_has_bits & 0x00000010u) {
      explicit_reset_ = from.explicit_reset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientStoreUserStats2::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientStoreUserStats2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientStoreUserStats2::CopyFrom(const CMsgClientStoreUserStats2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientStoreUserStats2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientStoreUserStats2::IsInitialized() const {
  return true;
}

void CMsgClientStoreUserStats2::Swap(CMsgClientStoreUserStats2* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientStoreUserStats2::InternalSwap(CMsgClientStoreUserStats2* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&stats_)->InternalSwap(CastToBase(&other->stats_));
  swap(game_id_, other->game_id_);
  swap(settor_steam_id_, other->settor_steam_id_);
  swap(settee_steam_id_, other->settee_steam_id_);
  swap(crc_stats_, other->crc_stats_);
  swap(explicit_reset_, other->explicit_reset_);
}

::google::protobuf::Metadata CMsgClientStoreUserStats2::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientStatsUpdated_Updated_Stats::InitAsDefaultInstance() {
}
class CMsgClientStatsUpdated_Updated_Stats::HasBitSetters {
 public:
  static void set_has_stat_id(CMsgClientStatsUpdated_Updated_Stats* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_stat_value(CMsgClientStatsUpdated_Updated_Stats* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientStatsUpdated_Updated_Stats::kStatIdFieldNumber;
const int CMsgClientStatsUpdated_Updated_Stats::kStatValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientStatsUpdated_Updated_Stats::CMsgClientStatsUpdated_Updated_Stats()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientStatsUpdated.Updated_Stats)
}
CMsgClientStatsUpdated_Updated_Stats::CMsgClientStatsUpdated_Updated_Stats(const CMsgClientStatsUpdated_Updated_Stats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stat_id_, &from.stat_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&stat_value_) -
    reinterpret_cast<char*>(&stat_id_)) + sizeof(stat_value_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientStatsUpdated.Updated_Stats)
}

void CMsgClientStatsUpdated_Updated_Stats::SharedCtor() {
  ::memset(&stat_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stat_value_) -
      reinterpret_cast<char*>(&stat_id_)) + sizeof(stat_value_));
}

CMsgClientStatsUpdated_Updated_Stats::~CMsgClientStatsUpdated_Updated_Stats() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientStatsUpdated.Updated_Stats)
  SharedDtor();
}

void CMsgClientStatsUpdated_Updated_Stats::SharedDtor() {
}

void CMsgClientStatsUpdated_Updated_Stats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientStatsUpdated_Updated_Stats& CMsgClientStatsUpdated_Updated_Stats::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientStatsUpdated_Updated_Stats_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientStatsUpdated_Updated_Stats::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientStatsUpdated.Updated_Stats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&stat_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stat_value_) -
        reinterpret_cast<char*>(&stat_id_)) + sizeof(stat_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientStatsUpdated_Updated_Stats::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientStatsUpdated_Updated_Stats*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 stat_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_stat_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 stat_value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_stat_value(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientStatsUpdated_Updated_Stats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientStatsUpdated.Updated_Stats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 stat_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_stat_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 stat_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_stat_value(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stat_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientStatsUpdated.Updated_Stats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientStatsUpdated.Updated_Stats)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientStatsUpdated_Updated_Stats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientStatsUpdated.Updated_Stats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 stat_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stat_id(), output);
  }

  // optional uint32 stat_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stat_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientStatsUpdated.Updated_Stats)
}

::google::protobuf::uint8* CMsgClientStatsUpdated_Updated_Stats::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientStatsUpdated.Updated_Stats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 stat_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stat_id(), target);
  }

  // optional uint32 stat_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->stat_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientStatsUpdated.Updated_Stats)
  return target;
}

size_t CMsgClientStatsUpdated_Updated_Stats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientStatsUpdated.Updated_Stats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 stat_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stat_id());
    }

    // optional uint32 stat_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stat_value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientStatsUpdated_Updated_Stats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientStatsUpdated.Updated_Stats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientStatsUpdated_Updated_Stats* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientStatsUpdated_Updated_Stats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientStatsUpdated.Updated_Stats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientStatsUpdated.Updated_Stats)
    MergeFrom(*source);
  }
}

void CMsgClientStatsUpdated_Updated_Stats::MergeFrom(const CMsgClientStatsUpdated_Updated_Stats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientStatsUpdated.Updated_Stats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      stat_id_ = from.stat_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      stat_value_ = from.stat_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientStatsUpdated_Updated_Stats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientStatsUpdated.Updated_Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientStatsUpdated_Updated_Stats::CopyFrom(const CMsgClientStatsUpdated_Updated_Stats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientStatsUpdated.Updated_Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientStatsUpdated_Updated_Stats::IsInitialized() const {
  return true;
}

void CMsgClientStatsUpdated_Updated_Stats::Swap(CMsgClientStatsUpdated_Updated_Stats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientStatsUpdated_Updated_Stats::InternalSwap(CMsgClientStatsUpdated_Updated_Stats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(stat_id_, other->stat_id_);
  swap(stat_value_, other->stat_value_);
}

::google::protobuf::Metadata CMsgClientStatsUpdated_Updated_Stats::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientStatsUpdated::InitAsDefaultInstance() {
}
class CMsgClientStatsUpdated::HasBitSetters {
 public:
  static void set_has_steam_id(CMsgClientStatsUpdated* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_game_id(CMsgClientStatsUpdated* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_crc_stats(CMsgClientStatsUpdated* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientStatsUpdated::kSteamIdFieldNumber;
const int CMsgClientStatsUpdated::kGameIdFieldNumber;
const int CMsgClientStatsUpdated::kCrcStatsFieldNumber;
const int CMsgClientStatsUpdated::kUpdatedStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientStatsUpdated::CMsgClientStatsUpdated()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientStatsUpdated)
}
CMsgClientStatsUpdated::CMsgClientStatsUpdated(const CMsgClientStatsUpdated& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      updated_stats_(from.updated_stats_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&crc_stats_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(crc_stats_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientStatsUpdated)
}

void CMsgClientStatsUpdated::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientStatsUpdated_steammessages_5fclientserver_2eproto.base);
  ::memset(&steam_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&crc_stats_) -
      reinterpret_cast<char*>(&steam_id_)) + sizeof(crc_stats_));
}

CMsgClientStatsUpdated::~CMsgClientStatsUpdated() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientStatsUpdated)
  SharedDtor();
}

void CMsgClientStatsUpdated::SharedDtor() {
}

void CMsgClientStatsUpdated::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientStatsUpdated& CMsgClientStatsUpdated::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientStatsUpdated_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientStatsUpdated::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientStatsUpdated)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  updated_stats_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&crc_stats_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(crc_stats_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientStatsUpdated::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientStatsUpdated*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steam_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed64 game_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_game_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 crc_stats = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_crc_stats(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.steam.CMsgClientStatsUpdated.Updated_Stats updated_stats = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgClientStatsUpdated_Updated_Stats::_InternalParse;
          object = msg->add_updated_stats();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientStatsUpdated::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientStatsUpdated)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 game_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_game_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 crc_stats = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_crc_stats(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crc_stats_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgClientStatsUpdated.Updated_Stats updated_stats = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_updated_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientStatsUpdated)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientStatsUpdated)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientStatsUpdated::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientStatsUpdated)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional fixed64 game_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->game_id(), output);
  }

  // optional uint32 crc_stats = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->crc_stats(), output);
  }

  // repeated .proto.steam.CMsgClientStatsUpdated.Updated_Stats updated_stats = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->updated_stats_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->updated_stats(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientStatsUpdated)
}

::google::protobuf::uint8* CMsgClientStatsUpdated::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientStatsUpdated)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional fixed64 game_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->game_id(), target);
  }

  // optional uint32 crc_stats = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->crc_stats(), target);
  }

  // repeated .proto.steam.CMsgClientStatsUpdated.Updated_Stats updated_stats = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->updated_stats_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->updated_stats(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientStatsUpdated)
  return target;
}

size_t CMsgClientStatsUpdated::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientStatsUpdated)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientStatsUpdated.Updated_Stats updated_stats = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->updated_stats_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->updated_stats(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 game_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 crc_stats = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crc_stats());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientStatsUpdated::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientStatsUpdated)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientStatsUpdated* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientStatsUpdated>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientStatsUpdated)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientStatsUpdated)
    MergeFrom(*source);
  }
}

void CMsgClientStatsUpdated::MergeFrom(const CMsgClientStatsUpdated& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientStatsUpdated)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  updated_stats_.MergeFrom(from.updated_stats_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      game_id_ = from.game_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      crc_stats_ = from.crc_stats_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientStatsUpdated::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientStatsUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientStatsUpdated::CopyFrom(const CMsgClientStatsUpdated& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientStatsUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientStatsUpdated::IsInitialized() const {
  return true;
}

void CMsgClientStatsUpdated::Swap(CMsgClientStatsUpdated* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientStatsUpdated::InternalSwap(CMsgClientStatsUpdated* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&updated_stats_)->InternalSwap(CastToBase(&other->updated_stats_));
  swap(steam_id_, other->steam_id_);
  swap(game_id_, other->game_id_);
  swap(crc_stats_, other->crc_stats_);
}

::google::protobuf::Metadata CMsgClientStatsUpdated::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientStoreUserStats_Stats_To_Store::InitAsDefaultInstance() {
}
class CMsgClientStoreUserStats_Stats_To_Store::HasBitSetters {
 public:
  static void set_has_stat_id(CMsgClientStoreUserStats_Stats_To_Store* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_stat_value(CMsgClientStoreUserStats_Stats_To_Store* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientStoreUserStats_Stats_To_Store::kStatIdFieldNumber;
const int CMsgClientStoreUserStats_Stats_To_Store::kStatValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientStoreUserStats_Stats_To_Store::CMsgClientStoreUserStats_Stats_To_Store()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientStoreUserStats.Stats_To_Store)
}
CMsgClientStoreUserStats_Stats_To_Store::CMsgClientStoreUserStats_Stats_To_Store(const CMsgClientStoreUserStats_Stats_To_Store& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stat_id_, &from.stat_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&stat_value_) -
    reinterpret_cast<char*>(&stat_id_)) + sizeof(stat_value_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientStoreUserStats.Stats_To_Store)
}

void CMsgClientStoreUserStats_Stats_To_Store::SharedCtor() {
  ::memset(&stat_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stat_value_) -
      reinterpret_cast<char*>(&stat_id_)) + sizeof(stat_value_));
}

CMsgClientStoreUserStats_Stats_To_Store::~CMsgClientStoreUserStats_Stats_To_Store() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientStoreUserStats.Stats_To_Store)
  SharedDtor();
}

void CMsgClientStoreUserStats_Stats_To_Store::SharedDtor() {
}

void CMsgClientStoreUserStats_Stats_To_Store::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientStoreUserStats_Stats_To_Store& CMsgClientStoreUserStats_Stats_To_Store::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientStoreUserStats_Stats_To_Store_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientStoreUserStats_Stats_To_Store::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientStoreUserStats.Stats_To_Store)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&stat_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stat_value_) -
        reinterpret_cast<char*>(&stat_id_)) + sizeof(stat_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientStoreUserStats_Stats_To_Store::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientStoreUserStats_Stats_To_Store*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 stat_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_stat_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 stat_value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_stat_value(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientStoreUserStats_Stats_To_Store::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientStoreUserStats.Stats_To_Store)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 stat_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_stat_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 stat_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_stat_value(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stat_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientStoreUserStats.Stats_To_Store)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientStoreUserStats.Stats_To_Store)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientStoreUserStats_Stats_To_Store::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientStoreUserStats.Stats_To_Store)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 stat_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stat_id(), output);
  }

  // optional uint32 stat_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stat_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientStoreUserStats.Stats_To_Store)
}

::google::protobuf::uint8* CMsgClientStoreUserStats_Stats_To_Store::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientStoreUserStats.Stats_To_Store)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 stat_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stat_id(), target);
  }

  // optional uint32 stat_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->stat_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientStoreUserStats.Stats_To_Store)
  return target;
}

size_t CMsgClientStoreUserStats_Stats_To_Store::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientStoreUserStats.Stats_To_Store)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 stat_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stat_id());
    }

    // optional uint32 stat_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stat_value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientStoreUserStats_Stats_To_Store::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientStoreUserStats.Stats_To_Store)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientStoreUserStats_Stats_To_Store* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientStoreUserStats_Stats_To_Store>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientStoreUserStats.Stats_To_Store)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientStoreUserStats.Stats_To_Store)
    MergeFrom(*source);
  }
}

void CMsgClientStoreUserStats_Stats_To_Store::MergeFrom(const CMsgClientStoreUserStats_Stats_To_Store& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientStoreUserStats.Stats_To_Store)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      stat_id_ = from.stat_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      stat_value_ = from.stat_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientStoreUserStats_Stats_To_Store::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientStoreUserStats.Stats_To_Store)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientStoreUserStats_Stats_To_Store::CopyFrom(const CMsgClientStoreUserStats_Stats_To_Store& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientStoreUserStats.Stats_To_Store)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientStoreUserStats_Stats_To_Store::IsInitialized() const {
  return true;
}

void CMsgClientStoreUserStats_Stats_To_Store::Swap(CMsgClientStoreUserStats_Stats_To_Store* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientStoreUserStats_Stats_To_Store::InternalSwap(CMsgClientStoreUserStats_Stats_To_Store* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(stat_id_, other->stat_id_);
  swap(stat_value_, other->stat_value_);
}

::google::protobuf::Metadata CMsgClientStoreUserStats_Stats_To_Store::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientStoreUserStats::InitAsDefaultInstance() {
}
class CMsgClientStoreUserStats::HasBitSetters {
 public:
  static void set_has_game_id(CMsgClientStoreUserStats* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_explicit_reset(CMsgClientStoreUserStats* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientStoreUserStats::kGameIdFieldNumber;
const int CMsgClientStoreUserStats::kExplicitResetFieldNumber;
const int CMsgClientStoreUserStats::kStatsToStoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientStoreUserStats::CMsgClientStoreUserStats()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientStoreUserStats)
}
CMsgClientStoreUserStats::CMsgClientStoreUserStats(const CMsgClientStoreUserStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      stats_to_store_(from.stats_to_store_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&game_id_, &from.game_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&explicit_reset_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(explicit_reset_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientStoreUserStats)
}

void CMsgClientStoreUserStats::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientStoreUserStats_steammessages_5fclientserver_2eproto.base);
  ::memset(&game_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&explicit_reset_) -
      reinterpret_cast<char*>(&game_id_)) + sizeof(explicit_reset_));
}

CMsgClientStoreUserStats::~CMsgClientStoreUserStats() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientStoreUserStats)
  SharedDtor();
}

void CMsgClientStoreUserStats::SharedDtor() {
}

void CMsgClientStoreUserStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientStoreUserStats& CMsgClientStoreUserStats::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientStoreUserStats_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientStoreUserStats::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientStoreUserStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stats_to_store_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&game_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&explicit_reset_) -
        reinterpret_cast<char*>(&game_id_)) + sizeof(explicit_reset_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientStoreUserStats::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientStoreUserStats*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 game_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_game_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional bool explicit_reset = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_explicit_reset(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.steam.CMsgClientStoreUserStats.Stats_To_Store stats_to_store = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgClientStoreUserStats_Stats_To_Store::_InternalParse;
          object = msg->add_stats_to_store();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientStoreUserStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientStoreUserStats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 game_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_game_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool explicit_reset = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_explicit_reset(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &explicit_reset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgClientStoreUserStats.Stats_To_Store stats_to_store = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_stats_to_store()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientStoreUserStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientStoreUserStats)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientStoreUserStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientStoreUserStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 game_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->game_id(), output);
  }

  // optional bool explicit_reset = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->explicit_reset(), output);
  }

  // repeated .proto.steam.CMsgClientStoreUserStats.Stats_To_Store stats_to_store = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stats_to_store_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->stats_to_store(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientStoreUserStats)
}

::google::protobuf::uint8* CMsgClientStoreUserStats::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientStoreUserStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 game_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->game_id(), target);
  }

  // optional bool explicit_reset = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->explicit_reset(), target);
  }

  // repeated .proto.steam.CMsgClientStoreUserStats.Stats_To_Store stats_to_store = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stats_to_store_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->stats_to_store(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientStoreUserStats)
  return target;
}

size_t CMsgClientStoreUserStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientStoreUserStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientStoreUserStats.Stats_To_Store stats_to_store = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->stats_to_store_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->stats_to_store(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 game_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional bool explicit_reset = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientStoreUserStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientStoreUserStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientStoreUserStats* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientStoreUserStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientStoreUserStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientStoreUserStats)
    MergeFrom(*source);
  }
}

void CMsgClientStoreUserStats::MergeFrom(const CMsgClientStoreUserStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientStoreUserStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stats_to_store_.MergeFrom(from.stats_to_store_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      game_id_ = from.game_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      explicit_reset_ = from.explicit_reset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientStoreUserStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientStoreUserStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientStoreUserStats::CopyFrom(const CMsgClientStoreUserStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientStoreUserStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientStoreUserStats::IsInitialized() const {
  return true;
}

void CMsgClientStoreUserStats::Swap(CMsgClientStoreUserStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientStoreUserStats::InternalSwap(CMsgClientStoreUserStats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&stats_to_store_)->InternalSwap(CastToBase(&other->stats_to_store_));
  swap(game_id_, other->game_id_);
  swap(explicit_reset_, other->explicit_reset_);
}

::google::protobuf::Metadata CMsgClientStoreUserStats::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientGetClientDetails::InitAsDefaultInstance() {
}
class CMsgClientGetClientDetails::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientGetClientDetails::CMsgClientGetClientDetails()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientGetClientDetails)
}
CMsgClientGetClientDetails::CMsgClientGetClientDetails(const CMsgClientGetClientDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientGetClientDetails)
}

void CMsgClientGetClientDetails::SharedCtor() {
}

CMsgClientGetClientDetails::~CMsgClientGetClientDetails() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientGetClientDetails)
  SharedDtor();
}

void CMsgClientGetClientDetails::SharedDtor() {
}

void CMsgClientGetClientDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientGetClientDetails& CMsgClientGetClientDetails::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientGetClientDetails_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientGetClientDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientGetClientDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientGetClientDetails::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientGetClientDetails*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientGetClientDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientGetClientDetails)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientGetClientDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientGetClientDetails)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientGetClientDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientGetClientDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientGetClientDetails)
}

::google::protobuf::uint8* CMsgClientGetClientDetails::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientGetClientDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientGetClientDetails)
  return target;
}

size_t CMsgClientGetClientDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientGetClientDetails)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientGetClientDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientGetClientDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientGetClientDetails* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientGetClientDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientGetClientDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientGetClientDetails)
    MergeFrom(*source);
  }
}

void CMsgClientGetClientDetails::MergeFrom(const CMsgClientGetClientDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientGetClientDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgClientGetClientDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientGetClientDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientGetClientDetails::CopyFrom(const CMsgClientGetClientDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientGetClientDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetClientDetails::IsInitialized() const {
  return true;
}

void CMsgClientGetClientDetails::Swap(CMsgClientGetClientDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientGetClientDetails::InternalSwap(CMsgClientGetClientDetails* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CMsgClientGetClientDetails::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientReportOverlayDetourFailure::InitAsDefaultInstance() {
}
class CMsgClientReportOverlayDetourFailure::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientReportOverlayDetourFailure::kFailureStringsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientReportOverlayDetourFailure::CMsgClientReportOverlayDetourFailure()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientReportOverlayDetourFailure)
}
CMsgClientReportOverlayDetourFailure::CMsgClientReportOverlayDetourFailure(const CMsgClientReportOverlayDetourFailure& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      failure_strings_(from.failure_strings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientReportOverlayDetourFailure)
}

void CMsgClientReportOverlayDetourFailure::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientReportOverlayDetourFailure_steammessages_5fclientserver_2eproto.base);
}

CMsgClientReportOverlayDetourFailure::~CMsgClientReportOverlayDetourFailure() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientReportOverlayDetourFailure)
  SharedDtor();
}

void CMsgClientReportOverlayDetourFailure::SharedDtor() {
}

void CMsgClientReportOverlayDetourFailure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientReportOverlayDetourFailure& CMsgClientReportOverlayDetourFailure::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientReportOverlayDetourFailure_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientReportOverlayDetourFailure::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientReportOverlayDetourFailure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  failure_strings_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientReportOverlayDetourFailure::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientReportOverlayDetourFailure*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated string failure_strings = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientReportOverlayDetourFailure.failure_strings");
          object = msg->add_failure_strings();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientReportOverlayDetourFailure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientReportOverlayDetourFailure)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string failure_strings = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_failure_strings()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->failure_strings(this->failure_strings_size() - 1).data(),
            static_cast<int>(this->failure_strings(this->failure_strings_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientReportOverlayDetourFailure.failure_strings");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientReportOverlayDetourFailure)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientReportOverlayDetourFailure)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientReportOverlayDetourFailure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientReportOverlayDetourFailure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string failure_strings = 1;
  for (int i = 0, n = this->failure_strings_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->failure_strings(i).data(), static_cast<int>(this->failure_strings(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientReportOverlayDetourFailure.failure_strings");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->failure_strings(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientReportOverlayDetourFailure)
}

::google::protobuf::uint8* CMsgClientReportOverlayDetourFailure::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientReportOverlayDetourFailure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string failure_strings = 1;
  for (int i = 0, n = this->failure_strings_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->failure_strings(i).data(), static_cast<int>(this->failure_strings(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientReportOverlayDetourFailure.failure_strings");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->failure_strings(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientReportOverlayDetourFailure)
  return target;
}

size_t CMsgClientReportOverlayDetourFailure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientReportOverlayDetourFailure)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string failure_strings = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->failure_strings_size());
  for (int i = 0, n = this->failure_strings_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->failure_strings(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientReportOverlayDetourFailure::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientReportOverlayDetourFailure)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientReportOverlayDetourFailure* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientReportOverlayDetourFailure>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientReportOverlayDetourFailure)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientReportOverlayDetourFailure)
    MergeFrom(*source);
  }
}

void CMsgClientReportOverlayDetourFailure::MergeFrom(const CMsgClientReportOverlayDetourFailure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientReportOverlayDetourFailure)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  failure_strings_.MergeFrom(from.failure_strings_);
}

void CMsgClientReportOverlayDetourFailure::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientReportOverlayDetourFailure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientReportOverlayDetourFailure::CopyFrom(const CMsgClientReportOverlayDetourFailure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientReportOverlayDetourFailure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientReportOverlayDetourFailure::IsInitialized() const {
  return true;
}

void CMsgClientReportOverlayDetourFailure::Swap(CMsgClientReportOverlayDetourFailure* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientReportOverlayDetourFailure::InternalSwap(CMsgClientReportOverlayDetourFailure* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  failure_strings_.InternalSwap(CastToBase(&other->failure_strings_));
}

::google::protobuf::Metadata CMsgClientReportOverlayDetourFailure::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientGetClientDetailsResponse_Game::InitAsDefaultInstance() {
}
class CMsgClientGetClientDetailsResponse_Game::HasBitSetters {
 public:
  static void set_has_appid(CMsgClientGetClientDetailsResponse_Game* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_extra_info(CMsgClientGetClientDetailsResponse_Game* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_time_running_sec(CMsgClientGetClientDetailsResponse_Game* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientGetClientDetailsResponse_Game::kAppidFieldNumber;
const int CMsgClientGetClientDetailsResponse_Game::kExtraInfoFieldNumber;
const int CMsgClientGetClientDetailsResponse_Game::kTimeRunningSecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientGetClientDetailsResponse_Game::CMsgClientGetClientDetailsResponse_Game()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientGetClientDetailsResponse.Game)
}
CMsgClientGetClientDetailsResponse_Game::CMsgClientGetClientDetailsResponse_Game(const CMsgClientGetClientDetailsResponse_Game& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  extra_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_extra_info()) {
    extra_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extra_info_);
  }
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_running_sec_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(time_running_sec_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientGetClientDetailsResponse.Game)
}

void CMsgClientGetClientDetailsResponse_Game::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientGetClientDetailsResponse_Game_steammessages_5fclientserver_2eproto.base);
  extra_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&appid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_running_sec_) -
      reinterpret_cast<char*>(&appid_)) + sizeof(time_running_sec_));
}

CMsgClientGetClientDetailsResponse_Game::~CMsgClientGetClientDetailsResponse_Game() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientGetClientDetailsResponse.Game)
  SharedDtor();
}

void CMsgClientGetClientDetailsResponse_Game::SharedDtor() {
  extra_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientGetClientDetailsResponse_Game::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientGetClientDetailsResponse_Game& CMsgClientGetClientDetailsResponse_Game::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientGetClientDetailsResponse_Game_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientGetClientDetailsResponse_Game::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientGetClientDetailsResponse.Game)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    extra_info_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_running_sec_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(time_running_sec_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientGetClientDetailsResponse_Game::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientGetClientDetailsResponse_Game*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string extra_info = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientGetClientDetailsResponse.Game.extra_info");
        object = msg->mutable_extra_info();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 time_running_sec = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_time_running_sec(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientGetClientDetailsResponse_Game::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientGetClientDetailsResponse.Game)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string extra_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extra_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->extra_info().data(), static_cast<int>(this->extra_info().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientGetClientDetailsResponse.Game.extra_info");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_running_sec = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_time_running_sec(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_running_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientGetClientDetailsResponse.Game)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientGetClientDetailsResponse.Game)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientGetClientDetailsResponse_Game::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientGetClientDetailsResponse.Game)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional string extra_info = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extra_info().data(), static_cast<int>(this->extra_info().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientGetClientDetailsResponse.Game.extra_info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->extra_info(), output);
  }

  // optional uint32 time_running_sec = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time_running_sec(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientGetClientDetailsResponse.Game)
}

::google::protobuf::uint8* CMsgClientGetClientDetailsResponse_Game::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientGetClientDetailsResponse.Game)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional string extra_info = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extra_info().data(), static_cast<int>(this->extra_info().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientGetClientDetailsResponse.Game.extra_info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->extra_info(), target);
  }

  // optional uint32 time_running_sec = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time_running_sec(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientGetClientDetailsResponse.Game)
  return target;
}

size_t CMsgClientGetClientDetailsResponse_Game::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientGetClientDetailsResponse.Game)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string extra_info = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extra_info());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional uint32 time_running_sec = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_running_sec());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientGetClientDetailsResponse_Game::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientGetClientDetailsResponse.Game)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientGetClientDetailsResponse_Game* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientGetClientDetailsResponse_Game>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientGetClientDetailsResponse.Game)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientGetClientDetailsResponse.Game)
    MergeFrom(*source);
  }
}

void CMsgClientGetClientDetailsResponse_Game::MergeFrom(const CMsgClientGetClientDetailsResponse_Game& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientGetClientDetailsResponse.Game)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      extra_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extra_info_);
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_running_sec_ = from.time_running_sec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientGetClientDetailsResponse_Game::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientGetClientDetailsResponse.Game)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientGetClientDetailsResponse_Game::CopyFrom(const CMsgClientGetClientDetailsResponse_Game& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientGetClientDetailsResponse.Game)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetClientDetailsResponse_Game::IsInitialized() const {
  return true;
}

void CMsgClientGetClientDetailsResponse_Game::Swap(CMsgClientGetClientDetailsResponse_Game* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientGetClientDetailsResponse_Game::InternalSwap(CMsgClientGetClientDetailsResponse_Game* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  extra_info_.Swap(&other->extra_info_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(appid_, other->appid_);
  swap(time_running_sec_, other->time_running_sec_);
}

::google::protobuf::Metadata CMsgClientGetClientDetailsResponse_Game::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientGetClientDetailsResponse::InitAsDefaultInstance() {
}
class CMsgClientGetClientDetailsResponse::HasBitSetters {
 public:
  static void set_has_package_version(CMsgClientGetClientDetailsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_protocol_version(CMsgClientGetClientDetailsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_os(CMsgClientGetClientDetailsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_machine_name(CMsgClientGetClientDetailsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_ip_public(CMsgClientGetClientDetailsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_ip_private(CMsgClientGetClientDetailsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_bytes_available(CMsgClientGetClientDetailsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientGetClientDetailsResponse::kPackageVersionFieldNumber;
const int CMsgClientGetClientDetailsResponse::kProtocolVersionFieldNumber;
const int CMsgClientGetClientDetailsResponse::kOsFieldNumber;
const int CMsgClientGetClientDetailsResponse::kMachineNameFieldNumber;
const int CMsgClientGetClientDetailsResponse::kIpPublicFieldNumber;
const int CMsgClientGetClientDetailsResponse::kIpPrivateFieldNumber;
const int CMsgClientGetClientDetailsResponse::kBytesAvailableFieldNumber;
const int CMsgClientGetClientDetailsResponse::kGamesRunningFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientGetClientDetailsResponse::CMsgClientGetClientDetailsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientGetClientDetailsResponse)
}
CMsgClientGetClientDetailsResponse::CMsgClientGetClientDetailsResponse(const CMsgClientGetClientDetailsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      games_running_(from.games_running_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  os_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_os()) {
    os_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.os_);
  }
  machine_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_machine_name()) {
    machine_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_name_);
  }
  ip_public_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ip_public()) {
    ip_public_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_public_);
  }
  ip_private_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ip_private()) {
    ip_private_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_private_);
  }
  ::memcpy(&package_version_, &from.package_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&bytes_available_) -
    reinterpret_cast<char*>(&package_version_)) + sizeof(bytes_available_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientGetClientDetailsResponse)
}

void CMsgClientGetClientDetailsResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientGetClientDetailsResponse_steammessages_5fclientserver_2eproto.base);
  os_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  machine_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_public_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_private_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&package_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bytes_available_) -
      reinterpret_cast<char*>(&package_version_)) + sizeof(bytes_available_));
}

CMsgClientGetClientDetailsResponse::~CMsgClientGetClientDetailsResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientGetClientDetailsResponse)
  SharedDtor();
}

void CMsgClientGetClientDetailsResponse::SharedDtor() {
  os_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  machine_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_public_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_private_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientGetClientDetailsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientGetClientDetailsResponse& CMsgClientGetClientDetailsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientGetClientDetailsResponse_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientGetClientDetailsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientGetClientDetailsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  games_running_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      os_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      machine_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      ip_public_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      ip_private_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000070u) {
    ::memset(&package_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bytes_available_) -
        reinterpret_cast<char*>(&package_version_)) + sizeof(bytes_available_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientGetClientDetailsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientGetClientDetailsResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 package_version = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_package_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string os = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientGetClientDetailsResponse.os");
        object = msg->mutable_os();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string machine_name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientGetClientDetailsResponse.machine_name");
        object = msg->mutable_machine_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string ip_public = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientGetClientDetailsResponse.ip_public");
        object = msg->mutable_ip_public();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string ip_private = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientGetClientDetailsResponse.ip_private");
        object = msg->mutable_ip_private();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .proto.steam.CMsgClientGetClientDetailsResponse.Game games_running = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgClientGetClientDetailsResponse_Game::_InternalParse;
          object = msg->add_games_running();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 50 && (ptr += 1));
        break;
      }
      // optional uint64 bytes_available = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_bytes_available(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 protocol_version = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_protocol_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientGetClientDetailsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientGetClientDetailsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 package_version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_package_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &package_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string os = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->os().data(), static_cast<int>(this->os().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientGetClientDetailsResponse.os");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string machine_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->machine_name().data(), static_cast<int>(this->machine_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientGetClientDetailsResponse.machine_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ip_public = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip_public()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip_public().data(), static_cast<int>(this->ip_public().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientGetClientDetailsResponse.ip_public");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ip_private = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip_private()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip_private().data(), static_cast<int>(this->ip_private().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientGetClientDetailsResponse.ip_private");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgClientGetClientDetailsResponse.Game games_running = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_games_running()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 bytes_available = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_bytes_available(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_available_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 protocol_version = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_protocol_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protocol_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientGetClientDetailsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientGetClientDetailsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientGetClientDetailsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientGetClientDetailsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 package_version = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->package_version(), output);
  }

  // optional string os = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->os().data(), static_cast<int>(this->os().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientGetClientDetailsResponse.os");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->os(), output);
  }

  // optional string machine_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->machine_name().data(), static_cast<int>(this->machine_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientGetClientDetailsResponse.machine_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->machine_name(), output);
  }

  // optional string ip_public = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip_public().data(), static_cast<int>(this->ip_public().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientGetClientDetailsResponse.ip_public");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->ip_public(), output);
  }

  // optional string ip_private = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip_private().data(), static_cast<int>(this->ip_private().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientGetClientDetailsResponse.ip_private");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->ip_private(), output);
  }

  // repeated .proto.steam.CMsgClientGetClientDetailsResponse.Game games_running = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->games_running_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->games_running(static_cast<int>(i)),
      output);
  }

  // optional uint64 bytes_available = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->bytes_available(), output);
  }

  // optional uint32 protocol_version = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->protocol_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientGetClientDetailsResponse)
}

::google::protobuf::uint8* CMsgClientGetClientDetailsResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientGetClientDetailsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 package_version = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->package_version(), target);
  }

  // optional string os = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->os().data(), static_cast<int>(this->os().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientGetClientDetailsResponse.os");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->os(), target);
  }

  // optional string machine_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->machine_name().data(), static_cast<int>(this->machine_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientGetClientDetailsResponse.machine_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->machine_name(), target);
  }

  // optional string ip_public = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip_public().data(), static_cast<int>(this->ip_public().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientGetClientDetailsResponse.ip_public");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ip_public(), target);
  }

  // optional string ip_private = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip_private().data(), static_cast<int>(this->ip_private().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientGetClientDetailsResponse.ip_private");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ip_private(), target);
  }

  // repeated .proto.steam.CMsgClientGetClientDetailsResponse.Game games_running = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->games_running_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->games_running(static_cast<int>(i)), target);
  }

  // optional uint64 bytes_available = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->bytes_available(), target);
  }

  // optional uint32 protocol_version = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->protocol_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientGetClientDetailsResponse)
  return target;
}

size_t CMsgClientGetClientDetailsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientGetClientDetailsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientGetClientDetailsResponse.Game games_running = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->games_running_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->games_running(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string os = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os());
    }

    // optional string machine_name = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machine_name());
    }

    // optional string ip_public = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip_public());
    }

    // optional string ip_private = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip_private());
    }

    // optional uint32 package_version = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->package_version());
    }

    // optional uint32 protocol_version = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->protocol_version());
    }

    // optional uint64 bytes_available = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bytes_available());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientGetClientDetailsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientGetClientDetailsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientGetClientDetailsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientGetClientDetailsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientGetClientDetailsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientGetClientDetailsResponse)
    MergeFrom(*source);
  }
}

void CMsgClientGetClientDetailsResponse::MergeFrom(const CMsgClientGetClientDetailsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientGetClientDetailsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  games_running_.MergeFrom(from.games_running_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      os_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.os_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      machine_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      ip_public_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_public_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      ip_private_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_private_);
    }
    if (cached_has_bits & 0x00000010u) {
      package_version_ = from.package_version_;
    }
    if (cached_has_bits & 0x00000020u) {
      protocol_version_ = from.protocol_version_;
    }
    if (cached_has_bits & 0x00000040u) {
      bytes_available_ = from.bytes_available_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientGetClientDetailsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientGetClientDetailsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientGetClientDetailsResponse::CopyFrom(const CMsgClientGetClientDetailsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientGetClientDetailsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetClientDetailsResponse::IsInitialized() const {
  return true;
}

void CMsgClientGetClientDetailsResponse::Swap(CMsgClientGetClientDetailsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientGetClientDetailsResponse::InternalSwap(CMsgClientGetClientDetailsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&games_running_)->InternalSwap(CastToBase(&other->games_running_));
  os_.Swap(&other->os_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  machine_name_.Swap(&other->machine_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ip_public_.Swap(&other->ip_public_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ip_private_.Swap(&other->ip_private_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(package_version_, other->package_version_);
  swap(protocol_version_, other->protocol_version_);
  swap(bytes_available_, other->bytes_available_);
}

::google::protobuf::Metadata CMsgClientGetClientDetailsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientGetClientAppList::InitAsDefaultInstance() {
}
class CMsgClientGetClientAppList::HasBitSetters {
 public:
  static void set_has_media(CMsgClientGetClientAppList* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_tools(CMsgClientGetClientAppList* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_games(CMsgClientGetClientAppList* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_only_installed(CMsgClientGetClientAppList* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_only_changing(CMsgClientGetClientAppList* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_comics(CMsgClientGetClientAppList* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientGetClientAppList::kMediaFieldNumber;
const int CMsgClientGetClientAppList::kToolsFieldNumber;
const int CMsgClientGetClientAppList::kGamesFieldNumber;
const int CMsgClientGetClientAppList::kOnlyInstalledFieldNumber;
const int CMsgClientGetClientAppList::kOnlyChangingFieldNumber;
const int CMsgClientGetClientAppList::kComicsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientGetClientAppList::CMsgClientGetClientAppList()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientGetClientAppList)
}
CMsgClientGetClientAppList::CMsgClientGetClientAppList(const CMsgClientGetClientAppList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&media_, &from.media_,
    static_cast<size_t>(reinterpret_cast<char*>(&comics_) -
    reinterpret_cast<char*>(&media_)) + sizeof(comics_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientGetClientAppList)
}

void CMsgClientGetClientAppList::SharedCtor() {
  ::memset(&media_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&comics_) -
      reinterpret_cast<char*>(&media_)) + sizeof(comics_));
}

CMsgClientGetClientAppList::~CMsgClientGetClientAppList() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientGetClientAppList)
  SharedDtor();
}

void CMsgClientGetClientAppList::SharedDtor() {
}

void CMsgClientGetClientAppList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientGetClientAppList& CMsgClientGetClientAppList::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientGetClientAppList_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientGetClientAppList::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientGetClientAppList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&media_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&comics_) -
        reinterpret_cast<char*>(&media_)) + sizeof(comics_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientGetClientAppList::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientGetClientAppList*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool media = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_media(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool tools = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_tools(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool games = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_games(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool only_installed = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_only_installed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool only_changing = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_only_changing(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool comics = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_comics(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientGetClientAppList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientGetClientAppList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool media = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_media(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &media_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool tools = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_tools(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tools_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool games = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_games(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &games_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool only_installed = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_only_installed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &only_installed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool only_changing = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_only_changing(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &only_changing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool comics = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_comics(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &comics_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientGetClientAppList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientGetClientAppList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientGetClientAppList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientGetClientAppList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool media = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->media(), output);
  }

  // optional bool tools = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->tools(), output);
  }

  // optional bool games = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->games(), output);
  }

  // optional bool only_installed = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->only_installed(), output);
  }

  // optional bool only_changing = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->only_changing(), output);
  }

  // optional bool comics = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->comics(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientGetClientAppList)
}

::google::protobuf::uint8* CMsgClientGetClientAppList::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientGetClientAppList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool media = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->media(), target);
  }

  // optional bool tools = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->tools(), target);
  }

  // optional bool games = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->games(), target);
  }

  // optional bool only_installed = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->only_installed(), target);
  }

  // optional bool only_changing = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->only_changing(), target);
  }

  // optional bool comics = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->comics(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientGetClientAppList)
  return target;
}

size_t CMsgClientGetClientAppList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientGetClientAppList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bool media = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool tools = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool games = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool only_installed = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool only_changing = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool comics = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientGetClientAppList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientGetClientAppList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientGetClientAppList* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientGetClientAppList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientGetClientAppList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientGetClientAppList)
    MergeFrom(*source);
  }
}

void CMsgClientGetClientAppList::MergeFrom(const CMsgClientGetClientAppList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientGetClientAppList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      media_ = from.media_;
    }
    if (cached_has_bits & 0x00000002u) {
      tools_ = from.tools_;
    }
    if (cached_has_bits & 0x00000004u) {
      games_ = from.games_;
    }
    if (cached_has_bits & 0x00000008u) {
      only_installed_ = from.only_installed_;
    }
    if (cached_has_bits & 0x00000010u) {
      only_changing_ = from.only_changing_;
    }
    if (cached_has_bits & 0x00000020u) {
      comics_ = from.comics_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientGetClientAppList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientGetClientAppList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientGetClientAppList::CopyFrom(const CMsgClientGetClientAppList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientGetClientAppList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetClientAppList::IsInitialized() const {
  return true;
}

void CMsgClientGetClientAppList::Swap(CMsgClientGetClientAppList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientGetClientAppList::InternalSwap(CMsgClientGetClientAppList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(media_, other->media_);
  swap(tools_, other->tools_);
  swap(games_, other->games_);
  swap(only_installed_, other->only_installed_);
  swap(only_changing_, other->only_changing_);
  swap(comics_, other->comics_);
}

::google::protobuf::Metadata CMsgClientGetClientAppList::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientGetClientAppListResponse_App_DLC::InitAsDefaultInstance() {
}
class CMsgClientGetClientAppListResponse_App_DLC::HasBitSetters {
 public:
  static void set_has_appid(CMsgClientGetClientAppListResponse_App_DLC* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_installed(CMsgClientGetClientAppListResponse_App_DLC* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientGetClientAppListResponse_App_DLC::kAppidFieldNumber;
const int CMsgClientGetClientAppListResponse_App_DLC::kInstalledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientGetClientAppListResponse_App_DLC::CMsgClientGetClientAppListResponse_App_DLC()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientGetClientAppListResponse.App.DLC)
}
CMsgClientGetClientAppListResponse_App_DLC::CMsgClientGetClientAppListResponse_App_DLC(const CMsgClientGetClientAppListResponse_App_DLC& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&installed_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(installed_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientGetClientAppListResponse.App.DLC)
}

void CMsgClientGetClientAppListResponse_App_DLC::SharedCtor() {
  ::memset(&appid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&installed_) -
      reinterpret_cast<char*>(&appid_)) + sizeof(installed_));
}

CMsgClientGetClientAppListResponse_App_DLC::~CMsgClientGetClientAppListResponse_App_DLC() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientGetClientAppListResponse.App.DLC)
  SharedDtor();
}

void CMsgClientGetClientAppListResponse_App_DLC::SharedDtor() {
}

void CMsgClientGetClientAppListResponse_App_DLC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientGetClientAppListResponse_App_DLC& CMsgClientGetClientAppListResponse_App_DLC::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientGetClientAppListResponse_App_DLC_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientGetClientAppListResponse_App_DLC::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientGetClientAppListResponse.App.DLC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&installed_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(installed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientGetClientAppListResponse_App_DLC::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientGetClientAppListResponse_App_DLC*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool installed = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_installed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientGetClientAppListResponse_App_DLC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientGetClientAppListResponse.App.DLC)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool installed = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_installed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &installed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientGetClientAppListResponse.App.DLC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientGetClientAppListResponse.App.DLC)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientGetClientAppListResponse_App_DLC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientGetClientAppListResponse.App.DLC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional bool installed = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->installed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientGetClientAppListResponse.App.DLC)
}

::google::protobuf::uint8* CMsgClientGetClientAppListResponse_App_DLC::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientGetClientAppListResponse.App.DLC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional bool installed = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->installed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientGetClientAppListResponse.App.DLC)
  return target;
}

size_t CMsgClientGetClientAppListResponse_App_DLC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientGetClientAppListResponse.App.DLC)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional bool installed = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientGetClientAppListResponse_App_DLC::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientGetClientAppListResponse.App.DLC)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientGetClientAppListResponse_App_DLC* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientGetClientAppListResponse_App_DLC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientGetClientAppListResponse.App.DLC)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientGetClientAppListResponse.App.DLC)
    MergeFrom(*source);
  }
}

void CMsgClientGetClientAppListResponse_App_DLC::MergeFrom(const CMsgClientGetClientAppListResponse_App_DLC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientGetClientAppListResponse.App.DLC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      installed_ = from.installed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientGetClientAppListResponse_App_DLC::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientGetClientAppListResponse.App.DLC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientGetClientAppListResponse_App_DLC::CopyFrom(const CMsgClientGetClientAppListResponse_App_DLC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientGetClientAppListResponse.App.DLC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetClientAppListResponse_App_DLC::IsInitialized() const {
  return true;
}

void CMsgClientGetClientAppListResponse_App_DLC::Swap(CMsgClientGetClientAppListResponse_App_DLC* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientGetClientAppListResponse_App_DLC::InternalSwap(CMsgClientGetClientAppListResponse_App_DLC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(appid_, other->appid_);
  swap(installed_, other->installed_);
}

::google::protobuf::Metadata CMsgClientGetClientAppListResponse_App_DLC::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientGetClientAppListResponse_App::InitAsDefaultInstance() {
}
class CMsgClientGetClientAppListResponse_App::HasBitSetters {
 public:
  static void set_has_appid(CMsgClientGetClientAppListResponse_App* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_category(CMsgClientGetClientAppListResponse_App* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_app_type(CMsgClientGetClientAppListResponse_App* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_favorite(CMsgClientGetClientAppListResponse_App* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_installed(CMsgClientGetClientAppListResponse_App* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_auto_update(CMsgClientGetClientAppListResponse_App* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_bytes_downloaded(CMsgClientGetClientAppListResponse_App* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_bytes_needed(CMsgClientGetClientAppListResponse_App* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_bytes_download_rate(CMsgClientGetClientAppListResponse_App* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_download_paused(CMsgClientGetClientAppListResponse_App* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_num_downloading(CMsgClientGetClientAppListResponse_App* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_num_paused(CMsgClientGetClientAppListResponse_App* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_changing(CMsgClientGetClientAppListResponse_App* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_available_on_platform(CMsgClientGetClientAppListResponse_App* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientGetClientAppListResponse_App::kAppidFieldNumber;
const int CMsgClientGetClientAppListResponse_App::kCategoryFieldNumber;
const int CMsgClientGetClientAppListResponse_App::kAppTypeFieldNumber;
const int CMsgClientGetClientAppListResponse_App::kFavoriteFieldNumber;
const int CMsgClientGetClientAppListResponse_App::kInstalledFieldNumber;
const int CMsgClientGetClientAppListResponse_App::kAutoUpdateFieldNumber;
const int CMsgClientGetClientAppListResponse_App::kBytesDownloadedFieldNumber;
const int CMsgClientGetClientAppListResponse_App::kBytesNeededFieldNumber;
const int CMsgClientGetClientAppListResponse_App::kBytesDownloadRateFieldNumber;
const int CMsgClientGetClientAppListResponse_App::kDownloadPausedFieldNumber;
const int CMsgClientGetClientAppListResponse_App::kNumDownloadingFieldNumber;
const int CMsgClientGetClientAppListResponse_App::kNumPausedFieldNumber;
const int CMsgClientGetClientAppListResponse_App::kChangingFieldNumber;
const int CMsgClientGetClientAppListResponse_App::kAvailableOnPlatformFieldNumber;
const int CMsgClientGetClientAppListResponse_App::kDlcsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientGetClientAppListResponse_App::CMsgClientGetClientAppListResponse_App()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientGetClientAppListResponse.App)
}
CMsgClientGetClientAppListResponse_App::CMsgClientGetClientAppListResponse_App(const CMsgClientGetClientAppListResponse_App& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      dlcs_(from.dlcs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  category_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_category()) {
    category_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.category_);
  }
  app_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_app_type()) {
    app_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_type_);
  }
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&available_on_platform_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(available_on_platform_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientGetClientAppListResponse.App)
}

void CMsgClientGetClientAppListResponse_App::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientGetClientAppListResponse_App_steammessages_5fclientserver_2eproto.base);
  category_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&appid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&available_on_platform_) -
      reinterpret_cast<char*>(&appid_)) + sizeof(available_on_platform_));
}

CMsgClientGetClientAppListResponse_App::~CMsgClientGetClientAppListResponse_App() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientGetClientAppListResponse.App)
  SharedDtor();
}

void CMsgClientGetClientAppListResponse_App::SharedDtor() {
  category_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientGetClientAppListResponse_App::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientGetClientAppListResponse_App& CMsgClientGetClientAppListResponse_App::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientGetClientAppListResponse_App_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientGetClientAppListResponse_App::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientGetClientAppListResponse.App)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dlcs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      category_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      app_type_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bytes_downloaded_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(bytes_downloaded_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&bytes_needed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&available_on_platform_) -
        reinterpret_cast<char*>(&bytes_needed_)) + sizeof(available_on_platform_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientGetClientAppListResponse_App::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientGetClientAppListResponse_App*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string category = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientGetClientAppListResponse.App.category");
        object = msg->mutable_category();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool favorite = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_favorite(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool installed = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_installed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool auto_update = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_auto_update(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 bytes_downloaded = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_bytes_downloaded(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 bytes_needed = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_bytes_needed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 bytes_download_rate = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_bytes_download_rate(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.steam.CMsgClientGetClientAppListResponse.App.DLC dlcs = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgClientGetClientAppListResponse_App_DLC::_InternalParse;
          object = msg->add_dlcs();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 74 && (ptr += 1));
        break;
      }
      // optional string app_type = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientGetClientAppListResponse.App.app_type");
        object = msg->mutable_app_type();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool download_paused = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_download_paused(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 num_downloading = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_num_downloading(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 num_paused = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_num_paused(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool changing = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_changing(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool available_on_platform = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_available_on_platform(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientGetClientAppListResponse_App::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientGetClientAppListResponse.App)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string category = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_category()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->category().data(), static_cast<int>(this->category().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientGetClientAppListResponse.App.category");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool favorite = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_favorite(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &favorite_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool installed = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_installed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &installed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool auto_update = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_auto_update(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_update_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 bytes_downloaded = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_bytes_downloaded(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_downloaded_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 bytes_needed = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_bytes_needed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_needed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bytes_download_rate = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_bytes_download_rate(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bytes_download_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgClientGetClientAppListResponse.App.DLC dlcs = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_dlcs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string app_type = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->app_type().data(), static_cast<int>(this->app_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientGetClientAppListResponse.App.app_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool download_paused = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_download_paused(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &download_paused_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_downloading = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_num_downloading(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_downloading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_paused = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {
          HasBitSetters::set_has_num_paused(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_paused_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool changing = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {
          HasBitSetters::set_has_changing(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &changing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool available_on_platform = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (120 & 0xFF)) {
          HasBitSetters::set_has_available_on_platform(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &available_on_platform_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientGetClientAppListResponse.App)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientGetClientAppListResponse.App)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientGetClientAppListResponse_App::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientGetClientAppListResponse.App)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional string category = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->category().data(), static_cast<int>(this->category().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientGetClientAppListResponse.App.category");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->category(), output);
  }

  // optional bool favorite = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->favorite(), output);
  }

  // optional bool installed = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->installed(), output);
  }

  // optional bool auto_update = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->auto_update(), output);
  }

  // optional uint64 bytes_downloaded = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->bytes_downloaded(), output);
  }

  // optional uint64 bytes_needed = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->bytes_needed(), output);
  }

  // optional uint32 bytes_download_rate = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->bytes_download_rate(), output);
  }

  // repeated .proto.steam.CMsgClientGetClientAppListResponse.App.DLC dlcs = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dlcs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9,
      this->dlcs(static_cast<int>(i)),
      output);
  }

  // optional string app_type = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_type().data(), static_cast<int>(this->app_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientGetClientAppListResponse.App.app_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->app_type(), output);
  }

  // optional bool download_paused = 11;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->download_paused(), output);
  }

  // optional uint32 num_downloading = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->num_downloading(), output);
  }

  // optional uint32 num_paused = 13;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->num_paused(), output);
  }

  // optional bool changing = 14;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->changing(), output);
  }

  // optional bool available_on_platform = 15;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->available_on_platform(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientGetClientAppListResponse.App)
}

::google::protobuf::uint8* CMsgClientGetClientAppListResponse_App::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientGetClientAppListResponse.App)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional string category = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->category().data(), static_cast<int>(this->category().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientGetClientAppListResponse.App.category");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->category(), target);
  }

  // optional bool favorite = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->favorite(), target);
  }

  // optional bool installed = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->installed(), target);
  }

  // optional bool auto_update = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->auto_update(), target);
  }

  // optional uint64 bytes_downloaded = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->bytes_downloaded(), target);
  }

  // optional uint64 bytes_needed = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->bytes_needed(), target);
  }

  // optional uint32 bytes_download_rate = 8;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->bytes_download_rate(), target);
  }

  // repeated .proto.steam.CMsgClientGetClientAppListResponse.App.DLC dlcs = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dlcs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->dlcs(static_cast<int>(i)), target);
  }

  // optional string app_type = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_type().data(), static_cast<int>(this->app_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientGetClientAppListResponse.App.app_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->app_type(), target);
  }

  // optional bool download_paused = 11;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->download_paused(), target);
  }

  // optional uint32 num_downloading = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->num_downloading(), target);
  }

  // optional uint32 num_paused = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->num_paused(), target);
  }

  // optional bool changing = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->changing(), target);
  }

  // optional bool available_on_platform = 15;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->available_on_platform(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientGetClientAppListResponse.App)
  return target;
}

size_t CMsgClientGetClientAppListResponse_App::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientGetClientAppListResponse.App)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientGetClientAppListResponse.App.DLC dlcs = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->dlcs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->dlcs(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string category = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->category());
    }

    // optional string app_type = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_type());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional bool favorite = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool installed = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool auto_update = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool download_paused = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional uint64 bytes_downloaded = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bytes_downloaded());
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional uint64 bytes_needed = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bytes_needed());
    }

    // optional uint32 bytes_download_rate = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bytes_download_rate());
    }

    // optional uint32 num_downloading = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_downloading());
    }

    // optional uint32 num_paused = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_paused());
    }

    // optional bool changing = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool available_on_platform = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientGetClientAppListResponse_App::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientGetClientAppListResponse.App)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientGetClientAppListResponse_App* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientGetClientAppListResponse_App>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientGetClientAppListResponse.App)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientGetClientAppListResponse.App)
    MergeFrom(*source);
  }
}

void CMsgClientGetClientAppListResponse_App::MergeFrom(const CMsgClientGetClientAppListResponse_App& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientGetClientAppListResponse.App)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dlcs_.MergeFrom(from.dlcs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      category_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.category_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      app_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_type_);
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000008u) {
      favorite_ = from.favorite_;
    }
    if (cached_has_bits & 0x00000010u) {
      installed_ = from.installed_;
    }
    if (cached_has_bits & 0x00000020u) {
      auto_update_ = from.auto_update_;
    }
    if (cached_has_bits & 0x00000040u) {
      download_paused_ = from.download_paused_;
    }
    if (cached_has_bits & 0x00000080u) {
      bytes_downloaded_ = from.bytes_downloaded_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      bytes_needed_ = from.bytes_needed_;
    }
    if (cached_has_bits & 0x00000200u) {
      bytes_download_rate_ = from.bytes_download_rate_;
    }
    if (cached_has_bits & 0x00000400u) {
      num_downloading_ = from.num_downloading_;
    }
    if (cached_has_bits & 0x00000800u) {
      num_paused_ = from.num_paused_;
    }
    if (cached_has_bits & 0x00001000u) {
      changing_ = from.changing_;
    }
    if (cached_has_bits & 0x00002000u) {
      available_on_platform_ = from.available_on_platform_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientGetClientAppListResponse_App::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientGetClientAppListResponse.App)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientGetClientAppListResponse_App::CopyFrom(const CMsgClientGetClientAppListResponse_App& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientGetClientAppListResponse.App)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetClientAppListResponse_App::IsInitialized() const {
  return true;
}

void CMsgClientGetClientAppListResponse_App::Swap(CMsgClientGetClientAppListResponse_App* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientGetClientAppListResponse_App::InternalSwap(CMsgClientGetClientAppListResponse_App* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&dlcs_)->InternalSwap(CastToBase(&other->dlcs_));
  category_.Swap(&other->category_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  app_type_.Swap(&other->app_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(appid_, other->appid_);
  swap(favorite_, other->favorite_);
  swap(installed_, other->installed_);
  swap(auto_update_, other->auto_update_);
  swap(download_paused_, other->download_paused_);
  swap(bytes_downloaded_, other->bytes_downloaded_);
  swap(bytes_needed_, other->bytes_needed_);
  swap(bytes_download_rate_, other->bytes_download_rate_);
  swap(num_downloading_, other->num_downloading_);
  swap(num_paused_, other->num_paused_);
  swap(changing_, other->changing_);
  swap(available_on_platform_, other->available_on_platform_);
}

::google::protobuf::Metadata CMsgClientGetClientAppListResponse_App::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientGetClientAppListResponse::InitAsDefaultInstance() {
}
class CMsgClientGetClientAppListResponse::HasBitSetters {
 public:
  static void set_has_bytes_available(CMsgClientGetClientAppListResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientGetClientAppListResponse::kAppsFieldNumber;
const int CMsgClientGetClientAppListResponse::kBytesAvailableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientGetClientAppListResponse::CMsgClientGetClientAppListResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientGetClientAppListResponse)
}
CMsgClientGetClientAppListResponse::CMsgClientGetClientAppListResponse(const CMsgClientGetClientAppListResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      apps_(from.apps_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bytes_available_ = from.bytes_available_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientGetClientAppListResponse)
}

void CMsgClientGetClientAppListResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientGetClientAppListResponse_steammessages_5fclientserver_2eproto.base);
  bytes_available_ = PROTOBUF_ULONGLONG(0);
}

CMsgClientGetClientAppListResponse::~CMsgClientGetClientAppListResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientGetClientAppListResponse)
  SharedDtor();
}

void CMsgClientGetClientAppListResponse::SharedDtor() {
}

void CMsgClientGetClientAppListResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientGetClientAppListResponse& CMsgClientGetClientAppListResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientGetClientAppListResponse_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientGetClientAppListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientGetClientAppListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  apps_.Clear();
  bytes_available_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientGetClientAppListResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientGetClientAppListResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.steam.CMsgClientGetClientAppListResponse.App apps = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgClientGetClientAppListResponse_App::_InternalParse;
          object = msg->add_apps();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // optional uint64 bytes_available = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_bytes_available(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientGetClientAppListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientGetClientAppListResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CMsgClientGetClientAppListResponse.App apps = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_apps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 bytes_available = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_bytes_available(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_available_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientGetClientAppListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientGetClientAppListResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientGetClientAppListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientGetClientAppListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientGetClientAppListResponse.App apps = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->apps_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->apps(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 bytes_available = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->bytes_available(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientGetClientAppListResponse)
}

::google::protobuf::uint8* CMsgClientGetClientAppListResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientGetClientAppListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientGetClientAppListResponse.App apps = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->apps_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->apps(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 bytes_available = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->bytes_available(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientGetClientAppListResponse)
  return target;
}

size_t CMsgClientGetClientAppListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientGetClientAppListResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientGetClientAppListResponse.App apps = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->apps_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->apps(static_cast<int>(i)));
    }
  }

  // optional uint64 bytes_available = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->bytes_available());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientGetClientAppListResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientGetClientAppListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientGetClientAppListResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientGetClientAppListResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientGetClientAppListResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientGetClientAppListResponse)
    MergeFrom(*source);
  }
}

void CMsgClientGetClientAppListResponse::MergeFrom(const CMsgClientGetClientAppListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientGetClientAppListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  apps_.MergeFrom(from.apps_);
  if (from.has_bytes_available()) {
    set_bytes_available(from.bytes_available());
  }
}

void CMsgClientGetClientAppListResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientGetClientAppListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientGetClientAppListResponse::CopyFrom(const CMsgClientGetClientAppListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientGetClientAppListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetClientAppListResponse::IsInitialized() const {
  return true;
}

void CMsgClientGetClientAppListResponse::Swap(CMsgClientGetClientAppListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientGetClientAppListResponse::InternalSwap(CMsgClientGetClientAppListResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&apps_)->InternalSwap(CastToBase(&other->apps_));
  swap(bytes_available_, other->bytes_available_);
}

::google::protobuf::Metadata CMsgClientGetClientAppListResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientInstallClientApp::InitAsDefaultInstance() {
}
class CMsgClientInstallClientApp::HasBitSetters {
 public:
  static void set_has_appid(CMsgClientInstallClientApp* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientInstallClientApp::kAppidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientInstallClientApp::CMsgClientInstallClientApp()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientInstallClientApp)
}
CMsgClientInstallClientApp::CMsgClientInstallClientApp(const CMsgClientInstallClientApp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientInstallClientApp)
}

void CMsgClientInstallClientApp::SharedCtor() {
  appid_ = 0u;
}

CMsgClientInstallClientApp::~CMsgClientInstallClientApp() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientInstallClientApp)
  SharedDtor();
}

void CMsgClientInstallClientApp::SharedDtor() {
}

void CMsgClientInstallClientApp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientInstallClientApp& CMsgClientInstallClientApp::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientInstallClientApp_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientInstallClientApp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientInstallClientApp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientInstallClientApp::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientInstallClientApp*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientInstallClientApp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientInstallClientApp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientInstallClientApp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientInstallClientApp)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientInstallClientApp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientInstallClientApp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientInstallClientApp)
}

::google::protobuf::uint8* CMsgClientInstallClientApp::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientInstallClientApp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientInstallClientApp)
  return target;
}

size_t CMsgClientInstallClientApp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientInstallClientApp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 appid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->appid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientInstallClientApp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientInstallClientApp)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientInstallClientApp* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientInstallClientApp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientInstallClientApp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientInstallClientApp)
    MergeFrom(*source);
  }
}

void CMsgClientInstallClientApp::MergeFrom(const CMsgClientInstallClientApp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientInstallClientApp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_appid()) {
    set_appid(from.appid());
  }
}

void CMsgClientInstallClientApp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientInstallClientApp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientInstallClientApp::CopyFrom(const CMsgClientInstallClientApp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientInstallClientApp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientInstallClientApp::IsInitialized() const {
  return true;
}

void CMsgClientInstallClientApp::Swap(CMsgClientInstallClientApp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientInstallClientApp::InternalSwap(CMsgClientInstallClientApp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(appid_, other->appid_);
}

::google::protobuf::Metadata CMsgClientInstallClientApp::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientInstallClientAppResponse::InitAsDefaultInstance() {
}
class CMsgClientInstallClientAppResponse::HasBitSetters {
 public:
  static void set_has_result(CMsgClientInstallClientAppResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientInstallClientAppResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientInstallClientAppResponse::CMsgClientInstallClientAppResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientInstallClientAppResponse)
}
CMsgClientInstallClientAppResponse::CMsgClientInstallClientAppResponse(const CMsgClientInstallClientAppResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientInstallClientAppResponse)
}

void CMsgClientInstallClientAppResponse::SharedCtor() {
  result_ = 0u;
}

CMsgClientInstallClientAppResponse::~CMsgClientInstallClientAppResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientInstallClientAppResponse)
  SharedDtor();
}

void CMsgClientInstallClientAppResponse::SharedDtor() {
}

void CMsgClientInstallClientAppResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientInstallClientAppResponse& CMsgClientInstallClientAppResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientInstallClientAppResponse_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientInstallClientAppResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientInstallClientAppResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientInstallClientAppResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientInstallClientAppResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 result = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_result(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientInstallClientAppResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientInstallClientAppResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_result(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientInstallClientAppResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientInstallClientAppResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientInstallClientAppResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientInstallClientAppResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientInstallClientAppResponse)
}

::google::protobuf::uint8* CMsgClientInstallClientAppResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientInstallClientAppResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientInstallClientAppResponse)
  return target;
}

size_t CMsgClientInstallClientAppResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientInstallClientAppResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 result = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientInstallClientAppResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientInstallClientAppResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientInstallClientAppResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientInstallClientAppResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientInstallClientAppResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientInstallClientAppResponse)
    MergeFrom(*source);
  }
}

void CMsgClientInstallClientAppResponse::MergeFrom(const CMsgClientInstallClientAppResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientInstallClientAppResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgClientInstallClientAppResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientInstallClientAppResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientInstallClientAppResponse::CopyFrom(const CMsgClientInstallClientAppResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientInstallClientAppResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientInstallClientAppResponse::IsInitialized() const {
  return true;
}

void CMsgClientInstallClientAppResponse::Swap(CMsgClientInstallClientAppResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientInstallClientAppResponse::InternalSwap(CMsgClientInstallClientAppResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::google::protobuf::Metadata CMsgClientInstallClientAppResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientUninstallClientApp::InitAsDefaultInstance() {
}
class CMsgClientUninstallClientApp::HasBitSetters {
 public:
  static void set_has_appid(CMsgClientUninstallClientApp* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientUninstallClientApp::kAppidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientUninstallClientApp::CMsgClientUninstallClientApp()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientUninstallClientApp)
}
CMsgClientUninstallClientApp::CMsgClientUninstallClientApp(const CMsgClientUninstallClientApp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientUninstallClientApp)
}

void CMsgClientUninstallClientApp::SharedCtor() {
  appid_ = 0u;
}

CMsgClientUninstallClientApp::~CMsgClientUninstallClientApp() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientUninstallClientApp)
  SharedDtor();
}

void CMsgClientUninstallClientApp::SharedDtor() {
}

void CMsgClientUninstallClientApp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientUninstallClientApp& CMsgClientUninstallClientApp::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientUninstallClientApp_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientUninstallClientApp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientUninstallClientApp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientUninstallClientApp::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientUninstallClientApp*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientUninstallClientApp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientUninstallClientApp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientUninstallClientApp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientUninstallClientApp)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientUninstallClientApp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientUninstallClientApp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientUninstallClientApp)
}

::google::protobuf::uint8* CMsgClientUninstallClientApp::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientUninstallClientApp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientUninstallClientApp)
  return target;
}

size_t CMsgClientUninstallClientApp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientUninstallClientApp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 appid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->appid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientUninstallClientApp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientUninstallClientApp)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUninstallClientApp* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientUninstallClientApp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientUninstallClientApp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientUninstallClientApp)
    MergeFrom(*source);
  }
}

void CMsgClientUninstallClientApp::MergeFrom(const CMsgClientUninstallClientApp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientUninstallClientApp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_appid()) {
    set_appid(from.appid());
  }
}

void CMsgClientUninstallClientApp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientUninstallClientApp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUninstallClientApp::CopyFrom(const CMsgClientUninstallClientApp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientUninstallClientApp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUninstallClientApp::IsInitialized() const {
  return true;
}

void CMsgClientUninstallClientApp::Swap(CMsgClientUninstallClientApp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientUninstallClientApp::InternalSwap(CMsgClientUninstallClientApp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(appid_, other->appid_);
}

::google::protobuf::Metadata CMsgClientUninstallClientApp::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientUninstallClientAppResponse::InitAsDefaultInstance() {
}
class CMsgClientUninstallClientAppResponse::HasBitSetters {
 public:
  static void set_has_result(CMsgClientUninstallClientAppResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientUninstallClientAppResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientUninstallClientAppResponse::CMsgClientUninstallClientAppResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientUninstallClientAppResponse)
}
CMsgClientUninstallClientAppResponse::CMsgClientUninstallClientAppResponse(const CMsgClientUninstallClientAppResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientUninstallClientAppResponse)
}

void CMsgClientUninstallClientAppResponse::SharedCtor() {
  result_ = 0u;
}

CMsgClientUninstallClientAppResponse::~CMsgClientUninstallClientAppResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientUninstallClientAppResponse)
  SharedDtor();
}

void CMsgClientUninstallClientAppResponse::SharedDtor() {
}

void CMsgClientUninstallClientAppResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientUninstallClientAppResponse& CMsgClientUninstallClientAppResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientUninstallClientAppResponse_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientUninstallClientAppResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientUninstallClientAppResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientUninstallClientAppResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientUninstallClientAppResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 result = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_result(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientUninstallClientAppResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientUninstallClientAppResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_result(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientUninstallClientAppResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientUninstallClientAppResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientUninstallClientAppResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientUninstallClientAppResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientUninstallClientAppResponse)
}

::google::protobuf::uint8* CMsgClientUninstallClientAppResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientUninstallClientAppResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientUninstallClientAppResponse)
  return target;
}

size_t CMsgClientUninstallClientAppResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientUninstallClientAppResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 result = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientUninstallClientAppResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientUninstallClientAppResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUninstallClientAppResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientUninstallClientAppResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientUninstallClientAppResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientUninstallClientAppResponse)
    MergeFrom(*source);
  }
}

void CMsgClientUninstallClientAppResponse::MergeFrom(const CMsgClientUninstallClientAppResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientUninstallClientAppResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgClientUninstallClientAppResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientUninstallClientAppResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUninstallClientAppResponse::CopyFrom(const CMsgClientUninstallClientAppResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientUninstallClientAppResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUninstallClientAppResponse::IsInitialized() const {
  return true;
}

void CMsgClientUninstallClientAppResponse::Swap(CMsgClientUninstallClientAppResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientUninstallClientAppResponse::InternalSwap(CMsgClientUninstallClientAppResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::google::protobuf::Metadata CMsgClientUninstallClientAppResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientSetClientAppUpdateState::InitAsDefaultInstance() {
}
class CMsgClientSetClientAppUpdateState::HasBitSetters {
 public:
  static void set_has_appid(CMsgClientSetClientAppUpdateState* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_update(CMsgClientSetClientAppUpdateState* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientSetClientAppUpdateState::kAppidFieldNumber;
const int CMsgClientSetClientAppUpdateState::kUpdateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientSetClientAppUpdateState::CMsgClientSetClientAppUpdateState()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientSetClientAppUpdateState)
}
CMsgClientSetClientAppUpdateState::CMsgClientSetClientAppUpdateState(const CMsgClientSetClientAppUpdateState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&update_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(update_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientSetClientAppUpdateState)
}

void CMsgClientSetClientAppUpdateState::SharedCtor() {
  ::memset(&appid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_) -
      reinterpret_cast<char*>(&appid_)) + sizeof(update_));
}

CMsgClientSetClientAppUpdateState::~CMsgClientSetClientAppUpdateState() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientSetClientAppUpdateState)
  SharedDtor();
}

void CMsgClientSetClientAppUpdateState::SharedDtor() {
}

void CMsgClientSetClientAppUpdateState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientSetClientAppUpdateState& CMsgClientSetClientAppUpdateState::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientSetClientAppUpdateState_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientSetClientAppUpdateState::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientSetClientAppUpdateState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&update_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(update_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientSetClientAppUpdateState::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientSetClientAppUpdateState*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool update = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_update(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientSetClientAppUpdateState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientSetClientAppUpdateState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool update = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_update(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &update_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientSetClientAppUpdateState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientSetClientAppUpdateState)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientSetClientAppUpdateState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientSetClientAppUpdateState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional bool update = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->update(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientSetClientAppUpdateState)
}

::google::protobuf::uint8* CMsgClientSetClientAppUpdateState::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientSetClientAppUpdateState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional bool update = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->update(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientSetClientAppUpdateState)
  return target;
}

size_t CMsgClientSetClientAppUpdateState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientSetClientAppUpdateState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional bool update = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientSetClientAppUpdateState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientSetClientAppUpdateState)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientSetClientAppUpdateState* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientSetClientAppUpdateState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientSetClientAppUpdateState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientSetClientAppUpdateState)
    MergeFrom(*source);
  }
}

void CMsgClientSetClientAppUpdateState::MergeFrom(const CMsgClientSetClientAppUpdateState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientSetClientAppUpdateState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      update_ = from.update_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientSetClientAppUpdateState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientSetClientAppUpdateState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientSetClientAppUpdateState::CopyFrom(const CMsgClientSetClientAppUpdateState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientSetClientAppUpdateState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientSetClientAppUpdateState::IsInitialized() const {
  return true;
}

void CMsgClientSetClientAppUpdateState::Swap(CMsgClientSetClientAppUpdateState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientSetClientAppUpdateState::InternalSwap(CMsgClientSetClientAppUpdateState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(appid_, other->appid_);
  swap(update_, other->update_);
}

::google::protobuf::Metadata CMsgClientSetClientAppUpdateState::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientSetClientAppUpdateStateResponse::InitAsDefaultInstance() {
}
class CMsgClientSetClientAppUpdateStateResponse::HasBitSetters {
 public:
  static void set_has_result(CMsgClientSetClientAppUpdateStateResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientSetClientAppUpdateStateResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientSetClientAppUpdateStateResponse::CMsgClientSetClientAppUpdateStateResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientSetClientAppUpdateStateResponse)
}
CMsgClientSetClientAppUpdateStateResponse::CMsgClientSetClientAppUpdateStateResponse(const CMsgClientSetClientAppUpdateStateResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientSetClientAppUpdateStateResponse)
}

void CMsgClientSetClientAppUpdateStateResponse::SharedCtor() {
  result_ = 0u;
}

CMsgClientSetClientAppUpdateStateResponse::~CMsgClientSetClientAppUpdateStateResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientSetClientAppUpdateStateResponse)
  SharedDtor();
}

void CMsgClientSetClientAppUpdateStateResponse::SharedDtor() {
}

void CMsgClientSetClientAppUpdateStateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientSetClientAppUpdateStateResponse& CMsgClientSetClientAppUpdateStateResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientSetClientAppUpdateStateResponse_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientSetClientAppUpdateStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientSetClientAppUpdateStateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientSetClientAppUpdateStateResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientSetClientAppUpdateStateResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 result = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_result(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientSetClientAppUpdateStateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientSetClientAppUpdateStateResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_result(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientSetClientAppUpdateStateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientSetClientAppUpdateStateResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientSetClientAppUpdateStateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientSetClientAppUpdateStateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientSetClientAppUpdateStateResponse)
}

::google::protobuf::uint8* CMsgClientSetClientAppUpdateStateResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientSetClientAppUpdateStateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientSetClientAppUpdateStateResponse)
  return target;
}

size_t CMsgClientSetClientAppUpdateStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientSetClientAppUpdateStateResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 result = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientSetClientAppUpdateStateResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientSetClientAppUpdateStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientSetClientAppUpdateStateResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientSetClientAppUpdateStateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientSetClientAppUpdateStateResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientSetClientAppUpdateStateResponse)
    MergeFrom(*source);
  }
}

void CMsgClientSetClientAppUpdateStateResponse::MergeFrom(const CMsgClientSetClientAppUpdateStateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientSetClientAppUpdateStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgClientSetClientAppUpdateStateResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientSetClientAppUpdateStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientSetClientAppUpdateStateResponse::CopyFrom(const CMsgClientSetClientAppUpdateStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientSetClientAppUpdateStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientSetClientAppUpdateStateResponse::IsInitialized() const {
  return true;
}

void CMsgClientSetClientAppUpdateStateResponse::Swap(CMsgClientSetClientAppUpdateStateResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientSetClientAppUpdateStateResponse::InternalSwap(CMsgClientSetClientAppUpdateStateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::google::protobuf::Metadata CMsgClientSetClientAppUpdateStateResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientUFSUploadFileRequest::InitAsDefaultInstance() {
}
class CMsgClientUFSUploadFileRequest::HasBitSetters {
 public:
  static void set_has_app_id(CMsgClientUFSUploadFileRequest* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_file_size(CMsgClientUFSUploadFileRequest* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_raw_file_size(CMsgClientUFSUploadFileRequest* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_sha_file(CMsgClientUFSUploadFileRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_time_stamp(CMsgClientUFSUploadFileRequest* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_file_name(CMsgClientUFSUploadFileRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_platforms_to_sync_deprecated(CMsgClientUFSUploadFileRequest* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_platforms_to_sync(CMsgClientUFSUploadFileRequest* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_cell_id(CMsgClientUFSUploadFileRequest* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_can_encrypt(CMsgClientUFSUploadFileRequest* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientUFSUploadFileRequest::kAppIdFieldNumber;
const int CMsgClientUFSUploadFileRequest::kFileSizeFieldNumber;
const int CMsgClientUFSUploadFileRequest::kRawFileSizeFieldNumber;
const int CMsgClientUFSUploadFileRequest::kShaFileFieldNumber;
const int CMsgClientUFSUploadFileRequest::kTimeStampFieldNumber;
const int CMsgClientUFSUploadFileRequest::kFileNameFieldNumber;
const int CMsgClientUFSUploadFileRequest::kPlatformsToSyncDeprecatedFieldNumber;
const int CMsgClientUFSUploadFileRequest::kPlatformsToSyncFieldNumber;
const int CMsgClientUFSUploadFileRequest::kCellIdFieldNumber;
const int CMsgClientUFSUploadFileRequest::kCanEncryptFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientUFSUploadFileRequest::CMsgClientUFSUploadFileRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientUFSUploadFileRequest)
}
CMsgClientUFSUploadFileRequest::CMsgClientUFSUploadFileRequest(const CMsgClientUFSUploadFileRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sha_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sha_file()) {
    sha_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_file_);
  }
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_name()) {
    file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&platforms_to_sync_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(platforms_to_sync_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientUFSUploadFileRequest)
}

void CMsgClientUFSUploadFileRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientUFSUploadFileRequest_steammessages_5fclientserver_2eproto.base);
  sha_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&can_encrypt_) -
      reinterpret_cast<char*>(&app_id_)) + sizeof(can_encrypt_));
  platforms_to_sync_ = 4294967295u;
}

CMsgClientUFSUploadFileRequest::~CMsgClientUFSUploadFileRequest() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientUFSUploadFileRequest)
  SharedDtor();
}

void CMsgClientUFSUploadFileRequest::SharedDtor() {
  sha_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientUFSUploadFileRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientUFSUploadFileRequest& CMsgClientUFSUploadFileRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientUFSUploadFileRequest_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientUFSUploadFileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientUFSUploadFileRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      sha_file_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      file_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cell_id_) -
        reinterpret_cast<char*>(&app_id_)) + sizeof(cell_id_));
  }
  if (cached_has_bits & 0x00000300u) {
    can_encrypt_ = false;
    platforms_to_sync_ = 4294967295u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientUFSUploadFileRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientUFSUploadFileRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 file_size = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_file_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 raw_file_size = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_raw_file_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes sha_file = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_sha_file();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint64 time_stamp = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_time_stamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string file_name = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientUFSUploadFileRequest.file_name");
        object = msg->mutable_file_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 platforms_to_sync_deprecated = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_platforms_to_sync_deprecated(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 platforms_to_sync = 8 [default = 4294967295];
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_platforms_to_sync(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 cell_id = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_cell_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool can_encrypt = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_can_encrypt(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientUFSUploadFileRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientUFSUploadFileRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 file_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_file_size(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 raw_file_size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_raw_file_size(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raw_file_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sha_file = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha_file()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 time_stamp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_time_stamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string file_name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_name().data(), static_cast<int>(this->file_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientUFSUploadFileRequest.file_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 platforms_to_sync_deprecated = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_platforms_to_sync_deprecated(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &platforms_to_sync_deprecated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 platforms_to_sync = 8 [default = 4294967295];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_platforms_to_sync(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &platforms_to_sync_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cell_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_cell_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cell_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool can_encrypt = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_can_encrypt(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_encrypt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientUFSUploadFileRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientUFSUploadFileRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientUFSUploadFileRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientUFSUploadFileRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional uint32 file_size = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->file_size(), output);
  }

  // optional uint32 raw_file_size = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->raw_file_size(), output);
  }

  // optional bytes sha_file = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->sha_file(), output);
  }

  // optional uint64 time_stamp = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->time_stamp(), output);
  }

  // optional string file_name = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), static_cast<int>(this->file_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSUploadFileRequest.file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->file_name(), output);
  }

  // optional uint32 platforms_to_sync_deprecated = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->platforms_to_sync_deprecated(), output);
  }

  // optional uint32 platforms_to_sync = 8 [default = 4294967295];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->platforms_to_sync(), output);
  }

  // optional uint32 cell_id = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->cell_id(), output);
  }

  // optional bool can_encrypt = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->can_encrypt(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientUFSUploadFileRequest)
}

::google::protobuf::uint8* CMsgClientUFSUploadFileRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientUFSUploadFileRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional uint32 file_size = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->file_size(), target);
  }

  // optional uint32 raw_file_size = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->raw_file_size(), target);
  }

  // optional bytes sha_file = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->sha_file(), target);
  }

  // optional uint64 time_stamp = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->time_stamp(), target);
  }

  // optional string file_name = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), static_cast<int>(this->file_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSUploadFileRequest.file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->file_name(), target);
  }

  // optional uint32 platforms_to_sync_deprecated = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->platforms_to_sync_deprecated(), target);
  }

  // optional uint32 platforms_to_sync = 8 [default = 4294967295];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->platforms_to_sync(), target);
  }

  // optional uint32 cell_id = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->cell_id(), target);
  }

  // optional bool can_encrypt = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->can_encrypt(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientUFSUploadFileRequest)
  return target;
}

size_t CMsgClientUFSUploadFileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientUFSUploadFileRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes sha_file = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha_file());
    }

    // optional string file_name = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional uint32 file_size = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->file_size());
    }

    // optional uint64 time_stamp = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time_stamp());
    }

    // optional uint32 raw_file_size = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raw_file_size());
    }

    // optional uint32 platforms_to_sync_deprecated = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->platforms_to_sync_deprecated());
    }

    // optional uint32 cell_id = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cell_id());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional bool can_encrypt = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional uint32 platforms_to_sync = 8 [default = 4294967295];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->platforms_to_sync());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientUFSUploadFileRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientUFSUploadFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSUploadFileRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientUFSUploadFileRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientUFSUploadFileRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientUFSUploadFileRequest)
    MergeFrom(*source);
  }
}

void CMsgClientUFSUploadFileRequest::MergeFrom(const CMsgClientUFSUploadFileRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientUFSUploadFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      sha_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_file_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      file_size_ = from.file_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      time_stamp_ = from.time_stamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      raw_file_size_ = from.raw_file_size_;
    }
    if (cached_has_bits & 0x00000040u) {
      platforms_to_sync_deprecated_ = from.platforms_to_sync_deprecated_;
    }
    if (cached_has_bits & 0x00000080u) {
      cell_id_ = from.cell_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      can_encrypt_ = from.can_encrypt_;
    }
    if (cached_has_bits & 0x00000200u) {
      platforms_to_sync_ = from.platforms_to_sync_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientUFSUploadFileRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientUFSUploadFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSUploadFileRequest::CopyFrom(const CMsgClientUFSUploadFileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientUFSUploadFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSUploadFileRequest::IsInitialized() const {
  return true;
}

void CMsgClientUFSUploadFileRequest::Swap(CMsgClientUFSUploadFileRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientUFSUploadFileRequest::InternalSwap(CMsgClientUFSUploadFileRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sha_file_.Swap(&other->sha_file_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  file_name_.Swap(&other->file_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(app_id_, other->app_id_);
  swap(file_size_, other->file_size_);
  swap(time_stamp_, other->time_stamp_);
  swap(raw_file_size_, other->raw_file_size_);
  swap(platforms_to_sync_deprecated_, other->platforms_to_sync_deprecated_);
  swap(cell_id_, other->cell_id_);
  swap(can_encrypt_, other->can_encrypt_);
  swap(platforms_to_sync_, other->platforms_to_sync_);
}

::google::protobuf::Metadata CMsgClientUFSUploadFileRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientUFSUploadFileResponse::InitAsDefaultInstance() {
}
class CMsgClientUFSUploadFileResponse::HasBitSetters {
 public:
  static void set_has_eresult(CMsgClientUFSUploadFileResponse* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_sha_file(CMsgClientUFSUploadFileResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_use_http(CMsgClientUFSUploadFileResponse* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_http_host(CMsgClientUFSUploadFileResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_http_url(CMsgClientUFSUploadFileResponse* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_kv_headers(CMsgClientUFSUploadFileResponse* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_use_https(CMsgClientUFSUploadFileResponse* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_encrypt_file(CMsgClientUFSUploadFileResponse* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientUFSUploadFileResponse::kEresultFieldNumber;
const int CMsgClientUFSUploadFileResponse::kShaFileFieldNumber;
const int CMsgClientUFSUploadFileResponse::kUseHttpFieldNumber;
const int CMsgClientUFSUploadFileResponse::kHttpHostFieldNumber;
const int CMsgClientUFSUploadFileResponse::kHttpUrlFieldNumber;
const int CMsgClientUFSUploadFileResponse::kKvHeadersFieldNumber;
const int CMsgClientUFSUploadFileResponse::kUseHttpsFieldNumber;
const int CMsgClientUFSUploadFileResponse::kEncryptFileFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientUFSUploadFileResponse::CMsgClientUFSUploadFileResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientUFSUploadFileResponse)
}
CMsgClientUFSUploadFileResponse::CMsgClientUFSUploadFileResponse(const CMsgClientUFSUploadFileResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sha_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sha_file()) {
    sha_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_file_);
  }
  http_host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_http_host()) {
    http_host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.http_host_);
  }
  http_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_http_url()) {
    http_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.http_url_);
  }
  kv_headers_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_kv_headers()) {
    kv_headers_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kv_headers_);
  }
  ::memcpy(&use_http_, &from.use_http_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&use_http_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientUFSUploadFileResponse)
}

void CMsgClientUFSUploadFileResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientUFSUploadFileResponse_steammessages_5fclientserver_2eproto.base);
  sha_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  http_host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  http_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kv_headers_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&use_http_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&encrypt_file_) -
      reinterpret_cast<char*>(&use_http_)) + sizeof(encrypt_file_));
  eresult_ = 2;
}

CMsgClientUFSUploadFileResponse::~CMsgClientUFSUploadFileResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientUFSUploadFileResponse)
  SharedDtor();
}

void CMsgClientUFSUploadFileResponse::SharedDtor() {
  sha_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  http_host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  http_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kv_headers_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientUFSUploadFileResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientUFSUploadFileResponse& CMsgClientUFSUploadFileResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientUFSUploadFileResponse_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientUFSUploadFileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientUFSUploadFileResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      sha_file_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      http_host_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      http_url_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      kv_headers_.ClearNonDefaultToEmptyNoArena();
    }
  }
  ::memset(&use_http_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&encrypt_file_) -
      reinterpret_cast<char*>(&use_http_)) + sizeof(encrypt_file_));
  eresult_ = 2;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientUFSUploadFileResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientUFSUploadFileResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_eresult(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes sha_file = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_sha_file();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool use_http = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_use_http(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string http_host = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientUFSUploadFileResponse.http_host");
        object = msg->mutable_http_host();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string http_url = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientUFSUploadFileResponse.http_url");
        object = msg->mutable_http_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bytes kv_headers = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_kv_headers();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool use_https = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_use_https(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool encrypt_file = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_encrypt_file(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientUFSUploadFileResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientUFSUploadFileResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_eresult(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sha_file = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha_file()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_http = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_use_http(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_http_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string http_host = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_http_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->http_host().data(), static_cast<int>(this->http_host().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientUFSUploadFileResponse.http_host");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string http_url = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_http_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->http_url().data(), static_cast<int>(this->http_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientUFSUploadFileResponse.http_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes kv_headers = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_kv_headers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_https = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_use_https(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_https_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool encrypt_file = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_encrypt_file(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_file_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientUFSUploadFileResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientUFSUploadFileResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientUFSUploadFileResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientUFSUploadFileResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional bytes sha_file = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->sha_file(), output);
  }

  // optional bool use_http = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->use_http(), output);
  }

  // optional string http_host = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->http_host().data(), static_cast<int>(this->http_host().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSUploadFileResponse.http_host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->http_host(), output);
  }

  // optional string http_url = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->http_url().data(), static_cast<int>(this->http_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSUploadFileResponse.http_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->http_url(), output);
  }

  // optional bytes kv_headers = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->kv_headers(), output);
  }

  // optional bool use_https = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->use_https(), output);
  }

  // optional bool encrypt_file = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->encrypt_file(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientUFSUploadFileResponse)
}

::google::protobuf::uint8* CMsgClientUFSUploadFileResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientUFSUploadFileResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // optional bytes sha_file = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->sha_file(), target);
  }

  // optional bool use_http = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->use_http(), target);
  }

  // optional string http_host = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->http_host().data(), static_cast<int>(this->http_host().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSUploadFileResponse.http_host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->http_host(), target);
  }

  // optional string http_url = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->http_url().data(), static_cast<int>(this->http_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSUploadFileResponse.http_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->http_url(), target);
  }

  // optional bytes kv_headers = 6;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->kv_headers(), target);
  }

  // optional bool use_https = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->use_https(), target);
  }

  // optional bool encrypt_file = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->encrypt_file(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientUFSUploadFileResponse)
  return target;
}

size_t CMsgClientUFSUploadFileResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientUFSUploadFileResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes sha_file = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha_file());
    }

    // optional string http_host = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->http_host());
    }

    // optional string http_url = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->http_url());
    }

    // optional bytes kv_headers = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->kv_headers());
    }

    // optional bool use_http = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool use_https = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool encrypt_file = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional int32 eresult = 1 [default = 2];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientUFSUploadFileResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientUFSUploadFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSUploadFileResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientUFSUploadFileResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientUFSUploadFileResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientUFSUploadFileResponse)
    MergeFrom(*source);
  }
}

void CMsgClientUFSUploadFileResponse::MergeFrom(const CMsgClientUFSUploadFileResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientUFSUploadFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      sha_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_file_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      http_host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.http_host_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      http_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.http_url_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      kv_headers_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kv_headers_);
    }
    if (cached_has_bits & 0x00000010u) {
      use_http_ = from.use_http_;
    }
    if (cached_has_bits & 0x00000020u) {
      use_https_ = from.use_https_;
    }
    if (cached_has_bits & 0x00000040u) {
      encrypt_file_ = from.encrypt_file_;
    }
    if (cached_has_bits & 0x00000080u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientUFSUploadFileResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientUFSUploadFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSUploadFileResponse::CopyFrom(const CMsgClientUFSUploadFileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientUFSUploadFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSUploadFileResponse::IsInitialized() const {
  return true;
}

void CMsgClientUFSUploadFileResponse::Swap(CMsgClientUFSUploadFileResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientUFSUploadFileResponse::InternalSwap(CMsgClientUFSUploadFileResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sha_file_.Swap(&other->sha_file_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  http_host_.Swap(&other->http_host_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  http_url_.Swap(&other->http_url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  kv_headers_.Swap(&other->kv_headers_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(use_http_, other->use_http_);
  swap(use_https_, other->use_https_);
  swap(encrypt_file_, other->encrypt_file_);
  swap(eresult_, other->eresult_);
}

::google::protobuf::Metadata CMsgClientUFSUploadFileResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientUFSUploadCommit_File::InitAsDefaultInstance() {
}
class CMsgClientUFSUploadCommit_File::HasBitSetters {
 public:
  static void set_has_eresult(CMsgClientUFSUploadCommit_File* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_app_id(CMsgClientUFSUploadCommit_File* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_sha_file(CMsgClientUFSUploadCommit_File* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_cub_file(CMsgClientUFSUploadCommit_File* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_file_name(CMsgClientUFSUploadCommit_File* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientUFSUploadCommit_File::kEresultFieldNumber;
const int CMsgClientUFSUploadCommit_File::kAppIdFieldNumber;
const int CMsgClientUFSUploadCommit_File::kShaFileFieldNumber;
const int CMsgClientUFSUploadCommit_File::kCubFileFieldNumber;
const int CMsgClientUFSUploadCommit_File::kFileNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientUFSUploadCommit_File::CMsgClientUFSUploadCommit_File()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientUFSUploadCommit.File)
}
CMsgClientUFSUploadCommit_File::CMsgClientUFSUploadCommit_File(const CMsgClientUFSUploadCommit_File& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sha_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sha_file()) {
    sha_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_file_);
  }
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_name()) {
    file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientUFSUploadCommit.File)
}

void CMsgClientUFSUploadCommit_File::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientUFSUploadCommit_File_steammessages_5fclientserver_2eproto.base);
  sha_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cub_file_) -
      reinterpret_cast<char*>(&app_id_)) + sizeof(cub_file_));
  eresult_ = 2;
}

CMsgClientUFSUploadCommit_File::~CMsgClientUFSUploadCommit_File() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientUFSUploadCommit.File)
  SharedDtor();
}

void CMsgClientUFSUploadCommit_File::SharedDtor() {
  sha_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientUFSUploadCommit_File::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientUFSUploadCommit_File& CMsgClientUFSUploadCommit_File::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientUFSUploadCommit_File_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientUFSUploadCommit_File::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientUFSUploadCommit.File)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      sha_file_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      file_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cub_file_) -
        reinterpret_cast<char*>(&app_id_)) + sizeof(cub_file_));
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientUFSUploadCommit_File::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientUFSUploadCommit_File*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_eresult(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 app_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes sha_file = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_sha_file();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 cub_file = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_cub_file(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string file_name = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientUFSUploadCommit.File.file_name");
        object = msg->mutable_file_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientUFSUploadCommit_File::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientUFSUploadCommit.File)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_eresult(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 app_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sha_file = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha_file()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cub_file = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_cub_file(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cub_file_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string file_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_name().data(), static_cast<int>(this->file_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientUFSUploadCommit.File.file_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientUFSUploadCommit.File)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientUFSUploadCommit.File)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientUFSUploadCommit_File::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientUFSUploadCommit.File)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional uint32 app_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->app_id(), output);
  }

  // optional bytes sha_file = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->sha_file(), output);
  }

  // optional uint32 cub_file = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cub_file(), output);
  }

  // optional string file_name = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), static_cast<int>(this->file_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSUploadCommit.File.file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->file_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientUFSUploadCommit.File)
}

::google::protobuf::uint8* CMsgClientUFSUploadCommit_File::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientUFSUploadCommit.File)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // optional uint32 app_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->app_id(), target);
  }

  // optional bytes sha_file = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->sha_file(), target);
  }

  // optional uint32 cub_file = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cub_file(), target);
  }

  // optional string file_name = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), static_cast<int>(this->file_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSUploadCommit.File.file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->file_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientUFSUploadCommit.File)
  return target;
}

size_t CMsgClientUFSUploadCommit_File::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientUFSUploadCommit.File)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes sha_file = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha_file());
    }

    // optional string file_name = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

    // optional uint32 app_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional uint32 cub_file = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cub_file());
    }

    // optional int32 eresult = 1 [default = 2];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientUFSUploadCommit_File::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientUFSUploadCommit.File)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSUploadCommit_File* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientUFSUploadCommit_File>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientUFSUploadCommit.File)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientUFSUploadCommit.File)
    MergeFrom(*source);
  }
}

void CMsgClientUFSUploadCommit_File::MergeFrom(const CMsgClientUFSUploadCommit_File& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientUFSUploadCommit.File)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      sha_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_file_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      cub_file_ = from.cub_file_;
    }
    if (cached_has_bits & 0x00000010u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientUFSUploadCommit_File::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientUFSUploadCommit.File)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSUploadCommit_File::CopyFrom(const CMsgClientUFSUploadCommit_File& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientUFSUploadCommit.File)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSUploadCommit_File::IsInitialized() const {
  return true;
}

void CMsgClientUFSUploadCommit_File::Swap(CMsgClientUFSUploadCommit_File* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientUFSUploadCommit_File::InternalSwap(CMsgClientUFSUploadCommit_File* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sha_file_.Swap(&other->sha_file_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  file_name_.Swap(&other->file_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(app_id_, other->app_id_);
  swap(cub_file_, other->cub_file_);
  swap(eresult_, other->eresult_);
}

::google::protobuf::Metadata CMsgClientUFSUploadCommit_File::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientUFSUploadCommit::InitAsDefaultInstance() {
}
class CMsgClientUFSUploadCommit::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientUFSUploadCommit::kFilesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientUFSUploadCommit::CMsgClientUFSUploadCommit()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientUFSUploadCommit)
}
CMsgClientUFSUploadCommit::CMsgClientUFSUploadCommit(const CMsgClientUFSUploadCommit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      files_(from.files_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientUFSUploadCommit)
}

void CMsgClientUFSUploadCommit::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientUFSUploadCommit_steammessages_5fclientserver_2eproto.base);
}

CMsgClientUFSUploadCommit::~CMsgClientUFSUploadCommit() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientUFSUploadCommit)
  SharedDtor();
}

void CMsgClientUFSUploadCommit::SharedDtor() {
}

void CMsgClientUFSUploadCommit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientUFSUploadCommit& CMsgClientUFSUploadCommit::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientUFSUploadCommit_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientUFSUploadCommit::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientUFSUploadCommit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  files_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientUFSUploadCommit::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientUFSUploadCommit*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.steam.CMsgClientUFSUploadCommit.File files = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgClientUFSUploadCommit_File::_InternalParse;
          object = msg->add_files();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientUFSUploadCommit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientUFSUploadCommit)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CMsgClientUFSUploadCommit.File files = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_files()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientUFSUploadCommit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientUFSUploadCommit)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientUFSUploadCommit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientUFSUploadCommit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientUFSUploadCommit.File files = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->files_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->files(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientUFSUploadCommit)
}

::google::protobuf::uint8* CMsgClientUFSUploadCommit::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientUFSUploadCommit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientUFSUploadCommit.File files = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->files_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->files(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientUFSUploadCommit)
  return target;
}

size_t CMsgClientUFSUploadCommit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientUFSUploadCommit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientUFSUploadCommit.File files = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->files_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->files(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientUFSUploadCommit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientUFSUploadCommit)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSUploadCommit* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientUFSUploadCommit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientUFSUploadCommit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientUFSUploadCommit)
    MergeFrom(*source);
  }
}

void CMsgClientUFSUploadCommit::MergeFrom(const CMsgClientUFSUploadCommit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientUFSUploadCommit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  files_.MergeFrom(from.files_);
}

void CMsgClientUFSUploadCommit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientUFSUploadCommit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSUploadCommit::CopyFrom(const CMsgClientUFSUploadCommit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientUFSUploadCommit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSUploadCommit::IsInitialized() const {
  return true;
}

void CMsgClientUFSUploadCommit::Swap(CMsgClientUFSUploadCommit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientUFSUploadCommit::InternalSwap(CMsgClientUFSUploadCommit* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&files_)->InternalSwap(CastToBase(&other->files_));
}

::google::protobuf::Metadata CMsgClientUFSUploadCommit::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientUFSUploadCommitResponse_File::InitAsDefaultInstance() {
}
class CMsgClientUFSUploadCommitResponse_File::HasBitSetters {
 public:
  static void set_has_eresult(CMsgClientUFSUploadCommitResponse_File* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_app_id(CMsgClientUFSUploadCommitResponse_File* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_sha_file(CMsgClientUFSUploadCommitResponse_File* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientUFSUploadCommitResponse_File::kEresultFieldNumber;
const int CMsgClientUFSUploadCommitResponse_File::kAppIdFieldNumber;
const int CMsgClientUFSUploadCommitResponse_File::kShaFileFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientUFSUploadCommitResponse_File::CMsgClientUFSUploadCommitResponse_File()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientUFSUploadCommitResponse.File)
}
CMsgClientUFSUploadCommitResponse_File::CMsgClientUFSUploadCommitResponse_File(const CMsgClientUFSUploadCommitResponse_File& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sha_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sha_file()) {
    sha_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_file_);
  }
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientUFSUploadCommitResponse.File)
}

void CMsgClientUFSUploadCommitResponse_File::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientUFSUploadCommitResponse_File_steammessages_5fclientserver_2eproto.base);
  sha_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_id_ = 0u;
  eresult_ = 2;
}

CMsgClientUFSUploadCommitResponse_File::~CMsgClientUFSUploadCommitResponse_File() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientUFSUploadCommitResponse.File)
  SharedDtor();
}

void CMsgClientUFSUploadCommitResponse_File::SharedDtor() {
  sha_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientUFSUploadCommitResponse_File::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientUFSUploadCommitResponse_File& CMsgClientUFSUploadCommitResponse_File::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientUFSUploadCommitResponse_File_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientUFSUploadCommitResponse_File::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientUFSUploadCommitResponse.File)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    sha_file_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    app_id_ = 0u;
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientUFSUploadCommitResponse_File::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientUFSUploadCommitResponse_File*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_eresult(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 app_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes sha_file = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_sha_file();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientUFSUploadCommitResponse_File::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientUFSUploadCommitResponse.File)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_eresult(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 app_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sha_file = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha_file()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientUFSUploadCommitResponse.File)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientUFSUploadCommitResponse.File)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientUFSUploadCommitResponse_File::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientUFSUploadCommitResponse.File)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional uint32 app_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->app_id(), output);
  }

  // optional bytes sha_file = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->sha_file(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientUFSUploadCommitResponse.File)
}

::google::protobuf::uint8* CMsgClientUFSUploadCommitResponse_File::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientUFSUploadCommitResponse.File)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // optional uint32 app_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->app_id(), target);
  }

  // optional bytes sha_file = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->sha_file(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientUFSUploadCommitResponse.File)
  return target;
}

size_t CMsgClientUFSUploadCommitResponse_File::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientUFSUploadCommitResponse.File)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes sha_file = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha_file());
    }

    // optional uint32 app_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional int32 eresult = 1 [default = 2];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientUFSUploadCommitResponse_File::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientUFSUploadCommitResponse.File)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSUploadCommitResponse_File* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientUFSUploadCommitResponse_File>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientUFSUploadCommitResponse.File)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientUFSUploadCommitResponse.File)
    MergeFrom(*source);
  }
}

void CMsgClientUFSUploadCommitResponse_File::MergeFrom(const CMsgClientUFSUploadCommitResponse_File& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientUFSUploadCommitResponse.File)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      sha_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_file_);
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientUFSUploadCommitResponse_File::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientUFSUploadCommitResponse.File)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSUploadCommitResponse_File::CopyFrom(const CMsgClientUFSUploadCommitResponse_File& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientUFSUploadCommitResponse.File)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSUploadCommitResponse_File::IsInitialized() const {
  return true;
}

void CMsgClientUFSUploadCommitResponse_File::Swap(CMsgClientUFSUploadCommitResponse_File* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientUFSUploadCommitResponse_File::InternalSwap(CMsgClientUFSUploadCommitResponse_File* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sha_file_.Swap(&other->sha_file_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(app_id_, other->app_id_);
  swap(eresult_, other->eresult_);
}

::google::protobuf::Metadata CMsgClientUFSUploadCommitResponse_File::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientUFSUploadCommitResponse::InitAsDefaultInstance() {
}
class CMsgClientUFSUploadCommitResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientUFSUploadCommitResponse::kFilesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientUFSUploadCommitResponse::CMsgClientUFSUploadCommitResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientUFSUploadCommitResponse)
}
CMsgClientUFSUploadCommitResponse::CMsgClientUFSUploadCommitResponse(const CMsgClientUFSUploadCommitResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      files_(from.files_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientUFSUploadCommitResponse)
}

void CMsgClientUFSUploadCommitResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientUFSUploadCommitResponse_steammessages_5fclientserver_2eproto.base);
}

CMsgClientUFSUploadCommitResponse::~CMsgClientUFSUploadCommitResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientUFSUploadCommitResponse)
  SharedDtor();
}

void CMsgClientUFSUploadCommitResponse::SharedDtor() {
}

void CMsgClientUFSUploadCommitResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientUFSUploadCommitResponse& CMsgClientUFSUploadCommitResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientUFSUploadCommitResponse_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientUFSUploadCommitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientUFSUploadCommitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  files_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientUFSUploadCommitResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientUFSUploadCommitResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.steam.CMsgClientUFSUploadCommitResponse.File files = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgClientUFSUploadCommitResponse_File::_InternalParse;
          object = msg->add_files();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientUFSUploadCommitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientUFSUploadCommitResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CMsgClientUFSUploadCommitResponse.File files = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_files()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientUFSUploadCommitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientUFSUploadCommitResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientUFSUploadCommitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientUFSUploadCommitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientUFSUploadCommitResponse.File files = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->files_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->files(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientUFSUploadCommitResponse)
}

::google::protobuf::uint8* CMsgClientUFSUploadCommitResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientUFSUploadCommitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientUFSUploadCommitResponse.File files = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->files_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->files(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientUFSUploadCommitResponse)
  return target;
}

size_t CMsgClientUFSUploadCommitResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientUFSUploadCommitResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientUFSUploadCommitResponse.File files = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->files_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->files(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientUFSUploadCommitResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientUFSUploadCommitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSUploadCommitResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientUFSUploadCommitResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientUFSUploadCommitResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientUFSUploadCommitResponse)
    MergeFrom(*source);
  }
}

void CMsgClientUFSUploadCommitResponse::MergeFrom(const CMsgClientUFSUploadCommitResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientUFSUploadCommitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  files_.MergeFrom(from.files_);
}

void CMsgClientUFSUploadCommitResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientUFSUploadCommitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSUploadCommitResponse::CopyFrom(const CMsgClientUFSUploadCommitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientUFSUploadCommitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSUploadCommitResponse::IsInitialized() const {
  return true;
}

void CMsgClientUFSUploadCommitResponse::Swap(CMsgClientUFSUploadCommitResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientUFSUploadCommitResponse::InternalSwap(CMsgClientUFSUploadCommitResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&files_)->InternalSwap(CastToBase(&other->files_));
}

::google::protobuf::Metadata CMsgClientUFSUploadCommitResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientUFSFileChunk::InitAsDefaultInstance() {
}
class CMsgClientUFSFileChunk::HasBitSetters {
 public:
  static void set_has_sha_file(CMsgClientUFSFileChunk* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_file_start(CMsgClientUFSFileChunk* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_data(CMsgClientUFSFileChunk* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientUFSFileChunk::kShaFileFieldNumber;
const int CMsgClientUFSFileChunk::kFileStartFieldNumber;
const int CMsgClientUFSFileChunk::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientUFSFileChunk::CMsgClientUFSFileChunk()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientUFSFileChunk)
}
CMsgClientUFSFileChunk::CMsgClientUFSFileChunk(const CMsgClientUFSFileChunk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sha_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sha_file()) {
    sha_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_file_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  file_start_ = from.file_start_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientUFSFileChunk)
}

void CMsgClientUFSFileChunk::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientUFSFileChunk_steammessages_5fclientserver_2eproto.base);
  sha_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_start_ = 0u;
}

CMsgClientUFSFileChunk::~CMsgClientUFSFileChunk() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientUFSFileChunk)
  SharedDtor();
}

void CMsgClientUFSFileChunk::SharedDtor() {
  sha_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientUFSFileChunk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientUFSFileChunk& CMsgClientUFSFileChunk::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientUFSFileChunk_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientUFSFileChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientUFSFileChunk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      sha_file_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      data_.ClearNonDefaultToEmptyNoArena();
    }
  }
  file_start_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientUFSFileChunk::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientUFSFileChunk*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bytes sha_file = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_sha_file();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 file_start = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_file_start(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes data = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_data();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientUFSFileChunk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientUFSFileChunk)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes sha_file = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha_file()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 file_start = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_file_start(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientUFSFileChunk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientUFSFileChunk)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientUFSFileChunk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientUFSFileChunk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes sha_file = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->sha_file(), output);
  }

  // optional uint32 file_start = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->file_start(), output);
  }

  // optional bytes data = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientUFSFileChunk)
}

::google::protobuf::uint8* CMsgClientUFSFileChunk::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientUFSFileChunk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes sha_file = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->sha_file(), target);
  }

  // optional uint32 file_start = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->file_start(), target);
  }

  // optional bytes data = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientUFSFileChunk)
  return target;
}

size_t CMsgClientUFSFileChunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientUFSFileChunk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes sha_file = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha_file());
    }

    // optional bytes data = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint32 file_start = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->file_start());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientUFSFileChunk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientUFSFileChunk)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSFileChunk* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientUFSFileChunk>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientUFSFileChunk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientUFSFileChunk)
    MergeFrom(*source);
  }
}

void CMsgClientUFSFileChunk::MergeFrom(const CMsgClientUFSFileChunk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientUFSFileChunk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      sha_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_file_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000004u) {
      file_start_ = from.file_start_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientUFSFileChunk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientUFSFileChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSFileChunk::CopyFrom(const CMsgClientUFSFileChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientUFSFileChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSFileChunk::IsInitialized() const {
  return true;
}

void CMsgClientUFSFileChunk::Swap(CMsgClientUFSFileChunk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientUFSFileChunk::InternalSwap(CMsgClientUFSFileChunk* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sha_file_.Swap(&other->sha_file_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(file_start_, other->file_start_);
}

::google::protobuf::Metadata CMsgClientUFSFileChunk::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientUFSTransferHeartbeat::InitAsDefaultInstance() {
}
class CMsgClientUFSTransferHeartbeat::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientUFSTransferHeartbeat::CMsgClientUFSTransferHeartbeat()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientUFSTransferHeartbeat)
}
CMsgClientUFSTransferHeartbeat::CMsgClientUFSTransferHeartbeat(const CMsgClientUFSTransferHeartbeat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientUFSTransferHeartbeat)
}

void CMsgClientUFSTransferHeartbeat::SharedCtor() {
}

CMsgClientUFSTransferHeartbeat::~CMsgClientUFSTransferHeartbeat() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientUFSTransferHeartbeat)
  SharedDtor();
}

void CMsgClientUFSTransferHeartbeat::SharedDtor() {
}

void CMsgClientUFSTransferHeartbeat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientUFSTransferHeartbeat& CMsgClientUFSTransferHeartbeat::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientUFSTransferHeartbeat_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientUFSTransferHeartbeat::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientUFSTransferHeartbeat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientUFSTransferHeartbeat::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientUFSTransferHeartbeat*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientUFSTransferHeartbeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientUFSTransferHeartbeat)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientUFSTransferHeartbeat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientUFSTransferHeartbeat)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientUFSTransferHeartbeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientUFSTransferHeartbeat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientUFSTransferHeartbeat)
}

::google::protobuf::uint8* CMsgClientUFSTransferHeartbeat::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientUFSTransferHeartbeat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientUFSTransferHeartbeat)
  return target;
}

size_t CMsgClientUFSTransferHeartbeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientUFSTransferHeartbeat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientUFSTransferHeartbeat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientUFSTransferHeartbeat)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSTransferHeartbeat* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientUFSTransferHeartbeat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientUFSTransferHeartbeat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientUFSTransferHeartbeat)
    MergeFrom(*source);
  }
}

void CMsgClientUFSTransferHeartbeat::MergeFrom(const CMsgClientUFSTransferHeartbeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientUFSTransferHeartbeat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgClientUFSTransferHeartbeat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientUFSTransferHeartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSTransferHeartbeat::CopyFrom(const CMsgClientUFSTransferHeartbeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientUFSTransferHeartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSTransferHeartbeat::IsInitialized() const {
  return true;
}

void CMsgClientUFSTransferHeartbeat::Swap(CMsgClientUFSTransferHeartbeat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientUFSTransferHeartbeat::InternalSwap(CMsgClientUFSTransferHeartbeat* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CMsgClientUFSTransferHeartbeat::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientUFSUploadFileFinished::InitAsDefaultInstance() {
}
class CMsgClientUFSUploadFileFinished::HasBitSetters {
 public:
  static void set_has_eresult(CMsgClientUFSUploadFileFinished* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_sha_file(CMsgClientUFSUploadFileFinished* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientUFSUploadFileFinished::kEresultFieldNumber;
const int CMsgClientUFSUploadFileFinished::kShaFileFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientUFSUploadFileFinished::CMsgClientUFSUploadFileFinished()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientUFSUploadFileFinished)
}
CMsgClientUFSUploadFileFinished::CMsgClientUFSUploadFileFinished(const CMsgClientUFSUploadFileFinished& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sha_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sha_file()) {
    sha_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_file_);
  }
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientUFSUploadFileFinished)
}

void CMsgClientUFSUploadFileFinished::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientUFSUploadFileFinished_steammessages_5fclientserver_2eproto.base);
  sha_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  eresult_ = 2;
}

CMsgClientUFSUploadFileFinished::~CMsgClientUFSUploadFileFinished() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientUFSUploadFileFinished)
  SharedDtor();
}

void CMsgClientUFSUploadFileFinished::SharedDtor() {
  sha_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientUFSUploadFileFinished::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientUFSUploadFileFinished& CMsgClientUFSUploadFileFinished::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientUFSUploadFileFinished_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientUFSUploadFileFinished::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientUFSUploadFileFinished)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      sha_file_.ClearNonDefaultToEmptyNoArena();
    }
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientUFSUploadFileFinished::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientUFSUploadFileFinished*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_eresult(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes sha_file = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_sha_file();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientUFSUploadFileFinished::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientUFSUploadFileFinished)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_eresult(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sha_file = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha_file()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientUFSUploadFileFinished)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientUFSUploadFileFinished)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientUFSUploadFileFinished::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientUFSUploadFileFinished)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional bytes sha_file = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->sha_file(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientUFSUploadFileFinished)
}

::google::protobuf::uint8* CMsgClientUFSUploadFileFinished::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientUFSUploadFileFinished)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // optional bytes sha_file = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->sha_file(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientUFSUploadFileFinished)
  return target;
}

size_t CMsgClientUFSUploadFileFinished::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientUFSUploadFileFinished)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes sha_file = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha_file());
    }

    // optional int32 eresult = 1 [default = 2];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientUFSUploadFileFinished::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientUFSUploadFileFinished)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSUploadFileFinished* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientUFSUploadFileFinished>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientUFSUploadFileFinished)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientUFSUploadFileFinished)
    MergeFrom(*source);
  }
}

void CMsgClientUFSUploadFileFinished::MergeFrom(const CMsgClientUFSUploadFileFinished& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientUFSUploadFileFinished)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      sha_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_file_);
    }
    if (cached_has_bits & 0x00000002u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientUFSUploadFileFinished::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientUFSUploadFileFinished)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSUploadFileFinished::CopyFrom(const CMsgClientUFSUploadFileFinished& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientUFSUploadFileFinished)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSUploadFileFinished::IsInitialized() const {
  return true;
}

void CMsgClientUFSUploadFileFinished::Swap(CMsgClientUFSUploadFileFinished* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientUFSUploadFileFinished::InternalSwap(CMsgClientUFSUploadFileFinished* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sha_file_.Swap(&other->sha_file_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(eresult_, other->eresult_);
}

::google::protobuf::Metadata CMsgClientUFSUploadFileFinished::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientUFSDeleteFileRequest::InitAsDefaultInstance() {
}
class CMsgClientUFSDeleteFileRequest::HasBitSetters {
 public:
  static void set_has_app_id(CMsgClientUFSDeleteFileRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_file_name(CMsgClientUFSDeleteFileRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_is_explicit_delete(CMsgClientUFSDeleteFileRequest* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientUFSDeleteFileRequest::kAppIdFieldNumber;
const int CMsgClientUFSDeleteFileRequest::kFileNameFieldNumber;
const int CMsgClientUFSDeleteFileRequest::kIsExplicitDeleteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientUFSDeleteFileRequest::CMsgClientUFSDeleteFileRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientUFSDeleteFileRequest)
}
CMsgClientUFSDeleteFileRequest::CMsgClientUFSDeleteFileRequest(const CMsgClientUFSDeleteFileRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_name()) {
    file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_explicit_delete_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(is_explicit_delete_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientUFSDeleteFileRequest)
}

void CMsgClientUFSDeleteFileRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientUFSDeleteFileRequest_steammessages_5fclientserver_2eproto.base);
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_explicit_delete_) -
      reinterpret_cast<char*>(&app_id_)) + sizeof(is_explicit_delete_));
}

CMsgClientUFSDeleteFileRequest::~CMsgClientUFSDeleteFileRequest() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientUFSDeleteFileRequest)
  SharedDtor();
}

void CMsgClientUFSDeleteFileRequest::SharedDtor() {
  file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientUFSDeleteFileRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientUFSDeleteFileRequest& CMsgClientUFSDeleteFileRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientUFSDeleteFileRequest_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientUFSDeleteFileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientUFSDeleteFileRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    file_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_explicit_delete_) -
        reinterpret_cast<char*>(&app_id_)) + sizeof(is_explicit_delete_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientUFSDeleteFileRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientUFSDeleteFileRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string file_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientUFSDeleteFileRequest.file_name");
        object = msg->mutable_file_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool is_explicit_delete = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_is_explicit_delete(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientUFSDeleteFileRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientUFSDeleteFileRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string file_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_name().data(), static_cast<int>(this->file_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientUFSDeleteFileRequest.file_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_explicit_delete = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_is_explicit_delete(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_explicit_delete_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientUFSDeleteFileRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientUFSDeleteFileRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientUFSDeleteFileRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientUFSDeleteFileRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional string file_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), static_cast<int>(this->file_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSDeleteFileRequest.file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->file_name(), output);
  }

  // optional bool is_explicit_delete = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_explicit_delete(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientUFSDeleteFileRequest)
}

::google::protobuf::uint8* CMsgClientUFSDeleteFileRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientUFSDeleteFileRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional string file_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), static_cast<int>(this->file_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSDeleteFileRequest.file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->file_name(), target);
  }

  // optional bool is_explicit_delete = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_explicit_delete(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientUFSDeleteFileRequest)
  return target;
}

size_t CMsgClientUFSDeleteFileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientUFSDeleteFileRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string file_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional bool is_explicit_delete = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientUFSDeleteFileRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientUFSDeleteFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSDeleteFileRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientUFSDeleteFileRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientUFSDeleteFileRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientUFSDeleteFileRequest)
    MergeFrom(*source);
  }
}

void CMsgClientUFSDeleteFileRequest::MergeFrom(const CMsgClientUFSDeleteFileRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientUFSDeleteFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_explicit_delete_ = from.is_explicit_delete_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientUFSDeleteFileRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientUFSDeleteFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSDeleteFileRequest::CopyFrom(const CMsgClientUFSDeleteFileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientUFSDeleteFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSDeleteFileRequest::IsInitialized() const {
  return true;
}

void CMsgClientUFSDeleteFileRequest::Swap(CMsgClientUFSDeleteFileRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientUFSDeleteFileRequest::InternalSwap(CMsgClientUFSDeleteFileRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  file_name_.Swap(&other->file_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(app_id_, other->app_id_);
  swap(is_explicit_delete_, other->is_explicit_delete_);
}

::google::protobuf::Metadata CMsgClientUFSDeleteFileRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientUFSDeleteFileResponse::InitAsDefaultInstance() {
}
class CMsgClientUFSDeleteFileResponse::HasBitSetters {
 public:
  static void set_has_eresult(CMsgClientUFSDeleteFileResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_file_name(CMsgClientUFSDeleteFileResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientUFSDeleteFileResponse::kEresultFieldNumber;
const int CMsgClientUFSDeleteFileResponse::kFileNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientUFSDeleteFileResponse::CMsgClientUFSDeleteFileResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientUFSDeleteFileResponse)
}
CMsgClientUFSDeleteFileResponse::CMsgClientUFSDeleteFileResponse(const CMsgClientUFSDeleteFileResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_name()) {
    file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientUFSDeleteFileResponse)
}

void CMsgClientUFSDeleteFileResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientUFSDeleteFileResponse_steammessages_5fclientserver_2eproto.base);
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  eresult_ = 2;
}

CMsgClientUFSDeleteFileResponse::~CMsgClientUFSDeleteFileResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientUFSDeleteFileResponse)
  SharedDtor();
}

void CMsgClientUFSDeleteFileResponse::SharedDtor() {
  file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientUFSDeleteFileResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientUFSDeleteFileResponse& CMsgClientUFSDeleteFileResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientUFSDeleteFileResponse_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientUFSDeleteFileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientUFSDeleteFileResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      file_name_.ClearNonDefaultToEmptyNoArena();
    }
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientUFSDeleteFileResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientUFSDeleteFileResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_eresult(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string file_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientUFSDeleteFileResponse.file_name");
        object = msg->mutable_file_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientUFSDeleteFileResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientUFSDeleteFileResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_eresult(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string file_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_name().data(), static_cast<int>(this->file_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientUFSDeleteFileResponse.file_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientUFSDeleteFileResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientUFSDeleteFileResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientUFSDeleteFileResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientUFSDeleteFileResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional string file_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), static_cast<int>(this->file_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSDeleteFileResponse.file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->file_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientUFSDeleteFileResponse)
}

::google::protobuf::uint8* CMsgClientUFSDeleteFileResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientUFSDeleteFileResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // optional string file_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), static_cast<int>(this->file_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSDeleteFileResponse.file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->file_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientUFSDeleteFileResponse)
  return target;
}

size_t CMsgClientUFSDeleteFileResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientUFSDeleteFileResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string file_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

    // optional int32 eresult = 1 [default = 2];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientUFSDeleteFileResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientUFSDeleteFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSDeleteFileResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientUFSDeleteFileResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientUFSDeleteFileResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientUFSDeleteFileResponse)
    MergeFrom(*source);
  }
}

void CMsgClientUFSDeleteFileResponse::MergeFrom(const CMsgClientUFSDeleteFileResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientUFSDeleteFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientUFSDeleteFileResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientUFSDeleteFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSDeleteFileResponse::CopyFrom(const CMsgClientUFSDeleteFileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientUFSDeleteFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSDeleteFileResponse::IsInitialized() const {
  return true;
}

void CMsgClientUFSDeleteFileResponse::Swap(CMsgClientUFSDeleteFileResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientUFSDeleteFileResponse::InternalSwap(CMsgClientUFSDeleteFileResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  file_name_.Swap(&other->file_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(eresult_, other->eresult_);
}

::google::protobuf::Metadata CMsgClientUFSDeleteFileResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientUFSGetFileListForApp::InitAsDefaultInstance() {
}
class CMsgClientUFSGetFileListForApp::HasBitSetters {
 public:
  static void set_has_send_path_prefixes(CMsgClientUFSGetFileListForApp* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientUFSGetFileListForApp::kAppsToQueryFieldNumber;
const int CMsgClientUFSGetFileListForApp::kSendPathPrefixesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientUFSGetFileListForApp::CMsgClientUFSGetFileListForApp()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientUFSGetFileListForApp)
}
CMsgClientUFSGetFileListForApp::CMsgClientUFSGetFileListForApp(const CMsgClientUFSGetFileListForApp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      apps_to_query_(from.apps_to_query_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  send_path_prefixes_ = from.send_path_prefixes_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientUFSGetFileListForApp)
}

void CMsgClientUFSGetFileListForApp::SharedCtor() {
  send_path_prefixes_ = false;
}

CMsgClientUFSGetFileListForApp::~CMsgClientUFSGetFileListForApp() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientUFSGetFileListForApp)
  SharedDtor();
}

void CMsgClientUFSGetFileListForApp::SharedDtor() {
}

void CMsgClientUFSGetFileListForApp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientUFSGetFileListForApp& CMsgClientUFSGetFileListForApp::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientUFSGetFileListForApp_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientUFSGetFileListForApp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientUFSGetFileListForApp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  apps_to_query_.Clear();
  send_path_prefixes_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientUFSGetFileListForApp::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientUFSGetFileListForApp*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated uint32 apps_to_query = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 8) {
          do {
            msg->add_apps_to_query(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_apps_to_query();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional bool send_path_prefixes = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_send_path_prefixes(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientUFSGetFileListForApp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientUFSGetFileListForApp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 apps_to_query = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_apps_to_query())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_apps_to_query())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool send_path_prefixes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_send_path_prefixes(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &send_path_prefixes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientUFSGetFileListForApp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientUFSGetFileListForApp)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientUFSGetFileListForApp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientUFSGetFileListForApp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 apps_to_query = 1;
  for (int i = 0, n = this->apps_to_query_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->apps_to_query(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool send_path_prefixes = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->send_path_prefixes(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientUFSGetFileListForApp)
}

::google::protobuf::uint8* CMsgClientUFSGetFileListForApp::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientUFSGetFileListForApp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 apps_to_query = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->apps_to_query_, target);

  cached_has_bits = _has_bits_[0];
  // optional bool send_path_prefixes = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->send_path_prefixes(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientUFSGetFileListForApp)
  return target;
}

size_t CMsgClientUFSGetFileListForApp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientUFSGetFileListForApp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 apps_to_query = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->apps_to_query_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->apps_to_query_size());
    total_size += data_size;
  }

  // optional bool send_path_prefixes = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientUFSGetFileListForApp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientUFSGetFileListForApp)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSGetFileListForApp* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientUFSGetFileListForApp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientUFSGetFileListForApp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientUFSGetFileListForApp)
    MergeFrom(*source);
  }
}

void CMsgClientUFSGetFileListForApp::MergeFrom(const CMsgClientUFSGetFileListForApp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientUFSGetFileListForApp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  apps_to_query_.MergeFrom(from.apps_to_query_);
  if (from.has_send_path_prefixes()) {
    set_send_path_prefixes(from.send_path_prefixes());
  }
}

void CMsgClientUFSGetFileListForApp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientUFSGetFileListForApp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSGetFileListForApp::CopyFrom(const CMsgClientUFSGetFileListForApp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientUFSGetFileListForApp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSGetFileListForApp::IsInitialized() const {
  return true;
}

void CMsgClientUFSGetFileListForApp::Swap(CMsgClientUFSGetFileListForApp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientUFSGetFileListForApp::InternalSwap(CMsgClientUFSGetFileListForApp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  apps_to_query_.InternalSwap(&other->apps_to_query_);
  swap(send_path_prefixes_, other->send_path_prefixes_);
}

::google::protobuf::Metadata CMsgClientUFSGetFileListForApp::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientUFSGetFileListForAppResponse_File::InitAsDefaultInstance() {
}
class CMsgClientUFSGetFileListForAppResponse_File::HasBitSetters {
 public:
  static void set_has_app_id(CMsgClientUFSGetFileListForAppResponse_File* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_file_name(CMsgClientUFSGetFileListForAppResponse_File* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_sha_file(CMsgClientUFSGetFileListForAppResponse_File* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_time_stamp(CMsgClientUFSGetFileListForAppResponse_File* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_raw_file_size(CMsgClientUFSGetFileListForAppResponse_File* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_is_explicit_delete(CMsgClientUFSGetFileListForAppResponse_File* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_platforms_to_sync(CMsgClientUFSGetFileListForAppResponse_File* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_path_prefix_index(CMsgClientUFSGetFileListForAppResponse_File* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientUFSGetFileListForAppResponse_File::kAppIdFieldNumber;
const int CMsgClientUFSGetFileListForAppResponse_File::kFileNameFieldNumber;
const int CMsgClientUFSGetFileListForAppResponse_File::kShaFileFieldNumber;
const int CMsgClientUFSGetFileListForAppResponse_File::kTimeStampFieldNumber;
const int CMsgClientUFSGetFileListForAppResponse_File::kRawFileSizeFieldNumber;
const int CMsgClientUFSGetFileListForAppResponse_File::kIsExplicitDeleteFieldNumber;
const int CMsgClientUFSGetFileListForAppResponse_File::kPlatformsToSyncFieldNumber;
const int CMsgClientUFSGetFileListForAppResponse_File::kPathPrefixIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientUFSGetFileListForAppResponse_File::CMsgClientUFSGetFileListForAppResponse_File()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientUFSGetFileListForAppResponse.File)
}
CMsgClientUFSGetFileListForAppResponse_File::CMsgClientUFSGetFileListForAppResponse_File(const CMsgClientUFSGetFileListForAppResponse_File& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_name()) {
    file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  sha_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sha_file()) {
    sha_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_file_);
  }
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&path_prefix_index_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(path_prefix_index_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientUFSGetFileListForAppResponse.File)
}

void CMsgClientUFSGetFileListForAppResponse_File::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientUFSGetFileListForAppResponse_File_steammessages_5fclientserver_2eproto.base);
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sha_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&path_prefix_index_) -
      reinterpret_cast<char*>(&app_id_)) + sizeof(path_prefix_index_));
}

CMsgClientUFSGetFileListForAppResponse_File::~CMsgClientUFSGetFileListForAppResponse_File() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientUFSGetFileListForAppResponse.File)
  SharedDtor();
}

void CMsgClientUFSGetFileListForAppResponse_File::SharedDtor() {
  file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sha_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientUFSGetFileListForAppResponse_File::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientUFSGetFileListForAppResponse_File& CMsgClientUFSGetFileListForAppResponse_File::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientUFSGetFileListForAppResponse_File_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientUFSGetFileListForAppResponse_File::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientUFSGetFileListForAppResponse.File)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      file_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      sha_file_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&path_prefix_index_) -
        reinterpret_cast<char*>(&app_id_)) + sizeof(path_prefix_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientUFSGetFileListForAppResponse_File::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientUFSGetFileListForAppResponse_File*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string file_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientUFSGetFileListForAppResponse.File.file_name");
        object = msg->mutable_file_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bytes sha_file = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_sha_file();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint64 time_stamp = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_time_stamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 raw_file_size = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_raw_file_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool is_explicit_delete = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_is_explicit_delete(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 platforms_to_sync = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_platforms_to_sync(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 path_prefix_index = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_path_prefix_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientUFSGetFileListForAppResponse_File::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientUFSGetFileListForAppResponse.File)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string file_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_name().data(), static_cast<int>(this->file_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientUFSGetFileListForAppResponse.File.file_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sha_file = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha_file()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 time_stamp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_time_stamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 raw_file_size = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_raw_file_size(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raw_file_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_explicit_delete = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_is_explicit_delete(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_explicit_delete_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 platforms_to_sync = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_platforms_to_sync(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &platforms_to_sync_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 path_prefix_index = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_path_prefix_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &path_prefix_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientUFSGetFileListForAppResponse.File)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientUFSGetFileListForAppResponse.File)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientUFSGetFileListForAppResponse_File::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientUFSGetFileListForAppResponse.File)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional string file_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), static_cast<int>(this->file_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSGetFileListForAppResponse.File.file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->file_name(), output);
  }

  // optional bytes sha_file = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->sha_file(), output);
  }

  // optional uint64 time_stamp = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->time_stamp(), output);
  }

  // optional uint32 raw_file_size = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->raw_file_size(), output);
  }

  // optional bool is_explicit_delete = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_explicit_delete(), output);
  }

  // optional uint32 platforms_to_sync = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->platforms_to_sync(), output);
  }

  // optional uint32 path_prefix_index = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->path_prefix_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientUFSGetFileListForAppResponse.File)
}

::google::protobuf::uint8* CMsgClientUFSGetFileListForAppResponse_File::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientUFSGetFileListForAppResponse.File)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional string file_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), static_cast<int>(this->file_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSGetFileListForAppResponse.File.file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->file_name(), target);
  }

  // optional bytes sha_file = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->sha_file(), target);
  }

  // optional uint64 time_stamp = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->time_stamp(), target);
  }

  // optional uint32 raw_file_size = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->raw_file_size(), target);
  }

  // optional bool is_explicit_delete = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_explicit_delete(), target);
  }

  // optional uint32 platforms_to_sync = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->platforms_to_sync(), target);
  }

  // optional uint32 path_prefix_index = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->path_prefix_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientUFSGetFileListForAppResponse.File)
  return target;
}

size_t CMsgClientUFSGetFileListForAppResponse_File::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientUFSGetFileListForAppResponse.File)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string file_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

    // optional bytes sha_file = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha_file());
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional uint32 raw_file_size = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raw_file_size());
    }

    // optional uint64 time_stamp = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time_stamp());
    }

    // optional bool is_explicit_delete = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional uint32 platforms_to_sync = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->platforms_to_sync());
    }

    // optional uint32 path_prefix_index = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->path_prefix_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientUFSGetFileListForAppResponse_File::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientUFSGetFileListForAppResponse.File)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSGetFileListForAppResponse_File* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientUFSGetFileListForAppResponse_File>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientUFSGetFileListForAppResponse.File)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientUFSGetFileListForAppResponse.File)
    MergeFrom(*source);
  }
}

void CMsgClientUFSGetFileListForAppResponse_File::MergeFrom(const CMsgClientUFSGetFileListForAppResponse_File& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientUFSGetFileListForAppResponse.File)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      sha_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_file_);
    }
    if (cached_has_bits & 0x00000004u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      raw_file_size_ = from.raw_file_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      time_stamp_ = from.time_stamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_explicit_delete_ = from.is_explicit_delete_;
    }
    if (cached_has_bits & 0x00000040u) {
      platforms_to_sync_ = from.platforms_to_sync_;
    }
    if (cached_has_bits & 0x00000080u) {
      path_prefix_index_ = from.path_prefix_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientUFSGetFileListForAppResponse_File::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientUFSGetFileListForAppResponse.File)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSGetFileListForAppResponse_File::CopyFrom(const CMsgClientUFSGetFileListForAppResponse_File& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientUFSGetFileListForAppResponse.File)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSGetFileListForAppResponse_File::IsInitialized() const {
  return true;
}

void CMsgClientUFSGetFileListForAppResponse_File::Swap(CMsgClientUFSGetFileListForAppResponse_File* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientUFSGetFileListForAppResponse_File::InternalSwap(CMsgClientUFSGetFileListForAppResponse_File* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  file_name_.Swap(&other->file_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sha_file_.Swap(&other->sha_file_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(app_id_, other->app_id_);
  swap(raw_file_size_, other->raw_file_size_);
  swap(time_stamp_, other->time_stamp_);
  swap(is_explicit_delete_, other->is_explicit_delete_);
  swap(platforms_to_sync_, other->platforms_to_sync_);
  swap(path_prefix_index_, other->path_prefix_index_);
}

::google::protobuf::Metadata CMsgClientUFSGetFileListForAppResponse_File::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientUFSGetFileListForAppResponse::InitAsDefaultInstance() {
}
class CMsgClientUFSGetFileListForAppResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientUFSGetFileListForAppResponse::kFilesFieldNumber;
const int CMsgClientUFSGetFileListForAppResponse::kPathPrefixesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientUFSGetFileListForAppResponse::CMsgClientUFSGetFileListForAppResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientUFSGetFileListForAppResponse)
}
CMsgClientUFSGetFileListForAppResponse::CMsgClientUFSGetFileListForAppResponse(const CMsgClientUFSGetFileListForAppResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      files_(from.files_),
      path_prefixes_(from.path_prefixes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientUFSGetFileListForAppResponse)
}

void CMsgClientUFSGetFileListForAppResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientUFSGetFileListForAppResponse_steammessages_5fclientserver_2eproto.base);
}

CMsgClientUFSGetFileListForAppResponse::~CMsgClientUFSGetFileListForAppResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientUFSGetFileListForAppResponse)
  SharedDtor();
}

void CMsgClientUFSGetFileListForAppResponse::SharedDtor() {
}

void CMsgClientUFSGetFileListForAppResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientUFSGetFileListForAppResponse& CMsgClientUFSGetFileListForAppResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientUFSGetFileListForAppResponse_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientUFSGetFileListForAppResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientUFSGetFileListForAppResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  files_.Clear();
  path_prefixes_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientUFSGetFileListForAppResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientUFSGetFileListForAppResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.steam.CMsgClientUFSGetFileListForAppResponse.File files = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgClientUFSGetFileListForAppResponse_File::_InternalParse;
          object = msg->add_files();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // repeated string path_prefixes = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientUFSGetFileListForAppResponse.path_prefixes");
          object = msg->add_path_prefixes();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientUFSGetFileListForAppResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientUFSGetFileListForAppResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CMsgClientUFSGetFileListForAppResponse.File files = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_files()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string path_prefixes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_path_prefixes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path_prefixes(this->path_prefixes_size() - 1).data(),
            static_cast<int>(this->path_prefixes(this->path_prefixes_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientUFSGetFileListForAppResponse.path_prefixes");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientUFSGetFileListForAppResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientUFSGetFileListForAppResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientUFSGetFileListForAppResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientUFSGetFileListForAppResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientUFSGetFileListForAppResponse.File files = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->files_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->files(static_cast<int>(i)),
      output);
  }

  // repeated string path_prefixes = 2;
  for (int i = 0, n = this->path_prefixes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path_prefixes(i).data(), static_cast<int>(this->path_prefixes(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSGetFileListForAppResponse.path_prefixes");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->path_prefixes(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientUFSGetFileListForAppResponse)
}

::google::protobuf::uint8* CMsgClientUFSGetFileListForAppResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientUFSGetFileListForAppResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientUFSGetFileListForAppResponse.File files = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->files_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->files(static_cast<int>(i)), target);
  }

  // repeated string path_prefixes = 2;
  for (int i = 0, n = this->path_prefixes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path_prefixes(i).data(), static_cast<int>(this->path_prefixes(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSGetFileListForAppResponse.path_prefixes");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->path_prefixes(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientUFSGetFileListForAppResponse)
  return target;
}

size_t CMsgClientUFSGetFileListForAppResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientUFSGetFileListForAppResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientUFSGetFileListForAppResponse.File files = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->files_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->files(static_cast<int>(i)));
    }
  }

  // repeated string path_prefixes = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->path_prefixes_size());
  for (int i = 0, n = this->path_prefixes_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->path_prefixes(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientUFSGetFileListForAppResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientUFSGetFileListForAppResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSGetFileListForAppResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientUFSGetFileListForAppResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientUFSGetFileListForAppResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientUFSGetFileListForAppResponse)
    MergeFrom(*source);
  }
}

void CMsgClientUFSGetFileListForAppResponse::MergeFrom(const CMsgClientUFSGetFileListForAppResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientUFSGetFileListForAppResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  files_.MergeFrom(from.files_);
  path_prefixes_.MergeFrom(from.path_prefixes_);
}

void CMsgClientUFSGetFileListForAppResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientUFSGetFileListForAppResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSGetFileListForAppResponse::CopyFrom(const CMsgClientUFSGetFileListForAppResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientUFSGetFileListForAppResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSGetFileListForAppResponse::IsInitialized() const {
  return true;
}

void CMsgClientUFSGetFileListForAppResponse::Swap(CMsgClientUFSGetFileListForAppResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientUFSGetFileListForAppResponse::InternalSwap(CMsgClientUFSGetFileListForAppResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&files_)->InternalSwap(CastToBase(&other->files_));
  path_prefixes_.InternalSwap(CastToBase(&other->path_prefixes_));
}

::google::protobuf::Metadata CMsgClientUFSGetFileListForAppResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientUFSDownloadRequest::InitAsDefaultInstance() {
}
class CMsgClientUFSDownloadRequest::HasBitSetters {
 public:
  static void set_has_app_id(CMsgClientUFSDownloadRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_file_name(CMsgClientUFSDownloadRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_can_handle_http(CMsgClientUFSDownloadRequest* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientUFSDownloadRequest::kAppIdFieldNumber;
const int CMsgClientUFSDownloadRequest::kFileNameFieldNumber;
const int CMsgClientUFSDownloadRequest::kCanHandleHttpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientUFSDownloadRequest::CMsgClientUFSDownloadRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientUFSDownloadRequest)
}
CMsgClientUFSDownloadRequest::CMsgClientUFSDownloadRequest(const CMsgClientUFSDownloadRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_name()) {
    file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&can_handle_http_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(can_handle_http_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientUFSDownloadRequest)
}

void CMsgClientUFSDownloadRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientUFSDownloadRequest_steammessages_5fclientserver_2eproto.base);
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&can_handle_http_) -
      reinterpret_cast<char*>(&app_id_)) + sizeof(can_handle_http_));
}

CMsgClientUFSDownloadRequest::~CMsgClientUFSDownloadRequest() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientUFSDownloadRequest)
  SharedDtor();
}

void CMsgClientUFSDownloadRequest::SharedDtor() {
  file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientUFSDownloadRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientUFSDownloadRequest& CMsgClientUFSDownloadRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientUFSDownloadRequest_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientUFSDownloadRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientUFSDownloadRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    file_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&can_handle_http_) -
        reinterpret_cast<char*>(&app_id_)) + sizeof(can_handle_http_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientUFSDownloadRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientUFSDownloadRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string file_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientUFSDownloadRequest.file_name");
        object = msg->mutable_file_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool can_handle_http = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_can_handle_http(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientUFSDownloadRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientUFSDownloadRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string file_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_name().data(), static_cast<int>(this->file_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientUFSDownloadRequest.file_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool can_handle_http = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_can_handle_http(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_handle_http_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientUFSDownloadRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientUFSDownloadRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientUFSDownloadRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientUFSDownloadRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional string file_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), static_cast<int>(this->file_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSDownloadRequest.file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->file_name(), output);
  }

  // optional bool can_handle_http = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->can_handle_http(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientUFSDownloadRequest)
}

::google::protobuf::uint8* CMsgClientUFSDownloadRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientUFSDownloadRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional string file_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), static_cast<int>(this->file_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSDownloadRequest.file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->file_name(), target);
  }

  // optional bool can_handle_http = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->can_handle_http(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientUFSDownloadRequest)
  return target;
}

size_t CMsgClientUFSDownloadRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientUFSDownloadRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string file_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional bool can_handle_http = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientUFSDownloadRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientUFSDownloadRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSDownloadRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientUFSDownloadRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientUFSDownloadRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientUFSDownloadRequest)
    MergeFrom(*source);
  }
}

void CMsgClientUFSDownloadRequest::MergeFrom(const CMsgClientUFSDownloadRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientUFSDownloadRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      can_handle_http_ = from.can_handle_http_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientUFSDownloadRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientUFSDownloadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSDownloadRequest::CopyFrom(const CMsgClientUFSDownloadRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientUFSDownloadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSDownloadRequest::IsInitialized() const {
  return true;
}

void CMsgClientUFSDownloadRequest::Swap(CMsgClientUFSDownloadRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientUFSDownloadRequest::InternalSwap(CMsgClientUFSDownloadRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  file_name_.Swap(&other->file_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(app_id_, other->app_id_);
  swap(can_handle_http_, other->can_handle_http_);
}

::google::protobuf::Metadata CMsgClientUFSDownloadRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientUFSDownloadResponse::InitAsDefaultInstance() {
}
class CMsgClientUFSDownloadResponse::HasBitSetters {
 public:
  static void set_has_eresult(CMsgClientUFSDownloadResponse* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_app_id(CMsgClientUFSDownloadResponse* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_file_size(CMsgClientUFSDownloadResponse* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_raw_file_size(CMsgClientUFSDownloadResponse* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_sha_file(CMsgClientUFSDownloadResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_time_stamp(CMsgClientUFSDownloadResponse* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_is_explicit_delete(CMsgClientUFSDownloadResponse* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_use_http(CMsgClientUFSDownloadResponse* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_http_host(CMsgClientUFSDownloadResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_http_url(CMsgClientUFSDownloadResponse* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_kv_headers(CMsgClientUFSDownloadResponse* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_use_https(CMsgClientUFSDownloadResponse* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_encrypted(CMsgClientUFSDownloadResponse* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientUFSDownloadResponse::kEresultFieldNumber;
const int CMsgClientUFSDownloadResponse::kAppIdFieldNumber;
const int CMsgClientUFSDownloadResponse::kFileSizeFieldNumber;
const int CMsgClientUFSDownloadResponse::kRawFileSizeFieldNumber;
const int CMsgClientUFSDownloadResponse::kShaFileFieldNumber;
const int CMsgClientUFSDownloadResponse::kTimeStampFieldNumber;
const int CMsgClientUFSDownloadResponse::kIsExplicitDeleteFieldNumber;
const int CMsgClientUFSDownloadResponse::kUseHttpFieldNumber;
const int CMsgClientUFSDownloadResponse::kHttpHostFieldNumber;
const int CMsgClientUFSDownloadResponse::kHttpUrlFieldNumber;
const int CMsgClientUFSDownloadResponse::kKvHeadersFieldNumber;
const int CMsgClientUFSDownloadResponse::kUseHttpsFieldNumber;
const int CMsgClientUFSDownloadResponse::kEncryptedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientUFSDownloadResponse::CMsgClientUFSDownloadResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientUFSDownloadResponse)
}
CMsgClientUFSDownloadResponse::CMsgClientUFSDownloadResponse(const CMsgClientUFSDownloadResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sha_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sha_file()) {
    sha_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_file_);
  }
  http_host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_http_host()) {
    http_host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.http_host_);
  }
  http_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_http_url()) {
    http_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.http_url_);
  }
  kv_headers_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_kv_headers()) {
    kv_headers_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kv_headers_);
  }
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientUFSDownloadResponse)
}

void CMsgClientUFSDownloadResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientUFSDownloadResponse_steammessages_5fclientserver_2eproto.base);
  sha_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  http_host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  http_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kv_headers_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&encrypted_) -
      reinterpret_cast<char*>(&app_id_)) + sizeof(encrypted_));
  eresult_ = 2;
}

CMsgClientUFSDownloadResponse::~CMsgClientUFSDownloadResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientUFSDownloadResponse)
  SharedDtor();
}

void CMsgClientUFSDownloadResponse::SharedDtor() {
  sha_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  http_host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  http_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kv_headers_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientUFSDownloadResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientUFSDownloadResponse& CMsgClientUFSDownloadResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientUFSDownloadResponse_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientUFSDownloadResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientUFSDownloadResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      sha_file_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      http_host_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      http_url_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      kv_headers_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&raw_file_size_) -
        reinterpret_cast<char*>(&app_id_)) + sizeof(raw_file_size_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&is_explicit_delete_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&encrypted_) -
        reinterpret_cast<char*>(&is_explicit_delete_)) + sizeof(encrypted_));
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientUFSDownloadResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientUFSDownloadResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_eresult(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 app_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 file_size = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_file_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 raw_file_size = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_raw_file_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes sha_file = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_sha_file();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint64 time_stamp = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_time_stamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool is_explicit_delete = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_is_explicit_delete(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool use_http = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_use_http(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string http_host = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientUFSDownloadResponse.http_host");
        object = msg->mutable_http_host();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string http_url = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientUFSDownloadResponse.http_url");
        object = msg->mutable_http_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bytes kv_headers = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_kv_headers();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool use_https = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_use_https(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool encrypted = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_encrypted(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientUFSDownloadResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientUFSDownloadResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_eresult(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 app_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 file_size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_file_size(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 raw_file_size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_raw_file_size(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raw_file_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sha_file = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha_file()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 time_stamp = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_time_stamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_explicit_delete = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_is_explicit_delete(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_explicit_delete_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_http = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_use_http(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_http_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string http_host = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_http_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->http_host().data(), static_cast<int>(this->http_host().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientUFSDownloadResponse.http_host");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string http_url = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_http_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->http_url().data(), static_cast<int>(this->http_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientUFSDownloadResponse.http_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes kv_headers = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_kv_headers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_https = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_use_https(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_https_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool encrypted = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {
          HasBitSetters::set_has_encrypted(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientUFSDownloadResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientUFSDownloadResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientUFSDownloadResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientUFSDownloadResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional uint32 app_id = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->app_id(), output);
  }

  // optional uint32 file_size = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->file_size(), output);
  }

  // optional uint32 raw_file_size = 4;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->raw_file_size(), output);
  }

  // optional bytes sha_file = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->sha_file(), output);
  }

  // optional uint64 time_stamp = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->time_stamp(), output);
  }

  // optional bool is_explicit_delete = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_explicit_delete(), output);
  }

  // optional bool use_http = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->use_http(), output);
  }

  // optional string http_host = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->http_host().data(), static_cast<int>(this->http_host().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSDownloadResponse.http_host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->http_host(), output);
  }

  // optional string http_url = 10;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->http_url().data(), static_cast<int>(this->http_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSDownloadResponse.http_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->http_url(), output);
  }

  // optional bytes kv_headers = 11;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->kv_headers(), output);
  }

  // optional bool use_https = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->use_https(), output);
  }

  // optional bool encrypted = 13;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->encrypted(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientUFSDownloadResponse)
}

::google::protobuf::uint8* CMsgClientUFSDownloadResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientUFSDownloadResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // optional uint32 app_id = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->app_id(), target);
  }

  // optional uint32 file_size = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->file_size(), target);
  }

  // optional uint32 raw_file_size = 4;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->raw_file_size(), target);
  }

  // optional bytes sha_file = 5;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->sha_file(), target);
  }

  // optional uint64 time_stamp = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->time_stamp(), target);
  }

  // optional bool is_explicit_delete = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_explicit_delete(), target);
  }

  // optional bool use_http = 8;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->use_http(), target);
  }

  // optional string http_host = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->http_host().data(), static_cast<int>(this->http_host().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSDownloadResponse.http_host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->http_host(), target);
  }

  // optional string http_url = 10;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->http_url().data(), static_cast<int>(this->http_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSDownloadResponse.http_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->http_url(), target);
  }

  // optional bytes kv_headers = 11;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->kv_headers(), target);
  }

  // optional bool use_https = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->use_https(), target);
  }

  // optional bool encrypted = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->encrypted(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientUFSDownloadResponse)
  return target;
}

size_t CMsgClientUFSDownloadResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientUFSDownloadResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes sha_file = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha_file());
    }

    // optional string http_host = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->http_host());
    }

    // optional string http_url = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->http_url());
    }

    // optional bytes kv_headers = 11;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->kv_headers());
    }

    // optional uint32 app_id = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional uint32 file_size = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->file_size());
    }

    // optional uint64 time_stamp = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time_stamp());
    }

    // optional uint32 raw_file_size = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raw_file_size());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional bool is_explicit_delete = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool use_http = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool use_https = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool encrypted = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional int32 eresult = 1 [default = 2];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientUFSDownloadResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientUFSDownloadResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSDownloadResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientUFSDownloadResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientUFSDownloadResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientUFSDownloadResponse)
    MergeFrom(*source);
  }
}

void CMsgClientUFSDownloadResponse::MergeFrom(const CMsgClientUFSDownloadResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientUFSDownloadResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      sha_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_file_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      http_host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.http_host_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      http_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.http_url_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      kv_headers_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kv_headers_);
    }
    if (cached_has_bits & 0x00000010u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      file_size_ = from.file_size_;
    }
    if (cached_has_bits & 0x00000040u) {
      time_stamp_ = from.time_stamp_;
    }
    if (cached_has_bits & 0x00000080u) {
      raw_file_size_ = from.raw_file_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      is_explicit_delete_ = from.is_explicit_delete_;
    }
    if (cached_has_bits & 0x00000200u) {
      use_http_ = from.use_http_;
    }
    if (cached_has_bits & 0x00000400u) {
      use_https_ = from.use_https_;
    }
    if (cached_has_bits & 0x00000800u) {
      encrypted_ = from.encrypted_;
    }
    if (cached_has_bits & 0x00001000u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientUFSDownloadResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientUFSDownloadResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSDownloadResponse::CopyFrom(const CMsgClientUFSDownloadResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientUFSDownloadResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSDownloadResponse::IsInitialized() const {
  return true;
}

void CMsgClientUFSDownloadResponse::Swap(CMsgClientUFSDownloadResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientUFSDownloadResponse::InternalSwap(CMsgClientUFSDownloadResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sha_file_.Swap(&other->sha_file_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  http_host_.Swap(&other->http_host_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  http_url_.Swap(&other->http_url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  kv_headers_.Swap(&other->kv_headers_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(app_id_, other->app_id_);
  swap(file_size_, other->file_size_);
  swap(time_stamp_, other->time_stamp_);
  swap(raw_file_size_, other->raw_file_size_);
  swap(is_explicit_delete_, other->is_explicit_delete_);
  swap(use_http_, other->use_http_);
  swap(use_https_, other->use_https_);
  swap(encrypted_, other->encrypted_);
  swap(eresult_, other->eresult_);
}

::google::protobuf::Metadata CMsgClientUFSDownloadResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientUFSLoginRequest::InitAsDefaultInstance() {
}
class CMsgClientUFSLoginRequest::HasBitSetters {
 public:
  static void set_has_protocol_version(CMsgClientUFSLoginRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_am_session_token(CMsgClientUFSLoginRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientUFSLoginRequest::kProtocolVersionFieldNumber;
const int CMsgClientUFSLoginRequest::kAmSessionTokenFieldNumber;
const int CMsgClientUFSLoginRequest::kAppsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientUFSLoginRequest::CMsgClientUFSLoginRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientUFSLoginRequest)
}
CMsgClientUFSLoginRequest::CMsgClientUFSLoginRequest(const CMsgClientUFSLoginRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      apps_(from.apps_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&am_session_token_, &from.am_session_token_,
    static_cast<size_t>(reinterpret_cast<char*>(&protocol_version_) -
    reinterpret_cast<char*>(&am_session_token_)) + sizeof(protocol_version_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientUFSLoginRequest)
}

void CMsgClientUFSLoginRequest::SharedCtor() {
  ::memset(&am_session_token_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&protocol_version_) -
      reinterpret_cast<char*>(&am_session_token_)) + sizeof(protocol_version_));
}

CMsgClientUFSLoginRequest::~CMsgClientUFSLoginRequest() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientUFSLoginRequest)
  SharedDtor();
}

void CMsgClientUFSLoginRequest::SharedDtor() {
}

void CMsgClientUFSLoginRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientUFSLoginRequest& CMsgClientUFSLoginRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientUFSLoginRequest_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientUFSLoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientUFSLoginRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  apps_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&am_session_token_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&protocol_version_) -
        reinterpret_cast<char*>(&am_session_token_)) + sizeof(protocol_version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientUFSLoginRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientUFSLoginRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 protocol_version = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_protocol_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 am_session_token = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_am_session_token(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint32 apps = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) == 24) {
          do {
            msg->add_apps(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 24 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_apps();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientUFSLoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientUFSLoginRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 protocol_version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_protocol_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protocol_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 am_session_token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_am_session_token(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &am_session_token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 apps = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24u, input, this->mutable_apps())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_apps())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientUFSLoginRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientUFSLoginRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientUFSLoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientUFSLoginRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 protocol_version = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->protocol_version(), output);
  }

  // optional uint64 am_session_token = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->am_session_token(), output);
  }

  // repeated uint32 apps = 3;
  for (int i = 0, n = this->apps_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->apps(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientUFSLoginRequest)
}

::google::protobuf::uint8* CMsgClientUFSLoginRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientUFSLoginRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 protocol_version = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->protocol_version(), target);
  }

  // optional uint64 am_session_token = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->am_session_token(), target);
  }

  // repeated uint32 apps = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(3, this->apps_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientUFSLoginRequest)
  return target;
}

size_t CMsgClientUFSLoginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientUFSLoginRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 apps = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->apps_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->apps_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 am_session_token = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->am_session_token());
    }

    // optional uint32 protocol_version = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->protocol_version());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientUFSLoginRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientUFSLoginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSLoginRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientUFSLoginRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientUFSLoginRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientUFSLoginRequest)
    MergeFrom(*source);
  }
}

void CMsgClientUFSLoginRequest::MergeFrom(const CMsgClientUFSLoginRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientUFSLoginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  apps_.MergeFrom(from.apps_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      am_session_token_ = from.am_session_token_;
    }
    if (cached_has_bits & 0x00000002u) {
      protocol_version_ = from.protocol_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientUFSLoginRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientUFSLoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSLoginRequest::CopyFrom(const CMsgClientUFSLoginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientUFSLoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSLoginRequest::IsInitialized() const {
  return true;
}

void CMsgClientUFSLoginRequest::Swap(CMsgClientUFSLoginRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientUFSLoginRequest::InternalSwap(CMsgClientUFSLoginRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  apps_.InternalSwap(&other->apps_);
  swap(am_session_token_, other->am_session_token_);
  swap(protocol_version_, other->protocol_version_);
}

::google::protobuf::Metadata CMsgClientUFSLoginRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientUFSLoginResponse::InitAsDefaultInstance() {
}
class CMsgClientUFSLoginResponse::HasBitSetters {
 public:
  static void set_has_eresult(CMsgClientUFSLoginResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientUFSLoginResponse::kEresultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientUFSLoginResponse::CMsgClientUFSLoginResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientUFSLoginResponse)
}
CMsgClientUFSLoginResponse::CMsgClientUFSLoginResponse(const CMsgClientUFSLoginResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientUFSLoginResponse)
}

void CMsgClientUFSLoginResponse::SharedCtor() {
  eresult_ = 2;
}

CMsgClientUFSLoginResponse::~CMsgClientUFSLoginResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientUFSLoginResponse)
  SharedDtor();
}

void CMsgClientUFSLoginResponse::SharedDtor() {
}

void CMsgClientUFSLoginResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientUFSLoginResponse& CMsgClientUFSLoginResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientUFSLoginResponse_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientUFSLoginResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientUFSLoginResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  eresult_ = 2;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientUFSLoginResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientUFSLoginResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_eresult(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientUFSLoginResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientUFSLoginResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_eresult(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientUFSLoginResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientUFSLoginResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientUFSLoginResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientUFSLoginResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientUFSLoginResponse)
}

::google::protobuf::uint8* CMsgClientUFSLoginResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientUFSLoginResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientUFSLoginResponse)
  return target;
}

size_t CMsgClientUFSLoginResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientUFSLoginResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 eresult = 1 [default = 2];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->eresult());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientUFSLoginResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientUFSLoginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSLoginResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientUFSLoginResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientUFSLoginResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientUFSLoginResponse)
    MergeFrom(*source);
  }
}

void CMsgClientUFSLoginResponse::MergeFrom(const CMsgClientUFSLoginResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientUFSLoginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_eresult()) {
    set_eresult(from.eresult());
  }
}

void CMsgClientUFSLoginResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientUFSLoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSLoginResponse::CopyFrom(const CMsgClientUFSLoginResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientUFSLoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSLoginResponse::IsInitialized() const {
  return true;
}

void CMsgClientUFSLoginResponse::Swap(CMsgClientUFSLoginResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientUFSLoginResponse::InternalSwap(CMsgClientUFSLoginResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(eresult_, other->eresult_);
}

::google::protobuf::Metadata CMsgClientUFSLoginResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientRequestEncryptedAppTicket::InitAsDefaultInstance() {
}
class CMsgClientRequestEncryptedAppTicket::HasBitSetters {
 public:
  static void set_has_app_id(CMsgClientRequestEncryptedAppTicket* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_userdata(CMsgClientRequestEncryptedAppTicket* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientRequestEncryptedAppTicket::kAppIdFieldNumber;
const int CMsgClientRequestEncryptedAppTicket::kUserdataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientRequestEncryptedAppTicket::CMsgClientRequestEncryptedAppTicket()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientRequestEncryptedAppTicket)
}
CMsgClientRequestEncryptedAppTicket::CMsgClientRequestEncryptedAppTicket(const CMsgClientRequestEncryptedAppTicket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_userdata()) {
    userdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userdata_);
  }
  app_id_ = from.app_id_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientRequestEncryptedAppTicket)
}

void CMsgClientRequestEncryptedAppTicket::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientRequestEncryptedAppTicket_steammessages_5fclientserver_2eproto.base);
  userdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_id_ = 0u;
}

CMsgClientRequestEncryptedAppTicket::~CMsgClientRequestEncryptedAppTicket() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientRequestEncryptedAppTicket)
  SharedDtor();
}

void CMsgClientRequestEncryptedAppTicket::SharedDtor() {
  userdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientRequestEncryptedAppTicket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientRequestEncryptedAppTicket& CMsgClientRequestEncryptedAppTicket::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientRequestEncryptedAppTicket_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientRequestEncryptedAppTicket::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientRequestEncryptedAppTicket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    userdata_.ClearNonDefaultToEmptyNoArena();
  }
  app_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientRequestEncryptedAppTicket::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientRequestEncryptedAppTicket*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes userdata = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_userdata();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientRequestEncryptedAppTicket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientRequestEncryptedAppTicket)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes userdata = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_userdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientRequestEncryptedAppTicket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientRequestEncryptedAppTicket)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientRequestEncryptedAppTicket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientRequestEncryptedAppTicket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional bytes userdata = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->userdata(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientRequestEncryptedAppTicket)
}

::google::protobuf::uint8* CMsgClientRequestEncryptedAppTicket::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientRequestEncryptedAppTicket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional bytes userdata = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->userdata(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientRequestEncryptedAppTicket)
  return target;
}

size_t CMsgClientRequestEncryptedAppTicket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientRequestEncryptedAppTicket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes userdata = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->userdata());
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientRequestEncryptedAppTicket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientRequestEncryptedAppTicket)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientRequestEncryptedAppTicket* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientRequestEncryptedAppTicket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientRequestEncryptedAppTicket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientRequestEncryptedAppTicket)
    MergeFrom(*source);
  }
}

void CMsgClientRequestEncryptedAppTicket::MergeFrom(const CMsgClientRequestEncryptedAppTicket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientRequestEncryptedAppTicket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      userdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userdata_);
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientRequestEncryptedAppTicket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientRequestEncryptedAppTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientRequestEncryptedAppTicket::CopyFrom(const CMsgClientRequestEncryptedAppTicket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientRequestEncryptedAppTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRequestEncryptedAppTicket::IsInitialized() const {
  return true;
}

void CMsgClientRequestEncryptedAppTicket::Swap(CMsgClientRequestEncryptedAppTicket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientRequestEncryptedAppTicket::InternalSwap(CMsgClientRequestEncryptedAppTicket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  userdata_.Swap(&other->userdata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(app_id_, other->app_id_);
}

::google::protobuf::Metadata CMsgClientRequestEncryptedAppTicket::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientRequestEncryptedAppTicketResponse::InitAsDefaultInstance() {
  ::proto::steam::_CMsgClientRequestEncryptedAppTicketResponse_default_instance_._instance.get_mutable()->encrypted_app_ticket_ = const_cast< ::proto::steam::EncryptedAppTicket*>(
      ::proto::steam::EncryptedAppTicket::internal_default_instance());
}
class CMsgClientRequestEncryptedAppTicketResponse::HasBitSetters {
 public:
  static void set_has_app_id(CMsgClientRequestEncryptedAppTicketResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_eresult(CMsgClientRequestEncryptedAppTicketResponse* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static const ::proto::steam::EncryptedAppTicket& encrypted_app_ticket(const CMsgClientRequestEncryptedAppTicketResponse* msg);
  static void set_has_encrypted_app_ticket(CMsgClientRequestEncryptedAppTicketResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::proto::steam::EncryptedAppTicket&
CMsgClientRequestEncryptedAppTicketResponse::HasBitSetters::encrypted_app_ticket(const CMsgClientRequestEncryptedAppTicketResponse* msg) {
  return *msg->encrypted_app_ticket_;
}
void CMsgClientRequestEncryptedAppTicketResponse::clear_encrypted_app_ticket() {
  if (encrypted_app_ticket_ != nullptr) encrypted_app_ticket_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientRequestEncryptedAppTicketResponse::kAppIdFieldNumber;
const int CMsgClientRequestEncryptedAppTicketResponse::kEresultFieldNumber;
const int CMsgClientRequestEncryptedAppTicketResponse::kEncryptedAppTicketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientRequestEncryptedAppTicketResponse::CMsgClientRequestEncryptedAppTicketResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientRequestEncryptedAppTicketResponse)
}
CMsgClientRequestEncryptedAppTicketResponse::CMsgClientRequestEncryptedAppTicketResponse(const CMsgClientRequestEncryptedAppTicketResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_encrypted_app_ticket()) {
    encrypted_app_ticket_ = new ::proto::steam::EncryptedAppTicket(*from.encrypted_app_ticket_);
  } else {
    encrypted_app_ticket_ = nullptr;
  }
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientRequestEncryptedAppTicketResponse)
}

void CMsgClientRequestEncryptedAppTicketResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientRequestEncryptedAppTicketResponse_steammessages_5fclientserver_2eproto.base);
  ::memset(&encrypted_app_ticket_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&app_id_) -
      reinterpret_cast<char*>(&encrypted_app_ticket_)) + sizeof(app_id_));
  eresult_ = 2;
}

CMsgClientRequestEncryptedAppTicketResponse::~CMsgClientRequestEncryptedAppTicketResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientRequestEncryptedAppTicketResponse)
  SharedDtor();
}

void CMsgClientRequestEncryptedAppTicketResponse::SharedDtor() {
  if (this != internal_default_instance()) delete encrypted_app_ticket_;
}

void CMsgClientRequestEncryptedAppTicketResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientRequestEncryptedAppTicketResponse& CMsgClientRequestEncryptedAppTicketResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientRequestEncryptedAppTicketResponse_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientRequestEncryptedAppTicketResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientRequestEncryptedAppTicketResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(encrypted_app_ticket_ != nullptr);
    encrypted_app_ticket_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    app_id_ = 0u;
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientRequestEncryptedAppTicketResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientRequestEncryptedAppTicketResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 eresult = 2 [default = 2];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_eresult(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.steam.EncryptedAppTicket encrypted_app_ticket = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::steam::EncryptedAppTicket::_InternalParse;
        object = msg->mutable_encrypted_app_ticket();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientRequestEncryptedAppTicketResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientRequestEncryptedAppTicketResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 eresult = 2 [default = 2];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_eresult(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.EncryptedAppTicket encrypted_app_ticket = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_encrypted_app_ticket()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientRequestEncryptedAppTicketResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientRequestEncryptedAppTicketResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientRequestEncryptedAppTicketResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientRequestEncryptedAppTicketResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional int32 eresult = 2 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->eresult(), output);
  }

  // optional .proto.steam.EncryptedAppTicket encrypted_app_ticket = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::encrypted_app_ticket(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientRequestEncryptedAppTicketResponse)
}

::google::protobuf::uint8* CMsgClientRequestEncryptedAppTicketResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientRequestEncryptedAppTicketResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional int32 eresult = 2 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->eresult(), target);
  }

  // optional .proto.steam.EncryptedAppTicket encrypted_app_ticket = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::encrypted_app_ticket(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientRequestEncryptedAppTicketResponse)
  return target;
}

size_t CMsgClientRequestEncryptedAppTicketResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientRequestEncryptedAppTicketResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .proto.steam.EncryptedAppTicket encrypted_app_ticket = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *encrypted_app_ticket_);
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional int32 eresult = 2 [default = 2];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientRequestEncryptedAppTicketResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientRequestEncryptedAppTicketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientRequestEncryptedAppTicketResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientRequestEncryptedAppTicketResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientRequestEncryptedAppTicketResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientRequestEncryptedAppTicketResponse)
    MergeFrom(*source);
  }
}

void CMsgClientRequestEncryptedAppTicketResponse::MergeFrom(const CMsgClientRequestEncryptedAppTicketResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientRequestEncryptedAppTicketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_encrypted_app_ticket()->::proto::steam::EncryptedAppTicket::MergeFrom(from.encrypted_app_ticket());
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientRequestEncryptedAppTicketResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientRequestEncryptedAppTicketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientRequestEncryptedAppTicketResponse::CopyFrom(const CMsgClientRequestEncryptedAppTicketResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientRequestEncryptedAppTicketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRequestEncryptedAppTicketResponse::IsInitialized() const {
  return true;
}

void CMsgClientRequestEncryptedAppTicketResponse::Swap(CMsgClientRequestEncryptedAppTicketResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientRequestEncryptedAppTicketResponse::InternalSwap(CMsgClientRequestEncryptedAppTicketResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(encrypted_app_ticket_, other->encrypted_app_ticket_);
  swap(app_id_, other->app_id_);
  swap(eresult_, other->eresult_);
}

::google::protobuf::Metadata CMsgClientRequestEncryptedAppTicketResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientWalletInfoUpdate::InitAsDefaultInstance() {
}
class CMsgClientWalletInfoUpdate::HasBitSetters {
 public:
  static void set_has_has_wallet(CMsgClientWalletInfoUpdate* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_balance(CMsgClientWalletInfoUpdate* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_currency(CMsgClientWalletInfoUpdate* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_balance_delayed(CMsgClientWalletInfoUpdate* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_balance64(CMsgClientWalletInfoUpdate* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_balance64_delayed(CMsgClientWalletInfoUpdate* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientWalletInfoUpdate::kHasWalletFieldNumber;
const int CMsgClientWalletInfoUpdate::kBalanceFieldNumber;
const int CMsgClientWalletInfoUpdate::kCurrencyFieldNumber;
const int CMsgClientWalletInfoUpdate::kBalanceDelayedFieldNumber;
const int CMsgClientWalletInfoUpdate::kBalance64FieldNumber;
const int CMsgClientWalletInfoUpdate::kBalance64DelayedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientWalletInfoUpdate::CMsgClientWalletInfoUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientWalletInfoUpdate)
}
CMsgClientWalletInfoUpdate::CMsgClientWalletInfoUpdate(const CMsgClientWalletInfoUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&has_wallet_, &from.has_wallet_,
    static_cast<size_t>(reinterpret_cast<char*>(&balance64_delayed_) -
    reinterpret_cast<char*>(&has_wallet_)) + sizeof(balance64_delayed_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientWalletInfoUpdate)
}

void CMsgClientWalletInfoUpdate::SharedCtor() {
  ::memset(&has_wallet_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&balance64_delayed_) -
      reinterpret_cast<char*>(&has_wallet_)) + sizeof(balance64_delayed_));
}

CMsgClientWalletInfoUpdate::~CMsgClientWalletInfoUpdate() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientWalletInfoUpdate)
  SharedDtor();
}

void CMsgClientWalletInfoUpdate::SharedDtor() {
}

void CMsgClientWalletInfoUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientWalletInfoUpdate& CMsgClientWalletInfoUpdate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientWalletInfoUpdate_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientWalletInfoUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientWalletInfoUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&has_wallet_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&balance64_delayed_) -
        reinterpret_cast<char*>(&has_wallet_)) + sizeof(balance64_delayed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientWalletInfoUpdate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientWalletInfoUpdate*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool has_wallet = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_has_wallet(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 balance = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_balance(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 currency = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_currency(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 balance_delayed = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_balance_delayed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int64 balance64 = 5 [(.proto.steam.php_output_always_number) = true];
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_balance64(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int64 balance64_delayed = 6 [(.proto.steam.php_output_always_number) = true];
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_balance64_delayed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientWalletInfoUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientWalletInfoUpdate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool has_wallet = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_has_wallet(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_wallet_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 balance = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_balance(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &balance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 currency = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_currency(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 balance_delayed = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_balance_delayed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &balance_delayed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 balance64 = 5 [(.proto.steam.php_output_always_number) = true];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_balance64(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &balance64_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 balance64_delayed = 6 [(.proto.steam.php_output_always_number) = true];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_balance64_delayed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &balance64_delayed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientWalletInfoUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientWalletInfoUpdate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientWalletInfoUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientWalletInfoUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool has_wallet = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->has_wallet(), output);
  }

  // optional int32 balance = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->balance(), output);
  }

  // optional int32 currency = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->currency(), output);
  }

  // optional int32 balance_delayed = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->balance_delayed(), output);
  }

  // optional int64 balance64 = 5 [(.proto.steam.php_output_always_number) = true];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->balance64(), output);
  }

  // optional int64 balance64_delayed = 6 [(.proto.steam.php_output_always_number) = true];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->balance64_delayed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientWalletInfoUpdate)
}

::google::protobuf::uint8* CMsgClientWalletInfoUpdate::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientWalletInfoUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool has_wallet = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->has_wallet(), target);
  }

  // optional int32 balance = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->balance(), target);
  }

  // optional int32 currency = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->currency(), target);
  }

  // optional int32 balance_delayed = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->balance_delayed(), target);
  }

  // optional int64 balance64 = 5 [(.proto.steam.php_output_always_number) = true];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->balance64(), target);
  }

  // optional int64 balance64_delayed = 6 [(.proto.steam.php_output_always_number) = true];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->balance64_delayed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientWalletInfoUpdate)
  return target;
}

size_t CMsgClientWalletInfoUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientWalletInfoUpdate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bool has_wallet = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional int32 balance = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->balance());
    }

    // optional int32 currency = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currency());
    }

    // optional int32 balance_delayed = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->balance_delayed());
    }

    // optional int64 balance64 = 5 [(.proto.steam.php_output_always_number) = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->balance64());
    }

    // optional int64 balance64_delayed = 6 [(.proto.steam.php_output_always_number) = true];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->balance64_delayed());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientWalletInfoUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientWalletInfoUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientWalletInfoUpdate* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientWalletInfoUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientWalletInfoUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientWalletInfoUpdate)
    MergeFrom(*source);
  }
}

void CMsgClientWalletInfoUpdate::MergeFrom(const CMsgClientWalletInfoUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientWalletInfoUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      has_wallet_ = from.has_wallet_;
    }
    if (cached_has_bits & 0x00000002u) {
      balance_ = from.balance_;
    }
    if (cached_has_bits & 0x00000004u) {
      currency_ = from.currency_;
    }
    if (cached_has_bits & 0x00000008u) {
      balance_delayed_ = from.balance_delayed_;
    }
    if (cached_has_bits & 0x00000010u) {
      balance64_ = from.balance64_;
    }
    if (cached_has_bits & 0x00000020u) {
      balance64_delayed_ = from.balance64_delayed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientWalletInfoUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientWalletInfoUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientWalletInfoUpdate::CopyFrom(const CMsgClientWalletInfoUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientWalletInfoUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientWalletInfoUpdate::IsInitialized() const {
  return true;
}

void CMsgClientWalletInfoUpdate::Swap(CMsgClientWalletInfoUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientWalletInfoUpdate::InternalSwap(CMsgClientWalletInfoUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(has_wallet_, other->has_wallet_);
  swap(balance_, other->balance_);
  swap(currency_, other->currency_);
  swap(balance_delayed_, other->balance_delayed_);
  swap(balance64_, other->balance64_);
  swap(balance64_delayed_, other->balance64_delayed_);
}

::google::protobuf::Metadata CMsgClientWalletInfoUpdate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientAppInfoUpdate::InitAsDefaultInstance() {
}
class CMsgClientAppInfoUpdate::HasBitSetters {
 public:
  static void set_has_last_changenumber(CMsgClientAppInfoUpdate* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_send_changelist(CMsgClientAppInfoUpdate* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientAppInfoUpdate::kLastChangenumberFieldNumber;
const int CMsgClientAppInfoUpdate::kSendChangelistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientAppInfoUpdate::CMsgClientAppInfoUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientAppInfoUpdate)
}
CMsgClientAppInfoUpdate::CMsgClientAppInfoUpdate(const CMsgClientAppInfoUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&last_changenumber_, &from.last_changenumber_,
    static_cast<size_t>(reinterpret_cast<char*>(&send_changelist_) -
    reinterpret_cast<char*>(&last_changenumber_)) + sizeof(send_changelist_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientAppInfoUpdate)
}

void CMsgClientAppInfoUpdate::SharedCtor() {
  ::memset(&last_changenumber_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&send_changelist_) -
      reinterpret_cast<char*>(&last_changenumber_)) + sizeof(send_changelist_));
}

CMsgClientAppInfoUpdate::~CMsgClientAppInfoUpdate() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientAppInfoUpdate)
  SharedDtor();
}

void CMsgClientAppInfoUpdate::SharedDtor() {
}

void CMsgClientAppInfoUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientAppInfoUpdate& CMsgClientAppInfoUpdate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientAppInfoUpdate_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientAppInfoUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientAppInfoUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&last_changenumber_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&send_changelist_) -
        reinterpret_cast<char*>(&last_changenumber_)) + sizeof(send_changelist_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientAppInfoUpdate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientAppInfoUpdate*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 last_changenumber = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_last_changenumber(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool send_changelist = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_send_changelist(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientAppInfoUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientAppInfoUpdate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 last_changenumber = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_last_changenumber(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_changenumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool send_changelist = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_send_changelist(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &send_changelist_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientAppInfoUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientAppInfoUpdate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientAppInfoUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientAppInfoUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 last_changenumber = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->last_changenumber(), output);
  }

  // optional bool send_changelist = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->send_changelist(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientAppInfoUpdate)
}

::google::protobuf::uint8* CMsgClientAppInfoUpdate::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientAppInfoUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 last_changenumber = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->last_changenumber(), target);
  }

  // optional bool send_changelist = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->send_changelist(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientAppInfoUpdate)
  return target;
}

size_t CMsgClientAppInfoUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientAppInfoUpdate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 last_changenumber = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_changenumber());
    }

    // optional bool send_changelist = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientAppInfoUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientAppInfoUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientAppInfoUpdate* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientAppInfoUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientAppInfoUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientAppInfoUpdate)
    MergeFrom(*source);
  }
}

void CMsgClientAppInfoUpdate::MergeFrom(const CMsgClientAppInfoUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientAppInfoUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      last_changenumber_ = from.last_changenumber_;
    }
    if (cached_has_bits & 0x00000002u) {
      send_changelist_ = from.send_changelist_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientAppInfoUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientAppInfoUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAppInfoUpdate::CopyFrom(const CMsgClientAppInfoUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientAppInfoUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAppInfoUpdate::IsInitialized() const {
  return true;
}

void CMsgClientAppInfoUpdate::Swap(CMsgClientAppInfoUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientAppInfoUpdate::InternalSwap(CMsgClientAppInfoUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(last_changenumber_, other->last_changenumber_);
  swap(send_changelist_, other->send_changelist_);
}

::google::protobuf::Metadata CMsgClientAppInfoUpdate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientAppInfoChanges::InitAsDefaultInstance() {
}
class CMsgClientAppInfoChanges::HasBitSetters {
 public:
  static void set_has_current_change_number(CMsgClientAppInfoChanges* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_force_full_update(CMsgClientAppInfoChanges* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientAppInfoChanges::kCurrentChangeNumberFieldNumber;
const int CMsgClientAppInfoChanges::kForceFullUpdateFieldNumber;
const int CMsgClientAppInfoChanges::kAppIDsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientAppInfoChanges::CMsgClientAppInfoChanges()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientAppInfoChanges)
}
CMsgClientAppInfoChanges::CMsgClientAppInfoChanges(const CMsgClientAppInfoChanges& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      appids_(from.appids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&current_change_number_, &from.current_change_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&force_full_update_) -
    reinterpret_cast<char*>(&current_change_number_)) + sizeof(force_full_update_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientAppInfoChanges)
}

void CMsgClientAppInfoChanges::SharedCtor() {
  ::memset(&current_change_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&force_full_update_) -
      reinterpret_cast<char*>(&current_change_number_)) + sizeof(force_full_update_));
}

CMsgClientAppInfoChanges::~CMsgClientAppInfoChanges() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientAppInfoChanges)
  SharedDtor();
}

void CMsgClientAppInfoChanges::SharedDtor() {
}

void CMsgClientAppInfoChanges::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientAppInfoChanges& CMsgClientAppInfoChanges::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientAppInfoChanges_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientAppInfoChanges::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientAppInfoChanges)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&current_change_number_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&force_full_update_) -
        reinterpret_cast<char*>(&current_change_number_)) + sizeof(force_full_update_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientAppInfoChanges::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientAppInfoChanges*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 current_change_number = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_current_change_number(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool force_full_update = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_force_full_update(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint32 appIDs = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) == 24) {
          do {
            msg->add_appids(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 24 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_appids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientAppInfoChanges::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientAppInfoChanges)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 current_change_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_current_change_number(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_change_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool force_full_update = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_force_full_update(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_full_update_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 appIDs = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24u, input, this->mutable_appids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_appids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientAppInfoChanges)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientAppInfoChanges)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientAppInfoChanges::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientAppInfoChanges)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 current_change_number = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->current_change_number(), output);
  }

  // optional bool force_full_update = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->force_full_update(), output);
  }

  // repeated uint32 appIDs = 3;
  for (int i = 0, n = this->appids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->appids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientAppInfoChanges)
}

::google::protobuf::uint8* CMsgClientAppInfoChanges::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientAppInfoChanges)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 current_change_number = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->current_change_number(), target);
  }

  // optional bool force_full_update = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->force_full_update(), target);
  }

  // repeated uint32 appIDs = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(3, this->appids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientAppInfoChanges)
  return target;
}

size_t CMsgClientAppInfoChanges::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientAppInfoChanges)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 appIDs = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->appids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->appids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 current_change_number = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->current_change_number());
    }

    // optional bool force_full_update = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientAppInfoChanges::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientAppInfoChanges)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientAppInfoChanges* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientAppInfoChanges>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientAppInfoChanges)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientAppInfoChanges)
    MergeFrom(*source);
  }
}

void CMsgClientAppInfoChanges::MergeFrom(const CMsgClientAppInfoChanges& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientAppInfoChanges)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  appids_.MergeFrom(from.appids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      current_change_number_ = from.current_change_number_;
    }
    if (cached_has_bits & 0x00000002u) {
      force_full_update_ = from.force_full_update_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientAppInfoChanges::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientAppInfoChanges)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAppInfoChanges::CopyFrom(const CMsgClientAppInfoChanges& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientAppInfoChanges)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAppInfoChanges::IsInitialized() const {
  return true;
}

void CMsgClientAppInfoChanges::Swap(CMsgClientAppInfoChanges* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientAppInfoChanges::InternalSwap(CMsgClientAppInfoChanges* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  appids_.InternalSwap(&other->appids_);
  swap(current_change_number_, other->current_change_number_);
  swap(force_full_update_, other->force_full_update_);
}

::google::protobuf::Metadata CMsgClientAppInfoChanges::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientAppInfoRequest_App::InitAsDefaultInstance() {
}
class CMsgClientAppInfoRequest_App::HasBitSetters {
 public:
  static void set_has_app_id(CMsgClientAppInfoRequest_App* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_section_flags(CMsgClientAppInfoRequest_App* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientAppInfoRequest_App::kAppIdFieldNumber;
const int CMsgClientAppInfoRequest_App::kSectionFlagsFieldNumber;
const int CMsgClientAppInfoRequest_App::kSectionCRCFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientAppInfoRequest_App::CMsgClientAppInfoRequest_App()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientAppInfoRequest.App)
}
CMsgClientAppInfoRequest_App::CMsgClientAppInfoRequest_App(const CMsgClientAppInfoRequest_App& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      section_crc_(from.section_crc_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&section_flags_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(section_flags_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientAppInfoRequest.App)
}

void CMsgClientAppInfoRequest_App::SharedCtor() {
  ::memset(&app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&section_flags_) -
      reinterpret_cast<char*>(&app_id_)) + sizeof(section_flags_));
}

CMsgClientAppInfoRequest_App::~CMsgClientAppInfoRequest_App() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientAppInfoRequest.App)
  SharedDtor();
}

void CMsgClientAppInfoRequest_App::SharedDtor() {
}

void CMsgClientAppInfoRequest_App::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientAppInfoRequest_App& CMsgClientAppInfoRequest_App::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientAppInfoRequest_App_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientAppInfoRequest_App::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientAppInfoRequest.App)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  section_crc_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&section_flags_) -
        reinterpret_cast<char*>(&app_id_)) + sizeof(section_flags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientAppInfoRequest_App::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientAppInfoRequest_App*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 section_flags = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_section_flags(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint32 section_CRC = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) == 24) {
          do {
            msg->add_section_crc(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 24 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_section_crc();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientAppInfoRequest_App::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientAppInfoRequest.App)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 section_flags = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_section_flags(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &section_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 section_CRC = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24u, input, this->mutable_section_crc())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_section_crc())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientAppInfoRequest.App)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientAppInfoRequest.App)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientAppInfoRequest_App::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientAppInfoRequest.App)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional uint32 section_flags = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->section_flags(), output);
  }

  // repeated uint32 section_CRC = 3;
  for (int i = 0, n = this->section_crc_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->section_crc(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientAppInfoRequest.App)
}

::google::protobuf::uint8* CMsgClientAppInfoRequest_App::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientAppInfoRequest.App)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional uint32 section_flags = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->section_flags(), target);
  }

  // repeated uint32 section_CRC = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(3, this->section_crc_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientAppInfoRequest.App)
  return target;
}

size_t CMsgClientAppInfoRequest_App::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientAppInfoRequest.App)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 section_CRC = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->section_crc_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->section_crc_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional uint32 section_flags = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->section_flags());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientAppInfoRequest_App::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientAppInfoRequest.App)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientAppInfoRequest_App* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientAppInfoRequest_App>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientAppInfoRequest.App)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientAppInfoRequest.App)
    MergeFrom(*source);
  }
}

void CMsgClientAppInfoRequest_App::MergeFrom(const CMsgClientAppInfoRequest_App& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientAppInfoRequest.App)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  section_crc_.MergeFrom(from.section_crc_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      section_flags_ = from.section_flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientAppInfoRequest_App::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientAppInfoRequest.App)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAppInfoRequest_App::CopyFrom(const CMsgClientAppInfoRequest_App& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientAppInfoRequest.App)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAppInfoRequest_App::IsInitialized() const {
  return true;
}

void CMsgClientAppInfoRequest_App::Swap(CMsgClientAppInfoRequest_App* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientAppInfoRequest_App::InternalSwap(CMsgClientAppInfoRequest_App* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  section_crc_.InternalSwap(&other->section_crc_);
  swap(app_id_, other->app_id_);
  swap(section_flags_, other->section_flags_);
}

::google::protobuf::Metadata CMsgClientAppInfoRequest_App::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientAppInfoRequest::InitAsDefaultInstance() {
}
class CMsgClientAppInfoRequest::HasBitSetters {
 public:
  static void set_has_supports_batches(CMsgClientAppInfoRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientAppInfoRequest::kAppsFieldNumber;
const int CMsgClientAppInfoRequest::kSupportsBatchesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientAppInfoRequest::CMsgClientAppInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientAppInfoRequest)
}
CMsgClientAppInfoRequest::CMsgClientAppInfoRequest(const CMsgClientAppInfoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      apps_(from.apps_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  supports_batches_ = from.supports_batches_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientAppInfoRequest)
}

void CMsgClientAppInfoRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientAppInfoRequest_steammessages_5fclientserver_2eproto.base);
  supports_batches_ = false;
}

CMsgClientAppInfoRequest::~CMsgClientAppInfoRequest() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientAppInfoRequest)
  SharedDtor();
}

void CMsgClientAppInfoRequest::SharedDtor() {
}

void CMsgClientAppInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientAppInfoRequest& CMsgClientAppInfoRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientAppInfoRequest_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientAppInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientAppInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  apps_.Clear();
  supports_batches_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientAppInfoRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientAppInfoRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.steam.CMsgClientAppInfoRequest.App apps = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgClientAppInfoRequest_App::_InternalParse;
          object = msg->add_apps();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // optional bool supports_batches = 2 [default = false];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_supports_batches(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientAppInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientAppInfoRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CMsgClientAppInfoRequest.App apps = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_apps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool supports_batches = 2 [default = false];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_supports_batches(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &supports_batches_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientAppInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientAppInfoRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientAppInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientAppInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientAppInfoRequest.App apps = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->apps_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->apps(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool supports_batches = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->supports_batches(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientAppInfoRequest)
}

::google::protobuf::uint8* CMsgClientAppInfoRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientAppInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientAppInfoRequest.App apps = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->apps_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->apps(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool supports_batches = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->supports_batches(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientAppInfoRequest)
  return target;
}

size_t CMsgClientAppInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientAppInfoRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientAppInfoRequest.App apps = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->apps_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->apps(static_cast<int>(i)));
    }
  }

  // optional bool supports_batches = 2 [default = false];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientAppInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientAppInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientAppInfoRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientAppInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientAppInfoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientAppInfoRequest)
    MergeFrom(*source);
  }
}

void CMsgClientAppInfoRequest::MergeFrom(const CMsgClientAppInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientAppInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  apps_.MergeFrom(from.apps_);
  if (from.has_supports_batches()) {
    set_supports_batches(from.supports_batches());
  }
}

void CMsgClientAppInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientAppInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAppInfoRequest::CopyFrom(const CMsgClientAppInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientAppInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAppInfoRequest::IsInitialized() const {
  return true;
}

void CMsgClientAppInfoRequest::Swap(CMsgClientAppInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientAppInfoRequest::InternalSwap(CMsgClientAppInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&apps_)->InternalSwap(CastToBase(&other->apps_));
  swap(supports_batches_, other->supports_batches_);
}

::google::protobuf::Metadata CMsgClientAppInfoRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientAppInfoResponse_App_Section::InitAsDefaultInstance() {
}
class CMsgClientAppInfoResponse_App_Section::HasBitSetters {
 public:
  static void set_has_section_id(CMsgClientAppInfoResponse_App_Section* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_section_kv(CMsgClientAppInfoResponse_App_Section* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientAppInfoResponse_App_Section::kSectionIdFieldNumber;
const int CMsgClientAppInfoResponse_App_Section::kSectionKvFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientAppInfoResponse_App_Section::CMsgClientAppInfoResponse_App_Section()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientAppInfoResponse.App.Section)
}
CMsgClientAppInfoResponse_App_Section::CMsgClientAppInfoResponse_App_Section(const CMsgClientAppInfoResponse_App_Section& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  section_kv_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_section_kv()) {
    section_kv_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.section_kv_);
  }
  section_id_ = from.section_id_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientAppInfoResponse.App.Section)
}

void CMsgClientAppInfoResponse_App_Section::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientAppInfoResponse_App_Section_steammessages_5fclientserver_2eproto.base);
  section_kv_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  section_id_ = 0u;
}

CMsgClientAppInfoResponse_App_Section::~CMsgClientAppInfoResponse_App_Section() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientAppInfoResponse.App.Section)
  SharedDtor();
}

void CMsgClientAppInfoResponse_App_Section::SharedDtor() {
  section_kv_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientAppInfoResponse_App_Section::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientAppInfoResponse_App_Section& CMsgClientAppInfoResponse_App_Section::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientAppInfoResponse_App_Section_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientAppInfoResponse_App_Section::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientAppInfoResponse.App.Section)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    section_kv_.ClearNonDefaultToEmptyNoArena();
  }
  section_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientAppInfoResponse_App_Section::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientAppInfoResponse_App_Section*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 section_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_section_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes section_kv = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_section_kv();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientAppInfoResponse_App_Section::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientAppInfoResponse.App.Section)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 section_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_section_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &section_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes section_kv = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_section_kv()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientAppInfoResponse.App.Section)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientAppInfoResponse.App.Section)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientAppInfoResponse_App_Section::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientAppInfoResponse.App.Section)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 section_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->section_id(), output);
  }

  // optional bytes section_kv = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->section_kv(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientAppInfoResponse.App.Section)
}

::google::protobuf::uint8* CMsgClientAppInfoResponse_App_Section::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientAppInfoResponse.App.Section)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 section_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->section_id(), target);
  }

  // optional bytes section_kv = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->section_kv(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientAppInfoResponse.App.Section)
  return target;
}

size_t CMsgClientAppInfoResponse_App_Section::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientAppInfoResponse.App.Section)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes section_kv = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->section_kv());
    }

    // optional uint32 section_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->section_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientAppInfoResponse_App_Section::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientAppInfoResponse.App.Section)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientAppInfoResponse_App_Section* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientAppInfoResponse_App_Section>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientAppInfoResponse.App.Section)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientAppInfoResponse.App.Section)
    MergeFrom(*source);
  }
}

void CMsgClientAppInfoResponse_App_Section::MergeFrom(const CMsgClientAppInfoResponse_App_Section& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientAppInfoResponse.App.Section)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      section_kv_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.section_kv_);
    }
    if (cached_has_bits & 0x00000002u) {
      section_id_ = from.section_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientAppInfoResponse_App_Section::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientAppInfoResponse.App.Section)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAppInfoResponse_App_Section::CopyFrom(const CMsgClientAppInfoResponse_App_Section& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientAppInfoResponse.App.Section)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAppInfoResponse_App_Section::IsInitialized() const {
  return true;
}

void CMsgClientAppInfoResponse_App_Section::Swap(CMsgClientAppInfoResponse_App_Section* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientAppInfoResponse_App_Section::InternalSwap(CMsgClientAppInfoResponse_App_Section* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  section_kv_.Swap(&other->section_kv_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(section_id_, other->section_id_);
}

::google::protobuf::Metadata CMsgClientAppInfoResponse_App_Section::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientAppInfoResponse_App::InitAsDefaultInstance() {
}
class CMsgClientAppInfoResponse_App::HasBitSetters {
 public:
  static void set_has_app_id(CMsgClientAppInfoResponse_App* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_change_number(CMsgClientAppInfoResponse_App* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientAppInfoResponse_App::kAppIdFieldNumber;
const int CMsgClientAppInfoResponse_App::kChangeNumberFieldNumber;
const int CMsgClientAppInfoResponse_App::kSectionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientAppInfoResponse_App::CMsgClientAppInfoResponse_App()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientAppInfoResponse.App)
}
CMsgClientAppInfoResponse_App::CMsgClientAppInfoResponse_App(const CMsgClientAppInfoResponse_App& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      sections_(from.sections_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&change_number_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(change_number_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientAppInfoResponse.App)
}

void CMsgClientAppInfoResponse_App::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientAppInfoResponse_App_steammessages_5fclientserver_2eproto.base);
  ::memset(&app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&change_number_) -
      reinterpret_cast<char*>(&app_id_)) + sizeof(change_number_));
}

CMsgClientAppInfoResponse_App::~CMsgClientAppInfoResponse_App() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientAppInfoResponse.App)
  SharedDtor();
}

void CMsgClientAppInfoResponse_App::SharedDtor() {
}

void CMsgClientAppInfoResponse_App::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientAppInfoResponse_App& CMsgClientAppInfoResponse_App::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientAppInfoResponse_App_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientAppInfoResponse_App::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientAppInfoResponse.App)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sections_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&change_number_) -
        reinterpret_cast<char*>(&app_id_)) + sizeof(change_number_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientAppInfoResponse_App::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientAppInfoResponse_App*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 change_number = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_change_number(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.steam.CMsgClientAppInfoResponse.App.Section sections = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgClientAppInfoResponse_App_Section::_InternalParse;
          object = msg->add_sections();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientAppInfoResponse_App::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientAppInfoResponse.App)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 change_number = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_change_number(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &change_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgClientAppInfoResponse.App.Section sections = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_sections()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientAppInfoResponse.App)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientAppInfoResponse.App)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientAppInfoResponse_App::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientAppInfoResponse.App)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional uint32 change_number = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->change_number(), output);
  }

  // repeated .proto.steam.CMsgClientAppInfoResponse.App.Section sections = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sections_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->sections(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientAppInfoResponse.App)
}

::google::protobuf::uint8* CMsgClientAppInfoResponse_App::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientAppInfoResponse.App)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional uint32 change_number = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->change_number(), target);
  }

  // repeated .proto.steam.CMsgClientAppInfoResponse.App.Section sections = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sections_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->sections(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientAppInfoResponse.App)
  return target;
}

size_t CMsgClientAppInfoResponse_App::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientAppInfoResponse.App)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientAppInfoResponse.App.Section sections = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->sections_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sections(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional uint32 change_number = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->change_number());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientAppInfoResponse_App::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientAppInfoResponse.App)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientAppInfoResponse_App* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientAppInfoResponse_App>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientAppInfoResponse.App)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientAppInfoResponse.App)
    MergeFrom(*source);
  }
}

void CMsgClientAppInfoResponse_App::MergeFrom(const CMsgClientAppInfoResponse_App& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientAppInfoResponse.App)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sections_.MergeFrom(from.sections_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      change_number_ = from.change_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientAppInfoResponse_App::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientAppInfoResponse.App)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAppInfoResponse_App::CopyFrom(const CMsgClientAppInfoResponse_App& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientAppInfoResponse.App)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAppInfoResponse_App::IsInitialized() const {
  return true;
}

void CMsgClientAppInfoResponse_App::Swap(CMsgClientAppInfoResponse_App* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientAppInfoResponse_App::InternalSwap(CMsgClientAppInfoResponse_App* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&sections_)->InternalSwap(CastToBase(&other->sections_));
  swap(app_id_, other->app_id_);
  swap(change_number_, other->change_number_);
}

::google::protobuf::Metadata CMsgClientAppInfoResponse_App::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientAppInfoResponse::InitAsDefaultInstance() {
}
class CMsgClientAppInfoResponse::HasBitSetters {
 public:
  static void set_has_apps_pending(CMsgClientAppInfoResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientAppInfoResponse::kAppsFieldNumber;
const int CMsgClientAppInfoResponse::kAppsUnknownFieldNumber;
const int CMsgClientAppInfoResponse::kAppsPendingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientAppInfoResponse::CMsgClientAppInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientAppInfoResponse)
}
CMsgClientAppInfoResponse::CMsgClientAppInfoResponse(const CMsgClientAppInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      apps_(from.apps_),
      apps_unknown_(from.apps_unknown_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  apps_pending_ = from.apps_pending_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientAppInfoResponse)
}

void CMsgClientAppInfoResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientAppInfoResponse_steammessages_5fclientserver_2eproto.base);
  apps_pending_ = 0u;
}

CMsgClientAppInfoResponse::~CMsgClientAppInfoResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientAppInfoResponse)
  SharedDtor();
}

void CMsgClientAppInfoResponse::SharedDtor() {
}

void CMsgClientAppInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientAppInfoResponse& CMsgClientAppInfoResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientAppInfoResponse_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientAppInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientAppInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  apps_.Clear();
  apps_unknown_.Clear();
  apps_pending_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientAppInfoResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientAppInfoResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.steam.CMsgClientAppInfoResponse.App apps = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgClientAppInfoResponse_App::_InternalParse;
          object = msg->add_apps();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // repeated uint32 apps_unknown = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 16) {
          do {
            msg->add_apps_unknown(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 16 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_apps_unknown();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional uint32 apps_pending = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_apps_pending(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientAppInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientAppInfoResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CMsgClientAppInfoResponse.App apps = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_apps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 apps_unknown = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_apps_unknown())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_apps_unknown())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 apps_pending = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_apps_pending(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &apps_pending_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientAppInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientAppInfoResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientAppInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientAppInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientAppInfoResponse.App apps = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->apps_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->apps(static_cast<int>(i)),
      output);
  }

  // repeated uint32 apps_unknown = 2;
  for (int i = 0, n = this->apps_unknown_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->apps_unknown(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 apps_pending = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->apps_pending(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientAppInfoResponse)
}

::google::protobuf::uint8* CMsgClientAppInfoResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientAppInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientAppInfoResponse.App apps = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->apps_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->apps(static_cast<int>(i)), target);
  }

  // repeated uint32 apps_unknown = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->apps_unknown_, target);

  cached_has_bits = _has_bits_[0];
  // optional uint32 apps_pending = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->apps_pending(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientAppInfoResponse)
  return target;
}

size_t CMsgClientAppInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientAppInfoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientAppInfoResponse.App apps = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->apps_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->apps(static_cast<int>(i)));
    }
  }

  // repeated uint32 apps_unknown = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->apps_unknown_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->apps_unknown_size());
    total_size += data_size;
  }

  // optional uint32 apps_pending = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->apps_pending());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientAppInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientAppInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientAppInfoResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientAppInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientAppInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientAppInfoResponse)
    MergeFrom(*source);
  }
}

void CMsgClientAppInfoResponse::MergeFrom(const CMsgClientAppInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientAppInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  apps_.MergeFrom(from.apps_);
  apps_unknown_.MergeFrom(from.apps_unknown_);
  if (from.has_apps_pending()) {
    set_apps_pending(from.apps_pending());
  }
}

void CMsgClientAppInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientAppInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAppInfoResponse::CopyFrom(const CMsgClientAppInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientAppInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAppInfoResponse::IsInitialized() const {
  return true;
}

void CMsgClientAppInfoResponse::Swap(CMsgClientAppInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientAppInfoResponse::InternalSwap(CMsgClientAppInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&apps_)->InternalSwap(CastToBase(&other->apps_));
  apps_unknown_.InternalSwap(&other->apps_unknown_);
  swap(apps_pending_, other->apps_pending_);
}

::google::protobuf::Metadata CMsgClientAppInfoResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientPackageInfoRequest::InitAsDefaultInstance() {
}
class CMsgClientPackageInfoRequest::HasBitSetters {
 public:
  static void set_has_meta_data_only(CMsgClientPackageInfoRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientPackageInfoRequest::kPackageIdsFieldNumber;
const int CMsgClientPackageInfoRequest::kMetaDataOnlyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientPackageInfoRequest::CMsgClientPackageInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientPackageInfoRequest)
}
CMsgClientPackageInfoRequest::CMsgClientPackageInfoRequest(const CMsgClientPackageInfoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      package_ids_(from.package_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  meta_data_only_ = from.meta_data_only_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientPackageInfoRequest)
}

void CMsgClientPackageInfoRequest::SharedCtor() {
  meta_data_only_ = false;
}

CMsgClientPackageInfoRequest::~CMsgClientPackageInfoRequest() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientPackageInfoRequest)
  SharedDtor();
}

void CMsgClientPackageInfoRequest::SharedDtor() {
}

void CMsgClientPackageInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientPackageInfoRequest& CMsgClientPackageInfoRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientPackageInfoRequest_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientPackageInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientPackageInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  package_ids_.Clear();
  meta_data_only_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientPackageInfoRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientPackageInfoRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated uint32 package_ids = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 8) {
          do {
            msg->add_package_ids(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_package_ids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional bool meta_data_only = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_meta_data_only(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientPackageInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientPackageInfoRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 package_ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_package_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_package_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool meta_data_only = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_meta_data_only(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &meta_data_only_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientPackageInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientPackageInfoRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientPackageInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientPackageInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 package_ids = 1;
  for (int i = 0, n = this->package_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->package_ids(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool meta_data_only = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->meta_data_only(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientPackageInfoRequest)
}

::google::protobuf::uint8* CMsgClientPackageInfoRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientPackageInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 package_ids = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->package_ids_, target);

  cached_has_bits = _has_bits_[0];
  // optional bool meta_data_only = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->meta_data_only(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientPackageInfoRequest)
  return target;
}

size_t CMsgClientPackageInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientPackageInfoRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 package_ids = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->package_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->package_ids_size());
    total_size += data_size;
  }

  // optional bool meta_data_only = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientPackageInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientPackageInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientPackageInfoRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientPackageInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientPackageInfoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientPackageInfoRequest)
    MergeFrom(*source);
  }
}

void CMsgClientPackageInfoRequest::MergeFrom(const CMsgClientPackageInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientPackageInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  package_ids_.MergeFrom(from.package_ids_);
  if (from.has_meta_data_only()) {
    set_meta_data_only(from.meta_data_only());
  }
}

void CMsgClientPackageInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientPackageInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientPackageInfoRequest::CopyFrom(const CMsgClientPackageInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientPackageInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPackageInfoRequest::IsInitialized() const {
  return true;
}

void CMsgClientPackageInfoRequest::Swap(CMsgClientPackageInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientPackageInfoRequest::InternalSwap(CMsgClientPackageInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  package_ids_.InternalSwap(&other->package_ids_);
  swap(meta_data_only_, other->meta_data_only_);
}

::google::protobuf::Metadata CMsgClientPackageInfoRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientPackageInfoResponse_Package::InitAsDefaultInstance() {
}
class CMsgClientPackageInfoResponse_Package::HasBitSetters {
 public:
  static void set_has_package_id(CMsgClientPackageInfoResponse_Package* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_change_number(CMsgClientPackageInfoResponse_Package* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_sha(CMsgClientPackageInfoResponse_Package* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_buffer(CMsgClientPackageInfoResponse_Package* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientPackageInfoResponse_Package::kPackageIdFieldNumber;
const int CMsgClientPackageInfoResponse_Package::kChangeNumberFieldNumber;
const int CMsgClientPackageInfoResponse_Package::kShaFieldNumber;
const int CMsgClientPackageInfoResponse_Package::kBufferFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientPackageInfoResponse_Package::CMsgClientPackageInfoResponse_Package()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientPackageInfoResponse.Package)
}
CMsgClientPackageInfoResponse_Package::CMsgClientPackageInfoResponse_Package(const CMsgClientPackageInfoResponse_Package& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sha()) {
    sha_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_);
  }
  buffer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_buffer()) {
    buffer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buffer_);
  }
  ::memcpy(&package_id_, &from.package_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&change_number_) -
    reinterpret_cast<char*>(&package_id_)) + sizeof(change_number_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientPackageInfoResponse.Package)
}

void CMsgClientPackageInfoResponse_Package::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientPackageInfoResponse_Package_steammessages_5fclientserver_2eproto.base);
  sha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buffer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&package_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&change_number_) -
      reinterpret_cast<char*>(&package_id_)) + sizeof(change_number_));
}

CMsgClientPackageInfoResponse_Package::~CMsgClientPackageInfoResponse_Package() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientPackageInfoResponse.Package)
  SharedDtor();
}

void CMsgClientPackageInfoResponse_Package::SharedDtor() {
  sha_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buffer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientPackageInfoResponse_Package::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientPackageInfoResponse_Package& CMsgClientPackageInfoResponse_Package::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientPackageInfoResponse_Package_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientPackageInfoResponse_Package::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientPackageInfoResponse.Package)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      sha_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      buffer_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&package_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&change_number_) -
        reinterpret_cast<char*>(&package_id_)) + sizeof(change_number_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientPackageInfoResponse_Package::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientPackageInfoResponse_Package*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 package_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_package_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 change_number = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_change_number(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes sha = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_sha();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bytes buffer = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_buffer();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientPackageInfoResponse_Package::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientPackageInfoResponse.Package)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 package_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_package_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &package_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 change_number = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_change_number(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &change_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sha = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes buffer = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_buffer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientPackageInfoResponse.Package)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientPackageInfoResponse.Package)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientPackageInfoResponse_Package::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientPackageInfoResponse.Package)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 package_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->package_id(), output);
  }

  // optional uint32 change_number = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->change_number(), output);
  }

  // optional bytes sha = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->sha(), output);
  }

  // optional bytes buffer = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->buffer(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientPackageInfoResponse.Package)
}

::google::protobuf::uint8* CMsgClientPackageInfoResponse_Package::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientPackageInfoResponse.Package)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 package_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->package_id(), target);
  }

  // optional uint32 change_number = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->change_number(), target);
  }

  // optional bytes sha = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->sha(), target);
  }

  // optional bytes buffer = 4;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->buffer(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientPackageInfoResponse.Package)
  return target;
}

size_t CMsgClientPackageInfoResponse_Package::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientPackageInfoResponse.Package)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes sha = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha());
    }

    // optional bytes buffer = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->buffer());
    }

    // optional uint32 package_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->package_id());
    }

    // optional uint32 change_number = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->change_number());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientPackageInfoResponse_Package::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientPackageInfoResponse.Package)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientPackageInfoResponse_Package* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientPackageInfoResponse_Package>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientPackageInfoResponse.Package)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientPackageInfoResponse.Package)
    MergeFrom(*source);
  }
}

void CMsgClientPackageInfoResponse_Package::MergeFrom(const CMsgClientPackageInfoResponse_Package& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientPackageInfoResponse.Package)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      sha_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      buffer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buffer_);
    }
    if (cached_has_bits & 0x00000004u) {
      package_id_ = from.package_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      change_number_ = from.change_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientPackageInfoResponse_Package::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientPackageInfoResponse.Package)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientPackageInfoResponse_Package::CopyFrom(const CMsgClientPackageInfoResponse_Package& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientPackageInfoResponse.Package)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPackageInfoResponse_Package::IsInitialized() const {
  return true;
}

void CMsgClientPackageInfoResponse_Package::Swap(CMsgClientPackageInfoResponse_Package* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientPackageInfoResponse_Package::InternalSwap(CMsgClientPackageInfoResponse_Package* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sha_.Swap(&other->sha_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  buffer_.Swap(&other->buffer_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(package_id_, other->package_id_);
  swap(change_number_, other->change_number_);
}

::google::protobuf::Metadata CMsgClientPackageInfoResponse_Package::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientPackageInfoResponse::InitAsDefaultInstance() {
}
class CMsgClientPackageInfoResponse::HasBitSetters {
 public:
  static void set_has_packages_pending(CMsgClientPackageInfoResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientPackageInfoResponse::kPackagesFieldNumber;
const int CMsgClientPackageInfoResponse::kPackagesUnknownFieldNumber;
const int CMsgClientPackageInfoResponse::kPackagesPendingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientPackageInfoResponse::CMsgClientPackageInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientPackageInfoResponse)
}
CMsgClientPackageInfoResponse::CMsgClientPackageInfoResponse(const CMsgClientPackageInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      packages_(from.packages_),
      packages_unknown_(from.packages_unknown_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  packages_pending_ = from.packages_pending_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientPackageInfoResponse)
}

void CMsgClientPackageInfoResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientPackageInfoResponse_steammessages_5fclientserver_2eproto.base);
  packages_pending_ = 0u;
}

CMsgClientPackageInfoResponse::~CMsgClientPackageInfoResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientPackageInfoResponse)
  SharedDtor();
}

void CMsgClientPackageInfoResponse::SharedDtor() {
}

void CMsgClientPackageInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientPackageInfoResponse& CMsgClientPackageInfoResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientPackageInfoResponse_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientPackageInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientPackageInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  packages_.Clear();
  packages_unknown_.Clear();
  packages_pending_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientPackageInfoResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientPackageInfoResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.steam.CMsgClientPackageInfoResponse.Package packages = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgClientPackageInfoResponse_Package::_InternalParse;
          object = msg->add_packages();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // repeated uint32 packages_unknown = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 16) {
          do {
            msg->add_packages_unknown(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 16 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_packages_unknown();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional uint32 packages_pending = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_packages_pending(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientPackageInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientPackageInfoResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CMsgClientPackageInfoResponse.Package packages = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_packages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 packages_unknown = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_packages_unknown())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_packages_unknown())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 packages_pending = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_packages_pending(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packages_pending_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientPackageInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientPackageInfoResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientPackageInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientPackageInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientPackageInfoResponse.Package packages = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->packages_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->packages(static_cast<int>(i)),
      output);
  }

  // repeated uint32 packages_unknown = 2;
  for (int i = 0, n = this->packages_unknown_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->packages_unknown(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 packages_pending = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->packages_pending(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientPackageInfoResponse)
}

::google::protobuf::uint8* CMsgClientPackageInfoResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientPackageInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientPackageInfoResponse.Package packages = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->packages_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->packages(static_cast<int>(i)), target);
  }

  // repeated uint32 packages_unknown = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->packages_unknown_, target);

  cached_has_bits = _has_bits_[0];
  // optional uint32 packages_pending = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->packages_pending(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientPackageInfoResponse)
  return target;
}

size_t CMsgClientPackageInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientPackageInfoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientPackageInfoResponse.Package packages = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->packages_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->packages(static_cast<int>(i)));
    }
  }

  // repeated uint32 packages_unknown = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->packages_unknown_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->packages_unknown_size());
    total_size += data_size;
  }

  // optional uint32 packages_pending = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->packages_pending());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientPackageInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientPackageInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientPackageInfoResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientPackageInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientPackageInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientPackageInfoResponse)
    MergeFrom(*source);
  }
}

void CMsgClientPackageInfoResponse::MergeFrom(const CMsgClientPackageInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientPackageInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  packages_.MergeFrom(from.packages_);
  packages_unknown_.MergeFrom(from.packages_unknown_);
  if (from.has_packages_pending()) {
    set_packages_pending(from.packages_pending());
  }
}

void CMsgClientPackageInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientPackageInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientPackageInfoResponse::CopyFrom(const CMsgClientPackageInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientPackageInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPackageInfoResponse::IsInitialized() const {
  return true;
}

void CMsgClientPackageInfoResponse::Swap(CMsgClientPackageInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientPackageInfoResponse::InternalSwap(CMsgClientPackageInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&packages_)->InternalSwap(CastToBase(&other->packages_));
  packages_unknown_.InternalSwap(&other->packages_unknown_);
  swap(packages_pending_, other->packages_pending_);
}

::google::protobuf::Metadata CMsgClientPackageInfoResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientPICSChangesSinceRequest::InitAsDefaultInstance() {
}
class CMsgClientPICSChangesSinceRequest::HasBitSetters {
 public:
  static void set_has_since_change_number(CMsgClientPICSChangesSinceRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_send_app_info_changes(CMsgClientPICSChangesSinceRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_send_package_info_changes(CMsgClientPICSChangesSinceRequest* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_num_app_info_cached(CMsgClientPICSChangesSinceRequest* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_num_package_info_cached(CMsgClientPICSChangesSinceRequest* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientPICSChangesSinceRequest::kSinceChangeNumberFieldNumber;
const int CMsgClientPICSChangesSinceRequest::kSendAppInfoChangesFieldNumber;
const int CMsgClientPICSChangesSinceRequest::kSendPackageInfoChangesFieldNumber;
const int CMsgClientPICSChangesSinceRequest::kNumAppInfoCachedFieldNumber;
const int CMsgClientPICSChangesSinceRequest::kNumPackageInfoCachedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientPICSChangesSinceRequest::CMsgClientPICSChangesSinceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientPICSChangesSinceRequest)
}
CMsgClientPICSChangesSinceRequest::CMsgClientPICSChangesSinceRequest(const CMsgClientPICSChangesSinceRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&since_change_number_, &from.since_change_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_package_info_cached_) -
    reinterpret_cast<char*>(&since_change_number_)) + sizeof(num_package_info_cached_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientPICSChangesSinceRequest)
}

void CMsgClientPICSChangesSinceRequest::SharedCtor() {
  ::memset(&since_change_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_package_info_cached_) -
      reinterpret_cast<char*>(&since_change_number_)) + sizeof(num_package_info_cached_));
}

CMsgClientPICSChangesSinceRequest::~CMsgClientPICSChangesSinceRequest() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientPICSChangesSinceRequest)
  SharedDtor();
}

void CMsgClientPICSChangesSinceRequest::SharedDtor() {
}

void CMsgClientPICSChangesSinceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientPICSChangesSinceRequest& CMsgClientPICSChangesSinceRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientPICSChangesSinceRequest_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientPICSChangesSinceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientPICSChangesSinceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&since_change_number_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_package_info_cached_) -
        reinterpret_cast<char*>(&since_change_number_)) + sizeof(num_package_info_cached_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientPICSChangesSinceRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientPICSChangesSinceRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 since_change_number = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_since_change_number(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool send_app_info_changes = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_send_app_info_changes(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool send_package_info_changes = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_send_package_info_changes(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 num_app_info_cached = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_num_app_info_cached(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 num_package_info_cached = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_num_package_info_cached(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientPICSChangesSinceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientPICSChangesSinceRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 since_change_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_since_change_number(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &since_change_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool send_app_info_changes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_send_app_info_changes(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &send_app_info_changes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool send_package_info_changes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_send_package_info_changes(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &send_package_info_changes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_app_info_cached = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_num_app_info_cached(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_app_info_cached_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_package_info_cached = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_num_package_info_cached(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_package_info_cached_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientPICSChangesSinceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientPICSChangesSinceRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientPICSChangesSinceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientPICSChangesSinceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 since_change_number = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->since_change_number(), output);
  }

  // optional bool send_app_info_changes = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->send_app_info_changes(), output);
  }

  // optional bool send_package_info_changes = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->send_package_info_changes(), output);
  }

  // optional uint32 num_app_info_cached = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->num_app_info_cached(), output);
  }

  // optional uint32 num_package_info_cached = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->num_package_info_cached(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientPICSChangesSinceRequest)
}

::google::protobuf::uint8* CMsgClientPICSChangesSinceRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientPICSChangesSinceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 since_change_number = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->since_change_number(), target);
  }

  // optional bool send_app_info_changes = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->send_app_info_changes(), target);
  }

  // optional bool send_package_info_changes = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->send_package_info_changes(), target);
  }

  // optional uint32 num_app_info_cached = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->num_app_info_cached(), target);
  }

  // optional uint32 num_package_info_cached = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->num_package_info_cached(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientPICSChangesSinceRequest)
  return target;
}

size_t CMsgClientPICSChangesSinceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientPICSChangesSinceRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 since_change_number = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->since_change_number());
    }

    // optional bool send_app_info_changes = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool send_package_info_changes = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional uint32 num_app_info_cached = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_app_info_cached());
    }

    // optional uint32 num_package_info_cached = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_package_info_cached());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientPICSChangesSinceRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientPICSChangesSinceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientPICSChangesSinceRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientPICSChangesSinceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientPICSChangesSinceRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientPICSChangesSinceRequest)
    MergeFrom(*source);
  }
}

void CMsgClientPICSChangesSinceRequest::MergeFrom(const CMsgClientPICSChangesSinceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientPICSChangesSinceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      since_change_number_ = from.since_change_number_;
    }
    if (cached_has_bits & 0x00000002u) {
      send_app_info_changes_ = from.send_app_info_changes_;
    }
    if (cached_has_bits & 0x00000004u) {
      send_package_info_changes_ = from.send_package_info_changes_;
    }
    if (cached_has_bits & 0x00000008u) {
      num_app_info_cached_ = from.num_app_info_cached_;
    }
    if (cached_has_bits & 0x00000010u) {
      num_package_info_cached_ = from.num_package_info_cached_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientPICSChangesSinceRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientPICSChangesSinceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientPICSChangesSinceRequest::CopyFrom(const CMsgClientPICSChangesSinceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientPICSChangesSinceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPICSChangesSinceRequest::IsInitialized() const {
  return true;
}

void CMsgClientPICSChangesSinceRequest::Swap(CMsgClientPICSChangesSinceRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientPICSChangesSinceRequest::InternalSwap(CMsgClientPICSChangesSinceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(since_change_number_, other->since_change_number_);
  swap(send_app_info_changes_, other->send_app_info_changes_);
  swap(send_package_info_changes_, other->send_package_info_changes_);
  swap(num_app_info_cached_, other->num_app_info_cached_);
  swap(num_package_info_cached_, other->num_package_info_cached_);
}

::google::protobuf::Metadata CMsgClientPICSChangesSinceRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientPICSChangesSinceResponse_PackageChange::InitAsDefaultInstance() {
}
class CMsgClientPICSChangesSinceResponse_PackageChange::HasBitSetters {
 public:
  static void set_has_packageid(CMsgClientPICSChangesSinceResponse_PackageChange* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_change_number(CMsgClientPICSChangesSinceResponse_PackageChange* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_needs_token(CMsgClientPICSChangesSinceResponse_PackageChange* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientPICSChangesSinceResponse_PackageChange::kPackageidFieldNumber;
const int CMsgClientPICSChangesSinceResponse_PackageChange::kChangeNumberFieldNumber;
const int CMsgClientPICSChangesSinceResponse_PackageChange::kNeedsTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientPICSChangesSinceResponse_PackageChange::CMsgClientPICSChangesSinceResponse_PackageChange()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientPICSChangesSinceResponse.PackageChange)
}
CMsgClientPICSChangesSinceResponse_PackageChange::CMsgClientPICSChangesSinceResponse_PackageChange(const CMsgClientPICSChangesSinceResponse_PackageChange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&packageid_, &from.packageid_,
    static_cast<size_t>(reinterpret_cast<char*>(&needs_token_) -
    reinterpret_cast<char*>(&packageid_)) + sizeof(needs_token_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientPICSChangesSinceResponse.PackageChange)
}

void CMsgClientPICSChangesSinceResponse_PackageChange::SharedCtor() {
  ::memset(&packageid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&needs_token_) -
      reinterpret_cast<char*>(&packageid_)) + sizeof(needs_token_));
}

CMsgClientPICSChangesSinceResponse_PackageChange::~CMsgClientPICSChangesSinceResponse_PackageChange() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientPICSChangesSinceResponse.PackageChange)
  SharedDtor();
}

void CMsgClientPICSChangesSinceResponse_PackageChange::SharedDtor() {
}

void CMsgClientPICSChangesSinceResponse_PackageChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientPICSChangesSinceResponse_PackageChange& CMsgClientPICSChangesSinceResponse_PackageChange::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientPICSChangesSinceResponse_PackageChange_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientPICSChangesSinceResponse_PackageChange::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientPICSChangesSinceResponse.PackageChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&packageid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&needs_token_) -
        reinterpret_cast<char*>(&packageid_)) + sizeof(needs_token_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientPICSChangesSinceResponse_PackageChange::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientPICSChangesSinceResponse_PackageChange*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 packageid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_packageid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 change_number = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_change_number(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool needs_token = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_needs_token(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientPICSChangesSinceResponse_PackageChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientPICSChangesSinceResponse.PackageChange)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 packageid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_packageid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packageid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 change_number = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_change_number(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &change_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool needs_token = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_needs_token(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needs_token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientPICSChangesSinceResponse.PackageChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientPICSChangesSinceResponse.PackageChange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientPICSChangesSinceResponse_PackageChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientPICSChangesSinceResponse.PackageChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 packageid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->packageid(), output);
  }

  // optional uint32 change_number = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->change_number(), output);
  }

  // optional bool needs_token = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->needs_token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientPICSChangesSinceResponse.PackageChange)
}

::google::protobuf::uint8* CMsgClientPICSChangesSinceResponse_PackageChange::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientPICSChangesSinceResponse.PackageChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 packageid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->packageid(), target);
  }

  // optional uint32 change_number = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->change_number(), target);
  }

  // optional bool needs_token = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->needs_token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientPICSChangesSinceResponse.PackageChange)
  return target;
}

size_t CMsgClientPICSChangesSinceResponse_PackageChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientPICSChangesSinceResponse.PackageChange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 packageid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->packageid());
    }

    // optional uint32 change_number = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->change_number());
    }

    // optional bool needs_token = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientPICSChangesSinceResponse_PackageChange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientPICSChangesSinceResponse.PackageChange)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientPICSChangesSinceResponse_PackageChange* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientPICSChangesSinceResponse_PackageChange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientPICSChangesSinceResponse.PackageChange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientPICSChangesSinceResponse.PackageChange)
    MergeFrom(*source);
  }
}

void CMsgClientPICSChangesSinceResponse_PackageChange::MergeFrom(const CMsgClientPICSChangesSinceResponse_PackageChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientPICSChangesSinceResponse.PackageChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      packageid_ = from.packageid_;
    }
    if (cached_has_bits & 0x00000002u) {
      change_number_ = from.change_number_;
    }
    if (cached_has_bits & 0x00000004u) {
      needs_token_ = from.needs_token_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientPICSChangesSinceResponse_PackageChange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientPICSChangesSinceResponse.PackageChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientPICSChangesSinceResponse_PackageChange::CopyFrom(const CMsgClientPICSChangesSinceResponse_PackageChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientPICSChangesSinceResponse.PackageChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPICSChangesSinceResponse_PackageChange::IsInitialized() const {
  return true;
}

void CMsgClientPICSChangesSinceResponse_PackageChange::Swap(CMsgClientPICSChangesSinceResponse_PackageChange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientPICSChangesSinceResponse_PackageChange::InternalSwap(CMsgClientPICSChangesSinceResponse_PackageChange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(packageid_, other->packageid_);
  swap(change_number_, other->change_number_);
  swap(needs_token_, other->needs_token_);
}

::google::protobuf::Metadata CMsgClientPICSChangesSinceResponse_PackageChange::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientPICSChangesSinceResponse_AppChange::InitAsDefaultInstance() {
}
class CMsgClientPICSChangesSinceResponse_AppChange::HasBitSetters {
 public:
  static void set_has_appid(CMsgClientPICSChangesSinceResponse_AppChange* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_change_number(CMsgClientPICSChangesSinceResponse_AppChange* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_needs_token(CMsgClientPICSChangesSinceResponse_AppChange* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientPICSChangesSinceResponse_AppChange::kAppidFieldNumber;
const int CMsgClientPICSChangesSinceResponse_AppChange::kChangeNumberFieldNumber;
const int CMsgClientPICSChangesSinceResponse_AppChange::kNeedsTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientPICSChangesSinceResponse_AppChange::CMsgClientPICSChangesSinceResponse_AppChange()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientPICSChangesSinceResponse.AppChange)
}
CMsgClientPICSChangesSinceResponse_AppChange::CMsgClientPICSChangesSinceResponse_AppChange(const CMsgClientPICSChangesSinceResponse_AppChange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&needs_token_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(needs_token_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientPICSChangesSinceResponse.AppChange)
}

void CMsgClientPICSChangesSinceResponse_AppChange::SharedCtor() {
  ::memset(&appid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&needs_token_) -
      reinterpret_cast<char*>(&appid_)) + sizeof(needs_token_));
}

CMsgClientPICSChangesSinceResponse_AppChange::~CMsgClientPICSChangesSinceResponse_AppChange() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientPICSChangesSinceResponse.AppChange)
  SharedDtor();
}

void CMsgClientPICSChangesSinceResponse_AppChange::SharedDtor() {
}

void CMsgClientPICSChangesSinceResponse_AppChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientPICSChangesSinceResponse_AppChange& CMsgClientPICSChangesSinceResponse_AppChange::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientPICSChangesSinceResponse_AppChange_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientPICSChangesSinceResponse_AppChange::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientPICSChangesSinceResponse.AppChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&needs_token_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(needs_token_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientPICSChangesSinceResponse_AppChange::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientPICSChangesSinceResponse_AppChange*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 change_number = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_change_number(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool needs_token = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_needs_token(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientPICSChangesSinceResponse_AppChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientPICSChangesSinceResponse.AppChange)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 change_number = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_change_number(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &change_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool needs_token = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_needs_token(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needs_token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientPICSChangesSinceResponse.AppChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientPICSChangesSinceResponse.AppChange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientPICSChangesSinceResponse_AppChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientPICSChangesSinceResponse.AppChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint32 change_number = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->change_number(), output);
  }

  // optional bool needs_token = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->needs_token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientPICSChangesSinceResponse.AppChange)
}

::google::protobuf::uint8* CMsgClientPICSChangesSinceResponse_AppChange::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientPICSChangesSinceResponse.AppChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint32 change_number = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->change_number(), target);
  }

  // optional bool needs_token = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->needs_token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientPICSChangesSinceResponse.AppChange)
  return target;
}

size_t CMsgClientPICSChangesSinceResponse_AppChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientPICSChangesSinceResponse.AppChange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional uint32 change_number = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->change_number());
    }

    // optional bool needs_token = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientPICSChangesSinceResponse_AppChange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientPICSChangesSinceResponse.AppChange)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientPICSChangesSinceResponse_AppChange* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientPICSChangesSinceResponse_AppChange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientPICSChangesSinceResponse.AppChange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientPICSChangesSinceResponse.AppChange)
    MergeFrom(*source);
  }
}

void CMsgClientPICSChangesSinceResponse_AppChange::MergeFrom(const CMsgClientPICSChangesSinceResponse_AppChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientPICSChangesSinceResponse.AppChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      change_number_ = from.change_number_;
    }
    if (cached_has_bits & 0x00000004u) {
      needs_token_ = from.needs_token_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientPICSChangesSinceResponse_AppChange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientPICSChangesSinceResponse.AppChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientPICSChangesSinceResponse_AppChange::CopyFrom(const CMsgClientPICSChangesSinceResponse_AppChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientPICSChangesSinceResponse.AppChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPICSChangesSinceResponse_AppChange::IsInitialized() const {
  return true;
}

void CMsgClientPICSChangesSinceResponse_AppChange::Swap(CMsgClientPICSChangesSinceResponse_AppChange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientPICSChangesSinceResponse_AppChange::InternalSwap(CMsgClientPICSChangesSinceResponse_AppChange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(appid_, other->appid_);
  swap(change_number_, other->change_number_);
  swap(needs_token_, other->needs_token_);
}

::google::protobuf::Metadata CMsgClientPICSChangesSinceResponse_AppChange::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientPICSChangesSinceResponse::InitAsDefaultInstance() {
}
class CMsgClientPICSChangesSinceResponse::HasBitSetters {
 public:
  static void set_has_current_change_number(CMsgClientPICSChangesSinceResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_since_change_number(CMsgClientPICSChangesSinceResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_force_full_update(CMsgClientPICSChangesSinceResponse* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_force_full_app_update(CMsgClientPICSChangesSinceResponse* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_force_full_package_update(CMsgClientPICSChangesSinceResponse* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientPICSChangesSinceResponse::kCurrentChangeNumberFieldNumber;
const int CMsgClientPICSChangesSinceResponse::kSinceChangeNumberFieldNumber;
const int CMsgClientPICSChangesSinceResponse::kForceFullUpdateFieldNumber;
const int CMsgClientPICSChangesSinceResponse::kPackageChangesFieldNumber;
const int CMsgClientPICSChangesSinceResponse::kAppChangesFieldNumber;
const int CMsgClientPICSChangesSinceResponse::kForceFullAppUpdateFieldNumber;
const int CMsgClientPICSChangesSinceResponse::kForceFullPackageUpdateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientPICSChangesSinceResponse::CMsgClientPICSChangesSinceResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientPICSChangesSinceResponse)
}
CMsgClientPICSChangesSinceResponse::CMsgClientPICSChangesSinceResponse(const CMsgClientPICSChangesSinceResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      package_changes_(from.package_changes_),
      app_changes_(from.app_changes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&current_change_number_, &from.current_change_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&force_full_package_update_) -
    reinterpret_cast<char*>(&current_change_number_)) + sizeof(force_full_package_update_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientPICSChangesSinceResponse)
}

void CMsgClientPICSChangesSinceResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientPICSChangesSinceResponse_steammessages_5fclientserver_2eproto.base);
  ::memset(&current_change_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&force_full_package_update_) -
      reinterpret_cast<char*>(&current_change_number_)) + sizeof(force_full_package_update_));
}

CMsgClientPICSChangesSinceResponse::~CMsgClientPICSChangesSinceResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientPICSChangesSinceResponse)
  SharedDtor();
}

void CMsgClientPICSChangesSinceResponse::SharedDtor() {
}

void CMsgClientPICSChangesSinceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientPICSChangesSinceResponse& CMsgClientPICSChangesSinceResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientPICSChangesSinceResponse_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientPICSChangesSinceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientPICSChangesSinceResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  package_changes_.Clear();
  app_changes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&current_change_number_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&force_full_package_update_) -
        reinterpret_cast<char*>(&current_change_number_)) + sizeof(force_full_package_update_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientPICSChangesSinceResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientPICSChangesSinceResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 current_change_number = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_current_change_number(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 since_change_number = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_since_change_number(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool force_full_update = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_force_full_update(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.steam.CMsgClientPICSChangesSinceResponse.PackageChange package_changes = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgClientPICSChangesSinceResponse_PackageChange::_InternalParse;
          object = msg->add_package_changes();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // repeated .proto.steam.CMsgClientPICSChangesSinceResponse.AppChange app_changes = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgClientPICSChangesSinceResponse_AppChange::_InternalParse;
          object = msg->add_app_changes();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      // optional bool force_full_app_update = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_force_full_app_update(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool force_full_package_update = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_force_full_package_update(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientPICSChangesSinceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientPICSChangesSinceResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 current_change_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_current_change_number(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_change_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 since_change_number = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_since_change_number(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &since_change_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool force_full_update = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_force_full_update(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_full_update_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgClientPICSChangesSinceResponse.PackageChange package_changes = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_package_changes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgClientPICSChangesSinceResponse.AppChange app_changes = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_app_changes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool force_full_app_update = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_force_full_app_update(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_full_app_update_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool force_full_package_update = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_force_full_package_update(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_full_package_update_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientPICSChangesSinceResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientPICSChangesSinceResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientPICSChangesSinceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientPICSChangesSinceResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 current_change_number = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->current_change_number(), output);
  }

  // optional uint32 since_change_number = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->since_change_number(), output);
  }

  // optional bool force_full_update = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->force_full_update(), output);
  }

  // repeated .proto.steam.CMsgClientPICSChangesSinceResponse.PackageChange package_changes = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->package_changes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->package_changes(static_cast<int>(i)),
      output);
  }

  // repeated .proto.steam.CMsgClientPICSChangesSinceResponse.AppChange app_changes = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->app_changes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->app_changes(static_cast<int>(i)),
      output);
  }

  // optional bool force_full_app_update = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->force_full_app_update(), output);
  }

  // optional bool force_full_package_update = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->force_full_package_update(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientPICSChangesSinceResponse)
}

::google::protobuf::uint8* CMsgClientPICSChangesSinceResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientPICSChangesSinceResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 current_change_number = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->current_change_number(), target);
  }

  // optional uint32 since_change_number = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->since_change_number(), target);
  }

  // optional bool force_full_update = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->force_full_update(), target);
  }

  // repeated .proto.steam.CMsgClientPICSChangesSinceResponse.PackageChange package_changes = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->package_changes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->package_changes(static_cast<int>(i)), target);
  }

  // repeated .proto.steam.CMsgClientPICSChangesSinceResponse.AppChange app_changes = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->app_changes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->app_changes(static_cast<int>(i)), target);
  }

  // optional bool force_full_app_update = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->force_full_app_update(), target);
  }

  // optional bool force_full_package_update = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->force_full_package_update(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientPICSChangesSinceResponse)
  return target;
}

size_t CMsgClientPICSChangesSinceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientPICSChangesSinceResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientPICSChangesSinceResponse.PackageChange package_changes = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->package_changes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->package_changes(static_cast<int>(i)));
    }
  }

  // repeated .proto.steam.CMsgClientPICSChangesSinceResponse.AppChange app_changes = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->app_changes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->app_changes(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 current_change_number = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->current_change_number());
    }

    // optional uint32 since_change_number = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->since_change_number());
    }

    // optional bool force_full_update = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool force_full_app_update = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool force_full_package_update = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientPICSChangesSinceResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientPICSChangesSinceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientPICSChangesSinceResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientPICSChangesSinceResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientPICSChangesSinceResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientPICSChangesSinceResponse)
    MergeFrom(*source);
  }
}

void CMsgClientPICSChangesSinceResponse::MergeFrom(const CMsgClientPICSChangesSinceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientPICSChangesSinceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  package_changes_.MergeFrom(from.package_changes_);
  app_changes_.MergeFrom(from.app_changes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      current_change_number_ = from.current_change_number_;
    }
    if (cached_has_bits & 0x00000002u) {
      since_change_number_ = from.since_change_number_;
    }
    if (cached_has_bits & 0x00000004u) {
      force_full_update_ = from.force_full_update_;
    }
    if (cached_has_bits & 0x00000008u) {
      force_full_app_update_ = from.force_full_app_update_;
    }
    if (cached_has_bits & 0x00000010u) {
      force_full_package_update_ = from.force_full_package_update_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientPICSChangesSinceResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientPICSChangesSinceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientPICSChangesSinceResponse::CopyFrom(const CMsgClientPICSChangesSinceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientPICSChangesSinceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPICSChangesSinceResponse::IsInitialized() const {
  return true;
}

void CMsgClientPICSChangesSinceResponse::Swap(CMsgClientPICSChangesSinceResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientPICSChangesSinceResponse::InternalSwap(CMsgClientPICSChangesSinceResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&package_changes_)->InternalSwap(CastToBase(&other->package_changes_));
  CastToBase(&app_changes_)->InternalSwap(CastToBase(&other->app_changes_));
  swap(current_change_number_, other->current_change_number_);
  swap(since_change_number_, other->since_change_number_);
  swap(force_full_update_, other->force_full_update_);
  swap(force_full_app_update_, other->force_full_app_update_);
  swap(force_full_package_update_, other->force_full_package_update_);
}

::google::protobuf::Metadata CMsgClientPICSChangesSinceResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientPICSProductInfoRequest_AppInfo::InitAsDefaultInstance() {
}
class CMsgClientPICSProductInfoRequest_AppInfo::HasBitSetters {
 public:
  static void set_has_appid(CMsgClientPICSProductInfoRequest_AppInfo* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_access_token(CMsgClientPICSProductInfoRequest_AppInfo* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_only_public(CMsgClientPICSProductInfoRequest_AppInfo* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientPICSProductInfoRequest_AppInfo::kAppidFieldNumber;
const int CMsgClientPICSProductInfoRequest_AppInfo::kAccessTokenFieldNumber;
const int CMsgClientPICSProductInfoRequest_AppInfo::kOnlyPublicFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientPICSProductInfoRequest_AppInfo::CMsgClientPICSProductInfoRequest_AppInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientPICSProductInfoRequest.AppInfo)
}
CMsgClientPICSProductInfoRequest_AppInfo::CMsgClientPICSProductInfoRequest_AppInfo(const CMsgClientPICSProductInfoRequest_AppInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&access_token_, &from.access_token_,
    static_cast<size_t>(reinterpret_cast<char*>(&only_public_) -
    reinterpret_cast<char*>(&access_token_)) + sizeof(only_public_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientPICSProductInfoRequest.AppInfo)
}

void CMsgClientPICSProductInfoRequest_AppInfo::SharedCtor() {
  ::memset(&access_token_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&only_public_) -
      reinterpret_cast<char*>(&access_token_)) + sizeof(only_public_));
}

CMsgClientPICSProductInfoRequest_AppInfo::~CMsgClientPICSProductInfoRequest_AppInfo() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientPICSProductInfoRequest.AppInfo)
  SharedDtor();
}

void CMsgClientPICSProductInfoRequest_AppInfo::SharedDtor() {
}

void CMsgClientPICSProductInfoRequest_AppInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientPICSProductInfoRequest_AppInfo& CMsgClientPICSProductInfoRequest_AppInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientPICSProductInfoRequest_AppInfo_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientPICSProductInfoRequest_AppInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientPICSProductInfoRequest.AppInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&access_token_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&only_public_) -
        reinterpret_cast<char*>(&access_token_)) + sizeof(only_public_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientPICSProductInfoRequest_AppInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientPICSProductInfoRequest_AppInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 access_token = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_access_token(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool only_public = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_only_public(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientPICSProductInfoRequest_AppInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientPICSProductInfoRequest.AppInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 access_token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_access_token(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &access_token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool only_public = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_only_public(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &only_public_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientPICSProductInfoRequest.AppInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientPICSProductInfoRequest.AppInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientPICSProductInfoRequest_AppInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientPICSProductInfoRequest.AppInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint64 access_token = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->access_token(), output);
  }

  // optional bool only_public = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->only_public(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientPICSProductInfoRequest.AppInfo)
}

::google::protobuf::uint8* CMsgClientPICSProductInfoRequest_AppInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientPICSProductInfoRequest.AppInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint64 access_token = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->access_token(), target);
  }

  // optional bool only_public = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->only_public(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientPICSProductInfoRequest.AppInfo)
  return target;
}

size_t CMsgClientPICSProductInfoRequest_AppInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientPICSProductInfoRequest.AppInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 access_token = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->access_token());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional bool only_public = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientPICSProductInfoRequest_AppInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientPICSProductInfoRequest.AppInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientPICSProductInfoRequest_AppInfo* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientPICSProductInfoRequest_AppInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientPICSProductInfoRequest.AppInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientPICSProductInfoRequest.AppInfo)
    MergeFrom(*source);
  }
}

void CMsgClientPICSProductInfoRequest_AppInfo::MergeFrom(const CMsgClientPICSProductInfoRequest_AppInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientPICSProductInfoRequest.AppInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      access_token_ = from.access_token_;
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000004u) {
      only_public_ = from.only_public_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientPICSProductInfoRequest_AppInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientPICSProductInfoRequest.AppInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientPICSProductInfoRequest_AppInfo::CopyFrom(const CMsgClientPICSProductInfoRequest_AppInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientPICSProductInfoRequest.AppInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPICSProductInfoRequest_AppInfo::IsInitialized() const {
  return true;
}

void CMsgClientPICSProductInfoRequest_AppInfo::Swap(CMsgClientPICSProductInfoRequest_AppInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientPICSProductInfoRequest_AppInfo::InternalSwap(CMsgClientPICSProductInfoRequest_AppInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(access_token_, other->access_token_);
  swap(appid_, other->appid_);
  swap(only_public_, other->only_public_);
}

::google::protobuf::Metadata CMsgClientPICSProductInfoRequest_AppInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientPICSProductInfoRequest_PackageInfo::InitAsDefaultInstance() {
}
class CMsgClientPICSProductInfoRequest_PackageInfo::HasBitSetters {
 public:
  static void set_has_packageid(CMsgClientPICSProductInfoRequest_PackageInfo* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_access_token(CMsgClientPICSProductInfoRequest_PackageInfo* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientPICSProductInfoRequest_PackageInfo::kPackageidFieldNumber;
const int CMsgClientPICSProductInfoRequest_PackageInfo::kAccessTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientPICSProductInfoRequest_PackageInfo::CMsgClientPICSProductInfoRequest_PackageInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientPICSProductInfoRequest.PackageInfo)
}
CMsgClientPICSProductInfoRequest_PackageInfo::CMsgClientPICSProductInfoRequest_PackageInfo(const CMsgClientPICSProductInfoRequest_PackageInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&access_token_, &from.access_token_,
    static_cast<size_t>(reinterpret_cast<char*>(&packageid_) -
    reinterpret_cast<char*>(&access_token_)) + sizeof(packageid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientPICSProductInfoRequest.PackageInfo)
}

void CMsgClientPICSProductInfoRequest_PackageInfo::SharedCtor() {
  ::memset(&access_token_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&packageid_) -
      reinterpret_cast<char*>(&access_token_)) + sizeof(packageid_));
}

CMsgClientPICSProductInfoRequest_PackageInfo::~CMsgClientPICSProductInfoRequest_PackageInfo() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientPICSProductInfoRequest.PackageInfo)
  SharedDtor();
}

void CMsgClientPICSProductInfoRequest_PackageInfo::SharedDtor() {
}

void CMsgClientPICSProductInfoRequest_PackageInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientPICSProductInfoRequest_PackageInfo& CMsgClientPICSProductInfoRequest_PackageInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientPICSProductInfoRequest_PackageInfo_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientPICSProductInfoRequest_PackageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientPICSProductInfoRequest.PackageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&access_token_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&packageid_) -
        reinterpret_cast<char*>(&access_token_)) + sizeof(packageid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientPICSProductInfoRequest_PackageInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientPICSProductInfoRequest_PackageInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 packageid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_packageid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 access_token = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_access_token(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientPICSProductInfoRequest_PackageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientPICSProductInfoRequest.PackageInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 packageid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_packageid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packageid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 access_token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_access_token(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &access_token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientPICSProductInfoRequest.PackageInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientPICSProductInfoRequest.PackageInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientPICSProductInfoRequest_PackageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientPICSProductInfoRequest.PackageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 packageid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->packageid(), output);
  }

  // optional uint64 access_token = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->access_token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientPICSProductInfoRequest.PackageInfo)
}

::google::protobuf::uint8* CMsgClientPICSProductInfoRequest_PackageInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientPICSProductInfoRequest.PackageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 packageid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->packageid(), target);
  }

  // optional uint64 access_token = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->access_token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientPICSProductInfoRequest.PackageInfo)
  return target;
}

size_t CMsgClientPICSProductInfoRequest_PackageInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientPICSProductInfoRequest.PackageInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 access_token = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->access_token());
    }

    // optional uint32 packageid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->packageid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientPICSProductInfoRequest_PackageInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientPICSProductInfoRequest.PackageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientPICSProductInfoRequest_PackageInfo* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientPICSProductInfoRequest_PackageInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientPICSProductInfoRequest.PackageInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientPICSProductInfoRequest.PackageInfo)
    MergeFrom(*source);
  }
}

void CMsgClientPICSProductInfoRequest_PackageInfo::MergeFrom(const CMsgClientPICSProductInfoRequest_PackageInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientPICSProductInfoRequest.PackageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      access_token_ = from.access_token_;
    }
    if (cached_has_bits & 0x00000002u) {
      packageid_ = from.packageid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientPICSProductInfoRequest_PackageInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientPICSProductInfoRequest.PackageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientPICSProductInfoRequest_PackageInfo::CopyFrom(const CMsgClientPICSProductInfoRequest_PackageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientPICSProductInfoRequest.PackageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPICSProductInfoRequest_PackageInfo::IsInitialized() const {
  return true;
}

void CMsgClientPICSProductInfoRequest_PackageInfo::Swap(CMsgClientPICSProductInfoRequest_PackageInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientPICSProductInfoRequest_PackageInfo::InternalSwap(CMsgClientPICSProductInfoRequest_PackageInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(access_token_, other->access_token_);
  swap(packageid_, other->packageid_);
}

::google::protobuf::Metadata CMsgClientPICSProductInfoRequest_PackageInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientPICSProductInfoRequest::InitAsDefaultInstance() {
}
class CMsgClientPICSProductInfoRequest::HasBitSetters {
 public:
  static void set_has_meta_data_only(CMsgClientPICSProductInfoRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_num_prev_failed(CMsgClientPICSProductInfoRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientPICSProductInfoRequest::kPackagesFieldNumber;
const int CMsgClientPICSProductInfoRequest::kAppsFieldNumber;
const int CMsgClientPICSProductInfoRequest::kMetaDataOnlyFieldNumber;
const int CMsgClientPICSProductInfoRequest::kNumPrevFailedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientPICSProductInfoRequest::CMsgClientPICSProductInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientPICSProductInfoRequest)
}
CMsgClientPICSProductInfoRequest::CMsgClientPICSProductInfoRequest(const CMsgClientPICSProductInfoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      packages_(from.packages_),
      apps_(from.apps_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&meta_data_only_, &from.meta_data_only_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_prev_failed_) -
    reinterpret_cast<char*>(&meta_data_only_)) + sizeof(num_prev_failed_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientPICSProductInfoRequest)
}

void CMsgClientPICSProductInfoRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientPICSProductInfoRequest_steammessages_5fclientserver_2eproto.base);
  ::memset(&meta_data_only_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_prev_failed_) -
      reinterpret_cast<char*>(&meta_data_only_)) + sizeof(num_prev_failed_));
}

CMsgClientPICSProductInfoRequest::~CMsgClientPICSProductInfoRequest() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientPICSProductInfoRequest)
  SharedDtor();
}

void CMsgClientPICSProductInfoRequest::SharedDtor() {
}

void CMsgClientPICSProductInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientPICSProductInfoRequest& CMsgClientPICSProductInfoRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientPICSProductInfoRequest_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientPICSProductInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientPICSProductInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  packages_.Clear();
  apps_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&meta_data_only_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_prev_failed_) -
        reinterpret_cast<char*>(&meta_data_only_)) + sizeof(num_prev_failed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientPICSProductInfoRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientPICSProductInfoRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.steam.CMsgClientPICSProductInfoRequest.PackageInfo packages = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgClientPICSProductInfoRequest_PackageInfo::_InternalParse;
          object = msg->add_packages();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // repeated .proto.steam.CMsgClientPICSProductInfoRequest.AppInfo apps = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgClientPICSProductInfoRequest_AppInfo::_InternalParse;
          object = msg->add_apps();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // optional bool meta_data_only = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_meta_data_only(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 num_prev_failed = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_num_prev_failed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientPICSProductInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientPICSProductInfoRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CMsgClientPICSProductInfoRequest.PackageInfo packages = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_packages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgClientPICSProductInfoRequest.AppInfo apps = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_apps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool meta_data_only = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_meta_data_only(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &meta_data_only_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_prev_failed = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_num_prev_failed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_prev_failed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientPICSProductInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientPICSProductInfoRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientPICSProductInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientPICSProductInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientPICSProductInfoRequest.PackageInfo packages = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->packages_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->packages(static_cast<int>(i)),
      output);
  }

  // repeated .proto.steam.CMsgClientPICSProductInfoRequest.AppInfo apps = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->apps_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->apps(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool meta_data_only = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->meta_data_only(), output);
  }

  // optional uint32 num_prev_failed = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->num_prev_failed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientPICSProductInfoRequest)
}

::google::protobuf::uint8* CMsgClientPICSProductInfoRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientPICSProductInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientPICSProductInfoRequest.PackageInfo packages = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->packages_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->packages(static_cast<int>(i)), target);
  }

  // repeated .proto.steam.CMsgClientPICSProductInfoRequest.AppInfo apps = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->apps_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->apps(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool meta_data_only = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->meta_data_only(), target);
  }

  // optional uint32 num_prev_failed = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->num_prev_failed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientPICSProductInfoRequest)
  return target;
}

size_t CMsgClientPICSProductInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientPICSProductInfoRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientPICSProductInfoRequest.PackageInfo packages = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->packages_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->packages(static_cast<int>(i)));
    }
  }

  // repeated .proto.steam.CMsgClientPICSProductInfoRequest.AppInfo apps = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->apps_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->apps(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool meta_data_only = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional uint32 num_prev_failed = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_prev_failed());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientPICSProductInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientPICSProductInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientPICSProductInfoRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientPICSProductInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientPICSProductInfoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientPICSProductInfoRequest)
    MergeFrom(*source);
  }
}

void CMsgClientPICSProductInfoRequest::MergeFrom(const CMsgClientPICSProductInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientPICSProductInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  packages_.MergeFrom(from.packages_);
  apps_.MergeFrom(from.apps_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      meta_data_only_ = from.meta_data_only_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_prev_failed_ = from.num_prev_failed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientPICSProductInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientPICSProductInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientPICSProductInfoRequest::CopyFrom(const CMsgClientPICSProductInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientPICSProductInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPICSProductInfoRequest::IsInitialized() const {
  return true;
}

void CMsgClientPICSProductInfoRequest::Swap(CMsgClientPICSProductInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientPICSProductInfoRequest::InternalSwap(CMsgClientPICSProductInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&packages_)->InternalSwap(CastToBase(&other->packages_));
  CastToBase(&apps_)->InternalSwap(CastToBase(&other->apps_));
  swap(meta_data_only_, other->meta_data_only_);
  swap(num_prev_failed_, other->num_prev_failed_);
}

::google::protobuf::Metadata CMsgClientPICSProductInfoRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientPICSProductInfoResponse_AppInfo::InitAsDefaultInstance() {
}
class CMsgClientPICSProductInfoResponse_AppInfo::HasBitSetters {
 public:
  static void set_has_appid(CMsgClientPICSProductInfoResponse_AppInfo* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_change_number(CMsgClientPICSProductInfoResponse_AppInfo* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_missing_token(CMsgClientPICSProductInfoResponse_AppInfo* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_sha(CMsgClientPICSProductInfoResponse_AppInfo* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_buffer(CMsgClientPICSProductInfoResponse_AppInfo* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_only_public(CMsgClientPICSProductInfoResponse_AppInfo* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_size(CMsgClientPICSProductInfoResponse_AppInfo* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientPICSProductInfoResponse_AppInfo::kAppidFieldNumber;
const int CMsgClientPICSProductInfoResponse_AppInfo::kChangeNumberFieldNumber;
const int CMsgClientPICSProductInfoResponse_AppInfo::kMissingTokenFieldNumber;
const int CMsgClientPICSProductInfoResponse_AppInfo::kShaFieldNumber;
const int CMsgClientPICSProductInfoResponse_AppInfo::kBufferFieldNumber;
const int CMsgClientPICSProductInfoResponse_AppInfo::kOnlyPublicFieldNumber;
const int CMsgClientPICSProductInfoResponse_AppInfo::kSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientPICSProductInfoResponse_AppInfo::CMsgClientPICSProductInfoResponse_AppInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientPICSProductInfoResponse.AppInfo)
}
CMsgClientPICSProductInfoResponse_AppInfo::CMsgClientPICSProductInfoResponse_AppInfo(const CMsgClientPICSProductInfoResponse_AppInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sha()) {
    sha_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_);
  }
  buffer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_buffer()) {
    buffer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buffer_);
  }
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientPICSProductInfoResponse.AppInfo)
}

void CMsgClientPICSProductInfoResponse_AppInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientPICSProductInfoResponse_AppInfo_steammessages_5fclientserver_2eproto.base);
  sha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buffer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&appid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&appid_)) + sizeof(size_));
}

CMsgClientPICSProductInfoResponse_AppInfo::~CMsgClientPICSProductInfoResponse_AppInfo() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientPICSProductInfoResponse.AppInfo)
  SharedDtor();
}

void CMsgClientPICSProductInfoResponse_AppInfo::SharedDtor() {
  sha_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buffer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientPICSProductInfoResponse_AppInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientPICSProductInfoResponse_AppInfo& CMsgClientPICSProductInfoResponse_AppInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientPICSProductInfoResponse_AppInfo_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientPICSProductInfoResponse_AppInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientPICSProductInfoResponse.AppInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      sha_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      buffer_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&size_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientPICSProductInfoResponse_AppInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientPICSProductInfoResponse_AppInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 change_number = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_change_number(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool missing_token = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_missing_token(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes sha = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_sha();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bytes buffer = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_buffer();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool only_public = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_only_public(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 size = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientPICSProductInfoResponse_AppInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientPICSProductInfoResponse.AppInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 change_number = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_change_number(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &change_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool missing_token = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_missing_token(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &missing_token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sha = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes buffer = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_buffer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool only_public = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_only_public(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &only_public_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 size = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_size(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientPICSProductInfoResponse.AppInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientPICSProductInfoResponse.AppInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientPICSProductInfoResponse_AppInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientPICSProductInfoResponse.AppInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint32 change_number = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->change_number(), output);
  }

  // optional bool missing_token = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->missing_token(), output);
  }

  // optional bytes sha = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->sha(), output);
  }

  // optional bytes buffer = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->buffer(), output);
  }

  // optional bool only_public = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->only_public(), output);
  }

  // optional uint32 size = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientPICSProductInfoResponse.AppInfo)
}

::google::protobuf::uint8* CMsgClientPICSProductInfoResponse_AppInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientPICSProductInfoResponse.AppInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint32 change_number = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->change_number(), target);
  }

  // optional bool missing_token = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->missing_token(), target);
  }

  // optional bytes sha = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->sha(), target);
  }

  // optional bytes buffer = 5;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->buffer(), target);
  }

  // optional bool only_public = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->only_public(), target);
  }

  // optional uint32 size = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientPICSProductInfoResponse.AppInfo)
  return target;
}

size_t CMsgClientPICSProductInfoResponse_AppInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientPICSProductInfoResponse.AppInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional bytes sha = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha());
    }

    // optional bytes buffer = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->buffer());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional uint32 change_number = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->change_number());
    }

    // optional bool missing_token = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool only_public = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional uint32 size = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientPICSProductInfoResponse_AppInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientPICSProductInfoResponse.AppInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientPICSProductInfoResponse_AppInfo* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientPICSProductInfoResponse_AppInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientPICSProductInfoResponse.AppInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientPICSProductInfoResponse.AppInfo)
    MergeFrom(*source);
  }
}

void CMsgClientPICSProductInfoResponse_AppInfo::MergeFrom(const CMsgClientPICSProductInfoResponse_AppInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientPICSProductInfoResponse.AppInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      sha_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      buffer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buffer_);
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000008u) {
      change_number_ = from.change_number_;
    }
    if (cached_has_bits & 0x00000010u) {
      missing_token_ = from.missing_token_;
    }
    if (cached_has_bits & 0x00000020u) {
      only_public_ = from.only_public_;
    }
    if (cached_has_bits & 0x00000040u) {
      size_ = from.size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientPICSProductInfoResponse_AppInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientPICSProductInfoResponse.AppInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientPICSProductInfoResponse_AppInfo::CopyFrom(const CMsgClientPICSProductInfoResponse_AppInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientPICSProductInfoResponse.AppInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPICSProductInfoResponse_AppInfo::IsInitialized() const {
  return true;
}

void CMsgClientPICSProductInfoResponse_AppInfo::Swap(CMsgClientPICSProductInfoResponse_AppInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientPICSProductInfoResponse_AppInfo::InternalSwap(CMsgClientPICSProductInfoResponse_AppInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sha_.Swap(&other->sha_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  buffer_.Swap(&other->buffer_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(appid_, other->appid_);
  swap(change_number_, other->change_number_);
  swap(missing_token_, other->missing_token_);
  swap(only_public_, other->only_public_);
  swap(size_, other->size_);
}

::google::protobuf::Metadata CMsgClientPICSProductInfoResponse_AppInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientPICSProductInfoResponse_PackageInfo::InitAsDefaultInstance() {
}
class CMsgClientPICSProductInfoResponse_PackageInfo::HasBitSetters {
 public:
  static void set_has_packageid(CMsgClientPICSProductInfoResponse_PackageInfo* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_change_number(CMsgClientPICSProductInfoResponse_PackageInfo* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_missing_token(CMsgClientPICSProductInfoResponse_PackageInfo* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_sha(CMsgClientPICSProductInfoResponse_PackageInfo* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_buffer(CMsgClientPICSProductInfoResponse_PackageInfo* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_size(CMsgClientPICSProductInfoResponse_PackageInfo* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientPICSProductInfoResponse_PackageInfo::kPackageidFieldNumber;
const int CMsgClientPICSProductInfoResponse_PackageInfo::kChangeNumberFieldNumber;
const int CMsgClientPICSProductInfoResponse_PackageInfo::kMissingTokenFieldNumber;
const int CMsgClientPICSProductInfoResponse_PackageInfo::kShaFieldNumber;
const int CMsgClientPICSProductInfoResponse_PackageInfo::kBufferFieldNumber;
const int CMsgClientPICSProductInfoResponse_PackageInfo::kSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientPICSProductInfoResponse_PackageInfo::CMsgClientPICSProductInfoResponse_PackageInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientPICSProductInfoResponse.PackageInfo)
}
CMsgClientPICSProductInfoResponse_PackageInfo::CMsgClientPICSProductInfoResponse_PackageInfo(const CMsgClientPICSProductInfoResponse_PackageInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sha()) {
    sha_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_);
  }
  buffer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_buffer()) {
    buffer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buffer_);
  }
  ::memcpy(&packageid_, &from.packageid_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&packageid_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientPICSProductInfoResponse.PackageInfo)
}

void CMsgClientPICSProductInfoResponse_PackageInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientPICSProductInfoResponse_PackageInfo_steammessages_5fclientserver_2eproto.base);
  sha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buffer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&packageid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&packageid_)) + sizeof(size_));
}

CMsgClientPICSProductInfoResponse_PackageInfo::~CMsgClientPICSProductInfoResponse_PackageInfo() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientPICSProductInfoResponse.PackageInfo)
  SharedDtor();
}

void CMsgClientPICSProductInfoResponse_PackageInfo::SharedDtor() {
  sha_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buffer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientPICSProductInfoResponse_PackageInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientPICSProductInfoResponse_PackageInfo& CMsgClientPICSProductInfoResponse_PackageInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientPICSProductInfoResponse_PackageInfo_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientPICSProductInfoResponse_PackageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientPICSProductInfoResponse.PackageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      sha_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      buffer_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&packageid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&size_) -
        reinterpret_cast<char*>(&packageid_)) + sizeof(size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientPICSProductInfoResponse_PackageInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientPICSProductInfoResponse_PackageInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 packageid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_packageid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 change_number = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_change_number(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool missing_token = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_missing_token(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes sha = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_sha();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bytes buffer = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_buffer();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 size = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientPICSProductInfoResponse_PackageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientPICSProductInfoResponse.PackageInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 packageid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_packageid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packageid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 change_number = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_change_number(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &change_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool missing_token = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_missing_token(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &missing_token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sha = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes buffer = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_buffer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 size = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_size(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientPICSProductInfoResponse.PackageInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientPICSProductInfoResponse.PackageInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientPICSProductInfoResponse_PackageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientPICSProductInfoResponse.PackageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 packageid = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->packageid(), output);
  }

  // optional uint32 change_number = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->change_number(), output);
  }

  // optional bool missing_token = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->missing_token(), output);
  }

  // optional bytes sha = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->sha(), output);
  }

  // optional bytes buffer = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->buffer(), output);
  }

  // optional uint32 size = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientPICSProductInfoResponse.PackageInfo)
}

::google::protobuf::uint8* CMsgClientPICSProductInfoResponse_PackageInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientPICSProductInfoResponse.PackageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 packageid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->packageid(), target);
  }

  // optional uint32 change_number = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->change_number(), target);
  }

  // optional bool missing_token = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->missing_token(), target);
  }

  // optional bytes sha = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->sha(), target);
  }

  // optional bytes buffer = 5;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->buffer(), target);
  }

  // optional uint32 size = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientPICSProductInfoResponse.PackageInfo)
  return target;
}

size_t CMsgClientPICSProductInfoResponse_PackageInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientPICSProductInfoResponse.PackageInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bytes sha = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha());
    }

    // optional bytes buffer = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->buffer());
    }

    // optional uint32 packageid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->packageid());
    }

    // optional uint32 change_number = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->change_number());
    }

    // optional bool missing_token = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional uint32 size = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientPICSProductInfoResponse_PackageInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientPICSProductInfoResponse.PackageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientPICSProductInfoResponse_PackageInfo* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientPICSProductInfoResponse_PackageInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientPICSProductInfoResponse.PackageInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientPICSProductInfoResponse.PackageInfo)
    MergeFrom(*source);
  }
}

void CMsgClientPICSProductInfoResponse_PackageInfo::MergeFrom(const CMsgClientPICSProductInfoResponse_PackageInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientPICSProductInfoResponse.PackageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      sha_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      buffer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buffer_);
    }
    if (cached_has_bits & 0x00000004u) {
      packageid_ = from.packageid_;
    }
    if (cached_has_bits & 0x00000008u) {
      change_number_ = from.change_number_;
    }
    if (cached_has_bits & 0x00000010u) {
      missing_token_ = from.missing_token_;
    }
    if (cached_has_bits & 0x00000020u) {
      size_ = from.size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientPICSProductInfoResponse_PackageInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientPICSProductInfoResponse.PackageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientPICSProductInfoResponse_PackageInfo::CopyFrom(const CMsgClientPICSProductInfoResponse_PackageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientPICSProductInfoResponse.PackageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPICSProductInfoResponse_PackageInfo::IsInitialized() const {
  return true;
}

void CMsgClientPICSProductInfoResponse_PackageInfo::Swap(CMsgClientPICSProductInfoResponse_PackageInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientPICSProductInfoResponse_PackageInfo::InternalSwap(CMsgClientPICSProductInfoResponse_PackageInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sha_.Swap(&other->sha_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  buffer_.Swap(&other->buffer_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(packageid_, other->packageid_);
  swap(change_number_, other->change_number_);
  swap(missing_token_, other->missing_token_);
  swap(size_, other->size_);
}

::google::protobuf::Metadata CMsgClientPICSProductInfoResponse_PackageInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientPICSProductInfoResponse::InitAsDefaultInstance() {
}
class CMsgClientPICSProductInfoResponse::HasBitSetters {
 public:
  static void set_has_meta_data_only(CMsgClientPICSProductInfoResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_response_pending(CMsgClientPICSProductInfoResponse* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_http_min_size(CMsgClientPICSProductInfoResponse* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_http_host(CMsgClientPICSProductInfoResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientPICSProductInfoResponse::kAppsFieldNumber;
const int CMsgClientPICSProductInfoResponse::kUnknownAppidsFieldNumber;
const int CMsgClientPICSProductInfoResponse::kPackagesFieldNumber;
const int CMsgClientPICSProductInfoResponse::kUnknownPackageidsFieldNumber;
const int CMsgClientPICSProductInfoResponse::kMetaDataOnlyFieldNumber;
const int CMsgClientPICSProductInfoResponse::kResponsePendingFieldNumber;
const int CMsgClientPICSProductInfoResponse::kHttpMinSizeFieldNumber;
const int CMsgClientPICSProductInfoResponse::kHttpHostFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientPICSProductInfoResponse::CMsgClientPICSProductInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientPICSProductInfoResponse)
}
CMsgClientPICSProductInfoResponse::CMsgClientPICSProductInfoResponse(const CMsgClientPICSProductInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      apps_(from.apps_),
      unknown_appids_(from.unknown_appids_),
      packages_(from.packages_),
      unknown_packageids_(from.unknown_packageids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  http_host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_http_host()) {
    http_host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.http_host_);
  }
  ::memcpy(&meta_data_only_, &from.meta_data_only_,
    static_cast<size_t>(reinterpret_cast<char*>(&http_min_size_) -
    reinterpret_cast<char*>(&meta_data_only_)) + sizeof(http_min_size_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientPICSProductInfoResponse)
}

void CMsgClientPICSProductInfoResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientPICSProductInfoResponse_steammessages_5fclientserver_2eproto.base);
  http_host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&meta_data_only_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&http_min_size_) -
      reinterpret_cast<char*>(&meta_data_only_)) + sizeof(http_min_size_));
}

CMsgClientPICSProductInfoResponse::~CMsgClientPICSProductInfoResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientPICSProductInfoResponse)
  SharedDtor();
}

void CMsgClientPICSProductInfoResponse::SharedDtor() {
  http_host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientPICSProductInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientPICSProductInfoResponse& CMsgClientPICSProductInfoResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientPICSProductInfoResponse_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientPICSProductInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientPICSProductInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  apps_.Clear();
  unknown_appids_.Clear();
  packages_.Clear();
  unknown_packageids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    http_host_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&meta_data_only_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&http_min_size_) -
        reinterpret_cast<char*>(&meta_data_only_)) + sizeof(http_min_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientPICSProductInfoResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientPICSProductInfoResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.steam.CMsgClientPICSProductInfoResponse.AppInfo apps = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgClientPICSProductInfoResponse_AppInfo::_InternalParse;
          object = msg->add_apps();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // repeated uint32 unknown_appids = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 16) {
          do {
            msg->add_unknown_appids(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 16 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_unknown_appids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated .proto.steam.CMsgClientPICSProductInfoResponse.PackageInfo packages = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgClientPICSProductInfoResponse_PackageInfo::_InternalParse;
          object = msg->add_packages();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // repeated uint32 unknown_packageids = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) == 32) {
          do {
            msg->add_unknown_packageids(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 32 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_unknown_packageids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional bool meta_data_only = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_meta_data_only(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool response_pending = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_response_pending(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 http_min_size = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_http_min_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string http_host = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientPICSProductInfoResponse.http_host");
        object = msg->mutable_http_host();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientPICSProductInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientPICSProductInfoResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CMsgClientPICSProductInfoResponse.AppInfo apps = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_apps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 unknown_appids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_unknown_appids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_unknown_appids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgClientPICSProductInfoResponse.PackageInfo packages = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_packages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 unknown_packageids = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32u, input, this->mutable_unknown_packageids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_unknown_packageids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool meta_data_only = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_meta_data_only(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &meta_data_only_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool response_pending = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_response_pending(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &response_pending_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 http_min_size = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_http_min_size(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &http_min_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string http_host = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_http_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->http_host().data(), static_cast<int>(this->http_host().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientPICSProductInfoResponse.http_host");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientPICSProductInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientPICSProductInfoResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientPICSProductInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientPICSProductInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientPICSProductInfoResponse.AppInfo apps = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->apps_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->apps(static_cast<int>(i)),
      output);
  }

  // repeated uint32 unknown_appids = 2;
  for (int i = 0, n = this->unknown_appids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->unknown_appids(i), output);
  }

  // repeated .proto.steam.CMsgClientPICSProductInfoResponse.PackageInfo packages = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->packages_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->packages(static_cast<int>(i)),
      output);
  }

  // repeated uint32 unknown_packageids = 4;
  for (int i = 0, n = this->unknown_packageids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->unknown_packageids(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool meta_data_only = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->meta_data_only(), output);
  }

  // optional bool response_pending = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->response_pending(), output);
  }

  // optional uint32 http_min_size = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->http_min_size(), output);
  }

  // optional string http_host = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->http_host().data(), static_cast<int>(this->http_host().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientPICSProductInfoResponse.http_host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->http_host(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientPICSProductInfoResponse)
}

::google::protobuf::uint8* CMsgClientPICSProductInfoResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientPICSProductInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientPICSProductInfoResponse.AppInfo apps = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->apps_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->apps(static_cast<int>(i)), target);
  }

  // repeated uint32 unknown_appids = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->unknown_appids_, target);

  // repeated .proto.steam.CMsgClientPICSProductInfoResponse.PackageInfo packages = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->packages_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->packages(static_cast<int>(i)), target);
  }

  // repeated uint32 unknown_packageids = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(4, this->unknown_packageids_, target);

  cached_has_bits = _has_bits_[0];
  // optional bool meta_data_only = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->meta_data_only(), target);
  }

  // optional bool response_pending = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->response_pending(), target);
  }

  // optional uint32 http_min_size = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->http_min_size(), target);
  }

  // optional string http_host = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->http_host().data(), static_cast<int>(this->http_host().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientPICSProductInfoResponse.http_host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->http_host(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientPICSProductInfoResponse)
  return target;
}

size_t CMsgClientPICSProductInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientPICSProductInfoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientPICSProductInfoResponse.AppInfo apps = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->apps_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->apps(static_cast<int>(i)));
    }
  }

  // repeated uint32 unknown_appids = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->unknown_appids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->unknown_appids_size());
    total_size += data_size;
  }

  // repeated .proto.steam.CMsgClientPICSProductInfoResponse.PackageInfo packages = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->packages_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->packages(static_cast<int>(i)));
    }
  }

  // repeated uint32 unknown_packageids = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->unknown_packageids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->unknown_packageids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string http_host = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->http_host());
    }

    // optional bool meta_data_only = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool response_pending = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional uint32 http_min_size = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->http_min_size());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientPICSProductInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientPICSProductInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientPICSProductInfoResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientPICSProductInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientPICSProductInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientPICSProductInfoResponse)
    MergeFrom(*source);
  }
}

void CMsgClientPICSProductInfoResponse::MergeFrom(const CMsgClientPICSProductInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientPICSProductInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  apps_.MergeFrom(from.apps_);
  unknown_appids_.MergeFrom(from.unknown_appids_);
  packages_.MergeFrom(from.packages_);
  unknown_packageids_.MergeFrom(from.unknown_packageids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      http_host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.http_host_);
    }
    if (cached_has_bits & 0x00000002u) {
      meta_data_only_ = from.meta_data_only_;
    }
    if (cached_has_bits & 0x00000004u) {
      response_pending_ = from.response_pending_;
    }
    if (cached_has_bits & 0x00000008u) {
      http_min_size_ = from.http_min_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientPICSProductInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientPICSProductInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientPICSProductInfoResponse::CopyFrom(const CMsgClientPICSProductInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientPICSProductInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPICSProductInfoResponse::IsInitialized() const {
  return true;
}

void CMsgClientPICSProductInfoResponse::Swap(CMsgClientPICSProductInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientPICSProductInfoResponse::InternalSwap(CMsgClientPICSProductInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&apps_)->InternalSwap(CastToBase(&other->apps_));
  unknown_appids_.InternalSwap(&other->unknown_appids_);
  CastToBase(&packages_)->InternalSwap(CastToBase(&other->packages_));
  unknown_packageids_.InternalSwap(&other->unknown_packageids_);
  http_host_.Swap(&other->http_host_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(meta_data_only_, other->meta_data_only_);
  swap(response_pending_, other->response_pending_);
  swap(http_min_size_, other->http_min_size_);
}

::google::protobuf::Metadata CMsgClientPICSProductInfoResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientPICSAccessTokenRequest::InitAsDefaultInstance() {
}
class CMsgClientPICSAccessTokenRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientPICSAccessTokenRequest::kPackageidsFieldNumber;
const int CMsgClientPICSAccessTokenRequest::kAppidsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientPICSAccessTokenRequest::CMsgClientPICSAccessTokenRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientPICSAccessTokenRequest)
}
CMsgClientPICSAccessTokenRequest::CMsgClientPICSAccessTokenRequest(const CMsgClientPICSAccessTokenRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      packageids_(from.packageids_),
      appids_(from.appids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientPICSAccessTokenRequest)
}

void CMsgClientPICSAccessTokenRequest::SharedCtor() {
}

CMsgClientPICSAccessTokenRequest::~CMsgClientPICSAccessTokenRequest() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientPICSAccessTokenRequest)
  SharedDtor();
}

void CMsgClientPICSAccessTokenRequest::SharedDtor() {
}

void CMsgClientPICSAccessTokenRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientPICSAccessTokenRequest& CMsgClientPICSAccessTokenRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientPICSAccessTokenRequest_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientPICSAccessTokenRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientPICSAccessTokenRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  packageids_.Clear();
  appids_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientPICSAccessTokenRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientPICSAccessTokenRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated uint32 packageids = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 8) {
          do {
            msg->add_packageids(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_packageids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated uint32 appids = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 16) {
          do {
            msg->add_appids(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 16 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_appids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientPICSAccessTokenRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientPICSAccessTokenRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 packageids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_packageids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_packageids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 appids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_appids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_appids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientPICSAccessTokenRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientPICSAccessTokenRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientPICSAccessTokenRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientPICSAccessTokenRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 packageids = 1;
  for (int i = 0, n = this->packageids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->packageids(i), output);
  }

  // repeated uint32 appids = 2;
  for (int i = 0, n = this->appids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->appids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientPICSAccessTokenRequest)
}

::google::protobuf::uint8* CMsgClientPICSAccessTokenRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientPICSAccessTokenRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 packageids = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->packageids_, target);

  // repeated uint32 appids = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->appids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientPICSAccessTokenRequest)
  return target;
}

size_t CMsgClientPICSAccessTokenRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientPICSAccessTokenRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 packageids = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->packageids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->packageids_size());
    total_size += data_size;
  }

  // repeated uint32 appids = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->appids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->appids_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientPICSAccessTokenRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientPICSAccessTokenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientPICSAccessTokenRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientPICSAccessTokenRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientPICSAccessTokenRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientPICSAccessTokenRequest)
    MergeFrom(*source);
  }
}

void CMsgClientPICSAccessTokenRequest::MergeFrom(const CMsgClientPICSAccessTokenRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientPICSAccessTokenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  packageids_.MergeFrom(from.packageids_);
  appids_.MergeFrom(from.appids_);
}

void CMsgClientPICSAccessTokenRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientPICSAccessTokenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientPICSAccessTokenRequest::CopyFrom(const CMsgClientPICSAccessTokenRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientPICSAccessTokenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPICSAccessTokenRequest::IsInitialized() const {
  return true;
}

void CMsgClientPICSAccessTokenRequest::Swap(CMsgClientPICSAccessTokenRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientPICSAccessTokenRequest::InternalSwap(CMsgClientPICSAccessTokenRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  packageids_.InternalSwap(&other->packageids_);
  appids_.InternalSwap(&other->appids_);
}

::google::protobuf::Metadata CMsgClientPICSAccessTokenRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientPICSAccessTokenResponse_PackageToken::InitAsDefaultInstance() {
}
class CMsgClientPICSAccessTokenResponse_PackageToken::HasBitSetters {
 public:
  static void set_has_packageid(CMsgClientPICSAccessTokenResponse_PackageToken* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_access_token(CMsgClientPICSAccessTokenResponse_PackageToken* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientPICSAccessTokenResponse_PackageToken::kPackageidFieldNumber;
const int CMsgClientPICSAccessTokenResponse_PackageToken::kAccessTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientPICSAccessTokenResponse_PackageToken::CMsgClientPICSAccessTokenResponse_PackageToken()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientPICSAccessTokenResponse.PackageToken)
}
CMsgClientPICSAccessTokenResponse_PackageToken::CMsgClientPICSAccessTokenResponse_PackageToken(const CMsgClientPICSAccessTokenResponse_PackageToken& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&access_token_, &from.access_token_,
    static_cast<size_t>(reinterpret_cast<char*>(&packageid_) -
    reinterpret_cast<char*>(&access_token_)) + sizeof(packageid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientPICSAccessTokenResponse.PackageToken)
}

void CMsgClientPICSAccessTokenResponse_PackageToken::SharedCtor() {
  ::memset(&access_token_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&packageid_) -
      reinterpret_cast<char*>(&access_token_)) + sizeof(packageid_));
}

CMsgClientPICSAccessTokenResponse_PackageToken::~CMsgClientPICSAccessTokenResponse_PackageToken() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientPICSAccessTokenResponse.PackageToken)
  SharedDtor();
}

void CMsgClientPICSAccessTokenResponse_PackageToken::SharedDtor() {
}

void CMsgClientPICSAccessTokenResponse_PackageToken::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientPICSAccessTokenResponse_PackageToken& CMsgClientPICSAccessTokenResponse_PackageToken::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientPICSAccessTokenResponse_PackageToken_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientPICSAccessTokenResponse_PackageToken::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientPICSAccessTokenResponse.PackageToken)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&access_token_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&packageid_) -
        reinterpret_cast<char*>(&access_token_)) + sizeof(packageid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientPICSAccessTokenResponse_PackageToken::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientPICSAccessTokenResponse_PackageToken*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 packageid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_packageid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 access_token = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_access_token(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientPICSAccessTokenResponse_PackageToken::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientPICSAccessTokenResponse.PackageToken)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 packageid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_packageid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packageid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 access_token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_access_token(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &access_token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientPICSAccessTokenResponse.PackageToken)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientPICSAccessTokenResponse.PackageToken)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientPICSAccessTokenResponse_PackageToken::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientPICSAccessTokenResponse.PackageToken)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 packageid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->packageid(), output);
  }

  // optional uint64 access_token = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->access_token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientPICSAccessTokenResponse.PackageToken)
}

::google::protobuf::uint8* CMsgClientPICSAccessTokenResponse_PackageToken::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientPICSAccessTokenResponse.PackageToken)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 packageid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->packageid(), target);
  }

  // optional uint64 access_token = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->access_token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientPICSAccessTokenResponse.PackageToken)
  return target;
}

size_t CMsgClientPICSAccessTokenResponse_PackageToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientPICSAccessTokenResponse.PackageToken)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 access_token = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->access_token());
    }

    // optional uint32 packageid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->packageid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientPICSAccessTokenResponse_PackageToken::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientPICSAccessTokenResponse.PackageToken)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientPICSAccessTokenResponse_PackageToken* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientPICSAccessTokenResponse_PackageToken>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientPICSAccessTokenResponse.PackageToken)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientPICSAccessTokenResponse.PackageToken)
    MergeFrom(*source);
  }
}

void CMsgClientPICSAccessTokenResponse_PackageToken::MergeFrom(const CMsgClientPICSAccessTokenResponse_PackageToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientPICSAccessTokenResponse.PackageToken)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      access_token_ = from.access_token_;
    }
    if (cached_has_bits & 0x00000002u) {
      packageid_ = from.packageid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientPICSAccessTokenResponse_PackageToken::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientPICSAccessTokenResponse.PackageToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientPICSAccessTokenResponse_PackageToken::CopyFrom(const CMsgClientPICSAccessTokenResponse_PackageToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientPICSAccessTokenResponse.PackageToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPICSAccessTokenResponse_PackageToken::IsInitialized() const {
  return true;
}

void CMsgClientPICSAccessTokenResponse_PackageToken::Swap(CMsgClientPICSAccessTokenResponse_PackageToken* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientPICSAccessTokenResponse_PackageToken::InternalSwap(CMsgClientPICSAccessTokenResponse_PackageToken* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(access_token_, other->access_token_);
  swap(packageid_, other->packageid_);
}

::google::protobuf::Metadata CMsgClientPICSAccessTokenResponse_PackageToken::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientPICSAccessTokenResponse_AppToken::InitAsDefaultInstance() {
}
class CMsgClientPICSAccessTokenResponse_AppToken::HasBitSetters {
 public:
  static void set_has_appid(CMsgClientPICSAccessTokenResponse_AppToken* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_access_token(CMsgClientPICSAccessTokenResponse_AppToken* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientPICSAccessTokenResponse_AppToken::kAppidFieldNumber;
const int CMsgClientPICSAccessTokenResponse_AppToken::kAccessTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientPICSAccessTokenResponse_AppToken::CMsgClientPICSAccessTokenResponse_AppToken()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientPICSAccessTokenResponse.AppToken)
}
CMsgClientPICSAccessTokenResponse_AppToken::CMsgClientPICSAccessTokenResponse_AppToken(const CMsgClientPICSAccessTokenResponse_AppToken& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&access_token_, &from.access_token_,
    static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&access_token_)) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientPICSAccessTokenResponse.AppToken)
}

void CMsgClientPICSAccessTokenResponse_AppToken::SharedCtor() {
  ::memset(&access_token_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&appid_) -
      reinterpret_cast<char*>(&access_token_)) + sizeof(appid_));
}

CMsgClientPICSAccessTokenResponse_AppToken::~CMsgClientPICSAccessTokenResponse_AppToken() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientPICSAccessTokenResponse.AppToken)
  SharedDtor();
}

void CMsgClientPICSAccessTokenResponse_AppToken::SharedDtor() {
}

void CMsgClientPICSAccessTokenResponse_AppToken::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientPICSAccessTokenResponse_AppToken& CMsgClientPICSAccessTokenResponse_AppToken::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientPICSAccessTokenResponse_AppToken_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientPICSAccessTokenResponse_AppToken::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientPICSAccessTokenResponse.AppToken)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&access_token_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&appid_) -
        reinterpret_cast<char*>(&access_token_)) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientPICSAccessTokenResponse_AppToken::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientPICSAccessTokenResponse_AppToken*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 access_token = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_access_token(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientPICSAccessTokenResponse_AppToken::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientPICSAccessTokenResponse.AppToken)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 access_token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_access_token(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &access_token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientPICSAccessTokenResponse.AppToken)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientPICSAccessTokenResponse.AppToken)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientPICSAccessTokenResponse_AppToken::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientPICSAccessTokenResponse.AppToken)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint64 access_token = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->access_token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientPICSAccessTokenResponse.AppToken)
}

::google::protobuf::uint8* CMsgClientPICSAccessTokenResponse_AppToken::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientPICSAccessTokenResponse.AppToken)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint64 access_token = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->access_token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientPICSAccessTokenResponse.AppToken)
  return target;
}

size_t CMsgClientPICSAccessTokenResponse_AppToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientPICSAccessTokenResponse.AppToken)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 access_token = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->access_token());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientPICSAccessTokenResponse_AppToken::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientPICSAccessTokenResponse.AppToken)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientPICSAccessTokenResponse_AppToken* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientPICSAccessTokenResponse_AppToken>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientPICSAccessTokenResponse.AppToken)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientPICSAccessTokenResponse.AppToken)
    MergeFrom(*source);
  }
}

void CMsgClientPICSAccessTokenResponse_AppToken::MergeFrom(const CMsgClientPICSAccessTokenResponse_AppToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientPICSAccessTokenResponse.AppToken)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      access_token_ = from.access_token_;
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientPICSAccessTokenResponse_AppToken::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientPICSAccessTokenResponse.AppToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientPICSAccessTokenResponse_AppToken::CopyFrom(const CMsgClientPICSAccessTokenResponse_AppToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientPICSAccessTokenResponse.AppToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPICSAccessTokenResponse_AppToken::IsInitialized() const {
  return true;
}

void CMsgClientPICSAccessTokenResponse_AppToken::Swap(CMsgClientPICSAccessTokenResponse_AppToken* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientPICSAccessTokenResponse_AppToken::InternalSwap(CMsgClientPICSAccessTokenResponse_AppToken* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(access_token_, other->access_token_);
  swap(appid_, other->appid_);
}

::google::protobuf::Metadata CMsgClientPICSAccessTokenResponse_AppToken::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientPICSAccessTokenResponse::InitAsDefaultInstance() {
}
class CMsgClientPICSAccessTokenResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientPICSAccessTokenResponse::kPackageAccessTokensFieldNumber;
const int CMsgClientPICSAccessTokenResponse::kPackageDeniedTokensFieldNumber;
const int CMsgClientPICSAccessTokenResponse::kAppAccessTokensFieldNumber;
const int CMsgClientPICSAccessTokenResponse::kAppDeniedTokensFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientPICSAccessTokenResponse::CMsgClientPICSAccessTokenResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientPICSAccessTokenResponse)
}
CMsgClientPICSAccessTokenResponse::CMsgClientPICSAccessTokenResponse(const CMsgClientPICSAccessTokenResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      package_access_tokens_(from.package_access_tokens_),
      package_denied_tokens_(from.package_denied_tokens_),
      app_access_tokens_(from.app_access_tokens_),
      app_denied_tokens_(from.app_denied_tokens_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientPICSAccessTokenResponse)
}

void CMsgClientPICSAccessTokenResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientPICSAccessTokenResponse_steammessages_5fclientserver_2eproto.base);
}

CMsgClientPICSAccessTokenResponse::~CMsgClientPICSAccessTokenResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientPICSAccessTokenResponse)
  SharedDtor();
}

void CMsgClientPICSAccessTokenResponse::SharedDtor() {
}

void CMsgClientPICSAccessTokenResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientPICSAccessTokenResponse& CMsgClientPICSAccessTokenResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientPICSAccessTokenResponse_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientPICSAccessTokenResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientPICSAccessTokenResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  package_access_tokens_.Clear();
  package_denied_tokens_.Clear();
  app_access_tokens_.Clear();
  app_denied_tokens_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientPICSAccessTokenResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientPICSAccessTokenResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.steam.CMsgClientPICSAccessTokenResponse.PackageToken package_access_tokens = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgClientPICSAccessTokenResponse_PackageToken::_InternalParse;
          object = msg->add_package_access_tokens();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // repeated uint32 package_denied_tokens = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 16) {
          do {
            msg->add_package_denied_tokens(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 16 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_package_denied_tokens();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated .proto.steam.CMsgClientPICSAccessTokenResponse.AppToken app_access_tokens = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgClientPICSAccessTokenResponse_AppToken::_InternalParse;
          object = msg->add_app_access_tokens();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // repeated uint32 app_denied_tokens = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) == 32) {
          do {
            msg->add_app_denied_tokens(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 32 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_app_denied_tokens();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientPICSAccessTokenResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientPICSAccessTokenResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CMsgClientPICSAccessTokenResponse.PackageToken package_access_tokens = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_package_access_tokens()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 package_denied_tokens = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_package_denied_tokens())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_package_denied_tokens())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgClientPICSAccessTokenResponse.AppToken app_access_tokens = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_app_access_tokens()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 app_denied_tokens = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32u, input, this->mutable_app_denied_tokens())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_app_denied_tokens())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientPICSAccessTokenResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientPICSAccessTokenResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientPICSAccessTokenResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientPICSAccessTokenResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientPICSAccessTokenResponse.PackageToken package_access_tokens = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->package_access_tokens_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->package_access_tokens(static_cast<int>(i)),
      output);
  }

  // repeated uint32 package_denied_tokens = 2;
  for (int i = 0, n = this->package_denied_tokens_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->package_denied_tokens(i), output);
  }

  // repeated .proto.steam.CMsgClientPICSAccessTokenResponse.AppToken app_access_tokens = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->app_access_tokens_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->app_access_tokens(static_cast<int>(i)),
      output);
  }

  // repeated uint32 app_denied_tokens = 4;
  for (int i = 0, n = this->app_denied_tokens_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->app_denied_tokens(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientPICSAccessTokenResponse)
}

::google::protobuf::uint8* CMsgClientPICSAccessTokenResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientPICSAccessTokenResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientPICSAccessTokenResponse.PackageToken package_access_tokens = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->package_access_tokens_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->package_access_tokens(static_cast<int>(i)), target);
  }

  // repeated uint32 package_denied_tokens = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->package_denied_tokens_, target);

  // repeated .proto.steam.CMsgClientPICSAccessTokenResponse.AppToken app_access_tokens = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->app_access_tokens_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->app_access_tokens(static_cast<int>(i)), target);
  }

  // repeated uint32 app_denied_tokens = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(4, this->app_denied_tokens_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientPICSAccessTokenResponse)
  return target;
}

size_t CMsgClientPICSAccessTokenResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientPICSAccessTokenResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientPICSAccessTokenResponse.PackageToken package_access_tokens = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->package_access_tokens_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->package_access_tokens(static_cast<int>(i)));
    }
  }

  // repeated uint32 package_denied_tokens = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->package_denied_tokens_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->package_denied_tokens_size());
    total_size += data_size;
  }

  // repeated .proto.steam.CMsgClientPICSAccessTokenResponse.AppToken app_access_tokens = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->app_access_tokens_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->app_access_tokens(static_cast<int>(i)));
    }
  }

  // repeated uint32 app_denied_tokens = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->app_denied_tokens_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->app_denied_tokens_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientPICSAccessTokenResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientPICSAccessTokenResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientPICSAccessTokenResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientPICSAccessTokenResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientPICSAccessTokenResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientPICSAccessTokenResponse)
    MergeFrom(*source);
  }
}

void CMsgClientPICSAccessTokenResponse::MergeFrom(const CMsgClientPICSAccessTokenResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientPICSAccessTokenResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  package_access_tokens_.MergeFrom(from.package_access_tokens_);
  package_denied_tokens_.MergeFrom(from.package_denied_tokens_);
  app_access_tokens_.MergeFrom(from.app_access_tokens_);
  app_denied_tokens_.MergeFrom(from.app_denied_tokens_);
}

void CMsgClientPICSAccessTokenResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientPICSAccessTokenResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientPICSAccessTokenResponse::CopyFrom(const CMsgClientPICSAccessTokenResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientPICSAccessTokenResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPICSAccessTokenResponse::IsInitialized() const {
  return true;
}

void CMsgClientPICSAccessTokenResponse::Swap(CMsgClientPICSAccessTokenResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientPICSAccessTokenResponse::InternalSwap(CMsgClientPICSAccessTokenResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&package_access_tokens_)->InternalSwap(CastToBase(&other->package_access_tokens_));
  package_denied_tokens_.InternalSwap(&other->package_denied_tokens_);
  CastToBase(&app_access_tokens_)->InternalSwap(CastToBase(&other->app_access_tokens_));
  app_denied_tokens_.InternalSwap(&other->app_denied_tokens_);
}

::google::protobuf::Metadata CMsgClientPICSAccessTokenResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientUFSGetUGCDetails::InitAsDefaultInstance() {
}
class CMsgClientUFSGetUGCDetails::HasBitSetters {
 public:
  static void set_has_hcontent(CMsgClientUFSGetUGCDetails* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientUFSGetUGCDetails::kHcontentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientUFSGetUGCDetails::CMsgClientUFSGetUGCDetails()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientUFSGetUGCDetails)
}
CMsgClientUFSGetUGCDetails::CMsgClientUFSGetUGCDetails(const CMsgClientUFSGetUGCDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hcontent_ = from.hcontent_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientUFSGetUGCDetails)
}

void CMsgClientUFSGetUGCDetails::SharedCtor() {
  hcontent_ = PROTOBUF_ULONGLONG(18446744073709551615);
}

CMsgClientUFSGetUGCDetails::~CMsgClientUFSGetUGCDetails() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientUFSGetUGCDetails)
  SharedDtor();
}

void CMsgClientUFSGetUGCDetails::SharedDtor() {
}

void CMsgClientUFSGetUGCDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientUFSGetUGCDetails& CMsgClientUFSGetUGCDetails::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientUFSGetUGCDetails_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientUFSGetUGCDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientUFSGetUGCDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hcontent_ = PROTOBUF_ULONGLONG(18446744073709551615);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientUFSGetUGCDetails::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientUFSGetUGCDetails*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 hcontent = 1 [default = 18446744073709551615];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_hcontent(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientUFSGetUGCDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientUFSGetUGCDetails)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 hcontent = 1 [default = 18446744073709551615];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_hcontent(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &hcontent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientUFSGetUGCDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientUFSGetUGCDetails)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientUFSGetUGCDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientUFSGetUGCDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 hcontent = 1 [default = 18446744073709551615];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->hcontent(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientUFSGetUGCDetails)
}

::google::protobuf::uint8* CMsgClientUFSGetUGCDetails::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientUFSGetUGCDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 hcontent = 1 [default = 18446744073709551615];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->hcontent(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientUFSGetUGCDetails)
  return target;
}

size_t CMsgClientUFSGetUGCDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientUFSGetUGCDetails)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 hcontent = 1 [default = 18446744073709551615];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientUFSGetUGCDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientUFSGetUGCDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSGetUGCDetails* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientUFSGetUGCDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientUFSGetUGCDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientUFSGetUGCDetails)
    MergeFrom(*source);
  }
}

void CMsgClientUFSGetUGCDetails::MergeFrom(const CMsgClientUFSGetUGCDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientUFSGetUGCDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hcontent()) {
    set_hcontent(from.hcontent());
  }
}

void CMsgClientUFSGetUGCDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientUFSGetUGCDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSGetUGCDetails::CopyFrom(const CMsgClientUFSGetUGCDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientUFSGetUGCDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSGetUGCDetails::IsInitialized() const {
  return true;
}

void CMsgClientUFSGetUGCDetails::Swap(CMsgClientUFSGetUGCDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientUFSGetUGCDetails::InternalSwap(CMsgClientUFSGetUGCDetails* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(hcontent_, other->hcontent_);
}

::google::protobuf::Metadata CMsgClientUFSGetUGCDetails::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientUFSGetUGCDetailsResponse::InitAsDefaultInstance() {
}
class CMsgClientUFSGetUGCDetailsResponse::HasBitSetters {
 public:
  static void set_has_eresult(CMsgClientUFSGetUGCDetailsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_url(CMsgClientUFSGetUGCDetailsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_app_id(CMsgClientUFSGetUGCDetailsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_filename(CMsgClientUFSGetUGCDetailsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_steamid_creator(CMsgClientUFSGetUGCDetailsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_file_size(CMsgClientUFSGetUGCDetailsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_compressed_file_size(CMsgClientUFSGetUGCDetailsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_rangecheck_host(CMsgClientUFSGetUGCDetailsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_file_encoded_sha1(CMsgClientUFSGetUGCDetailsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientUFSGetUGCDetailsResponse::kEresultFieldNumber;
const int CMsgClientUFSGetUGCDetailsResponse::kUrlFieldNumber;
const int CMsgClientUFSGetUGCDetailsResponse::kAppIdFieldNumber;
const int CMsgClientUFSGetUGCDetailsResponse::kFilenameFieldNumber;
const int CMsgClientUFSGetUGCDetailsResponse::kSteamidCreatorFieldNumber;
const int CMsgClientUFSGetUGCDetailsResponse::kFileSizeFieldNumber;
const int CMsgClientUFSGetUGCDetailsResponse::kCompressedFileSizeFieldNumber;
const int CMsgClientUFSGetUGCDetailsResponse::kRangecheckHostFieldNumber;
const int CMsgClientUFSGetUGCDetailsResponse::kFileEncodedSha1FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientUFSGetUGCDetailsResponse::CMsgClientUFSGetUGCDetailsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientUFSGetUGCDetailsResponse)
}
CMsgClientUFSGetUGCDetailsResponse::CMsgClientUFSGetUGCDetailsResponse(const CMsgClientUFSGetUGCDetailsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_filename()) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  rangecheck_host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rangecheck_host()) {
    rangecheck_host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rangecheck_host_);
  }
  file_encoded_sha1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_encoded_sha1()) {
    file_encoded_sha1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_encoded_sha1_);
  }
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientUFSGetUGCDetailsResponse)
}

void CMsgClientUFSGetUGCDetailsResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientUFSGetUGCDetailsResponse_steammessages_5fclientserver_2eproto.base);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rangecheck_host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_encoded_sha1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compressed_file_size_) -
      reinterpret_cast<char*>(&app_id_)) + sizeof(compressed_file_size_));
  eresult_ = 2;
}

CMsgClientUFSGetUGCDetailsResponse::~CMsgClientUFSGetUGCDetailsResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientUFSGetUGCDetailsResponse)
  SharedDtor();
}

void CMsgClientUFSGetUGCDetailsResponse::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rangecheck_host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_encoded_sha1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientUFSGetUGCDetailsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientUFSGetUGCDetailsResponse& CMsgClientUFSGetUGCDetailsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientUFSGetUGCDetailsResponse_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientUFSGetUGCDetailsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientUFSGetUGCDetailsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      url_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      filename_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      rangecheck_host_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      file_encoded_sha1_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&compressed_file_size_) -
        reinterpret_cast<char*>(&app_id_)) + sizeof(compressed_file_size_));
  }
  eresult_ = 2;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientUFSGetUGCDetailsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientUFSGetUGCDetailsResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_eresult(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string url = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientUFSGetUGCDetailsResponse.url");
        object = msg->mutable_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 app_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string filename = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientUFSGetUGCDetailsResponse.filename");
        object = msg->mutable_filename();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional fixed64 steamid_creator = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 41) goto handle_unusual;
        msg->set_steamid_creator(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 file_size = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_file_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 compressed_file_size = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_compressed_file_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string rangecheck_host = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientUFSGetUGCDetailsResponse.rangecheck_host");
        object = msg->mutable_rangecheck_host();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string file_encoded_sha1 = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientUFSGetUGCDetailsResponse.file_encoded_sha1");
        object = msg->mutable_file_encoded_sha1();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientUFSGetUGCDetailsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientUFSGetUGCDetailsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_eresult(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientUFSGetUGCDetailsResponse.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 app_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string filename = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), static_cast<int>(this->filename().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientUFSGetUGCDetailsResponse.filename");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steamid_creator = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (41 & 0xFF)) {
          HasBitSetters::set_has_steamid_creator(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_creator_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 file_size = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_file_size(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 compressed_file_size = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_compressed_file_size(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &compressed_file_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string rangecheck_host = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rangecheck_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rangecheck_host().data(), static_cast<int>(this->rangecheck_host().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientUFSGetUGCDetailsResponse.rangecheck_host");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string file_encoded_sha1 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_encoded_sha1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_encoded_sha1().data(), static_cast<int>(this->file_encoded_sha1().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientUFSGetUGCDetailsResponse.file_encoded_sha1");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientUFSGetUGCDetailsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientUFSGetUGCDetailsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientUFSGetUGCDetailsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientUFSGetUGCDetailsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSGetUGCDetailsResponse.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  // optional uint32 app_id = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->app_id(), output);
  }

  // optional string filename = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSGetUGCDetailsResponse.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->filename(), output);
  }

  // optional fixed64 steamid_creator = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->steamid_creator(), output);
  }

  // optional uint32 file_size = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->file_size(), output);
  }

  // optional uint32 compressed_file_size = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->compressed_file_size(), output);
  }

  // optional string rangecheck_host = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rangecheck_host().data(), static_cast<int>(this->rangecheck_host().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSGetUGCDetailsResponse.rangecheck_host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->rangecheck_host(), output);
  }

  // optional string file_encoded_sha1 = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_encoded_sha1().data(), static_cast<int>(this->file_encoded_sha1().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSGetUGCDetailsResponse.file_encoded_sha1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->file_encoded_sha1(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientUFSGetUGCDetailsResponse)
}

::google::protobuf::uint8* CMsgClientUFSGetUGCDetailsResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientUFSGetUGCDetailsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSGetUGCDetailsResponse.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  // optional uint32 app_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->app_id(), target);
  }

  // optional string filename = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSGetUGCDetailsResponse.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->filename(), target);
  }

  // optional fixed64 steamid_creator = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->steamid_creator(), target);
  }

  // optional uint32 file_size = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->file_size(), target);
  }

  // optional uint32 compressed_file_size = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->compressed_file_size(), target);
  }

  // optional string rangecheck_host = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rangecheck_host().data(), static_cast<int>(this->rangecheck_host().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSGetUGCDetailsResponse.rangecheck_host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->rangecheck_host(), target);
  }

  // optional string file_encoded_sha1 = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_encoded_sha1().data(), static_cast<int>(this->file_encoded_sha1().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSGetUGCDetailsResponse.file_encoded_sha1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->file_encoded_sha1(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientUFSGetUGCDetailsResponse)
  return target;
}

size_t CMsgClientUFSGetUGCDetailsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientUFSGetUGCDetailsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string url = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string filename = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional string rangecheck_host = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rangecheck_host());
    }

    // optional string file_encoded_sha1 = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_encoded_sha1());
    }

    // optional uint32 app_id = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional uint32 file_size = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->file_size());
    }

    // optional fixed64 steamid_creator = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional uint32 compressed_file_size = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->compressed_file_size());
    }

  }
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->eresult());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientUFSGetUGCDetailsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientUFSGetUGCDetailsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSGetUGCDetailsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientUFSGetUGCDetailsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientUFSGetUGCDetailsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientUFSGetUGCDetailsResponse)
    MergeFrom(*source);
  }
}

void CMsgClientUFSGetUGCDetailsResponse::MergeFrom(const CMsgClientUFSGetUGCDetailsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientUFSGetUGCDetailsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      rangecheck_host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rangecheck_host_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      file_encoded_sha1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_encoded_sha1_);
    }
    if (cached_has_bits & 0x00000010u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      file_size_ = from.file_size_;
    }
    if (cached_has_bits & 0x00000040u) {
      steamid_creator_ = from.steamid_creator_;
    }
    if (cached_has_bits & 0x00000080u) {
      compressed_file_size_ = from.compressed_file_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_eresult(from.eresult());
  }
}

void CMsgClientUFSGetUGCDetailsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientUFSGetUGCDetailsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSGetUGCDetailsResponse::CopyFrom(const CMsgClientUFSGetUGCDetailsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientUFSGetUGCDetailsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSGetUGCDetailsResponse::IsInitialized() const {
  return true;
}

void CMsgClientUFSGetUGCDetailsResponse::Swap(CMsgClientUFSGetUGCDetailsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientUFSGetUGCDetailsResponse::InternalSwap(CMsgClientUFSGetUGCDetailsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  url_.Swap(&other->url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  filename_.Swap(&other->filename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  rangecheck_host_.Swap(&other->rangecheck_host_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  file_encoded_sha1_.Swap(&other->file_encoded_sha1_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(app_id_, other->app_id_);
  swap(file_size_, other->file_size_);
  swap(steamid_creator_, other->steamid_creator_);
  swap(compressed_file_size_, other->compressed_file_size_);
  swap(eresult_, other->eresult_);
}

::google::protobuf::Metadata CMsgClientUFSGetUGCDetailsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientUFSGetSingleFileInfo::InitAsDefaultInstance() {
}
class CMsgClientUFSGetSingleFileInfo::HasBitSetters {
 public:
  static void set_has_app_id(CMsgClientUFSGetSingleFileInfo* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_file_name(CMsgClientUFSGetSingleFileInfo* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientUFSGetSingleFileInfo::kAppIdFieldNumber;
const int CMsgClientUFSGetSingleFileInfo::kFileNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientUFSGetSingleFileInfo::CMsgClientUFSGetSingleFileInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientUFSGetSingleFileInfo)
}
CMsgClientUFSGetSingleFileInfo::CMsgClientUFSGetSingleFileInfo(const CMsgClientUFSGetSingleFileInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_name()) {
    file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  app_id_ = from.app_id_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientUFSGetSingleFileInfo)
}

void CMsgClientUFSGetSingleFileInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientUFSGetSingleFileInfo_steammessages_5fclientserver_2eproto.base);
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_id_ = 0u;
}

CMsgClientUFSGetSingleFileInfo::~CMsgClientUFSGetSingleFileInfo() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientUFSGetSingleFileInfo)
  SharedDtor();
}

void CMsgClientUFSGetSingleFileInfo::SharedDtor() {
  file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientUFSGetSingleFileInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientUFSGetSingleFileInfo& CMsgClientUFSGetSingleFileInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientUFSGetSingleFileInfo_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientUFSGetSingleFileInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientUFSGetSingleFileInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    file_name_.ClearNonDefaultToEmptyNoArena();
  }
  app_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientUFSGetSingleFileInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientUFSGetSingleFileInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string file_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientUFSGetSingleFileInfo.file_name");
        object = msg->mutable_file_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientUFSGetSingleFileInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientUFSGetSingleFileInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string file_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_name().data(), static_cast<int>(this->file_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientUFSGetSingleFileInfo.file_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientUFSGetSingleFileInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientUFSGetSingleFileInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientUFSGetSingleFileInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientUFSGetSingleFileInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional string file_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), static_cast<int>(this->file_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSGetSingleFileInfo.file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->file_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientUFSGetSingleFileInfo)
}

::google::protobuf::uint8* CMsgClientUFSGetSingleFileInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientUFSGetSingleFileInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional string file_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), static_cast<int>(this->file_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSGetSingleFileInfo.file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->file_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientUFSGetSingleFileInfo)
  return target;
}

size_t CMsgClientUFSGetSingleFileInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientUFSGetSingleFileInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string file_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientUFSGetSingleFileInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientUFSGetSingleFileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSGetSingleFileInfo* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientUFSGetSingleFileInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientUFSGetSingleFileInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientUFSGetSingleFileInfo)
    MergeFrom(*source);
  }
}

void CMsgClientUFSGetSingleFileInfo::MergeFrom(const CMsgClientUFSGetSingleFileInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientUFSGetSingleFileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientUFSGetSingleFileInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientUFSGetSingleFileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSGetSingleFileInfo::CopyFrom(const CMsgClientUFSGetSingleFileInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientUFSGetSingleFileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSGetSingleFileInfo::IsInitialized() const {
  return true;
}

void CMsgClientUFSGetSingleFileInfo::Swap(CMsgClientUFSGetSingleFileInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientUFSGetSingleFileInfo::InternalSwap(CMsgClientUFSGetSingleFileInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  file_name_.Swap(&other->file_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(app_id_, other->app_id_);
}

::google::protobuf::Metadata CMsgClientUFSGetSingleFileInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientUFSGetSingleFileInfoResponse::InitAsDefaultInstance() {
}
class CMsgClientUFSGetSingleFileInfoResponse::HasBitSetters {
 public:
  static void set_has_eresult(CMsgClientUFSGetSingleFileInfoResponse* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_app_id(CMsgClientUFSGetSingleFileInfoResponse* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_file_name(CMsgClientUFSGetSingleFileInfoResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_sha_file(CMsgClientUFSGetSingleFileInfoResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_time_stamp(CMsgClientUFSGetSingleFileInfoResponse* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_raw_file_size(CMsgClientUFSGetSingleFileInfoResponse* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_is_explicit_delete(CMsgClientUFSGetSingleFileInfoResponse* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientUFSGetSingleFileInfoResponse::kEresultFieldNumber;
const int CMsgClientUFSGetSingleFileInfoResponse::kAppIdFieldNumber;
const int CMsgClientUFSGetSingleFileInfoResponse::kFileNameFieldNumber;
const int CMsgClientUFSGetSingleFileInfoResponse::kShaFileFieldNumber;
const int CMsgClientUFSGetSingleFileInfoResponse::kTimeStampFieldNumber;
const int CMsgClientUFSGetSingleFileInfoResponse::kRawFileSizeFieldNumber;
const int CMsgClientUFSGetSingleFileInfoResponse::kIsExplicitDeleteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientUFSGetSingleFileInfoResponse::CMsgClientUFSGetSingleFileInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientUFSGetSingleFileInfoResponse)
}
CMsgClientUFSGetSingleFileInfoResponse::CMsgClientUFSGetSingleFileInfoResponse(const CMsgClientUFSGetSingleFileInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_name()) {
    file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  sha_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sha_file()) {
    sha_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_file_);
  }
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientUFSGetSingleFileInfoResponse)
}

void CMsgClientUFSGetSingleFileInfoResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientUFSGetSingleFileInfoResponse_steammessages_5fclientserver_2eproto.base);
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sha_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_explicit_delete_) -
      reinterpret_cast<char*>(&app_id_)) + sizeof(is_explicit_delete_));
  eresult_ = 2;
}

CMsgClientUFSGetSingleFileInfoResponse::~CMsgClientUFSGetSingleFileInfoResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientUFSGetSingleFileInfoResponse)
  SharedDtor();
}

void CMsgClientUFSGetSingleFileInfoResponse::SharedDtor() {
  file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sha_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientUFSGetSingleFileInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientUFSGetSingleFileInfoResponse& CMsgClientUFSGetSingleFileInfoResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientUFSGetSingleFileInfoResponse_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientUFSGetSingleFileInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientUFSGetSingleFileInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      file_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      sha_file_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_explicit_delete_) -
        reinterpret_cast<char*>(&app_id_)) + sizeof(is_explicit_delete_));
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientUFSGetSingleFileInfoResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientUFSGetSingleFileInfoResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_eresult(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 app_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string file_name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientUFSGetSingleFileInfoResponse.file_name");
        object = msg->mutable_file_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bytes sha_file = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_sha_file();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint64 time_stamp = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_time_stamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 raw_file_size = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_raw_file_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool is_explicit_delete = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_is_explicit_delete(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientUFSGetSingleFileInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientUFSGetSingleFileInfoResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_eresult(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 app_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string file_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_name().data(), static_cast<int>(this->file_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientUFSGetSingleFileInfoResponse.file_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sha_file = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha_file()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 time_stamp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_time_stamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 raw_file_size = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_raw_file_size(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raw_file_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_explicit_delete = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_is_explicit_delete(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_explicit_delete_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientUFSGetSingleFileInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientUFSGetSingleFileInfoResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientUFSGetSingleFileInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientUFSGetSingleFileInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional uint32 app_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->app_id(), output);
  }

  // optional string file_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), static_cast<int>(this->file_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSGetSingleFileInfoResponse.file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->file_name(), output);
  }

  // optional bytes sha_file = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->sha_file(), output);
  }

  // optional uint64 time_stamp = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->time_stamp(), output);
  }

  // optional uint32 raw_file_size = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->raw_file_size(), output);
  }

  // optional bool is_explicit_delete = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_explicit_delete(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientUFSGetSingleFileInfoResponse)
}

::google::protobuf::uint8* CMsgClientUFSGetSingleFileInfoResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientUFSGetSingleFileInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // optional uint32 app_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->app_id(), target);
  }

  // optional string file_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), static_cast<int>(this->file_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSGetSingleFileInfoResponse.file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->file_name(), target);
  }

  // optional bytes sha_file = 4;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->sha_file(), target);
  }

  // optional uint64 time_stamp = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->time_stamp(), target);
  }

  // optional uint32 raw_file_size = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->raw_file_size(), target);
  }

  // optional bool is_explicit_delete = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_explicit_delete(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientUFSGetSingleFileInfoResponse)
  return target;
}

size_t CMsgClientUFSGetSingleFileInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientUFSGetSingleFileInfoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string file_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

    // optional bytes sha_file = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha_file());
    }

    // optional uint32 app_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional uint32 raw_file_size = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raw_file_size());
    }

    // optional uint64 time_stamp = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time_stamp());
    }

    // optional bool is_explicit_delete = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional int32 eresult = 1 [default = 2];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientUFSGetSingleFileInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientUFSGetSingleFileInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSGetSingleFileInfoResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientUFSGetSingleFileInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientUFSGetSingleFileInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientUFSGetSingleFileInfoResponse)
    MergeFrom(*source);
  }
}

void CMsgClientUFSGetSingleFileInfoResponse::MergeFrom(const CMsgClientUFSGetSingleFileInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientUFSGetSingleFileInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      sha_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_file_);
    }
    if (cached_has_bits & 0x00000004u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      raw_file_size_ = from.raw_file_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      time_stamp_ = from.time_stamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_explicit_delete_ = from.is_explicit_delete_;
    }
    if (cached_has_bits & 0x00000040u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientUFSGetSingleFileInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientUFSGetSingleFileInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSGetSingleFileInfoResponse::CopyFrom(const CMsgClientUFSGetSingleFileInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientUFSGetSingleFileInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSGetSingleFileInfoResponse::IsInitialized() const {
  return true;
}

void CMsgClientUFSGetSingleFileInfoResponse::Swap(CMsgClientUFSGetSingleFileInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientUFSGetSingleFileInfoResponse::InternalSwap(CMsgClientUFSGetSingleFileInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  file_name_.Swap(&other->file_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sha_file_.Swap(&other->sha_file_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(app_id_, other->app_id_);
  swap(raw_file_size_, other->raw_file_size_);
  swap(time_stamp_, other->time_stamp_);
  swap(is_explicit_delete_, other->is_explicit_delete_);
  swap(eresult_, other->eresult_);
}

::google::protobuf::Metadata CMsgClientUFSGetSingleFileInfoResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientUFSShareFile::InitAsDefaultInstance() {
}
class CMsgClientUFSShareFile::HasBitSetters {
 public:
  static void set_has_app_id(CMsgClientUFSShareFile* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_file_name(CMsgClientUFSShareFile* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientUFSShareFile::kAppIdFieldNumber;
const int CMsgClientUFSShareFile::kFileNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientUFSShareFile::CMsgClientUFSShareFile()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientUFSShareFile)
}
CMsgClientUFSShareFile::CMsgClientUFSShareFile(const CMsgClientUFSShareFile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_name()) {
    file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  app_id_ = from.app_id_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientUFSShareFile)
}

void CMsgClientUFSShareFile::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientUFSShareFile_steammessages_5fclientserver_2eproto.base);
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_id_ = 0u;
}

CMsgClientUFSShareFile::~CMsgClientUFSShareFile() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientUFSShareFile)
  SharedDtor();
}

void CMsgClientUFSShareFile::SharedDtor() {
  file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientUFSShareFile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientUFSShareFile& CMsgClientUFSShareFile::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientUFSShareFile_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientUFSShareFile::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientUFSShareFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    file_name_.ClearNonDefaultToEmptyNoArena();
  }
  app_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientUFSShareFile::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientUFSShareFile*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string file_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientUFSShareFile.file_name");
        object = msg->mutable_file_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientUFSShareFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientUFSShareFile)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string file_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_name().data(), static_cast<int>(this->file_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientUFSShareFile.file_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientUFSShareFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientUFSShareFile)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientUFSShareFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientUFSShareFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional string file_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), static_cast<int>(this->file_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSShareFile.file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->file_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientUFSShareFile)
}

::google::protobuf::uint8* CMsgClientUFSShareFile::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientUFSShareFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional string file_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), static_cast<int>(this->file_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSShareFile.file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->file_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientUFSShareFile)
  return target;
}

size_t CMsgClientUFSShareFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientUFSShareFile)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string file_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientUFSShareFile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientUFSShareFile)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSShareFile* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientUFSShareFile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientUFSShareFile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientUFSShareFile)
    MergeFrom(*source);
  }
}

void CMsgClientUFSShareFile::MergeFrom(const CMsgClientUFSShareFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientUFSShareFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientUFSShareFile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientUFSShareFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSShareFile::CopyFrom(const CMsgClientUFSShareFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientUFSShareFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSShareFile::IsInitialized() const {
  return true;
}

void CMsgClientUFSShareFile::Swap(CMsgClientUFSShareFile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientUFSShareFile::InternalSwap(CMsgClientUFSShareFile* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  file_name_.Swap(&other->file_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(app_id_, other->app_id_);
}

::google::protobuf::Metadata CMsgClientUFSShareFile::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientUFSShareFileResponse::InitAsDefaultInstance() {
}
class CMsgClientUFSShareFileResponse::HasBitSetters {
 public:
  static void set_has_eresult(CMsgClientUFSShareFileResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_hcontent(CMsgClientUFSShareFileResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientUFSShareFileResponse::kEresultFieldNumber;
const int CMsgClientUFSShareFileResponse::kHcontentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientUFSShareFileResponse::CMsgClientUFSShareFileResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientUFSShareFileResponse)
}
CMsgClientUFSShareFileResponse::CMsgClientUFSShareFileResponse(const CMsgClientUFSShareFileResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&eresult_, &from.eresult_,
    static_cast<size_t>(reinterpret_cast<char*>(&hcontent_) -
    reinterpret_cast<char*>(&eresult_)) + sizeof(hcontent_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientUFSShareFileResponse)
}

void CMsgClientUFSShareFileResponse::SharedCtor() {
  eresult_ = 2;
  hcontent_ = PROTOBUF_ULONGLONG(18446744073709551615);
}

CMsgClientUFSShareFileResponse::~CMsgClientUFSShareFileResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientUFSShareFileResponse)
  SharedDtor();
}

void CMsgClientUFSShareFileResponse::SharedDtor() {
}

void CMsgClientUFSShareFileResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientUFSShareFileResponse& CMsgClientUFSShareFileResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientUFSShareFileResponse_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientUFSShareFileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientUFSShareFileResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    eresult_ = 2;
    hcontent_ = PROTOBUF_ULONGLONG(18446744073709551615);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientUFSShareFileResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientUFSShareFileResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_eresult(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 hcontent = 2 [default = 18446744073709551615];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_hcontent(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientUFSShareFileResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientUFSShareFileResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_eresult(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 hcontent = 2 [default = 18446744073709551615];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_hcontent(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &hcontent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientUFSShareFileResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientUFSShareFileResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientUFSShareFileResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientUFSShareFileResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional fixed64 hcontent = 2 [default = 18446744073709551615];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->hcontent(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientUFSShareFileResponse)
}

::google::protobuf::uint8* CMsgClientUFSShareFileResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientUFSShareFileResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // optional fixed64 hcontent = 2 [default = 18446744073709551615];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->hcontent(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientUFSShareFileResponse)
  return target;
}

size_t CMsgClientUFSShareFileResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientUFSShareFileResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 eresult = 1 [default = 2];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional fixed64 hcontent = 2 [default = 18446744073709551615];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientUFSShareFileResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientUFSShareFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSShareFileResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientUFSShareFileResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientUFSShareFileResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientUFSShareFileResponse)
    MergeFrom(*source);
  }
}

void CMsgClientUFSShareFileResponse::MergeFrom(const CMsgClientUFSShareFileResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientUFSShareFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      eresult_ = from.eresult_;
    }
    if (cached_has_bits & 0x00000002u) {
      hcontent_ = from.hcontent_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientUFSShareFileResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientUFSShareFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSShareFileResponse::CopyFrom(const CMsgClientUFSShareFileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientUFSShareFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSShareFileResponse::IsInitialized() const {
  return true;
}

void CMsgClientUFSShareFileResponse::Swap(CMsgClientUFSShareFileResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientUFSShareFileResponse::InternalSwap(CMsgClientUFSShareFileResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(eresult_, other->eresult_);
  swap(hcontent_, other->hcontent_);
}

::google::protobuf::Metadata CMsgClientUFSShareFileResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientAMGetClanOfficers::InitAsDefaultInstance() {
}
class CMsgClientAMGetClanOfficers::HasBitSetters {
 public:
  static void set_has_steamid_clan(CMsgClientAMGetClanOfficers* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientAMGetClanOfficers::kSteamidClanFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientAMGetClanOfficers::CMsgClientAMGetClanOfficers()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientAMGetClanOfficers)
}
CMsgClientAMGetClanOfficers::CMsgClientAMGetClanOfficers(const CMsgClientAMGetClanOfficers& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  steamid_clan_ = from.steamid_clan_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientAMGetClanOfficers)
}

void CMsgClientAMGetClanOfficers::SharedCtor() {
  steamid_clan_ = PROTOBUF_ULONGLONG(0);
}

CMsgClientAMGetClanOfficers::~CMsgClientAMGetClanOfficers() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientAMGetClanOfficers)
  SharedDtor();
}

void CMsgClientAMGetClanOfficers::SharedDtor() {
}

void CMsgClientAMGetClanOfficers::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientAMGetClanOfficers& CMsgClientAMGetClanOfficers::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientAMGetClanOfficers_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientAMGetClanOfficers::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientAMGetClanOfficers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steamid_clan_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientAMGetClanOfficers::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientAMGetClanOfficers*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid_clan = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steamid_clan(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientAMGetClanOfficers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientAMGetClanOfficers)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid_clan = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steamid_clan(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_clan_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientAMGetClanOfficers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientAMGetClanOfficers)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientAMGetClanOfficers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientAMGetClanOfficers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid_clan = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid_clan(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientAMGetClanOfficers)
}

::google::protobuf::uint8* CMsgClientAMGetClanOfficers::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientAMGetClanOfficers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid_clan = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid_clan(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientAMGetClanOfficers)
  return target;
}

size_t CMsgClientAMGetClanOfficers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientAMGetClanOfficers)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 steamid_clan = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientAMGetClanOfficers::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientAMGetClanOfficers)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientAMGetClanOfficers* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientAMGetClanOfficers>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientAMGetClanOfficers)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientAMGetClanOfficers)
    MergeFrom(*source);
  }
}

void CMsgClientAMGetClanOfficers::MergeFrom(const CMsgClientAMGetClanOfficers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientAMGetClanOfficers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_steamid_clan()) {
    set_steamid_clan(from.steamid_clan());
  }
}

void CMsgClientAMGetClanOfficers::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientAMGetClanOfficers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAMGetClanOfficers::CopyFrom(const CMsgClientAMGetClanOfficers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientAMGetClanOfficers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAMGetClanOfficers::IsInitialized() const {
  return true;
}

void CMsgClientAMGetClanOfficers::Swap(CMsgClientAMGetClanOfficers* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientAMGetClanOfficers::InternalSwap(CMsgClientAMGetClanOfficers* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_clan_, other->steamid_clan_);
}

::google::protobuf::Metadata CMsgClientAMGetClanOfficers::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientAMGetClanOfficersResponse::InitAsDefaultInstance() {
}
class CMsgClientAMGetClanOfficersResponse::HasBitSetters {
 public:
  static void set_has_eresult(CMsgClientAMGetClanOfficersResponse* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_steamid_clan(CMsgClientAMGetClanOfficersResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_officer_count(CMsgClientAMGetClanOfficersResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientAMGetClanOfficersResponse::kEresultFieldNumber;
const int CMsgClientAMGetClanOfficersResponse::kSteamidClanFieldNumber;
const int CMsgClientAMGetClanOfficersResponse::kOfficerCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientAMGetClanOfficersResponse::CMsgClientAMGetClanOfficersResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientAMGetClanOfficersResponse)
}
CMsgClientAMGetClanOfficersResponse::CMsgClientAMGetClanOfficersResponse(const CMsgClientAMGetClanOfficersResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_clan_, &from.steamid_clan_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&steamid_clan_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientAMGetClanOfficersResponse)
}

void CMsgClientAMGetClanOfficersResponse::SharedCtor() {
  ::memset(&steamid_clan_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&officer_count_) -
      reinterpret_cast<char*>(&steamid_clan_)) + sizeof(officer_count_));
  eresult_ = 2;
}

CMsgClientAMGetClanOfficersResponse::~CMsgClientAMGetClanOfficersResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientAMGetClanOfficersResponse)
  SharedDtor();
}

void CMsgClientAMGetClanOfficersResponse::SharedDtor() {
}

void CMsgClientAMGetClanOfficersResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientAMGetClanOfficersResponse& CMsgClientAMGetClanOfficersResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientAMGetClanOfficersResponse_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientAMGetClanOfficersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientAMGetClanOfficersResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&steamid_clan_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&officer_count_) -
        reinterpret_cast<char*>(&steamid_clan_)) + sizeof(officer_count_));
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientAMGetClanOfficersResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientAMGetClanOfficersResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_eresult(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 steamid_clan = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_steamid_clan(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional int32 officer_count = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_officer_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientAMGetClanOfficersResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientAMGetClanOfficersResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_eresult(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steamid_clan = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_steamid_clan(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_clan_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 officer_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_officer_count(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &officer_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientAMGetClanOfficersResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientAMGetClanOfficersResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientAMGetClanOfficersResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientAMGetClanOfficersResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional fixed64 steamid_clan = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steamid_clan(), output);
  }

  // optional int32 officer_count = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->officer_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientAMGetClanOfficersResponse)
}

::google::protobuf::uint8* CMsgClientAMGetClanOfficersResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientAMGetClanOfficersResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // optional fixed64 steamid_clan = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steamid_clan(), target);
  }

  // optional int32 officer_count = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->officer_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientAMGetClanOfficersResponse)
  return target;
}

size_t CMsgClientAMGetClanOfficersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientAMGetClanOfficersResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 steamid_clan = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional int32 officer_count = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->officer_count());
    }

    // optional int32 eresult = 1 [default = 2];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientAMGetClanOfficersResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientAMGetClanOfficersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientAMGetClanOfficersResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientAMGetClanOfficersResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientAMGetClanOfficersResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientAMGetClanOfficersResponse)
    MergeFrom(*source);
  }
}

void CMsgClientAMGetClanOfficersResponse::MergeFrom(const CMsgClientAMGetClanOfficersResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientAMGetClanOfficersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_clan_ = from.steamid_clan_;
    }
    if (cached_has_bits & 0x00000002u) {
      officer_count_ = from.officer_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientAMGetClanOfficersResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientAMGetClanOfficersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAMGetClanOfficersResponse::CopyFrom(const CMsgClientAMGetClanOfficersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientAMGetClanOfficersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAMGetClanOfficersResponse::IsInitialized() const {
  return true;
}

void CMsgClientAMGetClanOfficersResponse::Swap(CMsgClientAMGetClanOfficersResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientAMGetClanOfficersResponse::InternalSwap(CMsgClientAMGetClanOfficersResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_clan_, other->steamid_clan_);
  swap(officer_count_, other->officer_count_);
  swap(eresult_, other->eresult_);
}

::google::protobuf::Metadata CMsgClientAMGetClanOfficersResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientAMGetPersonaNameHistory_IdInstance::InitAsDefaultInstance() {
}
class CMsgClientAMGetPersonaNameHistory_IdInstance::HasBitSetters {
 public:
  static void set_has_steamid(CMsgClientAMGetPersonaNameHistory_IdInstance* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientAMGetPersonaNameHistory_IdInstance::kSteamidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientAMGetPersonaNameHistory_IdInstance::CMsgClientAMGetPersonaNameHistory_IdInstance()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientAMGetPersonaNameHistory.IdInstance)
}
CMsgClientAMGetPersonaNameHistory_IdInstance::CMsgClientAMGetPersonaNameHistory_IdInstance(const CMsgClientAMGetPersonaNameHistory_IdInstance& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientAMGetPersonaNameHistory.IdInstance)
}

void CMsgClientAMGetPersonaNameHistory_IdInstance::SharedCtor() {
  steamid_ = PROTOBUF_ULONGLONG(0);
}

CMsgClientAMGetPersonaNameHistory_IdInstance::~CMsgClientAMGetPersonaNameHistory_IdInstance() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientAMGetPersonaNameHistory.IdInstance)
  SharedDtor();
}

void CMsgClientAMGetPersonaNameHistory_IdInstance::SharedDtor() {
}

void CMsgClientAMGetPersonaNameHistory_IdInstance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientAMGetPersonaNameHistory_IdInstance& CMsgClientAMGetPersonaNameHistory_IdInstance::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientAMGetPersonaNameHistory_IdInstance_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientAMGetPersonaNameHistory_IdInstance::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientAMGetPersonaNameHistory.IdInstance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientAMGetPersonaNameHistory_IdInstance::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientAMGetPersonaNameHistory_IdInstance*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientAMGetPersonaNameHistory_IdInstance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientAMGetPersonaNameHistory.IdInstance)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientAMGetPersonaNameHistory.IdInstance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientAMGetPersonaNameHistory.IdInstance)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientAMGetPersonaNameHistory_IdInstance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientAMGetPersonaNameHistory.IdInstance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientAMGetPersonaNameHistory.IdInstance)
}

::google::protobuf::uint8* CMsgClientAMGetPersonaNameHistory_IdInstance::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientAMGetPersonaNameHistory.IdInstance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientAMGetPersonaNameHistory.IdInstance)
  return target;
}

size_t CMsgClientAMGetPersonaNameHistory_IdInstance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientAMGetPersonaNameHistory.IdInstance)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 steamid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientAMGetPersonaNameHistory_IdInstance::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientAMGetPersonaNameHistory.IdInstance)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientAMGetPersonaNameHistory_IdInstance* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientAMGetPersonaNameHistory_IdInstance>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientAMGetPersonaNameHistory.IdInstance)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientAMGetPersonaNameHistory.IdInstance)
    MergeFrom(*source);
  }
}

void CMsgClientAMGetPersonaNameHistory_IdInstance::MergeFrom(const CMsgClientAMGetPersonaNameHistory_IdInstance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientAMGetPersonaNameHistory.IdInstance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_steamid()) {
    set_steamid(from.steamid());
  }
}

void CMsgClientAMGetPersonaNameHistory_IdInstance::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientAMGetPersonaNameHistory.IdInstance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAMGetPersonaNameHistory_IdInstance::CopyFrom(const CMsgClientAMGetPersonaNameHistory_IdInstance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientAMGetPersonaNameHistory.IdInstance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAMGetPersonaNameHistory_IdInstance::IsInitialized() const {
  return true;
}

void CMsgClientAMGetPersonaNameHistory_IdInstance::Swap(CMsgClientAMGetPersonaNameHistory_IdInstance* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientAMGetPersonaNameHistory_IdInstance::InternalSwap(CMsgClientAMGetPersonaNameHistory_IdInstance* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
}

::google::protobuf::Metadata CMsgClientAMGetPersonaNameHistory_IdInstance::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientAMGetPersonaNameHistory::InitAsDefaultInstance() {
}
class CMsgClientAMGetPersonaNameHistory::HasBitSetters {
 public:
  static void set_has_id_count(CMsgClientAMGetPersonaNameHistory* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientAMGetPersonaNameHistory::kIdCountFieldNumber;
const int CMsgClientAMGetPersonaNameHistory::kIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientAMGetPersonaNameHistory::CMsgClientAMGetPersonaNameHistory()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientAMGetPersonaNameHistory)
}
CMsgClientAMGetPersonaNameHistory::CMsgClientAMGetPersonaNameHistory(const CMsgClientAMGetPersonaNameHistory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_count_ = from.id_count_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientAMGetPersonaNameHistory)
}

void CMsgClientAMGetPersonaNameHistory::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientAMGetPersonaNameHistory_steammessages_5fclientserver_2eproto.base);
  id_count_ = 0;
}

CMsgClientAMGetPersonaNameHistory::~CMsgClientAMGetPersonaNameHistory() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientAMGetPersonaNameHistory)
  SharedDtor();
}

void CMsgClientAMGetPersonaNameHistory::SharedDtor() {
}

void CMsgClientAMGetPersonaNameHistory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientAMGetPersonaNameHistory& CMsgClientAMGetPersonaNameHistory::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientAMGetPersonaNameHistory_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientAMGetPersonaNameHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientAMGetPersonaNameHistory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  id_count_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientAMGetPersonaNameHistory::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientAMGetPersonaNameHistory*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 id_count = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_id_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.steam.CMsgClientAMGetPersonaNameHistory.IdInstance Ids = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgClientAMGetPersonaNameHistory_IdInstance::_InternalParse;
          object = msg->add_ids();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientAMGetPersonaNameHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientAMGetPersonaNameHistory)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id_count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_id_count(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgClientAMGetPersonaNameHistory.IdInstance Ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_ids()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientAMGetPersonaNameHistory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientAMGetPersonaNameHistory)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientAMGetPersonaNameHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientAMGetPersonaNameHistory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id_count = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id_count(), output);
  }

  // repeated .proto.steam.CMsgClientAMGetPersonaNameHistory.IdInstance Ids = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ids_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->ids(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientAMGetPersonaNameHistory)
}

::google::protobuf::uint8* CMsgClientAMGetPersonaNameHistory::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientAMGetPersonaNameHistory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id_count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id_count(), target);
  }

  // repeated .proto.steam.CMsgClientAMGetPersonaNameHistory.IdInstance Ids = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ids_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->ids(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientAMGetPersonaNameHistory)
  return target;
}

size_t CMsgClientAMGetPersonaNameHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientAMGetPersonaNameHistory)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientAMGetPersonaNameHistory.IdInstance Ids = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->ids_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->ids(static_cast<int>(i)));
    }
  }

  // optional int32 id_count = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientAMGetPersonaNameHistory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientAMGetPersonaNameHistory)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientAMGetPersonaNameHistory* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientAMGetPersonaNameHistory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientAMGetPersonaNameHistory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientAMGetPersonaNameHistory)
    MergeFrom(*source);
  }
}

void CMsgClientAMGetPersonaNameHistory::MergeFrom(const CMsgClientAMGetPersonaNameHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientAMGetPersonaNameHistory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  if (from.has_id_count()) {
    set_id_count(from.id_count());
  }
}

void CMsgClientAMGetPersonaNameHistory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientAMGetPersonaNameHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAMGetPersonaNameHistory::CopyFrom(const CMsgClientAMGetPersonaNameHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientAMGetPersonaNameHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAMGetPersonaNameHistory::IsInitialized() const {
  return true;
}

void CMsgClientAMGetPersonaNameHistory::Swap(CMsgClientAMGetPersonaNameHistory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientAMGetPersonaNameHistory::InternalSwap(CMsgClientAMGetPersonaNameHistory* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&ids_)->InternalSwap(CastToBase(&other->ids_));
  swap(id_count_, other->id_count_);
}

::google::protobuf::Metadata CMsgClientAMGetPersonaNameHistory::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::InitAsDefaultInstance() {
}
class CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::HasBitSetters {
 public:
  static void set_has_name_since(CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_name(CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::kNameSinceFieldNumber;
const int CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance)
}
CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance(const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  name_since_ = from.name_since_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance)
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance_steammessages_5fclientserver_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_since_ = 0u;
}

CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::~CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance)
  SharedDtor();
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance& CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  name_since_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed32 name_since = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_name_since(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional string name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 name_since = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_name_since(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &name_since_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 name_since = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->name_since(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance)
}

::google::protobuf::uint8* CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 name_since = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->name_since(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance)
  return target;
}

size_t CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional fixed32 name_since = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance)
    MergeFrom(*source);
  }
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::MergeFrom(const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      name_since_ = from.name_since_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::CopyFrom(const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::IsInitialized() const {
  return true;
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::Swap(CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::InternalSwap(CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(name_since_, other->name_since_);
}

::google::protobuf::Metadata CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::InitAsDefaultInstance() {
}
class CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::HasBitSetters {
 public:
  static void set_has_eresult(CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_steamid(CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::kEresultFieldNumber;
const int CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::kSteamidFieldNumber;
const int CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::kNamesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance)
}
CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance(const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      names_(from.names_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance)
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_steammessages_5fclientserver_2eproto.base);
  steamid_ = PROTOBUF_ULONGLONG(0);
  eresult_ = 2;
}

CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::~CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance)
  SharedDtor();
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::SharedDtor() {
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance& CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  names_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    steamid_ = PROTOBUF_ULONGLONG(0);
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_eresult(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 steamid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // repeated .proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance names = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::_InternalParse;
          object = msg->add_names();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_eresult(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steamid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance names = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_names()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional fixed64 steamid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steamid(), output);
  }

  // repeated .proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance names = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->names_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->names(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance)
}

::google::protobuf::uint8* CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // optional fixed64 steamid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steamid(), target);
  }

  // repeated .proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance names = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->names_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->names(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance)
  return target;
}

size_t CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance names = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->names_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->names(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steamid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional int32 eresult = 1 [default = 2];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance)
    MergeFrom(*source);
  }
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::MergeFrom(const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  names_.MergeFrom(from.names_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::CopyFrom(const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::IsInitialized() const {
  return true;
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::Swap(CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::InternalSwap(CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&names_)->InternalSwap(CastToBase(&other->names_));
  swap(steamid_, other->steamid_);
  swap(eresult_, other->eresult_);
}

::google::protobuf::Metadata CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientAMGetPersonaNameHistoryResponse::InitAsDefaultInstance() {
}
class CMsgClientAMGetPersonaNameHistoryResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientAMGetPersonaNameHistoryResponse::kResponsesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientAMGetPersonaNameHistoryResponse::CMsgClientAMGetPersonaNameHistoryResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse)
}
CMsgClientAMGetPersonaNameHistoryResponse::CMsgClientAMGetPersonaNameHistoryResponse(const CMsgClientAMGetPersonaNameHistoryResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      responses_(from.responses_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse)
}

void CMsgClientAMGetPersonaNameHistoryResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientAMGetPersonaNameHistoryResponse_steammessages_5fclientserver_2eproto.base);
}

CMsgClientAMGetPersonaNameHistoryResponse::~CMsgClientAMGetPersonaNameHistoryResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse)
  SharedDtor();
}

void CMsgClientAMGetPersonaNameHistoryResponse::SharedDtor() {
}

void CMsgClientAMGetPersonaNameHistoryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientAMGetPersonaNameHistoryResponse& CMsgClientAMGetPersonaNameHistoryResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientAMGetPersonaNameHistoryResponse_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientAMGetPersonaNameHistoryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  responses_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientAMGetPersonaNameHistoryResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientAMGetPersonaNameHistoryResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance responses = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::_InternalParse;
          object = msg->add_responses();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientAMGetPersonaNameHistoryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance responses = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_responses()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientAMGetPersonaNameHistoryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance responses = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->responses_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->responses(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse)
}

::google::protobuf::uint8* CMsgClientAMGetPersonaNameHistoryResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance responses = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->responses_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->responses(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse)
  return target;
}

size_t CMsgClientAMGetPersonaNameHistoryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance responses = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->responses_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->responses(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientAMGetPersonaNameHistoryResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientAMGetPersonaNameHistoryResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientAMGetPersonaNameHistoryResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse)
    MergeFrom(*source);
  }
}

void CMsgClientAMGetPersonaNameHistoryResponse::MergeFrom(const CMsgClientAMGetPersonaNameHistoryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  responses_.MergeFrom(from.responses_);
}

void CMsgClientAMGetPersonaNameHistoryResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAMGetPersonaNameHistoryResponse::CopyFrom(const CMsgClientAMGetPersonaNameHistoryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAMGetPersonaNameHistoryResponse::IsInitialized() const {
  return true;
}

void CMsgClientAMGetPersonaNameHistoryResponse::Swap(CMsgClientAMGetPersonaNameHistoryResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientAMGetPersonaNameHistoryResponse::InternalSwap(CMsgClientAMGetPersonaNameHistoryResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&responses_)->InternalSwap(CastToBase(&other->responses_));
}

::google::protobuf::Metadata CMsgClientAMGetPersonaNameHistoryResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientDeregisterWithServer::InitAsDefaultInstance() {
}
class CMsgClientDeregisterWithServer::HasBitSetters {
 public:
  static void set_has_eservertype(CMsgClientDeregisterWithServer* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_app_id(CMsgClientDeregisterWithServer* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientDeregisterWithServer::kEservertypeFieldNumber;
const int CMsgClientDeregisterWithServer::kAppIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientDeregisterWithServer::CMsgClientDeregisterWithServer()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientDeregisterWithServer)
}
CMsgClientDeregisterWithServer::CMsgClientDeregisterWithServer(const CMsgClientDeregisterWithServer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&eservertype_, &from.eservertype_,
    static_cast<size_t>(reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&eservertype_)) + sizeof(app_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientDeregisterWithServer)
}

void CMsgClientDeregisterWithServer::SharedCtor() {
  ::memset(&eservertype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&app_id_) -
      reinterpret_cast<char*>(&eservertype_)) + sizeof(app_id_));
}

CMsgClientDeregisterWithServer::~CMsgClientDeregisterWithServer() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientDeregisterWithServer)
  SharedDtor();
}

void CMsgClientDeregisterWithServer::SharedDtor() {
}

void CMsgClientDeregisterWithServer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientDeregisterWithServer& CMsgClientDeregisterWithServer::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientDeregisterWithServer_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientDeregisterWithServer::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientDeregisterWithServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&eservertype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&app_id_) -
        reinterpret_cast<char*>(&eservertype_)) + sizeof(app_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientDeregisterWithServer::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientDeregisterWithServer*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 eservertype = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_eservertype(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 app_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientDeregisterWithServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientDeregisterWithServer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eservertype = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_eservertype(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eservertype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 app_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientDeregisterWithServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientDeregisterWithServer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientDeregisterWithServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientDeregisterWithServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eservertype = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eservertype(), output);
  }

  // optional uint32 app_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->app_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientDeregisterWithServer)
}

::google::protobuf::uint8* CMsgClientDeregisterWithServer::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientDeregisterWithServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eservertype = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eservertype(), target);
  }

  // optional uint32 app_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->app_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientDeregisterWithServer)
  return target;
}

size_t CMsgClientDeregisterWithServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientDeregisterWithServer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 eservertype = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eservertype());
    }

    // optional uint32 app_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientDeregisterWithServer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientDeregisterWithServer)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientDeregisterWithServer* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientDeregisterWithServer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientDeregisterWithServer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientDeregisterWithServer)
    MergeFrom(*source);
  }
}

void CMsgClientDeregisterWithServer::MergeFrom(const CMsgClientDeregisterWithServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientDeregisterWithServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      eservertype_ = from.eservertype_;
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientDeregisterWithServer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientDeregisterWithServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientDeregisterWithServer::CopyFrom(const CMsgClientDeregisterWithServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientDeregisterWithServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientDeregisterWithServer::IsInitialized() const {
  return true;
}

void CMsgClientDeregisterWithServer::Swap(CMsgClientDeregisterWithServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientDeregisterWithServer::InternalSwap(CMsgClientDeregisterWithServer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(eservertype_, other->eservertype_);
  swap(app_id_, other->app_id_);
}

::google::protobuf::Metadata CMsgClientDeregisterWithServer::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientClanState_NameInfo::InitAsDefaultInstance() {
}
class CMsgClientClanState_NameInfo::HasBitSetters {
 public:
  static void set_has_clan_name(CMsgClientClanState_NameInfo* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_sha_avatar(CMsgClientClanState_NameInfo* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientClanState_NameInfo::kClanNameFieldNumber;
const int CMsgClientClanState_NameInfo::kShaAvatarFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientClanState_NameInfo::CMsgClientClanState_NameInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientClanState.NameInfo)
}
CMsgClientClanState_NameInfo::CMsgClientClanState_NameInfo(const CMsgClientClanState_NameInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clan_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clan_name()) {
    clan_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clan_name_);
  }
  sha_avatar_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sha_avatar()) {
    sha_avatar_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_avatar_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientClanState.NameInfo)
}

void CMsgClientClanState_NameInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientClanState_NameInfo_steammessages_5fclientserver_2eproto.base);
  clan_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sha_avatar_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgClientClanState_NameInfo::~CMsgClientClanState_NameInfo() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientClanState.NameInfo)
  SharedDtor();
}

void CMsgClientClanState_NameInfo::SharedDtor() {
  clan_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sha_avatar_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientClanState_NameInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientClanState_NameInfo& CMsgClientClanState_NameInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientClanState_NameInfo_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientClanState_NameInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientClanState.NameInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      clan_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      sha_avatar_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientClanState_NameInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientClanState_NameInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string clan_name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientClanState.NameInfo.clan_name");
        object = msg->mutable_clan_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bytes sha_avatar = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_sha_avatar();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientClanState_NameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientClanState.NameInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string clan_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clan_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clan_name().data(), static_cast<int>(this->clan_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientClanState.NameInfo.clan_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sha_avatar = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha_avatar()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientClanState.NameInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientClanState.NameInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientClanState_NameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientClanState.NameInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string clan_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clan_name().data(), static_cast<int>(this->clan_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientClanState.NameInfo.clan_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->clan_name(), output);
  }

  // optional bytes sha_avatar = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->sha_avatar(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientClanState.NameInfo)
}

::google::protobuf::uint8* CMsgClientClanState_NameInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientClanState.NameInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string clan_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clan_name().data(), static_cast<int>(this->clan_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientClanState.NameInfo.clan_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->clan_name(), target);
  }

  // optional bytes sha_avatar = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->sha_avatar(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientClanState.NameInfo)
  return target;
}

size_t CMsgClientClanState_NameInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientClanState.NameInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string clan_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clan_name());
    }

    // optional bytes sha_avatar = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha_avatar());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientClanState_NameInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientClanState.NameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientClanState_NameInfo* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientClanState_NameInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientClanState.NameInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientClanState.NameInfo)
    MergeFrom(*source);
  }
}

void CMsgClientClanState_NameInfo::MergeFrom(const CMsgClientClanState_NameInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientClanState.NameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      clan_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clan_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      sha_avatar_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_avatar_);
    }
  }
}

void CMsgClientClanState_NameInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientClanState.NameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientClanState_NameInfo::CopyFrom(const CMsgClientClanState_NameInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientClanState.NameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientClanState_NameInfo::IsInitialized() const {
  return true;
}

void CMsgClientClanState_NameInfo::Swap(CMsgClientClanState_NameInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientClanState_NameInfo::InternalSwap(CMsgClientClanState_NameInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  clan_name_.Swap(&other->clan_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sha_avatar_.Swap(&other->sha_avatar_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CMsgClientClanState_NameInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientClanState_UserCounts::InitAsDefaultInstance() {
}
class CMsgClientClanState_UserCounts::HasBitSetters {
 public:
  static void set_has_members(CMsgClientClanState_UserCounts* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_online(CMsgClientClanState_UserCounts* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_chatting(CMsgClientClanState_UserCounts* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_in_game(CMsgClientClanState_UserCounts* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_chat_room_members(CMsgClientClanState_UserCounts* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientClanState_UserCounts::kMembersFieldNumber;
const int CMsgClientClanState_UserCounts::kOnlineFieldNumber;
const int CMsgClientClanState_UserCounts::kChattingFieldNumber;
const int CMsgClientClanState_UserCounts::kInGameFieldNumber;
const int CMsgClientClanState_UserCounts::kChatRoomMembersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientClanState_UserCounts::CMsgClientClanState_UserCounts()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientClanState.UserCounts)
}
CMsgClientClanState_UserCounts::CMsgClientClanState_UserCounts(const CMsgClientClanState_UserCounts& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&members_, &from.members_,
    static_cast<size_t>(reinterpret_cast<char*>(&chat_room_members_) -
    reinterpret_cast<char*>(&members_)) + sizeof(chat_room_members_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientClanState.UserCounts)
}

void CMsgClientClanState_UserCounts::SharedCtor() {
  ::memset(&members_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chat_room_members_) -
      reinterpret_cast<char*>(&members_)) + sizeof(chat_room_members_));
}

CMsgClientClanState_UserCounts::~CMsgClientClanState_UserCounts() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientClanState.UserCounts)
  SharedDtor();
}

void CMsgClientClanState_UserCounts::SharedDtor() {
}

void CMsgClientClanState_UserCounts::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientClanState_UserCounts& CMsgClientClanState_UserCounts::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientClanState_UserCounts_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientClanState_UserCounts::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientClanState.UserCounts)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&members_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chat_room_members_) -
        reinterpret_cast<char*>(&members_)) + sizeof(chat_room_members_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientClanState_UserCounts::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientClanState_UserCounts*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 members = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_members(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 online = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_online(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 chatting = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_chatting(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 in_game = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_in_game(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 chat_room_members = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_chat_room_members(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientClanState_UserCounts::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientClanState.UserCounts)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 members = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_members(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &members_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 online = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_online(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &online_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 chatting = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_chatting(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chatting_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 in_game = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_in_game(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &in_game_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 chat_room_members = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_chat_room_members(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chat_room_members_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientClanState.UserCounts)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientClanState.UserCounts)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientClanState_UserCounts::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientClanState.UserCounts)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 members = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->members(), output);
  }

  // optional uint32 online = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->online(), output);
  }

  // optional uint32 chatting = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->chatting(), output);
  }

  // optional uint32 in_game = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->in_game(), output);
  }

  // optional uint32 chat_room_members = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->chat_room_members(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientClanState.UserCounts)
}

::google::protobuf::uint8* CMsgClientClanState_UserCounts::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientClanState.UserCounts)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 members = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->members(), target);
  }

  // optional uint32 online = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->online(), target);
  }

  // optional uint32 chatting = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->chatting(), target);
  }

  // optional uint32 in_game = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->in_game(), target);
  }

  // optional uint32 chat_room_members = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->chat_room_members(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientClanState.UserCounts)
  return target;
}

size_t CMsgClientClanState_UserCounts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientClanState.UserCounts)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 members = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->members());
    }

    // optional uint32 online = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->online());
    }

    // optional uint32 chatting = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chatting());
    }

    // optional uint32 in_game = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->in_game());
    }

    // optional uint32 chat_room_members = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chat_room_members());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientClanState_UserCounts::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientClanState.UserCounts)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientClanState_UserCounts* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientClanState_UserCounts>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientClanState.UserCounts)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientClanState.UserCounts)
    MergeFrom(*source);
  }
}

void CMsgClientClanState_UserCounts::MergeFrom(const CMsgClientClanState_UserCounts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientClanState.UserCounts)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      members_ = from.members_;
    }
    if (cached_has_bits & 0x00000002u) {
      online_ = from.online_;
    }
    if (cached_has_bits & 0x00000004u) {
      chatting_ = from.chatting_;
    }
    if (cached_has_bits & 0x00000008u) {
      in_game_ = from.in_game_;
    }
    if (cached_has_bits & 0x00000010u) {
      chat_room_members_ = from.chat_room_members_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientClanState_UserCounts::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientClanState.UserCounts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientClanState_UserCounts::CopyFrom(const CMsgClientClanState_UserCounts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientClanState.UserCounts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientClanState_UserCounts::IsInitialized() const {
  return true;
}

void CMsgClientClanState_UserCounts::Swap(CMsgClientClanState_UserCounts* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientClanState_UserCounts::InternalSwap(CMsgClientClanState_UserCounts* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(members_, other->members_);
  swap(online_, other->online_);
  swap(chatting_, other->chatting_);
  swap(in_game_, other->in_game_);
  swap(chat_room_members_, other->chat_room_members_);
}

::google::protobuf::Metadata CMsgClientClanState_UserCounts::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientClanState_Event::InitAsDefaultInstance() {
}
class CMsgClientClanState_Event::HasBitSetters {
 public:
  static void set_has_gid(CMsgClientClanState_Event* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_event_time(CMsgClientClanState_Event* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_headline(CMsgClientClanState_Event* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_game_id(CMsgClientClanState_Event* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_just_posted(CMsgClientClanState_Event* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientClanState_Event::kGidFieldNumber;
const int CMsgClientClanState_Event::kEventTimeFieldNumber;
const int CMsgClientClanState_Event::kHeadlineFieldNumber;
const int CMsgClientClanState_Event::kGameIdFieldNumber;
const int CMsgClientClanState_Event::kJustPostedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientClanState_Event::CMsgClientClanState_Event()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientClanState.Event)
}
CMsgClientClanState_Event::CMsgClientClanState_Event(const CMsgClientClanState_Event& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  headline_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_headline()) {
    headline_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.headline_);
  }
  ::memcpy(&gid_, &from.gid_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_id_) -
    reinterpret_cast<char*>(&gid_)) + sizeof(game_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientClanState.Event)
}

void CMsgClientClanState_Event::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientClanState_Event_steammessages_5fclientserver_2eproto.base);
  headline_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&gid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_id_) -
      reinterpret_cast<char*>(&gid_)) + sizeof(game_id_));
}

CMsgClientClanState_Event::~CMsgClientClanState_Event() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientClanState.Event)
  SharedDtor();
}

void CMsgClientClanState_Event::SharedDtor() {
  headline_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientClanState_Event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientClanState_Event& CMsgClientClanState_Event::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientClanState_Event_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientClanState_Event::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientClanState.Event)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    headline_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&gid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&game_id_) -
        reinterpret_cast<char*>(&gid_)) + sizeof(game_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientClanState_Event::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientClanState_Event*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 gid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_gid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 event_time = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_event_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string headline = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientClanState.Event.headline");
        object = msg->mutable_headline();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional fixed64 game_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_game_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional bool just_posted = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_just_posted(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientClanState_Event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientClanState.Event)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 gid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_gid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &gid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 event_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_event_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string headline = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headline()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->headline().data(), static_cast<int>(this->headline().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientClanState.Event.headline");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 game_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {
          HasBitSetters::set_has_game_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool just_posted = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_just_posted(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &just_posted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientClanState.Event)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientClanState.Event)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientClanState_Event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientClanState.Event)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 gid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->gid(), output);
  }

  // optional uint32 event_time = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->event_time(), output);
  }

  // optional string headline = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->headline().data(), static_cast<int>(this->headline().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientClanState.Event.headline");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->headline(), output);
  }

  // optional fixed64 game_id = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->game_id(), output);
  }

  // optional bool just_posted = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->just_posted(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientClanState.Event)
}

::google::protobuf::uint8* CMsgClientClanState_Event::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientClanState.Event)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 gid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->gid(), target);
  }

  // optional uint32 event_time = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->event_time(), target);
  }

  // optional string headline = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->headline().data(), static_cast<int>(this->headline().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientClanState.Event.headline");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->headline(), target);
  }

  // optional fixed64 game_id = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->game_id(), target);
  }

  // optional bool just_posted = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->just_posted(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientClanState.Event)
  return target;
}

size_t CMsgClientClanState_Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientClanState.Event)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string headline = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->headline());
    }

    // optional fixed64 gid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 event_time = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_time());
    }

    // optional bool just_posted = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional fixed64 game_id = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientClanState_Event::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientClanState.Event)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientClanState_Event* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientClanState_Event>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientClanState.Event)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientClanState.Event)
    MergeFrom(*source);
  }
}

void CMsgClientClanState_Event::MergeFrom(const CMsgClientClanState_Event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientClanState.Event)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      headline_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.headline_);
    }
    if (cached_has_bits & 0x00000002u) {
      gid_ = from.gid_;
    }
    if (cached_has_bits & 0x00000004u) {
      event_time_ = from.event_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      just_posted_ = from.just_posted_;
    }
    if (cached_has_bits & 0x00000010u) {
      game_id_ = from.game_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientClanState_Event::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientClanState.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientClanState_Event::CopyFrom(const CMsgClientClanState_Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientClanState.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientClanState_Event::IsInitialized() const {
  return true;
}

void CMsgClientClanState_Event::Swap(CMsgClientClanState_Event* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientClanState_Event::InternalSwap(CMsgClientClanState_Event* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  headline_.Swap(&other->headline_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(gid_, other->gid_);
  swap(event_time_, other->event_time_);
  swap(just_posted_, other->just_posted_);
  swap(game_id_, other->game_id_);
}

::google::protobuf::Metadata CMsgClientClanState_Event::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientClanState::InitAsDefaultInstance() {
  ::proto::steam::_CMsgClientClanState_default_instance_._instance.get_mutable()->name_info_ = const_cast< ::proto::steam::CMsgClientClanState_NameInfo*>(
      ::proto::steam::CMsgClientClanState_NameInfo::internal_default_instance());
  ::proto::steam::_CMsgClientClanState_default_instance_._instance.get_mutable()->user_counts_ = const_cast< ::proto::steam::CMsgClientClanState_UserCounts*>(
      ::proto::steam::CMsgClientClanState_UserCounts::internal_default_instance());
}
class CMsgClientClanState::HasBitSetters {
 public:
  static void set_has_steamid_clan(CMsgClientClanState* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_clan_account_flags(CMsgClientClanState* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static const ::proto::steam::CMsgClientClanState_NameInfo& name_info(const CMsgClientClanState* msg);
  static void set_has_name_info(CMsgClientClanState* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::proto::steam::CMsgClientClanState_UserCounts& user_counts(const CMsgClientClanState* msg);
  static void set_has_user_counts(CMsgClientClanState* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_chat_room_private(CMsgClientClanState* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

const ::proto::steam::CMsgClientClanState_NameInfo&
CMsgClientClanState::HasBitSetters::name_info(const CMsgClientClanState* msg) {
  return *msg->name_info_;
}
const ::proto::steam::CMsgClientClanState_UserCounts&
CMsgClientClanState::HasBitSetters::user_counts(const CMsgClientClanState* msg) {
  return *msg->user_counts_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientClanState::kSteamidClanFieldNumber;
const int CMsgClientClanState::kClanAccountFlagsFieldNumber;
const int CMsgClientClanState::kNameInfoFieldNumber;
const int CMsgClientClanState::kUserCountsFieldNumber;
const int CMsgClientClanState::kEventsFieldNumber;
const int CMsgClientClanState::kAnnouncementsFieldNumber;
const int CMsgClientClanState::kChatRoomPrivateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientClanState::CMsgClientClanState()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientClanState)
}
CMsgClientClanState::CMsgClientClanState(const CMsgClientClanState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      events_(from.events_),
      announcements_(from.announcements_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_name_info()) {
    name_info_ = new ::proto::steam::CMsgClientClanState_NameInfo(*from.name_info_);
  } else {
    name_info_ = nullptr;
  }
  if (from.has_user_counts()) {
    user_counts_ = new ::proto::steam::CMsgClientClanState_UserCounts(*from.user_counts_);
  } else {
    user_counts_ = nullptr;
  }
  ::memcpy(&steamid_clan_, &from.steamid_clan_,
    static_cast<size_t>(reinterpret_cast<char*>(&chat_room_private_) -
    reinterpret_cast<char*>(&steamid_clan_)) + sizeof(chat_room_private_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientClanState)
}

void CMsgClientClanState::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientClanState_steammessages_5fclientserver_2eproto.base);
  ::memset(&name_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chat_room_private_) -
      reinterpret_cast<char*>(&name_info_)) + sizeof(chat_room_private_));
}

CMsgClientClanState::~CMsgClientClanState() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientClanState)
  SharedDtor();
}

void CMsgClientClanState::SharedDtor() {
  if (this != internal_default_instance()) delete name_info_;
  if (this != internal_default_instance()) delete user_counts_;
}

void CMsgClientClanState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientClanState& CMsgClientClanState::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientClanState_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientClanState::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientClanState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_.Clear();
  announcements_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(name_info_ != nullptr);
      name_info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(user_counts_ != nullptr);
      user_counts_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&steamid_clan_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chat_room_private_) -
        reinterpret_cast<char*>(&steamid_clan_)) + sizeof(chat_room_private_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientClanState::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientClanState*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid_clan = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steamid_clan(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 clan_account_flags = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_clan_account_flags(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.steam.CMsgClientClanState.NameInfo name_info = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::steam::CMsgClientClanState_NameInfo::_InternalParse;
        object = msg->mutable_name_info();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .proto.steam.CMsgClientClanState.UserCounts user_counts = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::steam::CMsgClientClanState_UserCounts::_InternalParse;
        object = msg->mutable_user_counts();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .proto.steam.CMsgClientClanState.Event events = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgClientClanState_Event::_InternalParse;
          object = msg->add_events();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 50 && (ptr += 1));
        break;
      }
      // repeated .proto.steam.CMsgClientClanState.Event announcements = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgClientClanState_Event::_InternalParse;
          object = msg->add_announcements();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 58 && (ptr += 1));
        break;
      }
      // optional bool chat_room_private = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_chat_room_private(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientClanState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientClanState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid_clan = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steamid_clan(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_clan_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 clan_account_flags = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_clan_account_flags(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clan_account_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CMsgClientClanState.NameInfo name_info = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_name_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CMsgClientClanState.UserCounts user_counts = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user_counts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgClientClanState.Event events = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgClientClanState.Event announcements = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_announcements()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool chat_room_private = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_chat_room_private(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &chat_room_private_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientClanState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientClanState)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientClanState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientClanState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid_clan = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid_clan(), output);
  }

  // optional uint32 clan_account_flags = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->clan_account_flags(), output);
  }

  // optional .proto.steam.CMsgClientClanState.NameInfo name_info = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::name_info(this), output);
  }

  // optional .proto.steam.CMsgClientClanState.UserCounts user_counts = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::user_counts(this), output);
  }

  // repeated .proto.steam.CMsgClientClanState.Event events = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->events_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->events(static_cast<int>(i)),
      output);
  }

  // repeated .proto.steam.CMsgClientClanState.Event announcements = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->announcements_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->announcements(static_cast<int>(i)),
      output);
  }

  // optional bool chat_room_private = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->chat_room_private(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientClanState)
}

::google::protobuf::uint8* CMsgClientClanState::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientClanState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid_clan = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid_clan(), target);
  }

  // optional uint32 clan_account_flags = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->clan_account_flags(), target);
  }

  // optional .proto.steam.CMsgClientClanState.NameInfo name_info = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::name_info(this), target);
  }

  // optional .proto.steam.CMsgClientClanState.UserCounts user_counts = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::user_counts(this), target);
  }

  // repeated .proto.steam.CMsgClientClanState.Event events = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->events_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->events(static_cast<int>(i)), target);
  }

  // repeated .proto.steam.CMsgClientClanState.Event announcements = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->announcements_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->announcements(static_cast<int>(i)), target);
  }

  // optional bool chat_room_private = 8;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->chat_room_private(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientClanState)
  return target;
}

size_t CMsgClientClanState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientClanState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientClanState.Event events = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->events_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->events(static_cast<int>(i)));
    }
  }

  // repeated .proto.steam.CMsgClientClanState.Event announcements = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->announcements_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->announcements(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .proto.steam.CMsgClientClanState.NameInfo name_info = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *name_info_);
    }

    // optional .proto.steam.CMsgClientClanState.UserCounts user_counts = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *user_counts_);
    }

    // optional fixed64 steamid_clan = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 clan_account_flags = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clan_account_flags());
    }

    // optional bool chat_room_private = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientClanState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientClanState)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientClanState* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientClanState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientClanState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientClanState)
    MergeFrom(*source);
  }
}

void CMsgClientClanState::MergeFrom(const CMsgClientClanState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientClanState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  events_.MergeFrom(from.events_);
  announcements_.MergeFrom(from.announcements_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_name_info()->::proto::steam::CMsgClientClanState_NameInfo::MergeFrom(from.name_info());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_user_counts()->::proto::steam::CMsgClientClanState_UserCounts::MergeFrom(from.user_counts());
    }
    if (cached_has_bits & 0x00000004u) {
      steamid_clan_ = from.steamid_clan_;
    }
    if (cached_has_bits & 0x00000008u) {
      clan_account_flags_ = from.clan_account_flags_;
    }
    if (cached_has_bits & 0x00000010u) {
      chat_room_private_ = from.chat_room_private_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientClanState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientClanState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientClanState::CopyFrom(const CMsgClientClanState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientClanState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientClanState::IsInitialized() const {
  return true;
}

void CMsgClientClanState::Swap(CMsgClientClanState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientClanState::InternalSwap(CMsgClientClanState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&events_)->InternalSwap(CastToBase(&other->events_));
  CastToBase(&announcements_)->InternalSwap(CastToBase(&other->announcements_));
  swap(name_info_, other->name_info_);
  swap(user_counts_, other->user_counts_);
  swap(steamid_clan_, other->steamid_clan_);
  swap(clan_account_flags_, other->clan_account_flags_);
  swap(chat_room_private_, other->chat_room_private_);
}

::google::protobuf::Metadata CMsgClientClanState::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientUnsignedInstallScript::InitAsDefaultInstance() {
}
class CMsgClientUnsignedInstallScript::HasBitSetters {
 public:
  static void set_has_app_id(CMsgClientUnsignedInstallScript* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_file_name(CMsgClientUnsignedInstallScript* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_file_size(CMsgClientUnsignedInstallScript* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_signature_broken(CMsgClientUnsignedInstallScript* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_depot_id(CMsgClientUnsignedInstallScript* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_manifest_id(CMsgClientUnsignedInstallScript* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_file_flags(CMsgClientUnsignedInstallScript* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientUnsignedInstallScript::kAppIdFieldNumber;
const int CMsgClientUnsignedInstallScript::kFileNameFieldNumber;
const int CMsgClientUnsignedInstallScript::kFileSizeFieldNumber;
const int CMsgClientUnsignedInstallScript::kSignatureBrokenFieldNumber;
const int CMsgClientUnsignedInstallScript::kDepotIdFieldNumber;
const int CMsgClientUnsignedInstallScript::kManifestIdFieldNumber;
const int CMsgClientUnsignedInstallScript::kFileFlagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientUnsignedInstallScript::CMsgClientUnsignedInstallScript()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientUnsignedInstallScript)
}
CMsgClientUnsignedInstallScript::CMsgClientUnsignedInstallScript(const CMsgClientUnsignedInstallScript& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_name()) {
    file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&file_flags_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(file_flags_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientUnsignedInstallScript)
}

void CMsgClientUnsignedInstallScript::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientUnsignedInstallScript_steammessages_5fclientserver_2eproto.base);
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&file_flags_) -
      reinterpret_cast<char*>(&app_id_)) + sizeof(file_flags_));
}

CMsgClientUnsignedInstallScript::~CMsgClientUnsignedInstallScript() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientUnsignedInstallScript)
  SharedDtor();
}

void CMsgClientUnsignedInstallScript::SharedDtor() {
  file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientUnsignedInstallScript::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientUnsignedInstallScript& CMsgClientUnsignedInstallScript::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientUnsignedInstallScript_steammessages_5fclientserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientUnsignedInstallScript::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientUnsignedInstallScript)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    file_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&file_flags_) -
        reinterpret_cast<char*>(&app_id_)) + sizeof(file_flags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientUnsignedInstallScript::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientUnsignedInstallScript*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string file_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientUnsignedInstallScript.file_name");
        object = msg->mutable_file_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 file_size = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_file_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool signature_broken = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_signature_broken(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 depot_id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_depot_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 manifest_id = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_manifest_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 file_flags = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_file_flags(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientUnsignedInstallScript::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientUnsignedInstallScript)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string file_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_name().data(), static_cast<int>(this->file_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientUnsignedInstallScript.file_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 file_size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_file_size(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool signature_broken = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_signature_broken(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &signature_broken_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 depot_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_depot_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &depot_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 manifest_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_manifest_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &manifest_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 file_flags = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_file_flags(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientUnsignedInstallScript)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientUnsignedInstallScript)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientUnsignedInstallScript::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientUnsignedInstallScript)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional string file_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), static_cast<int>(this->file_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUnsignedInstallScript.file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->file_name(), output);
  }

  // optional uint32 file_size = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->file_size(), output);
  }

  // optional bool signature_broken = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->signature_broken(), output);
  }

  // optional uint32 depot_id = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->depot_id(), output);
  }

  // optional uint64 manifest_id = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->manifest_id(), output);
  }

  // optional uint32 file_flags = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->file_flags(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientUnsignedInstallScript)
}

::google::protobuf::uint8* CMsgClientUnsignedInstallScript::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientUnsignedInstallScript)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional string file_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), static_cast<int>(this->file_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUnsignedInstallScript.file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->file_name(), target);
  }

  // optional uint32 file_size = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->file_size(), target);
  }

  // optional bool signature_broken = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->signature_broken(), target);
  }

  // optional uint32 depot_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->depot_id(), target);
  }

  // optional uint64 manifest_id = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->manifest_id(), target);
  }

  // optional uint32 file_flags = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->file_flags(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientUnsignedInstallScript)
  return target;
}

size_t CMsgClientUnsignedInstallScript::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientUnsignedInstallScript)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string file_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional uint32 file_size = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->file_size());
    }

    // optional bool signature_broken = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional uint32 depot_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->depot_id());
    }

    // optional uint64 manifest_id = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->manifest_id());
    }

    // optional uint32 file_flags = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->file_flags());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientUnsignedInstallScript::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientUnsignedInstallScript)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUnsignedInstallScript* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientUnsignedInstallScript>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientUnsignedInstallScript)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientUnsignedInstallScript)
    MergeFrom(*source);
  }
}

void CMsgClientUnsignedInstallScript::MergeFrom(const CMsgClientUnsignedInstallScript& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientUnsignedInstallScript)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      file_size_ = from.file_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      signature_broken_ = from.signature_broken_;
    }
    if (cached_has_bits & 0x00000010u) {
      depot_id_ = from.depot_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      manifest_id_ = from.manifest_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      file_flags_ = from.file_flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientUnsignedInstallScript::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientUnsignedInstallScript)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUnsignedInstallScript::CopyFrom(const CMsgClientUnsignedInstallScript& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientUnsignedInstallScript)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUnsignedInstallScript::IsInitialized() const {
  return true;
}

void CMsgClientUnsignedInstallScript::Swap(CMsgClientUnsignedInstallScript* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientUnsignedInstallScript::InternalSwap(CMsgClientUnsignedInstallScript* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  file_name_.Swap(&other->file_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(app_id_, other->app_id_);
  swap(file_size_, other->file_size_);
  swap(signature_broken_, other->signature_broken_);
  swap(depot_id_, other->depot_id_);
  swap(manifest_id_, other->manifest_id_);
  swap(file_flags_, other->file_flags_);
}

::google::protobuf::Metadata CMsgClientUnsignedInstallScript::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace steam
}  // namespace proto
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientUDSP2PSessionStarted* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientUDSP2PSessionStarted >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientUDSP2PSessionStarted >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientUDSP2PSessionEnded* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientUDSP2PSessionEnded >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientUDSP2PSessionEnded >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientRegisterAuthTicketWithCM* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientRegisterAuthTicketWithCM >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientRegisterAuthTicketWithCM >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientTicketAuthComplete* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientTicketAuthComplete >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientTicketAuthComplete >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientCMList* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientCMList >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientCMList >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientP2PConnectionInfo* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientP2PConnectionInfo >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientP2PConnectionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientP2PConnectionFailInfo* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientP2PConnectionFailInfo >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientP2PConnectionFailInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientNetworkingCertRequest* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientNetworkingCertRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientNetworkingCertRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientNetworkingCertReply* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientNetworkingCertReply >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientNetworkingCertReply >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientGetAppOwnershipTicket* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientGetAppOwnershipTicket >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientGetAppOwnershipTicket >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientGetAppOwnershipTicketResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientGetAppOwnershipTicketResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientGetAppOwnershipTicketResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientSessionToken* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientSessionToken >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientSessionToken >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientGameConnectTokens* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientGameConnectTokens >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientGameConnectTokens >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgGSServerType* Arena::CreateMaybeMessage< ::proto::steam::CMsgGSServerType >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgGSServerType >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgGSStatusReply* Arena::CreateMaybeMessage< ::proto::steam::CMsgGSStatusReply >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgGSStatusReply >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgGSPlayerList_Player* Arena::CreateMaybeMessage< ::proto::steam::CMsgGSPlayerList_Player >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgGSPlayerList_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgGSPlayerList* Arena::CreateMaybeMessage< ::proto::steam::CMsgGSPlayerList >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgGSPlayerList >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgGSUserPlaying* Arena::CreateMaybeMessage< ::proto::steam::CMsgGSUserPlaying >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgGSUserPlaying >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgGSDisconnectNotice* Arena::CreateMaybeMessage< ::proto::steam::CMsgGSDisconnectNotice >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgGSDisconnectNotice >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientGamesPlayed_GamePlayed* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientGamesPlayed_GamePlayed >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientGamesPlayed_GamePlayed >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientGamesPlayed* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientGamesPlayed >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientGamesPlayed >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgGSApprove* Arena::CreateMaybeMessage< ::proto::steam::CMsgGSApprove >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgGSApprove >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgGSDeny* Arena::CreateMaybeMessage< ::proto::steam::CMsgGSDeny >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgGSDeny >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgGSKick* Arena::CreateMaybeMessage< ::proto::steam::CMsgGSKick >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgGSKick >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientAuthList* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientAuthList >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientAuthList >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientAuthListAck* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientAuthListAck >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientAuthListAck >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientLicenseList_License* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientLicenseList_License >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientLicenseList_License >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientLicenseList* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientLicenseList >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientLicenseList >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientLBSSetScore* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientLBSSetScore >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientLBSSetScore >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientLBSSetScoreResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientLBSSetScoreResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientLBSSetScoreResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientLBSSetUGC* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientLBSSetUGC >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientLBSSetUGC >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientLBSSetUGCResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientLBSSetUGCResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientLBSSetUGCResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientLBSFindOrCreateLB* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientLBSFindOrCreateLB >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientLBSFindOrCreateLB >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientLBSFindOrCreateLBResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientLBSFindOrCreateLBResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientLBSFindOrCreateLBResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientLBSGetLBEntries* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientLBSGetLBEntries >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientLBSGetLBEntries >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientLBSGetLBEntriesResponse_Entry* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientLBSGetLBEntriesResponse_Entry >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientLBSGetLBEntriesResponse_Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientLBSGetLBEntriesResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientLBSGetLBEntriesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientLBSGetLBEntriesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientAppMinutesPlayedData_AppMinutesPlayedData* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientAppMinutesPlayedData_AppMinutesPlayedData >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientAppMinutesPlayedData_AppMinutesPlayedData >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientAppMinutesPlayedData* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientAppMinutesPlayedData >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientAppMinutesPlayedData >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientIsLimitedAccount* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientIsLimitedAccount >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientIsLimitedAccount >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientServerList_Server* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientServerList_Server >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientServerList_Server >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientServerList* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientServerList >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientServerList >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientRequestedClientStats_StatsToSend* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientRequestedClientStats_StatsToSend >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientRequestedClientStats_StatsToSend >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientRequestedClientStats* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientRequestedClientStats >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientRequestedClientStats >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientStat2_StatDetail* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientStat2_StatDetail >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientStat2_StatDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientStat2* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientStat2 >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientStat2 >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientMMSCreateLobby* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientMMSCreateLobby >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientMMSCreateLobby >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientMMSCreateLobbyResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientMMSCreateLobbyResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientMMSCreateLobbyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientMMSJoinLobby* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientMMSJoinLobby >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientMMSJoinLobby >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientMMSJoinLobbyResponse_Member* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientMMSJoinLobbyResponse_Member >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientMMSJoinLobbyResponse_Member >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientMMSJoinLobbyResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientMMSJoinLobbyResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientMMSJoinLobbyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientMMSLeaveLobby* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientMMSLeaveLobby >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientMMSLeaveLobby >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientMMSLeaveLobbyResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientMMSLeaveLobbyResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientMMSLeaveLobbyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientMMSGetLobbyList_Filter* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientMMSGetLobbyList_Filter >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientMMSGetLobbyList_Filter >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientMMSGetLobbyList* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientMMSGetLobbyList >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientMMSGetLobbyList >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientMMSGetLobbyListResponse_Lobby* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientMMSGetLobbyListResponse_Lobby >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientMMSGetLobbyListResponse_Lobby >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientMMSGetLobbyListResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientMMSGetLobbyListResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientMMSGetLobbyListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientMMSSetLobbyData* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientMMSSetLobbyData >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientMMSSetLobbyData >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientMMSSetLobbyDataResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientMMSSetLobbyDataResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientMMSSetLobbyDataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientMMSGetLobbyData* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientMMSGetLobbyData >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientMMSGetLobbyData >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientMMSLobbyData_Member* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientMMSLobbyData_Member >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientMMSLobbyData_Member >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientMMSLobbyData* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientMMSLobbyData >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientMMSLobbyData >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientMMSSendLobbyChatMsg* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientMMSSendLobbyChatMsg >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientMMSSendLobbyChatMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientMMSLobbyChatMsg* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientMMSLobbyChatMsg >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientMMSLobbyChatMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientMMSSetLobbyOwner* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientMMSSetLobbyOwner >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientMMSSetLobbyOwner >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientMMSSetLobbyOwnerResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientMMSSetLobbyOwnerResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientMMSSetLobbyOwnerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientMMSSetLobbyLinked* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientMMSSetLobbyLinked >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientMMSSetLobbyLinked >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientMMSSetLobbyGameServer* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientMMSSetLobbyGameServer >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientMMSSetLobbyGameServer >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientMMSLobbyGameServerSet* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientMMSLobbyGameServerSet >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientMMSLobbyGameServerSet >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientMMSUserJoinedLobby* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientMMSUserJoinedLobby >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientMMSUserJoinedLobby >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientMMSUserLeftLobby* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientMMSUserLeftLobby >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientMMSUserLeftLobby >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientMMSInviteToLobby* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientMMSInviteToLobby >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientMMSInviteToLobby >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientInviteToGame* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientInviteToGame >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientInviteToGame >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientChatInvite* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientChatInvite >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientChatInvite >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientConnectionStats_Stats_Logon* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientConnectionStats_Stats_Logon >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientConnectionStats_Stats_Logon >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientConnectionStats_Stats_UDP* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientConnectionStats_Stats_UDP >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientConnectionStats_Stats_UDP >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientConnectionStats_Stats_VConn* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientConnectionStats_Stats_VConn >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientConnectionStats_Stats_VConn >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientConnectionStats* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientConnectionStats >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientConnectionStats >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientServersAvailable_Server_Types_Available* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientServersAvailable_Server_Types_Available >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientServersAvailable_Server_Types_Available >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientServersAvailable* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientServersAvailable >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientServersAvailable >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientGetUserStats* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientGetUserStats >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientGetUserStats >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientGetUserStatsResponse_Stats* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientGetUserStatsResponse_Stats >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientGetUserStatsResponse_Stats >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientGetUserStatsResponse_Achievement_Blocks* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientGetUserStatsResponse_Achievement_Blocks >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientGetUserStatsResponse_Achievement_Blocks >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientGetUserStatsResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientGetUserStatsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientGetUserStatsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientStoreUserStatsResponse_Stats_Failed_Validation* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientStoreUserStatsResponse_Stats_Failed_Validation >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientStoreUserStatsResponse_Stats_Failed_Validation >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientStoreUserStatsResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientStoreUserStatsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientStoreUserStatsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientStoreUserStats2_Stats* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientStoreUserStats2_Stats >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientStoreUserStats2_Stats >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientStoreUserStats2* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientStoreUserStats2 >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientStoreUserStats2 >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientStatsUpdated_Updated_Stats* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientStatsUpdated_Updated_Stats >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientStatsUpdated_Updated_Stats >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientStatsUpdated* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientStatsUpdated >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientStatsUpdated >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientStoreUserStats_Stats_To_Store* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientStoreUserStats_Stats_To_Store >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientStoreUserStats_Stats_To_Store >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientStoreUserStats* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientStoreUserStats >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientStoreUserStats >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientGetClientDetails* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientGetClientDetails >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientGetClientDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientReportOverlayDetourFailure* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientReportOverlayDetourFailure >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientReportOverlayDetourFailure >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientGetClientDetailsResponse_Game* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientGetClientDetailsResponse_Game >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientGetClientDetailsResponse_Game >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientGetClientDetailsResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientGetClientDetailsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientGetClientDetailsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientGetClientAppList* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientGetClientAppList >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientGetClientAppList >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientGetClientAppListResponse_App_DLC* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientGetClientAppListResponse_App_DLC >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientGetClientAppListResponse_App_DLC >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientGetClientAppListResponse_App* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientGetClientAppListResponse_App >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientGetClientAppListResponse_App >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientGetClientAppListResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientGetClientAppListResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientGetClientAppListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientInstallClientApp* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientInstallClientApp >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientInstallClientApp >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientInstallClientAppResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientInstallClientAppResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientInstallClientAppResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientUninstallClientApp* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientUninstallClientApp >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientUninstallClientApp >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientUninstallClientAppResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientUninstallClientAppResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientUninstallClientAppResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientSetClientAppUpdateState* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientSetClientAppUpdateState >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientSetClientAppUpdateState >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientSetClientAppUpdateStateResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientSetClientAppUpdateStateResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientSetClientAppUpdateStateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientUFSUploadFileRequest* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientUFSUploadFileRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientUFSUploadFileRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientUFSUploadFileResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientUFSUploadFileResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientUFSUploadFileResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientUFSUploadCommit_File* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientUFSUploadCommit_File >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientUFSUploadCommit_File >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientUFSUploadCommit* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientUFSUploadCommit >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientUFSUploadCommit >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientUFSUploadCommitResponse_File* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientUFSUploadCommitResponse_File >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientUFSUploadCommitResponse_File >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientUFSUploadCommitResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientUFSUploadCommitResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientUFSUploadCommitResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientUFSFileChunk* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientUFSFileChunk >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientUFSFileChunk >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientUFSTransferHeartbeat* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientUFSTransferHeartbeat >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientUFSTransferHeartbeat >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientUFSUploadFileFinished* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientUFSUploadFileFinished >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientUFSUploadFileFinished >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientUFSDeleteFileRequest* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientUFSDeleteFileRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientUFSDeleteFileRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientUFSDeleteFileResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientUFSDeleteFileResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientUFSDeleteFileResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientUFSGetFileListForApp* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientUFSGetFileListForApp >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientUFSGetFileListForApp >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientUFSGetFileListForAppResponse_File* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientUFSGetFileListForAppResponse_File >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientUFSGetFileListForAppResponse_File >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientUFSGetFileListForAppResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientUFSGetFileListForAppResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientUFSGetFileListForAppResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientUFSDownloadRequest* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientUFSDownloadRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientUFSDownloadRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientUFSDownloadResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientUFSDownloadResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientUFSDownloadResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientUFSLoginRequest* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientUFSLoginRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientUFSLoginRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientUFSLoginResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientUFSLoginResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientUFSLoginResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientRequestEncryptedAppTicket* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientRequestEncryptedAppTicket >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientRequestEncryptedAppTicket >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientRequestEncryptedAppTicketResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientRequestEncryptedAppTicketResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientRequestEncryptedAppTicketResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientWalletInfoUpdate* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientWalletInfoUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientWalletInfoUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientAppInfoUpdate* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientAppInfoUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientAppInfoUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientAppInfoChanges* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientAppInfoChanges >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientAppInfoChanges >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientAppInfoRequest_App* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientAppInfoRequest_App >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientAppInfoRequest_App >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientAppInfoRequest* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientAppInfoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientAppInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientAppInfoResponse_App_Section* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientAppInfoResponse_App_Section >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientAppInfoResponse_App_Section >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientAppInfoResponse_App* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientAppInfoResponse_App >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientAppInfoResponse_App >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientAppInfoResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientAppInfoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientAppInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientPackageInfoRequest* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientPackageInfoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientPackageInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientPackageInfoResponse_Package* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientPackageInfoResponse_Package >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientPackageInfoResponse_Package >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientPackageInfoResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientPackageInfoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientPackageInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientPICSChangesSinceRequest* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientPICSChangesSinceRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientPICSChangesSinceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientPICSChangesSinceResponse_PackageChange* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientPICSChangesSinceResponse_PackageChange >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientPICSChangesSinceResponse_PackageChange >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientPICSChangesSinceResponse_AppChange* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientPICSChangesSinceResponse_AppChange >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientPICSChangesSinceResponse_AppChange >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientPICSChangesSinceResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientPICSChangesSinceResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientPICSChangesSinceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientPICSProductInfoRequest_AppInfo* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientPICSProductInfoRequest_AppInfo >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientPICSProductInfoRequest_AppInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientPICSProductInfoRequest_PackageInfo* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientPICSProductInfoRequest_PackageInfo >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientPICSProductInfoRequest_PackageInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientPICSProductInfoRequest* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientPICSProductInfoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientPICSProductInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientPICSProductInfoResponse_AppInfo* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientPICSProductInfoResponse_AppInfo >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientPICSProductInfoResponse_AppInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientPICSProductInfoResponse_PackageInfo* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientPICSProductInfoResponse_PackageInfo >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientPICSProductInfoResponse_PackageInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientPICSProductInfoResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientPICSProductInfoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientPICSProductInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientPICSAccessTokenRequest* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientPICSAccessTokenRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientPICSAccessTokenRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientPICSAccessTokenResponse_PackageToken* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientPICSAccessTokenResponse_PackageToken >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientPICSAccessTokenResponse_PackageToken >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientPICSAccessTokenResponse_AppToken* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientPICSAccessTokenResponse_AppToken >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientPICSAccessTokenResponse_AppToken >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientPICSAccessTokenResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientPICSAccessTokenResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientPICSAccessTokenResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientUFSGetUGCDetails* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientUFSGetUGCDetails >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientUFSGetUGCDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientUFSGetUGCDetailsResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientUFSGetUGCDetailsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientUFSGetUGCDetailsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientUFSGetSingleFileInfo* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientUFSGetSingleFileInfo >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientUFSGetSingleFileInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientUFSGetSingleFileInfoResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientUFSGetSingleFileInfoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientUFSGetSingleFileInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientUFSShareFile* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientUFSShareFile >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientUFSShareFile >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientUFSShareFileResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientUFSShareFileResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientUFSShareFileResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientAMGetClanOfficers* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientAMGetClanOfficers >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientAMGetClanOfficers >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientAMGetClanOfficersResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientAMGetClanOfficersResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientAMGetClanOfficersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientAMGetPersonaNameHistory_IdInstance* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientAMGetPersonaNameHistory_IdInstance >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientAMGetPersonaNameHistory_IdInstance >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientAMGetPersonaNameHistory* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientAMGetPersonaNameHistory >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientAMGetPersonaNameHistory >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientAMGetPersonaNameHistoryResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientAMGetPersonaNameHistoryResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientAMGetPersonaNameHistoryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientDeregisterWithServer* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientDeregisterWithServer >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientDeregisterWithServer >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientClanState_NameInfo* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientClanState_NameInfo >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientClanState_NameInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientClanState_UserCounts* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientClanState_UserCounts >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientClanState_UserCounts >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientClanState_Event* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientClanState_Event >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientClanState_Event >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientClanState* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientClanState >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientClanState >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientUnsignedInstallScript* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientUnsignedInstallScript >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientUnsignedInstallScript >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
