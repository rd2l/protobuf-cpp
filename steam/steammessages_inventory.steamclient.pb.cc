// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_inventory.steamclient.proto

#include "steammessages_inventory.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_steammessages_5finventory_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CInventory_ModifyItems_Request_ItemPropertyUpdate_steammessages_5finventory_2esteamclient_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5finventory_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CInventory_PurchaseInit_Request_LineItem_steammessages_5finventory_2esteamclient_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5finventory_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CInventory_Response_steammessages_5finventory_2esteamclient_2eproto;
namespace proto {
namespace steam {
class CInventory_GetInventory_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CInventory_GetInventory_Request> _instance;
} _CInventory_GetInventory_Request_default_instance_;
class CInventory_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CInventory_Response> _instance;
} _CInventory_Response_default_instance_;
class CInventory_ExchangeItem_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CInventory_ExchangeItem_Request> _instance;
} _CInventory_ExchangeItem_Request_default_instance_;
class CInventory_GetEligiblePromoItemDefIDs_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CInventory_GetEligiblePromoItemDefIDs_Request> _instance;
} _CInventory_GetEligiblePromoItemDefIDs_Request_default_instance_;
class CInventory_GetEligiblePromoItemDefIDs_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CInventory_GetEligiblePromoItemDefIDs_Response> _instance;
} _CInventory_GetEligiblePromoItemDefIDs_Response_default_instance_;
class CInventory_AddItem_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CInventory_AddItem_Request> _instance;
} _CInventory_AddItem_Request_default_instance_;
class CInventory_ModifyItems_Request_ItemPropertyUpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CInventory_ModifyItems_Request_ItemPropertyUpdate> _instance;
} _CInventory_ModifyItems_Request_ItemPropertyUpdate_default_instance_;
class CInventory_ModifyItems_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CInventory_ModifyItems_Request> _instance;
} _CInventory_ModifyItems_Request_default_instance_;
class CInventory_ConsumePlaytime_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CInventory_ConsumePlaytime_Request> _instance;
} _CInventory_ConsumePlaytime_Request_default_instance_;
class CInventory_ConsumeItem_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CInventory_ConsumeItem_Request> _instance;
} _CInventory_ConsumeItem_Request_default_instance_;
class CInventory_DevSetNextDrop_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CInventory_DevSetNextDrop_Request> _instance;
} _CInventory_DevSetNextDrop_Request_default_instance_;
class CInventory_SplitItemStack_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CInventory_SplitItemStack_Request> _instance;
} _CInventory_SplitItemStack_Request_default_instance_;
class CInventory_CombineItemStacks_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CInventory_CombineItemStacks_Request> _instance;
} _CInventory_CombineItemStacks_Request_default_instance_;
class CInventory_GetItemDefMeta_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CInventory_GetItemDefMeta_Request> _instance;
} _CInventory_GetItemDefMeta_Request_default_instance_;
class CInventory_GetItemDefMeta_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CInventory_GetItemDefMeta_Response> _instance;
} _CInventory_GetItemDefMeta_Response_default_instance_;
class CInventory_GetUserPurchaseInfo_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CInventory_GetUserPurchaseInfo_Request> _instance;
} _CInventory_GetUserPurchaseInfo_Request_default_instance_;
class CInventory_GetUserPurchaseInfo_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CInventory_GetUserPurchaseInfo_Response> _instance;
} _CInventory_GetUserPurchaseInfo_Response_default_instance_;
class CInventory_PurchaseInit_Request_LineItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CInventory_PurchaseInit_Request_LineItem> _instance;
} _CInventory_PurchaseInit_Request_LineItem_default_instance_;
class CInventory_PurchaseInit_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CInventory_PurchaseInit_Request> _instance;
} _CInventory_PurchaseInit_Request_default_instance_;
class CInventory_PurchaseInit_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CInventory_PurchaseInit_Response> _instance;
} _CInventory_PurchaseInit_Response_default_instance_;
class CInventory_PurchaseFinalize_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CInventory_PurchaseFinalize_Request> _instance;
} _CInventory_PurchaseFinalize_Request_default_instance_;
class CInventoryClient_NewItems_NotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CInventoryClient_NewItems_Notification> _instance;
} _CInventoryClient_NewItems_Notification_default_instance_;
}  // namespace steam
}  // namespace proto
static void InitDefaultsCInventory_GetInventory_Request_steammessages_5finventory_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CInventory_GetInventory_Request_default_instance_;
    new (ptr) ::proto::steam::CInventory_GetInventory_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CInventory_GetInventory_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CInventory_GetInventory_Request_steammessages_5finventory_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCInventory_GetInventory_Request_steammessages_5finventory_2esteamclient_2eproto}, {}};

static void InitDefaultsCInventory_Response_steammessages_5finventory_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CInventory_Response_default_instance_;
    new (ptr) ::proto::steam::CInventory_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CInventory_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CInventory_Response_steammessages_5finventory_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCInventory_Response_steammessages_5finventory_2esteamclient_2eproto}, {}};

static void InitDefaultsCInventory_ExchangeItem_Request_steammessages_5finventory_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CInventory_ExchangeItem_Request_default_instance_;
    new (ptr) ::proto::steam::CInventory_ExchangeItem_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CInventory_ExchangeItem_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CInventory_ExchangeItem_Request_steammessages_5finventory_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCInventory_ExchangeItem_Request_steammessages_5finventory_2esteamclient_2eproto}, {}};

static void InitDefaultsCInventory_GetEligiblePromoItemDefIDs_Request_steammessages_5finventory_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CInventory_GetEligiblePromoItemDefIDs_Request_default_instance_;
    new (ptr) ::proto::steam::CInventory_GetEligiblePromoItemDefIDs_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CInventory_GetEligiblePromoItemDefIDs_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CInventory_GetEligiblePromoItemDefIDs_Request_steammessages_5finventory_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCInventory_GetEligiblePromoItemDefIDs_Request_steammessages_5finventory_2esteamclient_2eproto}, {}};

static void InitDefaultsCInventory_GetEligiblePromoItemDefIDs_Response_steammessages_5finventory_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CInventory_GetEligiblePromoItemDefIDs_Response_default_instance_;
    new (ptr) ::proto::steam::CInventory_GetEligiblePromoItemDefIDs_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CInventory_GetEligiblePromoItemDefIDs_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CInventory_GetEligiblePromoItemDefIDs_Response_steammessages_5finventory_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCInventory_GetEligiblePromoItemDefIDs_Response_steammessages_5finventory_2esteamclient_2eproto}, {}};

static void InitDefaultsCInventory_AddItem_Request_steammessages_5finventory_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CInventory_AddItem_Request_default_instance_;
    new (ptr) ::proto::steam::CInventory_AddItem_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CInventory_AddItem_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CInventory_AddItem_Request_steammessages_5finventory_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCInventory_AddItem_Request_steammessages_5finventory_2esteamclient_2eproto}, {}};

static void InitDefaultsCInventory_ModifyItems_Request_ItemPropertyUpdate_steammessages_5finventory_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CInventory_ModifyItems_Request_ItemPropertyUpdate_default_instance_;
    new (ptr) ::proto::steam::CInventory_ModifyItems_Request_ItemPropertyUpdate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CInventory_ModifyItems_Request_ItemPropertyUpdate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CInventory_ModifyItems_Request_ItemPropertyUpdate_steammessages_5finventory_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCInventory_ModifyItems_Request_ItemPropertyUpdate_steammessages_5finventory_2esteamclient_2eproto}, {}};

static void InitDefaultsCInventory_ModifyItems_Request_steammessages_5finventory_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CInventory_ModifyItems_Request_default_instance_;
    new (ptr) ::proto::steam::CInventory_ModifyItems_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CInventory_ModifyItems_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CInventory_ModifyItems_Request_steammessages_5finventory_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCInventory_ModifyItems_Request_steammessages_5finventory_2esteamclient_2eproto}, {
      &scc_info_CInventory_ModifyItems_Request_ItemPropertyUpdate_steammessages_5finventory_2esteamclient_2eproto.base,}};

static void InitDefaultsCInventory_ConsumePlaytime_Request_steammessages_5finventory_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CInventory_ConsumePlaytime_Request_default_instance_;
    new (ptr) ::proto::steam::CInventory_ConsumePlaytime_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CInventory_ConsumePlaytime_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CInventory_ConsumePlaytime_Request_steammessages_5finventory_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCInventory_ConsumePlaytime_Request_steammessages_5finventory_2esteamclient_2eproto}, {}};

static void InitDefaultsCInventory_ConsumeItem_Request_steammessages_5finventory_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CInventory_ConsumeItem_Request_default_instance_;
    new (ptr) ::proto::steam::CInventory_ConsumeItem_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CInventory_ConsumeItem_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CInventory_ConsumeItem_Request_steammessages_5finventory_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCInventory_ConsumeItem_Request_steammessages_5finventory_2esteamclient_2eproto}, {}};

static void InitDefaultsCInventory_DevSetNextDrop_Request_steammessages_5finventory_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CInventory_DevSetNextDrop_Request_default_instance_;
    new (ptr) ::proto::steam::CInventory_DevSetNextDrop_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CInventory_DevSetNextDrop_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CInventory_DevSetNextDrop_Request_steammessages_5finventory_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCInventory_DevSetNextDrop_Request_steammessages_5finventory_2esteamclient_2eproto}, {}};

static void InitDefaultsCInventory_SplitItemStack_Request_steammessages_5finventory_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CInventory_SplitItemStack_Request_default_instance_;
    new (ptr) ::proto::steam::CInventory_SplitItemStack_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CInventory_SplitItemStack_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CInventory_SplitItemStack_Request_steammessages_5finventory_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCInventory_SplitItemStack_Request_steammessages_5finventory_2esteamclient_2eproto}, {}};

static void InitDefaultsCInventory_CombineItemStacks_Request_steammessages_5finventory_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CInventory_CombineItemStacks_Request_default_instance_;
    new (ptr) ::proto::steam::CInventory_CombineItemStacks_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CInventory_CombineItemStacks_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CInventory_CombineItemStacks_Request_steammessages_5finventory_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCInventory_CombineItemStacks_Request_steammessages_5finventory_2esteamclient_2eproto}, {}};

static void InitDefaultsCInventory_GetItemDefMeta_Request_steammessages_5finventory_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CInventory_GetItemDefMeta_Request_default_instance_;
    new (ptr) ::proto::steam::CInventory_GetItemDefMeta_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CInventory_GetItemDefMeta_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CInventory_GetItemDefMeta_Request_steammessages_5finventory_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCInventory_GetItemDefMeta_Request_steammessages_5finventory_2esteamclient_2eproto}, {}};

static void InitDefaultsCInventory_GetItemDefMeta_Response_steammessages_5finventory_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CInventory_GetItemDefMeta_Response_default_instance_;
    new (ptr) ::proto::steam::CInventory_GetItemDefMeta_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CInventory_GetItemDefMeta_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CInventory_GetItemDefMeta_Response_steammessages_5finventory_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCInventory_GetItemDefMeta_Response_steammessages_5finventory_2esteamclient_2eproto}, {}};

static void InitDefaultsCInventory_GetUserPurchaseInfo_Request_steammessages_5finventory_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CInventory_GetUserPurchaseInfo_Request_default_instance_;
    new (ptr) ::proto::steam::CInventory_GetUserPurchaseInfo_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CInventory_GetUserPurchaseInfo_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CInventory_GetUserPurchaseInfo_Request_steammessages_5finventory_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCInventory_GetUserPurchaseInfo_Request_steammessages_5finventory_2esteamclient_2eproto}, {}};

static void InitDefaultsCInventory_GetUserPurchaseInfo_Response_steammessages_5finventory_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CInventory_GetUserPurchaseInfo_Response_default_instance_;
    new (ptr) ::proto::steam::CInventory_GetUserPurchaseInfo_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CInventory_GetUserPurchaseInfo_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CInventory_GetUserPurchaseInfo_Response_steammessages_5finventory_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCInventory_GetUserPurchaseInfo_Response_steammessages_5finventory_2esteamclient_2eproto}, {}};

static void InitDefaultsCInventory_PurchaseInit_Request_LineItem_steammessages_5finventory_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CInventory_PurchaseInit_Request_LineItem_default_instance_;
    new (ptr) ::proto::steam::CInventory_PurchaseInit_Request_LineItem();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CInventory_PurchaseInit_Request_LineItem::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CInventory_PurchaseInit_Request_LineItem_steammessages_5finventory_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCInventory_PurchaseInit_Request_LineItem_steammessages_5finventory_2esteamclient_2eproto}, {}};

static void InitDefaultsCInventory_PurchaseInit_Request_steammessages_5finventory_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CInventory_PurchaseInit_Request_default_instance_;
    new (ptr) ::proto::steam::CInventory_PurchaseInit_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CInventory_PurchaseInit_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CInventory_PurchaseInit_Request_steammessages_5finventory_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCInventory_PurchaseInit_Request_steammessages_5finventory_2esteamclient_2eproto}, {
      &scc_info_CInventory_PurchaseInit_Request_LineItem_steammessages_5finventory_2esteamclient_2eproto.base,}};

static void InitDefaultsCInventory_PurchaseInit_Response_steammessages_5finventory_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CInventory_PurchaseInit_Response_default_instance_;
    new (ptr) ::proto::steam::CInventory_PurchaseInit_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CInventory_PurchaseInit_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CInventory_PurchaseInit_Response_steammessages_5finventory_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCInventory_PurchaseInit_Response_steammessages_5finventory_2esteamclient_2eproto}, {}};

static void InitDefaultsCInventory_PurchaseFinalize_Request_steammessages_5finventory_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CInventory_PurchaseFinalize_Request_default_instance_;
    new (ptr) ::proto::steam::CInventory_PurchaseFinalize_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CInventory_PurchaseFinalize_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CInventory_PurchaseFinalize_Request_steammessages_5finventory_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCInventory_PurchaseFinalize_Request_steammessages_5finventory_2esteamclient_2eproto}, {}};

static void InitDefaultsCInventoryClient_NewItems_Notification_steammessages_5finventory_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CInventoryClient_NewItems_Notification_default_instance_;
    new (ptr) ::proto::steam::CInventoryClient_NewItems_Notification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CInventoryClient_NewItems_Notification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CInventoryClient_NewItems_Notification_steammessages_5finventory_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCInventoryClient_NewItems_Notification_steammessages_5finventory_2esteamclient_2eproto}, {
      &scc_info_CInventory_Response_steammessages_5finventory_2esteamclient_2eproto.base,}};

void InitDefaults_steammessages_5finventory_2esteamclient_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_CInventory_GetInventory_Request_steammessages_5finventory_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CInventory_Response_steammessages_5finventory_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CInventory_ExchangeItem_Request_steammessages_5finventory_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CInventory_GetEligiblePromoItemDefIDs_Request_steammessages_5finventory_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CInventory_GetEligiblePromoItemDefIDs_Response_steammessages_5finventory_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CInventory_AddItem_Request_steammessages_5finventory_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CInventory_ModifyItems_Request_ItemPropertyUpdate_steammessages_5finventory_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CInventory_ModifyItems_Request_steammessages_5finventory_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CInventory_ConsumePlaytime_Request_steammessages_5finventory_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CInventory_ConsumeItem_Request_steammessages_5finventory_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CInventory_DevSetNextDrop_Request_steammessages_5finventory_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CInventory_SplitItemStack_Request_steammessages_5finventory_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CInventory_CombineItemStacks_Request_steammessages_5finventory_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CInventory_GetItemDefMeta_Request_steammessages_5finventory_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CInventory_GetItemDefMeta_Response_steammessages_5finventory_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CInventory_GetUserPurchaseInfo_Request_steammessages_5finventory_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CInventory_GetUserPurchaseInfo_Response_steammessages_5finventory_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CInventory_PurchaseInit_Request_LineItem_steammessages_5finventory_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CInventory_PurchaseInit_Request_steammessages_5finventory_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CInventory_PurchaseInit_Response_steammessages_5finventory_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CInventory_PurchaseFinalize_Request_steammessages_5finventory_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CInventoryClient_NewItems_Notification_steammessages_5finventory_2esteamclient_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_steammessages_5finventory_2esteamclient_2eproto[22];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_steammessages_5finventory_2esteamclient_2eproto = nullptr;
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors_steammessages_5finventory_2esteamclient_2eproto[2];

const ::google::protobuf::uint32 TableStruct_steammessages_5finventory_2esteamclient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_GetInventory_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_GetInventory_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_GetInventory_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_GetInventory_Request, steamid_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_Response, etag_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_Response, removeditemids_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_Response, item_json_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_Response, itemdef_json_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_Response, ticket_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_Response, replayed_),
  0,
  ~0u,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_ExchangeItem_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_ExchangeItem_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_ExchangeItem_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_ExchangeItem_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_ExchangeItem_Request, materialsitemid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_ExchangeItem_Request, materialsquantity_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_ExchangeItem_Request, outputitemdefid_),
  2,
  0,
  ~0u,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_GetEligiblePromoItemDefIDs_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_GetEligiblePromoItemDefIDs_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_GetEligiblePromoItemDefIDs_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_GetEligiblePromoItemDefIDs_Request, steamid_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_GetEligiblePromoItemDefIDs_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_GetEligiblePromoItemDefIDs_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_GetEligiblePromoItemDefIDs_Response, itemdefids_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_AddItem_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_AddItem_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_AddItem_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_AddItem_Request, itemdefid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_AddItem_Request, itempropsjson_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_AddItem_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_AddItem_Request, notify_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_AddItem_Request, requestid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_AddItem_Request, trade_restriction_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_AddItem_Request, is_purchase_),
  1,
  ~0u,
  ~0u,
  0,
  2,
  5,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_ModifyItems_Request_ItemPropertyUpdate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_ModifyItems_Request_ItemPropertyUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_ModifyItems_Request_ItemPropertyUpdate, itemid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_ModifyItems_Request_ItemPropertyUpdate, remove_property_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_ModifyItems_Request_ItemPropertyUpdate, property_name_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_ModifyItems_Request_ItemPropertyUpdate, property_value_bool_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_ModifyItems_Request_ItemPropertyUpdate, property_value_int_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_ModifyItems_Request_ItemPropertyUpdate, property_value_string_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_ModifyItems_Request_ItemPropertyUpdate, property_value_float_),
  2,
  3,
  0,
  4,
  6,
  1,
  5,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_ModifyItems_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_ModifyItems_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_ModifyItems_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_ModifyItems_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_ModifyItems_Request, updates_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_ModifyItems_Request, timestamp_),
  1,
  0,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_ConsumePlaytime_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_ConsumePlaytime_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_ConsumePlaytime_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_ConsumePlaytime_Request, itemdefid_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_ConsumeItem_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_ConsumeItem_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_ConsumeItem_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_ConsumeItem_Request, itemid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_ConsumeItem_Request, quantity_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_ConsumeItem_Request, timestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_ConsumeItem_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_ConsumeItem_Request, requestid_),
  2,
  1,
  3,
  0,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_DevSetNextDrop_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_DevSetNextDrop_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_DevSetNextDrop_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_DevSetNextDrop_Request, itemdefid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_DevSetNextDrop_Request, droptime_),
  2,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_SplitItemStack_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_SplitItemStack_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_SplitItemStack_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_SplitItemStack_Request, itemid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_SplitItemStack_Request, quantity_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_CombineItemStacks_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_CombineItemStacks_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_CombineItemStacks_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_CombineItemStacks_Request, fromitemid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_CombineItemStacks_Request, destitemid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_CombineItemStacks_Request, quantity_),
  1,
  0,
  3,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_GetItemDefMeta_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_GetItemDefMeta_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_GetItemDefMeta_Request, appid_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_GetItemDefMeta_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_GetItemDefMeta_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_GetItemDefMeta_Response, modified_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_GetItemDefMeta_Response, digest_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_GetUserPurchaseInfo_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_GetUserPurchaseInfo_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_GetUserPurchaseInfo_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_GetUserPurchaseInfo_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_GetUserPurchaseInfo_Response, ecurrency_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_PurchaseInit_Request_LineItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_PurchaseInit_Request_LineItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_PurchaseInit_Request_LineItem, itemdefid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_PurchaseInit_Request_LineItem, quantity_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_PurchaseInit_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_PurchaseInit_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_PurchaseInit_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_PurchaseInit_Request, language_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_PurchaseInit_Request, line_items_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_PurchaseInit_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_PurchaseInit_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_PurchaseInit_Response, orderid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_PurchaseInit_Response, transid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_PurchaseFinalize_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_PurchaseFinalize_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_PurchaseFinalize_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_PurchaseFinalize_Request, language_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventory_PurchaseFinalize_Request, orderid_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventoryClient_NewItems_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventoryClient_NewItems_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventoryClient_NewItems_Notification, appid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CInventoryClient_NewItems_Notification, inventory_response_),
  1,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::proto::steam::CInventory_GetInventory_Request)},
  { 9, 20, sizeof(::proto::steam::CInventory_Response)},
  { 26, 36, sizeof(::proto::steam::CInventory_ExchangeItem_Request)},
  { 41, 48, sizeof(::proto::steam::CInventory_GetEligiblePromoItemDefIDs_Request)},
  { 50, 56, sizeof(::proto::steam::CInventory_GetEligiblePromoItemDefIDs_Response)},
  { 57, 70, sizeof(::proto::steam::CInventory_AddItem_Request)},
  { 78, 90, sizeof(::proto::steam::CInventory_ModifyItems_Request_ItemPropertyUpdate)},
  { 97, 106, sizeof(::proto::steam::CInventory_ModifyItems_Request)},
  { 110, 117, sizeof(::proto::steam::CInventory_ConsumePlaytime_Request)},
  { 119, 130, sizeof(::proto::steam::CInventory_ConsumeItem_Request)},
  { 136, 144, sizeof(::proto::steam::CInventory_DevSetNextDrop_Request)},
  { 147, 155, sizeof(::proto::steam::CInventory_SplitItemStack_Request)},
  { 158, 167, sizeof(::proto::steam::CInventory_CombineItemStacks_Request)},
  { 171, 177, sizeof(::proto::steam::CInventory_GetItemDefMeta_Request)},
  { 178, 185, sizeof(::proto::steam::CInventory_GetItemDefMeta_Response)},
  { 187, 192, sizeof(::proto::steam::CInventory_GetUserPurchaseInfo_Request)},
  { 192, 198, sizeof(::proto::steam::CInventory_GetUserPurchaseInfo_Response)},
  { 199, 206, sizeof(::proto::steam::CInventory_PurchaseInit_Request_LineItem)},
  { 208, 216, sizeof(::proto::steam::CInventory_PurchaseInit_Request)},
  { 219, 226, sizeof(::proto::steam::CInventory_PurchaseInit_Response)},
  { 228, 236, sizeof(::proto::steam::CInventory_PurchaseFinalize_Request)},
  { 239, 246, sizeof(::proto::steam::CInventoryClient_NewItems_Notification)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CInventory_GetInventory_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CInventory_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CInventory_ExchangeItem_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CInventory_GetEligiblePromoItemDefIDs_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CInventory_GetEligiblePromoItemDefIDs_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CInventory_AddItem_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CInventory_ModifyItems_Request_ItemPropertyUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CInventory_ModifyItems_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CInventory_ConsumePlaytime_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CInventory_ConsumeItem_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CInventory_DevSetNextDrop_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CInventory_SplitItemStack_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CInventory_CombineItemStacks_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CInventory_GetItemDefMeta_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CInventory_GetItemDefMeta_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CInventory_GetUserPurchaseInfo_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CInventory_GetUserPurchaseInfo_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CInventory_PurchaseInit_Request_LineItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CInventory_PurchaseInit_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CInventory_PurchaseInit_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CInventory_PurchaseFinalize_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CInventoryClient_NewItems_Notification_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_steammessages_5finventory_2esteamclient_2eproto = {
  {}, AddDescriptors_steammessages_5finventory_2esteamclient_2eproto, "steammessages_inventory.steamclient.proto", schemas,
  file_default_instances, TableStruct_steammessages_5finventory_2esteamclient_2eproto::offsets,
  file_level_metadata_steammessages_5finventory_2esteamclient_2eproto, 22, file_level_enum_descriptors_steammessages_5finventory_2esteamclient_2eproto, file_level_service_descriptors_steammessages_5finventory_2esteamclient_2eproto,
};

const char descriptor_table_protodef_steammessages_5finventory_2esteamclient_2eproto[] =
  "\n)steammessages_inventory.steamclient.pr"
  "oto\022\013proto.steam\032,steammessages_unified_"
  "base.steamclient.proto\"A\n\037CInventory_Get"
  "Inventory_Request\022\r\n\005appid\030\001 \001(\r\022\017\n\007stea"
  "mid\030\002 \001(\004\"\277\001\n\023CInventory_Response\022\014\n\004eta"
  "g\030\001 \001(\t\022\026\n\016removeditemids\030\002 \003(\004\022\021\n\titem_"
  "json\030\003 \001(\t\022\024\n\014itemdef_json\030\004 \001(\t\022\016\n\006tick"
  "et\030\005 \001(\014\022I\n\010replayed\030\006 \001(\010B7\202\265\0303If true,"
  " the requestid given was processed earli"
  "er.\"\216\001\n\037CInventory_ExchangeItem_Request\022"
  "\r\n\005appid\030\001 \001(\r\022\017\n\007steamid\030\002 \001(\004\022\027\n\017mater"
  "ialsitemid\030\003 \003(\004\022\031\n\021materialsquantity\030\004 "
  "\003(\r\022\027\n\017outputitemdefid\030\005 \001(\004\"O\n-CInvento"
  "ry_GetEligiblePromoItemDefIDs_Request\022\r\n"
  "\005appid\030\001 \001(\r\022\017\n\007steamid\030\002 \001(\004\"D\n.CInvent"
  "ory_GetEligiblePromoItemDefIDs_Response\022"
  "\022\n\nitemdefids\030\001 \003(\004\"\314\003\n\032CInventory_AddIt"
  "em_Request\022\r\n\005appid\030\001 \001(\r\022\021\n\titemdefid\030\002"
  " \003(\004\022\025\n\ritempropsjson\030\003 \003(\t\022\017\n\007steamid\030\004"
  " \001(\004\022\\\n\006notify\030\005 \001(\010BL\202\265\030HShould notify "
  "the user that the item was added to thei"
  "r Steam Inventory.\022\021\n\trequestid\030\006 \001(\004\022j\n"
  "\021trade_restriction\030\007 \001(\010BO\202\265\030KIf true, a"
  "pply the default trade and market restri"
  "ction times to this item.\022\206\001\n\013is_purchas"
  "e\030\010 \001(\010:\005falseBj\202\265\030fIf set, treat reques"
  "tid as a txnid and create this item as a"
  " result of user microtransaction purchas"
  "e.\"\361\002\n\036CInventory_ModifyItems_Request\022\r\n"
  "\005appid\030\001 \001(\r\022\017\n\007steamid\030\002 \001(\004\022O\n\007updates"
  "\030\003 \003(\0132>.proto.steam.CInventory_ModifyIt"
  "ems_Request.ItemPropertyUpdate\022\021\n\ttimest"
  "amp\030\004 \001(\r\032\312\001\n\022ItemPropertyUpdate\022\016\n\006item"
  "id\030\001 \001(\004\022\027\n\017remove_property\030\002 \001(\010\022\025\n\rpro"
  "perty_name\030\003 \001(\t\022\033\n\023property_value_bool\030"
  "\004 \001(\010\022\032\n\022property_value_int\030\005 \001(\003\022\035\n\025pro"
  "perty_value_string\030\006 \001(\t\022\034\n\024property_val"
  "ue_float\030\007 \001(\002\"F\n\"CInventory_ConsumePlay"
  "time_Request\022\r\n\005appid\030\001 \001(\r\022\021\n\titemdefid"
  "\030\002 \001(\004\"\210\001\n\036CInventory_ConsumeItem_Reques"
  "t\022\r\n\005appid\030\001 \001(\r\022\016\n\006itemid\030\002 \001(\004\022\020\n\010quan"
  "tity\030\003 \001(\r\022\021\n\ttimestamp\030\004 \001(\t\022\017\n\007steamid"
  "\030\005 \001(\004\022\021\n\trequestid\030\006 \001(\004\"W\n!CInventory_"
  "DevSetNextDrop_Request\022\r\n\005appid\030\001 \001(\r\022\021\n"
  "\titemdefid\030\002 \001(\004\022\020\n\010droptime\030\003 \001(\t\"T\n!CI"
  "nventory_SplitItemStack_Request\022\r\n\005appid"
  "\030\001 \001(\r\022\016\n\006itemid\030\002 \001(\004\022\020\n\010quantity\030\003 \001(\r"
  "\"o\n$CInventory_CombineItemStacks_Request"
  "\022\r\n\005appid\030\001 \001(\r\022\022\n\nfromitemid\030\002 \001(\004\022\022\n\nd"
  "estitemid\030\003 \001(\004\022\020\n\010quantity\030\004 \001(\r\"2\n!CIn"
  "ventory_GetItemDefMeta_Request\022\r\n\005appid\030"
  "\001 \001(\r\"F\n\"CInventory_GetItemDefMeta_Respo"
  "nse\022\020\n\010modified\030\001 \001(\r\022\016\n\006digest\030\002 \001(\t\"(\n"
  "&CInventory_GetUserPurchaseInfo_Request\""
  "<\n\'CInventory_GetUserPurchaseInfo_Respon"
  "se\022\021\n\tecurrency\030\001 \001(\005\"\276\001\n\037CInventory_Pur"
  "chaseInit_Request\022\r\n\005appid\030\001 \001(\r\022\020\n\010lang"
  "uage\030\002 \001(\005\022I\n\nline_items\030\003 \003(\01325.proto.s"
  "team.CInventory_PurchaseInit_Request.Lin"
  "eItem\032/\n\010LineItem\022\021\n\titemdefid\030\001 \001(\004\022\020\n\010"
  "quantity\030\002 \001(\r\"D\n CInventory_PurchaseIni"
  "t_Response\022\017\n\007orderid\030\001 \001(\004\022\017\n\007transid\030\002"
  " \001(\004\"W\n#CInventory_PurchaseFinalize_Requ"
  "est\022\r\n\005appid\030\001 \001(\r\022\020\n\010language\030\002 \001(\005\022\017\n\007"
  "orderid\030\003 \001(\004\"u\n&CInventoryClient_NewIte"
  "ms_Notification\022\r\n\005appid\030\001 \001(\r\022<\n\022invent"
  "ory_response\030\002 \001(\0132 .proto.steam.CInvent"
  "ory_Response2\261\022\n\tInventory\022\222\001\n\014GetInvent"
  "ory\022,.proto.steam.CInventory_GetInventor"
  "y_Request\032 .proto.steam.CInventory_Respo"
  "nse\"2\202\265\030.Retrieves a users inventory as "
  "a big JSON blob\022\207\001\n\014ExchangeItem\022,.proto"
  ".steam.CInventory_ExchangeItem_Request\032 "
  ".proto.steam.CInventory_Response\"\'\202\265\030#Cr"
  "aft an item in a user\'s inventory\022\325\001\n\032Ge"
  "tEligiblePromoItemDefIDs\022:.proto.steam.C"
  "Inventory_GetEligiblePromoItemDefIDs_Req"
  "uest\032;.proto.steam.CInventory_GetEligibl"
  "ePromoItemDefIDs_Response\">\202\265\030:Returns a"
  " list of promo item defs the user is eli"
  "gible for\022\206\001\n\014AddPromoItem\022\'.proto.steam"
  ".CInventory_AddItem_Request\032 .proto.stea"
  "m.CInventory_Response\"+\202\265\030\'Adds a promo "
  "item to a user\'s inventory\022\241\001\n\017SafeModif"
  "yItems\022+.proto.steam.CInventory_ModifyIt"
  "ems_Request\032 .proto.steam.CInventory_Res"
  "ponse\"\?\202\265\030;Modify an item in a user\'s in"
  "ventory (safe properties only)\022\237\001\n\017Consu"
  "mePlaytime\022/.proto.steam.CInventory_Cons"
  "umePlaytime_Request\032 .proto.steam.CInven"
  "tory_Response\"9\202\265\0305Consumes playtime and"
  " possibly returns a granted item\022q\n\013Cons"
  "umeItem\022+.proto.steam.CInventory_Consume"
  "Item_Request\032 .proto.steam.CInventory_Re"
  "sponse\"\023\202\265\030\017Consume an item\022\206\001\n\017DevGener"
  "ateItem\022\'.proto.steam.CInventory_AddItem"
  "_Request\032 .proto.steam.CInventory_Respon"
  "se\"(\202\265\030$Grant an item when in developer "
  "mode\022w\n\016DevSetNextDrop\022..proto.steam.CIn"
  "ventory_DevSetNextDrop_Request\032 .proto.s"
  "team.CInventory_Response\"\023\202\265\030\017Consume an"
  " item\022\213\001\n\016SplitItemStack\022..proto.steam.C"
  "Inventory_SplitItemStack_Request\032 .proto"
  ".steam.CInventory_Response\"\'\202\265\030#Split an"
  " item stack into two stacks\022\211\001\n\021CombineI"
  "temStacks\0221.proto.steam.CInventory_Combi"
  "neItemStacks_Request\032 .proto.steam.CInve"
  "ntory_Response\"\037\202\265\030\033Combine two stacks o"
  "f items\022\264\001\n\016GetItemDefMeta\022..proto.steam"
  ".CInventory_GetItemDefMeta_Request\032/.pro"
  "to.steam.CInventory_GetItemDefMeta_Respo"
  "nse\"A\202\265\030=Get metadata about the current "
  "item definition for this game.\022\277\001\n\023GetUs"
  "erPurchaseInfo\0223.proto.steam.CInventory_"
  "GetUserPurchaseInfo_Request\0324.proto.stea"
  "m.CInventory_GetUserPurchaseInfo_Respons"
  "e\"=\202\265\0309Returns information about the use"
  "r such as their currency\022\224\001\n\014PurchaseIni"
  "t\022,.proto.steam.CInventory_PurchaseInit_"
  "Request\032-.proto.steam.CInventory_Purchas"
  "eInit_Response\"\'\202\265\030#Initializes a purcha"
  "se for the user\022\215\001\n\020PurchaseFinalize\0220.p"
  "roto.steam.CInventory_PurchaseFinalize_R"
  "equest\032 .proto.steam.CInventory_Response"
  "\"%\202\265\030!Finalizes a purchase for the user\032"
  "/\202\265\030+A service that provides access to i"
  "nventory2\335\001\n\017InventoryClient\022\222\001\n\016NotifyN"
  "ewItems\0223.proto.steam.CInventoryClient_N"
  "ewItems_Notification\032\027.proto.steam.NoRes"
  "ponse\"2\202\265\030.Notify client that the user r"
  "eceived new items\0325\202\265\030-Client notificati"
  "ons inventory service events\300\265\030\002B\003\200\001\001"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_steammessages_5finventory_2esteamclient_2eproto = {
  false, InitDefaults_steammessages_5finventory_2esteamclient_2eproto, 
  descriptor_table_protodef_steammessages_5finventory_2esteamclient_2eproto,
  "steammessages_inventory.steamclient.proto", &assign_descriptors_table_steammessages_5finventory_2esteamclient_2eproto, 5277,
};

void AddDescriptors_steammessages_5finventory_2esteamclient_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_steammessages_5funified_5fbase_2esteamclient_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_steammessages_5finventory_2esteamclient_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_steammessages_5finventory_2esteamclient_2eproto = []() { AddDescriptors_steammessages_5finventory_2esteamclient_2eproto(); return true; }();
namespace proto {
namespace steam {

// ===================================================================

void CInventory_GetInventory_Request::InitAsDefaultInstance() {
}
class CInventory_GetInventory_Request::HasBitSetters {
 public:
  static void set_has_appid(CInventory_GetInventory_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_steamid(CInventory_GetInventory_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CInventory_GetInventory_Request::kAppidFieldNumber;
const int CInventory_GetInventory_Request::kSteamidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CInventory_GetInventory_Request::CInventory_GetInventory_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CInventory_GetInventory_Request)
}
CInventory_GetInventory_Request::CInventory_GetInventory_Request(const CInventory_GetInventory_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CInventory_GetInventory_Request)
}

void CInventory_GetInventory_Request::SharedCtor() {
  ::memset(&steamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&appid_) -
      reinterpret_cast<char*>(&steamid_)) + sizeof(appid_));
}

CInventory_GetInventory_Request::~CInventory_GetInventory_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CInventory_GetInventory_Request)
  SharedDtor();
}

void CInventory_GetInventory_Request::SharedDtor() {
}

void CInventory_GetInventory_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CInventory_GetInventory_Request& CInventory_GetInventory_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CInventory_GetInventory_Request_steammessages_5finventory_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CInventory_GetInventory_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CInventory_GetInventory_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&appid_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CInventory_GetInventory_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CInventory_GetInventory_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 steamid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_steamid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CInventory_GetInventory_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CInventory_GetInventory_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 steamid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CInventory_GetInventory_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CInventory_GetInventory_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CInventory_GetInventory_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CInventory_GetInventory_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint64 steamid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->steamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CInventory_GetInventory_Request)
}

::google::protobuf::uint8* CInventory_GetInventory_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CInventory_GetInventory_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint64 steamid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->steamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CInventory_GetInventory_Request)
  return target;
}

size_t CInventory_GetInventory_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CInventory_GetInventory_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 steamid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->steamid());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CInventory_GetInventory_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CInventory_GetInventory_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CInventory_GetInventory_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CInventory_GetInventory_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CInventory_GetInventory_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CInventory_GetInventory_Request)
    MergeFrom(*source);
  }
}

void CInventory_GetInventory_Request::MergeFrom(const CInventory_GetInventory_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CInventory_GetInventory_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CInventory_GetInventory_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CInventory_GetInventory_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CInventory_GetInventory_Request::CopyFrom(const CInventory_GetInventory_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CInventory_GetInventory_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CInventory_GetInventory_Request::IsInitialized() const {
  return true;
}

void CInventory_GetInventory_Request::Swap(CInventory_GetInventory_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CInventory_GetInventory_Request::InternalSwap(CInventory_GetInventory_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
  swap(appid_, other->appid_);
}

::google::protobuf::Metadata CInventory_GetInventory_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5finventory_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5finventory_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CInventory_Response::InitAsDefaultInstance() {
}
class CInventory_Response::HasBitSetters {
 public:
  static void set_has_etag(CInventory_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_item_json(CInventory_Response* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_itemdef_json(CInventory_Response* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_ticket(CInventory_Response* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_replayed(CInventory_Response* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CInventory_Response::kEtagFieldNumber;
const int CInventory_Response::kRemoveditemidsFieldNumber;
const int CInventory_Response::kItemJsonFieldNumber;
const int CInventory_Response::kItemdefJsonFieldNumber;
const int CInventory_Response::kTicketFieldNumber;
const int CInventory_Response::kReplayedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CInventory_Response::CInventory_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CInventory_Response)
}
CInventory_Response::CInventory_Response(const CInventory_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      removeditemids_(from.removeditemids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  etag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_etag()) {
    etag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.etag_);
  }
  item_json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_item_json()) {
    item_json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.item_json_);
  }
  itemdef_json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_itemdef_json()) {
    itemdef_json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.itemdef_json_);
  }
  ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ticket()) {
    ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_);
  }
  replayed_ = from.replayed_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CInventory_Response)
}

void CInventory_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CInventory_Response_steammessages_5finventory_2esteamclient_2eproto.base);
  etag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  item_json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  itemdef_json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  replayed_ = false;
}

CInventory_Response::~CInventory_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CInventory_Response)
  SharedDtor();
}

void CInventory_Response::SharedDtor() {
  etag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  item_json_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  itemdef_json_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CInventory_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CInventory_Response& CInventory_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CInventory_Response_steammessages_5finventory_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CInventory_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CInventory_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  removeditemids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      etag_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      item_json_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      itemdef_json_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      ticket_.ClearNonDefaultToEmptyNoArena();
    }
  }
  replayed_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CInventory_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CInventory_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string etag = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CInventory_Response.etag");
        object = msg->mutable_etag();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated uint64 removeditemids = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 16) {
          do {
            msg->add_removeditemids(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 16 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt64Parser;
        object = msg->mutable_removeditemids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional string item_json = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CInventory_Response.item_json");
        object = msg->mutable_item_json();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string itemdef_json = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CInventory_Response.itemdef_json");
        object = msg->mutable_itemdef_json();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bytes ticket = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_ticket();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool replayed = 6 [(.proto.steam.description) = "If true, the requestid given was processed earlier."];
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_replayed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CInventory_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CInventory_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string etag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_etag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->etag().data(), static_cast<int>(this->etag().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CInventory_Response.etag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 removeditemids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16u, input, this->mutable_removeditemids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_removeditemids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string item_json = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_item_json()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->item_json().data(), static_cast<int>(this->item_json().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CInventory_Response.item_json");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string itemdef_json = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itemdef_json()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->itemdef_json().data(), static_cast<int>(this->itemdef_json().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CInventory_Response.itemdef_json");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes ticket = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ticket()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool replayed = 6 [(.proto.steam.description) = "If true, the requestid given was processed earlier."];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_replayed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &replayed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CInventory_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CInventory_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CInventory_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CInventory_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string etag = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->etag().data(), static_cast<int>(this->etag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CInventory_Response.etag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->etag(), output);
  }

  // repeated uint64 removeditemids = 2;
  for (int i = 0, n = this->removeditemids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->removeditemids(i), output);
  }

  // optional string item_json = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->item_json().data(), static_cast<int>(this->item_json().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CInventory_Response.item_json");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->item_json(), output);
  }

  // optional string itemdef_json = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemdef_json().data(), static_cast<int>(this->itemdef_json().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CInventory_Response.itemdef_json");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->itemdef_json(), output);
  }

  // optional bytes ticket = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->ticket(), output);
  }

  // optional bool replayed = 6 [(.proto.steam.description) = "If true, the requestid given was processed earlier."];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->replayed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CInventory_Response)
}

::google::protobuf::uint8* CInventory_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CInventory_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string etag = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->etag().data(), static_cast<int>(this->etag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CInventory_Response.etag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->etag(), target);
  }

  // repeated uint64 removeditemids = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(2, this->removeditemids_, target);

  // optional string item_json = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->item_json().data(), static_cast<int>(this->item_json().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CInventory_Response.item_json");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->item_json(), target);
  }

  // optional string itemdef_json = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemdef_json().data(), static_cast<int>(this->itemdef_json().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CInventory_Response.itemdef_json");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->itemdef_json(), target);
  }

  // optional bytes ticket = 5;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->ticket(), target);
  }

  // optional bool replayed = 6 [(.proto.steam.description) = "If true, the requestid given was processed earlier."];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->replayed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CInventory_Response)
  return target;
}

size_t CInventory_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CInventory_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 removeditemids = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->removeditemids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->removeditemids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string etag = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->etag());
    }

    // optional string item_json = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->item_json());
    }

    // optional string itemdef_json = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itemdef_json());
    }

    // optional bytes ticket = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ticket());
    }

    // optional bool replayed = 6 [(.proto.steam.description) = "If true, the requestid given was processed earlier."];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CInventory_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CInventory_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CInventory_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CInventory_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CInventory_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CInventory_Response)
    MergeFrom(*source);
  }
}

void CInventory_Response::MergeFrom(const CInventory_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CInventory_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  removeditemids_.MergeFrom(from.removeditemids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      etag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.etag_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      item_json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.item_json_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      itemdef_json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.itemdef_json_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_);
    }
    if (cached_has_bits & 0x00000010u) {
      replayed_ = from.replayed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CInventory_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CInventory_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CInventory_Response::CopyFrom(const CInventory_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CInventory_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CInventory_Response::IsInitialized() const {
  return true;
}

void CInventory_Response::Swap(CInventory_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CInventory_Response::InternalSwap(CInventory_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  removeditemids_.InternalSwap(&other->removeditemids_);
  etag_.Swap(&other->etag_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  item_json_.Swap(&other->item_json_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  itemdef_json_.Swap(&other->itemdef_json_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ticket_.Swap(&other->ticket_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(replayed_, other->replayed_);
}

::google::protobuf::Metadata CInventory_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5finventory_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5finventory_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CInventory_ExchangeItem_Request::InitAsDefaultInstance() {
}
class CInventory_ExchangeItem_Request::HasBitSetters {
 public:
  static void set_has_appid(CInventory_ExchangeItem_Request* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_steamid(CInventory_ExchangeItem_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_outputitemdefid(CInventory_ExchangeItem_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CInventory_ExchangeItem_Request::kAppidFieldNumber;
const int CInventory_ExchangeItem_Request::kSteamidFieldNumber;
const int CInventory_ExchangeItem_Request::kMaterialsitemidFieldNumber;
const int CInventory_ExchangeItem_Request::kMaterialsquantityFieldNumber;
const int CInventory_ExchangeItem_Request::kOutputitemdefidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CInventory_ExchangeItem_Request::CInventory_ExchangeItem_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CInventory_ExchangeItem_Request)
}
CInventory_ExchangeItem_Request::CInventory_ExchangeItem_Request(const CInventory_ExchangeItem_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      materialsitemid_(from.materialsitemid_),
      materialsquantity_(from.materialsquantity_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CInventory_ExchangeItem_Request)
}

void CInventory_ExchangeItem_Request::SharedCtor() {
  ::memset(&steamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&appid_) -
      reinterpret_cast<char*>(&steamid_)) + sizeof(appid_));
}

CInventory_ExchangeItem_Request::~CInventory_ExchangeItem_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CInventory_ExchangeItem_Request)
  SharedDtor();
}

void CInventory_ExchangeItem_Request::SharedDtor() {
}

void CInventory_ExchangeItem_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CInventory_ExchangeItem_Request& CInventory_ExchangeItem_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CInventory_ExchangeItem_Request_steammessages_5finventory_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CInventory_ExchangeItem_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CInventory_ExchangeItem_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  materialsitemid_.Clear();
  materialsquantity_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&appid_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CInventory_ExchangeItem_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CInventory_ExchangeItem_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 steamid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_steamid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint64 materialsitemid = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) == 24) {
          do {
            msg->add_materialsitemid(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 24 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt64Parser;
        object = msg->mutable_materialsitemid();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated uint32 materialsquantity = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) == 32) {
          do {
            msg->add_materialsquantity(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 32 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_materialsquantity();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional uint64 outputitemdefid = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_outputitemdefid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CInventory_ExchangeItem_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CInventory_ExchangeItem_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 steamid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 materialsitemid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24u, input, this->mutable_materialsitemid())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_materialsitemid())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 materialsquantity = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32u, input, this->mutable_materialsquantity())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_materialsquantity())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 outputitemdefid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_outputitemdefid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &outputitemdefid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CInventory_ExchangeItem_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CInventory_ExchangeItem_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CInventory_ExchangeItem_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CInventory_ExchangeItem_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint64 steamid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->steamid(), output);
  }

  // repeated uint64 materialsitemid = 3;
  for (int i = 0, n = this->materialsitemid_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->materialsitemid(i), output);
  }

  // repeated uint32 materialsquantity = 4;
  for (int i = 0, n = this->materialsquantity_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->materialsquantity(i), output);
  }

  // optional uint64 outputitemdefid = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->outputitemdefid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CInventory_ExchangeItem_Request)
}

::google::protobuf::uint8* CInventory_ExchangeItem_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CInventory_ExchangeItem_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint64 steamid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->steamid(), target);
  }

  // repeated uint64 materialsitemid = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(3, this->materialsitemid_, target);

  // repeated uint32 materialsquantity = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(4, this->materialsquantity_, target);

  // optional uint64 outputitemdefid = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->outputitemdefid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CInventory_ExchangeItem_Request)
  return target;
}

size_t CInventory_ExchangeItem_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CInventory_ExchangeItem_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 materialsitemid = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->materialsitemid_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->materialsitemid_size());
    total_size += data_size;
  }

  // repeated uint32 materialsquantity = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->materialsquantity_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->materialsquantity_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 steamid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->steamid());
    }

    // optional uint64 outputitemdefid = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->outputitemdefid());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CInventory_ExchangeItem_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CInventory_ExchangeItem_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CInventory_ExchangeItem_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CInventory_ExchangeItem_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CInventory_ExchangeItem_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CInventory_ExchangeItem_Request)
    MergeFrom(*source);
  }
}

void CInventory_ExchangeItem_Request::MergeFrom(const CInventory_ExchangeItem_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CInventory_ExchangeItem_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  materialsitemid_.MergeFrom(from.materialsitemid_);
  materialsquantity_.MergeFrom(from.materialsquantity_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      outputitemdefid_ = from.outputitemdefid_;
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CInventory_ExchangeItem_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CInventory_ExchangeItem_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CInventory_ExchangeItem_Request::CopyFrom(const CInventory_ExchangeItem_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CInventory_ExchangeItem_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CInventory_ExchangeItem_Request::IsInitialized() const {
  return true;
}

void CInventory_ExchangeItem_Request::Swap(CInventory_ExchangeItem_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CInventory_ExchangeItem_Request::InternalSwap(CInventory_ExchangeItem_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  materialsitemid_.InternalSwap(&other->materialsitemid_);
  materialsquantity_.InternalSwap(&other->materialsquantity_);
  swap(steamid_, other->steamid_);
  swap(outputitemdefid_, other->outputitemdefid_);
  swap(appid_, other->appid_);
}

::google::protobuf::Metadata CInventory_ExchangeItem_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5finventory_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5finventory_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CInventory_GetEligiblePromoItemDefIDs_Request::InitAsDefaultInstance() {
}
class CInventory_GetEligiblePromoItemDefIDs_Request::HasBitSetters {
 public:
  static void set_has_appid(CInventory_GetEligiblePromoItemDefIDs_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_steamid(CInventory_GetEligiblePromoItemDefIDs_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CInventory_GetEligiblePromoItemDefIDs_Request::kAppidFieldNumber;
const int CInventory_GetEligiblePromoItemDefIDs_Request::kSteamidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CInventory_GetEligiblePromoItemDefIDs_Request::CInventory_GetEligiblePromoItemDefIDs_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Request)
}
CInventory_GetEligiblePromoItemDefIDs_Request::CInventory_GetEligiblePromoItemDefIDs_Request(const CInventory_GetEligiblePromoItemDefIDs_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Request)
}

void CInventory_GetEligiblePromoItemDefIDs_Request::SharedCtor() {
  ::memset(&steamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&appid_) -
      reinterpret_cast<char*>(&steamid_)) + sizeof(appid_));
}

CInventory_GetEligiblePromoItemDefIDs_Request::~CInventory_GetEligiblePromoItemDefIDs_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Request)
  SharedDtor();
}

void CInventory_GetEligiblePromoItemDefIDs_Request::SharedDtor() {
}

void CInventory_GetEligiblePromoItemDefIDs_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CInventory_GetEligiblePromoItemDefIDs_Request& CInventory_GetEligiblePromoItemDefIDs_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CInventory_GetEligiblePromoItemDefIDs_Request_steammessages_5finventory_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CInventory_GetEligiblePromoItemDefIDs_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&appid_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CInventory_GetEligiblePromoItemDefIDs_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CInventory_GetEligiblePromoItemDefIDs_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 steamid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_steamid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CInventory_GetEligiblePromoItemDefIDs_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 steamid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CInventory_GetEligiblePromoItemDefIDs_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint64 steamid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->steamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Request)
}

::google::protobuf::uint8* CInventory_GetEligiblePromoItemDefIDs_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint64 steamid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->steamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Request)
  return target;
}

size_t CInventory_GetEligiblePromoItemDefIDs_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 steamid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->steamid());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CInventory_GetEligiblePromoItemDefIDs_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CInventory_GetEligiblePromoItemDefIDs_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CInventory_GetEligiblePromoItemDefIDs_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Request)
    MergeFrom(*source);
  }
}

void CInventory_GetEligiblePromoItemDefIDs_Request::MergeFrom(const CInventory_GetEligiblePromoItemDefIDs_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CInventory_GetEligiblePromoItemDefIDs_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CInventory_GetEligiblePromoItemDefIDs_Request::CopyFrom(const CInventory_GetEligiblePromoItemDefIDs_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CInventory_GetEligiblePromoItemDefIDs_Request::IsInitialized() const {
  return true;
}

void CInventory_GetEligiblePromoItemDefIDs_Request::Swap(CInventory_GetEligiblePromoItemDefIDs_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CInventory_GetEligiblePromoItemDefIDs_Request::InternalSwap(CInventory_GetEligiblePromoItemDefIDs_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
  swap(appid_, other->appid_);
}

::google::protobuf::Metadata CInventory_GetEligiblePromoItemDefIDs_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5finventory_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5finventory_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CInventory_GetEligiblePromoItemDefIDs_Response::InitAsDefaultInstance() {
}
class CInventory_GetEligiblePromoItemDefIDs_Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CInventory_GetEligiblePromoItemDefIDs_Response::kItemdefidsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CInventory_GetEligiblePromoItemDefIDs_Response::CInventory_GetEligiblePromoItemDefIDs_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Response)
}
CInventory_GetEligiblePromoItemDefIDs_Response::CInventory_GetEligiblePromoItemDefIDs_Response(const CInventory_GetEligiblePromoItemDefIDs_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      itemdefids_(from.itemdefids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Response)
}

void CInventory_GetEligiblePromoItemDefIDs_Response::SharedCtor() {
}

CInventory_GetEligiblePromoItemDefIDs_Response::~CInventory_GetEligiblePromoItemDefIDs_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Response)
  SharedDtor();
}

void CInventory_GetEligiblePromoItemDefIDs_Response::SharedDtor() {
}

void CInventory_GetEligiblePromoItemDefIDs_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CInventory_GetEligiblePromoItemDefIDs_Response& CInventory_GetEligiblePromoItemDefIDs_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CInventory_GetEligiblePromoItemDefIDs_Response_steammessages_5finventory_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CInventory_GetEligiblePromoItemDefIDs_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  itemdefids_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CInventory_GetEligiblePromoItemDefIDs_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CInventory_GetEligiblePromoItemDefIDs_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated uint64 itemdefids = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 8) {
          do {
            msg->add_itemdefids(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt64Parser;
        object = msg->mutable_itemdefids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CInventory_GetEligiblePromoItemDefIDs_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 itemdefids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8u, input, this->mutable_itemdefids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_itemdefids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CInventory_GetEligiblePromoItemDefIDs_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 itemdefids = 1;
  for (int i = 0, n = this->itemdefids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->itemdefids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Response)
}

::google::protobuf::uint8* CInventory_GetEligiblePromoItemDefIDs_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 itemdefids = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(1, this->itemdefids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Response)
  return target;
}

size_t CInventory_GetEligiblePromoItemDefIDs_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 itemdefids = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->itemdefids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->itemdefids_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CInventory_GetEligiblePromoItemDefIDs_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CInventory_GetEligiblePromoItemDefIDs_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CInventory_GetEligiblePromoItemDefIDs_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Response)
    MergeFrom(*source);
  }
}

void CInventory_GetEligiblePromoItemDefIDs_Response::MergeFrom(const CInventory_GetEligiblePromoItemDefIDs_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  itemdefids_.MergeFrom(from.itemdefids_);
}

void CInventory_GetEligiblePromoItemDefIDs_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CInventory_GetEligiblePromoItemDefIDs_Response::CopyFrom(const CInventory_GetEligiblePromoItemDefIDs_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CInventory_GetEligiblePromoItemDefIDs_Response::IsInitialized() const {
  return true;
}

void CInventory_GetEligiblePromoItemDefIDs_Response::Swap(CInventory_GetEligiblePromoItemDefIDs_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CInventory_GetEligiblePromoItemDefIDs_Response::InternalSwap(CInventory_GetEligiblePromoItemDefIDs_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  itemdefids_.InternalSwap(&other->itemdefids_);
}

::google::protobuf::Metadata CInventory_GetEligiblePromoItemDefIDs_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5finventory_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5finventory_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CInventory_AddItem_Request::InitAsDefaultInstance() {
}
class CInventory_AddItem_Request::HasBitSetters {
 public:
  static void set_has_appid(CInventory_AddItem_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_steamid(CInventory_AddItem_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_notify(CInventory_AddItem_Request* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_requestid(CInventory_AddItem_Request* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_trade_restriction(CInventory_AddItem_Request* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_is_purchase(CInventory_AddItem_Request* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CInventory_AddItem_Request::kAppidFieldNumber;
const int CInventory_AddItem_Request::kItemdefidFieldNumber;
const int CInventory_AddItem_Request::kItempropsjsonFieldNumber;
const int CInventory_AddItem_Request::kSteamidFieldNumber;
const int CInventory_AddItem_Request::kNotifyFieldNumber;
const int CInventory_AddItem_Request::kRequestidFieldNumber;
const int CInventory_AddItem_Request::kTradeRestrictionFieldNumber;
const int CInventory_AddItem_Request::kIsPurchaseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CInventory_AddItem_Request::CInventory_AddItem_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CInventory_AddItem_Request)
}
CInventory_AddItem_Request::CInventory_AddItem_Request(const CInventory_AddItem_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      itemdefid_(from.itemdefid_),
      itempropsjson_(from.itempropsjson_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&requestid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(requestid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CInventory_AddItem_Request)
}

void CInventory_AddItem_Request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CInventory_AddItem_Request_steammessages_5finventory_2esteamclient_2eproto.base);
  ::memset(&steamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&requestid_) -
      reinterpret_cast<char*>(&steamid_)) + sizeof(requestid_));
}

CInventory_AddItem_Request::~CInventory_AddItem_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CInventory_AddItem_Request)
  SharedDtor();
}

void CInventory_AddItem_Request::SharedDtor() {
}

void CInventory_AddItem_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CInventory_AddItem_Request& CInventory_AddItem_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CInventory_AddItem_Request_steammessages_5finventory_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CInventory_AddItem_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CInventory_AddItem_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  itemdefid_.Clear();
  itempropsjson_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&requestid_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(requestid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CInventory_AddItem_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CInventory_AddItem_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint64 itemdefid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 16) {
          do {
            msg->add_itemdefid(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 16 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt64Parser;
        object = msg->mutable_itemdefid();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated string itempropsjson = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("proto.steam.CInventory_AddItem_Request.itempropsjson");
          object = msg->add_itempropsjson();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // optional uint64 steamid = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_steamid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool notify = 5 [(.proto.steam.description) = "Should notify the user that the item was added to their Steam Inventory."];
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_notify(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 requestid = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_requestid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool trade_restriction = 7 [(.proto.steam.description) = "If true, apply the default trade and market restriction times to this item."];
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_trade_restriction(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool is_purchase = 8 [default = false, (.proto.steam.description) = "If set, treat requestid as a txnid and create this item as a result of user microtransaction purchase."];
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_is_purchase(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CInventory_AddItem_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CInventory_AddItem_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 itemdefid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16u, input, this->mutable_itemdefid())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_itemdefid())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string itempropsjson = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_itempropsjson()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->itempropsjson(this->itempropsjson_size() - 1).data(),
            static_cast<int>(this->itempropsjson(this->itempropsjson_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CInventory_AddItem_Request.itempropsjson");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 steamid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool notify = 5 [(.proto.steam.description) = "Should notify the user that the item was added to their Steam Inventory."];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_notify(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &notify_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 requestid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_requestid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool trade_restriction = 7 [(.proto.steam.description) = "If true, apply the default trade and market restriction times to this item."];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_trade_restriction(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &trade_restriction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_purchase = 8 [default = false, (.proto.steam.description) = "If set, treat requestid as a txnid and create this item as a result of user microtransaction purchase."];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_is_purchase(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_purchase_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CInventory_AddItem_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CInventory_AddItem_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CInventory_AddItem_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CInventory_AddItem_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // repeated uint64 itemdefid = 2;
  for (int i = 0, n = this->itemdefid_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->itemdefid(i), output);
  }

  // repeated string itempropsjson = 3;
  for (int i = 0, n = this->itempropsjson_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itempropsjson(i).data(), static_cast<int>(this->itempropsjson(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CInventory_AddItem_Request.itempropsjson");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->itempropsjson(i), output);
  }

  // optional uint64 steamid = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->steamid(), output);
  }

  // optional bool notify = 5 [(.proto.steam.description) = "Should notify the user that the item was added to their Steam Inventory."];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->notify(), output);
  }

  // optional uint64 requestid = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->requestid(), output);
  }

  // optional bool trade_restriction = 7 [(.proto.steam.description) = "If true, apply the default trade and market restriction times to this item."];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->trade_restriction(), output);
  }

  // optional bool is_purchase = 8 [default = false, (.proto.steam.description) = "If set, treat requestid as a txnid and create this item as a result of user microtransaction purchase."];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_purchase(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CInventory_AddItem_Request)
}

::google::protobuf::uint8* CInventory_AddItem_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CInventory_AddItem_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // repeated uint64 itemdefid = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(2, this->itemdefid_, target);

  // repeated string itempropsjson = 3;
  for (int i = 0, n = this->itempropsjson_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itempropsjson(i).data(), static_cast<int>(this->itempropsjson(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CInventory_AddItem_Request.itempropsjson");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->itempropsjson(i), target);
  }

  // optional uint64 steamid = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->steamid(), target);
  }

  // optional bool notify = 5 [(.proto.steam.description) = "Should notify the user that the item was added to their Steam Inventory."];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->notify(), target);
  }

  // optional uint64 requestid = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->requestid(), target);
  }

  // optional bool trade_restriction = 7 [(.proto.steam.description) = "If true, apply the default trade and market restriction times to this item."];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->trade_restriction(), target);
  }

  // optional bool is_purchase = 8 [default = false, (.proto.steam.description) = "If set, treat requestid as a txnid and create this item as a result of user microtransaction purchase."];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_purchase(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CInventory_AddItem_Request)
  return target;
}

size_t CInventory_AddItem_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CInventory_AddItem_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 itemdefid = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->itemdefid_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->itemdefid_size());
    total_size += data_size;
  }

  // repeated string itempropsjson = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->itempropsjson_size());
  for (int i = 0, n = this->itempropsjson_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->itempropsjson(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint64 steamid = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->steamid());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional bool notify = 5 [(.proto.steam.description) = "Should notify the user that the item was added to their Steam Inventory."];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool trade_restriction = 7 [(.proto.steam.description) = "If true, apply the default trade and market restriction times to this item."];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool is_purchase = 8 [default = false, (.proto.steam.description) = "If set, treat requestid as a txnid and create this item as a result of user microtransaction purchase."];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional uint64 requestid = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->requestid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CInventory_AddItem_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CInventory_AddItem_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CInventory_AddItem_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CInventory_AddItem_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CInventory_AddItem_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CInventory_AddItem_Request)
    MergeFrom(*source);
  }
}

void CInventory_AddItem_Request::MergeFrom(const CInventory_AddItem_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CInventory_AddItem_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  itemdefid_.MergeFrom(from.itemdefid_);
  itempropsjson_.MergeFrom(from.itempropsjson_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000004u) {
      notify_ = from.notify_;
    }
    if (cached_has_bits & 0x00000008u) {
      trade_restriction_ = from.trade_restriction_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_purchase_ = from.is_purchase_;
    }
    if (cached_has_bits & 0x00000020u) {
      requestid_ = from.requestid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CInventory_AddItem_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CInventory_AddItem_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CInventory_AddItem_Request::CopyFrom(const CInventory_AddItem_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CInventory_AddItem_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CInventory_AddItem_Request::IsInitialized() const {
  return true;
}

void CInventory_AddItem_Request::Swap(CInventory_AddItem_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CInventory_AddItem_Request::InternalSwap(CInventory_AddItem_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  itemdefid_.InternalSwap(&other->itemdefid_);
  itempropsjson_.InternalSwap(CastToBase(&other->itempropsjson_));
  swap(steamid_, other->steamid_);
  swap(appid_, other->appid_);
  swap(notify_, other->notify_);
  swap(trade_restriction_, other->trade_restriction_);
  swap(is_purchase_, other->is_purchase_);
  swap(requestid_, other->requestid_);
}

::google::protobuf::Metadata CInventory_AddItem_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5finventory_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5finventory_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CInventory_ModifyItems_Request_ItemPropertyUpdate::InitAsDefaultInstance() {
}
class CInventory_ModifyItems_Request_ItemPropertyUpdate::HasBitSetters {
 public:
  static void set_has_itemid(CInventory_ModifyItems_Request_ItemPropertyUpdate* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_remove_property(CInventory_ModifyItems_Request_ItemPropertyUpdate* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_property_name(CInventory_ModifyItems_Request_ItemPropertyUpdate* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_property_value_bool(CInventory_ModifyItems_Request_ItemPropertyUpdate* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_property_value_int(CInventory_ModifyItems_Request_ItemPropertyUpdate* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_property_value_string(CInventory_ModifyItems_Request_ItemPropertyUpdate* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_property_value_float(CInventory_ModifyItems_Request_ItemPropertyUpdate* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CInventory_ModifyItems_Request_ItemPropertyUpdate::kItemidFieldNumber;
const int CInventory_ModifyItems_Request_ItemPropertyUpdate::kRemovePropertyFieldNumber;
const int CInventory_ModifyItems_Request_ItemPropertyUpdate::kPropertyNameFieldNumber;
const int CInventory_ModifyItems_Request_ItemPropertyUpdate::kPropertyValueBoolFieldNumber;
const int CInventory_ModifyItems_Request_ItemPropertyUpdate::kPropertyValueIntFieldNumber;
const int CInventory_ModifyItems_Request_ItemPropertyUpdate::kPropertyValueStringFieldNumber;
const int CInventory_ModifyItems_Request_ItemPropertyUpdate::kPropertyValueFloatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CInventory_ModifyItems_Request_ItemPropertyUpdate::CInventory_ModifyItems_Request_ItemPropertyUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CInventory_ModifyItems_Request.ItemPropertyUpdate)
}
CInventory_ModifyItems_Request_ItemPropertyUpdate::CInventory_ModifyItems_Request_ItemPropertyUpdate(const CInventory_ModifyItems_Request_ItemPropertyUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  property_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_property_name()) {
    property_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.property_name_);
  }
  property_value_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_property_value_string()) {
    property_value_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.property_value_string_);
  }
  ::memcpy(&itemid_, &from.itemid_,
    static_cast<size_t>(reinterpret_cast<char*>(&property_value_int_) -
    reinterpret_cast<char*>(&itemid_)) + sizeof(property_value_int_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CInventory_ModifyItems_Request.ItemPropertyUpdate)
}

void CInventory_ModifyItems_Request_ItemPropertyUpdate::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CInventory_ModifyItems_Request_ItemPropertyUpdate_steammessages_5finventory_2esteamclient_2eproto.base);
  property_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  property_value_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&itemid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&property_value_int_) -
      reinterpret_cast<char*>(&itemid_)) + sizeof(property_value_int_));
}

CInventory_ModifyItems_Request_ItemPropertyUpdate::~CInventory_ModifyItems_Request_ItemPropertyUpdate() {
  // @@protoc_insertion_point(destructor:proto.steam.CInventory_ModifyItems_Request.ItemPropertyUpdate)
  SharedDtor();
}

void CInventory_ModifyItems_Request_ItemPropertyUpdate::SharedDtor() {
  property_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  property_value_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CInventory_ModifyItems_Request_ItemPropertyUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CInventory_ModifyItems_Request_ItemPropertyUpdate& CInventory_ModifyItems_Request_ItemPropertyUpdate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CInventory_ModifyItems_Request_ItemPropertyUpdate_steammessages_5finventory_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CInventory_ModifyItems_Request_ItemPropertyUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CInventory_ModifyItems_Request.ItemPropertyUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      property_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      property_value_string_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&itemid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&property_value_int_) -
        reinterpret_cast<char*>(&itemid_)) + sizeof(property_value_int_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CInventory_ModifyItems_Request_ItemPropertyUpdate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CInventory_ModifyItems_Request_ItemPropertyUpdate*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 itemid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_itemid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool remove_property = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_remove_property(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string property_name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CInventory_ModifyItems_Request.ItemPropertyUpdate.property_name");
        object = msg->mutable_property_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool property_value_bool = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_property_value_bool(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int64 property_value_int = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_property_value_int(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string property_value_string = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CInventory_ModifyItems_Request.ItemPropertyUpdate.property_value_string");
        object = msg->mutable_property_value_string();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional float property_value_float = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 61) goto handle_unusual;
        msg->set_property_value_float(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CInventory_ModifyItems_Request_ItemPropertyUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CInventory_ModifyItems_Request.ItemPropertyUpdate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 itemid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_itemid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool remove_property = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_remove_property(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &remove_property_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string property_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_property_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->property_name().data(), static_cast<int>(this->property_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CInventory_ModifyItems_Request.ItemPropertyUpdate.property_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool property_value_bool = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_property_value_bool(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &property_value_bool_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 property_value_int = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_property_value_int(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &property_value_int_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string property_value_string = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_property_value_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->property_value_string().data(), static_cast<int>(this->property_value_string().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CInventory_ModifyItems_Request.ItemPropertyUpdate.property_value_string");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float property_value_float = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (61 & 0xFF)) {
          HasBitSetters::set_has_property_value_float(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &property_value_float_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CInventory_ModifyItems_Request.ItemPropertyUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CInventory_ModifyItems_Request.ItemPropertyUpdate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CInventory_ModifyItems_Request_ItemPropertyUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CInventory_ModifyItems_Request.ItemPropertyUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 itemid = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->itemid(), output);
  }

  // optional bool remove_property = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->remove_property(), output);
  }

  // optional string property_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->property_name().data(), static_cast<int>(this->property_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CInventory_ModifyItems_Request.ItemPropertyUpdate.property_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->property_name(), output);
  }

  // optional bool property_value_bool = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->property_value_bool(), output);
  }

  // optional int64 property_value_int = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->property_value_int(), output);
  }

  // optional string property_value_string = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->property_value_string().data(), static_cast<int>(this->property_value_string().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CInventory_ModifyItems_Request.ItemPropertyUpdate.property_value_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->property_value_string(), output);
  }

  // optional float property_value_float = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->property_value_float(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CInventory_ModifyItems_Request.ItemPropertyUpdate)
}

::google::protobuf::uint8* CInventory_ModifyItems_Request_ItemPropertyUpdate::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CInventory_ModifyItems_Request.ItemPropertyUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 itemid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->itemid(), target);
  }

  // optional bool remove_property = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->remove_property(), target);
  }

  // optional string property_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->property_name().data(), static_cast<int>(this->property_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CInventory_ModifyItems_Request.ItemPropertyUpdate.property_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->property_name(), target);
  }

  // optional bool property_value_bool = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->property_value_bool(), target);
  }

  // optional int64 property_value_int = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->property_value_int(), target);
  }

  // optional string property_value_string = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->property_value_string().data(), static_cast<int>(this->property_value_string().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CInventory_ModifyItems_Request.ItemPropertyUpdate.property_value_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->property_value_string(), target);
  }

  // optional float property_value_float = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->property_value_float(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CInventory_ModifyItems_Request.ItemPropertyUpdate)
  return target;
}

size_t CInventory_ModifyItems_Request_ItemPropertyUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CInventory_ModifyItems_Request.ItemPropertyUpdate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string property_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->property_name());
    }

    // optional string property_value_string = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->property_value_string());
    }

    // optional uint64 itemid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->itemid());
    }

    // optional bool remove_property = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool property_value_bool = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional float property_value_float = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional int64 property_value_int = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->property_value_int());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CInventory_ModifyItems_Request_ItemPropertyUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CInventory_ModifyItems_Request.ItemPropertyUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const CInventory_ModifyItems_Request_ItemPropertyUpdate* source =
      ::google::protobuf::DynamicCastToGenerated<CInventory_ModifyItems_Request_ItemPropertyUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CInventory_ModifyItems_Request.ItemPropertyUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CInventory_ModifyItems_Request.ItemPropertyUpdate)
    MergeFrom(*source);
  }
}

void CInventory_ModifyItems_Request_ItemPropertyUpdate::MergeFrom(const CInventory_ModifyItems_Request_ItemPropertyUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CInventory_ModifyItems_Request.ItemPropertyUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      property_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.property_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      property_value_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.property_value_string_);
    }
    if (cached_has_bits & 0x00000004u) {
      itemid_ = from.itemid_;
    }
    if (cached_has_bits & 0x00000008u) {
      remove_property_ = from.remove_property_;
    }
    if (cached_has_bits & 0x00000010u) {
      property_value_bool_ = from.property_value_bool_;
    }
    if (cached_has_bits & 0x00000020u) {
      property_value_float_ = from.property_value_float_;
    }
    if (cached_has_bits & 0x00000040u) {
      property_value_int_ = from.property_value_int_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CInventory_ModifyItems_Request_ItemPropertyUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CInventory_ModifyItems_Request.ItemPropertyUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CInventory_ModifyItems_Request_ItemPropertyUpdate::CopyFrom(const CInventory_ModifyItems_Request_ItemPropertyUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CInventory_ModifyItems_Request.ItemPropertyUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CInventory_ModifyItems_Request_ItemPropertyUpdate::IsInitialized() const {
  return true;
}

void CInventory_ModifyItems_Request_ItemPropertyUpdate::Swap(CInventory_ModifyItems_Request_ItemPropertyUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CInventory_ModifyItems_Request_ItemPropertyUpdate::InternalSwap(CInventory_ModifyItems_Request_ItemPropertyUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  property_name_.Swap(&other->property_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  property_value_string_.Swap(&other->property_value_string_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(itemid_, other->itemid_);
  swap(remove_property_, other->remove_property_);
  swap(property_value_bool_, other->property_value_bool_);
  swap(property_value_float_, other->property_value_float_);
  swap(property_value_int_, other->property_value_int_);
}

::google::protobuf::Metadata CInventory_ModifyItems_Request_ItemPropertyUpdate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5finventory_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5finventory_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CInventory_ModifyItems_Request::InitAsDefaultInstance() {
}
class CInventory_ModifyItems_Request::HasBitSetters {
 public:
  static void set_has_appid(CInventory_ModifyItems_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_steamid(CInventory_ModifyItems_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_timestamp(CInventory_ModifyItems_Request* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CInventory_ModifyItems_Request::kAppidFieldNumber;
const int CInventory_ModifyItems_Request::kSteamidFieldNumber;
const int CInventory_ModifyItems_Request::kUpdatesFieldNumber;
const int CInventory_ModifyItems_Request::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CInventory_ModifyItems_Request::CInventory_ModifyItems_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CInventory_ModifyItems_Request)
}
CInventory_ModifyItems_Request::CInventory_ModifyItems_Request(const CInventory_ModifyItems_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      updates_(from.updates_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CInventory_ModifyItems_Request)
}

void CInventory_ModifyItems_Request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CInventory_ModifyItems_Request_steammessages_5finventory_2esteamclient_2eproto.base);
  ::memset(&steamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&steamid_)) + sizeof(timestamp_));
}

CInventory_ModifyItems_Request::~CInventory_ModifyItems_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CInventory_ModifyItems_Request)
  SharedDtor();
}

void CInventory_ModifyItems_Request::SharedDtor() {
}

void CInventory_ModifyItems_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CInventory_ModifyItems_Request& CInventory_ModifyItems_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CInventory_ModifyItems_Request_steammessages_5finventory_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CInventory_ModifyItems_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CInventory_ModifyItems_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  updates_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CInventory_ModifyItems_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CInventory_ModifyItems_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 steamid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_steamid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.steam.CInventory_ModifyItems_Request.ItemPropertyUpdate updates = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CInventory_ModifyItems_Request_ItemPropertyUpdate::_InternalParse;
          object = msg->add_updates();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // optional uint32 timestamp = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CInventory_ModifyItems_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CInventory_ModifyItems_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 steamid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CInventory_ModifyItems_Request.ItemPropertyUpdate updates = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_updates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timestamp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_timestamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CInventory_ModifyItems_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CInventory_ModifyItems_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CInventory_ModifyItems_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CInventory_ModifyItems_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint64 steamid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->steamid(), output);
  }

  // repeated .proto.steam.CInventory_ModifyItems_Request.ItemPropertyUpdate updates = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->updates_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->updates(static_cast<int>(i)),
      output);
  }

  // optional uint32 timestamp = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CInventory_ModifyItems_Request)
}

::google::protobuf::uint8* CInventory_ModifyItems_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CInventory_ModifyItems_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint64 steamid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->steamid(), target);
  }

  // repeated .proto.steam.CInventory_ModifyItems_Request.ItemPropertyUpdate updates = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->updates_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->updates(static_cast<int>(i)), target);
  }

  // optional uint32 timestamp = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CInventory_ModifyItems_Request)
  return target;
}

size_t CInventory_ModifyItems_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CInventory_ModifyItems_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CInventory_ModifyItems_Request.ItemPropertyUpdate updates = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->updates_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->updates(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 steamid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->steamid());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional uint32 timestamp = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CInventory_ModifyItems_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CInventory_ModifyItems_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CInventory_ModifyItems_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CInventory_ModifyItems_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CInventory_ModifyItems_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CInventory_ModifyItems_Request)
    MergeFrom(*source);
  }
}

void CInventory_ModifyItems_Request::MergeFrom(const CInventory_ModifyItems_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CInventory_ModifyItems_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  updates_.MergeFrom(from.updates_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CInventory_ModifyItems_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CInventory_ModifyItems_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CInventory_ModifyItems_Request::CopyFrom(const CInventory_ModifyItems_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CInventory_ModifyItems_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CInventory_ModifyItems_Request::IsInitialized() const {
  return true;
}

void CInventory_ModifyItems_Request::Swap(CInventory_ModifyItems_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CInventory_ModifyItems_Request::InternalSwap(CInventory_ModifyItems_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&updates_)->InternalSwap(CastToBase(&other->updates_));
  swap(steamid_, other->steamid_);
  swap(appid_, other->appid_);
  swap(timestamp_, other->timestamp_);
}

::google::protobuf::Metadata CInventory_ModifyItems_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5finventory_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5finventory_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CInventory_ConsumePlaytime_Request::InitAsDefaultInstance() {
}
class CInventory_ConsumePlaytime_Request::HasBitSetters {
 public:
  static void set_has_appid(CInventory_ConsumePlaytime_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_itemdefid(CInventory_ConsumePlaytime_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CInventory_ConsumePlaytime_Request::kAppidFieldNumber;
const int CInventory_ConsumePlaytime_Request::kItemdefidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CInventory_ConsumePlaytime_Request::CInventory_ConsumePlaytime_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CInventory_ConsumePlaytime_Request)
}
CInventory_ConsumePlaytime_Request::CInventory_ConsumePlaytime_Request(const CInventory_ConsumePlaytime_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&itemdefid_, &from.itemdefid_,
    static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&itemdefid_)) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CInventory_ConsumePlaytime_Request)
}

void CInventory_ConsumePlaytime_Request::SharedCtor() {
  ::memset(&itemdefid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&appid_) -
      reinterpret_cast<char*>(&itemdefid_)) + sizeof(appid_));
}

CInventory_ConsumePlaytime_Request::~CInventory_ConsumePlaytime_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CInventory_ConsumePlaytime_Request)
  SharedDtor();
}

void CInventory_ConsumePlaytime_Request::SharedDtor() {
}

void CInventory_ConsumePlaytime_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CInventory_ConsumePlaytime_Request& CInventory_ConsumePlaytime_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CInventory_ConsumePlaytime_Request_steammessages_5finventory_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CInventory_ConsumePlaytime_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CInventory_ConsumePlaytime_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&itemdefid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&appid_) -
        reinterpret_cast<char*>(&itemdefid_)) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CInventory_ConsumePlaytime_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CInventory_ConsumePlaytime_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 itemdefid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_itemdefid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CInventory_ConsumePlaytime_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CInventory_ConsumePlaytime_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 itemdefid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_itemdefid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemdefid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CInventory_ConsumePlaytime_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CInventory_ConsumePlaytime_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CInventory_ConsumePlaytime_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CInventory_ConsumePlaytime_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint64 itemdefid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->itemdefid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CInventory_ConsumePlaytime_Request)
}

::google::protobuf::uint8* CInventory_ConsumePlaytime_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CInventory_ConsumePlaytime_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint64 itemdefid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->itemdefid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CInventory_ConsumePlaytime_Request)
  return target;
}

size_t CInventory_ConsumePlaytime_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CInventory_ConsumePlaytime_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 itemdefid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->itemdefid());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CInventory_ConsumePlaytime_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CInventory_ConsumePlaytime_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CInventory_ConsumePlaytime_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CInventory_ConsumePlaytime_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CInventory_ConsumePlaytime_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CInventory_ConsumePlaytime_Request)
    MergeFrom(*source);
  }
}

void CInventory_ConsumePlaytime_Request::MergeFrom(const CInventory_ConsumePlaytime_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CInventory_ConsumePlaytime_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      itemdefid_ = from.itemdefid_;
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CInventory_ConsumePlaytime_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CInventory_ConsumePlaytime_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CInventory_ConsumePlaytime_Request::CopyFrom(const CInventory_ConsumePlaytime_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CInventory_ConsumePlaytime_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CInventory_ConsumePlaytime_Request::IsInitialized() const {
  return true;
}

void CInventory_ConsumePlaytime_Request::Swap(CInventory_ConsumePlaytime_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CInventory_ConsumePlaytime_Request::InternalSwap(CInventory_ConsumePlaytime_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(itemdefid_, other->itemdefid_);
  swap(appid_, other->appid_);
}

::google::protobuf::Metadata CInventory_ConsumePlaytime_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5finventory_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5finventory_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CInventory_ConsumeItem_Request::InitAsDefaultInstance() {
}
class CInventory_ConsumeItem_Request::HasBitSetters {
 public:
  static void set_has_appid(CInventory_ConsumeItem_Request* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_itemid(CInventory_ConsumeItem_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_quantity(CInventory_ConsumeItem_Request* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_timestamp(CInventory_ConsumeItem_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_steamid(CInventory_ConsumeItem_Request* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_requestid(CInventory_ConsumeItem_Request* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CInventory_ConsumeItem_Request::kAppidFieldNumber;
const int CInventory_ConsumeItem_Request::kItemidFieldNumber;
const int CInventory_ConsumeItem_Request::kQuantityFieldNumber;
const int CInventory_ConsumeItem_Request::kTimestampFieldNumber;
const int CInventory_ConsumeItem_Request::kSteamidFieldNumber;
const int CInventory_ConsumeItem_Request::kRequestidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CInventory_ConsumeItem_Request::CInventory_ConsumeItem_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CInventory_ConsumeItem_Request)
}
CInventory_ConsumeItem_Request::CInventory_ConsumeItem_Request(const CInventory_ConsumeItem_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_timestamp()) {
    timestamp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_);
  }
  ::memcpy(&itemid_, &from.itemid_,
    static_cast<size_t>(reinterpret_cast<char*>(&requestid_) -
    reinterpret_cast<char*>(&itemid_)) + sizeof(requestid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CInventory_ConsumeItem_Request)
}

void CInventory_ConsumeItem_Request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CInventory_ConsumeItem_Request_steammessages_5finventory_2esteamclient_2eproto.base);
  timestamp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&itemid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&requestid_) -
      reinterpret_cast<char*>(&itemid_)) + sizeof(requestid_));
}

CInventory_ConsumeItem_Request::~CInventory_ConsumeItem_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CInventory_ConsumeItem_Request)
  SharedDtor();
}

void CInventory_ConsumeItem_Request::SharedDtor() {
  timestamp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CInventory_ConsumeItem_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CInventory_ConsumeItem_Request& CInventory_ConsumeItem_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CInventory_ConsumeItem_Request_steammessages_5finventory_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CInventory_ConsumeItem_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CInventory_ConsumeItem_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    timestamp_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&itemid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&requestid_) -
        reinterpret_cast<char*>(&itemid_)) + sizeof(requestid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CInventory_ConsumeItem_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CInventory_ConsumeItem_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 itemid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_itemid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 quantity = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_quantity(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string timestamp = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CInventory_ConsumeItem_Request.timestamp");
        object = msg->mutable_timestamp();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint64 steamid = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_steamid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 requestid = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_requestid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CInventory_ConsumeItem_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CInventory_ConsumeItem_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 itemid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_itemid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 quantity = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_quantity(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string timestamp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->timestamp().data(), static_cast<int>(this->timestamp().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CInventory_ConsumeItem_Request.timestamp");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 steamid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 requestid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_requestid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CInventory_ConsumeItem_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CInventory_ConsumeItem_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CInventory_ConsumeItem_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CInventory_ConsumeItem_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint64 itemid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->itemid(), output);
  }

  // optional uint32 quantity = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->quantity(), output);
  }

  // optional string timestamp = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timestamp().data(), static_cast<int>(this->timestamp().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CInventory_ConsumeItem_Request.timestamp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->timestamp(), output);
  }

  // optional uint64 steamid = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->steamid(), output);
  }

  // optional uint64 requestid = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->requestid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CInventory_ConsumeItem_Request)
}

::google::protobuf::uint8* CInventory_ConsumeItem_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CInventory_ConsumeItem_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint64 itemid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->itemid(), target);
  }

  // optional uint32 quantity = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->quantity(), target);
  }

  // optional string timestamp = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timestamp().data(), static_cast<int>(this->timestamp().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CInventory_ConsumeItem_Request.timestamp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->timestamp(), target);
  }

  // optional uint64 steamid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->steamid(), target);
  }

  // optional uint64 requestid = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->requestid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CInventory_ConsumeItem_Request)
  return target;
}

size_t CInventory_ConsumeItem_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CInventory_ConsumeItem_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string timestamp = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }

    // optional uint64 itemid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->itemid());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional uint32 quantity = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quantity());
    }

    // optional uint64 steamid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->steamid());
    }

    // optional uint64 requestid = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->requestid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CInventory_ConsumeItem_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CInventory_ConsumeItem_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CInventory_ConsumeItem_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CInventory_ConsumeItem_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CInventory_ConsumeItem_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CInventory_ConsumeItem_Request)
    MergeFrom(*source);
  }
}

void CInventory_ConsumeItem_Request::MergeFrom(const CInventory_ConsumeItem_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CInventory_ConsumeItem_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      timestamp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_);
    }
    if (cached_has_bits & 0x00000002u) {
      itemid_ = from.itemid_;
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000008u) {
      quantity_ = from.quantity_;
    }
    if (cached_has_bits & 0x00000010u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000020u) {
      requestid_ = from.requestid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CInventory_ConsumeItem_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CInventory_ConsumeItem_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CInventory_ConsumeItem_Request::CopyFrom(const CInventory_ConsumeItem_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CInventory_ConsumeItem_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CInventory_ConsumeItem_Request::IsInitialized() const {
  return true;
}

void CInventory_ConsumeItem_Request::Swap(CInventory_ConsumeItem_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CInventory_ConsumeItem_Request::InternalSwap(CInventory_ConsumeItem_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  timestamp_.Swap(&other->timestamp_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(itemid_, other->itemid_);
  swap(appid_, other->appid_);
  swap(quantity_, other->quantity_);
  swap(steamid_, other->steamid_);
  swap(requestid_, other->requestid_);
}

::google::protobuf::Metadata CInventory_ConsumeItem_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5finventory_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5finventory_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CInventory_DevSetNextDrop_Request::InitAsDefaultInstance() {
}
class CInventory_DevSetNextDrop_Request::HasBitSetters {
 public:
  static void set_has_appid(CInventory_DevSetNextDrop_Request* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_itemdefid(CInventory_DevSetNextDrop_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_droptime(CInventory_DevSetNextDrop_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CInventory_DevSetNextDrop_Request::kAppidFieldNumber;
const int CInventory_DevSetNextDrop_Request::kItemdefidFieldNumber;
const int CInventory_DevSetNextDrop_Request::kDroptimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CInventory_DevSetNextDrop_Request::CInventory_DevSetNextDrop_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CInventory_DevSetNextDrop_Request)
}
CInventory_DevSetNextDrop_Request::CInventory_DevSetNextDrop_Request(const CInventory_DevSetNextDrop_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  droptime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_droptime()) {
    droptime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.droptime_);
  }
  ::memcpy(&itemdefid_, &from.itemdefid_,
    static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&itemdefid_)) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CInventory_DevSetNextDrop_Request)
}

void CInventory_DevSetNextDrop_Request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CInventory_DevSetNextDrop_Request_steammessages_5finventory_2esteamclient_2eproto.base);
  droptime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&itemdefid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&appid_) -
      reinterpret_cast<char*>(&itemdefid_)) + sizeof(appid_));
}

CInventory_DevSetNextDrop_Request::~CInventory_DevSetNextDrop_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CInventory_DevSetNextDrop_Request)
  SharedDtor();
}

void CInventory_DevSetNextDrop_Request::SharedDtor() {
  droptime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CInventory_DevSetNextDrop_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CInventory_DevSetNextDrop_Request& CInventory_DevSetNextDrop_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CInventory_DevSetNextDrop_Request_steammessages_5finventory_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CInventory_DevSetNextDrop_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CInventory_DevSetNextDrop_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    droptime_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&itemdefid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&appid_) -
        reinterpret_cast<char*>(&itemdefid_)) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CInventory_DevSetNextDrop_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CInventory_DevSetNextDrop_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 itemdefid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_itemdefid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string droptime = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CInventory_DevSetNextDrop_Request.droptime");
        object = msg->mutable_droptime();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CInventory_DevSetNextDrop_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CInventory_DevSetNextDrop_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 itemdefid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_itemdefid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemdefid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string droptime = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_droptime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->droptime().data(), static_cast<int>(this->droptime().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CInventory_DevSetNextDrop_Request.droptime");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CInventory_DevSetNextDrop_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CInventory_DevSetNextDrop_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CInventory_DevSetNextDrop_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CInventory_DevSetNextDrop_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint64 itemdefid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->itemdefid(), output);
  }

  // optional string droptime = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->droptime().data(), static_cast<int>(this->droptime().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CInventory_DevSetNextDrop_Request.droptime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->droptime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CInventory_DevSetNextDrop_Request)
}

::google::protobuf::uint8* CInventory_DevSetNextDrop_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CInventory_DevSetNextDrop_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint64 itemdefid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->itemdefid(), target);
  }

  // optional string droptime = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->droptime().data(), static_cast<int>(this->droptime().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CInventory_DevSetNextDrop_Request.droptime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->droptime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CInventory_DevSetNextDrop_Request)
  return target;
}

size_t CInventory_DevSetNextDrop_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CInventory_DevSetNextDrop_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string droptime = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->droptime());
    }

    // optional uint64 itemdefid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->itemdefid());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CInventory_DevSetNextDrop_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CInventory_DevSetNextDrop_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CInventory_DevSetNextDrop_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CInventory_DevSetNextDrop_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CInventory_DevSetNextDrop_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CInventory_DevSetNextDrop_Request)
    MergeFrom(*source);
  }
}

void CInventory_DevSetNextDrop_Request::MergeFrom(const CInventory_DevSetNextDrop_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CInventory_DevSetNextDrop_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      droptime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.droptime_);
    }
    if (cached_has_bits & 0x00000002u) {
      itemdefid_ = from.itemdefid_;
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CInventory_DevSetNextDrop_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CInventory_DevSetNextDrop_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CInventory_DevSetNextDrop_Request::CopyFrom(const CInventory_DevSetNextDrop_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CInventory_DevSetNextDrop_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CInventory_DevSetNextDrop_Request::IsInitialized() const {
  return true;
}

void CInventory_DevSetNextDrop_Request::Swap(CInventory_DevSetNextDrop_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CInventory_DevSetNextDrop_Request::InternalSwap(CInventory_DevSetNextDrop_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  droptime_.Swap(&other->droptime_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(itemdefid_, other->itemdefid_);
  swap(appid_, other->appid_);
}

::google::protobuf::Metadata CInventory_DevSetNextDrop_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5finventory_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5finventory_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CInventory_SplitItemStack_Request::InitAsDefaultInstance() {
}
class CInventory_SplitItemStack_Request::HasBitSetters {
 public:
  static void set_has_appid(CInventory_SplitItemStack_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_itemid(CInventory_SplitItemStack_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_quantity(CInventory_SplitItemStack_Request* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CInventory_SplitItemStack_Request::kAppidFieldNumber;
const int CInventory_SplitItemStack_Request::kItemidFieldNumber;
const int CInventory_SplitItemStack_Request::kQuantityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CInventory_SplitItemStack_Request::CInventory_SplitItemStack_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CInventory_SplitItemStack_Request)
}
CInventory_SplitItemStack_Request::CInventory_SplitItemStack_Request(const CInventory_SplitItemStack_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&itemid_, &from.itemid_,
    static_cast<size_t>(reinterpret_cast<char*>(&quantity_) -
    reinterpret_cast<char*>(&itemid_)) + sizeof(quantity_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CInventory_SplitItemStack_Request)
}

void CInventory_SplitItemStack_Request::SharedCtor() {
  ::memset(&itemid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&quantity_) -
      reinterpret_cast<char*>(&itemid_)) + sizeof(quantity_));
}

CInventory_SplitItemStack_Request::~CInventory_SplitItemStack_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CInventory_SplitItemStack_Request)
  SharedDtor();
}

void CInventory_SplitItemStack_Request::SharedDtor() {
}

void CInventory_SplitItemStack_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CInventory_SplitItemStack_Request& CInventory_SplitItemStack_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CInventory_SplitItemStack_Request_steammessages_5finventory_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CInventory_SplitItemStack_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CInventory_SplitItemStack_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&itemid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&quantity_) -
        reinterpret_cast<char*>(&itemid_)) + sizeof(quantity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CInventory_SplitItemStack_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CInventory_SplitItemStack_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 itemid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_itemid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 quantity = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_quantity(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CInventory_SplitItemStack_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CInventory_SplitItemStack_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 itemid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_itemid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 quantity = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_quantity(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CInventory_SplitItemStack_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CInventory_SplitItemStack_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CInventory_SplitItemStack_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CInventory_SplitItemStack_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint64 itemid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->itemid(), output);
  }

  // optional uint32 quantity = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->quantity(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CInventory_SplitItemStack_Request)
}

::google::protobuf::uint8* CInventory_SplitItemStack_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CInventory_SplitItemStack_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint64 itemid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->itemid(), target);
  }

  // optional uint32 quantity = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->quantity(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CInventory_SplitItemStack_Request)
  return target;
}

size_t CInventory_SplitItemStack_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CInventory_SplitItemStack_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 itemid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->itemid());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional uint32 quantity = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quantity());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CInventory_SplitItemStack_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CInventory_SplitItemStack_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CInventory_SplitItemStack_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CInventory_SplitItemStack_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CInventory_SplitItemStack_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CInventory_SplitItemStack_Request)
    MergeFrom(*source);
  }
}

void CInventory_SplitItemStack_Request::MergeFrom(const CInventory_SplitItemStack_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CInventory_SplitItemStack_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      itemid_ = from.itemid_;
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000004u) {
      quantity_ = from.quantity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CInventory_SplitItemStack_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CInventory_SplitItemStack_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CInventory_SplitItemStack_Request::CopyFrom(const CInventory_SplitItemStack_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CInventory_SplitItemStack_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CInventory_SplitItemStack_Request::IsInitialized() const {
  return true;
}

void CInventory_SplitItemStack_Request::Swap(CInventory_SplitItemStack_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CInventory_SplitItemStack_Request::InternalSwap(CInventory_SplitItemStack_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(itemid_, other->itemid_);
  swap(appid_, other->appid_);
  swap(quantity_, other->quantity_);
}

::google::protobuf::Metadata CInventory_SplitItemStack_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5finventory_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5finventory_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CInventory_CombineItemStacks_Request::InitAsDefaultInstance() {
}
class CInventory_CombineItemStacks_Request::HasBitSetters {
 public:
  static void set_has_appid(CInventory_CombineItemStacks_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_fromitemid(CInventory_CombineItemStacks_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_destitemid(CInventory_CombineItemStacks_Request* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_quantity(CInventory_CombineItemStacks_Request* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CInventory_CombineItemStacks_Request::kAppidFieldNumber;
const int CInventory_CombineItemStacks_Request::kFromitemidFieldNumber;
const int CInventory_CombineItemStacks_Request::kDestitemidFieldNumber;
const int CInventory_CombineItemStacks_Request::kQuantityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CInventory_CombineItemStacks_Request::CInventory_CombineItemStacks_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CInventory_CombineItemStacks_Request)
}
CInventory_CombineItemStacks_Request::CInventory_CombineItemStacks_Request(const CInventory_CombineItemStacks_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fromitemid_, &from.fromitemid_,
    static_cast<size_t>(reinterpret_cast<char*>(&destitemid_) -
    reinterpret_cast<char*>(&fromitemid_)) + sizeof(destitemid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CInventory_CombineItemStacks_Request)
}

void CInventory_CombineItemStacks_Request::SharedCtor() {
  ::memset(&fromitemid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&destitemid_) -
      reinterpret_cast<char*>(&fromitemid_)) + sizeof(destitemid_));
}

CInventory_CombineItemStacks_Request::~CInventory_CombineItemStacks_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CInventory_CombineItemStacks_Request)
  SharedDtor();
}

void CInventory_CombineItemStacks_Request::SharedDtor() {
}

void CInventory_CombineItemStacks_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CInventory_CombineItemStacks_Request& CInventory_CombineItemStacks_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CInventory_CombineItemStacks_Request_steammessages_5finventory_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CInventory_CombineItemStacks_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CInventory_CombineItemStacks_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&fromitemid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&destitemid_) -
        reinterpret_cast<char*>(&fromitemid_)) + sizeof(destitemid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CInventory_CombineItemStacks_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CInventory_CombineItemStacks_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 fromitemid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_fromitemid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 destitemid = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_destitemid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 quantity = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_quantity(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CInventory_CombineItemStacks_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CInventory_CombineItemStacks_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 fromitemid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_fromitemid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fromitemid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 destitemid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_destitemid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &destitemid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 quantity = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_quantity(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CInventory_CombineItemStacks_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CInventory_CombineItemStacks_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CInventory_CombineItemStacks_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CInventory_CombineItemStacks_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint64 fromitemid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->fromitemid(), output);
  }

  // optional uint64 destitemid = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->destitemid(), output);
  }

  // optional uint32 quantity = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->quantity(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CInventory_CombineItemStacks_Request)
}

::google::protobuf::uint8* CInventory_CombineItemStacks_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CInventory_CombineItemStacks_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint64 fromitemid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->fromitemid(), target);
  }

  // optional uint64 destitemid = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->destitemid(), target);
  }

  // optional uint32 quantity = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->quantity(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CInventory_CombineItemStacks_Request)
  return target;
}

size_t CInventory_CombineItemStacks_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CInventory_CombineItemStacks_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 fromitemid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fromitemid());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional uint32 quantity = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quantity());
    }

    // optional uint64 destitemid = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->destitemid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CInventory_CombineItemStacks_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CInventory_CombineItemStacks_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CInventory_CombineItemStacks_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CInventory_CombineItemStacks_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CInventory_CombineItemStacks_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CInventory_CombineItemStacks_Request)
    MergeFrom(*source);
  }
}

void CInventory_CombineItemStacks_Request::MergeFrom(const CInventory_CombineItemStacks_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CInventory_CombineItemStacks_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      fromitemid_ = from.fromitemid_;
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000004u) {
      quantity_ = from.quantity_;
    }
    if (cached_has_bits & 0x00000008u) {
      destitemid_ = from.destitemid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CInventory_CombineItemStacks_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CInventory_CombineItemStacks_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CInventory_CombineItemStacks_Request::CopyFrom(const CInventory_CombineItemStacks_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CInventory_CombineItemStacks_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CInventory_CombineItemStacks_Request::IsInitialized() const {
  return true;
}

void CInventory_CombineItemStacks_Request::Swap(CInventory_CombineItemStacks_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CInventory_CombineItemStacks_Request::InternalSwap(CInventory_CombineItemStacks_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(fromitemid_, other->fromitemid_);
  swap(appid_, other->appid_);
  swap(quantity_, other->quantity_);
  swap(destitemid_, other->destitemid_);
}

::google::protobuf::Metadata CInventory_CombineItemStacks_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5finventory_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5finventory_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CInventory_GetItemDefMeta_Request::InitAsDefaultInstance() {
}
class CInventory_GetItemDefMeta_Request::HasBitSetters {
 public:
  static void set_has_appid(CInventory_GetItemDefMeta_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CInventory_GetItemDefMeta_Request::kAppidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CInventory_GetItemDefMeta_Request::CInventory_GetItemDefMeta_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CInventory_GetItemDefMeta_Request)
}
CInventory_GetItemDefMeta_Request::CInventory_GetItemDefMeta_Request(const CInventory_GetItemDefMeta_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CInventory_GetItemDefMeta_Request)
}

void CInventory_GetItemDefMeta_Request::SharedCtor() {
  appid_ = 0u;
}

CInventory_GetItemDefMeta_Request::~CInventory_GetItemDefMeta_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CInventory_GetItemDefMeta_Request)
  SharedDtor();
}

void CInventory_GetItemDefMeta_Request::SharedDtor() {
}

void CInventory_GetItemDefMeta_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CInventory_GetItemDefMeta_Request& CInventory_GetItemDefMeta_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CInventory_GetItemDefMeta_Request_steammessages_5finventory_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CInventory_GetItemDefMeta_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CInventory_GetItemDefMeta_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CInventory_GetItemDefMeta_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CInventory_GetItemDefMeta_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CInventory_GetItemDefMeta_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CInventory_GetItemDefMeta_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CInventory_GetItemDefMeta_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CInventory_GetItemDefMeta_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CInventory_GetItemDefMeta_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CInventory_GetItemDefMeta_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CInventory_GetItemDefMeta_Request)
}

::google::protobuf::uint8* CInventory_GetItemDefMeta_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CInventory_GetItemDefMeta_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CInventory_GetItemDefMeta_Request)
  return target;
}

size_t CInventory_GetItemDefMeta_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CInventory_GetItemDefMeta_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 appid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->appid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CInventory_GetItemDefMeta_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CInventory_GetItemDefMeta_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CInventory_GetItemDefMeta_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CInventory_GetItemDefMeta_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CInventory_GetItemDefMeta_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CInventory_GetItemDefMeta_Request)
    MergeFrom(*source);
  }
}

void CInventory_GetItemDefMeta_Request::MergeFrom(const CInventory_GetItemDefMeta_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CInventory_GetItemDefMeta_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_appid()) {
    set_appid(from.appid());
  }
}

void CInventory_GetItemDefMeta_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CInventory_GetItemDefMeta_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CInventory_GetItemDefMeta_Request::CopyFrom(const CInventory_GetItemDefMeta_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CInventory_GetItemDefMeta_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CInventory_GetItemDefMeta_Request::IsInitialized() const {
  return true;
}

void CInventory_GetItemDefMeta_Request::Swap(CInventory_GetItemDefMeta_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CInventory_GetItemDefMeta_Request::InternalSwap(CInventory_GetItemDefMeta_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(appid_, other->appid_);
}

::google::protobuf::Metadata CInventory_GetItemDefMeta_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5finventory_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5finventory_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CInventory_GetItemDefMeta_Response::InitAsDefaultInstance() {
}
class CInventory_GetItemDefMeta_Response::HasBitSetters {
 public:
  static void set_has_modified(CInventory_GetItemDefMeta_Response* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_digest(CInventory_GetItemDefMeta_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CInventory_GetItemDefMeta_Response::kModifiedFieldNumber;
const int CInventory_GetItemDefMeta_Response::kDigestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CInventory_GetItemDefMeta_Response::CInventory_GetItemDefMeta_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CInventory_GetItemDefMeta_Response)
}
CInventory_GetItemDefMeta_Response::CInventory_GetItemDefMeta_Response(const CInventory_GetItemDefMeta_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  digest_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_digest()) {
    digest_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.digest_);
  }
  modified_ = from.modified_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CInventory_GetItemDefMeta_Response)
}

void CInventory_GetItemDefMeta_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CInventory_GetItemDefMeta_Response_steammessages_5finventory_2esteamclient_2eproto.base);
  digest_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modified_ = 0u;
}

CInventory_GetItemDefMeta_Response::~CInventory_GetItemDefMeta_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CInventory_GetItemDefMeta_Response)
  SharedDtor();
}

void CInventory_GetItemDefMeta_Response::SharedDtor() {
  digest_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CInventory_GetItemDefMeta_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CInventory_GetItemDefMeta_Response& CInventory_GetItemDefMeta_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CInventory_GetItemDefMeta_Response_steammessages_5finventory_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CInventory_GetItemDefMeta_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CInventory_GetItemDefMeta_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    digest_.ClearNonDefaultToEmptyNoArena();
  }
  modified_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CInventory_GetItemDefMeta_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CInventory_GetItemDefMeta_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 modified = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_modified(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string digest = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CInventory_GetItemDefMeta_Response.digest");
        object = msg->mutable_digest();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CInventory_GetItemDefMeta_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CInventory_GetItemDefMeta_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 modified = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_modified(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &modified_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string digest = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_digest()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->digest().data(), static_cast<int>(this->digest().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CInventory_GetItemDefMeta_Response.digest");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CInventory_GetItemDefMeta_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CInventory_GetItemDefMeta_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CInventory_GetItemDefMeta_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CInventory_GetItemDefMeta_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 modified = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->modified(), output);
  }

  // optional string digest = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->digest().data(), static_cast<int>(this->digest().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CInventory_GetItemDefMeta_Response.digest");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->digest(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CInventory_GetItemDefMeta_Response)
}

::google::protobuf::uint8* CInventory_GetItemDefMeta_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CInventory_GetItemDefMeta_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 modified = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->modified(), target);
  }

  // optional string digest = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->digest().data(), static_cast<int>(this->digest().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CInventory_GetItemDefMeta_Response.digest");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->digest(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CInventory_GetItemDefMeta_Response)
  return target;
}

size_t CInventory_GetItemDefMeta_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CInventory_GetItemDefMeta_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string digest = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->digest());
    }

    // optional uint32 modified = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->modified());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CInventory_GetItemDefMeta_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CInventory_GetItemDefMeta_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CInventory_GetItemDefMeta_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CInventory_GetItemDefMeta_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CInventory_GetItemDefMeta_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CInventory_GetItemDefMeta_Response)
    MergeFrom(*source);
  }
}

void CInventory_GetItemDefMeta_Response::MergeFrom(const CInventory_GetItemDefMeta_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CInventory_GetItemDefMeta_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      digest_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.digest_);
    }
    if (cached_has_bits & 0x00000002u) {
      modified_ = from.modified_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CInventory_GetItemDefMeta_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CInventory_GetItemDefMeta_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CInventory_GetItemDefMeta_Response::CopyFrom(const CInventory_GetItemDefMeta_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CInventory_GetItemDefMeta_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CInventory_GetItemDefMeta_Response::IsInitialized() const {
  return true;
}

void CInventory_GetItemDefMeta_Response::Swap(CInventory_GetItemDefMeta_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CInventory_GetItemDefMeta_Response::InternalSwap(CInventory_GetItemDefMeta_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  digest_.Swap(&other->digest_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(modified_, other->modified_);
}

::google::protobuf::Metadata CInventory_GetItemDefMeta_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5finventory_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5finventory_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CInventory_GetUserPurchaseInfo_Request::InitAsDefaultInstance() {
}
class CInventory_GetUserPurchaseInfo_Request::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CInventory_GetUserPurchaseInfo_Request::CInventory_GetUserPurchaseInfo_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CInventory_GetUserPurchaseInfo_Request)
}
CInventory_GetUserPurchaseInfo_Request::CInventory_GetUserPurchaseInfo_Request(const CInventory_GetUserPurchaseInfo_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CInventory_GetUserPurchaseInfo_Request)
}

void CInventory_GetUserPurchaseInfo_Request::SharedCtor() {
}

CInventory_GetUserPurchaseInfo_Request::~CInventory_GetUserPurchaseInfo_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CInventory_GetUserPurchaseInfo_Request)
  SharedDtor();
}

void CInventory_GetUserPurchaseInfo_Request::SharedDtor() {
}

void CInventory_GetUserPurchaseInfo_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CInventory_GetUserPurchaseInfo_Request& CInventory_GetUserPurchaseInfo_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CInventory_GetUserPurchaseInfo_Request_steammessages_5finventory_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CInventory_GetUserPurchaseInfo_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CInventory_GetUserPurchaseInfo_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CInventory_GetUserPurchaseInfo_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CInventory_GetUserPurchaseInfo_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CInventory_GetUserPurchaseInfo_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CInventory_GetUserPurchaseInfo_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CInventory_GetUserPurchaseInfo_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CInventory_GetUserPurchaseInfo_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CInventory_GetUserPurchaseInfo_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CInventory_GetUserPurchaseInfo_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CInventory_GetUserPurchaseInfo_Request)
}

::google::protobuf::uint8* CInventory_GetUserPurchaseInfo_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CInventory_GetUserPurchaseInfo_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CInventory_GetUserPurchaseInfo_Request)
  return target;
}

size_t CInventory_GetUserPurchaseInfo_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CInventory_GetUserPurchaseInfo_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CInventory_GetUserPurchaseInfo_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CInventory_GetUserPurchaseInfo_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CInventory_GetUserPurchaseInfo_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CInventory_GetUserPurchaseInfo_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CInventory_GetUserPurchaseInfo_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CInventory_GetUserPurchaseInfo_Request)
    MergeFrom(*source);
  }
}

void CInventory_GetUserPurchaseInfo_Request::MergeFrom(const CInventory_GetUserPurchaseInfo_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CInventory_GetUserPurchaseInfo_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CInventory_GetUserPurchaseInfo_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CInventory_GetUserPurchaseInfo_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CInventory_GetUserPurchaseInfo_Request::CopyFrom(const CInventory_GetUserPurchaseInfo_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CInventory_GetUserPurchaseInfo_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CInventory_GetUserPurchaseInfo_Request::IsInitialized() const {
  return true;
}

void CInventory_GetUserPurchaseInfo_Request::Swap(CInventory_GetUserPurchaseInfo_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CInventory_GetUserPurchaseInfo_Request::InternalSwap(CInventory_GetUserPurchaseInfo_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CInventory_GetUserPurchaseInfo_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5finventory_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5finventory_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CInventory_GetUserPurchaseInfo_Response::InitAsDefaultInstance() {
}
class CInventory_GetUserPurchaseInfo_Response::HasBitSetters {
 public:
  static void set_has_ecurrency(CInventory_GetUserPurchaseInfo_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CInventory_GetUserPurchaseInfo_Response::kEcurrencyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CInventory_GetUserPurchaseInfo_Response::CInventory_GetUserPurchaseInfo_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CInventory_GetUserPurchaseInfo_Response)
}
CInventory_GetUserPurchaseInfo_Response::CInventory_GetUserPurchaseInfo_Response(const CInventory_GetUserPurchaseInfo_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ecurrency_ = from.ecurrency_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CInventory_GetUserPurchaseInfo_Response)
}

void CInventory_GetUserPurchaseInfo_Response::SharedCtor() {
  ecurrency_ = 0;
}

CInventory_GetUserPurchaseInfo_Response::~CInventory_GetUserPurchaseInfo_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CInventory_GetUserPurchaseInfo_Response)
  SharedDtor();
}

void CInventory_GetUserPurchaseInfo_Response::SharedDtor() {
}

void CInventory_GetUserPurchaseInfo_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CInventory_GetUserPurchaseInfo_Response& CInventory_GetUserPurchaseInfo_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CInventory_GetUserPurchaseInfo_Response_steammessages_5finventory_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CInventory_GetUserPurchaseInfo_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CInventory_GetUserPurchaseInfo_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ecurrency_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CInventory_GetUserPurchaseInfo_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CInventory_GetUserPurchaseInfo_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 ecurrency = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_ecurrency(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CInventory_GetUserPurchaseInfo_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CInventory_GetUserPurchaseInfo_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ecurrency = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_ecurrency(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ecurrency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CInventory_GetUserPurchaseInfo_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CInventory_GetUserPurchaseInfo_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CInventory_GetUserPurchaseInfo_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CInventory_GetUserPurchaseInfo_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ecurrency = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ecurrency(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CInventory_GetUserPurchaseInfo_Response)
}

::google::protobuf::uint8* CInventory_GetUserPurchaseInfo_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CInventory_GetUserPurchaseInfo_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ecurrency = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ecurrency(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CInventory_GetUserPurchaseInfo_Response)
  return target;
}

size_t CInventory_GetUserPurchaseInfo_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CInventory_GetUserPurchaseInfo_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 ecurrency = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ecurrency());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CInventory_GetUserPurchaseInfo_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CInventory_GetUserPurchaseInfo_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CInventory_GetUserPurchaseInfo_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CInventory_GetUserPurchaseInfo_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CInventory_GetUserPurchaseInfo_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CInventory_GetUserPurchaseInfo_Response)
    MergeFrom(*source);
  }
}

void CInventory_GetUserPurchaseInfo_Response::MergeFrom(const CInventory_GetUserPurchaseInfo_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CInventory_GetUserPurchaseInfo_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ecurrency()) {
    set_ecurrency(from.ecurrency());
  }
}

void CInventory_GetUserPurchaseInfo_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CInventory_GetUserPurchaseInfo_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CInventory_GetUserPurchaseInfo_Response::CopyFrom(const CInventory_GetUserPurchaseInfo_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CInventory_GetUserPurchaseInfo_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CInventory_GetUserPurchaseInfo_Response::IsInitialized() const {
  return true;
}

void CInventory_GetUserPurchaseInfo_Response::Swap(CInventory_GetUserPurchaseInfo_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CInventory_GetUserPurchaseInfo_Response::InternalSwap(CInventory_GetUserPurchaseInfo_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ecurrency_, other->ecurrency_);
}

::google::protobuf::Metadata CInventory_GetUserPurchaseInfo_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5finventory_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5finventory_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CInventory_PurchaseInit_Request_LineItem::InitAsDefaultInstance() {
}
class CInventory_PurchaseInit_Request_LineItem::HasBitSetters {
 public:
  static void set_has_itemdefid(CInventory_PurchaseInit_Request_LineItem* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_quantity(CInventory_PurchaseInit_Request_LineItem* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CInventory_PurchaseInit_Request_LineItem::kItemdefidFieldNumber;
const int CInventory_PurchaseInit_Request_LineItem::kQuantityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CInventory_PurchaseInit_Request_LineItem::CInventory_PurchaseInit_Request_LineItem()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CInventory_PurchaseInit_Request.LineItem)
}
CInventory_PurchaseInit_Request_LineItem::CInventory_PurchaseInit_Request_LineItem(const CInventory_PurchaseInit_Request_LineItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&itemdefid_, &from.itemdefid_,
    static_cast<size_t>(reinterpret_cast<char*>(&quantity_) -
    reinterpret_cast<char*>(&itemdefid_)) + sizeof(quantity_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CInventory_PurchaseInit_Request.LineItem)
}

void CInventory_PurchaseInit_Request_LineItem::SharedCtor() {
  ::memset(&itemdefid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&quantity_) -
      reinterpret_cast<char*>(&itemdefid_)) + sizeof(quantity_));
}

CInventory_PurchaseInit_Request_LineItem::~CInventory_PurchaseInit_Request_LineItem() {
  // @@protoc_insertion_point(destructor:proto.steam.CInventory_PurchaseInit_Request.LineItem)
  SharedDtor();
}

void CInventory_PurchaseInit_Request_LineItem::SharedDtor() {
}

void CInventory_PurchaseInit_Request_LineItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CInventory_PurchaseInit_Request_LineItem& CInventory_PurchaseInit_Request_LineItem::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CInventory_PurchaseInit_Request_LineItem_steammessages_5finventory_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CInventory_PurchaseInit_Request_LineItem::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CInventory_PurchaseInit_Request.LineItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&itemdefid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&quantity_) -
        reinterpret_cast<char*>(&itemdefid_)) + sizeof(quantity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CInventory_PurchaseInit_Request_LineItem::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CInventory_PurchaseInit_Request_LineItem*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 itemdefid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_itemdefid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 quantity = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_quantity(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CInventory_PurchaseInit_Request_LineItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CInventory_PurchaseInit_Request.LineItem)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 itemdefid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_itemdefid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemdefid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 quantity = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_quantity(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CInventory_PurchaseInit_Request.LineItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CInventory_PurchaseInit_Request.LineItem)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CInventory_PurchaseInit_Request_LineItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CInventory_PurchaseInit_Request.LineItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 itemdefid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->itemdefid(), output);
  }

  // optional uint32 quantity = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->quantity(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CInventory_PurchaseInit_Request.LineItem)
}

::google::protobuf::uint8* CInventory_PurchaseInit_Request_LineItem::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CInventory_PurchaseInit_Request.LineItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 itemdefid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->itemdefid(), target);
  }

  // optional uint32 quantity = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->quantity(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CInventory_PurchaseInit_Request.LineItem)
  return target;
}

size_t CInventory_PurchaseInit_Request_LineItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CInventory_PurchaseInit_Request.LineItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 itemdefid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->itemdefid());
    }

    // optional uint32 quantity = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quantity());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CInventory_PurchaseInit_Request_LineItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CInventory_PurchaseInit_Request.LineItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CInventory_PurchaseInit_Request_LineItem* source =
      ::google::protobuf::DynamicCastToGenerated<CInventory_PurchaseInit_Request_LineItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CInventory_PurchaseInit_Request.LineItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CInventory_PurchaseInit_Request.LineItem)
    MergeFrom(*source);
  }
}

void CInventory_PurchaseInit_Request_LineItem::MergeFrom(const CInventory_PurchaseInit_Request_LineItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CInventory_PurchaseInit_Request.LineItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      itemdefid_ = from.itemdefid_;
    }
    if (cached_has_bits & 0x00000002u) {
      quantity_ = from.quantity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CInventory_PurchaseInit_Request_LineItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CInventory_PurchaseInit_Request.LineItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CInventory_PurchaseInit_Request_LineItem::CopyFrom(const CInventory_PurchaseInit_Request_LineItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CInventory_PurchaseInit_Request.LineItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CInventory_PurchaseInit_Request_LineItem::IsInitialized() const {
  return true;
}

void CInventory_PurchaseInit_Request_LineItem::Swap(CInventory_PurchaseInit_Request_LineItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CInventory_PurchaseInit_Request_LineItem::InternalSwap(CInventory_PurchaseInit_Request_LineItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(itemdefid_, other->itemdefid_);
  swap(quantity_, other->quantity_);
}

::google::protobuf::Metadata CInventory_PurchaseInit_Request_LineItem::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5finventory_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5finventory_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CInventory_PurchaseInit_Request::InitAsDefaultInstance() {
}
class CInventory_PurchaseInit_Request::HasBitSetters {
 public:
  static void set_has_appid(CInventory_PurchaseInit_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_language(CInventory_PurchaseInit_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CInventory_PurchaseInit_Request::kAppidFieldNumber;
const int CInventory_PurchaseInit_Request::kLanguageFieldNumber;
const int CInventory_PurchaseInit_Request::kLineItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CInventory_PurchaseInit_Request::CInventory_PurchaseInit_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CInventory_PurchaseInit_Request)
}
CInventory_PurchaseInit_Request::CInventory_PurchaseInit_Request(const CInventory_PurchaseInit_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      line_items_(from.line_items_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&language_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(language_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CInventory_PurchaseInit_Request)
}

void CInventory_PurchaseInit_Request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CInventory_PurchaseInit_Request_steammessages_5finventory_2esteamclient_2eproto.base);
  ::memset(&appid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&language_) -
      reinterpret_cast<char*>(&appid_)) + sizeof(language_));
}

CInventory_PurchaseInit_Request::~CInventory_PurchaseInit_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CInventory_PurchaseInit_Request)
  SharedDtor();
}

void CInventory_PurchaseInit_Request::SharedDtor() {
}

void CInventory_PurchaseInit_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CInventory_PurchaseInit_Request& CInventory_PurchaseInit_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CInventory_PurchaseInit_Request_steammessages_5finventory_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CInventory_PurchaseInit_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CInventory_PurchaseInit_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  line_items_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&language_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(language_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CInventory_PurchaseInit_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CInventory_PurchaseInit_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 language = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_language(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.steam.CInventory_PurchaseInit_Request.LineItem line_items = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CInventory_PurchaseInit_Request_LineItem::_InternalParse;
          object = msg->add_line_items();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CInventory_PurchaseInit_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CInventory_PurchaseInit_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 language = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_language(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &language_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CInventory_PurchaseInit_Request.LineItem line_items = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_line_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CInventory_PurchaseInit_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CInventory_PurchaseInit_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CInventory_PurchaseInit_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CInventory_PurchaseInit_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional int32 language = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->language(), output);
  }

  // repeated .proto.steam.CInventory_PurchaseInit_Request.LineItem line_items = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->line_items_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->line_items(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CInventory_PurchaseInit_Request)
}

::google::protobuf::uint8* CInventory_PurchaseInit_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CInventory_PurchaseInit_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional int32 language = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->language(), target);
  }

  // repeated .proto.steam.CInventory_PurchaseInit_Request.LineItem line_items = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->line_items_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->line_items(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CInventory_PurchaseInit_Request)
  return target;
}

size_t CInventory_PurchaseInit_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CInventory_PurchaseInit_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CInventory_PurchaseInit_Request.LineItem line_items = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->line_items_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->line_items(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional int32 language = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->language());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CInventory_PurchaseInit_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CInventory_PurchaseInit_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CInventory_PurchaseInit_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CInventory_PurchaseInit_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CInventory_PurchaseInit_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CInventory_PurchaseInit_Request)
    MergeFrom(*source);
  }
}

void CInventory_PurchaseInit_Request::MergeFrom(const CInventory_PurchaseInit_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CInventory_PurchaseInit_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  line_items_.MergeFrom(from.line_items_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      language_ = from.language_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CInventory_PurchaseInit_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CInventory_PurchaseInit_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CInventory_PurchaseInit_Request::CopyFrom(const CInventory_PurchaseInit_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CInventory_PurchaseInit_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CInventory_PurchaseInit_Request::IsInitialized() const {
  return true;
}

void CInventory_PurchaseInit_Request::Swap(CInventory_PurchaseInit_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CInventory_PurchaseInit_Request::InternalSwap(CInventory_PurchaseInit_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&line_items_)->InternalSwap(CastToBase(&other->line_items_));
  swap(appid_, other->appid_);
  swap(language_, other->language_);
}

::google::protobuf::Metadata CInventory_PurchaseInit_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5finventory_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5finventory_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CInventory_PurchaseInit_Response::InitAsDefaultInstance() {
}
class CInventory_PurchaseInit_Response::HasBitSetters {
 public:
  static void set_has_orderid(CInventory_PurchaseInit_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_transid(CInventory_PurchaseInit_Response* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CInventory_PurchaseInit_Response::kOrderidFieldNumber;
const int CInventory_PurchaseInit_Response::kTransidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CInventory_PurchaseInit_Response::CInventory_PurchaseInit_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CInventory_PurchaseInit_Response)
}
CInventory_PurchaseInit_Response::CInventory_PurchaseInit_Response(const CInventory_PurchaseInit_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&orderid_, &from.orderid_,
    static_cast<size_t>(reinterpret_cast<char*>(&transid_) -
    reinterpret_cast<char*>(&orderid_)) + sizeof(transid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CInventory_PurchaseInit_Response)
}

void CInventory_PurchaseInit_Response::SharedCtor() {
  ::memset(&orderid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&transid_) -
      reinterpret_cast<char*>(&orderid_)) + sizeof(transid_));
}

CInventory_PurchaseInit_Response::~CInventory_PurchaseInit_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CInventory_PurchaseInit_Response)
  SharedDtor();
}

void CInventory_PurchaseInit_Response::SharedDtor() {
}

void CInventory_PurchaseInit_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CInventory_PurchaseInit_Response& CInventory_PurchaseInit_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CInventory_PurchaseInit_Response_steammessages_5finventory_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CInventory_PurchaseInit_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CInventory_PurchaseInit_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&orderid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&transid_) -
        reinterpret_cast<char*>(&orderid_)) + sizeof(transid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CInventory_PurchaseInit_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CInventory_PurchaseInit_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 orderid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_orderid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 transid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_transid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CInventory_PurchaseInit_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CInventory_PurchaseInit_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 orderid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_orderid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &orderid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 transid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_transid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &transid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CInventory_PurchaseInit_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CInventory_PurchaseInit_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CInventory_PurchaseInit_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CInventory_PurchaseInit_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 orderid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->orderid(), output);
  }

  // optional uint64 transid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->transid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CInventory_PurchaseInit_Response)
}

::google::protobuf::uint8* CInventory_PurchaseInit_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CInventory_PurchaseInit_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 orderid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->orderid(), target);
  }

  // optional uint64 transid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->transid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CInventory_PurchaseInit_Response)
  return target;
}

size_t CInventory_PurchaseInit_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CInventory_PurchaseInit_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 orderid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->orderid());
    }

    // optional uint64 transid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->transid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CInventory_PurchaseInit_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CInventory_PurchaseInit_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CInventory_PurchaseInit_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CInventory_PurchaseInit_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CInventory_PurchaseInit_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CInventory_PurchaseInit_Response)
    MergeFrom(*source);
  }
}

void CInventory_PurchaseInit_Response::MergeFrom(const CInventory_PurchaseInit_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CInventory_PurchaseInit_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      orderid_ = from.orderid_;
    }
    if (cached_has_bits & 0x00000002u) {
      transid_ = from.transid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CInventory_PurchaseInit_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CInventory_PurchaseInit_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CInventory_PurchaseInit_Response::CopyFrom(const CInventory_PurchaseInit_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CInventory_PurchaseInit_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CInventory_PurchaseInit_Response::IsInitialized() const {
  return true;
}

void CInventory_PurchaseInit_Response::Swap(CInventory_PurchaseInit_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CInventory_PurchaseInit_Response::InternalSwap(CInventory_PurchaseInit_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(orderid_, other->orderid_);
  swap(transid_, other->transid_);
}

::google::protobuf::Metadata CInventory_PurchaseInit_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5finventory_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5finventory_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CInventory_PurchaseFinalize_Request::InitAsDefaultInstance() {
}
class CInventory_PurchaseFinalize_Request::HasBitSetters {
 public:
  static void set_has_appid(CInventory_PurchaseFinalize_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_language(CInventory_PurchaseFinalize_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_orderid(CInventory_PurchaseFinalize_Request* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CInventory_PurchaseFinalize_Request::kAppidFieldNumber;
const int CInventory_PurchaseFinalize_Request::kLanguageFieldNumber;
const int CInventory_PurchaseFinalize_Request::kOrderidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CInventory_PurchaseFinalize_Request::CInventory_PurchaseFinalize_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CInventory_PurchaseFinalize_Request)
}
CInventory_PurchaseFinalize_Request::CInventory_PurchaseFinalize_Request(const CInventory_PurchaseFinalize_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&orderid_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(orderid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CInventory_PurchaseFinalize_Request)
}

void CInventory_PurchaseFinalize_Request::SharedCtor() {
  ::memset(&appid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&orderid_) -
      reinterpret_cast<char*>(&appid_)) + sizeof(orderid_));
}

CInventory_PurchaseFinalize_Request::~CInventory_PurchaseFinalize_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CInventory_PurchaseFinalize_Request)
  SharedDtor();
}

void CInventory_PurchaseFinalize_Request::SharedDtor() {
}

void CInventory_PurchaseFinalize_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CInventory_PurchaseFinalize_Request& CInventory_PurchaseFinalize_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CInventory_PurchaseFinalize_Request_steammessages_5finventory_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CInventory_PurchaseFinalize_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CInventory_PurchaseFinalize_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&orderid_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(orderid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CInventory_PurchaseFinalize_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CInventory_PurchaseFinalize_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 language = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_language(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 orderid = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_orderid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CInventory_PurchaseFinalize_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CInventory_PurchaseFinalize_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 language = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_language(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &language_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 orderid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_orderid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &orderid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CInventory_PurchaseFinalize_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CInventory_PurchaseFinalize_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CInventory_PurchaseFinalize_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CInventory_PurchaseFinalize_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional int32 language = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->language(), output);
  }

  // optional uint64 orderid = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->orderid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CInventory_PurchaseFinalize_Request)
}

::google::protobuf::uint8* CInventory_PurchaseFinalize_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CInventory_PurchaseFinalize_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional int32 language = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->language(), target);
  }

  // optional uint64 orderid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->orderid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CInventory_PurchaseFinalize_Request)
  return target;
}

size_t CInventory_PurchaseFinalize_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CInventory_PurchaseFinalize_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional int32 language = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->language());
    }

    // optional uint64 orderid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->orderid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CInventory_PurchaseFinalize_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CInventory_PurchaseFinalize_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CInventory_PurchaseFinalize_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CInventory_PurchaseFinalize_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CInventory_PurchaseFinalize_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CInventory_PurchaseFinalize_Request)
    MergeFrom(*source);
  }
}

void CInventory_PurchaseFinalize_Request::MergeFrom(const CInventory_PurchaseFinalize_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CInventory_PurchaseFinalize_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      language_ = from.language_;
    }
    if (cached_has_bits & 0x00000004u) {
      orderid_ = from.orderid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CInventory_PurchaseFinalize_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CInventory_PurchaseFinalize_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CInventory_PurchaseFinalize_Request::CopyFrom(const CInventory_PurchaseFinalize_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CInventory_PurchaseFinalize_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CInventory_PurchaseFinalize_Request::IsInitialized() const {
  return true;
}

void CInventory_PurchaseFinalize_Request::Swap(CInventory_PurchaseFinalize_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CInventory_PurchaseFinalize_Request::InternalSwap(CInventory_PurchaseFinalize_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(appid_, other->appid_);
  swap(language_, other->language_);
  swap(orderid_, other->orderid_);
}

::google::protobuf::Metadata CInventory_PurchaseFinalize_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5finventory_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5finventory_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CInventoryClient_NewItems_Notification::InitAsDefaultInstance() {
  ::proto::steam::_CInventoryClient_NewItems_Notification_default_instance_._instance.get_mutable()->inventory_response_ = const_cast< ::proto::steam::CInventory_Response*>(
      ::proto::steam::CInventory_Response::internal_default_instance());
}
class CInventoryClient_NewItems_Notification::HasBitSetters {
 public:
  static void set_has_appid(CInventoryClient_NewItems_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::proto::steam::CInventory_Response& inventory_response(const CInventoryClient_NewItems_Notification* msg);
  static void set_has_inventory_response(CInventoryClient_NewItems_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::proto::steam::CInventory_Response&
CInventoryClient_NewItems_Notification::HasBitSetters::inventory_response(const CInventoryClient_NewItems_Notification* msg) {
  return *msg->inventory_response_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CInventoryClient_NewItems_Notification::kAppidFieldNumber;
const int CInventoryClient_NewItems_Notification::kInventoryResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CInventoryClient_NewItems_Notification::CInventoryClient_NewItems_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CInventoryClient_NewItems_Notification)
}
CInventoryClient_NewItems_Notification::CInventoryClient_NewItems_Notification(const CInventoryClient_NewItems_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_inventory_response()) {
    inventory_response_ = new ::proto::steam::CInventory_Response(*from.inventory_response_);
  } else {
    inventory_response_ = nullptr;
  }
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CInventoryClient_NewItems_Notification)
}

void CInventoryClient_NewItems_Notification::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CInventoryClient_NewItems_Notification_steammessages_5finventory_2esteamclient_2eproto.base);
  ::memset(&inventory_response_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&appid_) -
      reinterpret_cast<char*>(&inventory_response_)) + sizeof(appid_));
}

CInventoryClient_NewItems_Notification::~CInventoryClient_NewItems_Notification() {
  // @@protoc_insertion_point(destructor:proto.steam.CInventoryClient_NewItems_Notification)
  SharedDtor();
}

void CInventoryClient_NewItems_Notification::SharedDtor() {
  if (this != internal_default_instance()) delete inventory_response_;
}

void CInventoryClient_NewItems_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CInventoryClient_NewItems_Notification& CInventoryClient_NewItems_Notification::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CInventoryClient_NewItems_Notification_steammessages_5finventory_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CInventoryClient_NewItems_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CInventoryClient_NewItems_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(inventory_response_ != nullptr);
    inventory_response_->Clear();
  }
  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CInventoryClient_NewItems_Notification::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CInventoryClient_NewItems_Notification*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.steam.CInventory_Response inventory_response = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::steam::CInventory_Response::_InternalParse;
        object = msg->mutable_inventory_response();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CInventoryClient_NewItems_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CInventoryClient_NewItems_Notification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CInventory_Response inventory_response = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_inventory_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CInventoryClient_NewItems_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CInventoryClient_NewItems_Notification)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CInventoryClient_NewItems_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CInventoryClient_NewItems_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional .proto.steam.CInventory_Response inventory_response = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::inventory_response(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CInventoryClient_NewItems_Notification)
}

::google::protobuf::uint8* CInventoryClient_NewItems_Notification::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CInventoryClient_NewItems_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional .proto.steam.CInventory_Response inventory_response = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::inventory_response(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CInventoryClient_NewItems_Notification)
  return target;
}

size_t CInventoryClient_NewItems_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CInventoryClient_NewItems_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .proto.steam.CInventory_Response inventory_response = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *inventory_response_);
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CInventoryClient_NewItems_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CInventoryClient_NewItems_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CInventoryClient_NewItems_Notification* source =
      ::google::protobuf::DynamicCastToGenerated<CInventoryClient_NewItems_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CInventoryClient_NewItems_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CInventoryClient_NewItems_Notification)
    MergeFrom(*source);
  }
}

void CInventoryClient_NewItems_Notification::MergeFrom(const CInventoryClient_NewItems_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CInventoryClient_NewItems_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_inventory_response()->::proto::steam::CInventory_Response::MergeFrom(from.inventory_response());
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CInventoryClient_NewItems_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CInventoryClient_NewItems_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CInventoryClient_NewItems_Notification::CopyFrom(const CInventoryClient_NewItems_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CInventoryClient_NewItems_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CInventoryClient_NewItems_Notification::IsInitialized() const {
  return true;
}

void CInventoryClient_NewItems_Notification::Swap(CInventoryClient_NewItems_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CInventoryClient_NewItems_Notification::InternalSwap(CInventoryClient_NewItems_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(inventory_response_, other->inventory_response_);
  swap(appid_, other->appid_);
}

::google::protobuf::Metadata CInventoryClient_NewItems_Notification::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5finventory_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5finventory_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

Inventory::~Inventory() {}

const ::google::protobuf::ServiceDescriptor* Inventory::descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_steammessages_5finventory_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5finventory_2esteamclient_2eproto[0];
}

const ::google::protobuf::ServiceDescriptor* Inventory::GetDescriptor() {
  return descriptor();
}

void Inventory::GetInventory(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CInventory_GetInventory_Request*,
                         ::proto::steam::CInventory_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetInventory() not implemented.");
  done->Run();
}

void Inventory::ExchangeItem(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CInventory_ExchangeItem_Request*,
                         ::proto::steam::CInventory_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ExchangeItem() not implemented.");
  done->Run();
}

void Inventory::GetEligiblePromoItemDefIDs(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CInventory_GetEligiblePromoItemDefIDs_Request*,
                         ::proto::steam::CInventory_GetEligiblePromoItemDefIDs_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetEligiblePromoItemDefIDs() not implemented.");
  done->Run();
}

void Inventory::AddPromoItem(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CInventory_AddItem_Request*,
                         ::proto::steam::CInventory_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AddPromoItem() not implemented.");
  done->Run();
}

void Inventory::SafeModifyItems(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CInventory_ModifyItems_Request*,
                         ::proto::steam::CInventory_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SafeModifyItems() not implemented.");
  done->Run();
}

void Inventory::ConsumePlaytime(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CInventory_ConsumePlaytime_Request*,
                         ::proto::steam::CInventory_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ConsumePlaytime() not implemented.");
  done->Run();
}

void Inventory::ConsumeItem(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CInventory_ConsumeItem_Request*,
                         ::proto::steam::CInventory_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ConsumeItem() not implemented.");
  done->Run();
}

void Inventory::DevGenerateItem(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CInventory_AddItem_Request*,
                         ::proto::steam::CInventory_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method DevGenerateItem() not implemented.");
  done->Run();
}

void Inventory::DevSetNextDrop(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CInventory_DevSetNextDrop_Request*,
                         ::proto::steam::CInventory_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method DevSetNextDrop() not implemented.");
  done->Run();
}

void Inventory::SplitItemStack(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CInventory_SplitItemStack_Request*,
                         ::proto::steam::CInventory_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SplitItemStack() not implemented.");
  done->Run();
}

void Inventory::CombineItemStacks(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CInventory_CombineItemStacks_Request*,
                         ::proto::steam::CInventory_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CombineItemStacks() not implemented.");
  done->Run();
}

void Inventory::GetItemDefMeta(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CInventory_GetItemDefMeta_Request*,
                         ::proto::steam::CInventory_GetItemDefMeta_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetItemDefMeta() not implemented.");
  done->Run();
}

void Inventory::GetUserPurchaseInfo(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CInventory_GetUserPurchaseInfo_Request*,
                         ::proto::steam::CInventory_GetUserPurchaseInfo_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetUserPurchaseInfo() not implemented.");
  done->Run();
}

void Inventory::PurchaseInit(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CInventory_PurchaseInit_Request*,
                         ::proto::steam::CInventory_PurchaseInit_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method PurchaseInit() not implemented.");
  done->Run();
}

void Inventory::PurchaseFinalize(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CInventory_PurchaseFinalize_Request*,
                         ::proto::steam::CInventory_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method PurchaseFinalize() not implemented.");
  done->Run();
}

void Inventory::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5finventory_2esteamclient_2eproto[0]);
  switch(method->index()) {
    case 0:
      GetInventory(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CInventory_GetInventory_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CInventory_Response*>(response),
             done);
      break;
    case 1:
      ExchangeItem(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CInventory_ExchangeItem_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CInventory_Response*>(response),
             done);
      break;
    case 2:
      GetEligiblePromoItemDefIDs(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CInventory_GetEligiblePromoItemDefIDs_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CInventory_GetEligiblePromoItemDefIDs_Response*>(response),
             done);
      break;
    case 3:
      AddPromoItem(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CInventory_AddItem_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CInventory_Response*>(response),
             done);
      break;
    case 4:
      SafeModifyItems(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CInventory_ModifyItems_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CInventory_Response*>(response),
             done);
      break;
    case 5:
      ConsumePlaytime(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CInventory_ConsumePlaytime_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CInventory_Response*>(response),
             done);
      break;
    case 6:
      ConsumeItem(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CInventory_ConsumeItem_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CInventory_Response*>(response),
             done);
      break;
    case 7:
      DevGenerateItem(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CInventory_AddItem_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CInventory_Response*>(response),
             done);
      break;
    case 8:
      DevSetNextDrop(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CInventory_DevSetNextDrop_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CInventory_Response*>(response),
             done);
      break;
    case 9:
      SplitItemStack(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CInventory_SplitItemStack_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CInventory_Response*>(response),
             done);
      break;
    case 10:
      CombineItemStacks(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CInventory_CombineItemStacks_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CInventory_Response*>(response),
             done);
      break;
    case 11:
      GetItemDefMeta(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CInventory_GetItemDefMeta_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CInventory_GetItemDefMeta_Response*>(response),
             done);
      break;
    case 12:
      GetUserPurchaseInfo(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CInventory_GetUserPurchaseInfo_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CInventory_GetUserPurchaseInfo_Response*>(response),
             done);
      break;
    case 13:
      PurchaseInit(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CInventory_PurchaseInit_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CInventory_PurchaseInit_Response*>(response),
             done);
      break;
    case 14:
      PurchaseFinalize(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CInventory_PurchaseFinalize_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CInventory_Response*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& Inventory::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CInventory_GetInventory_Request::default_instance();
    case 1:
      return ::proto::steam::CInventory_ExchangeItem_Request::default_instance();
    case 2:
      return ::proto::steam::CInventory_GetEligiblePromoItemDefIDs_Request::default_instance();
    case 3:
      return ::proto::steam::CInventory_AddItem_Request::default_instance();
    case 4:
      return ::proto::steam::CInventory_ModifyItems_Request::default_instance();
    case 5:
      return ::proto::steam::CInventory_ConsumePlaytime_Request::default_instance();
    case 6:
      return ::proto::steam::CInventory_ConsumeItem_Request::default_instance();
    case 7:
      return ::proto::steam::CInventory_AddItem_Request::default_instance();
    case 8:
      return ::proto::steam::CInventory_DevSetNextDrop_Request::default_instance();
    case 9:
      return ::proto::steam::CInventory_SplitItemStack_Request::default_instance();
    case 10:
      return ::proto::steam::CInventory_CombineItemStacks_Request::default_instance();
    case 11:
      return ::proto::steam::CInventory_GetItemDefMeta_Request::default_instance();
    case 12:
      return ::proto::steam::CInventory_GetUserPurchaseInfo_Request::default_instance();
    case 13:
      return ::proto::steam::CInventory_PurchaseInit_Request::default_instance();
    case 14:
      return ::proto::steam::CInventory_PurchaseFinalize_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& Inventory::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CInventory_Response::default_instance();
    case 1:
      return ::proto::steam::CInventory_Response::default_instance();
    case 2:
      return ::proto::steam::CInventory_GetEligiblePromoItemDefIDs_Response::default_instance();
    case 3:
      return ::proto::steam::CInventory_Response::default_instance();
    case 4:
      return ::proto::steam::CInventory_Response::default_instance();
    case 5:
      return ::proto::steam::CInventory_Response::default_instance();
    case 6:
      return ::proto::steam::CInventory_Response::default_instance();
    case 7:
      return ::proto::steam::CInventory_Response::default_instance();
    case 8:
      return ::proto::steam::CInventory_Response::default_instance();
    case 9:
      return ::proto::steam::CInventory_Response::default_instance();
    case 10:
      return ::proto::steam::CInventory_Response::default_instance();
    case 11:
      return ::proto::steam::CInventory_GetItemDefMeta_Response::default_instance();
    case 12:
      return ::proto::steam::CInventory_GetUserPurchaseInfo_Response::default_instance();
    case 13:
      return ::proto::steam::CInventory_PurchaseInit_Response::default_instance();
    case 14:
      return ::proto::steam::CInventory_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

Inventory_Stub::Inventory_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
Inventory_Stub::Inventory_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
Inventory_Stub::~Inventory_Stub() {
  if (owns_channel_) delete channel_;
}

void Inventory_Stub::GetInventory(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CInventory_GetInventory_Request* request,
                              ::proto::steam::CInventory_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void Inventory_Stub::ExchangeItem(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CInventory_ExchangeItem_Request* request,
                              ::proto::steam::CInventory_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void Inventory_Stub::GetEligiblePromoItemDefIDs(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CInventory_GetEligiblePromoItemDefIDs_Request* request,
                              ::proto::steam::CInventory_GetEligiblePromoItemDefIDs_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void Inventory_Stub::AddPromoItem(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CInventory_AddItem_Request* request,
                              ::proto::steam::CInventory_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void Inventory_Stub::SafeModifyItems(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CInventory_ModifyItems_Request* request,
                              ::proto::steam::CInventory_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void Inventory_Stub::ConsumePlaytime(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CInventory_ConsumePlaytime_Request* request,
                              ::proto::steam::CInventory_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void Inventory_Stub::ConsumeItem(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CInventory_ConsumeItem_Request* request,
                              ::proto::steam::CInventory_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void Inventory_Stub::DevGenerateItem(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CInventory_AddItem_Request* request,
                              ::proto::steam::CInventory_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}
void Inventory_Stub::DevSetNextDrop(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CInventory_DevSetNextDrop_Request* request,
                              ::proto::steam::CInventory_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(8),
                       controller, request, response, done);
}
void Inventory_Stub::SplitItemStack(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CInventory_SplitItemStack_Request* request,
                              ::proto::steam::CInventory_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(9),
                       controller, request, response, done);
}
void Inventory_Stub::CombineItemStacks(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CInventory_CombineItemStacks_Request* request,
                              ::proto::steam::CInventory_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(10),
                       controller, request, response, done);
}
void Inventory_Stub::GetItemDefMeta(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CInventory_GetItemDefMeta_Request* request,
                              ::proto::steam::CInventory_GetItemDefMeta_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(11),
                       controller, request, response, done);
}
void Inventory_Stub::GetUserPurchaseInfo(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CInventory_GetUserPurchaseInfo_Request* request,
                              ::proto::steam::CInventory_GetUserPurchaseInfo_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(12),
                       controller, request, response, done);
}
void Inventory_Stub::PurchaseInit(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CInventory_PurchaseInit_Request* request,
                              ::proto::steam::CInventory_PurchaseInit_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(13),
                       controller, request, response, done);
}
void Inventory_Stub::PurchaseFinalize(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CInventory_PurchaseFinalize_Request* request,
                              ::proto::steam::CInventory_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(14),
                       controller, request, response, done);
}
// ===================================================================

InventoryClient::~InventoryClient() {}

const ::google::protobuf::ServiceDescriptor* InventoryClient::descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_steammessages_5finventory_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5finventory_2esteamclient_2eproto[1];
}

const ::google::protobuf::ServiceDescriptor* InventoryClient::GetDescriptor() {
  return descriptor();
}

void InventoryClient::NotifyNewItems(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CInventoryClient_NewItems_Notification*,
                         ::proto::steam::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyNewItems() not implemented.");
  done->Run();
}

void InventoryClient::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5finventory_2esteamclient_2eproto[1]);
  switch(method->index()) {
    case 0:
      NotifyNewItems(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CInventoryClient_NewItems_Notification*>(request),
             ::google::protobuf::down_cast< ::proto::steam::NoResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& InventoryClient::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CInventoryClient_NewItems_Notification::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& InventoryClient::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::NoResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

InventoryClient_Stub::InventoryClient_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
InventoryClient_Stub::InventoryClient_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
InventoryClient_Stub::~InventoryClient_Stub() {
  if (owns_channel_) delete channel_;
}

void InventoryClient_Stub::NotifyNewItems(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CInventoryClient_NewItems_Notification* request,
                              ::proto::steam::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace steam
}  // namespace proto
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::proto::steam::CInventory_GetInventory_Request* Arena::CreateMaybeMessage< ::proto::steam::CInventory_GetInventory_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CInventory_GetInventory_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CInventory_Response* Arena::CreateMaybeMessage< ::proto::steam::CInventory_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CInventory_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CInventory_ExchangeItem_Request* Arena::CreateMaybeMessage< ::proto::steam::CInventory_ExchangeItem_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CInventory_ExchangeItem_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CInventory_GetEligiblePromoItemDefIDs_Request* Arena::CreateMaybeMessage< ::proto::steam::CInventory_GetEligiblePromoItemDefIDs_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CInventory_GetEligiblePromoItemDefIDs_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CInventory_GetEligiblePromoItemDefIDs_Response* Arena::CreateMaybeMessage< ::proto::steam::CInventory_GetEligiblePromoItemDefIDs_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CInventory_GetEligiblePromoItemDefIDs_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CInventory_AddItem_Request* Arena::CreateMaybeMessage< ::proto::steam::CInventory_AddItem_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CInventory_AddItem_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CInventory_ModifyItems_Request_ItemPropertyUpdate* Arena::CreateMaybeMessage< ::proto::steam::CInventory_ModifyItems_Request_ItemPropertyUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CInventory_ModifyItems_Request_ItemPropertyUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CInventory_ModifyItems_Request* Arena::CreateMaybeMessage< ::proto::steam::CInventory_ModifyItems_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CInventory_ModifyItems_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CInventory_ConsumePlaytime_Request* Arena::CreateMaybeMessage< ::proto::steam::CInventory_ConsumePlaytime_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CInventory_ConsumePlaytime_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CInventory_ConsumeItem_Request* Arena::CreateMaybeMessage< ::proto::steam::CInventory_ConsumeItem_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CInventory_ConsumeItem_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CInventory_DevSetNextDrop_Request* Arena::CreateMaybeMessage< ::proto::steam::CInventory_DevSetNextDrop_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CInventory_DevSetNextDrop_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CInventory_SplitItemStack_Request* Arena::CreateMaybeMessage< ::proto::steam::CInventory_SplitItemStack_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CInventory_SplitItemStack_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CInventory_CombineItemStacks_Request* Arena::CreateMaybeMessage< ::proto::steam::CInventory_CombineItemStacks_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CInventory_CombineItemStacks_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CInventory_GetItemDefMeta_Request* Arena::CreateMaybeMessage< ::proto::steam::CInventory_GetItemDefMeta_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CInventory_GetItemDefMeta_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CInventory_GetItemDefMeta_Response* Arena::CreateMaybeMessage< ::proto::steam::CInventory_GetItemDefMeta_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CInventory_GetItemDefMeta_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CInventory_GetUserPurchaseInfo_Request* Arena::CreateMaybeMessage< ::proto::steam::CInventory_GetUserPurchaseInfo_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CInventory_GetUserPurchaseInfo_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CInventory_GetUserPurchaseInfo_Response* Arena::CreateMaybeMessage< ::proto::steam::CInventory_GetUserPurchaseInfo_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CInventory_GetUserPurchaseInfo_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CInventory_PurchaseInit_Request_LineItem* Arena::CreateMaybeMessage< ::proto::steam::CInventory_PurchaseInit_Request_LineItem >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CInventory_PurchaseInit_Request_LineItem >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CInventory_PurchaseInit_Request* Arena::CreateMaybeMessage< ::proto::steam::CInventory_PurchaseInit_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CInventory_PurchaseInit_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CInventory_PurchaseInit_Response* Arena::CreateMaybeMessage< ::proto::steam::CInventory_PurchaseInit_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CInventory_PurchaseInit_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CInventory_PurchaseFinalize_Request* Arena::CreateMaybeMessage< ::proto::steam::CInventory_PurchaseFinalize_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CInventory_PurchaseFinalize_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CInventoryClient_NewItems_Notification* Arena::CreateMaybeMessage< ::proto::steam::CInventoryClient_NewItems_Notification >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CInventoryClient_NewItems_Notification >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
