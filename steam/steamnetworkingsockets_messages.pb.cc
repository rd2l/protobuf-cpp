// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steamnetworkingsockets_messages.proto

#include "steamnetworkingsockets_messages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_steamnetworkingsockets_5fmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSteamDatagramLinkInstantaneousStats_steamnetworkingsockets_5fmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steamnetworkingsockets_5fmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSteamDatagramLinkLifetimeStats_steamnetworkingsockets_5fmessages_2eproto;
namespace proto {
namespace steam {
class CMsgSteamDatagramSessionCryptInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramSessionCryptInfo> _instance;
} _CMsgSteamDatagramSessionCryptInfo_default_instance_;
class CMsgSteamDatagramSessionCryptInfoSignedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramSessionCryptInfoSigned> _instance;
} _CMsgSteamDatagramSessionCryptInfoSigned_default_instance_;
class CMsgSteamDatagramDiagnosticDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramDiagnostic> _instance;
} _CMsgSteamDatagramDiagnostic_default_instance_;
class CMsgSteamDatagramLinkInstantaneousStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramLinkInstantaneousStats> _instance;
} _CMsgSteamDatagramLinkInstantaneousStats_default_instance_;
class CMsgSteamDatagramLinkLifetimeStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramLinkLifetimeStats> _instance;
} _CMsgSteamDatagramLinkLifetimeStats_default_instance_;
class CMsgSteamDatagramConnectionQualityDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramConnectionQuality> _instance;
} _CMsgSteamDatagramConnectionQuality_default_instance_;
}  // namespace steam
}  // namespace proto
static void InitDefaultsCMsgSteamDatagramSessionCryptInfo_steamnetworkingsockets_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSteamDatagramSessionCryptInfo_default_instance_;
    new (ptr) ::proto::steam::CMsgSteamDatagramSessionCryptInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSteamDatagramSessionCryptInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSteamDatagramSessionCryptInfo_steamnetworkingsockets_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSteamDatagramSessionCryptInfo_steamnetworkingsockets_5fmessages_2eproto}, {}};

static void InitDefaultsCMsgSteamDatagramSessionCryptInfoSigned_steamnetworkingsockets_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSteamDatagramSessionCryptInfoSigned_default_instance_;
    new (ptr) ::proto::steam::CMsgSteamDatagramSessionCryptInfoSigned();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSteamDatagramSessionCryptInfoSigned::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSteamDatagramSessionCryptInfoSigned_steamnetworkingsockets_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSteamDatagramSessionCryptInfoSigned_steamnetworkingsockets_5fmessages_2eproto}, {}};

static void InitDefaultsCMsgSteamDatagramDiagnostic_steamnetworkingsockets_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSteamDatagramDiagnostic_default_instance_;
    new (ptr) ::proto::steam::CMsgSteamDatagramDiagnostic();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSteamDatagramDiagnostic::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSteamDatagramDiagnostic_steamnetworkingsockets_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSteamDatagramDiagnostic_steamnetworkingsockets_5fmessages_2eproto}, {}};

static void InitDefaultsCMsgSteamDatagramLinkInstantaneousStats_steamnetworkingsockets_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSteamDatagramLinkInstantaneousStats_default_instance_;
    new (ptr) ::proto::steam::CMsgSteamDatagramLinkInstantaneousStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSteamDatagramLinkInstantaneousStats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSteamDatagramLinkInstantaneousStats_steamnetworkingsockets_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSteamDatagramLinkInstantaneousStats_steamnetworkingsockets_5fmessages_2eproto}, {}};

static void InitDefaultsCMsgSteamDatagramLinkLifetimeStats_steamnetworkingsockets_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSteamDatagramLinkLifetimeStats_default_instance_;
    new (ptr) ::proto::steam::CMsgSteamDatagramLinkLifetimeStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSteamDatagramLinkLifetimeStats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSteamDatagramLinkLifetimeStats_steamnetworkingsockets_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSteamDatagramLinkLifetimeStats_steamnetworkingsockets_5fmessages_2eproto}, {}};

static void InitDefaultsCMsgSteamDatagramConnectionQuality_steamnetworkingsockets_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSteamDatagramConnectionQuality_default_instance_;
    new (ptr) ::proto::steam::CMsgSteamDatagramConnectionQuality();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSteamDatagramConnectionQuality::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CMsgSteamDatagramConnectionQuality_steamnetworkingsockets_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCMsgSteamDatagramConnectionQuality_steamnetworkingsockets_5fmessages_2eproto}, {
      &scc_info_CMsgSteamDatagramLinkInstantaneousStats_steamnetworkingsockets_5fmessages_2eproto.base,
      &scc_info_CMsgSteamDatagramLinkLifetimeStats_steamnetworkingsockets_5fmessages_2eproto.base,}};

void InitDefaults_steamnetworkingsockets_5fmessages_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSteamDatagramSessionCryptInfo_steamnetworkingsockets_5fmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSteamDatagramSessionCryptInfoSigned_steamnetworkingsockets_5fmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSteamDatagramDiagnostic_steamnetworkingsockets_5fmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSteamDatagramLinkInstantaneousStats_steamnetworkingsockets_5fmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSteamDatagramLinkLifetimeStats_steamnetworkingsockets_5fmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSteamDatagramConnectionQuality_steamnetworkingsockets_5fmessages_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_steamnetworkingsockets_5fmessages_2eproto[6];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_steamnetworkingsockets_5fmessages_2eproto[1];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_steamnetworkingsockets_5fmessages_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_steamnetworkingsockets_5fmessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramSessionCryptInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramSessionCryptInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramSessionCryptInfo, key_type_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramSessionCryptInfo, key_data_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramSessionCryptInfo, nonce_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramSessionCryptInfo, protocol_version_),
  1,
  0,
  3,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramSessionCryptInfoSigned, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramSessionCryptInfoSigned, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramSessionCryptInfoSigned, info_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramSessionCryptInfoSigned, signature_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramDiagnostic, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramDiagnostic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramDiagnostic, severity_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramDiagnostic, text_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkInstantaneousStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkInstantaneousStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkInstantaneousStats, out_packets_per_sec_x10_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkInstantaneousStats, out_bytes_per_sec_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkInstantaneousStats, in_packets_per_sec_x10_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkInstantaneousStats, in_bytes_per_sec_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkInstantaneousStats, ping_ms_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkInstantaneousStats, packets_dropped_pct_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkInstantaneousStats, packets_weird_sequence_pct_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkInstantaneousStats, peak_jitter_usec_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, packets_sent_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, kb_sent_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, packets_recv_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, kb_recv_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, packets_recv_sequenced_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, packets_recv_dropped_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, packets_recv_out_of_order_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, packets_recv_duplicate_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, packets_recv_lurch_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, quality_histogram_100_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, quality_histogram_99_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, quality_histogram_97_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, quality_histogram_95_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, quality_histogram_90_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, quality_histogram_75_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, quality_histogram_50_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, quality_histogram_1_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, quality_histogram_dead_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, quality_ntile_2nd_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, quality_ntile_5th_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, quality_ntile_25th_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, quality_ntile_50th_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, ping_histogram_25_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, ping_histogram_50_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, ping_histogram_75_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, ping_histogram_100_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, ping_histogram_125_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, ping_histogram_150_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, ping_histogram_200_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, ping_histogram_300_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, ping_histogram_max_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, ping_ntile_5th_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, ping_ntile_50th_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, ping_ntile_75th_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, ping_ntile_95th_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, ping_ntile_98th_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, jitter_histogram_negligible_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, jitter_histogram_1_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, jitter_histogram_2_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, jitter_histogram_5_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, jitter_histogram_10_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, jitter_histogram_20_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, txspeed_max_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, txspeed_histogram_16_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, txspeed_histogram_32_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, txspeed_histogram_64_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, txspeed_histogram_128_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, txspeed_histogram_256_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, txspeed_histogram_512_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, txspeed_histogram_1024_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, txspeed_histogram_max_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, txspeed_ntile_5th_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, txspeed_ntile_50th_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, txspeed_ntile_75th_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, txspeed_ntile_95th_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, txspeed_ntile_98th_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, rxspeed_max_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, rxspeed_histogram_16_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, rxspeed_histogram_32_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, rxspeed_histogram_64_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, rxspeed_histogram_128_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, rxspeed_histogram_256_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, rxspeed_histogram_512_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, rxspeed_histogram_1024_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, rxspeed_histogram_max_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, rxspeed_ntile_5th_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, rxspeed_ntile_50th_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, rxspeed_ntile_75th_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, rxspeed_ntile_95th_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramLinkLifetimeStats, rxspeed_ntile_98th_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  41,
  42,
  43,
  44,
  45,
  46,
  48,
  49,
  50,
  51,
  52,
  53,
  54,
  55,
  56,
  57,
  58,
  59,
  60,
  61,
  62,
  63,
  64,
  65,
  66,
  67,
  68,
  69,
  47,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionQuality, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionQuality, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionQuality, instantaneous_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionQuality, lifetime_),
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::proto::steam::CMsgSteamDatagramSessionCryptInfo)},
  { 13, 20, sizeof(::proto::steam::CMsgSteamDatagramSessionCryptInfoSigned)},
  { 22, 29, sizeof(::proto::steam::CMsgSteamDatagramDiagnostic)},
  { 31, 44, sizeof(::proto::steam::CMsgSteamDatagramLinkInstantaneousStats)},
  { 52, 127, sizeof(::proto::steam::CMsgSteamDatagramLinkLifetimeStats)},
  { 197, 204, sizeof(::proto::steam::CMsgSteamDatagramConnectionQuality)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSteamDatagramSessionCryptInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSteamDatagramSessionCryptInfoSigned_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSteamDatagramDiagnostic_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSteamDatagramLinkInstantaneousStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSteamDatagramLinkLifetimeStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSteamDatagramConnectionQuality_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_steamnetworkingsockets_5fmessages_2eproto = {
  {}, AddDescriptors_steamnetworkingsockets_5fmessages_2eproto, "steamnetworkingsockets_messages.proto", schemas,
  file_default_instances, TableStruct_steamnetworkingsockets_5fmessages_2eproto::offsets,
  file_level_metadata_steamnetworkingsockets_5fmessages_2eproto, 6, file_level_enum_descriptors_steamnetworkingsockets_5fmessages_2eproto, file_level_service_descriptors_steamnetworkingsockets_5fmessages_2eproto,
};

const char descriptor_table_protodef_steamnetworkingsockets_5fmessages_2eproto[] =
  "\n%steamnetworkingsockets_messages.proto\022"
  "\013proto.steam\"\333\001\n!CMsgSteamDatagramSessio"
  "nCryptInfo\022R\n\010key_type\030\001 \001(\01627.proto.ste"
  "am.CMsgSteamDatagramSessionCryptInfo.EKe"
  "yType:\007INVALID\022\020\n\010key_data\030\002 \001(\014\022\r\n\005nonc"
  "e\030\003 \001(\006\022\030\n\020protocol_version\030\004 \001(\r\"\'\n\010EKe"
  "yType\022\013\n\007INVALID\020\000\022\016\n\nCURVE25519\020\001\"J\n\'CM"
  "sgSteamDatagramSessionCryptInfoSigned\022\014\n"
  "\004info\030\001 \001(\014\022\021\n\tsignature\030\002 \001(\014\"=\n\033CMsgSt"
  "eamDatagramDiagnostic\022\020\n\010severity\030\001 \001(\r\022"
  "\014\n\004text\030\002 \001(\t\"\213\002\n\'CMsgSteamDatagramLinkI"
  "nstantaneousStats\022\037\n\027out_packets_per_sec"
  "_x10\030\001 \001(\r\022\031\n\021out_bytes_per_sec\030\002 \001(\r\022\036\n"
  "\026in_packets_per_sec_x10\030\003 \001(\r\022\030\n\020in_byte"
  "s_per_sec\030\004 \001(\r\022\017\n\007ping_ms\030\005 \001(\r\022\033\n\023pack"
  "ets_dropped_pct\030\006 \001(\r\022\"\n\032packets_weird_s"
  "equence_pct\030\007 \001(\r\022\030\n\020peak_jitter_usec\030\010 "
  "\001(\r\"\341\017\n\"CMsgSteamDatagramLinkLifetimeSta"
  "ts\022\024\n\014packets_sent\030\003 \001(\004\022\017\n\007kb_sent\030\004 \001("
  "\004\022\024\n\014packets_recv\030\005 \001(\004\022\017\n\007kb_recv\030\006 \001(\004"
  "\022\036\n\026packets_recv_sequenced\030\007 \001(\004\022\034\n\024pack"
  "ets_recv_dropped\030\010 \001(\004\022!\n\031packets_recv_o"
  "ut_of_order\030\t \001(\004\022\036\n\026packets_recv_duplic"
  "ate\030\n \001(\004\022\032\n\022packets_recv_lurch\030\013 \001(\004\022\035\n"
  "\025quality_histogram_100\030\025 \001(\r\022\034\n\024quality_"
  "histogram_99\030\026 \001(\r\022\034\n\024quality_histogram_"
  "97\030\027 \001(\r\022\034\n\024quality_histogram_95\030\030 \001(\r\022\034"
  "\n\024quality_histogram_90\030\031 \001(\r\022\034\n\024quality_"
  "histogram_75\030\032 \001(\r\022\034\n\024quality_histogram_"
  "50\030\033 \001(\r\022\033\n\023quality_histogram_1\030\034 \001(\r\022\036\n"
  "\026quality_histogram_dead\030\035 \001(\r\022\031\n\021quality"
  "_ntile_2nd\030\036 \001(\r\022\031\n\021quality_ntile_5th\030\037 "
  "\001(\r\022\032\n\022quality_ntile_25th\030  \001(\r\022\032\n\022quali"
  "ty_ntile_50th\030! \001(\r\022\031\n\021ping_histogram_25"
  "\030) \001(\r\022\031\n\021ping_histogram_50\030* \001(\r\022\031\n\021pin"
  "g_histogram_75\030+ \001(\r\022\032\n\022ping_histogram_1"
  "00\030, \001(\r\022\032\n\022ping_histogram_125\030- \001(\r\022\032\n\022"
  "ping_histogram_150\030. \001(\r\022\032\n\022ping_histogr"
  "am_200\030/ \001(\r\022\032\n\022ping_histogram_300\0300 \001(\r"
  "\022\032\n\022ping_histogram_max\0301 \001(\r\022\026\n\016ping_nti"
  "le_5th\0302 \001(\r\022\027\n\017ping_ntile_50th\0303 \001(\r\022\027\n"
  "\017ping_ntile_75th\0304 \001(\r\022\027\n\017ping_ntile_95t"
  "h\0305 \001(\r\022\027\n\017ping_ntile_98th\0306 \001(\r\022#\n\033jitt"
  "er_histogram_negligible\030= \001(\r\022\032\n\022jitter_"
  "histogram_1\030> \001(\r\022\032\n\022jitter_histogram_2\030"
  "\? \001(\r\022\032\n\022jitter_histogram_5\030@ \001(\r\022\033\n\023jit"
  "ter_histogram_10\030A \001(\r\022\033\n\023jitter_histogr"
  "am_20\030B \001(\r\022\023\n\013txspeed_max\030C \001(\r\022\034\n\024txsp"
  "eed_histogram_16\030D \001(\r\022\034\n\024txspeed_histog"
  "ram_32\030E \001(\r\022\034\n\024txspeed_histogram_64\030F \001"
  "(\r\022\035\n\025txspeed_histogram_128\030G \001(\r\022\035\n\025txs"
  "peed_histogram_256\030H \001(\r\022\035\n\025txspeed_hist"
  "ogram_512\030I \001(\r\022\036\n\026txspeed_histogram_102"
  "4\030J \001(\r\022\035\n\025txspeed_histogram_max\030K \001(\r\022\031"
  "\n\021txspeed_ntile_5th\030L \001(\r\022\032\n\022txspeed_nti"
  "le_50th\030M \001(\r\022\032\n\022txspeed_ntile_75th\030N \001("
  "\r\022\032\n\022txspeed_ntile_95th\030O \001(\r\022\032\n\022txspeed"
  "_ntile_98th\030P \001(\r\022\023\n\013rxspeed_max\030Q \001(\r\022\034"
  "\n\024rxspeed_histogram_16\030R \001(\r\022\034\n\024rxspeed_"
  "histogram_32\030S \001(\r\022\034\n\024rxspeed_histogram_"
  "64\030T \001(\r\022\035\n\025rxspeed_histogram_128\030U \001(\r\022"
  "\035\n\025rxspeed_histogram_256\030V \001(\r\022\035\n\025rxspee"
  "d_histogram_512\030W \001(\r\022\036\n\026rxspeed_histogr"
  "am_1024\030X \001(\r\022\035\n\025rxspeed_histogram_max\030Y"
  " \001(\r\022\031\n\021rxspeed_ntile_5th\030Z \001(\r\022\032\n\022rxspe"
  "ed_ntile_50th\030[ \001(\r\022\032\n\022rxspeed_ntile_75t"
  "h\030\\ \001(\r\022\032\n\022rxspeed_ntile_95th\030] \001(\r\022\032\n\022r"
  "xspeed_ntile_98th\030^ \001(\r\"\264\001\n\"CMsgSteamDat"
  "agramConnectionQuality\022K\n\rinstantaneous\030"
  "\001 \001(\01324.proto.steam.CMsgSteamDatagramLin"
  "kInstantaneousStats\022A\n\010lifetime\030\002 \001(\0132/."
  "proto.steam.CMsgSteamDatagramLinkLifetim"
  "eStatsB\005H\001\200\001\000"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_steamnetworkingsockets_5fmessages_2eproto = {
  false, InitDefaults_steamnetworkingsockets_5fmessages_2eproto, 
  descriptor_table_protodef_steamnetworkingsockets_5fmessages_2eproto,
  "steamnetworkingsockets_messages.proto", &assign_descriptors_table_steamnetworkingsockets_5fmessages_2eproto, 2893,
};

void AddDescriptors_steamnetworkingsockets_5fmessages_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_steamnetworkingsockets_5fmessages_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_steamnetworkingsockets_5fmessages_2eproto = []() { AddDescriptors_steamnetworkingsockets_5fmessages_2eproto(); return true; }();
namespace proto {
namespace steam {
const ::google::protobuf::EnumDescriptor* CMsgSteamDatagramSessionCryptInfo_EKeyType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_steamnetworkingsockets_5fmessages_2eproto);
  return file_level_enum_descriptors_steamnetworkingsockets_5fmessages_2eproto[0];
}
bool CMsgSteamDatagramSessionCryptInfo_EKeyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgSteamDatagramSessionCryptInfo_EKeyType CMsgSteamDatagramSessionCryptInfo::INVALID;
const CMsgSteamDatagramSessionCryptInfo_EKeyType CMsgSteamDatagramSessionCryptInfo::CURVE25519;
const CMsgSteamDatagramSessionCryptInfo_EKeyType CMsgSteamDatagramSessionCryptInfo::EKeyType_MIN;
const CMsgSteamDatagramSessionCryptInfo_EKeyType CMsgSteamDatagramSessionCryptInfo::EKeyType_MAX;
const int CMsgSteamDatagramSessionCryptInfo::EKeyType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void CMsgSteamDatagramSessionCryptInfo::InitAsDefaultInstance() {
}
class CMsgSteamDatagramSessionCryptInfo::HasBitSetters {
 public:
  static void set_has_key_type(CMsgSteamDatagramSessionCryptInfo* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_key_data(CMsgSteamDatagramSessionCryptInfo* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_nonce(CMsgSteamDatagramSessionCryptInfo* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_protocol_version(CMsgSteamDatagramSessionCryptInfo* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramSessionCryptInfo::kKeyTypeFieldNumber;
const int CMsgSteamDatagramSessionCryptInfo::kKeyDataFieldNumber;
const int CMsgSteamDatagramSessionCryptInfo::kNonceFieldNumber;
const int CMsgSteamDatagramSessionCryptInfo::kProtocolVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramSessionCryptInfo::CMsgSteamDatagramSessionCryptInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSteamDatagramSessionCryptInfo)
}
CMsgSteamDatagramSessionCryptInfo::CMsgSteamDatagramSessionCryptInfo(const CMsgSteamDatagramSessionCryptInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key_data()) {
    key_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_data_);
  }
  ::memcpy(&key_type_, &from.key_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&nonce_) -
    reinterpret_cast<char*>(&key_type_)) + sizeof(nonce_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSteamDatagramSessionCryptInfo)
}

void CMsgSteamDatagramSessionCryptInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgSteamDatagramSessionCryptInfo_steamnetworkingsockets_5fmessages_2eproto.base);
  key_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&key_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nonce_) -
      reinterpret_cast<char*>(&key_type_)) + sizeof(nonce_));
}

CMsgSteamDatagramSessionCryptInfo::~CMsgSteamDatagramSessionCryptInfo() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSteamDatagramSessionCryptInfo)
  SharedDtor();
}

void CMsgSteamDatagramSessionCryptInfo::SharedDtor() {
  key_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgSteamDatagramSessionCryptInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamDatagramSessionCryptInfo& CMsgSteamDatagramSessionCryptInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSteamDatagramSessionCryptInfo_steamnetworkingsockets_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamDatagramSessionCryptInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSteamDatagramSessionCryptInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    key_data_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&key_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&nonce_) -
        reinterpret_cast<char*>(&key_type_)) + sizeof(nonce_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSteamDatagramSessionCryptInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSteamDatagramSessionCryptInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.steam.CMsgSteamDatagramSessionCryptInfo.EKeyType key_type = 1 [default = INVALID];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::steam::CMsgSteamDatagramSessionCryptInfo_EKeyType_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_key_type(static_cast<::proto::steam::CMsgSteamDatagramSessionCryptInfo_EKeyType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes key_data = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_key_data();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional fixed64 nonce = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_nonce(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 protocol_version = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_protocol_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSteamDatagramSessionCryptInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSteamDatagramSessionCryptInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.steam.CMsgSteamDatagramSessionCryptInfo.EKeyType key_type = 1 [default = INVALID];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::steam::CMsgSteamDatagramSessionCryptInfo_EKeyType_IsValid(value)) {
            set_key_type(static_cast< ::proto::steam::CMsgSteamDatagramSessionCryptInfo_EKeyType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes key_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 nonce = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          HasBitSetters::set_has_nonce(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &nonce_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 protocol_version = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_protocol_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protocol_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSteamDatagramSessionCryptInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSteamDatagramSessionCryptInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSteamDatagramSessionCryptInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSteamDatagramSessionCryptInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.CMsgSteamDatagramSessionCryptInfo.EKeyType key_type = 1 [default = INVALID];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->key_type(), output);
  }

  // optional bytes key_data = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key_data(), output);
  }

  // optional fixed64 nonce = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->nonce(), output);
  }

  // optional uint32 protocol_version = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->protocol_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSteamDatagramSessionCryptInfo)
}

::google::protobuf::uint8* CMsgSteamDatagramSessionCryptInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSteamDatagramSessionCryptInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.CMsgSteamDatagramSessionCryptInfo.EKeyType key_type = 1 [default = INVALID];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->key_type(), target);
  }

  // optional bytes key_data = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key_data(), target);
  }

  // optional fixed64 nonce = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->nonce(), target);
  }

  // optional uint32 protocol_version = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->protocol_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSteamDatagramSessionCryptInfo)
  return target;
}

size_t CMsgSteamDatagramSessionCryptInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSteamDatagramSessionCryptInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes key_data = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key_data());
    }

    // optional .proto.steam.CMsgSteamDatagramSessionCryptInfo.EKeyType key_type = 1 [default = INVALID];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->key_type());
    }

    // optional uint32 protocol_version = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->protocol_version());
    }

    // optional fixed64 nonce = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramSessionCryptInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSteamDatagramSessionCryptInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramSessionCryptInfo* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSteamDatagramSessionCryptInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSteamDatagramSessionCryptInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSteamDatagramSessionCryptInfo)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramSessionCryptInfo::MergeFrom(const CMsgSteamDatagramSessionCryptInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSteamDatagramSessionCryptInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      key_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_data_);
    }
    if (cached_has_bits & 0x00000002u) {
      key_type_ = from.key_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      protocol_version_ = from.protocol_version_;
    }
    if (cached_has_bits & 0x00000008u) {
      nonce_ = from.nonce_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramSessionCryptInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSteamDatagramSessionCryptInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramSessionCryptInfo::CopyFrom(const CMsgSteamDatagramSessionCryptInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSteamDatagramSessionCryptInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramSessionCryptInfo::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramSessionCryptInfo::Swap(CMsgSteamDatagramSessionCryptInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramSessionCryptInfo::InternalSwap(CMsgSteamDatagramSessionCryptInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_data_.Swap(&other->key_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(key_type_, other->key_type_);
  swap(protocol_version_, other->protocol_version_);
  swap(nonce_, other->nonce_);
}

::google::protobuf::Metadata CMsgSteamDatagramSessionCryptInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steamnetworkingsockets_5fmessages_2eproto);
  return ::file_level_metadata_steamnetworkingsockets_5fmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramSessionCryptInfoSigned::InitAsDefaultInstance() {
}
class CMsgSteamDatagramSessionCryptInfoSigned::HasBitSetters {
 public:
  static void set_has_info(CMsgSteamDatagramSessionCryptInfoSigned* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_signature(CMsgSteamDatagramSessionCryptInfoSigned* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramSessionCryptInfoSigned::kInfoFieldNumber;
const int CMsgSteamDatagramSessionCryptInfoSigned::kSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramSessionCryptInfoSigned::CMsgSteamDatagramSessionCryptInfoSigned()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSteamDatagramSessionCryptInfoSigned)
}
CMsgSteamDatagramSessionCryptInfoSigned::CMsgSteamDatagramSessionCryptInfoSigned(const CMsgSteamDatagramSessionCryptInfoSigned& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_info()) {
    info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_);
  }
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_signature()) {
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSteamDatagramSessionCryptInfoSigned)
}

void CMsgSteamDatagramSessionCryptInfoSigned::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgSteamDatagramSessionCryptInfoSigned_steamnetworkingsockets_5fmessages_2eproto.base);
  info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgSteamDatagramSessionCryptInfoSigned::~CMsgSteamDatagramSessionCryptInfoSigned() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSteamDatagramSessionCryptInfoSigned)
  SharedDtor();
}

void CMsgSteamDatagramSessionCryptInfoSigned::SharedDtor() {
  info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgSteamDatagramSessionCryptInfoSigned::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamDatagramSessionCryptInfoSigned& CMsgSteamDatagramSessionCryptInfoSigned::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSteamDatagramSessionCryptInfoSigned_steamnetworkingsockets_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamDatagramSessionCryptInfoSigned::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSteamDatagramSessionCryptInfoSigned)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      info_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      signature_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSteamDatagramSessionCryptInfoSigned::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSteamDatagramSessionCryptInfoSigned*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bytes info = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_info();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bytes signature = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_signature();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSteamDatagramSessionCryptInfoSigned::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSteamDatagramSessionCryptInfoSigned)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes signature = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSteamDatagramSessionCryptInfoSigned)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSteamDatagramSessionCryptInfoSigned)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSteamDatagramSessionCryptInfoSigned::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSteamDatagramSessionCryptInfoSigned)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes info = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->info(), output);
  }

  // optional bytes signature = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->signature(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSteamDatagramSessionCryptInfoSigned)
}

::google::protobuf::uint8* CMsgSteamDatagramSessionCryptInfoSigned::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSteamDatagramSessionCryptInfoSigned)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes info = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->info(), target);
  }

  // optional bytes signature = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->signature(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSteamDatagramSessionCryptInfoSigned)
  return target;
}

size_t CMsgSteamDatagramSessionCryptInfoSigned::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSteamDatagramSessionCryptInfoSigned)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes info = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->info());
    }

    // optional bytes signature = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signature());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramSessionCryptInfoSigned::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSteamDatagramSessionCryptInfoSigned)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramSessionCryptInfoSigned* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSteamDatagramSessionCryptInfoSigned>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSteamDatagramSessionCryptInfoSigned)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSteamDatagramSessionCryptInfoSigned)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramSessionCryptInfoSigned::MergeFrom(const CMsgSteamDatagramSessionCryptInfoSigned& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSteamDatagramSessionCryptInfoSigned)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
    }
  }
}

void CMsgSteamDatagramSessionCryptInfoSigned::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSteamDatagramSessionCryptInfoSigned)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramSessionCryptInfoSigned::CopyFrom(const CMsgSteamDatagramSessionCryptInfoSigned& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSteamDatagramSessionCryptInfoSigned)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramSessionCryptInfoSigned::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramSessionCryptInfoSigned::Swap(CMsgSteamDatagramSessionCryptInfoSigned* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramSessionCryptInfoSigned::InternalSwap(CMsgSteamDatagramSessionCryptInfoSigned* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  info_.Swap(&other->info_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  signature_.Swap(&other->signature_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CMsgSteamDatagramSessionCryptInfoSigned::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steamnetworkingsockets_5fmessages_2eproto);
  return ::file_level_metadata_steamnetworkingsockets_5fmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramDiagnostic::InitAsDefaultInstance() {
}
class CMsgSteamDatagramDiagnostic::HasBitSetters {
 public:
  static void set_has_severity(CMsgSteamDatagramDiagnostic* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_text(CMsgSteamDatagramDiagnostic* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramDiagnostic::kSeverityFieldNumber;
const int CMsgSteamDatagramDiagnostic::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramDiagnostic::CMsgSteamDatagramDiagnostic()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSteamDatagramDiagnostic)
}
CMsgSteamDatagramDiagnostic::CMsgSteamDatagramDiagnostic(const CMsgSteamDatagramDiagnostic& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  severity_ = from.severity_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSteamDatagramDiagnostic)
}

void CMsgSteamDatagramDiagnostic::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgSteamDatagramDiagnostic_steamnetworkingsockets_5fmessages_2eproto.base);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  severity_ = 0u;
}

CMsgSteamDatagramDiagnostic::~CMsgSteamDatagramDiagnostic() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSteamDatagramDiagnostic)
  SharedDtor();
}

void CMsgSteamDatagramDiagnostic::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgSteamDatagramDiagnostic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamDatagramDiagnostic& CMsgSteamDatagramDiagnostic::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSteamDatagramDiagnostic_steamnetworkingsockets_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamDatagramDiagnostic::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSteamDatagramDiagnostic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    text_.ClearNonDefaultToEmptyNoArena();
  }
  severity_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSteamDatagramDiagnostic::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSteamDatagramDiagnostic*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 severity = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_severity(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string text = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgSteamDatagramDiagnostic.text");
        object = msg->mutable_text();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSteamDatagramDiagnostic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSteamDatagramDiagnostic)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 severity = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_severity(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &severity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string text = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgSteamDatagramDiagnostic.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSteamDatagramDiagnostic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSteamDatagramDiagnostic)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSteamDatagramDiagnostic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSteamDatagramDiagnostic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 severity = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->severity(), output);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSteamDatagramDiagnostic.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSteamDatagramDiagnostic)
}

::google::protobuf::uint8* CMsgSteamDatagramDiagnostic::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSteamDatagramDiagnostic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 severity = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->severity(), target);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSteamDatagramDiagnostic.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSteamDatagramDiagnostic)
  return target;
}

size_t CMsgSteamDatagramDiagnostic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSteamDatagramDiagnostic)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string text = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional uint32 severity = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->severity());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramDiagnostic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSteamDatagramDiagnostic)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramDiagnostic* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSteamDatagramDiagnostic>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSteamDatagramDiagnostic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSteamDatagramDiagnostic)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramDiagnostic::MergeFrom(const CMsgSteamDatagramDiagnostic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSteamDatagramDiagnostic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000002u) {
      severity_ = from.severity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramDiagnostic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSteamDatagramDiagnostic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramDiagnostic::CopyFrom(const CMsgSteamDatagramDiagnostic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSteamDatagramDiagnostic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramDiagnostic::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramDiagnostic::Swap(CMsgSteamDatagramDiagnostic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramDiagnostic::InternalSwap(CMsgSteamDatagramDiagnostic* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  text_.Swap(&other->text_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(severity_, other->severity_);
}

::google::protobuf::Metadata CMsgSteamDatagramDiagnostic::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steamnetworkingsockets_5fmessages_2eproto);
  return ::file_level_metadata_steamnetworkingsockets_5fmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramLinkInstantaneousStats::InitAsDefaultInstance() {
}
class CMsgSteamDatagramLinkInstantaneousStats::HasBitSetters {
 public:
  static void set_has_out_packets_per_sec_x10(CMsgSteamDatagramLinkInstantaneousStats* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_out_bytes_per_sec(CMsgSteamDatagramLinkInstantaneousStats* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_in_packets_per_sec_x10(CMsgSteamDatagramLinkInstantaneousStats* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_in_bytes_per_sec(CMsgSteamDatagramLinkInstantaneousStats* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_ping_ms(CMsgSteamDatagramLinkInstantaneousStats* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_packets_dropped_pct(CMsgSteamDatagramLinkInstantaneousStats* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_packets_weird_sequence_pct(CMsgSteamDatagramLinkInstantaneousStats* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_peak_jitter_usec(CMsgSteamDatagramLinkInstantaneousStats* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramLinkInstantaneousStats::kOutPacketsPerSecX10FieldNumber;
const int CMsgSteamDatagramLinkInstantaneousStats::kOutBytesPerSecFieldNumber;
const int CMsgSteamDatagramLinkInstantaneousStats::kInPacketsPerSecX10FieldNumber;
const int CMsgSteamDatagramLinkInstantaneousStats::kInBytesPerSecFieldNumber;
const int CMsgSteamDatagramLinkInstantaneousStats::kPingMsFieldNumber;
const int CMsgSteamDatagramLinkInstantaneousStats::kPacketsDroppedPctFieldNumber;
const int CMsgSteamDatagramLinkInstantaneousStats::kPacketsWeirdSequencePctFieldNumber;
const int CMsgSteamDatagramLinkInstantaneousStats::kPeakJitterUsecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramLinkInstantaneousStats::CMsgSteamDatagramLinkInstantaneousStats()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSteamDatagramLinkInstantaneousStats)
}
CMsgSteamDatagramLinkInstantaneousStats::CMsgSteamDatagramLinkInstantaneousStats(const CMsgSteamDatagramLinkInstantaneousStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&out_packets_per_sec_x10_, &from.out_packets_per_sec_x10_,
    static_cast<size_t>(reinterpret_cast<char*>(&peak_jitter_usec_) -
    reinterpret_cast<char*>(&out_packets_per_sec_x10_)) + sizeof(peak_jitter_usec_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSteamDatagramLinkInstantaneousStats)
}

void CMsgSteamDatagramLinkInstantaneousStats::SharedCtor() {
  ::memset(&out_packets_per_sec_x10_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&peak_jitter_usec_) -
      reinterpret_cast<char*>(&out_packets_per_sec_x10_)) + sizeof(peak_jitter_usec_));
}

CMsgSteamDatagramLinkInstantaneousStats::~CMsgSteamDatagramLinkInstantaneousStats() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSteamDatagramLinkInstantaneousStats)
  SharedDtor();
}

void CMsgSteamDatagramLinkInstantaneousStats::SharedDtor() {
}

void CMsgSteamDatagramLinkInstantaneousStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamDatagramLinkInstantaneousStats& CMsgSteamDatagramLinkInstantaneousStats::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSteamDatagramLinkInstantaneousStats_steamnetworkingsockets_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamDatagramLinkInstantaneousStats::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSteamDatagramLinkInstantaneousStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&out_packets_per_sec_x10_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&peak_jitter_usec_) -
        reinterpret_cast<char*>(&out_packets_per_sec_x10_)) + sizeof(peak_jitter_usec_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSteamDatagramLinkInstantaneousStats::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSteamDatagramLinkInstantaneousStats*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 out_packets_per_sec_x10 = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_out_packets_per_sec_x10(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 out_bytes_per_sec = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_out_bytes_per_sec(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 in_packets_per_sec_x10 = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_in_packets_per_sec_x10(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 in_bytes_per_sec = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_in_bytes_per_sec(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 ping_ms = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_ping_ms(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 packets_dropped_pct = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_packets_dropped_pct(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 packets_weird_sequence_pct = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_packets_weird_sequence_pct(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 peak_jitter_usec = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_peak_jitter_usec(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSteamDatagramLinkInstantaneousStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSteamDatagramLinkInstantaneousStats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 out_packets_per_sec_x10 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_out_packets_per_sec_x10(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &out_packets_per_sec_x10_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 out_bytes_per_sec = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_out_bytes_per_sec(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &out_bytes_per_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 in_packets_per_sec_x10 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_in_packets_per_sec_x10(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &in_packets_per_sec_x10_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 in_bytes_per_sec = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_in_bytes_per_sec(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &in_bytes_per_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ping_ms = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_ping_ms(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 packets_dropped_pct = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_packets_dropped_pct(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packets_dropped_pct_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 packets_weird_sequence_pct = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_packets_weird_sequence_pct(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packets_weird_sequence_pct_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 peak_jitter_usec = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_peak_jitter_usec(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &peak_jitter_usec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSteamDatagramLinkInstantaneousStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSteamDatagramLinkInstantaneousStats)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSteamDatagramLinkInstantaneousStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSteamDatagramLinkInstantaneousStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 out_packets_per_sec_x10 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->out_packets_per_sec_x10(), output);
  }

  // optional uint32 out_bytes_per_sec = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->out_bytes_per_sec(), output);
  }

  // optional uint32 in_packets_per_sec_x10 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->in_packets_per_sec_x10(), output);
  }

  // optional uint32 in_bytes_per_sec = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->in_bytes_per_sec(), output);
  }

  // optional uint32 ping_ms = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ping_ms(), output);
  }

  // optional uint32 packets_dropped_pct = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->packets_dropped_pct(), output);
  }

  // optional uint32 packets_weird_sequence_pct = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->packets_weird_sequence_pct(), output);
  }

  // optional uint32 peak_jitter_usec = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->peak_jitter_usec(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSteamDatagramLinkInstantaneousStats)
}

::google::protobuf::uint8* CMsgSteamDatagramLinkInstantaneousStats::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSteamDatagramLinkInstantaneousStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 out_packets_per_sec_x10 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->out_packets_per_sec_x10(), target);
  }

  // optional uint32 out_bytes_per_sec = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->out_bytes_per_sec(), target);
  }

  // optional uint32 in_packets_per_sec_x10 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->in_packets_per_sec_x10(), target);
  }

  // optional uint32 in_bytes_per_sec = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->in_bytes_per_sec(), target);
  }

  // optional uint32 ping_ms = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ping_ms(), target);
  }

  // optional uint32 packets_dropped_pct = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->packets_dropped_pct(), target);
  }

  // optional uint32 packets_weird_sequence_pct = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->packets_weird_sequence_pct(), target);
  }

  // optional uint32 peak_jitter_usec = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->peak_jitter_usec(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSteamDatagramLinkInstantaneousStats)
  return target;
}

size_t CMsgSteamDatagramLinkInstantaneousStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSteamDatagramLinkInstantaneousStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 out_packets_per_sec_x10 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->out_packets_per_sec_x10());
    }

    // optional uint32 out_bytes_per_sec = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->out_bytes_per_sec());
    }

    // optional uint32 in_packets_per_sec_x10 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->in_packets_per_sec_x10());
    }

    // optional uint32 in_bytes_per_sec = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->in_bytes_per_sec());
    }

    // optional uint32 ping_ms = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_ms());
    }

    // optional uint32 packets_dropped_pct = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->packets_dropped_pct());
    }

    // optional uint32 packets_weird_sequence_pct = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->packets_weird_sequence_pct());
    }

    // optional uint32 peak_jitter_usec = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->peak_jitter_usec());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramLinkInstantaneousStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSteamDatagramLinkInstantaneousStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramLinkInstantaneousStats* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSteamDatagramLinkInstantaneousStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSteamDatagramLinkInstantaneousStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSteamDatagramLinkInstantaneousStats)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramLinkInstantaneousStats::MergeFrom(const CMsgSteamDatagramLinkInstantaneousStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSteamDatagramLinkInstantaneousStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      out_packets_per_sec_x10_ = from.out_packets_per_sec_x10_;
    }
    if (cached_has_bits & 0x00000002u) {
      out_bytes_per_sec_ = from.out_bytes_per_sec_;
    }
    if (cached_has_bits & 0x00000004u) {
      in_packets_per_sec_x10_ = from.in_packets_per_sec_x10_;
    }
    if (cached_has_bits & 0x00000008u) {
      in_bytes_per_sec_ = from.in_bytes_per_sec_;
    }
    if (cached_has_bits & 0x00000010u) {
      ping_ms_ = from.ping_ms_;
    }
    if (cached_has_bits & 0x00000020u) {
      packets_dropped_pct_ = from.packets_dropped_pct_;
    }
    if (cached_has_bits & 0x00000040u) {
      packets_weird_sequence_pct_ = from.packets_weird_sequence_pct_;
    }
    if (cached_has_bits & 0x00000080u) {
      peak_jitter_usec_ = from.peak_jitter_usec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramLinkInstantaneousStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSteamDatagramLinkInstantaneousStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramLinkInstantaneousStats::CopyFrom(const CMsgSteamDatagramLinkInstantaneousStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSteamDatagramLinkInstantaneousStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramLinkInstantaneousStats::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramLinkInstantaneousStats::Swap(CMsgSteamDatagramLinkInstantaneousStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramLinkInstantaneousStats::InternalSwap(CMsgSteamDatagramLinkInstantaneousStats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(out_packets_per_sec_x10_, other->out_packets_per_sec_x10_);
  swap(out_bytes_per_sec_, other->out_bytes_per_sec_);
  swap(in_packets_per_sec_x10_, other->in_packets_per_sec_x10_);
  swap(in_bytes_per_sec_, other->in_bytes_per_sec_);
  swap(ping_ms_, other->ping_ms_);
  swap(packets_dropped_pct_, other->packets_dropped_pct_);
  swap(packets_weird_sequence_pct_, other->packets_weird_sequence_pct_);
  swap(peak_jitter_usec_, other->peak_jitter_usec_);
}

::google::protobuf::Metadata CMsgSteamDatagramLinkInstantaneousStats::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steamnetworkingsockets_5fmessages_2eproto);
  return ::file_level_metadata_steamnetworkingsockets_5fmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramLinkLifetimeStats::InitAsDefaultInstance() {
}
class CMsgSteamDatagramLinkLifetimeStats::HasBitSetters {
 public:
  static void set_has_packets_sent(CMsgSteamDatagramLinkLifetimeStats* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_kb_sent(CMsgSteamDatagramLinkLifetimeStats* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_packets_recv(CMsgSteamDatagramLinkLifetimeStats* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_kb_recv(CMsgSteamDatagramLinkLifetimeStats* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_packets_recv_sequenced(CMsgSteamDatagramLinkLifetimeStats* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_packets_recv_dropped(CMsgSteamDatagramLinkLifetimeStats* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_packets_recv_out_of_order(CMsgSteamDatagramLinkLifetimeStats* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_packets_recv_duplicate(CMsgSteamDatagramLinkLifetimeStats* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_packets_recv_lurch(CMsgSteamDatagramLinkLifetimeStats* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_quality_histogram_100(CMsgSteamDatagramLinkLifetimeStats* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_quality_histogram_99(CMsgSteamDatagramLinkLifetimeStats* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_quality_histogram_97(CMsgSteamDatagramLinkLifetimeStats* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_quality_histogram_95(CMsgSteamDatagramLinkLifetimeStats* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_quality_histogram_90(CMsgSteamDatagramLinkLifetimeStats* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static void set_has_quality_histogram_75(CMsgSteamDatagramLinkLifetimeStats* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
  static void set_has_quality_histogram_50(CMsgSteamDatagramLinkLifetimeStats* msg) {
    msg->_has_bits_[0] |= 0x00008000u;
  }
  static void set_has_quality_histogram_1(CMsgSteamDatagramLinkLifetimeStats* msg) {
    msg->_has_bits_[0] |= 0x00010000u;
  }
  static void set_has_quality_histogram_dead(CMsgSteamDatagramLinkLifetimeStats* msg) {
    msg->_has_bits_[0] |= 0x00020000u;
  }
  static void set_has_quality_ntile_2nd(CMsgSteamDatagramLinkLifetimeStats* msg) {
    msg->_has_bits_[0] |= 0x00040000u;
  }
  static void set_has_quality_ntile_5th(CMsgSteamDatagramLinkLifetimeStats* msg) {
    msg->_has_bits_[0] |= 0x00080000u;
  }
  static void set_has_quality_ntile_25th(CMsgSteamDatagramLinkLifetimeStats* msg) {
    msg->_has_bits_[0] |= 0x00100000u;
  }
  static void set_has_quality_ntile_50th(CMsgSteamDatagramLinkLifetimeStats* msg) {
    msg->_has_bits_[0] |= 0x00200000u;
  }
  static void set_has_ping_histogram_25(CMsgSteamDatagramLinkLifetimeStats* msg) {
    msg->_has_bits_[0] |= 0x00400000u;
  }
  static void set_has_ping_histogram_50(CMsgSteamDatagramLinkLifetimeStats* msg) {
    msg->_has_bits_[0] |= 0x00800000u;
  }
  static void set_has_ping_histogram_75(CMsgSteamDatagramLinkLifetimeStats* msg) {
    msg->_has_bits_[0] |= 0x01000000u;
  }
  static void set_has_ping_histogram_100(CMsgSteamDatagramLinkLifetimeStats* msg) {
    msg->_has_bits_[0] |= 0x02000000u;
  }
  static void set_has_ping_histogram_125(CMsgSteamDatagramLinkLifetimeStats* msg) {
    msg->_has_bits_[0] |= 0x04000000u;
  }
  static void set_has_ping_histogram_150(CMsgSteamDatagramLinkLifetimeStats* msg) {
    msg->_has_bits_[0] |= 0x08000000u;
  }
  static void set_has_ping_histogram_200(CMsgSteamDatagramLinkLifetimeStats* msg) {
    msg->_has_bits_[0] |= 0x10000000u;
  }
  static void set_has_ping_histogram_300(CMsgSteamDatagramLinkLifetimeStats* msg) {
    msg->_has_bits_[0] |= 0x20000000u;
  }
  static void set_has_ping_histogram_max(CMsgSteamDatagramLinkLifetimeStats* msg) {
    msg->_has_bits_[0] |= 0x40000000u;
  }
  static void set_has_ping_ntile_5th(CMsgSteamDatagramLinkLifetimeStats* msg) {
    msg->_has_bits_[0] |= 0x80000000u;
  }
  static void set_has_ping_ntile_50th(CMsgSteamDatagramLinkLifetimeStats* msg) {
    msg->_has_bits_[1] |= 0x00000001u;
  }
  static void set_has_ping_ntile_75th(CMsgSteamDatagramLinkLifetimeStats* msg) {
    msg->_has_bits_[1] |= 0x00000002u;
  }
  static void set_has_ping_ntile_95th(CMsgSteamDatagramLinkLifetimeStats* msg) {
    msg->_has_bits_[1] |= 0x00000004u;
  }
  static void set_has_ping_ntile_98th(CMsgSteamDatagramLinkLifetimeStats* msg) {
    msg->_has_bits_[1] |= 0x00000008u;
  }
  static void set_has_jitter_histogram_negligible(CMsgSteamDatagramLinkLifetimeStats* msg) {
    msg->_has_bits_[1] |= 0x00000010u;
  }
  static void set_has_jitter_histogram_1(CMsgSteamDatagramLinkLifetimeStats* msg) {
    msg->_has_bits_[1] |= 0x00000020u;
  }
  static void set_has_jitter_histogram_2(CMsgSteamDatagramLinkLifetimeStats* msg) {
    msg->_has_bits_[1] |= 0x00000040u;
  }
  static void set_has_jitter_histogram_5(CMsgSteamDatagramLinkLifetimeStats* msg) {
    msg->_has_bits_[1] |= 0x00000080u;
  }
  static void set_has_jitter_histogram_10(CMsgSteamDatagramLinkLifetimeStats* msg) {
    msg->_has_bits_[1] |= 0x00000100u;
  }
  static void set_has_jitter_histogram_20(CMsgSteamDatagramLinkLifetimeStats* msg) {
    msg->_has_bits_[1] |= 0x00000200u;
  }
  static void set_has_txspeed_max(CMsgSteamDatagramLinkLifetimeStats* msg) {
    msg->_has_bits_[1] |= 0x00000400u;
  }
  static void set_has_txspeed_histogram_16(CMsgSteamDatagramLinkLifetimeStats* msg) {
    msg->_has_bits_[1] |= 0x00000800u;
  }
  static void set_has_txspeed_histogram_32(CMsgSteamDatagramLinkLifetimeStats* msg) {
    msg->_has_bits_[1] |= 0x00001000u;
  }
  static void set_has_txspeed_histogram_64(CMsgSteamDatagramLinkLifetimeStats* msg) {
    msg->_has_bits_[1] |= 0x00002000u;
  }
  static void set_has_txspeed_histogram_128(CMsgSteamDatagramLinkLifetimeStats* msg) {
    msg->_has_bits_[1] |= 0x00004000u;
  }
  static void set_has_txspeed_histogram_256(CMsgSteamDatagramLinkLifetimeStats* msg) {
    msg->_has_bits_[1] |= 0x00010000u;
  }
  static void set_has_txspeed_histogram_512(CMsgSteamDatagramLinkLifetimeStats* msg) {
    msg->_has_bits_[1] |= 0x00020000u;
  }
  static void set_has_txspeed_histogram_1024(CMsgSteamDatagramLinkLifetimeStats* msg) {
    msg->_has_bits_[1] |= 0x00040000u;
  }
  static void set_has_txspeed_histogram_max(CMsgSteamDatagramLinkLifetimeStats* msg) {
    msg->_has_bits_[1] |= 0x00080000u;
  }
  static void set_has_txspeed_ntile_5th(CMsgSteamDatagramLinkLifetimeStats* msg) {
    msg->_has_bits_[1] |= 0x00100000u;
  }
  static void set_has_txspeed_ntile_50th(CMsgSteamDatagramLinkLifetimeStats* msg) {
    msg->_has_bits_[1] |= 0x00200000u;
  }
  static void set_has_txspeed_ntile_75th(CMsgSteamDatagramLinkLifetimeStats* msg) {
    msg->_has_bits_[1] |= 0x00400000u;
  }
  static void set_has_txspeed_ntile_95th(CMsgSteamDatagramLinkLifetimeStats* msg) {
    msg->_has_bits_[1] |= 0x00800000u;
  }
  static void set_has_txspeed_ntile_98th(CMsgSteamDatagramLinkLifetimeStats* msg) {
    msg->_has_bits_[1] |= 0x01000000u;
  }
  static void set_has_rxspeed_max(CMsgSteamDatagramLinkLifetimeStats* msg) {
    msg->_has_bits_[1] |= 0x02000000u;
  }
  static void set_has_rxspeed_histogram_16(CMsgSteamDatagramLinkLifetimeStats* msg) {
    msg->_has_bits_[1] |= 0x04000000u;
  }
  static void set_has_rxspeed_histogram_32(CMsgSteamDatagramLinkLifetimeStats* msg) {
    msg->_has_bits_[1] |= 0x08000000u;
  }
  static void set_has_rxspeed_histogram_64(CMsgSteamDatagramLinkLifetimeStats* msg) {
    msg->_has_bits_[1] |= 0x10000000u;
  }
  static void set_has_rxspeed_histogram_128(CMsgSteamDatagramLinkLifetimeStats* msg) {
    msg->_has_bits_[1] |= 0x20000000u;
  }
  static void set_has_rxspeed_histogram_256(CMsgSteamDatagramLinkLifetimeStats* msg) {
    msg->_has_bits_[1] |= 0x40000000u;
  }
  static void set_has_rxspeed_histogram_512(CMsgSteamDatagramLinkLifetimeStats* msg) {
    msg->_has_bits_[1] |= 0x80000000u;
  }
  static void set_has_rxspeed_histogram_1024(CMsgSteamDatagramLinkLifetimeStats* msg) {
    msg->_has_bits_[2] |= 0x00000001u;
  }
  static void set_has_rxspeed_histogram_max(CMsgSteamDatagramLinkLifetimeStats* msg) {
    msg->_has_bits_[2] |= 0x00000002u;
  }
  static void set_has_rxspeed_ntile_5th(CMsgSteamDatagramLinkLifetimeStats* msg) {
    msg->_has_bits_[2] |= 0x00000004u;
  }
  static void set_has_rxspeed_ntile_50th(CMsgSteamDatagramLinkLifetimeStats* msg) {
    msg->_has_bits_[2] |= 0x00000008u;
  }
  static void set_has_rxspeed_ntile_75th(CMsgSteamDatagramLinkLifetimeStats* msg) {
    msg->_has_bits_[2] |= 0x00000010u;
  }
  static void set_has_rxspeed_ntile_95th(CMsgSteamDatagramLinkLifetimeStats* msg) {
    msg->_has_bits_[2] |= 0x00000020u;
  }
  static void set_has_rxspeed_ntile_98th(CMsgSteamDatagramLinkLifetimeStats* msg) {
    msg->_has_bits_[1] |= 0x00008000u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramLinkLifetimeStats::kPacketsSentFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kKbSentFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPacketsRecvFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kKbRecvFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPacketsRecvSequencedFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPacketsRecvDroppedFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPacketsRecvOutOfOrderFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPacketsRecvDuplicateFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPacketsRecvLurchFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kQualityHistogram100FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kQualityHistogram99FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kQualityHistogram97FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kQualityHistogram95FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kQualityHistogram90FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kQualityHistogram75FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kQualityHistogram50FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kQualityHistogram1FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kQualityHistogramDeadFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kQualityNtile2NdFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kQualityNtile5ThFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kQualityNtile25ThFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kQualityNtile50ThFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPingHistogram25FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPingHistogram50FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPingHistogram75FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPingHistogram100FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPingHistogram125FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPingHistogram150FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPingHistogram200FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPingHistogram300FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPingHistogramMaxFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPingNtile5ThFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPingNtile50ThFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPingNtile75ThFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPingNtile95ThFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPingNtile98ThFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kJitterHistogramNegligibleFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kJitterHistogram1FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kJitterHistogram2FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kJitterHistogram5FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kJitterHistogram10FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kJitterHistogram20FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kTxspeedMaxFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kTxspeedHistogram16FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kTxspeedHistogram32FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kTxspeedHistogram64FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kTxspeedHistogram128FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kTxspeedHistogram256FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kTxspeedHistogram512FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kTxspeedHistogram1024FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kTxspeedHistogramMaxFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kTxspeedNtile5ThFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kTxspeedNtile50ThFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kTxspeedNtile75ThFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kTxspeedNtile95ThFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kTxspeedNtile98ThFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kRxspeedMaxFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kRxspeedHistogram16FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kRxspeedHistogram32FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kRxspeedHistogram64FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kRxspeedHistogram128FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kRxspeedHistogram256FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kRxspeedHistogram512FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kRxspeedHistogram1024FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kRxspeedHistogramMaxFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kRxspeedNtile5ThFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kRxspeedNtile50ThFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kRxspeedNtile75ThFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kRxspeedNtile95ThFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kRxspeedNtile98ThFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramLinkLifetimeStats::CMsgSteamDatagramLinkLifetimeStats()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSteamDatagramLinkLifetimeStats)
}
CMsgSteamDatagramLinkLifetimeStats::CMsgSteamDatagramLinkLifetimeStats(const CMsgSteamDatagramLinkLifetimeStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&packets_sent_, &from.packets_sent_,
    static_cast<size_t>(reinterpret_cast<char*>(&rxspeed_ntile_95th_) -
    reinterpret_cast<char*>(&packets_sent_)) + sizeof(rxspeed_ntile_95th_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSteamDatagramLinkLifetimeStats)
}

void CMsgSteamDatagramLinkLifetimeStats::SharedCtor() {
  ::memset(&packets_sent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rxspeed_ntile_95th_) -
      reinterpret_cast<char*>(&packets_sent_)) + sizeof(rxspeed_ntile_95th_));
}

CMsgSteamDatagramLinkLifetimeStats::~CMsgSteamDatagramLinkLifetimeStats() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSteamDatagramLinkLifetimeStats)
  SharedDtor();
}

void CMsgSteamDatagramLinkLifetimeStats::SharedDtor() {
}

void CMsgSteamDatagramLinkLifetimeStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamDatagramLinkLifetimeStats& CMsgSteamDatagramLinkLifetimeStats::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSteamDatagramLinkLifetimeStats_steamnetworkingsockets_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamDatagramLinkLifetimeStats::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSteamDatagramLinkLifetimeStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&packets_sent_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&packets_recv_duplicate_) -
        reinterpret_cast<char*>(&packets_sent_)) + sizeof(packets_recv_duplicate_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&packets_recv_lurch_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&quality_histogram_50_) -
        reinterpret_cast<char*>(&packets_recv_lurch_)) + sizeof(quality_histogram_50_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&quality_histogram_1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ping_histogram_50_) -
        reinterpret_cast<char*>(&quality_histogram_1_)) + sizeof(ping_histogram_50_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&ping_histogram_75_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ping_ntile_5th_) -
        reinterpret_cast<char*>(&ping_histogram_75_)) + sizeof(ping_ntile_5th_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&ping_ntile_50th_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&jitter_histogram_5_) -
        reinterpret_cast<char*>(&ping_ntile_50th_)) + sizeof(jitter_histogram_5_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&jitter_histogram_10_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rxspeed_ntile_98th_) -
        reinterpret_cast<char*>(&jitter_histogram_10_)) + sizeof(rxspeed_ntile_98th_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&txspeed_histogram_256_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&txspeed_ntile_95th_) -
        reinterpret_cast<char*>(&txspeed_histogram_256_)) + sizeof(txspeed_ntile_95th_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&txspeed_ntile_98th_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rxspeed_histogram_512_) -
        reinterpret_cast<char*>(&txspeed_ntile_98th_)) + sizeof(rxspeed_histogram_512_));
  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&rxspeed_histogram_1024_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rxspeed_ntile_95th_) -
        reinterpret_cast<char*>(&rxspeed_histogram_1024_)) + sizeof(rxspeed_ntile_95th_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSteamDatagramLinkLifetimeStats::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSteamDatagramLinkLifetimeStats*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 packets_sent = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_packets_sent(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 kb_sent = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_kb_sent(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 packets_recv = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_packets_recv(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 kb_recv = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_kb_recv(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 packets_recv_sequenced = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_packets_recv_sequenced(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 packets_recv_dropped = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_packets_recv_dropped(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 packets_recv_out_of_order = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_packets_recv_out_of_order(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 packets_recv_duplicate = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_packets_recv_duplicate(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 packets_recv_lurch = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_packets_recv_lurch(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 quality_histogram_100 = 21;
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 168) goto handle_unusual;
        msg->set_quality_histogram_100(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 quality_histogram_99 = 22;
      case 22: {
        if (static_cast<::google::protobuf::uint8>(tag) != 176) goto handle_unusual;
        msg->set_quality_histogram_99(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 quality_histogram_97 = 23;
      case 23: {
        if (static_cast<::google::protobuf::uint8>(tag) != 184) goto handle_unusual;
        msg->set_quality_histogram_97(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 quality_histogram_95 = 24;
      case 24: {
        if (static_cast<::google::protobuf::uint8>(tag) != 192) goto handle_unusual;
        msg->set_quality_histogram_95(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 quality_histogram_90 = 25;
      case 25: {
        if (static_cast<::google::protobuf::uint8>(tag) != 200) goto handle_unusual;
        msg->set_quality_histogram_90(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 quality_histogram_75 = 26;
      case 26: {
        if (static_cast<::google::protobuf::uint8>(tag) != 208) goto handle_unusual;
        msg->set_quality_histogram_75(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 quality_histogram_50 = 27;
      case 27: {
        if (static_cast<::google::protobuf::uint8>(tag) != 216) goto handle_unusual;
        msg->set_quality_histogram_50(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 quality_histogram_1 = 28;
      case 28: {
        if (static_cast<::google::protobuf::uint8>(tag) != 224) goto handle_unusual;
        msg->set_quality_histogram_1(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 quality_histogram_dead = 29;
      case 29: {
        if (static_cast<::google::protobuf::uint8>(tag) != 232) goto handle_unusual;
        msg->set_quality_histogram_dead(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 quality_ntile_2nd = 30;
      case 30: {
        if (static_cast<::google::protobuf::uint8>(tag) != 240) goto handle_unusual;
        msg->set_quality_ntile_2nd(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 quality_ntile_5th = 31;
      case 31: {
        if (static_cast<::google::protobuf::uint8>(tag) != 248) goto handle_unusual;
        msg->set_quality_ntile_5th(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 quality_ntile_25th = 32;
      case 32: {
        if (static_cast<::google::protobuf::uint8>(tag) != 0) goto handle_unusual;
        msg->set_quality_ntile_25th(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 quality_ntile_50th = 33;
      case 33: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_quality_ntile_50th(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 ping_histogram_25 = 41;
      case 41: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_ping_histogram_25(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 ping_histogram_50 = 42;
      case 42: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_ping_histogram_50(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 ping_histogram_75 = 43;
      case 43: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_ping_histogram_75(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 ping_histogram_100 = 44;
      case 44: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_ping_histogram_100(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 ping_histogram_125 = 45;
      case 45: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_ping_histogram_125(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 ping_histogram_150 = 46;
      case 46: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_ping_histogram_150(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 ping_histogram_200 = 47;
      case 47: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_ping_histogram_200(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 ping_histogram_300 = 48;
      case 48: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_ping_histogram_300(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 ping_histogram_max = 49;
      case 49: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_ping_histogram_max(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 ping_ntile_5th = 50;
      case 50: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        msg->set_ping_ntile_5th(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 ping_ntile_50th = 51;
      case 51: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        msg->set_ping_ntile_50th(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 ping_ntile_75th = 52;
      case 52: {
        if (static_cast<::google::protobuf::uint8>(tag) != 160) goto handle_unusual;
        msg->set_ping_ntile_75th(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 ping_ntile_95th = 53;
      case 53: {
        if (static_cast<::google::protobuf::uint8>(tag) != 168) goto handle_unusual;
        msg->set_ping_ntile_95th(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 ping_ntile_98th = 54;
      case 54: {
        if (static_cast<::google::protobuf::uint8>(tag) != 176) goto handle_unusual;
        msg->set_ping_ntile_98th(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 jitter_histogram_negligible = 61;
      case 61: {
        if (static_cast<::google::protobuf::uint8>(tag) != 232) goto handle_unusual;
        msg->set_jitter_histogram_negligible(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 jitter_histogram_1 = 62;
      case 62: {
        if (static_cast<::google::protobuf::uint8>(tag) != 240) goto handle_unusual;
        msg->set_jitter_histogram_1(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 jitter_histogram_2 = 63;
      case 63: {
        if (static_cast<::google::protobuf::uint8>(tag) != 248) goto handle_unusual;
        msg->set_jitter_histogram_2(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 jitter_histogram_5 = 64;
      case 64: {
        if (static_cast<::google::protobuf::uint8>(tag) != 0) goto handle_unusual;
        msg->set_jitter_histogram_5(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 jitter_histogram_10 = 65;
      case 65: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_jitter_histogram_10(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 jitter_histogram_20 = 66;
      case 66: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_jitter_histogram_20(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 txspeed_max = 67;
      case 67: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_txspeed_max(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 txspeed_histogram_16 = 68;
      case 68: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_txspeed_histogram_16(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 txspeed_histogram_32 = 69;
      case 69: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_txspeed_histogram_32(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 txspeed_histogram_64 = 70;
      case 70: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_txspeed_histogram_64(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 txspeed_histogram_128 = 71;
      case 71: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_txspeed_histogram_128(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 txspeed_histogram_256 = 72;
      case 72: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_txspeed_histogram_256(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 txspeed_histogram_512 = 73;
      case 73: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_txspeed_histogram_512(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 txspeed_histogram_1024 = 74;
      case 74: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_txspeed_histogram_1024(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 txspeed_histogram_max = 75;
      case 75: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_txspeed_histogram_max(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 txspeed_ntile_5th = 76;
      case 76: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_txspeed_ntile_5th(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 txspeed_ntile_50th = 77;
      case 77: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_txspeed_ntile_50th(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 txspeed_ntile_75th = 78;
      case 78: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_txspeed_ntile_75th(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 txspeed_ntile_95th = 79;
      case 79: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_txspeed_ntile_95th(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 txspeed_ntile_98th = 80;
      case 80: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_txspeed_ntile_98th(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 rxspeed_max = 81;
      case 81: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_rxspeed_max(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 rxspeed_histogram_16 = 82;
      case 82: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        msg->set_rxspeed_histogram_16(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 rxspeed_histogram_32 = 83;
      case 83: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        msg->set_rxspeed_histogram_32(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 rxspeed_histogram_64 = 84;
      case 84: {
        if (static_cast<::google::protobuf::uint8>(tag) != 160) goto handle_unusual;
        msg->set_rxspeed_histogram_64(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 rxspeed_histogram_128 = 85;
      case 85: {
        if (static_cast<::google::protobuf::uint8>(tag) != 168) goto handle_unusual;
        msg->set_rxspeed_histogram_128(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 rxspeed_histogram_256 = 86;
      case 86: {
        if (static_cast<::google::protobuf::uint8>(tag) != 176) goto handle_unusual;
        msg->set_rxspeed_histogram_256(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 rxspeed_histogram_512 = 87;
      case 87: {
        if (static_cast<::google::protobuf::uint8>(tag) != 184) goto handle_unusual;
        msg->set_rxspeed_histogram_512(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 rxspeed_histogram_1024 = 88;
      case 88: {
        if (static_cast<::google::protobuf::uint8>(tag) != 192) goto handle_unusual;
        msg->set_rxspeed_histogram_1024(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 rxspeed_histogram_max = 89;
      case 89: {
        if (static_cast<::google::protobuf::uint8>(tag) != 200) goto handle_unusual;
        msg->set_rxspeed_histogram_max(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 rxspeed_ntile_5th = 90;
      case 90: {
        if (static_cast<::google::protobuf::uint8>(tag) != 208) goto handle_unusual;
        msg->set_rxspeed_ntile_5th(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 rxspeed_ntile_50th = 91;
      case 91: {
        if (static_cast<::google::protobuf::uint8>(tag) != 216) goto handle_unusual;
        msg->set_rxspeed_ntile_50th(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 rxspeed_ntile_75th = 92;
      case 92: {
        if (static_cast<::google::protobuf::uint8>(tag) != 224) goto handle_unusual;
        msg->set_rxspeed_ntile_75th(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 rxspeed_ntile_95th = 93;
      case 93: {
        if (static_cast<::google::protobuf::uint8>(tag) != 232) goto handle_unusual;
        msg->set_rxspeed_ntile_95th(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 rxspeed_ntile_98th = 94;
      case 94: {
        if (static_cast<::google::protobuf::uint8>(tag) != 240) goto handle_unusual;
        msg->set_rxspeed_ntile_98th(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSteamDatagramLinkLifetimeStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSteamDatagramLinkLifetimeStats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 packets_sent = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_packets_sent(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &packets_sent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 kb_sent = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_kb_sent(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &kb_sent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 packets_recv = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_packets_recv(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &packets_recv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 kb_recv = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_kb_recv(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &kb_recv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 packets_recv_sequenced = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_packets_recv_sequenced(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &packets_recv_sequenced_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 packets_recv_dropped = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_packets_recv_dropped(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &packets_recv_dropped_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 packets_recv_out_of_order = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_packets_recv_out_of_order(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &packets_recv_out_of_order_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 packets_recv_duplicate = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_packets_recv_duplicate(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &packets_recv_duplicate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 packets_recv_lurch = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_packets_recv_lurch(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &packets_recv_lurch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 quality_histogram_100 = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (168 & 0xFF)) {
          HasBitSetters::set_has_quality_histogram_100(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_histogram_100_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 quality_histogram_99 = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (176 & 0xFF)) {
          HasBitSetters::set_has_quality_histogram_99(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_histogram_99_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 quality_histogram_97 = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (184 & 0xFF)) {
          HasBitSetters::set_has_quality_histogram_97(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_histogram_97_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 quality_histogram_95 = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (192 & 0xFF)) {
          HasBitSetters::set_has_quality_histogram_95(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_histogram_95_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 quality_histogram_90 = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (200 & 0xFF)) {
          HasBitSetters::set_has_quality_histogram_90(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_histogram_90_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 quality_histogram_75 = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (208 & 0xFF)) {
          HasBitSetters::set_has_quality_histogram_75(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_histogram_75_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 quality_histogram_50 = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (216 & 0xFF)) {
          HasBitSetters::set_has_quality_histogram_50(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_histogram_50_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 quality_histogram_1 = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (224 & 0xFF)) {
          HasBitSetters::set_has_quality_histogram_1(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_histogram_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 quality_histogram_dead = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (232 & 0xFF)) {
          HasBitSetters::set_has_quality_histogram_dead(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_histogram_dead_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 quality_ntile_2nd = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (240 & 0xFF)) {
          HasBitSetters::set_has_quality_ntile_2nd(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_ntile_2nd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 quality_ntile_5th = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (248 & 0xFF)) {
          HasBitSetters::set_has_quality_ntile_5th(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_ntile_5th_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 quality_ntile_25th = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (256 & 0xFF)) {
          HasBitSetters::set_has_quality_ntile_25th(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_ntile_25th_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 quality_ntile_50th = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (264 & 0xFF)) {
          HasBitSetters::set_has_quality_ntile_50th(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_ntile_50th_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ping_histogram_25 = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (328 & 0xFF)) {
          HasBitSetters::set_has_ping_histogram_25(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_histogram_25_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ping_histogram_50 = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (336 & 0xFF)) {
          HasBitSetters::set_has_ping_histogram_50(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_histogram_50_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ping_histogram_75 = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (344 & 0xFF)) {
          HasBitSetters::set_has_ping_histogram_75(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_histogram_75_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ping_histogram_100 = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (352 & 0xFF)) {
          HasBitSetters::set_has_ping_histogram_100(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_histogram_100_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ping_histogram_125 = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (360 & 0xFF)) {
          HasBitSetters::set_has_ping_histogram_125(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_histogram_125_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ping_histogram_150 = 46;
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (368 & 0xFF)) {
          HasBitSetters::set_has_ping_histogram_150(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_histogram_150_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ping_histogram_200 = 47;
      case 47: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (376 & 0xFF)) {
          HasBitSetters::set_has_ping_histogram_200(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_histogram_200_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ping_histogram_300 = 48;
      case 48: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (384 & 0xFF)) {
          HasBitSetters::set_has_ping_histogram_300(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_histogram_300_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ping_histogram_max = 49;
      case 49: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (392 & 0xFF)) {
          HasBitSetters::set_has_ping_histogram_max(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_histogram_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ping_ntile_5th = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (400 & 0xFF)) {
          HasBitSetters::set_has_ping_ntile_5th(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_ntile_5th_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ping_ntile_50th = 51;
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (408 & 0xFF)) {
          HasBitSetters::set_has_ping_ntile_50th(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_ntile_50th_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ping_ntile_75th = 52;
      case 52: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (416 & 0xFF)) {
          HasBitSetters::set_has_ping_ntile_75th(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_ntile_75th_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ping_ntile_95th = 53;
      case 53: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (424 & 0xFF)) {
          HasBitSetters::set_has_ping_ntile_95th(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_ntile_95th_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ping_ntile_98th = 54;
      case 54: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (432 & 0xFF)) {
          HasBitSetters::set_has_ping_ntile_98th(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_ntile_98th_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 jitter_histogram_negligible = 61;
      case 61: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (488 & 0xFF)) {
          HasBitSetters::set_has_jitter_histogram_negligible(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jitter_histogram_negligible_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 jitter_histogram_1 = 62;
      case 62: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (496 & 0xFF)) {
          HasBitSetters::set_has_jitter_histogram_1(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jitter_histogram_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 jitter_histogram_2 = 63;
      case 63: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (504 & 0xFF)) {
          HasBitSetters::set_has_jitter_histogram_2(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jitter_histogram_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 jitter_histogram_5 = 64;
      case 64: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (512 & 0xFF)) {
          HasBitSetters::set_has_jitter_histogram_5(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jitter_histogram_5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 jitter_histogram_10 = 65;
      case 65: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (520 & 0xFF)) {
          HasBitSetters::set_has_jitter_histogram_10(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jitter_histogram_10_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 jitter_histogram_20 = 66;
      case 66: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (528 & 0xFF)) {
          HasBitSetters::set_has_jitter_histogram_20(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jitter_histogram_20_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 txspeed_max = 67;
      case 67: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (536 & 0xFF)) {
          HasBitSetters::set_has_txspeed_max(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &txspeed_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 txspeed_histogram_16 = 68;
      case 68: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (544 & 0xFF)) {
          HasBitSetters::set_has_txspeed_histogram_16(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &txspeed_histogram_16_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 txspeed_histogram_32 = 69;
      case 69: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (552 & 0xFF)) {
          HasBitSetters::set_has_txspeed_histogram_32(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &txspeed_histogram_32_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 txspeed_histogram_64 = 70;
      case 70: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (560 & 0xFF)) {
          HasBitSetters::set_has_txspeed_histogram_64(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &txspeed_histogram_64_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 txspeed_histogram_128 = 71;
      case 71: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (568 & 0xFF)) {
          HasBitSetters::set_has_txspeed_histogram_128(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &txspeed_histogram_128_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 txspeed_histogram_256 = 72;
      case 72: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (576 & 0xFF)) {
          HasBitSetters::set_has_txspeed_histogram_256(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &txspeed_histogram_256_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 txspeed_histogram_512 = 73;
      case 73: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (584 & 0xFF)) {
          HasBitSetters::set_has_txspeed_histogram_512(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &txspeed_histogram_512_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 txspeed_histogram_1024 = 74;
      case 74: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (592 & 0xFF)) {
          HasBitSetters::set_has_txspeed_histogram_1024(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &txspeed_histogram_1024_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 txspeed_histogram_max = 75;
      case 75: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (600 & 0xFF)) {
          HasBitSetters::set_has_txspeed_histogram_max(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &txspeed_histogram_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 txspeed_ntile_5th = 76;
      case 76: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (608 & 0xFF)) {
          HasBitSetters::set_has_txspeed_ntile_5th(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &txspeed_ntile_5th_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 txspeed_ntile_50th = 77;
      case 77: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (616 & 0xFF)) {
          HasBitSetters::set_has_txspeed_ntile_50th(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &txspeed_ntile_50th_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 txspeed_ntile_75th = 78;
      case 78: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (624 & 0xFF)) {
          HasBitSetters::set_has_txspeed_ntile_75th(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &txspeed_ntile_75th_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 txspeed_ntile_95th = 79;
      case 79: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (632 & 0xFF)) {
          HasBitSetters::set_has_txspeed_ntile_95th(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &txspeed_ntile_95th_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 txspeed_ntile_98th = 80;
      case 80: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (640 & 0xFF)) {
          HasBitSetters::set_has_txspeed_ntile_98th(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &txspeed_ntile_98th_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rxspeed_max = 81;
      case 81: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (648 & 0xFF)) {
          HasBitSetters::set_has_rxspeed_max(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rxspeed_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rxspeed_histogram_16 = 82;
      case 82: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (656 & 0xFF)) {
          HasBitSetters::set_has_rxspeed_histogram_16(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rxspeed_histogram_16_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rxspeed_histogram_32 = 83;
      case 83: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (664 & 0xFF)) {
          HasBitSetters::set_has_rxspeed_histogram_32(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rxspeed_histogram_32_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rxspeed_histogram_64 = 84;
      case 84: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (672 & 0xFF)) {
          HasBitSetters::set_has_rxspeed_histogram_64(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rxspeed_histogram_64_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rxspeed_histogram_128 = 85;
      case 85: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (680 & 0xFF)) {
          HasBitSetters::set_has_rxspeed_histogram_128(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rxspeed_histogram_128_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rxspeed_histogram_256 = 86;
      case 86: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (688 & 0xFF)) {
          HasBitSetters::set_has_rxspeed_histogram_256(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rxspeed_histogram_256_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rxspeed_histogram_512 = 87;
      case 87: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (696 & 0xFF)) {
          HasBitSetters::set_has_rxspeed_histogram_512(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rxspeed_histogram_512_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rxspeed_histogram_1024 = 88;
      case 88: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (704 & 0xFF)) {
          HasBitSetters::set_has_rxspeed_histogram_1024(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rxspeed_histogram_1024_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rxspeed_histogram_max = 89;
      case 89: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (712 & 0xFF)) {
          HasBitSetters::set_has_rxspeed_histogram_max(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rxspeed_histogram_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rxspeed_ntile_5th = 90;
      case 90: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (720 & 0xFF)) {
          HasBitSetters::set_has_rxspeed_ntile_5th(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rxspeed_ntile_5th_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rxspeed_ntile_50th = 91;
      case 91: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (728 & 0xFF)) {
          HasBitSetters::set_has_rxspeed_ntile_50th(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rxspeed_ntile_50th_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rxspeed_ntile_75th = 92;
      case 92: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (736 & 0xFF)) {
          HasBitSetters::set_has_rxspeed_ntile_75th(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rxspeed_ntile_75th_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rxspeed_ntile_95th = 93;
      case 93: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (744 & 0xFF)) {
          HasBitSetters::set_has_rxspeed_ntile_95th(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rxspeed_ntile_95th_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rxspeed_ntile_98th = 94;
      case 94: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (752 & 0xFF)) {
          HasBitSetters::set_has_rxspeed_ntile_98th(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rxspeed_ntile_98th_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSteamDatagramLinkLifetimeStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSteamDatagramLinkLifetimeStats)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSteamDatagramLinkLifetimeStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSteamDatagramLinkLifetimeStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 packets_sent = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->packets_sent(), output);
  }

  // optional uint64 kb_sent = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->kb_sent(), output);
  }

  // optional uint64 packets_recv = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->packets_recv(), output);
  }

  // optional uint64 kb_recv = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->kb_recv(), output);
  }

  // optional uint64 packets_recv_sequenced = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->packets_recv_sequenced(), output);
  }

  // optional uint64 packets_recv_dropped = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->packets_recv_dropped(), output);
  }

  // optional uint64 packets_recv_out_of_order = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->packets_recv_out_of_order(), output);
  }

  // optional uint64 packets_recv_duplicate = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->packets_recv_duplicate(), output);
  }

  // optional uint64 packets_recv_lurch = 11;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->packets_recv_lurch(), output);
  }

  // optional uint32 quality_histogram_100 = 21;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->quality_histogram_100(), output);
  }

  // optional uint32 quality_histogram_99 = 22;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->quality_histogram_99(), output);
  }

  // optional uint32 quality_histogram_97 = 23;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->quality_histogram_97(), output);
  }

  // optional uint32 quality_histogram_95 = 24;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->quality_histogram_95(), output);
  }

  // optional uint32 quality_histogram_90 = 25;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->quality_histogram_90(), output);
  }

  // optional uint32 quality_histogram_75 = 26;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->quality_histogram_75(), output);
  }

  // optional uint32 quality_histogram_50 = 27;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->quality_histogram_50(), output);
  }

  // optional uint32 quality_histogram_1 = 28;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->quality_histogram_1(), output);
  }

  // optional uint32 quality_histogram_dead = 29;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->quality_histogram_dead(), output);
  }

  // optional uint32 quality_ntile_2nd = 30;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->quality_ntile_2nd(), output);
  }

  // optional uint32 quality_ntile_5th = 31;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->quality_ntile_5th(), output);
  }

  // optional uint32 quality_ntile_25th = 32;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->quality_ntile_25th(), output);
  }

  // optional uint32 quality_ntile_50th = 33;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->quality_ntile_50th(), output);
  }

  // optional uint32 ping_histogram_25 = 41;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(41, this->ping_histogram_25(), output);
  }

  // optional uint32 ping_histogram_50 = 42;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(42, this->ping_histogram_50(), output);
  }

  // optional uint32 ping_histogram_75 = 43;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(43, this->ping_histogram_75(), output);
  }

  // optional uint32 ping_histogram_100 = 44;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(44, this->ping_histogram_100(), output);
  }

  // optional uint32 ping_histogram_125 = 45;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(45, this->ping_histogram_125(), output);
  }

  // optional uint32 ping_histogram_150 = 46;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(46, this->ping_histogram_150(), output);
  }

  // optional uint32 ping_histogram_200 = 47;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(47, this->ping_histogram_200(), output);
  }

  // optional uint32 ping_histogram_300 = 48;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(48, this->ping_histogram_300(), output);
  }

  // optional uint32 ping_histogram_max = 49;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(49, this->ping_histogram_max(), output);
  }

  // optional uint32 ping_ntile_5th = 50;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(50, this->ping_ntile_5th(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 ping_ntile_50th = 51;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(51, this->ping_ntile_50th(), output);
  }

  // optional uint32 ping_ntile_75th = 52;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(52, this->ping_ntile_75th(), output);
  }

  // optional uint32 ping_ntile_95th = 53;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(53, this->ping_ntile_95th(), output);
  }

  // optional uint32 ping_ntile_98th = 54;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(54, this->ping_ntile_98th(), output);
  }

  // optional uint32 jitter_histogram_negligible = 61;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(61, this->jitter_histogram_negligible(), output);
  }

  // optional uint32 jitter_histogram_1 = 62;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(62, this->jitter_histogram_1(), output);
  }

  // optional uint32 jitter_histogram_2 = 63;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(63, this->jitter_histogram_2(), output);
  }

  // optional uint32 jitter_histogram_5 = 64;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(64, this->jitter_histogram_5(), output);
  }

  // optional uint32 jitter_histogram_10 = 65;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(65, this->jitter_histogram_10(), output);
  }

  // optional uint32 jitter_histogram_20 = 66;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(66, this->jitter_histogram_20(), output);
  }

  // optional uint32 txspeed_max = 67;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(67, this->txspeed_max(), output);
  }

  // optional uint32 txspeed_histogram_16 = 68;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(68, this->txspeed_histogram_16(), output);
  }

  // optional uint32 txspeed_histogram_32 = 69;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(69, this->txspeed_histogram_32(), output);
  }

  // optional uint32 txspeed_histogram_64 = 70;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(70, this->txspeed_histogram_64(), output);
  }

  // optional uint32 txspeed_histogram_128 = 71;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(71, this->txspeed_histogram_128(), output);
  }

  // optional uint32 txspeed_histogram_256 = 72;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(72, this->txspeed_histogram_256(), output);
  }

  // optional uint32 txspeed_histogram_512 = 73;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(73, this->txspeed_histogram_512(), output);
  }

  // optional uint32 txspeed_histogram_1024 = 74;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(74, this->txspeed_histogram_1024(), output);
  }

  // optional uint32 txspeed_histogram_max = 75;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(75, this->txspeed_histogram_max(), output);
  }

  // optional uint32 txspeed_ntile_5th = 76;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(76, this->txspeed_ntile_5th(), output);
  }

  // optional uint32 txspeed_ntile_50th = 77;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(77, this->txspeed_ntile_50th(), output);
  }

  // optional uint32 txspeed_ntile_75th = 78;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(78, this->txspeed_ntile_75th(), output);
  }

  // optional uint32 txspeed_ntile_95th = 79;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(79, this->txspeed_ntile_95th(), output);
  }

  // optional uint32 txspeed_ntile_98th = 80;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(80, this->txspeed_ntile_98th(), output);
  }

  // optional uint32 rxspeed_max = 81;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(81, this->rxspeed_max(), output);
  }

  // optional uint32 rxspeed_histogram_16 = 82;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(82, this->rxspeed_histogram_16(), output);
  }

  // optional uint32 rxspeed_histogram_32 = 83;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(83, this->rxspeed_histogram_32(), output);
  }

  // optional uint32 rxspeed_histogram_64 = 84;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(84, this->rxspeed_histogram_64(), output);
  }

  // optional uint32 rxspeed_histogram_128 = 85;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(85, this->rxspeed_histogram_128(), output);
  }

  // optional uint32 rxspeed_histogram_256 = 86;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(86, this->rxspeed_histogram_256(), output);
  }

  // optional uint32 rxspeed_histogram_512 = 87;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(87, this->rxspeed_histogram_512(), output);
  }

  cached_has_bits = _has_bits_[2];
  // optional uint32 rxspeed_histogram_1024 = 88;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(88, this->rxspeed_histogram_1024(), output);
  }

  // optional uint32 rxspeed_histogram_max = 89;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(89, this->rxspeed_histogram_max(), output);
  }

  // optional uint32 rxspeed_ntile_5th = 90;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(90, this->rxspeed_ntile_5th(), output);
  }

  // optional uint32 rxspeed_ntile_50th = 91;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(91, this->rxspeed_ntile_50th(), output);
  }

  // optional uint32 rxspeed_ntile_75th = 92;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(92, this->rxspeed_ntile_75th(), output);
  }

  // optional uint32 rxspeed_ntile_95th = 93;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(93, this->rxspeed_ntile_95th(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 rxspeed_ntile_98th = 94;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(94, this->rxspeed_ntile_98th(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSteamDatagramLinkLifetimeStats)
}

::google::protobuf::uint8* CMsgSteamDatagramLinkLifetimeStats::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSteamDatagramLinkLifetimeStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 packets_sent = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->packets_sent(), target);
  }

  // optional uint64 kb_sent = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->kb_sent(), target);
  }

  // optional uint64 packets_recv = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->packets_recv(), target);
  }

  // optional uint64 kb_recv = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->kb_recv(), target);
  }

  // optional uint64 packets_recv_sequenced = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->packets_recv_sequenced(), target);
  }

  // optional uint64 packets_recv_dropped = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->packets_recv_dropped(), target);
  }

  // optional uint64 packets_recv_out_of_order = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->packets_recv_out_of_order(), target);
  }

  // optional uint64 packets_recv_duplicate = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->packets_recv_duplicate(), target);
  }

  // optional uint64 packets_recv_lurch = 11;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->packets_recv_lurch(), target);
  }

  // optional uint32 quality_histogram_100 = 21;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->quality_histogram_100(), target);
  }

  // optional uint32 quality_histogram_99 = 22;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->quality_histogram_99(), target);
  }

  // optional uint32 quality_histogram_97 = 23;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->quality_histogram_97(), target);
  }

  // optional uint32 quality_histogram_95 = 24;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->quality_histogram_95(), target);
  }

  // optional uint32 quality_histogram_90 = 25;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->quality_histogram_90(), target);
  }

  // optional uint32 quality_histogram_75 = 26;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->quality_histogram_75(), target);
  }

  // optional uint32 quality_histogram_50 = 27;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->quality_histogram_50(), target);
  }

  // optional uint32 quality_histogram_1 = 28;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->quality_histogram_1(), target);
  }

  // optional uint32 quality_histogram_dead = 29;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->quality_histogram_dead(), target);
  }

  // optional uint32 quality_ntile_2nd = 30;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->quality_ntile_2nd(), target);
  }

  // optional uint32 quality_ntile_5th = 31;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->quality_ntile_5th(), target);
  }

  // optional uint32 quality_ntile_25th = 32;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->quality_ntile_25th(), target);
  }

  // optional uint32 quality_ntile_50th = 33;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->quality_ntile_50th(), target);
  }

  // optional uint32 ping_histogram_25 = 41;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(41, this->ping_histogram_25(), target);
  }

  // optional uint32 ping_histogram_50 = 42;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(42, this->ping_histogram_50(), target);
  }

  // optional uint32 ping_histogram_75 = 43;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(43, this->ping_histogram_75(), target);
  }

  // optional uint32 ping_histogram_100 = 44;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(44, this->ping_histogram_100(), target);
  }

  // optional uint32 ping_histogram_125 = 45;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(45, this->ping_histogram_125(), target);
  }

  // optional uint32 ping_histogram_150 = 46;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(46, this->ping_histogram_150(), target);
  }

  // optional uint32 ping_histogram_200 = 47;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(47, this->ping_histogram_200(), target);
  }

  // optional uint32 ping_histogram_300 = 48;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(48, this->ping_histogram_300(), target);
  }

  // optional uint32 ping_histogram_max = 49;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(49, this->ping_histogram_max(), target);
  }

  // optional uint32 ping_ntile_5th = 50;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(50, this->ping_ntile_5th(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 ping_ntile_50th = 51;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(51, this->ping_ntile_50th(), target);
  }

  // optional uint32 ping_ntile_75th = 52;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(52, this->ping_ntile_75th(), target);
  }

  // optional uint32 ping_ntile_95th = 53;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(53, this->ping_ntile_95th(), target);
  }

  // optional uint32 ping_ntile_98th = 54;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(54, this->ping_ntile_98th(), target);
  }

  // optional uint32 jitter_histogram_negligible = 61;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(61, this->jitter_histogram_negligible(), target);
  }

  // optional uint32 jitter_histogram_1 = 62;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(62, this->jitter_histogram_1(), target);
  }

  // optional uint32 jitter_histogram_2 = 63;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(63, this->jitter_histogram_2(), target);
  }

  // optional uint32 jitter_histogram_5 = 64;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(64, this->jitter_histogram_5(), target);
  }

  // optional uint32 jitter_histogram_10 = 65;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(65, this->jitter_histogram_10(), target);
  }

  // optional uint32 jitter_histogram_20 = 66;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(66, this->jitter_histogram_20(), target);
  }

  // optional uint32 txspeed_max = 67;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(67, this->txspeed_max(), target);
  }

  // optional uint32 txspeed_histogram_16 = 68;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(68, this->txspeed_histogram_16(), target);
  }

  // optional uint32 txspeed_histogram_32 = 69;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(69, this->txspeed_histogram_32(), target);
  }

  // optional uint32 txspeed_histogram_64 = 70;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(70, this->txspeed_histogram_64(), target);
  }

  // optional uint32 txspeed_histogram_128 = 71;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(71, this->txspeed_histogram_128(), target);
  }

  // optional uint32 txspeed_histogram_256 = 72;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(72, this->txspeed_histogram_256(), target);
  }

  // optional uint32 txspeed_histogram_512 = 73;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(73, this->txspeed_histogram_512(), target);
  }

  // optional uint32 txspeed_histogram_1024 = 74;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(74, this->txspeed_histogram_1024(), target);
  }

  // optional uint32 txspeed_histogram_max = 75;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(75, this->txspeed_histogram_max(), target);
  }

  // optional uint32 txspeed_ntile_5th = 76;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(76, this->txspeed_ntile_5th(), target);
  }

  // optional uint32 txspeed_ntile_50th = 77;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(77, this->txspeed_ntile_50th(), target);
  }

  // optional uint32 txspeed_ntile_75th = 78;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(78, this->txspeed_ntile_75th(), target);
  }

  // optional uint32 txspeed_ntile_95th = 79;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(79, this->txspeed_ntile_95th(), target);
  }

  // optional uint32 txspeed_ntile_98th = 80;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(80, this->txspeed_ntile_98th(), target);
  }

  // optional uint32 rxspeed_max = 81;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(81, this->rxspeed_max(), target);
  }

  // optional uint32 rxspeed_histogram_16 = 82;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(82, this->rxspeed_histogram_16(), target);
  }

  // optional uint32 rxspeed_histogram_32 = 83;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(83, this->rxspeed_histogram_32(), target);
  }

  // optional uint32 rxspeed_histogram_64 = 84;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(84, this->rxspeed_histogram_64(), target);
  }

  // optional uint32 rxspeed_histogram_128 = 85;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(85, this->rxspeed_histogram_128(), target);
  }

  // optional uint32 rxspeed_histogram_256 = 86;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(86, this->rxspeed_histogram_256(), target);
  }

  // optional uint32 rxspeed_histogram_512 = 87;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(87, this->rxspeed_histogram_512(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional uint32 rxspeed_histogram_1024 = 88;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(88, this->rxspeed_histogram_1024(), target);
  }

  // optional uint32 rxspeed_histogram_max = 89;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(89, this->rxspeed_histogram_max(), target);
  }

  // optional uint32 rxspeed_ntile_5th = 90;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(90, this->rxspeed_ntile_5th(), target);
  }

  // optional uint32 rxspeed_ntile_50th = 91;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(91, this->rxspeed_ntile_50th(), target);
  }

  // optional uint32 rxspeed_ntile_75th = 92;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(92, this->rxspeed_ntile_75th(), target);
  }

  // optional uint32 rxspeed_ntile_95th = 93;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(93, this->rxspeed_ntile_95th(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 rxspeed_ntile_98th = 94;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(94, this->rxspeed_ntile_98th(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSteamDatagramLinkLifetimeStats)
  return target;
}

size_t CMsgSteamDatagramLinkLifetimeStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSteamDatagramLinkLifetimeStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 packets_sent = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->packets_sent());
    }

    // optional uint64 kb_sent = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->kb_sent());
    }

    // optional uint64 packets_recv = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->packets_recv());
    }

    // optional uint64 kb_recv = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->kb_recv());
    }

    // optional uint64 packets_recv_sequenced = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->packets_recv_sequenced());
    }

    // optional uint64 packets_recv_dropped = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->packets_recv_dropped());
    }

    // optional uint64 packets_recv_out_of_order = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->packets_recv_out_of_order());
    }

    // optional uint64 packets_recv_duplicate = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->packets_recv_duplicate());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint64 packets_recv_lurch = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->packets_recv_lurch());
    }

    // optional uint32 quality_histogram_100 = 21;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality_histogram_100());
    }

    // optional uint32 quality_histogram_99 = 22;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality_histogram_99());
    }

    // optional uint32 quality_histogram_97 = 23;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality_histogram_97());
    }

    // optional uint32 quality_histogram_95 = 24;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality_histogram_95());
    }

    // optional uint32 quality_histogram_90 = 25;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality_histogram_90());
    }

    // optional uint32 quality_histogram_75 = 26;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality_histogram_75());
    }

    // optional uint32 quality_histogram_50 = 27;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality_histogram_50());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 quality_histogram_1 = 28;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality_histogram_1());
    }

    // optional uint32 quality_histogram_dead = 29;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality_histogram_dead());
    }

    // optional uint32 quality_ntile_2nd = 30;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality_ntile_2nd());
    }

    // optional uint32 quality_ntile_5th = 31;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality_ntile_5th());
    }

    // optional uint32 quality_ntile_25th = 32;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality_ntile_25th());
    }

    // optional uint32 quality_ntile_50th = 33;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality_ntile_50th());
    }

    // optional uint32 ping_histogram_25 = 41;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_histogram_25());
    }

    // optional uint32 ping_histogram_50 = 42;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_histogram_50());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional uint32 ping_histogram_75 = 43;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_histogram_75());
    }

    // optional uint32 ping_histogram_100 = 44;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_histogram_100());
    }

    // optional uint32 ping_histogram_125 = 45;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_histogram_125());
    }

    // optional uint32 ping_histogram_150 = 46;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_histogram_150());
    }

    // optional uint32 ping_histogram_200 = 47;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_histogram_200());
    }

    // optional uint32 ping_histogram_300 = 48;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_histogram_300());
    }

    // optional uint32 ping_histogram_max = 49;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_histogram_max());
    }

    // optional uint32 ping_ntile_5th = 50;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_ntile_5th());
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 ping_ntile_50th = 51;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_ntile_50th());
    }

    // optional uint32 ping_ntile_75th = 52;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_ntile_75th());
    }

    // optional uint32 ping_ntile_95th = 53;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_ntile_95th());
    }

    // optional uint32 ping_ntile_98th = 54;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_ntile_98th());
    }

    // optional uint32 jitter_histogram_negligible = 61;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jitter_histogram_negligible());
    }

    // optional uint32 jitter_histogram_1 = 62;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jitter_histogram_1());
    }

    // optional uint32 jitter_histogram_2 = 63;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jitter_histogram_2());
    }

    // optional uint32 jitter_histogram_5 = 64;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jitter_histogram_5());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 jitter_histogram_10 = 65;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jitter_histogram_10());
    }

    // optional uint32 jitter_histogram_20 = 66;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jitter_histogram_20());
    }

    // optional uint32 txspeed_max = 67;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->txspeed_max());
    }

    // optional uint32 txspeed_histogram_16 = 68;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->txspeed_histogram_16());
    }

    // optional uint32 txspeed_histogram_32 = 69;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->txspeed_histogram_32());
    }

    // optional uint32 txspeed_histogram_64 = 70;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->txspeed_histogram_64());
    }

    // optional uint32 txspeed_histogram_128 = 71;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->txspeed_histogram_128());
    }

    // optional uint32 rxspeed_ntile_98th = 94;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rxspeed_ntile_98th());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 txspeed_histogram_256 = 72;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->txspeed_histogram_256());
    }

    // optional uint32 txspeed_histogram_512 = 73;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->txspeed_histogram_512());
    }

    // optional uint32 txspeed_histogram_1024 = 74;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->txspeed_histogram_1024());
    }

    // optional uint32 txspeed_histogram_max = 75;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->txspeed_histogram_max());
    }

    // optional uint32 txspeed_ntile_5th = 76;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->txspeed_ntile_5th());
    }

    // optional uint32 txspeed_ntile_50th = 77;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->txspeed_ntile_50th());
    }

    // optional uint32 txspeed_ntile_75th = 78;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->txspeed_ntile_75th());
    }

    // optional uint32 txspeed_ntile_95th = 79;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->txspeed_ntile_95th());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional uint32 txspeed_ntile_98th = 80;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->txspeed_ntile_98th());
    }

    // optional uint32 rxspeed_max = 81;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rxspeed_max());
    }

    // optional uint32 rxspeed_histogram_16 = 82;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rxspeed_histogram_16());
    }

    // optional uint32 rxspeed_histogram_32 = 83;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rxspeed_histogram_32());
    }

    // optional uint32 rxspeed_histogram_64 = 84;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rxspeed_histogram_64());
    }

    // optional uint32 rxspeed_histogram_128 = 85;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rxspeed_histogram_128());
    }

    // optional uint32 rxspeed_histogram_256 = 86;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rxspeed_histogram_256());
    }

    // optional uint32 rxspeed_histogram_512 = 87;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rxspeed_histogram_512());
    }

  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 rxspeed_histogram_1024 = 88;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rxspeed_histogram_1024());
    }

    // optional uint32 rxspeed_histogram_max = 89;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rxspeed_histogram_max());
    }

    // optional uint32 rxspeed_ntile_5th = 90;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rxspeed_ntile_5th());
    }

    // optional uint32 rxspeed_ntile_50th = 91;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rxspeed_ntile_50th());
    }

    // optional uint32 rxspeed_ntile_75th = 92;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rxspeed_ntile_75th());
    }

    // optional uint32 rxspeed_ntile_95th = 93;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rxspeed_ntile_95th());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramLinkLifetimeStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSteamDatagramLinkLifetimeStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramLinkLifetimeStats* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSteamDatagramLinkLifetimeStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSteamDatagramLinkLifetimeStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSteamDatagramLinkLifetimeStats)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramLinkLifetimeStats::MergeFrom(const CMsgSteamDatagramLinkLifetimeStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSteamDatagramLinkLifetimeStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      packets_sent_ = from.packets_sent_;
    }
    if (cached_has_bits & 0x00000002u) {
      kb_sent_ = from.kb_sent_;
    }
    if (cached_has_bits & 0x00000004u) {
      packets_recv_ = from.packets_recv_;
    }
    if (cached_has_bits & 0x00000008u) {
      kb_recv_ = from.kb_recv_;
    }
    if (cached_has_bits & 0x00000010u) {
      packets_recv_sequenced_ = from.packets_recv_sequenced_;
    }
    if (cached_has_bits & 0x00000020u) {
      packets_recv_dropped_ = from.packets_recv_dropped_;
    }
    if (cached_has_bits & 0x00000040u) {
      packets_recv_out_of_order_ = from.packets_recv_out_of_order_;
    }
    if (cached_has_bits & 0x00000080u) {
      packets_recv_duplicate_ = from.packets_recv_duplicate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      packets_recv_lurch_ = from.packets_recv_lurch_;
    }
    if (cached_has_bits & 0x00000200u) {
      quality_histogram_100_ = from.quality_histogram_100_;
    }
    if (cached_has_bits & 0x00000400u) {
      quality_histogram_99_ = from.quality_histogram_99_;
    }
    if (cached_has_bits & 0x00000800u) {
      quality_histogram_97_ = from.quality_histogram_97_;
    }
    if (cached_has_bits & 0x00001000u) {
      quality_histogram_95_ = from.quality_histogram_95_;
    }
    if (cached_has_bits & 0x00002000u) {
      quality_histogram_90_ = from.quality_histogram_90_;
    }
    if (cached_has_bits & 0x00004000u) {
      quality_histogram_75_ = from.quality_histogram_75_;
    }
    if (cached_has_bits & 0x00008000u) {
      quality_histogram_50_ = from.quality_histogram_50_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      quality_histogram_1_ = from.quality_histogram_1_;
    }
    if (cached_has_bits & 0x00020000u) {
      quality_histogram_dead_ = from.quality_histogram_dead_;
    }
    if (cached_has_bits & 0x00040000u) {
      quality_ntile_2nd_ = from.quality_ntile_2nd_;
    }
    if (cached_has_bits & 0x00080000u) {
      quality_ntile_5th_ = from.quality_ntile_5th_;
    }
    if (cached_has_bits & 0x00100000u) {
      quality_ntile_25th_ = from.quality_ntile_25th_;
    }
    if (cached_has_bits & 0x00200000u) {
      quality_ntile_50th_ = from.quality_ntile_50th_;
    }
    if (cached_has_bits & 0x00400000u) {
      ping_histogram_25_ = from.ping_histogram_25_;
    }
    if (cached_has_bits & 0x00800000u) {
      ping_histogram_50_ = from.ping_histogram_50_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      ping_histogram_75_ = from.ping_histogram_75_;
    }
    if (cached_has_bits & 0x02000000u) {
      ping_histogram_100_ = from.ping_histogram_100_;
    }
    if (cached_has_bits & 0x04000000u) {
      ping_histogram_125_ = from.ping_histogram_125_;
    }
    if (cached_has_bits & 0x08000000u) {
      ping_histogram_150_ = from.ping_histogram_150_;
    }
    if (cached_has_bits & 0x10000000u) {
      ping_histogram_200_ = from.ping_histogram_200_;
    }
    if (cached_has_bits & 0x20000000u) {
      ping_histogram_300_ = from.ping_histogram_300_;
    }
    if (cached_has_bits & 0x40000000u) {
      ping_histogram_max_ = from.ping_histogram_max_;
    }
    if (cached_has_bits & 0x80000000u) {
      ping_ntile_5th_ = from.ping_ntile_5th_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ping_ntile_50th_ = from.ping_ntile_50th_;
    }
    if (cached_has_bits & 0x00000002u) {
      ping_ntile_75th_ = from.ping_ntile_75th_;
    }
    if (cached_has_bits & 0x00000004u) {
      ping_ntile_95th_ = from.ping_ntile_95th_;
    }
    if (cached_has_bits & 0x00000008u) {
      ping_ntile_98th_ = from.ping_ntile_98th_;
    }
    if (cached_has_bits & 0x00000010u) {
      jitter_histogram_negligible_ = from.jitter_histogram_negligible_;
    }
    if (cached_has_bits & 0x00000020u) {
      jitter_histogram_1_ = from.jitter_histogram_1_;
    }
    if (cached_has_bits & 0x00000040u) {
      jitter_histogram_2_ = from.jitter_histogram_2_;
    }
    if (cached_has_bits & 0x00000080u) {
      jitter_histogram_5_ = from.jitter_histogram_5_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      jitter_histogram_10_ = from.jitter_histogram_10_;
    }
    if (cached_has_bits & 0x00000200u) {
      jitter_histogram_20_ = from.jitter_histogram_20_;
    }
    if (cached_has_bits & 0x00000400u) {
      txspeed_max_ = from.txspeed_max_;
    }
    if (cached_has_bits & 0x00000800u) {
      txspeed_histogram_16_ = from.txspeed_histogram_16_;
    }
    if (cached_has_bits & 0x00001000u) {
      txspeed_histogram_32_ = from.txspeed_histogram_32_;
    }
    if (cached_has_bits & 0x00002000u) {
      txspeed_histogram_64_ = from.txspeed_histogram_64_;
    }
    if (cached_has_bits & 0x00004000u) {
      txspeed_histogram_128_ = from.txspeed_histogram_128_;
    }
    if (cached_has_bits & 0x00008000u) {
      rxspeed_ntile_98th_ = from.rxspeed_ntile_98th_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      txspeed_histogram_256_ = from.txspeed_histogram_256_;
    }
    if (cached_has_bits & 0x00020000u) {
      txspeed_histogram_512_ = from.txspeed_histogram_512_;
    }
    if (cached_has_bits & 0x00040000u) {
      txspeed_histogram_1024_ = from.txspeed_histogram_1024_;
    }
    if (cached_has_bits & 0x00080000u) {
      txspeed_histogram_max_ = from.txspeed_histogram_max_;
    }
    if (cached_has_bits & 0x00100000u) {
      txspeed_ntile_5th_ = from.txspeed_ntile_5th_;
    }
    if (cached_has_bits & 0x00200000u) {
      txspeed_ntile_50th_ = from.txspeed_ntile_50th_;
    }
    if (cached_has_bits & 0x00400000u) {
      txspeed_ntile_75th_ = from.txspeed_ntile_75th_;
    }
    if (cached_has_bits & 0x00800000u) {
      txspeed_ntile_95th_ = from.txspeed_ntile_95th_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      txspeed_ntile_98th_ = from.txspeed_ntile_98th_;
    }
    if (cached_has_bits & 0x02000000u) {
      rxspeed_max_ = from.rxspeed_max_;
    }
    if (cached_has_bits & 0x04000000u) {
      rxspeed_histogram_16_ = from.rxspeed_histogram_16_;
    }
    if (cached_has_bits & 0x08000000u) {
      rxspeed_histogram_32_ = from.rxspeed_histogram_32_;
    }
    if (cached_has_bits & 0x10000000u) {
      rxspeed_histogram_64_ = from.rxspeed_histogram_64_;
    }
    if (cached_has_bits & 0x20000000u) {
      rxspeed_histogram_128_ = from.rxspeed_histogram_128_;
    }
    if (cached_has_bits & 0x40000000u) {
      rxspeed_histogram_256_ = from.rxspeed_histogram_256_;
    }
    if (cached_has_bits & 0x80000000u) {
      rxspeed_histogram_512_ = from.rxspeed_histogram_512_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[2];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      rxspeed_histogram_1024_ = from.rxspeed_histogram_1024_;
    }
    if (cached_has_bits & 0x00000002u) {
      rxspeed_histogram_max_ = from.rxspeed_histogram_max_;
    }
    if (cached_has_bits & 0x00000004u) {
      rxspeed_ntile_5th_ = from.rxspeed_ntile_5th_;
    }
    if (cached_has_bits & 0x00000008u) {
      rxspeed_ntile_50th_ = from.rxspeed_ntile_50th_;
    }
    if (cached_has_bits & 0x00000010u) {
      rxspeed_ntile_75th_ = from.rxspeed_ntile_75th_;
    }
    if (cached_has_bits & 0x00000020u) {
      rxspeed_ntile_95th_ = from.rxspeed_ntile_95th_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
}

void CMsgSteamDatagramLinkLifetimeStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSteamDatagramLinkLifetimeStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramLinkLifetimeStats::CopyFrom(const CMsgSteamDatagramLinkLifetimeStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSteamDatagramLinkLifetimeStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramLinkLifetimeStats::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramLinkLifetimeStats::Swap(CMsgSteamDatagramLinkLifetimeStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramLinkLifetimeStats::InternalSwap(CMsgSteamDatagramLinkLifetimeStats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  swap(_has_bits_[2], other->_has_bits_[2]);
  swap(packets_sent_, other->packets_sent_);
  swap(kb_sent_, other->kb_sent_);
  swap(packets_recv_, other->packets_recv_);
  swap(kb_recv_, other->kb_recv_);
  swap(packets_recv_sequenced_, other->packets_recv_sequenced_);
  swap(packets_recv_dropped_, other->packets_recv_dropped_);
  swap(packets_recv_out_of_order_, other->packets_recv_out_of_order_);
  swap(packets_recv_duplicate_, other->packets_recv_duplicate_);
  swap(packets_recv_lurch_, other->packets_recv_lurch_);
  swap(quality_histogram_100_, other->quality_histogram_100_);
  swap(quality_histogram_99_, other->quality_histogram_99_);
  swap(quality_histogram_97_, other->quality_histogram_97_);
  swap(quality_histogram_95_, other->quality_histogram_95_);
  swap(quality_histogram_90_, other->quality_histogram_90_);
  swap(quality_histogram_75_, other->quality_histogram_75_);
  swap(quality_histogram_50_, other->quality_histogram_50_);
  swap(quality_histogram_1_, other->quality_histogram_1_);
  swap(quality_histogram_dead_, other->quality_histogram_dead_);
  swap(quality_ntile_2nd_, other->quality_ntile_2nd_);
  swap(quality_ntile_5th_, other->quality_ntile_5th_);
  swap(quality_ntile_25th_, other->quality_ntile_25th_);
  swap(quality_ntile_50th_, other->quality_ntile_50th_);
  swap(ping_histogram_25_, other->ping_histogram_25_);
  swap(ping_histogram_50_, other->ping_histogram_50_);
  swap(ping_histogram_75_, other->ping_histogram_75_);
  swap(ping_histogram_100_, other->ping_histogram_100_);
  swap(ping_histogram_125_, other->ping_histogram_125_);
  swap(ping_histogram_150_, other->ping_histogram_150_);
  swap(ping_histogram_200_, other->ping_histogram_200_);
  swap(ping_histogram_300_, other->ping_histogram_300_);
  swap(ping_histogram_max_, other->ping_histogram_max_);
  swap(ping_ntile_5th_, other->ping_ntile_5th_);
  swap(ping_ntile_50th_, other->ping_ntile_50th_);
  swap(ping_ntile_75th_, other->ping_ntile_75th_);
  swap(ping_ntile_95th_, other->ping_ntile_95th_);
  swap(ping_ntile_98th_, other->ping_ntile_98th_);
  swap(jitter_histogram_negligible_, other->jitter_histogram_negligible_);
  swap(jitter_histogram_1_, other->jitter_histogram_1_);
  swap(jitter_histogram_2_, other->jitter_histogram_2_);
  swap(jitter_histogram_5_, other->jitter_histogram_5_);
  swap(jitter_histogram_10_, other->jitter_histogram_10_);
  swap(jitter_histogram_20_, other->jitter_histogram_20_);
  swap(txspeed_max_, other->txspeed_max_);
  swap(txspeed_histogram_16_, other->txspeed_histogram_16_);
  swap(txspeed_histogram_32_, other->txspeed_histogram_32_);
  swap(txspeed_histogram_64_, other->txspeed_histogram_64_);
  swap(txspeed_histogram_128_, other->txspeed_histogram_128_);
  swap(rxspeed_ntile_98th_, other->rxspeed_ntile_98th_);
  swap(txspeed_histogram_256_, other->txspeed_histogram_256_);
  swap(txspeed_histogram_512_, other->txspeed_histogram_512_);
  swap(txspeed_histogram_1024_, other->txspeed_histogram_1024_);
  swap(txspeed_histogram_max_, other->txspeed_histogram_max_);
  swap(txspeed_ntile_5th_, other->txspeed_ntile_5th_);
  swap(txspeed_ntile_50th_, other->txspeed_ntile_50th_);
  swap(txspeed_ntile_75th_, other->txspeed_ntile_75th_);
  swap(txspeed_ntile_95th_, other->txspeed_ntile_95th_);
  swap(txspeed_ntile_98th_, other->txspeed_ntile_98th_);
  swap(rxspeed_max_, other->rxspeed_max_);
  swap(rxspeed_histogram_16_, other->rxspeed_histogram_16_);
  swap(rxspeed_histogram_32_, other->rxspeed_histogram_32_);
  swap(rxspeed_histogram_64_, other->rxspeed_histogram_64_);
  swap(rxspeed_histogram_128_, other->rxspeed_histogram_128_);
  swap(rxspeed_histogram_256_, other->rxspeed_histogram_256_);
  swap(rxspeed_histogram_512_, other->rxspeed_histogram_512_);
  swap(rxspeed_histogram_1024_, other->rxspeed_histogram_1024_);
  swap(rxspeed_histogram_max_, other->rxspeed_histogram_max_);
  swap(rxspeed_ntile_5th_, other->rxspeed_ntile_5th_);
  swap(rxspeed_ntile_50th_, other->rxspeed_ntile_50th_);
  swap(rxspeed_ntile_75th_, other->rxspeed_ntile_75th_);
  swap(rxspeed_ntile_95th_, other->rxspeed_ntile_95th_);
}

::google::protobuf::Metadata CMsgSteamDatagramLinkLifetimeStats::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steamnetworkingsockets_5fmessages_2eproto);
  return ::file_level_metadata_steamnetworkingsockets_5fmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramConnectionQuality::InitAsDefaultInstance() {
  ::proto::steam::_CMsgSteamDatagramConnectionQuality_default_instance_._instance.get_mutable()->instantaneous_ = const_cast< ::proto::steam::CMsgSteamDatagramLinkInstantaneousStats*>(
      ::proto::steam::CMsgSteamDatagramLinkInstantaneousStats::internal_default_instance());
  ::proto::steam::_CMsgSteamDatagramConnectionQuality_default_instance_._instance.get_mutable()->lifetime_ = const_cast< ::proto::steam::CMsgSteamDatagramLinkLifetimeStats*>(
      ::proto::steam::CMsgSteamDatagramLinkLifetimeStats::internal_default_instance());
}
class CMsgSteamDatagramConnectionQuality::HasBitSetters {
 public:
  static const ::proto::steam::CMsgSteamDatagramLinkInstantaneousStats& instantaneous(const CMsgSteamDatagramConnectionQuality* msg);
  static void set_has_instantaneous(CMsgSteamDatagramConnectionQuality* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::proto::steam::CMsgSteamDatagramLinkLifetimeStats& lifetime(const CMsgSteamDatagramConnectionQuality* msg);
  static void set_has_lifetime(CMsgSteamDatagramConnectionQuality* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

const ::proto::steam::CMsgSteamDatagramLinkInstantaneousStats&
CMsgSteamDatagramConnectionQuality::HasBitSetters::instantaneous(const CMsgSteamDatagramConnectionQuality* msg) {
  return *msg->instantaneous_;
}
const ::proto::steam::CMsgSteamDatagramLinkLifetimeStats&
CMsgSteamDatagramConnectionQuality::HasBitSetters::lifetime(const CMsgSteamDatagramConnectionQuality* msg) {
  return *msg->lifetime_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramConnectionQuality::kInstantaneousFieldNumber;
const int CMsgSteamDatagramConnectionQuality::kLifetimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramConnectionQuality::CMsgSteamDatagramConnectionQuality()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSteamDatagramConnectionQuality)
}
CMsgSteamDatagramConnectionQuality::CMsgSteamDatagramConnectionQuality(const CMsgSteamDatagramConnectionQuality& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_instantaneous()) {
    instantaneous_ = new ::proto::steam::CMsgSteamDatagramLinkInstantaneousStats(*from.instantaneous_);
  } else {
    instantaneous_ = nullptr;
  }
  if (from.has_lifetime()) {
    lifetime_ = new ::proto::steam::CMsgSteamDatagramLinkLifetimeStats(*from.lifetime_);
  } else {
    lifetime_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSteamDatagramConnectionQuality)
}

void CMsgSteamDatagramConnectionQuality::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgSteamDatagramConnectionQuality_steamnetworkingsockets_5fmessages_2eproto.base);
  ::memset(&instantaneous_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lifetime_) -
      reinterpret_cast<char*>(&instantaneous_)) + sizeof(lifetime_));
}

CMsgSteamDatagramConnectionQuality::~CMsgSteamDatagramConnectionQuality() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSteamDatagramConnectionQuality)
  SharedDtor();
}

void CMsgSteamDatagramConnectionQuality::SharedDtor() {
  if (this != internal_default_instance()) delete instantaneous_;
  if (this != internal_default_instance()) delete lifetime_;
}

void CMsgSteamDatagramConnectionQuality::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamDatagramConnectionQuality& CMsgSteamDatagramConnectionQuality::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSteamDatagramConnectionQuality_steamnetworkingsockets_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamDatagramConnectionQuality::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSteamDatagramConnectionQuality)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(instantaneous_ != nullptr);
      instantaneous_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(lifetime_ != nullptr);
      lifetime_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSteamDatagramConnectionQuality::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSteamDatagramConnectionQuality*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.steam.CMsgSteamDatagramLinkInstantaneousStats instantaneous = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::steam::CMsgSteamDatagramLinkInstantaneousStats::_InternalParse;
        object = msg->mutable_instantaneous();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .proto.steam.CMsgSteamDatagramLinkLifetimeStats lifetime = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::steam::CMsgSteamDatagramLinkLifetimeStats::_InternalParse;
        object = msg->mutable_lifetime();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSteamDatagramConnectionQuality::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSteamDatagramConnectionQuality)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.steam.CMsgSteamDatagramLinkInstantaneousStats instantaneous = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_instantaneous()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CMsgSteamDatagramLinkLifetimeStats lifetime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lifetime()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSteamDatagramConnectionQuality)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSteamDatagramConnectionQuality)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSteamDatagramConnectionQuality::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSteamDatagramConnectionQuality)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.CMsgSteamDatagramLinkInstantaneousStats instantaneous = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::instantaneous(this), output);
  }

  // optional .proto.steam.CMsgSteamDatagramLinkLifetimeStats lifetime = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::lifetime(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSteamDatagramConnectionQuality)
}

::google::protobuf::uint8* CMsgSteamDatagramConnectionQuality::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSteamDatagramConnectionQuality)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.CMsgSteamDatagramLinkInstantaneousStats instantaneous = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::instantaneous(this), target);
  }

  // optional .proto.steam.CMsgSteamDatagramLinkLifetimeStats lifetime = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::lifetime(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSteamDatagramConnectionQuality)
  return target;
}

size_t CMsgSteamDatagramConnectionQuality::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSteamDatagramConnectionQuality)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .proto.steam.CMsgSteamDatagramLinkInstantaneousStats instantaneous = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *instantaneous_);
    }

    // optional .proto.steam.CMsgSteamDatagramLinkLifetimeStats lifetime = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *lifetime_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramConnectionQuality::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSteamDatagramConnectionQuality)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramConnectionQuality* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSteamDatagramConnectionQuality>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSteamDatagramConnectionQuality)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSteamDatagramConnectionQuality)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramConnectionQuality::MergeFrom(const CMsgSteamDatagramConnectionQuality& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSteamDatagramConnectionQuality)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_instantaneous()->::proto::steam::CMsgSteamDatagramLinkInstantaneousStats::MergeFrom(from.instantaneous());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_lifetime()->::proto::steam::CMsgSteamDatagramLinkLifetimeStats::MergeFrom(from.lifetime());
    }
  }
}

void CMsgSteamDatagramConnectionQuality::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSteamDatagramConnectionQuality)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramConnectionQuality::CopyFrom(const CMsgSteamDatagramConnectionQuality& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSteamDatagramConnectionQuality)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramConnectionQuality::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramConnectionQuality::Swap(CMsgSteamDatagramConnectionQuality* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramConnectionQuality::InternalSwap(CMsgSteamDatagramConnectionQuality* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(instantaneous_, other->instantaneous_);
  swap(lifetime_, other->lifetime_);
}

::google::protobuf::Metadata CMsgSteamDatagramConnectionQuality::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steamnetworkingsockets_5fmessages_2eproto);
  return ::file_level_metadata_steamnetworkingsockets_5fmessages_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace steam
}  // namespace proto
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSteamDatagramSessionCryptInfo* Arena::CreateMaybeMessage< ::proto::steam::CMsgSteamDatagramSessionCryptInfo >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSteamDatagramSessionCryptInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSteamDatagramSessionCryptInfoSigned* Arena::CreateMaybeMessage< ::proto::steam::CMsgSteamDatagramSessionCryptInfoSigned >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSteamDatagramSessionCryptInfoSigned >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSteamDatagramDiagnostic* Arena::CreateMaybeMessage< ::proto::steam::CMsgSteamDatagramDiagnostic >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSteamDatagramDiagnostic >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSteamDatagramLinkInstantaneousStats* Arena::CreateMaybeMessage< ::proto::steam::CMsgSteamDatagramLinkInstantaneousStats >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSteamDatagramLinkInstantaneousStats >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSteamDatagramLinkLifetimeStats* Arena::CreateMaybeMessage< ::proto::steam::CMsgSteamDatagramLinkLifetimeStats >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSteamDatagramLinkLifetimeStats >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSteamDatagramConnectionQuality* Arena::CreateMaybeMessage< ::proto::steam::CMsgSteamDatagramConnectionQuality >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSteamDatagramConnectionQuality >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
