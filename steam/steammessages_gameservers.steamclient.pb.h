// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_gameservers.steamclient.proto

#ifndef PROTOBUF_INCLUDED_steammessages_5fgameservers_2esteamclient_2eproto
#define PROTOBUF_INCLUDED_steammessages_5fgameservers_2esteamclient_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages_unified_base.steamclient.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5fgameservers_2esteamclient_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5fgameservers_2esteamclient_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_steammessages_5fgameservers_2esteamclient_2eproto();
namespace proto {
namespace steam {
class CGameServers_GetServerIPsBySteamID_Request;
class CGameServers_GetServerIPsBySteamID_RequestDefaultTypeInternal;
extern CGameServers_GetServerIPsBySteamID_RequestDefaultTypeInternal _CGameServers_GetServerIPsBySteamID_Request_default_instance_;
class CGameServers_GetServerList_Request;
class CGameServers_GetServerList_RequestDefaultTypeInternal;
extern CGameServers_GetServerList_RequestDefaultTypeInternal _CGameServers_GetServerList_Request_default_instance_;
class CGameServers_GetServerList_Response;
class CGameServers_GetServerList_ResponseDefaultTypeInternal;
extern CGameServers_GetServerList_ResponseDefaultTypeInternal _CGameServers_GetServerList_Response_default_instance_;
class CGameServers_GetServerList_Response_Server;
class CGameServers_GetServerList_Response_ServerDefaultTypeInternal;
extern CGameServers_GetServerList_Response_ServerDefaultTypeInternal _CGameServers_GetServerList_Response_Server_default_instance_;
class CGameServers_GetServerSteamIDsByIP_Request;
class CGameServers_GetServerSteamIDsByIP_RequestDefaultTypeInternal;
extern CGameServers_GetServerSteamIDsByIP_RequestDefaultTypeInternal _CGameServers_GetServerSteamIDsByIP_Request_default_instance_;
class CGameServers_IPsWithSteamIDs_Response;
class CGameServers_IPsWithSteamIDs_ResponseDefaultTypeInternal;
extern CGameServers_IPsWithSteamIDs_ResponseDefaultTypeInternal _CGameServers_IPsWithSteamIDs_Response_default_instance_;
class CGameServers_IPsWithSteamIDs_Response_Server;
class CGameServers_IPsWithSteamIDs_Response_ServerDefaultTypeInternal;
extern CGameServers_IPsWithSteamIDs_Response_ServerDefaultTypeInternal _CGameServers_IPsWithSteamIDs_Response_Server_default_instance_;
}  // namespace steam
}  // namespace proto
namespace google {
namespace protobuf {
template<> ::proto::steam::CGameServers_GetServerIPsBySteamID_Request* Arena::CreateMaybeMessage<::proto::steam::CGameServers_GetServerIPsBySteamID_Request>(Arena*);
template<> ::proto::steam::CGameServers_GetServerList_Request* Arena::CreateMaybeMessage<::proto::steam::CGameServers_GetServerList_Request>(Arena*);
template<> ::proto::steam::CGameServers_GetServerList_Response* Arena::CreateMaybeMessage<::proto::steam::CGameServers_GetServerList_Response>(Arena*);
template<> ::proto::steam::CGameServers_GetServerList_Response_Server* Arena::CreateMaybeMessage<::proto::steam::CGameServers_GetServerList_Response_Server>(Arena*);
template<> ::proto::steam::CGameServers_GetServerSteamIDsByIP_Request* Arena::CreateMaybeMessage<::proto::steam::CGameServers_GetServerSteamIDsByIP_Request>(Arena*);
template<> ::proto::steam::CGameServers_IPsWithSteamIDs_Response* Arena::CreateMaybeMessage<::proto::steam::CGameServers_IPsWithSteamIDs_Response>(Arena*);
template<> ::proto::steam::CGameServers_IPsWithSteamIDs_Response_Server* Arena::CreateMaybeMessage<::proto::steam::CGameServers_IPsWithSteamIDs_Response_Server>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace proto {
namespace steam {

// ===================================================================

class CGameServers_GetServerList_Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CGameServers_GetServerList_Request) */ {
 public:
  CGameServers_GetServerList_Request();
  virtual ~CGameServers_GetServerList_Request();

  CGameServers_GetServerList_Request(const CGameServers_GetServerList_Request& from);

  inline CGameServers_GetServerList_Request& operator=(const CGameServers_GetServerList_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CGameServers_GetServerList_Request(CGameServers_GetServerList_Request&& from) noexcept
    : CGameServers_GetServerList_Request() {
    *this = ::std::move(from);
  }

  inline CGameServers_GetServerList_Request& operator=(CGameServers_GetServerList_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CGameServers_GetServerList_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CGameServers_GetServerList_Request* internal_default_instance() {
    return reinterpret_cast<const CGameServers_GetServerList_Request*>(
               &_CGameServers_GetServerList_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CGameServers_GetServerList_Request* other);
  friend void swap(CGameServers_GetServerList_Request& a, CGameServers_GetServerList_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CGameServers_GetServerList_Request* New() const final {
    return CreateMaybeMessage<CGameServers_GetServerList_Request>(nullptr);
  }

  CGameServers_GetServerList_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CGameServers_GetServerList_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CGameServers_GetServerList_Request& from);
  void MergeFrom(const CGameServers_GetServerList_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameServers_GetServerList_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string filter = 1 [(.proto.steam.description) = "Query filter string."];
  bool has_filter() const;
  void clear_filter();
  static const int kFilterFieldNumber = 1;
  const ::std::string& filter() const;
  void set_filter(const ::std::string& value);
  #if LANG_CXX11
  void set_filter(::std::string&& value);
  #endif
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  ::std::string* mutable_filter();
  ::std::string* release_filter();
  void set_allocated_filter(::std::string* filter);

  // optional uint32 limit = 2 [default = 100, (.proto.steam.description) = "The maximum number of servers to return in the response"];
  bool has_limit() const;
  void clear_limit();
  static const int kLimitFieldNumber = 2;
  ::google::protobuf::uint32 limit() const;
  void set_limit(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CGameServers_GetServerList_Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr filter_;
  ::google::protobuf::uint32 limit_;
  friend struct ::TableStruct_steammessages_5fgameservers_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CGameServers_GetServerList_Response_Server final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CGameServers_GetServerList_Response.Server) */ {
 public:
  CGameServers_GetServerList_Response_Server();
  virtual ~CGameServers_GetServerList_Response_Server();

  CGameServers_GetServerList_Response_Server(const CGameServers_GetServerList_Response_Server& from);

  inline CGameServers_GetServerList_Response_Server& operator=(const CGameServers_GetServerList_Response_Server& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CGameServers_GetServerList_Response_Server(CGameServers_GetServerList_Response_Server&& from) noexcept
    : CGameServers_GetServerList_Response_Server() {
    *this = ::std::move(from);
  }

  inline CGameServers_GetServerList_Response_Server& operator=(CGameServers_GetServerList_Response_Server&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CGameServers_GetServerList_Response_Server& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CGameServers_GetServerList_Response_Server* internal_default_instance() {
    return reinterpret_cast<const CGameServers_GetServerList_Response_Server*>(
               &_CGameServers_GetServerList_Response_Server_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CGameServers_GetServerList_Response_Server* other);
  friend void swap(CGameServers_GetServerList_Response_Server& a, CGameServers_GetServerList_Response_Server& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CGameServers_GetServerList_Response_Server* New() const final {
    return CreateMaybeMessage<CGameServers_GetServerList_Response_Server>(nullptr);
  }

  CGameServers_GetServerList_Response_Server* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CGameServers_GetServerList_Response_Server>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CGameServers_GetServerList_Response_Server& from);
  void MergeFrom(const CGameServers_GetServerList_Response_Server& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameServers_GetServerList_Response_Server* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string addr = 1 [(.proto.steam.description) = "The server\'s IP and query port"];
  bool has_addr() const;
  void clear_addr();
  static const int kAddrFieldNumber = 1;
  const ::std::string& addr() const;
  void set_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_addr(::std::string&& value);
  #endif
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  ::std::string* mutable_addr();
  ::std::string* release_addr();
  void set_allocated_addr(::std::string* addr);

  // optional string name = 5;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 5;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string gamedir = 7;
  bool has_gamedir() const;
  void clear_gamedir();
  static const int kGamedirFieldNumber = 7;
  const ::std::string& gamedir() const;
  void set_gamedir(const ::std::string& value);
  #if LANG_CXX11
  void set_gamedir(::std::string&& value);
  #endif
  void set_gamedir(const char* value);
  void set_gamedir(const char* value, size_t size);
  ::std::string* mutable_gamedir();
  ::std::string* release_gamedir();
  void set_allocated_gamedir(::std::string* gamedir);

  // optional string version = 8;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 8;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // optional string product = 9;
  bool has_product() const;
  void clear_product();
  static const int kProductFieldNumber = 9;
  const ::std::string& product() const;
  void set_product(const ::std::string& value);
  #if LANG_CXX11
  void set_product(::std::string&& value);
  #endif
  void set_product(const char* value);
  void set_product(const char* value, size_t size);
  ::std::string* mutable_product();
  ::std::string* release_product();
  void set_allocated_product(::std::string* product);

  // optional string map = 14;
  bool has_map() const;
  void clear_map();
  static const int kMapFieldNumber = 14;
  const ::std::string& map() const;
  void set_map(const ::std::string& value);
  #if LANG_CXX11
  void set_map(::std::string&& value);
  #endif
  void set_map(const char* value);
  void set_map(const char* value, size_t size);
  ::std::string* mutable_map();
  ::std::string* release_map();
  void set_allocated_map(::std::string* map);

  // optional string os = 17;
  bool has_os() const;
  void clear_os();
  static const int kOsFieldNumber = 17;
  const ::std::string& os() const;
  void set_os(const ::std::string& value);
  #if LANG_CXX11
  void set_os(::std::string&& value);
  #endif
  void set_os(const char* value);
  void set_os(const char* value, size_t size);
  ::std::string* mutable_os();
  ::std::string* release_os();
  void set_allocated_os(::std::string* os);

  // optional string gametype = 18;
  bool has_gametype() const;
  void clear_gametype();
  static const int kGametypeFieldNumber = 18;
  const ::std::string& gametype() const;
  void set_gametype(const ::std::string& value);
  #if LANG_CXX11
  void set_gametype(::std::string&& value);
  #endif
  void set_gametype(const char* value);
  void set_gametype(const char* value, size_t size);
  ::std::string* mutable_gametype();
  ::std::string* release_gametype();
  void set_allocated_gametype(::std::string* gametype);

  // optional uint32 gameport = 2;
  bool has_gameport() const;
  void clear_gameport();
  static const int kGameportFieldNumber = 2;
  ::google::protobuf::uint32 gameport() const;
  void set_gameport(::google::protobuf::uint32 value);

  // optional uint32 specport = 3;
  bool has_specport() const;
  void clear_specport();
  static const int kSpecportFieldNumber = 3;
  ::google::protobuf::uint32 specport() const;
  void set_specport(::google::protobuf::uint32 value);

  // optional fixed64 steamid = 4;
  bool has_steamid() const;
  void clear_steamid();
  static const int kSteamidFieldNumber = 4;
  ::google::protobuf::uint64 steamid() const;
  void set_steamid(::google::protobuf::uint64 value);

  // optional uint32 appid = 6;
  bool has_appid() const;
  void clear_appid();
  static const int kAppidFieldNumber = 6;
  ::google::protobuf::uint32 appid() const;
  void set_appid(::google::protobuf::uint32 value);

  // optional int32 region = 10;
  bool has_region() const;
  void clear_region();
  static const int kRegionFieldNumber = 10;
  ::google::protobuf::int32 region() const;
  void set_region(::google::protobuf::int32 value);

  // optional int32 players = 11;
  bool has_players() const;
  void clear_players();
  static const int kPlayersFieldNumber = 11;
  ::google::protobuf::int32 players() const;
  void set_players(::google::protobuf::int32 value);

  // optional int32 max_players = 12;
  bool has_max_players() const;
  void clear_max_players();
  static const int kMaxPlayersFieldNumber = 12;
  ::google::protobuf::int32 max_players() const;
  void set_max_players(::google::protobuf::int32 value);

  // optional int32 bots = 13;
  bool has_bots() const;
  void clear_bots();
  static const int kBotsFieldNumber = 13;
  ::google::protobuf::int32 bots() const;
  void set_bots(::google::protobuf::int32 value);

  // optional bool secure = 15;
  bool has_secure() const;
  void clear_secure();
  static const int kSecureFieldNumber = 15;
  bool secure() const;
  void set_secure(bool value);

  // optional bool dedicated = 16;
  bool has_dedicated() const;
  void clear_dedicated();
  static const int kDedicatedFieldNumber = 16;
  bool dedicated() const;
  void set_dedicated(bool value);

  // @@protoc_insertion_point(class_scope:proto.steam.CGameServers_GetServerList_Response.Server)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr addr_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr gamedir_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::internal::ArenaStringPtr product_;
  ::google::protobuf::internal::ArenaStringPtr map_;
  ::google::protobuf::internal::ArenaStringPtr os_;
  ::google::protobuf::internal::ArenaStringPtr gametype_;
  ::google::protobuf::uint32 gameport_;
  ::google::protobuf::uint32 specport_;
  ::google::protobuf::uint64 steamid_;
  ::google::protobuf::uint32 appid_;
  ::google::protobuf::int32 region_;
  ::google::protobuf::int32 players_;
  ::google::protobuf::int32 max_players_;
  ::google::protobuf::int32 bots_;
  bool secure_;
  bool dedicated_;
  friend struct ::TableStruct_steammessages_5fgameservers_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CGameServers_GetServerList_Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CGameServers_GetServerList_Response) */ {
 public:
  CGameServers_GetServerList_Response();
  virtual ~CGameServers_GetServerList_Response();

  CGameServers_GetServerList_Response(const CGameServers_GetServerList_Response& from);

  inline CGameServers_GetServerList_Response& operator=(const CGameServers_GetServerList_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CGameServers_GetServerList_Response(CGameServers_GetServerList_Response&& from) noexcept
    : CGameServers_GetServerList_Response() {
    *this = ::std::move(from);
  }

  inline CGameServers_GetServerList_Response& operator=(CGameServers_GetServerList_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CGameServers_GetServerList_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CGameServers_GetServerList_Response* internal_default_instance() {
    return reinterpret_cast<const CGameServers_GetServerList_Response*>(
               &_CGameServers_GetServerList_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CGameServers_GetServerList_Response* other);
  friend void swap(CGameServers_GetServerList_Response& a, CGameServers_GetServerList_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CGameServers_GetServerList_Response* New() const final {
    return CreateMaybeMessage<CGameServers_GetServerList_Response>(nullptr);
  }

  CGameServers_GetServerList_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CGameServers_GetServerList_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CGameServers_GetServerList_Response& from);
  void MergeFrom(const CGameServers_GetServerList_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameServers_GetServerList_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CGameServers_GetServerList_Response_Server Server;

  // accessors -------------------------------------------------------

  // repeated .proto.steam.CGameServers_GetServerList_Response.Server servers = 1 [(.proto.steam.description) = "List of servers matching the filter"];
  int servers_size() const;
  void clear_servers();
  static const int kServersFieldNumber = 1;
  ::proto::steam::CGameServers_GetServerList_Response_Server* mutable_servers(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CGameServers_GetServerList_Response_Server >*
      mutable_servers();
  const ::proto::steam::CGameServers_GetServerList_Response_Server& servers(int index) const;
  ::proto::steam::CGameServers_GetServerList_Response_Server* add_servers();
  const ::google::protobuf::RepeatedPtrField< ::proto::steam::CGameServers_GetServerList_Response_Server >&
      servers() const;

  // @@protoc_insertion_point(class_scope:proto.steam.CGameServers_GetServerList_Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CGameServers_GetServerList_Response_Server > servers_;
  friend struct ::TableStruct_steammessages_5fgameservers_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CGameServers_GetServerSteamIDsByIP_Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CGameServers_GetServerSteamIDsByIP_Request) */ {
 public:
  CGameServers_GetServerSteamIDsByIP_Request();
  virtual ~CGameServers_GetServerSteamIDsByIP_Request();

  CGameServers_GetServerSteamIDsByIP_Request(const CGameServers_GetServerSteamIDsByIP_Request& from);

  inline CGameServers_GetServerSteamIDsByIP_Request& operator=(const CGameServers_GetServerSteamIDsByIP_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CGameServers_GetServerSteamIDsByIP_Request(CGameServers_GetServerSteamIDsByIP_Request&& from) noexcept
    : CGameServers_GetServerSteamIDsByIP_Request() {
    *this = ::std::move(from);
  }

  inline CGameServers_GetServerSteamIDsByIP_Request& operator=(CGameServers_GetServerSteamIDsByIP_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CGameServers_GetServerSteamIDsByIP_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CGameServers_GetServerSteamIDsByIP_Request* internal_default_instance() {
    return reinterpret_cast<const CGameServers_GetServerSteamIDsByIP_Request*>(
               &_CGameServers_GetServerSteamIDsByIP_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(CGameServers_GetServerSteamIDsByIP_Request* other);
  friend void swap(CGameServers_GetServerSteamIDsByIP_Request& a, CGameServers_GetServerSteamIDsByIP_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CGameServers_GetServerSteamIDsByIP_Request* New() const final {
    return CreateMaybeMessage<CGameServers_GetServerSteamIDsByIP_Request>(nullptr);
  }

  CGameServers_GetServerSteamIDsByIP_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CGameServers_GetServerSteamIDsByIP_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CGameServers_GetServerSteamIDsByIP_Request& from);
  void MergeFrom(const CGameServers_GetServerSteamIDsByIP_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameServers_GetServerSteamIDsByIP_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string server_ips = 1;
  int server_ips_size() const;
  void clear_server_ips();
  static const int kServerIpsFieldNumber = 1;
  const ::std::string& server_ips(int index) const;
  ::std::string* mutable_server_ips(int index);
  void set_server_ips(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_server_ips(int index, ::std::string&& value);
  #endif
  void set_server_ips(int index, const char* value);
  void set_server_ips(int index, const char* value, size_t size);
  ::std::string* add_server_ips();
  void add_server_ips(const ::std::string& value);
  #if LANG_CXX11
  void add_server_ips(::std::string&& value);
  #endif
  void add_server_ips(const char* value);
  void add_server_ips(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& server_ips() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_server_ips();

  // @@protoc_insertion_point(class_scope:proto.steam.CGameServers_GetServerSteamIDsByIP_Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField<::std::string> server_ips_;
  friend struct ::TableStruct_steammessages_5fgameservers_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CGameServers_IPsWithSteamIDs_Response_Server final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CGameServers_IPsWithSteamIDs_Response.Server) */ {
 public:
  CGameServers_IPsWithSteamIDs_Response_Server();
  virtual ~CGameServers_IPsWithSteamIDs_Response_Server();

  CGameServers_IPsWithSteamIDs_Response_Server(const CGameServers_IPsWithSteamIDs_Response_Server& from);

  inline CGameServers_IPsWithSteamIDs_Response_Server& operator=(const CGameServers_IPsWithSteamIDs_Response_Server& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CGameServers_IPsWithSteamIDs_Response_Server(CGameServers_IPsWithSteamIDs_Response_Server&& from) noexcept
    : CGameServers_IPsWithSteamIDs_Response_Server() {
    *this = ::std::move(from);
  }

  inline CGameServers_IPsWithSteamIDs_Response_Server& operator=(CGameServers_IPsWithSteamIDs_Response_Server&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CGameServers_IPsWithSteamIDs_Response_Server& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CGameServers_IPsWithSteamIDs_Response_Server* internal_default_instance() {
    return reinterpret_cast<const CGameServers_IPsWithSteamIDs_Response_Server*>(
               &_CGameServers_IPsWithSteamIDs_Response_Server_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(CGameServers_IPsWithSteamIDs_Response_Server* other);
  friend void swap(CGameServers_IPsWithSteamIDs_Response_Server& a, CGameServers_IPsWithSteamIDs_Response_Server& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CGameServers_IPsWithSteamIDs_Response_Server* New() const final {
    return CreateMaybeMessage<CGameServers_IPsWithSteamIDs_Response_Server>(nullptr);
  }

  CGameServers_IPsWithSteamIDs_Response_Server* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CGameServers_IPsWithSteamIDs_Response_Server>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CGameServers_IPsWithSteamIDs_Response_Server& from);
  void MergeFrom(const CGameServers_IPsWithSteamIDs_Response_Server& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameServers_IPsWithSteamIDs_Response_Server* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string addr = 1;
  bool has_addr() const;
  void clear_addr();
  static const int kAddrFieldNumber = 1;
  const ::std::string& addr() const;
  void set_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_addr(::std::string&& value);
  #endif
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  ::std::string* mutable_addr();
  ::std::string* release_addr();
  void set_allocated_addr(::std::string* addr);

  // optional fixed64 steamid = 2;
  bool has_steamid() const;
  void clear_steamid();
  static const int kSteamidFieldNumber = 2;
  ::google::protobuf::uint64 steamid() const;
  void set_steamid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CGameServers_IPsWithSteamIDs_Response.Server)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr addr_;
  ::google::protobuf::uint64 steamid_;
  friend struct ::TableStruct_steammessages_5fgameservers_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CGameServers_IPsWithSteamIDs_Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CGameServers_IPsWithSteamIDs_Response) */ {
 public:
  CGameServers_IPsWithSteamIDs_Response();
  virtual ~CGameServers_IPsWithSteamIDs_Response();

  CGameServers_IPsWithSteamIDs_Response(const CGameServers_IPsWithSteamIDs_Response& from);

  inline CGameServers_IPsWithSteamIDs_Response& operator=(const CGameServers_IPsWithSteamIDs_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CGameServers_IPsWithSteamIDs_Response(CGameServers_IPsWithSteamIDs_Response&& from) noexcept
    : CGameServers_IPsWithSteamIDs_Response() {
    *this = ::std::move(from);
  }

  inline CGameServers_IPsWithSteamIDs_Response& operator=(CGameServers_IPsWithSteamIDs_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CGameServers_IPsWithSteamIDs_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CGameServers_IPsWithSteamIDs_Response* internal_default_instance() {
    return reinterpret_cast<const CGameServers_IPsWithSteamIDs_Response*>(
               &_CGameServers_IPsWithSteamIDs_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(CGameServers_IPsWithSteamIDs_Response* other);
  friend void swap(CGameServers_IPsWithSteamIDs_Response& a, CGameServers_IPsWithSteamIDs_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CGameServers_IPsWithSteamIDs_Response* New() const final {
    return CreateMaybeMessage<CGameServers_IPsWithSteamIDs_Response>(nullptr);
  }

  CGameServers_IPsWithSteamIDs_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CGameServers_IPsWithSteamIDs_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CGameServers_IPsWithSteamIDs_Response& from);
  void MergeFrom(const CGameServers_IPsWithSteamIDs_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameServers_IPsWithSteamIDs_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CGameServers_IPsWithSteamIDs_Response_Server Server;

  // accessors -------------------------------------------------------

  // repeated .proto.steam.CGameServers_IPsWithSteamIDs_Response.Server servers = 1;
  int servers_size() const;
  void clear_servers();
  static const int kServersFieldNumber = 1;
  ::proto::steam::CGameServers_IPsWithSteamIDs_Response_Server* mutable_servers(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CGameServers_IPsWithSteamIDs_Response_Server >*
      mutable_servers();
  const ::proto::steam::CGameServers_IPsWithSteamIDs_Response_Server& servers(int index) const;
  ::proto::steam::CGameServers_IPsWithSteamIDs_Response_Server* add_servers();
  const ::google::protobuf::RepeatedPtrField< ::proto::steam::CGameServers_IPsWithSteamIDs_Response_Server >&
      servers() const;

  // @@protoc_insertion_point(class_scope:proto.steam.CGameServers_IPsWithSteamIDs_Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CGameServers_IPsWithSteamIDs_Response_Server > servers_;
  friend struct ::TableStruct_steammessages_5fgameservers_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CGameServers_GetServerIPsBySteamID_Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CGameServers_GetServerIPsBySteamID_Request) */ {
 public:
  CGameServers_GetServerIPsBySteamID_Request();
  virtual ~CGameServers_GetServerIPsBySteamID_Request();

  CGameServers_GetServerIPsBySteamID_Request(const CGameServers_GetServerIPsBySteamID_Request& from);

  inline CGameServers_GetServerIPsBySteamID_Request& operator=(const CGameServers_GetServerIPsBySteamID_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CGameServers_GetServerIPsBySteamID_Request(CGameServers_GetServerIPsBySteamID_Request&& from) noexcept
    : CGameServers_GetServerIPsBySteamID_Request() {
    *this = ::std::move(from);
  }

  inline CGameServers_GetServerIPsBySteamID_Request& operator=(CGameServers_GetServerIPsBySteamID_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CGameServers_GetServerIPsBySteamID_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CGameServers_GetServerIPsBySteamID_Request* internal_default_instance() {
    return reinterpret_cast<const CGameServers_GetServerIPsBySteamID_Request*>(
               &_CGameServers_GetServerIPsBySteamID_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(CGameServers_GetServerIPsBySteamID_Request* other);
  friend void swap(CGameServers_GetServerIPsBySteamID_Request& a, CGameServers_GetServerIPsBySteamID_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CGameServers_GetServerIPsBySteamID_Request* New() const final {
    return CreateMaybeMessage<CGameServers_GetServerIPsBySteamID_Request>(nullptr);
  }

  CGameServers_GetServerIPsBySteamID_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CGameServers_GetServerIPsBySteamID_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CGameServers_GetServerIPsBySteamID_Request& from);
  void MergeFrom(const CGameServers_GetServerIPsBySteamID_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameServers_GetServerIPsBySteamID_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated fixed64 server_steamids = 1;
  int server_steamids_size() const;
  void clear_server_steamids();
  static const int kServerSteamidsFieldNumber = 1;
  ::google::protobuf::uint64 server_steamids(int index) const;
  void set_server_steamids(int index, ::google::protobuf::uint64 value);
  void add_server_steamids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      server_steamids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_server_steamids();

  // @@protoc_insertion_point(class_scope:proto.steam.CGameServers_GetServerIPsBySteamID_Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > server_steamids_;
  friend struct ::TableStruct_steammessages_5fgameservers_2esteamclient_2eproto;
};
// ===================================================================

class GameServers_Stub;

class GameServers : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline GameServers() {};
 public:
  virtual ~GameServers();

  typedef GameServers_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void GetServerList(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CGameServers_GetServerList_Request* request,
                       ::proto::steam::CGameServers_GetServerList_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetServerSteamIDsByIP(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CGameServers_GetServerSteamIDsByIP_Request* request,
                       ::proto::steam::CGameServers_IPsWithSteamIDs_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetServerIPsBySteamID(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CGameServers_GetServerIPsBySteamID_Request* request,
                       ::proto::steam::CGameServers_IPsWithSteamIDs_Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(GameServers);
};

class GameServers_Stub : public GameServers {
 public:
  GameServers_Stub(::google::protobuf::RpcChannel* channel);
  GameServers_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~GameServers_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements GameServers ------------------------------------------

  void GetServerList(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CGameServers_GetServerList_Request* request,
                       ::proto::steam::CGameServers_GetServerList_Response* response,
                       ::google::protobuf::Closure* done);
  void GetServerSteamIDsByIP(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CGameServers_GetServerSteamIDsByIP_Request* request,
                       ::proto::steam::CGameServers_IPsWithSteamIDs_Response* response,
                       ::google::protobuf::Closure* done);
  void GetServerIPsBySteamID(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CGameServers_GetServerIPsBySteamID_Request* request,
                       ::proto::steam::CGameServers_IPsWithSteamIDs_Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(GameServers_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CGameServers_GetServerList_Request

// optional string filter = 1 [(.proto.steam.description) = "Query filter string."];
inline bool CGameServers_GetServerList_Request::has_filter() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGameServers_GetServerList_Request::clear_filter() {
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CGameServers_GetServerList_Request::filter() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameServers_GetServerList_Request.filter)
  return filter_.GetNoArena();
}
inline void CGameServers_GetServerList_Request::set_filter(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CGameServers_GetServerList_Request.filter)
}
#if LANG_CXX11
inline void CGameServers_GetServerList_Request::set_filter(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  filter_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CGameServers_GetServerList_Request.filter)
}
#endif
inline void CGameServers_GetServerList_Request::set_filter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CGameServers_GetServerList_Request.filter)
}
inline void CGameServers_GetServerList_Request::set_filter(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CGameServers_GetServerList_Request.filter)
}
inline ::std::string* CGameServers_GetServerList_Request::mutable_filter() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CGameServers_GetServerList_Request.filter)
  return filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CGameServers_GetServerList_Request::release_filter() {
  // @@protoc_insertion_point(field_release:proto.steam.CGameServers_GetServerList_Request.filter)
  if (!has_filter()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return filter_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CGameServers_GetServerList_Request::set_allocated_filter(::std::string* filter) {
  if (filter != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CGameServers_GetServerList_Request.filter)
}

// optional uint32 limit = 2 [default = 100, (.proto.steam.description) = "The maximum number of servers to return in the response"];
inline bool CGameServers_GetServerList_Request::has_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CGameServers_GetServerList_Request::clear_limit() {
  limit_ = 100u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CGameServers_GetServerList_Request::limit() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameServers_GetServerList_Request.limit)
  return limit_;
}
inline void CGameServers_GetServerList_Request::set_limit(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  limit_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CGameServers_GetServerList_Request.limit)
}

// -------------------------------------------------------------------

// CGameServers_GetServerList_Response_Server

// optional string addr = 1 [(.proto.steam.description) = "The server\'s IP and query port"];
inline bool CGameServers_GetServerList_Response_Server::has_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGameServers_GetServerList_Response_Server::clear_addr() {
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CGameServers_GetServerList_Response_Server::addr() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameServers_GetServerList_Response.Server.addr)
  return addr_.GetNoArena();
}
inline void CGameServers_GetServerList_Response_Server::set_addr(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CGameServers_GetServerList_Response.Server.addr)
}
#if LANG_CXX11
inline void CGameServers_GetServerList_Response_Server::set_addr(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CGameServers_GetServerList_Response.Server.addr)
}
#endif
inline void CGameServers_GetServerList_Response_Server::set_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CGameServers_GetServerList_Response.Server.addr)
}
inline void CGameServers_GetServerList_Response_Server::set_addr(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CGameServers_GetServerList_Response.Server.addr)
}
inline ::std::string* CGameServers_GetServerList_Response_Server::mutable_addr() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CGameServers_GetServerList_Response.Server.addr)
  return addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CGameServers_GetServerList_Response_Server::release_addr() {
  // @@protoc_insertion_point(field_release:proto.steam.CGameServers_GetServerList_Response.Server.addr)
  if (!has_addr()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return addr_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CGameServers_GetServerList_Response_Server::set_allocated_addr(::std::string* addr) {
  if (addr != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addr);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CGameServers_GetServerList_Response.Server.addr)
}

// optional uint32 gameport = 2;
inline bool CGameServers_GetServerList_Response_Server::has_gameport() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CGameServers_GetServerList_Response_Server::clear_gameport() {
  gameport_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::google::protobuf::uint32 CGameServers_GetServerList_Response_Server::gameport() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameServers_GetServerList_Response.Server.gameport)
  return gameport_;
}
inline void CGameServers_GetServerList_Response_Server::set_gameport(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  gameport_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CGameServers_GetServerList_Response.Server.gameport)
}

// optional uint32 specport = 3;
inline bool CGameServers_GetServerList_Response_Server::has_specport() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CGameServers_GetServerList_Response_Server::clear_specport() {
  specport_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::google::protobuf::uint32 CGameServers_GetServerList_Response_Server::specport() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameServers_GetServerList_Response.Server.specport)
  return specport_;
}
inline void CGameServers_GetServerList_Response_Server::set_specport(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  specport_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CGameServers_GetServerList_Response.Server.specport)
}

// optional fixed64 steamid = 4;
inline bool CGameServers_GetServerList_Response_Server::has_steamid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CGameServers_GetServerList_Response_Server::clear_steamid() {
  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000400u;
}
inline ::google::protobuf::uint64 CGameServers_GetServerList_Response_Server::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameServers_GetServerList_Response.Server.steamid)
  return steamid_;
}
inline void CGameServers_GetServerList_Response_Server::set_steamid(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000400u;
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CGameServers_GetServerList_Response.Server.steamid)
}

// optional string name = 5;
inline bool CGameServers_GetServerList_Response_Server::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CGameServers_GetServerList_Response_Server::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CGameServers_GetServerList_Response_Server::name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameServers_GetServerList_Response.Server.name)
  return name_.GetNoArena();
}
inline void CGameServers_GetServerList_Response_Server::set_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CGameServers_GetServerList_Response.Server.name)
}
#if LANG_CXX11
inline void CGameServers_GetServerList_Response_Server::set_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CGameServers_GetServerList_Response.Server.name)
}
#endif
inline void CGameServers_GetServerList_Response_Server::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CGameServers_GetServerList_Response.Server.name)
}
inline void CGameServers_GetServerList_Response_Server::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CGameServers_GetServerList_Response.Server.name)
}
inline ::std::string* CGameServers_GetServerList_Response_Server::mutable_name() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CGameServers_GetServerList_Response.Server.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CGameServers_GetServerList_Response_Server::release_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CGameServers_GetServerList_Response.Server.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CGameServers_GetServerList_Response_Server::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CGameServers_GetServerList_Response.Server.name)
}

// optional uint32 appid = 6;
inline bool CGameServers_GetServerList_Response_Server::has_appid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CGameServers_GetServerList_Response_Server::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::google::protobuf::uint32 CGameServers_GetServerList_Response_Server::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameServers_GetServerList_Response.Server.appid)
  return appid_;
}
inline void CGameServers_GetServerList_Response_Server::set_appid(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CGameServers_GetServerList_Response.Server.appid)
}

// optional string gamedir = 7;
inline bool CGameServers_GetServerList_Response_Server::has_gamedir() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CGameServers_GetServerList_Response_Server::clear_gamedir() {
  gamedir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& CGameServers_GetServerList_Response_Server::gamedir() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameServers_GetServerList_Response.Server.gamedir)
  return gamedir_.GetNoArena();
}
inline void CGameServers_GetServerList_Response_Server::set_gamedir(const ::std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  gamedir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CGameServers_GetServerList_Response.Server.gamedir)
}
#if LANG_CXX11
inline void CGameServers_GetServerList_Response_Server::set_gamedir(::std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  gamedir_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CGameServers_GetServerList_Response.Server.gamedir)
}
#endif
inline void CGameServers_GetServerList_Response_Server::set_gamedir(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  gamedir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CGameServers_GetServerList_Response.Server.gamedir)
}
inline void CGameServers_GetServerList_Response_Server::set_gamedir(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  gamedir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CGameServers_GetServerList_Response.Server.gamedir)
}
inline ::std::string* CGameServers_GetServerList_Response_Server::mutable_gamedir() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CGameServers_GetServerList_Response.Server.gamedir)
  return gamedir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CGameServers_GetServerList_Response_Server::release_gamedir() {
  // @@protoc_insertion_point(field_release:proto.steam.CGameServers_GetServerList_Response.Server.gamedir)
  if (!has_gamedir()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return gamedir_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CGameServers_GetServerList_Response_Server::set_allocated_gamedir(::std::string* gamedir) {
  if (gamedir != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  gamedir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gamedir);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CGameServers_GetServerList_Response.Server.gamedir)
}

// optional string version = 8;
inline bool CGameServers_GetServerList_Response_Server::has_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CGameServers_GetServerList_Response_Server::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::std::string& CGameServers_GetServerList_Response_Server::version() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameServers_GetServerList_Response.Server.version)
  return version_.GetNoArena();
}
inline void CGameServers_GetServerList_Response_Server::set_version(const ::std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CGameServers_GetServerList_Response.Server.version)
}
#if LANG_CXX11
inline void CGameServers_GetServerList_Response_Server::set_version(::std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CGameServers_GetServerList_Response.Server.version)
}
#endif
inline void CGameServers_GetServerList_Response_Server::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CGameServers_GetServerList_Response.Server.version)
}
inline void CGameServers_GetServerList_Response_Server::set_version(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CGameServers_GetServerList_Response.Server.version)
}
inline ::std::string* CGameServers_GetServerList_Response_Server::mutable_version() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CGameServers_GetServerList_Response.Server.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CGameServers_GetServerList_Response_Server::release_version() {
  // @@protoc_insertion_point(field_release:proto.steam.CGameServers_GetServerList_Response.Server.version)
  if (!has_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return version_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CGameServers_GetServerList_Response_Server::set_allocated_version(::std::string* version) {
  if (version != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CGameServers_GetServerList_Response.Server.version)
}

// optional string product = 9;
inline bool CGameServers_GetServerList_Response_Server::has_product() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CGameServers_GetServerList_Response_Server::clear_product() {
  product_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::std::string& CGameServers_GetServerList_Response_Server::product() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameServers_GetServerList_Response.Server.product)
  return product_.GetNoArena();
}
inline void CGameServers_GetServerList_Response_Server::set_product(const ::std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  product_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CGameServers_GetServerList_Response.Server.product)
}
#if LANG_CXX11
inline void CGameServers_GetServerList_Response_Server::set_product(::std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  product_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CGameServers_GetServerList_Response.Server.product)
}
#endif
inline void CGameServers_GetServerList_Response_Server::set_product(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  product_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CGameServers_GetServerList_Response.Server.product)
}
inline void CGameServers_GetServerList_Response_Server::set_product(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  product_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CGameServers_GetServerList_Response.Server.product)
}
inline ::std::string* CGameServers_GetServerList_Response_Server::mutable_product() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CGameServers_GetServerList_Response.Server.product)
  return product_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CGameServers_GetServerList_Response_Server::release_product() {
  // @@protoc_insertion_point(field_release:proto.steam.CGameServers_GetServerList_Response.Server.product)
  if (!has_product()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return product_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CGameServers_GetServerList_Response_Server::set_allocated_product(::std::string* product) {
  if (product != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  product_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CGameServers_GetServerList_Response.Server.product)
}

// optional int32 region = 10;
inline bool CGameServers_GetServerList_Response_Server::has_region() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CGameServers_GetServerList_Response_Server::clear_region() {
  region_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::google::protobuf::int32 CGameServers_GetServerList_Response_Server::region() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameServers_GetServerList_Response.Server.region)
  return region_;
}
inline void CGameServers_GetServerList_Response_Server::set_region(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  region_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CGameServers_GetServerList_Response.Server.region)
}

// optional int32 players = 11;
inline bool CGameServers_GetServerList_Response_Server::has_players() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CGameServers_GetServerList_Response_Server::clear_players() {
  players_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::google::protobuf::int32 CGameServers_GetServerList_Response_Server::players() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameServers_GetServerList_Response.Server.players)
  return players_;
}
inline void CGameServers_GetServerList_Response_Server::set_players(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  players_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CGameServers_GetServerList_Response.Server.players)
}

// optional int32 max_players = 12;
inline bool CGameServers_GetServerList_Response_Server::has_max_players() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CGameServers_GetServerList_Response_Server::clear_max_players() {
  max_players_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::google::protobuf::int32 CGameServers_GetServerList_Response_Server::max_players() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameServers_GetServerList_Response.Server.max_players)
  return max_players_;
}
inline void CGameServers_GetServerList_Response_Server::set_max_players(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  max_players_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CGameServers_GetServerList_Response.Server.max_players)
}

// optional int32 bots = 13;
inline bool CGameServers_GetServerList_Response_Server::has_bots() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CGameServers_GetServerList_Response_Server::clear_bots() {
  bots_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::google::protobuf::int32 CGameServers_GetServerList_Response_Server::bots() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameServers_GetServerList_Response.Server.bots)
  return bots_;
}
inline void CGameServers_GetServerList_Response_Server::set_bots(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00008000u;
  bots_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CGameServers_GetServerList_Response.Server.bots)
}

// optional string map = 14;
inline bool CGameServers_GetServerList_Response_Server::has_map() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CGameServers_GetServerList_Response_Server::clear_map() {
  map_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::std::string& CGameServers_GetServerList_Response_Server::map() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameServers_GetServerList_Response.Server.map)
  return map_.GetNoArena();
}
inline void CGameServers_GetServerList_Response_Server::set_map(const ::std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CGameServers_GetServerList_Response.Server.map)
}
#if LANG_CXX11
inline void CGameServers_GetServerList_Response_Server::set_map(::std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  map_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CGameServers_GetServerList_Response.Server.map)
}
#endif
inline void CGameServers_GetServerList_Response_Server::set_map(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CGameServers_GetServerList_Response.Server.map)
}
inline void CGameServers_GetServerList_Response_Server::set_map(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CGameServers_GetServerList_Response.Server.map)
}
inline ::std::string* CGameServers_GetServerList_Response_Server::mutable_map() {
  _has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CGameServers_GetServerList_Response.Server.map)
  return map_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CGameServers_GetServerList_Response_Server::release_map() {
  // @@protoc_insertion_point(field_release:proto.steam.CGameServers_GetServerList_Response.Server.map)
  if (!has_map()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return map_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CGameServers_GetServerList_Response_Server::set_allocated_map(::std::string* map) {
  if (map != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  map_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), map);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CGameServers_GetServerList_Response.Server.map)
}

// optional bool secure = 15;
inline bool CGameServers_GetServerList_Response_Server::has_secure() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CGameServers_GetServerList_Response_Server::clear_secure() {
  secure_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool CGameServers_GetServerList_Response_Server::secure() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameServers_GetServerList_Response.Server.secure)
  return secure_;
}
inline void CGameServers_GetServerList_Response_Server::set_secure(bool value) {
  _has_bits_[0] |= 0x00010000u;
  secure_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CGameServers_GetServerList_Response.Server.secure)
}

// optional bool dedicated = 16;
inline bool CGameServers_GetServerList_Response_Server::has_dedicated() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CGameServers_GetServerList_Response_Server::clear_dedicated() {
  dedicated_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool CGameServers_GetServerList_Response_Server::dedicated() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameServers_GetServerList_Response.Server.dedicated)
  return dedicated_;
}
inline void CGameServers_GetServerList_Response_Server::set_dedicated(bool value) {
  _has_bits_[0] |= 0x00020000u;
  dedicated_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CGameServers_GetServerList_Response.Server.dedicated)
}

// optional string os = 17;
inline bool CGameServers_GetServerList_Response_Server::has_os() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CGameServers_GetServerList_Response_Server::clear_os() {
  os_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::std::string& CGameServers_GetServerList_Response_Server::os() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameServers_GetServerList_Response.Server.os)
  return os_.GetNoArena();
}
inline void CGameServers_GetServerList_Response_Server::set_os(const ::std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  os_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CGameServers_GetServerList_Response.Server.os)
}
#if LANG_CXX11
inline void CGameServers_GetServerList_Response_Server::set_os(::std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  os_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CGameServers_GetServerList_Response.Server.os)
}
#endif
inline void CGameServers_GetServerList_Response_Server::set_os(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  os_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CGameServers_GetServerList_Response.Server.os)
}
inline void CGameServers_GetServerList_Response_Server::set_os(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000040u;
  os_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CGameServers_GetServerList_Response.Server.os)
}
inline ::std::string* CGameServers_GetServerList_Response_Server::mutable_os() {
  _has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CGameServers_GetServerList_Response.Server.os)
  return os_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CGameServers_GetServerList_Response_Server::release_os() {
  // @@protoc_insertion_point(field_release:proto.steam.CGameServers_GetServerList_Response.Server.os)
  if (!has_os()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return os_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CGameServers_GetServerList_Response_Server::set_allocated_os(::std::string* os) {
  if (os != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  os_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), os);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CGameServers_GetServerList_Response.Server.os)
}

// optional string gametype = 18;
inline bool CGameServers_GetServerList_Response_Server::has_gametype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CGameServers_GetServerList_Response_Server::clear_gametype() {
  gametype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::std::string& CGameServers_GetServerList_Response_Server::gametype() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameServers_GetServerList_Response.Server.gametype)
  return gametype_.GetNoArena();
}
inline void CGameServers_GetServerList_Response_Server::set_gametype(const ::std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  gametype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CGameServers_GetServerList_Response.Server.gametype)
}
#if LANG_CXX11
inline void CGameServers_GetServerList_Response_Server::set_gametype(::std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  gametype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CGameServers_GetServerList_Response.Server.gametype)
}
#endif
inline void CGameServers_GetServerList_Response_Server::set_gametype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  gametype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CGameServers_GetServerList_Response.Server.gametype)
}
inline void CGameServers_GetServerList_Response_Server::set_gametype(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000080u;
  gametype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CGameServers_GetServerList_Response.Server.gametype)
}
inline ::std::string* CGameServers_GetServerList_Response_Server::mutable_gametype() {
  _has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CGameServers_GetServerList_Response.Server.gametype)
  return gametype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CGameServers_GetServerList_Response_Server::release_gametype() {
  // @@protoc_insertion_point(field_release:proto.steam.CGameServers_GetServerList_Response.Server.gametype)
  if (!has_gametype()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return gametype_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CGameServers_GetServerList_Response_Server::set_allocated_gametype(::std::string* gametype) {
  if (gametype != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  gametype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gametype);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CGameServers_GetServerList_Response.Server.gametype)
}

// -------------------------------------------------------------------

// CGameServers_GetServerList_Response

// repeated .proto.steam.CGameServers_GetServerList_Response.Server servers = 1 [(.proto.steam.description) = "List of servers matching the filter"];
inline int CGameServers_GetServerList_Response::servers_size() const {
  return servers_.size();
}
inline void CGameServers_GetServerList_Response::clear_servers() {
  servers_.Clear();
}
inline ::proto::steam::CGameServers_GetServerList_Response_Server* CGameServers_GetServerList_Response::mutable_servers(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CGameServers_GetServerList_Response.servers)
  return servers_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::steam::CGameServers_GetServerList_Response_Server >*
CGameServers_GetServerList_Response::mutable_servers() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CGameServers_GetServerList_Response.servers)
  return &servers_;
}
inline const ::proto::steam::CGameServers_GetServerList_Response_Server& CGameServers_GetServerList_Response::servers(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameServers_GetServerList_Response.servers)
  return servers_.Get(index);
}
inline ::proto::steam::CGameServers_GetServerList_Response_Server* CGameServers_GetServerList_Response::add_servers() {
  // @@protoc_insertion_point(field_add:proto.steam.CGameServers_GetServerList_Response.servers)
  return servers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::steam::CGameServers_GetServerList_Response_Server >&
CGameServers_GetServerList_Response::servers() const {
  // @@protoc_insertion_point(field_list:proto.steam.CGameServers_GetServerList_Response.servers)
  return servers_;
}

// -------------------------------------------------------------------

// CGameServers_GetServerSteamIDsByIP_Request

// repeated string server_ips = 1;
inline int CGameServers_GetServerSteamIDsByIP_Request::server_ips_size() const {
  return server_ips_.size();
}
inline void CGameServers_GetServerSteamIDsByIP_Request::clear_server_ips() {
  server_ips_.Clear();
}
inline const ::std::string& CGameServers_GetServerSteamIDsByIP_Request::server_ips(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameServers_GetServerSteamIDsByIP_Request.server_ips)
  return server_ips_.Get(index);
}
inline ::std::string* CGameServers_GetServerSteamIDsByIP_Request::mutable_server_ips(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CGameServers_GetServerSteamIDsByIP_Request.server_ips)
  return server_ips_.Mutable(index);
}
inline void CGameServers_GetServerSteamIDsByIP_Request::set_server_ips(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.steam.CGameServers_GetServerSteamIDsByIP_Request.server_ips)
  server_ips_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void CGameServers_GetServerSteamIDsByIP_Request::set_server_ips(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.steam.CGameServers_GetServerSteamIDsByIP_Request.server_ips)
  server_ips_.Mutable(index)->assign(std::move(value));
}
#endif
inline void CGameServers_GetServerSteamIDsByIP_Request::set_server_ips(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  server_ips_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.steam.CGameServers_GetServerSteamIDsByIP_Request.server_ips)
}
inline void CGameServers_GetServerSteamIDsByIP_Request::set_server_ips(int index, const char* value, size_t size) {
  server_ips_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CGameServers_GetServerSteamIDsByIP_Request.server_ips)
}
inline ::std::string* CGameServers_GetServerSteamIDsByIP_Request::add_server_ips() {
  // @@protoc_insertion_point(field_add_mutable:proto.steam.CGameServers_GetServerSteamIDsByIP_Request.server_ips)
  return server_ips_.Add();
}
inline void CGameServers_GetServerSteamIDsByIP_Request::add_server_ips(const ::std::string& value) {
  server_ips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.steam.CGameServers_GetServerSteamIDsByIP_Request.server_ips)
}
#if LANG_CXX11
inline void CGameServers_GetServerSteamIDsByIP_Request::add_server_ips(::std::string&& value) {
  server_ips_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.steam.CGameServers_GetServerSteamIDsByIP_Request.server_ips)
}
#endif
inline void CGameServers_GetServerSteamIDsByIP_Request::add_server_ips(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  server_ips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.steam.CGameServers_GetServerSteamIDsByIP_Request.server_ips)
}
inline void CGameServers_GetServerSteamIDsByIP_Request::add_server_ips(const char* value, size_t size) {
  server_ips_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.steam.CGameServers_GetServerSteamIDsByIP_Request.server_ips)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
CGameServers_GetServerSteamIDsByIP_Request::server_ips() const {
  // @@protoc_insertion_point(field_list:proto.steam.CGameServers_GetServerSteamIDsByIP_Request.server_ips)
  return server_ips_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
CGameServers_GetServerSteamIDsByIP_Request::mutable_server_ips() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CGameServers_GetServerSteamIDsByIP_Request.server_ips)
  return &server_ips_;
}

// -------------------------------------------------------------------

// CGameServers_IPsWithSteamIDs_Response_Server

// optional string addr = 1;
inline bool CGameServers_IPsWithSteamIDs_Response_Server::has_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGameServers_IPsWithSteamIDs_Response_Server::clear_addr() {
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CGameServers_IPsWithSteamIDs_Response_Server::addr() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameServers_IPsWithSteamIDs_Response.Server.addr)
  return addr_.GetNoArena();
}
inline void CGameServers_IPsWithSteamIDs_Response_Server::set_addr(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CGameServers_IPsWithSteamIDs_Response.Server.addr)
}
#if LANG_CXX11
inline void CGameServers_IPsWithSteamIDs_Response_Server::set_addr(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CGameServers_IPsWithSteamIDs_Response.Server.addr)
}
#endif
inline void CGameServers_IPsWithSteamIDs_Response_Server::set_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CGameServers_IPsWithSteamIDs_Response.Server.addr)
}
inline void CGameServers_IPsWithSteamIDs_Response_Server::set_addr(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CGameServers_IPsWithSteamIDs_Response.Server.addr)
}
inline ::std::string* CGameServers_IPsWithSteamIDs_Response_Server::mutable_addr() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CGameServers_IPsWithSteamIDs_Response.Server.addr)
  return addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CGameServers_IPsWithSteamIDs_Response_Server::release_addr() {
  // @@protoc_insertion_point(field_release:proto.steam.CGameServers_IPsWithSteamIDs_Response.Server.addr)
  if (!has_addr()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return addr_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CGameServers_IPsWithSteamIDs_Response_Server::set_allocated_addr(::std::string* addr) {
  if (addr != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addr);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CGameServers_IPsWithSteamIDs_Response.Server.addr)
}

// optional fixed64 steamid = 2;
inline bool CGameServers_IPsWithSteamIDs_Response_Server::has_steamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CGameServers_IPsWithSteamIDs_Response_Server::clear_steamid() {
  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint64 CGameServers_IPsWithSteamIDs_Response_Server::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameServers_IPsWithSteamIDs_Response.Server.steamid)
  return steamid_;
}
inline void CGameServers_IPsWithSteamIDs_Response_Server::set_steamid(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CGameServers_IPsWithSteamIDs_Response.Server.steamid)
}

// -------------------------------------------------------------------

// CGameServers_IPsWithSteamIDs_Response

// repeated .proto.steam.CGameServers_IPsWithSteamIDs_Response.Server servers = 1;
inline int CGameServers_IPsWithSteamIDs_Response::servers_size() const {
  return servers_.size();
}
inline void CGameServers_IPsWithSteamIDs_Response::clear_servers() {
  servers_.Clear();
}
inline ::proto::steam::CGameServers_IPsWithSteamIDs_Response_Server* CGameServers_IPsWithSteamIDs_Response::mutable_servers(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CGameServers_IPsWithSteamIDs_Response.servers)
  return servers_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::steam::CGameServers_IPsWithSteamIDs_Response_Server >*
CGameServers_IPsWithSteamIDs_Response::mutable_servers() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CGameServers_IPsWithSteamIDs_Response.servers)
  return &servers_;
}
inline const ::proto::steam::CGameServers_IPsWithSteamIDs_Response_Server& CGameServers_IPsWithSteamIDs_Response::servers(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameServers_IPsWithSteamIDs_Response.servers)
  return servers_.Get(index);
}
inline ::proto::steam::CGameServers_IPsWithSteamIDs_Response_Server* CGameServers_IPsWithSteamIDs_Response::add_servers() {
  // @@protoc_insertion_point(field_add:proto.steam.CGameServers_IPsWithSteamIDs_Response.servers)
  return servers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::steam::CGameServers_IPsWithSteamIDs_Response_Server >&
CGameServers_IPsWithSteamIDs_Response::servers() const {
  // @@protoc_insertion_point(field_list:proto.steam.CGameServers_IPsWithSteamIDs_Response.servers)
  return servers_;
}

// -------------------------------------------------------------------

// CGameServers_GetServerIPsBySteamID_Request

// repeated fixed64 server_steamids = 1;
inline int CGameServers_GetServerIPsBySteamID_Request::server_steamids_size() const {
  return server_steamids_.size();
}
inline void CGameServers_GetServerIPsBySteamID_Request::clear_server_steamids() {
  server_steamids_.Clear();
}
inline ::google::protobuf::uint64 CGameServers_GetServerIPsBySteamID_Request::server_steamids(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameServers_GetServerIPsBySteamID_Request.server_steamids)
  return server_steamids_.Get(index);
}
inline void CGameServers_GetServerIPsBySteamID_Request::set_server_steamids(int index, ::google::protobuf::uint64 value) {
  server_steamids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.steam.CGameServers_GetServerIPsBySteamID_Request.server_steamids)
}
inline void CGameServers_GetServerIPsBySteamID_Request::add_server_steamids(::google::protobuf::uint64 value) {
  server_steamids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.steam.CGameServers_GetServerIPsBySteamID_Request.server_steamids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CGameServers_GetServerIPsBySteamID_Request::server_steamids() const {
  // @@protoc_insertion_point(field_list:proto.steam.CGameServers_GetServerIPsBySteamID_Request.server_steamids)
  return server_steamids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CGameServers_GetServerIPsBySteamID_Request::mutable_server_steamids() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CGameServers_GetServerIPsBySteamID_Request.server_steamids)
  return &server_steamids_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace steam
}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_steammessages_5fgameservers_2esteamclient_2eproto
