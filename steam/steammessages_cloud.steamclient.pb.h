// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_cloud.steamclient.proto

#ifndef PROTOBUF_INCLUDED_steammessages_5fcloud_2esteamclient_2eproto
#define PROTOBUF_INCLUDED_steammessages_5fcloud_2esteamclient_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages_unified_base.steamclient.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5fcloud_2esteamclient_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5fcloud_2esteamclient_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[33]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_steammessages_5fcloud_2esteamclient_2eproto();
namespace proto {
namespace steam {
class CCloud_BeginHTTPUpload_Request;
class CCloud_BeginHTTPUpload_RequestDefaultTypeInternal;
extern CCloud_BeginHTTPUpload_RequestDefaultTypeInternal _CCloud_BeginHTTPUpload_Request_default_instance_;
class CCloud_BeginHTTPUpload_Response;
class CCloud_BeginHTTPUpload_ResponseDefaultTypeInternal;
extern CCloud_BeginHTTPUpload_ResponseDefaultTypeInternal _CCloud_BeginHTTPUpload_Response_default_instance_;
class CCloud_BeginHTTPUpload_Response_HTTPHeaders;
class CCloud_BeginHTTPUpload_Response_HTTPHeadersDefaultTypeInternal;
extern CCloud_BeginHTTPUpload_Response_HTTPHeadersDefaultTypeInternal _CCloud_BeginHTTPUpload_Response_HTTPHeaders_default_instance_;
class CCloud_CDNReport_Notification;
class CCloud_CDNReport_NotificationDefaultTypeInternal;
extern CCloud_CDNReport_NotificationDefaultTypeInternal _CCloud_CDNReport_Notification_default_instance_;
class CCloud_ClientBeginFileUpload_Request;
class CCloud_ClientBeginFileUpload_RequestDefaultTypeInternal;
extern CCloud_ClientBeginFileUpload_RequestDefaultTypeInternal _CCloud_ClientBeginFileUpload_Request_default_instance_;
class CCloud_ClientBeginFileUpload_Response;
class CCloud_ClientBeginFileUpload_ResponseDefaultTypeInternal;
extern CCloud_ClientBeginFileUpload_ResponseDefaultTypeInternal _CCloud_ClientBeginFileUpload_Response_default_instance_;
class CCloud_ClientCommitFileUpload_Request;
class CCloud_ClientCommitFileUpload_RequestDefaultTypeInternal;
extern CCloud_ClientCommitFileUpload_RequestDefaultTypeInternal _CCloud_ClientCommitFileUpload_Request_default_instance_;
class CCloud_ClientCommitFileUpload_Response;
class CCloud_ClientCommitFileUpload_ResponseDefaultTypeInternal;
extern CCloud_ClientCommitFileUpload_ResponseDefaultTypeInternal _CCloud_ClientCommitFileUpload_Response_default_instance_;
class CCloud_ClientConflictResolution_Notification;
class CCloud_ClientConflictResolution_NotificationDefaultTypeInternal;
extern CCloud_ClientConflictResolution_NotificationDefaultTypeInternal _CCloud_ClientConflictResolution_Notification_default_instance_;
class CCloud_ClientDeleteFile_Request;
class CCloud_ClientDeleteFile_RequestDefaultTypeInternal;
extern CCloud_ClientDeleteFile_RequestDefaultTypeInternal _CCloud_ClientDeleteFile_Request_default_instance_;
class CCloud_ClientDeleteFile_Response;
class CCloud_ClientDeleteFile_ResponseDefaultTypeInternal;
extern CCloud_ClientDeleteFile_ResponseDefaultTypeInternal _CCloud_ClientDeleteFile_Response_default_instance_;
class CCloud_ClientFileDownload_Request;
class CCloud_ClientFileDownload_RequestDefaultTypeInternal;
extern CCloud_ClientFileDownload_RequestDefaultTypeInternal _CCloud_ClientFileDownload_Request_default_instance_;
class CCloud_ClientFileDownload_Response;
class CCloud_ClientFileDownload_ResponseDefaultTypeInternal;
extern CCloud_ClientFileDownload_ResponseDefaultTypeInternal _CCloud_ClientFileDownload_Response_default_instance_;
class CCloud_ClientFileDownload_Response_HTTPHeaders;
class CCloud_ClientFileDownload_Response_HTTPHeadersDefaultTypeInternal;
extern CCloud_ClientFileDownload_Response_HTTPHeadersDefaultTypeInternal _CCloud_ClientFileDownload_Response_HTTPHeaders_default_instance_;
class CCloud_CommitHTTPUpload_Request;
class CCloud_CommitHTTPUpload_RequestDefaultTypeInternal;
extern CCloud_CommitHTTPUpload_RequestDefaultTypeInternal _CCloud_CommitHTTPUpload_Request_default_instance_;
class CCloud_CommitHTTPUpload_Response;
class CCloud_CommitHTTPUpload_ResponseDefaultTypeInternal;
extern CCloud_CommitHTTPUpload_ResponseDefaultTypeInternal _CCloud_CommitHTTPUpload_Response_default_instance_;
class CCloud_Delete_Request;
class CCloud_Delete_RequestDefaultTypeInternal;
extern CCloud_Delete_RequestDefaultTypeInternal _CCloud_Delete_Request_default_instance_;
class CCloud_Delete_Response;
class CCloud_Delete_ResponseDefaultTypeInternal;
extern CCloud_Delete_ResponseDefaultTypeInternal _CCloud_Delete_Response_default_instance_;
class CCloud_EnumerateUserApps_Request;
class CCloud_EnumerateUserApps_RequestDefaultTypeInternal;
extern CCloud_EnumerateUserApps_RequestDefaultTypeInternal _CCloud_EnumerateUserApps_Request_default_instance_;
class CCloud_EnumerateUserApps_Response;
class CCloud_EnumerateUserApps_ResponseDefaultTypeInternal;
extern CCloud_EnumerateUserApps_ResponseDefaultTypeInternal _CCloud_EnumerateUserApps_Response_default_instance_;
class CCloud_EnumerateUserApps_Response_Apps;
class CCloud_EnumerateUserApps_Response_AppsDefaultTypeInternal;
extern CCloud_EnumerateUserApps_Response_AppsDefaultTypeInternal _CCloud_EnumerateUserApps_Response_Apps_default_instance_;
class CCloud_EnumerateUserFiles_Request;
class CCloud_EnumerateUserFiles_RequestDefaultTypeInternal;
extern CCloud_EnumerateUserFiles_RequestDefaultTypeInternal _CCloud_EnumerateUserFiles_Request_default_instance_;
class CCloud_EnumerateUserFiles_Response;
class CCloud_EnumerateUserFiles_ResponseDefaultTypeInternal;
extern CCloud_EnumerateUserFiles_ResponseDefaultTypeInternal _CCloud_EnumerateUserFiles_Response_default_instance_;
class CCloud_ExternalStorageTransferReport_Notification;
class CCloud_ExternalStorageTransferReport_NotificationDefaultTypeInternal;
extern CCloud_ExternalStorageTransferReport_NotificationDefaultTypeInternal _CCloud_ExternalStorageTransferReport_Notification_default_instance_;
class CCloud_GetClientEncryptionKey_Request;
class CCloud_GetClientEncryptionKey_RequestDefaultTypeInternal;
extern CCloud_GetClientEncryptionKey_RequestDefaultTypeInternal _CCloud_GetClientEncryptionKey_Request_default_instance_;
class CCloud_GetClientEncryptionKey_Response;
class CCloud_GetClientEncryptionKey_ResponseDefaultTypeInternal;
extern CCloud_GetClientEncryptionKey_ResponseDefaultTypeInternal _CCloud_GetClientEncryptionKey_Response_default_instance_;
class CCloud_GetFileDetails_Request;
class CCloud_GetFileDetails_RequestDefaultTypeInternal;
extern CCloud_GetFileDetails_RequestDefaultTypeInternal _CCloud_GetFileDetails_Request_default_instance_;
class CCloud_GetFileDetails_Response;
class CCloud_GetFileDetails_ResponseDefaultTypeInternal;
extern CCloud_GetFileDetails_ResponseDefaultTypeInternal _CCloud_GetFileDetails_Response_default_instance_;
class CCloud_GetUploadServerInfo_Request;
class CCloud_GetUploadServerInfo_RequestDefaultTypeInternal;
extern CCloud_GetUploadServerInfo_RequestDefaultTypeInternal _CCloud_GetUploadServerInfo_Request_default_instance_;
class CCloud_GetUploadServerInfo_Response;
class CCloud_GetUploadServerInfo_ResponseDefaultTypeInternal;
extern CCloud_GetUploadServerInfo_ResponseDefaultTypeInternal _CCloud_GetUploadServerInfo_Response_default_instance_;
class CCloud_UserFile;
class CCloud_UserFileDefaultTypeInternal;
extern CCloud_UserFileDefaultTypeInternal _CCloud_UserFile_default_instance_;
class ClientCloudFileUploadBlockDetails;
class ClientCloudFileUploadBlockDetailsDefaultTypeInternal;
extern ClientCloudFileUploadBlockDetailsDefaultTypeInternal _ClientCloudFileUploadBlockDetails_default_instance_;
class ClientCloudFileUploadBlockDetails_HTTPHeaders;
class ClientCloudFileUploadBlockDetails_HTTPHeadersDefaultTypeInternal;
extern ClientCloudFileUploadBlockDetails_HTTPHeadersDefaultTypeInternal _ClientCloudFileUploadBlockDetails_HTTPHeaders_default_instance_;
}  // namespace steam
}  // namespace proto
namespace google {
namespace protobuf {
template<> ::proto::steam::CCloud_BeginHTTPUpload_Request* Arena::CreateMaybeMessage<::proto::steam::CCloud_BeginHTTPUpload_Request>(Arena*);
template<> ::proto::steam::CCloud_BeginHTTPUpload_Response* Arena::CreateMaybeMessage<::proto::steam::CCloud_BeginHTTPUpload_Response>(Arena*);
template<> ::proto::steam::CCloud_BeginHTTPUpload_Response_HTTPHeaders* Arena::CreateMaybeMessage<::proto::steam::CCloud_BeginHTTPUpload_Response_HTTPHeaders>(Arena*);
template<> ::proto::steam::CCloud_CDNReport_Notification* Arena::CreateMaybeMessage<::proto::steam::CCloud_CDNReport_Notification>(Arena*);
template<> ::proto::steam::CCloud_ClientBeginFileUpload_Request* Arena::CreateMaybeMessage<::proto::steam::CCloud_ClientBeginFileUpload_Request>(Arena*);
template<> ::proto::steam::CCloud_ClientBeginFileUpload_Response* Arena::CreateMaybeMessage<::proto::steam::CCloud_ClientBeginFileUpload_Response>(Arena*);
template<> ::proto::steam::CCloud_ClientCommitFileUpload_Request* Arena::CreateMaybeMessage<::proto::steam::CCloud_ClientCommitFileUpload_Request>(Arena*);
template<> ::proto::steam::CCloud_ClientCommitFileUpload_Response* Arena::CreateMaybeMessage<::proto::steam::CCloud_ClientCommitFileUpload_Response>(Arena*);
template<> ::proto::steam::CCloud_ClientConflictResolution_Notification* Arena::CreateMaybeMessage<::proto::steam::CCloud_ClientConflictResolution_Notification>(Arena*);
template<> ::proto::steam::CCloud_ClientDeleteFile_Request* Arena::CreateMaybeMessage<::proto::steam::CCloud_ClientDeleteFile_Request>(Arena*);
template<> ::proto::steam::CCloud_ClientDeleteFile_Response* Arena::CreateMaybeMessage<::proto::steam::CCloud_ClientDeleteFile_Response>(Arena*);
template<> ::proto::steam::CCloud_ClientFileDownload_Request* Arena::CreateMaybeMessage<::proto::steam::CCloud_ClientFileDownload_Request>(Arena*);
template<> ::proto::steam::CCloud_ClientFileDownload_Response* Arena::CreateMaybeMessage<::proto::steam::CCloud_ClientFileDownload_Response>(Arena*);
template<> ::proto::steam::CCloud_ClientFileDownload_Response_HTTPHeaders* Arena::CreateMaybeMessage<::proto::steam::CCloud_ClientFileDownload_Response_HTTPHeaders>(Arena*);
template<> ::proto::steam::CCloud_CommitHTTPUpload_Request* Arena::CreateMaybeMessage<::proto::steam::CCloud_CommitHTTPUpload_Request>(Arena*);
template<> ::proto::steam::CCloud_CommitHTTPUpload_Response* Arena::CreateMaybeMessage<::proto::steam::CCloud_CommitHTTPUpload_Response>(Arena*);
template<> ::proto::steam::CCloud_Delete_Request* Arena::CreateMaybeMessage<::proto::steam::CCloud_Delete_Request>(Arena*);
template<> ::proto::steam::CCloud_Delete_Response* Arena::CreateMaybeMessage<::proto::steam::CCloud_Delete_Response>(Arena*);
template<> ::proto::steam::CCloud_EnumerateUserApps_Request* Arena::CreateMaybeMessage<::proto::steam::CCloud_EnumerateUserApps_Request>(Arena*);
template<> ::proto::steam::CCloud_EnumerateUserApps_Response* Arena::CreateMaybeMessage<::proto::steam::CCloud_EnumerateUserApps_Response>(Arena*);
template<> ::proto::steam::CCloud_EnumerateUserApps_Response_Apps* Arena::CreateMaybeMessage<::proto::steam::CCloud_EnumerateUserApps_Response_Apps>(Arena*);
template<> ::proto::steam::CCloud_EnumerateUserFiles_Request* Arena::CreateMaybeMessage<::proto::steam::CCloud_EnumerateUserFiles_Request>(Arena*);
template<> ::proto::steam::CCloud_EnumerateUserFiles_Response* Arena::CreateMaybeMessage<::proto::steam::CCloud_EnumerateUserFiles_Response>(Arena*);
template<> ::proto::steam::CCloud_ExternalStorageTransferReport_Notification* Arena::CreateMaybeMessage<::proto::steam::CCloud_ExternalStorageTransferReport_Notification>(Arena*);
template<> ::proto::steam::CCloud_GetClientEncryptionKey_Request* Arena::CreateMaybeMessage<::proto::steam::CCloud_GetClientEncryptionKey_Request>(Arena*);
template<> ::proto::steam::CCloud_GetClientEncryptionKey_Response* Arena::CreateMaybeMessage<::proto::steam::CCloud_GetClientEncryptionKey_Response>(Arena*);
template<> ::proto::steam::CCloud_GetFileDetails_Request* Arena::CreateMaybeMessage<::proto::steam::CCloud_GetFileDetails_Request>(Arena*);
template<> ::proto::steam::CCloud_GetFileDetails_Response* Arena::CreateMaybeMessage<::proto::steam::CCloud_GetFileDetails_Response>(Arena*);
template<> ::proto::steam::CCloud_GetUploadServerInfo_Request* Arena::CreateMaybeMessage<::proto::steam::CCloud_GetUploadServerInfo_Request>(Arena*);
template<> ::proto::steam::CCloud_GetUploadServerInfo_Response* Arena::CreateMaybeMessage<::proto::steam::CCloud_GetUploadServerInfo_Response>(Arena*);
template<> ::proto::steam::CCloud_UserFile* Arena::CreateMaybeMessage<::proto::steam::CCloud_UserFile>(Arena*);
template<> ::proto::steam::ClientCloudFileUploadBlockDetails* Arena::CreateMaybeMessage<::proto::steam::ClientCloudFileUploadBlockDetails>(Arena*);
template<> ::proto::steam::ClientCloudFileUploadBlockDetails_HTTPHeaders* Arena::CreateMaybeMessage<::proto::steam::ClientCloudFileUploadBlockDetails_HTTPHeaders>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace proto {
namespace steam {

// ===================================================================

class CCloud_GetUploadServerInfo_Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CCloud_GetUploadServerInfo_Request) */ {
 public:
  CCloud_GetUploadServerInfo_Request();
  virtual ~CCloud_GetUploadServerInfo_Request();

  CCloud_GetUploadServerInfo_Request(const CCloud_GetUploadServerInfo_Request& from);

  inline CCloud_GetUploadServerInfo_Request& operator=(const CCloud_GetUploadServerInfo_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CCloud_GetUploadServerInfo_Request(CCloud_GetUploadServerInfo_Request&& from) noexcept
    : CCloud_GetUploadServerInfo_Request() {
    *this = ::std::move(from);
  }

  inline CCloud_GetUploadServerInfo_Request& operator=(CCloud_GetUploadServerInfo_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CCloud_GetUploadServerInfo_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CCloud_GetUploadServerInfo_Request* internal_default_instance() {
    return reinterpret_cast<const CCloud_GetUploadServerInfo_Request*>(
               &_CCloud_GetUploadServerInfo_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CCloud_GetUploadServerInfo_Request* other);
  friend void swap(CCloud_GetUploadServerInfo_Request& a, CCloud_GetUploadServerInfo_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CCloud_GetUploadServerInfo_Request* New() const final {
    return CreateMaybeMessage<CCloud_GetUploadServerInfo_Request>(nullptr);
  }

  CCloud_GetUploadServerInfo_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CCloud_GetUploadServerInfo_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CCloud_GetUploadServerInfo_Request& from);
  void MergeFrom(const CCloud_GetUploadServerInfo_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_GetUploadServerInfo_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 appid = 1 [(.proto.steam.description) = "App ID to which a file will be uploaded to."];
  bool has_appid() const;
  void clear_appid();
  static const int kAppidFieldNumber = 1;
  ::google::protobuf::uint32 appid() const;
  void set_appid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CCloud_GetUploadServerInfo_Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 appid_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_GetUploadServerInfo_Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CCloud_GetUploadServerInfo_Response) */ {
 public:
  CCloud_GetUploadServerInfo_Response();
  virtual ~CCloud_GetUploadServerInfo_Response();

  CCloud_GetUploadServerInfo_Response(const CCloud_GetUploadServerInfo_Response& from);

  inline CCloud_GetUploadServerInfo_Response& operator=(const CCloud_GetUploadServerInfo_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CCloud_GetUploadServerInfo_Response(CCloud_GetUploadServerInfo_Response&& from) noexcept
    : CCloud_GetUploadServerInfo_Response() {
    *this = ::std::move(from);
  }

  inline CCloud_GetUploadServerInfo_Response& operator=(CCloud_GetUploadServerInfo_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CCloud_GetUploadServerInfo_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CCloud_GetUploadServerInfo_Response* internal_default_instance() {
    return reinterpret_cast<const CCloud_GetUploadServerInfo_Response*>(
               &_CCloud_GetUploadServerInfo_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CCloud_GetUploadServerInfo_Response* other);
  friend void swap(CCloud_GetUploadServerInfo_Response& a, CCloud_GetUploadServerInfo_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CCloud_GetUploadServerInfo_Response* New() const final {
    return CreateMaybeMessage<CCloud_GetUploadServerInfo_Response>(nullptr);
  }

  CCloud_GetUploadServerInfo_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CCloud_GetUploadServerInfo_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CCloud_GetUploadServerInfo_Response& from);
  void MergeFrom(const CCloud_GetUploadServerInfo_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_GetUploadServerInfo_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string server_url = 1;
  bool has_server_url() const;
  void clear_server_url();
  static const int kServerUrlFieldNumber = 1;
  const ::std::string& server_url() const;
  void set_server_url(const ::std::string& value);
  #if LANG_CXX11
  void set_server_url(::std::string&& value);
  #endif
  void set_server_url(const char* value);
  void set_server_url(const char* value, size_t size);
  ::std::string* mutable_server_url();
  ::std::string* release_server_url();
  void set_allocated_server_url(::std::string* server_url);

  // @@protoc_insertion_point(class_scope:proto.steam.CCloud_GetUploadServerInfo_Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr server_url_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_BeginHTTPUpload_Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CCloud_BeginHTTPUpload_Request) */ {
 public:
  CCloud_BeginHTTPUpload_Request();
  virtual ~CCloud_BeginHTTPUpload_Request();

  CCloud_BeginHTTPUpload_Request(const CCloud_BeginHTTPUpload_Request& from);

  inline CCloud_BeginHTTPUpload_Request& operator=(const CCloud_BeginHTTPUpload_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CCloud_BeginHTTPUpload_Request(CCloud_BeginHTTPUpload_Request&& from) noexcept
    : CCloud_BeginHTTPUpload_Request() {
    *this = ::std::move(from);
  }

  inline CCloud_BeginHTTPUpload_Request& operator=(CCloud_BeginHTTPUpload_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CCloud_BeginHTTPUpload_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CCloud_BeginHTTPUpload_Request* internal_default_instance() {
    return reinterpret_cast<const CCloud_BeginHTTPUpload_Request*>(
               &_CCloud_BeginHTTPUpload_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CCloud_BeginHTTPUpload_Request* other);
  friend void swap(CCloud_BeginHTTPUpload_Request& a, CCloud_BeginHTTPUpload_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CCloud_BeginHTTPUpload_Request* New() const final {
    return CreateMaybeMessage<CCloud_BeginHTTPUpload_Request>(nullptr);
  }

  CCloud_BeginHTTPUpload_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CCloud_BeginHTTPUpload_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CCloud_BeginHTTPUpload_Request& from);
  void MergeFrom(const CCloud_BeginHTTPUpload_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_BeginHTTPUpload_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string platforms_to_sync = 6 [(.proto.steam.description) = "Array of string specifying which platforms to sync; value values: all, windows, osx, linux."];
  int platforms_to_sync_size() const;
  void clear_platforms_to_sync();
  static const int kPlatformsToSyncFieldNumber = 6;
  const ::std::string& platforms_to_sync(int index) const;
  ::std::string* mutable_platforms_to_sync(int index);
  void set_platforms_to_sync(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_platforms_to_sync(int index, ::std::string&& value);
  #endif
  void set_platforms_to_sync(int index, const char* value);
  void set_platforms_to_sync(int index, const char* value, size_t size);
  ::std::string* add_platforms_to_sync();
  void add_platforms_to_sync(const ::std::string& value);
  #if LANG_CXX11
  void add_platforms_to_sync(::std::string&& value);
  #endif
  void add_platforms_to_sync(const char* value);
  void add_platforms_to_sync(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& platforms_to_sync() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_platforms_to_sync();

  // repeated string request_headers_names = 7 [(.proto.steam.description) = "Names for headers you\'ll want to set on your upload request. May be left blank."];
  int request_headers_names_size() const;
  void clear_request_headers_names();
  static const int kRequestHeadersNamesFieldNumber = 7;
  const ::std::string& request_headers_names(int index) const;
  ::std::string* mutable_request_headers_names(int index);
  void set_request_headers_names(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_request_headers_names(int index, ::std::string&& value);
  #endif
  void set_request_headers_names(int index, const char* value);
  void set_request_headers_names(int index, const char* value, size_t size);
  ::std::string* add_request_headers_names();
  void add_request_headers_names(const ::std::string& value);
  #if LANG_CXX11
  void add_request_headers_names(::std::string&& value);
  #endif
  void add_request_headers_names(const char* value);
  void add_request_headers_names(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& request_headers_names() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_request_headers_names();

  // repeated string request_headers_values = 8 [(.proto.steam.description) = "Values for headers you\'ll want to set on your upload request. The number of names must equal the number of values."];
  int request_headers_values_size() const;
  void clear_request_headers_values();
  static const int kRequestHeadersValuesFieldNumber = 8;
  const ::std::string& request_headers_values(int index) const;
  ::std::string* mutable_request_headers_values(int index);
  void set_request_headers_values(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_request_headers_values(int index, ::std::string&& value);
  #endif
  void set_request_headers_values(int index, const char* value);
  void set_request_headers_values(int index, const char* value, size_t size);
  ::std::string* add_request_headers_values();
  void add_request_headers_values(const ::std::string& value);
  #if LANG_CXX11
  void add_request_headers_values(::std::string&& value);
  #endif
  void add_request_headers_values(const char* value);
  void add_request_headers_values(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& request_headers_values() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_request_headers_values();

  // optional string filename = 3 [(.proto.steam.description) = "Name of the file to store in the cloud."];
  bool has_filename() const;
  void clear_filename();
  static const int kFilenameFieldNumber = 3;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_filename(::std::string&& value);
  #endif
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // optional string file_sha = 4 [(.proto.steam.description) = "Hex string (40 digits) representing the SHA1 digest of the file."];
  bool has_file_sha() const;
  void clear_file_sha();
  static const int kFileShaFieldNumber = 4;
  const ::std::string& file_sha() const;
  void set_file_sha(const ::std::string& value);
  #if LANG_CXX11
  void set_file_sha(::std::string&& value);
  #endif
  void set_file_sha(const char* value);
  void set_file_sha(const char* value, size_t size);
  ::std::string* mutable_file_sha();
  ::std::string* release_file_sha();
  void set_allocated_file_sha(::std::string* file_sha);

  // optional uint32 appid = 1 [(.proto.steam.description) = "App ID for which the file is being uploaded."];
  bool has_appid() const;
  void clear_appid();
  static const int kAppidFieldNumber = 1;
  ::google::protobuf::uint32 appid() const;
  void set_appid(::google::protobuf::uint32 value);

  // optional uint32 file_size = 2 [(.proto.steam.description) = "Original file size in bytes."];
  bool has_file_size() const;
  void clear_file_size();
  static const int kFileSizeFieldNumber = 2;
  ::google::protobuf::uint32 file_size() const;
  void set_file_size(::google::protobuf::uint32 value);

  // optional bool is_public = 5 [(.proto.steam.description) = "True if the file should be marked public on the UFS, false otherwise."];
  bool has_is_public() const;
  void clear_is_public();
  static const int kIsPublicFieldNumber = 5;
  bool is_public() const;
  void set_is_public(bool value);

  // @@protoc_insertion_point(class_scope:proto.steam.CCloud_BeginHTTPUpload_Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField<::std::string> platforms_to_sync_;
  ::google::protobuf::RepeatedPtrField<::std::string> request_headers_names_;
  ::google::protobuf::RepeatedPtrField<::std::string> request_headers_values_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  ::google::protobuf::internal::ArenaStringPtr file_sha_;
  ::google::protobuf::uint32 appid_;
  ::google::protobuf::uint32 file_size_;
  bool is_public_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_BeginHTTPUpload_Response_HTTPHeaders final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders) */ {
 public:
  CCloud_BeginHTTPUpload_Response_HTTPHeaders();
  virtual ~CCloud_BeginHTTPUpload_Response_HTTPHeaders();

  CCloud_BeginHTTPUpload_Response_HTTPHeaders(const CCloud_BeginHTTPUpload_Response_HTTPHeaders& from);

  inline CCloud_BeginHTTPUpload_Response_HTTPHeaders& operator=(const CCloud_BeginHTTPUpload_Response_HTTPHeaders& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CCloud_BeginHTTPUpload_Response_HTTPHeaders(CCloud_BeginHTTPUpload_Response_HTTPHeaders&& from) noexcept
    : CCloud_BeginHTTPUpload_Response_HTTPHeaders() {
    *this = ::std::move(from);
  }

  inline CCloud_BeginHTTPUpload_Response_HTTPHeaders& operator=(CCloud_BeginHTTPUpload_Response_HTTPHeaders&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CCloud_BeginHTTPUpload_Response_HTTPHeaders& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CCloud_BeginHTTPUpload_Response_HTTPHeaders* internal_default_instance() {
    return reinterpret_cast<const CCloud_BeginHTTPUpload_Response_HTTPHeaders*>(
               &_CCloud_BeginHTTPUpload_Response_HTTPHeaders_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(CCloud_BeginHTTPUpload_Response_HTTPHeaders* other);
  friend void swap(CCloud_BeginHTTPUpload_Response_HTTPHeaders& a, CCloud_BeginHTTPUpload_Response_HTTPHeaders& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CCloud_BeginHTTPUpload_Response_HTTPHeaders* New() const final {
    return CreateMaybeMessage<CCloud_BeginHTTPUpload_Response_HTTPHeaders>(nullptr);
  }

  CCloud_BeginHTTPUpload_Response_HTTPHeaders* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CCloud_BeginHTTPUpload_Response_HTTPHeaders>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CCloud_BeginHTTPUpload_Response_HTTPHeaders& from);
  void MergeFrom(const CCloud_BeginHTTPUpload_Response_HTTPHeaders& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_BeginHTTPUpload_Response_HTTPHeaders* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_BeginHTTPUpload_Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CCloud_BeginHTTPUpload_Response) */ {
 public:
  CCloud_BeginHTTPUpload_Response();
  virtual ~CCloud_BeginHTTPUpload_Response();

  CCloud_BeginHTTPUpload_Response(const CCloud_BeginHTTPUpload_Response& from);

  inline CCloud_BeginHTTPUpload_Response& operator=(const CCloud_BeginHTTPUpload_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CCloud_BeginHTTPUpload_Response(CCloud_BeginHTTPUpload_Response&& from) noexcept
    : CCloud_BeginHTTPUpload_Response() {
    *this = ::std::move(from);
  }

  inline CCloud_BeginHTTPUpload_Response& operator=(CCloud_BeginHTTPUpload_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CCloud_BeginHTTPUpload_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CCloud_BeginHTTPUpload_Response* internal_default_instance() {
    return reinterpret_cast<const CCloud_BeginHTTPUpload_Response*>(
               &_CCloud_BeginHTTPUpload_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(CCloud_BeginHTTPUpload_Response* other);
  friend void swap(CCloud_BeginHTTPUpload_Response& a, CCloud_BeginHTTPUpload_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CCloud_BeginHTTPUpload_Response* New() const final {
    return CreateMaybeMessage<CCloud_BeginHTTPUpload_Response>(nullptr);
  }

  CCloud_BeginHTTPUpload_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CCloud_BeginHTTPUpload_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CCloud_BeginHTTPUpload_Response& from);
  void MergeFrom(const CCloud_BeginHTTPUpload_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_BeginHTTPUpload_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CCloud_BeginHTTPUpload_Response_HTTPHeaders HTTPHeaders;

  // accessors -------------------------------------------------------

  // repeated .proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders request_headers = 6 [(.proto.steam.description) = "Name-value pairs to be sent in HTTP PUT request."];
  int request_headers_size() const;
  void clear_request_headers();
  static const int kRequestHeadersFieldNumber = 6;
  ::proto::steam::CCloud_BeginHTTPUpload_Response_HTTPHeaders* mutable_request_headers(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CCloud_BeginHTTPUpload_Response_HTTPHeaders >*
      mutable_request_headers();
  const ::proto::steam::CCloud_BeginHTTPUpload_Response_HTTPHeaders& request_headers(int index) const;
  ::proto::steam::CCloud_BeginHTTPUpload_Response_HTTPHeaders* add_request_headers();
  const ::google::protobuf::RepeatedPtrField< ::proto::steam::CCloud_BeginHTTPUpload_Response_HTTPHeaders >&
      request_headers() const;

  // optional string url_host = 3 [(.proto.steam.description) = "Host name of server to which file should be uploaded via HTTP PUT."];
  bool has_url_host() const;
  void clear_url_host();
  static const int kUrlHostFieldNumber = 3;
  const ::std::string& url_host() const;
  void set_url_host(const ::std::string& value);
  #if LANG_CXX11
  void set_url_host(::std::string&& value);
  #endif
  void set_url_host(const char* value);
  void set_url_host(const char* value, size_t size);
  ::std::string* mutable_url_host();
  ::std::string* release_url_host();
  void set_allocated_url_host(::std::string* url_host);

  // optional string url_path = 4 [(.proto.steam.description) = "Relative path on server to which file should be uploaded."];
  bool has_url_path() const;
  void clear_url_path();
  static const int kUrlPathFieldNumber = 4;
  const ::std::string& url_path() const;
  void set_url_path(const ::std::string& value);
  #if LANG_CXX11
  void set_url_path(::std::string&& value);
  #endif
  void set_url_path(const char* value);
  void set_url_path(const char* value, size_t size);
  ::std::string* mutable_url_path();
  ::std::string* release_url_path();
  void set_allocated_url_path(::std::string* url_path);

  // optional fixed64 ugcid = 1 [(.proto.steam.description) = "UGC ID of the uploaded file."];
  bool has_ugcid() const;
  void clear_ugcid();
  static const int kUgcidFieldNumber = 1;
  ::google::protobuf::uint64 ugcid() const;
  void set_ugcid(::google::protobuf::uint64 value);

  // optional fixed32 timestamp = 2 [(.proto.steam.description) = "Server timestamp of file."];
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  ::google::protobuf::uint32 timestamp() const;
  void set_timestamp(::google::protobuf::uint32 value);

  // optional bool use_https = 5 [(.proto.steam.description) = "If true, use https, otherwise use http."];
  bool has_use_https() const;
  void clear_use_https();
  static const int kUseHttpsFieldNumber = 5;
  bool use_https() const;
  void set_use_https(bool value);

  // @@protoc_insertion_point(class_scope:proto.steam.CCloud_BeginHTTPUpload_Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CCloud_BeginHTTPUpload_Response_HTTPHeaders > request_headers_;
  ::google::protobuf::internal::ArenaStringPtr url_host_;
  ::google::protobuf::internal::ArenaStringPtr url_path_;
  ::google::protobuf::uint64 ugcid_;
  ::google::protobuf::uint32 timestamp_;
  bool use_https_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_CommitHTTPUpload_Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CCloud_CommitHTTPUpload_Request) */ {
 public:
  CCloud_CommitHTTPUpload_Request();
  virtual ~CCloud_CommitHTTPUpload_Request();

  CCloud_CommitHTTPUpload_Request(const CCloud_CommitHTTPUpload_Request& from);

  inline CCloud_CommitHTTPUpload_Request& operator=(const CCloud_CommitHTTPUpload_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CCloud_CommitHTTPUpload_Request(CCloud_CommitHTTPUpload_Request&& from) noexcept
    : CCloud_CommitHTTPUpload_Request() {
    *this = ::std::move(from);
  }

  inline CCloud_CommitHTTPUpload_Request& operator=(CCloud_CommitHTTPUpload_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CCloud_CommitHTTPUpload_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CCloud_CommitHTTPUpload_Request* internal_default_instance() {
    return reinterpret_cast<const CCloud_CommitHTTPUpload_Request*>(
               &_CCloud_CommitHTTPUpload_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(CCloud_CommitHTTPUpload_Request* other);
  friend void swap(CCloud_CommitHTTPUpload_Request& a, CCloud_CommitHTTPUpload_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CCloud_CommitHTTPUpload_Request* New() const final {
    return CreateMaybeMessage<CCloud_CommitHTTPUpload_Request>(nullptr);
  }

  CCloud_CommitHTTPUpload_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CCloud_CommitHTTPUpload_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CCloud_CommitHTTPUpload_Request& from);
  void MergeFrom(const CCloud_CommitHTTPUpload_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_CommitHTTPUpload_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string file_sha = 3 [(.proto.steam.description) = "Hex string (40 digits) representing the SHA1 digest of the file. Must match the SHA1 digest provided to Cloud.BeginHTTPUpload."];
  bool has_file_sha() const;
  void clear_file_sha();
  static const int kFileShaFieldNumber = 3;
  const ::std::string& file_sha() const;
  void set_file_sha(const ::std::string& value);
  #if LANG_CXX11
  void set_file_sha(::std::string&& value);
  #endif
  void set_file_sha(const char* value);
  void set_file_sha(const char* value, size_t size);
  ::std::string* mutable_file_sha();
  ::std::string* release_file_sha();
  void set_allocated_file_sha(::std::string* file_sha);

  // optional string filename = 4 [(.proto.steam.description) = "Filename as specified in the Cloud.BeginHTTPUpload request."];
  bool has_filename() const;
  void clear_filename();
  static const int kFilenameFieldNumber = 4;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_filename(::std::string&& value);
  #endif
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // optional bool transfer_succeeded = 1 [(.proto.steam.description) = "True if the HTTP PUT to the upload URL succeeded (URL provided in response to Cloud.BeginHTTPUpload), false if a failure occurred."];
  bool has_transfer_succeeded() const;
  void clear_transfer_succeeded();
  static const int kTransferSucceededFieldNumber = 1;
  bool transfer_succeeded() const;
  void set_transfer_succeeded(bool value);

  // optional uint32 appid = 2 [(.proto.steam.description) = "App ID for which the file is being uploaded. Must match the app ID provided to Cloud.BeginHTTPUpload."];
  bool has_appid() const;
  void clear_appid();
  static const int kAppidFieldNumber = 2;
  ::google::protobuf::uint32 appid() const;
  void set_appid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CCloud_CommitHTTPUpload_Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr file_sha_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  bool transfer_succeeded_;
  ::google::protobuf::uint32 appid_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_CommitHTTPUpload_Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CCloud_CommitHTTPUpload_Response) */ {
 public:
  CCloud_CommitHTTPUpload_Response();
  virtual ~CCloud_CommitHTTPUpload_Response();

  CCloud_CommitHTTPUpload_Response(const CCloud_CommitHTTPUpload_Response& from);

  inline CCloud_CommitHTTPUpload_Response& operator=(const CCloud_CommitHTTPUpload_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CCloud_CommitHTTPUpload_Response(CCloud_CommitHTTPUpload_Response&& from) noexcept
    : CCloud_CommitHTTPUpload_Response() {
    *this = ::std::move(from);
  }

  inline CCloud_CommitHTTPUpload_Response& operator=(CCloud_CommitHTTPUpload_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CCloud_CommitHTTPUpload_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CCloud_CommitHTTPUpload_Response* internal_default_instance() {
    return reinterpret_cast<const CCloud_CommitHTTPUpload_Response*>(
               &_CCloud_CommitHTTPUpload_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(CCloud_CommitHTTPUpload_Response* other);
  friend void swap(CCloud_CommitHTTPUpload_Response& a, CCloud_CommitHTTPUpload_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CCloud_CommitHTTPUpload_Response* New() const final {
    return CreateMaybeMessage<CCloud_CommitHTTPUpload_Response>(nullptr);
  }

  CCloud_CommitHTTPUpload_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CCloud_CommitHTTPUpload_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CCloud_CommitHTTPUpload_Response& from);
  void MergeFrom(const CCloud_CommitHTTPUpload_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_CommitHTTPUpload_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool file_committed = 1 [(.proto.steam.description) = "True if the file was successfully committed, false otherwise."];
  bool has_file_committed() const;
  void clear_file_committed();
  static const int kFileCommittedFieldNumber = 1;
  bool file_committed() const;
  void set_file_committed(bool value);

  // @@protoc_insertion_point(class_scope:proto.steam.CCloud_CommitHTTPUpload_Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  bool file_committed_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_GetFileDetails_Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CCloud_GetFileDetails_Request) */ {
 public:
  CCloud_GetFileDetails_Request();
  virtual ~CCloud_GetFileDetails_Request();

  CCloud_GetFileDetails_Request(const CCloud_GetFileDetails_Request& from);

  inline CCloud_GetFileDetails_Request& operator=(const CCloud_GetFileDetails_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CCloud_GetFileDetails_Request(CCloud_GetFileDetails_Request&& from) noexcept
    : CCloud_GetFileDetails_Request() {
    *this = ::std::move(from);
  }

  inline CCloud_GetFileDetails_Request& operator=(CCloud_GetFileDetails_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CCloud_GetFileDetails_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CCloud_GetFileDetails_Request* internal_default_instance() {
    return reinterpret_cast<const CCloud_GetFileDetails_Request*>(
               &_CCloud_GetFileDetails_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(CCloud_GetFileDetails_Request* other);
  friend void swap(CCloud_GetFileDetails_Request& a, CCloud_GetFileDetails_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CCloud_GetFileDetails_Request* New() const final {
    return CreateMaybeMessage<CCloud_GetFileDetails_Request>(nullptr);
  }

  CCloud_GetFileDetails_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CCloud_GetFileDetails_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CCloud_GetFileDetails_Request& from);
  void MergeFrom(const CCloud_GetFileDetails_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_GetFileDetails_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 ugcid = 1 [(.proto.steam.description) = "ID of the Cloud file to get details for."];
  bool has_ugcid() const;
  void clear_ugcid();
  static const int kUgcidFieldNumber = 1;
  ::google::protobuf::uint64 ugcid() const;
  void set_ugcid(::google::protobuf::uint64 value);

  // optional uint32 appid = 2 [(.proto.steam.description) = "App ID the file belongs to."];
  bool has_appid() const;
  void clear_appid();
  static const int kAppidFieldNumber = 2;
  ::google::protobuf::uint32 appid() const;
  void set_appid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CCloud_GetFileDetails_Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 ugcid_;
  ::google::protobuf::uint32 appid_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_UserFile final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CCloud_UserFile) */ {
 public:
  CCloud_UserFile();
  virtual ~CCloud_UserFile();

  CCloud_UserFile(const CCloud_UserFile& from);

  inline CCloud_UserFile& operator=(const CCloud_UserFile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CCloud_UserFile(CCloud_UserFile&& from) noexcept
    : CCloud_UserFile() {
    *this = ::std::move(from);
  }

  inline CCloud_UserFile& operator=(CCloud_UserFile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CCloud_UserFile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CCloud_UserFile* internal_default_instance() {
    return reinterpret_cast<const CCloud_UserFile*>(
               &_CCloud_UserFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(CCloud_UserFile* other);
  friend void swap(CCloud_UserFile& a, CCloud_UserFile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CCloud_UserFile* New() const final {
    return CreateMaybeMessage<CCloud_UserFile>(nullptr);
  }

  CCloud_UserFile* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CCloud_UserFile>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CCloud_UserFile& from);
  void MergeFrom(const CCloud_UserFile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_UserFile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string filename = 3;
  bool has_filename() const;
  void clear_filename();
  static const int kFilenameFieldNumber = 3;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_filename(::std::string&& value);
  #endif
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // optional string url = 6;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 6;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional uint64 ugcid = 2;
  bool has_ugcid() const;
  void clear_ugcid();
  static const int kUgcidFieldNumber = 2;
  ::google::protobuf::uint64 ugcid() const;
  void set_ugcid(::google::protobuf::uint64 value);

  // optional uint32 appid = 1;
  bool has_appid() const;
  void clear_appid();
  static const int kAppidFieldNumber = 1;
  ::google::protobuf::uint32 appid() const;
  void set_appid(::google::protobuf::uint32 value);

  // optional uint32 file_size = 5;
  bool has_file_size() const;
  void clear_file_size();
  static const int kFileSizeFieldNumber = 5;
  ::google::protobuf::uint32 file_size() const;
  void set_file_size(::google::protobuf::uint32 value);

  // optional uint64 timestamp = 4;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 4;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // optional fixed64 steamid_creator = 7;
  bool has_steamid_creator() const;
  void clear_steamid_creator();
  static const int kSteamidCreatorFieldNumber = 7;
  ::google::protobuf::uint64 steamid_creator() const;
  void set_steamid_creator(::google::protobuf::uint64 value);

  // optional uint32 flags = 8;
  bool has_flags() const;
  void clear_flags();
  static const int kFlagsFieldNumber = 8;
  ::google::protobuf::uint32 flags() const;
  void set_flags(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CCloud_UserFile)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::uint64 ugcid_;
  ::google::protobuf::uint32 appid_;
  ::google::protobuf::uint32 file_size_;
  ::google::protobuf::uint64 timestamp_;
  ::google::protobuf::uint64 steamid_creator_;
  ::google::protobuf::uint32 flags_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_GetFileDetails_Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CCloud_GetFileDetails_Response) */ {
 public:
  CCloud_GetFileDetails_Response();
  virtual ~CCloud_GetFileDetails_Response();

  CCloud_GetFileDetails_Response(const CCloud_GetFileDetails_Response& from);

  inline CCloud_GetFileDetails_Response& operator=(const CCloud_GetFileDetails_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CCloud_GetFileDetails_Response(CCloud_GetFileDetails_Response&& from) noexcept
    : CCloud_GetFileDetails_Response() {
    *this = ::std::move(from);
  }

  inline CCloud_GetFileDetails_Response& operator=(CCloud_GetFileDetails_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CCloud_GetFileDetails_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CCloud_GetFileDetails_Response* internal_default_instance() {
    return reinterpret_cast<const CCloud_GetFileDetails_Response*>(
               &_CCloud_GetFileDetails_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(CCloud_GetFileDetails_Response* other);
  friend void swap(CCloud_GetFileDetails_Response& a, CCloud_GetFileDetails_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CCloud_GetFileDetails_Response* New() const final {
    return CreateMaybeMessage<CCloud_GetFileDetails_Response>(nullptr);
  }

  CCloud_GetFileDetails_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CCloud_GetFileDetails_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CCloud_GetFileDetails_Response& from);
  void MergeFrom(const CCloud_GetFileDetails_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_GetFileDetails_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.steam.CCloud_UserFile details = 1;
  bool has_details() const;
  void clear_details();
  static const int kDetailsFieldNumber = 1;
  const ::proto::steam::CCloud_UserFile& details() const;
  ::proto::steam::CCloud_UserFile* release_details();
  ::proto::steam::CCloud_UserFile* mutable_details();
  void set_allocated_details(::proto::steam::CCloud_UserFile* details);

  // @@protoc_insertion_point(class_scope:proto.steam.CCloud_GetFileDetails_Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::proto::steam::CCloud_UserFile* details_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_EnumerateUserFiles_Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CCloud_EnumerateUserFiles_Request) */ {
 public:
  CCloud_EnumerateUserFiles_Request();
  virtual ~CCloud_EnumerateUserFiles_Request();

  CCloud_EnumerateUserFiles_Request(const CCloud_EnumerateUserFiles_Request& from);

  inline CCloud_EnumerateUserFiles_Request& operator=(const CCloud_EnumerateUserFiles_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CCloud_EnumerateUserFiles_Request(CCloud_EnumerateUserFiles_Request&& from) noexcept
    : CCloud_EnumerateUserFiles_Request() {
    *this = ::std::move(from);
  }

  inline CCloud_EnumerateUserFiles_Request& operator=(CCloud_EnumerateUserFiles_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CCloud_EnumerateUserFiles_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CCloud_EnumerateUserFiles_Request* internal_default_instance() {
    return reinterpret_cast<const CCloud_EnumerateUserFiles_Request*>(
               &_CCloud_EnumerateUserFiles_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(CCloud_EnumerateUserFiles_Request* other);
  friend void swap(CCloud_EnumerateUserFiles_Request& a, CCloud_EnumerateUserFiles_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CCloud_EnumerateUserFiles_Request* New() const final {
    return CreateMaybeMessage<CCloud_EnumerateUserFiles_Request>(nullptr);
  }

  CCloud_EnumerateUserFiles_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CCloud_EnumerateUserFiles_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CCloud_EnumerateUserFiles_Request& from);
  void MergeFrom(const CCloud_EnumerateUserFiles_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_EnumerateUserFiles_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 appid = 1 [(.proto.steam.description) = "App ID to enumerate the files of."];
  bool has_appid() const;
  void clear_appid();
  static const int kAppidFieldNumber = 1;
  ::google::protobuf::uint32 appid() const;
  void set_appid(::google::protobuf::uint32 value);

  // optional bool extended_details = 2 [(.proto.steam.description) = "(Optional) Get extended details back on the files found. Defaults to only returned the app Id and UGC Id of the files found."];
  bool has_extended_details() const;
  void clear_extended_details();
  static const int kExtendedDetailsFieldNumber = 2;
  bool extended_details() const;
  void set_extended_details(bool value);

  // optional uint32 count = 3 [(.proto.steam.description) = "(Optional) Maximum number of results to return on this call. Defaults to a maximum of 500 files returned."];
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 3;
  ::google::protobuf::uint32 count() const;
  void set_count(::google::protobuf::uint32 value);

  // optional uint32 start_index = 4 [(.proto.steam.description) = "(Optional) Starting index to begin enumeration at. Defaults to the beginning of the list."];
  bool has_start_index() const;
  void clear_start_index();
  static const int kStartIndexFieldNumber = 4;
  ::google::protobuf::uint32 start_index() const;
  void set_start_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CCloud_EnumerateUserFiles_Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 appid_;
  bool extended_details_;
  ::google::protobuf::uint32 count_;
  ::google::protobuf::uint32 start_index_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_EnumerateUserFiles_Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CCloud_EnumerateUserFiles_Response) */ {
 public:
  CCloud_EnumerateUserFiles_Response();
  virtual ~CCloud_EnumerateUserFiles_Response();

  CCloud_EnumerateUserFiles_Response(const CCloud_EnumerateUserFiles_Response& from);

  inline CCloud_EnumerateUserFiles_Response& operator=(const CCloud_EnumerateUserFiles_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CCloud_EnumerateUserFiles_Response(CCloud_EnumerateUserFiles_Response&& from) noexcept
    : CCloud_EnumerateUserFiles_Response() {
    *this = ::std::move(from);
  }

  inline CCloud_EnumerateUserFiles_Response& operator=(CCloud_EnumerateUserFiles_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CCloud_EnumerateUserFiles_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CCloud_EnumerateUserFiles_Response* internal_default_instance() {
    return reinterpret_cast<const CCloud_EnumerateUserFiles_Response*>(
               &_CCloud_EnumerateUserFiles_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(CCloud_EnumerateUserFiles_Response* other);
  friend void swap(CCloud_EnumerateUserFiles_Response& a, CCloud_EnumerateUserFiles_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CCloud_EnumerateUserFiles_Response* New() const final {
    return CreateMaybeMessage<CCloud_EnumerateUserFiles_Response>(nullptr);
  }

  CCloud_EnumerateUserFiles_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CCloud_EnumerateUserFiles_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CCloud_EnumerateUserFiles_Response& from);
  void MergeFrom(const CCloud_EnumerateUserFiles_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_EnumerateUserFiles_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.steam.CCloud_UserFile files = 1;
  int files_size() const;
  void clear_files();
  static const int kFilesFieldNumber = 1;
  ::proto::steam::CCloud_UserFile* mutable_files(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CCloud_UserFile >*
      mutable_files();
  const ::proto::steam::CCloud_UserFile& files(int index) const;
  ::proto::steam::CCloud_UserFile* add_files();
  const ::google::protobuf::RepeatedPtrField< ::proto::steam::CCloud_UserFile >&
      files() const;

  // optional uint32 total_files = 2;
  bool has_total_files() const;
  void clear_total_files();
  static const int kTotalFilesFieldNumber = 2;
  ::google::protobuf::uint32 total_files() const;
  void set_total_files(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CCloud_EnumerateUserFiles_Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CCloud_UserFile > files_;
  ::google::protobuf::uint32 total_files_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_Delete_Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CCloud_Delete_Request) */ {
 public:
  CCloud_Delete_Request();
  virtual ~CCloud_Delete_Request();

  CCloud_Delete_Request(const CCloud_Delete_Request& from);

  inline CCloud_Delete_Request& operator=(const CCloud_Delete_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CCloud_Delete_Request(CCloud_Delete_Request&& from) noexcept
    : CCloud_Delete_Request() {
    *this = ::std::move(from);
  }

  inline CCloud_Delete_Request& operator=(CCloud_Delete_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CCloud_Delete_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CCloud_Delete_Request* internal_default_instance() {
    return reinterpret_cast<const CCloud_Delete_Request*>(
               &_CCloud_Delete_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(CCloud_Delete_Request* other);
  friend void swap(CCloud_Delete_Request& a, CCloud_Delete_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CCloud_Delete_Request* New() const final {
    return CreateMaybeMessage<CCloud_Delete_Request>(nullptr);
  }

  CCloud_Delete_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CCloud_Delete_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CCloud_Delete_Request& from);
  void MergeFrom(const CCloud_Delete_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_Delete_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string filename = 1;
  bool has_filename() const;
  void clear_filename();
  static const int kFilenameFieldNumber = 1;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_filename(::std::string&& value);
  #endif
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // optional uint32 appid = 2 [(.proto.steam.description) = "App ID the file belongs to."];
  bool has_appid() const;
  void clear_appid();
  static const int kAppidFieldNumber = 2;
  ::google::protobuf::uint32 appid() const;
  void set_appid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CCloud_Delete_Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  ::google::protobuf::uint32 appid_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_Delete_Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CCloud_Delete_Response) */ {
 public:
  CCloud_Delete_Response();
  virtual ~CCloud_Delete_Response();

  CCloud_Delete_Response(const CCloud_Delete_Response& from);

  inline CCloud_Delete_Response& operator=(const CCloud_Delete_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CCloud_Delete_Response(CCloud_Delete_Response&& from) noexcept
    : CCloud_Delete_Response() {
    *this = ::std::move(from);
  }

  inline CCloud_Delete_Response& operator=(CCloud_Delete_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CCloud_Delete_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CCloud_Delete_Response* internal_default_instance() {
    return reinterpret_cast<const CCloud_Delete_Response*>(
               &_CCloud_Delete_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(CCloud_Delete_Response* other);
  friend void swap(CCloud_Delete_Response& a, CCloud_Delete_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CCloud_Delete_Response* New() const final {
    return CreateMaybeMessage<CCloud_Delete_Response>(nullptr);
  }

  CCloud_Delete_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CCloud_Delete_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CCloud_Delete_Response& from);
  void MergeFrom(const CCloud_Delete_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_Delete_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.steam.CCloud_Delete_Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_GetClientEncryptionKey_Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CCloud_GetClientEncryptionKey_Request) */ {
 public:
  CCloud_GetClientEncryptionKey_Request();
  virtual ~CCloud_GetClientEncryptionKey_Request();

  CCloud_GetClientEncryptionKey_Request(const CCloud_GetClientEncryptionKey_Request& from);

  inline CCloud_GetClientEncryptionKey_Request& operator=(const CCloud_GetClientEncryptionKey_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CCloud_GetClientEncryptionKey_Request(CCloud_GetClientEncryptionKey_Request&& from) noexcept
    : CCloud_GetClientEncryptionKey_Request() {
    *this = ::std::move(from);
  }

  inline CCloud_GetClientEncryptionKey_Request& operator=(CCloud_GetClientEncryptionKey_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CCloud_GetClientEncryptionKey_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CCloud_GetClientEncryptionKey_Request* internal_default_instance() {
    return reinterpret_cast<const CCloud_GetClientEncryptionKey_Request*>(
               &_CCloud_GetClientEncryptionKey_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(CCloud_GetClientEncryptionKey_Request* other);
  friend void swap(CCloud_GetClientEncryptionKey_Request& a, CCloud_GetClientEncryptionKey_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CCloud_GetClientEncryptionKey_Request* New() const final {
    return CreateMaybeMessage<CCloud_GetClientEncryptionKey_Request>(nullptr);
  }

  CCloud_GetClientEncryptionKey_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CCloud_GetClientEncryptionKey_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CCloud_GetClientEncryptionKey_Request& from);
  void MergeFrom(const CCloud_GetClientEncryptionKey_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_GetClientEncryptionKey_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.steam.CCloud_GetClientEncryptionKey_Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_GetClientEncryptionKey_Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CCloud_GetClientEncryptionKey_Response) */ {
 public:
  CCloud_GetClientEncryptionKey_Response();
  virtual ~CCloud_GetClientEncryptionKey_Response();

  CCloud_GetClientEncryptionKey_Response(const CCloud_GetClientEncryptionKey_Response& from);

  inline CCloud_GetClientEncryptionKey_Response& operator=(const CCloud_GetClientEncryptionKey_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CCloud_GetClientEncryptionKey_Response(CCloud_GetClientEncryptionKey_Response&& from) noexcept
    : CCloud_GetClientEncryptionKey_Response() {
    *this = ::std::move(from);
  }

  inline CCloud_GetClientEncryptionKey_Response& operator=(CCloud_GetClientEncryptionKey_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CCloud_GetClientEncryptionKey_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CCloud_GetClientEncryptionKey_Response* internal_default_instance() {
    return reinterpret_cast<const CCloud_GetClientEncryptionKey_Response*>(
               &_CCloud_GetClientEncryptionKey_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(CCloud_GetClientEncryptionKey_Response* other);
  friend void swap(CCloud_GetClientEncryptionKey_Response& a, CCloud_GetClientEncryptionKey_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CCloud_GetClientEncryptionKey_Response* New() const final {
    return CreateMaybeMessage<CCloud_GetClientEncryptionKey_Response>(nullptr);
  }

  CCloud_GetClientEncryptionKey_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CCloud_GetClientEncryptionKey_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CCloud_GetClientEncryptionKey_Response& from);
  void MergeFrom(const CCloud_GetClientEncryptionKey_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_GetClientEncryptionKey_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes key = 1 [(.proto.steam.description) = "AES-256 encryption key"];
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional int32 crc = 2 [(.proto.steam.description) = "CRC of key"];
  bool has_crc() const;
  void clear_crc();
  static const int kCrcFieldNumber = 2;
  ::google::protobuf::int32 crc() const;
  void set_crc(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CCloud_GetClientEncryptionKey_Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::int32 crc_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_CDNReport_Notification final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CCloud_CDNReport_Notification) */ {
 public:
  CCloud_CDNReport_Notification();
  virtual ~CCloud_CDNReport_Notification();

  CCloud_CDNReport_Notification(const CCloud_CDNReport_Notification& from);

  inline CCloud_CDNReport_Notification& operator=(const CCloud_CDNReport_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CCloud_CDNReport_Notification(CCloud_CDNReport_Notification&& from) noexcept
    : CCloud_CDNReport_Notification() {
    *this = ::std::move(from);
  }

  inline CCloud_CDNReport_Notification& operator=(CCloud_CDNReport_Notification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CCloud_CDNReport_Notification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CCloud_CDNReport_Notification* internal_default_instance() {
    return reinterpret_cast<const CCloud_CDNReport_Notification*>(
               &_CCloud_CDNReport_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(CCloud_CDNReport_Notification* other);
  friend void swap(CCloud_CDNReport_Notification& a, CCloud_CDNReport_Notification& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CCloud_CDNReport_Notification* New() const final {
    return CreateMaybeMessage<CCloud_CDNReport_Notification>(nullptr);
  }

  CCloud_CDNReport_Notification* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CCloud_CDNReport_Notification>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CCloud_CDNReport_Notification& from);
  void MergeFrom(const CCloud_CDNReport_Notification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_CDNReport_Notification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string url = 2;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 2;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  void clear_steamid();
  static const int kSteamidFieldNumber = 1;
  ::google::protobuf::uint64 steamid() const;
  void set_steamid(::google::protobuf::uint64 value);

  // optional bool success = 3;
  bool has_success() const;
  void clear_success();
  static const int kSuccessFieldNumber = 3;
  bool success() const;
  void set_success(bool value);

  // optional uint32 http_status_code = 4;
  bool has_http_status_code() const;
  void clear_http_status_code();
  static const int kHttpStatusCodeFieldNumber = 4;
  ::google::protobuf::uint32 http_status_code() const;
  void set_http_status_code(::google::protobuf::uint32 value);

  // optional uint64 expected_bytes = 5;
  bool has_expected_bytes() const;
  void clear_expected_bytes();
  static const int kExpectedBytesFieldNumber = 5;
  ::google::protobuf::uint64 expected_bytes() const;
  void set_expected_bytes(::google::protobuf::uint64 value);

  // optional uint64 received_bytes = 6;
  bool has_received_bytes() const;
  void clear_received_bytes();
  static const int kReceivedBytesFieldNumber = 6;
  ::google::protobuf::uint64 received_bytes() const;
  void set_received_bytes(::google::protobuf::uint64 value);

  // optional uint32 duration = 7;
  bool has_duration() const;
  void clear_duration();
  static const int kDurationFieldNumber = 7;
  ::google::protobuf::uint32 duration() const;
  void set_duration(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CCloud_CDNReport_Notification)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::uint64 steamid_;
  bool success_;
  ::google::protobuf::uint32 http_status_code_;
  ::google::protobuf::uint64 expected_bytes_;
  ::google::protobuf::uint64 received_bytes_;
  ::google::protobuf::uint32 duration_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_ExternalStorageTransferReport_Notification final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CCloud_ExternalStorageTransferReport_Notification) */ {
 public:
  CCloud_ExternalStorageTransferReport_Notification();
  virtual ~CCloud_ExternalStorageTransferReport_Notification();

  CCloud_ExternalStorageTransferReport_Notification(const CCloud_ExternalStorageTransferReport_Notification& from);

  inline CCloud_ExternalStorageTransferReport_Notification& operator=(const CCloud_ExternalStorageTransferReport_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CCloud_ExternalStorageTransferReport_Notification(CCloud_ExternalStorageTransferReport_Notification&& from) noexcept
    : CCloud_ExternalStorageTransferReport_Notification() {
    *this = ::std::move(from);
  }

  inline CCloud_ExternalStorageTransferReport_Notification& operator=(CCloud_ExternalStorageTransferReport_Notification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CCloud_ExternalStorageTransferReport_Notification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CCloud_ExternalStorageTransferReport_Notification* internal_default_instance() {
    return reinterpret_cast<const CCloud_ExternalStorageTransferReport_Notification*>(
               &_CCloud_ExternalStorageTransferReport_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(CCloud_ExternalStorageTransferReport_Notification* other);
  friend void swap(CCloud_ExternalStorageTransferReport_Notification& a, CCloud_ExternalStorageTransferReport_Notification& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CCloud_ExternalStorageTransferReport_Notification* New() const final {
    return CreateMaybeMessage<CCloud_ExternalStorageTransferReport_Notification>(nullptr);
  }

  CCloud_ExternalStorageTransferReport_Notification* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CCloud_ExternalStorageTransferReport_Notification>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CCloud_ExternalStorageTransferReport_Notification& from);
  void MergeFrom(const CCloud_ExternalStorageTransferReport_Notification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_ExternalStorageTransferReport_Notification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string host = 1;
  bool has_host() const;
  void clear_host();
  static const int kHostFieldNumber = 1;
  const ::std::string& host() const;
  void set_host(const ::std::string& value);
  #if LANG_CXX11
  void set_host(::std::string&& value);
  #endif
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  ::std::string* mutable_host();
  ::std::string* release_host();
  void set_allocated_host(::std::string* host);

  // optional string path = 2;
  bool has_path() const;
  void clear_path();
  static const int kPathFieldNumber = 2;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // optional bool is_upload = 3;
  bool has_is_upload() const;
  void clear_is_upload();
  static const int kIsUploadFieldNumber = 3;
  bool is_upload() const;
  void set_is_upload(bool value);

  // optional bool success = 4;
  bool has_success() const;
  void clear_success();
  static const int kSuccessFieldNumber = 4;
  bool success() const;
  void set_success(bool value);

  // optional uint32 http_status_code = 5;
  bool has_http_status_code() const;
  void clear_http_status_code();
  static const int kHttpStatusCodeFieldNumber = 5;
  ::google::protobuf::uint32 http_status_code() const;
  void set_http_status_code(::google::protobuf::uint32 value);

  // optional uint64 bytes_expected = 6;
  bool has_bytes_expected() const;
  void clear_bytes_expected();
  static const int kBytesExpectedFieldNumber = 6;
  ::google::protobuf::uint64 bytes_expected() const;
  void set_bytes_expected(::google::protobuf::uint64 value);

  // optional uint64 bytes_actual = 7;
  bool has_bytes_actual() const;
  void clear_bytes_actual();
  static const int kBytesActualFieldNumber = 7;
  ::google::protobuf::uint64 bytes_actual() const;
  void set_bytes_actual(::google::protobuf::uint64 value);

  // optional uint32 duration_ms = 8;
  bool has_duration_ms() const;
  void clear_duration_ms();
  static const int kDurationMsFieldNumber = 8;
  ::google::protobuf::uint32 duration_ms() const;
  void set_duration_ms(::google::protobuf::uint32 value);

  // optional uint32 cellid = 9;
  bool has_cellid() const;
  void clear_cellid();
  static const int kCellidFieldNumber = 9;
  ::google::protobuf::uint32 cellid() const;
  void set_cellid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CCloud_ExternalStorageTransferReport_Notification)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr host_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  bool is_upload_;
  bool success_;
  ::google::protobuf::uint32 http_status_code_;
  ::google::protobuf::uint64 bytes_expected_;
  ::google::protobuf::uint64 bytes_actual_;
  ::google::protobuf::uint32 duration_ms_;
  ::google::protobuf::uint32 cellid_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_ClientBeginFileUpload_Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CCloud_ClientBeginFileUpload_Request) */ {
 public:
  CCloud_ClientBeginFileUpload_Request();
  virtual ~CCloud_ClientBeginFileUpload_Request();

  CCloud_ClientBeginFileUpload_Request(const CCloud_ClientBeginFileUpload_Request& from);

  inline CCloud_ClientBeginFileUpload_Request& operator=(const CCloud_ClientBeginFileUpload_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CCloud_ClientBeginFileUpload_Request(CCloud_ClientBeginFileUpload_Request&& from) noexcept
    : CCloud_ClientBeginFileUpload_Request() {
    *this = ::std::move(from);
  }

  inline CCloud_ClientBeginFileUpload_Request& operator=(CCloud_ClientBeginFileUpload_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CCloud_ClientBeginFileUpload_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CCloud_ClientBeginFileUpload_Request* internal_default_instance() {
    return reinterpret_cast<const CCloud_ClientBeginFileUpload_Request*>(
               &_CCloud_ClientBeginFileUpload_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(CCloud_ClientBeginFileUpload_Request* other);
  friend void swap(CCloud_ClientBeginFileUpload_Request& a, CCloud_ClientBeginFileUpload_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CCloud_ClientBeginFileUpload_Request* New() const final {
    return CreateMaybeMessage<CCloud_ClientBeginFileUpload_Request>(nullptr);
  }

  CCloud_ClientBeginFileUpload_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CCloud_ClientBeginFileUpload_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CCloud_ClientBeginFileUpload_Request& from);
  void MergeFrom(const CCloud_ClientBeginFileUpload_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_ClientBeginFileUpload_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes file_sha = 4 [(.proto.steam.description) = "SHA-1 of raw file."];
  bool has_file_sha() const;
  void clear_file_sha();
  static const int kFileShaFieldNumber = 4;
  const ::std::string& file_sha() const;
  void set_file_sha(const ::std::string& value);
  #if LANG_CXX11
  void set_file_sha(::std::string&& value);
  #endif
  void set_file_sha(const char* value);
  void set_file_sha(const void* value, size_t size);
  ::std::string* mutable_file_sha();
  ::std::string* release_file_sha();
  void set_allocated_file_sha(::std::string* file_sha);

  // optional string filename = 6 [(.proto.steam.description) = "Name of the file to store in the cloud."];
  bool has_filename() const;
  void clear_filename();
  static const int kFilenameFieldNumber = 6;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_filename(::std::string&& value);
  #endif
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // optional uint32 appid = 1 [(.proto.steam.description) = "App ID for which the file is being uploaded."];
  bool has_appid() const;
  void clear_appid();
  static const int kAppidFieldNumber = 1;
  ::google::protobuf::uint32 appid() const;
  void set_appid(::google::protobuf::uint32 value);

  // optional uint32 file_size = 2 [(.proto.steam.description) = "file size as transmitted and stored in Cloud."];
  bool has_file_size() const;
  void clear_file_size();
  static const int kFileSizeFieldNumber = 2;
  ::google::protobuf::uint32 file_size() const;
  void set_file_size(::google::protobuf::uint32 value);

  // optional uint64 time_stamp = 5 [(.proto.steam.description) = "Timestamp of file."];
  bool has_time_stamp() const;
  void clear_time_stamp();
  static const int kTimeStampFieldNumber = 5;
  ::google::protobuf::uint64 time_stamp() const;
  void set_time_stamp(::google::protobuf::uint64 value);

  // optional uint32 raw_file_size = 3 [(.proto.steam.description) = "file size before any compression and/or encryption."];
  bool has_raw_file_size() const;
  void clear_raw_file_size();
  static const int kRawFileSizeFieldNumber = 3;
  ::google::protobuf::uint32 raw_file_size() const;
  void set_raw_file_size(::google::protobuf::uint32 value);

  // optional uint32 cell_id = 9 [(.proto.steam.description) = "Client\'s cell ID so we can pick storage location."];
  bool has_cell_id() const;
  void clear_cell_id();
  static const int kCellIdFieldNumber = 9;
  ::google::protobuf::uint32 cell_id() const;
  void set_cell_id(::google::protobuf::uint32 value);

  // optional bool can_encrypt = 10 [(.proto.steam.description) = "if true, client can encrypt the file before uploading it"];
  bool has_can_encrypt() const;
  void clear_can_encrypt();
  static const int kCanEncryptFieldNumber = 10;
  bool can_encrypt() const;
  void set_can_encrypt(bool value);

  // optional bool is_shared_file = 11 [(.proto.steam.description) = "if true, this is going to be UGC or a screenshot or some other shared file"];
  bool has_is_shared_file() const;
  void clear_is_shared_file();
  static const int kIsSharedFileFieldNumber = 11;
  bool is_shared_file() const;
  void set_is_shared_file(bool value);

  // optional uint32 platforms_to_sync = 7 [default = 4294967295];
  bool has_platforms_to_sync() const;
  void clear_platforms_to_sync();
  static const int kPlatformsToSyncFieldNumber = 7;
  ::google::protobuf::uint32 platforms_to_sync() const;
  void set_platforms_to_sync(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CCloud_ClientBeginFileUpload_Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr file_sha_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  ::google::protobuf::uint32 appid_;
  ::google::protobuf::uint32 file_size_;
  ::google::protobuf::uint64 time_stamp_;
  ::google::protobuf::uint32 raw_file_size_;
  ::google::protobuf::uint32 cell_id_;
  bool can_encrypt_;
  bool is_shared_file_;
  ::google::protobuf::uint32 platforms_to_sync_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class ClientCloudFileUploadBlockDetails_HTTPHeaders final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders) */ {
 public:
  ClientCloudFileUploadBlockDetails_HTTPHeaders();
  virtual ~ClientCloudFileUploadBlockDetails_HTTPHeaders();

  ClientCloudFileUploadBlockDetails_HTTPHeaders(const ClientCloudFileUploadBlockDetails_HTTPHeaders& from);

  inline ClientCloudFileUploadBlockDetails_HTTPHeaders& operator=(const ClientCloudFileUploadBlockDetails_HTTPHeaders& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClientCloudFileUploadBlockDetails_HTTPHeaders(ClientCloudFileUploadBlockDetails_HTTPHeaders&& from) noexcept
    : ClientCloudFileUploadBlockDetails_HTTPHeaders() {
    *this = ::std::move(from);
  }

  inline ClientCloudFileUploadBlockDetails_HTTPHeaders& operator=(ClientCloudFileUploadBlockDetails_HTTPHeaders&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ClientCloudFileUploadBlockDetails_HTTPHeaders& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientCloudFileUploadBlockDetails_HTTPHeaders* internal_default_instance() {
    return reinterpret_cast<const ClientCloudFileUploadBlockDetails_HTTPHeaders*>(
               &_ClientCloudFileUploadBlockDetails_HTTPHeaders_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(ClientCloudFileUploadBlockDetails_HTTPHeaders* other);
  friend void swap(ClientCloudFileUploadBlockDetails_HTTPHeaders& a, ClientCloudFileUploadBlockDetails_HTTPHeaders& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientCloudFileUploadBlockDetails_HTTPHeaders* New() const final {
    return CreateMaybeMessage<ClientCloudFileUploadBlockDetails_HTTPHeaders>(nullptr);
  }

  ClientCloudFileUploadBlockDetails_HTTPHeaders* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ClientCloudFileUploadBlockDetails_HTTPHeaders>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ClientCloudFileUploadBlockDetails_HTTPHeaders& from);
  void MergeFrom(const ClientCloudFileUploadBlockDetails_HTTPHeaders& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientCloudFileUploadBlockDetails_HTTPHeaders* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class ClientCloudFileUploadBlockDetails final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.ClientCloudFileUploadBlockDetails) */ {
 public:
  ClientCloudFileUploadBlockDetails();
  virtual ~ClientCloudFileUploadBlockDetails();

  ClientCloudFileUploadBlockDetails(const ClientCloudFileUploadBlockDetails& from);

  inline ClientCloudFileUploadBlockDetails& operator=(const ClientCloudFileUploadBlockDetails& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClientCloudFileUploadBlockDetails(ClientCloudFileUploadBlockDetails&& from) noexcept
    : ClientCloudFileUploadBlockDetails() {
    *this = ::std::move(from);
  }

  inline ClientCloudFileUploadBlockDetails& operator=(ClientCloudFileUploadBlockDetails&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ClientCloudFileUploadBlockDetails& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientCloudFileUploadBlockDetails* internal_default_instance() {
    return reinterpret_cast<const ClientCloudFileUploadBlockDetails*>(
               &_ClientCloudFileUploadBlockDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(ClientCloudFileUploadBlockDetails* other);
  friend void swap(ClientCloudFileUploadBlockDetails& a, ClientCloudFileUploadBlockDetails& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientCloudFileUploadBlockDetails* New() const final {
    return CreateMaybeMessage<ClientCloudFileUploadBlockDetails>(nullptr);
  }

  ClientCloudFileUploadBlockDetails* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ClientCloudFileUploadBlockDetails>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ClientCloudFileUploadBlockDetails& from);
  void MergeFrom(const ClientCloudFileUploadBlockDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientCloudFileUploadBlockDetails* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ClientCloudFileUploadBlockDetails_HTTPHeaders HTTPHeaders;

  // accessors -------------------------------------------------------

  // repeated .proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders request_headers = 5 [(.proto.steam.description) = "Name-value pairs to be sent in HTTP PUT request."];
  int request_headers_size() const;
  void clear_request_headers();
  static const int kRequestHeadersFieldNumber = 5;
  ::proto::steam::ClientCloudFileUploadBlockDetails_HTTPHeaders* mutable_request_headers(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::steam::ClientCloudFileUploadBlockDetails_HTTPHeaders >*
      mutable_request_headers();
  const ::proto::steam::ClientCloudFileUploadBlockDetails_HTTPHeaders& request_headers(int index) const;
  ::proto::steam::ClientCloudFileUploadBlockDetails_HTTPHeaders* add_request_headers();
  const ::google::protobuf::RepeatedPtrField< ::proto::steam::ClientCloudFileUploadBlockDetails_HTTPHeaders >&
      request_headers() const;

  // optional string url_host = 1 [(.proto.steam.description) = "Host name of server to which file should be uploaded via HTTP PUT."];
  bool has_url_host() const;
  void clear_url_host();
  static const int kUrlHostFieldNumber = 1;
  const ::std::string& url_host() const;
  void set_url_host(const ::std::string& value);
  #if LANG_CXX11
  void set_url_host(::std::string&& value);
  #endif
  void set_url_host(const char* value);
  void set_url_host(const char* value, size_t size);
  ::std::string* mutable_url_host();
  ::std::string* release_url_host();
  void set_allocated_url_host(::std::string* url_host);

  // optional string url_path = 2 [(.proto.steam.description) = "Relative path on server to which file should be uploaded."];
  bool has_url_path() const;
  void clear_url_path();
  static const int kUrlPathFieldNumber = 2;
  const ::std::string& url_path() const;
  void set_url_path(const ::std::string& value);
  #if LANG_CXX11
  void set_url_path(::std::string&& value);
  #endif
  void set_url_path(const char* value);
  void set_url_path(const char* value, size_t size);
  ::std::string* mutable_url_path();
  ::std::string* release_url_path();
  void set_allocated_url_path(::std::string* url_path);

  // optional bytes explicit_body_data = 8 [(.proto.steam.description) = "explicit body data to use, instead of file data, for this block"];
  bool has_explicit_body_data() const;
  void clear_explicit_body_data();
  static const int kExplicitBodyDataFieldNumber = 8;
  const ::std::string& explicit_body_data() const;
  void set_explicit_body_data(const ::std::string& value);
  #if LANG_CXX11
  void set_explicit_body_data(::std::string&& value);
  #endif
  void set_explicit_body_data(const char* value);
  void set_explicit_body_data(const void* value, size_t size);
  ::std::string* mutable_explicit_body_data();
  ::std::string* release_explicit_body_data();
  void set_allocated_explicit_body_data(::std::string* explicit_body_data);

  // optional int32 http_method = 4 [(.proto.steam.description) = "EHTTPMethod to use for this block."];
  bool has_http_method() const;
  void clear_http_method();
  static const int kHttpMethodFieldNumber = 4;
  ::google::protobuf::int32 http_method() const;
  void set_http_method(::google::protobuf::int32 value);

  // optional bool use_https = 3 [(.proto.steam.description) = "If true, use https, otherwise use http."];
  bool has_use_https() const;
  void clear_use_https();
  static const int kUseHttpsFieldNumber = 3;
  bool use_https() const;
  void set_use_https(bool value);

  // optional bool may_parallelize = 9 [(.proto.steam.description) = "if true, this request may be done in parallel with other similarly-marked requests"];
  bool has_may_parallelize() const;
  void clear_may_parallelize();
  static const int kMayParallelizeFieldNumber = 9;
  bool may_parallelize() const;
  void set_may_parallelize(bool value);

  // optional uint64 block_offset = 6 [(.proto.steam.description) = "offset of file block to upload"];
  bool has_block_offset() const;
  void clear_block_offset();
  static const int kBlockOffsetFieldNumber = 6;
  ::google::protobuf::uint64 block_offset() const;
  void set_block_offset(::google::protobuf::uint64 value);

  // optional uint32 block_length = 7 [(.proto.steam.description) = "length of file block to upload - if zero, no part of the file is part of this block"];
  bool has_block_length() const;
  void clear_block_length();
  static const int kBlockLengthFieldNumber = 7;
  ::google::protobuf::uint32 block_length() const;
  void set_block_length(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.ClientCloudFileUploadBlockDetails)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::steam::ClientCloudFileUploadBlockDetails_HTTPHeaders > request_headers_;
  ::google::protobuf::internal::ArenaStringPtr url_host_;
  ::google::protobuf::internal::ArenaStringPtr url_path_;
  ::google::protobuf::internal::ArenaStringPtr explicit_body_data_;
  ::google::protobuf::int32 http_method_;
  bool use_https_;
  bool may_parallelize_;
  ::google::protobuf::uint64 block_offset_;
  ::google::protobuf::uint32 block_length_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_ClientBeginFileUpload_Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CCloud_ClientBeginFileUpload_Response) */ {
 public:
  CCloud_ClientBeginFileUpload_Response();
  virtual ~CCloud_ClientBeginFileUpload_Response();

  CCloud_ClientBeginFileUpload_Response(const CCloud_ClientBeginFileUpload_Response& from);

  inline CCloud_ClientBeginFileUpload_Response& operator=(const CCloud_ClientBeginFileUpload_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CCloud_ClientBeginFileUpload_Response(CCloud_ClientBeginFileUpload_Response&& from) noexcept
    : CCloud_ClientBeginFileUpload_Response() {
    *this = ::std::move(from);
  }

  inline CCloud_ClientBeginFileUpload_Response& operator=(CCloud_ClientBeginFileUpload_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CCloud_ClientBeginFileUpload_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CCloud_ClientBeginFileUpload_Response* internal_default_instance() {
    return reinterpret_cast<const CCloud_ClientBeginFileUpload_Response*>(
               &_CCloud_ClientBeginFileUpload_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(CCloud_ClientBeginFileUpload_Response* other);
  friend void swap(CCloud_ClientBeginFileUpload_Response& a, CCloud_ClientBeginFileUpload_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CCloud_ClientBeginFileUpload_Response* New() const final {
    return CreateMaybeMessage<CCloud_ClientBeginFileUpload_Response>(nullptr);
  }

  CCloud_ClientBeginFileUpload_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CCloud_ClientBeginFileUpload_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CCloud_ClientBeginFileUpload_Response& from);
  void MergeFrom(const CCloud_ClientBeginFileUpload_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_ClientBeginFileUpload_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.steam.ClientCloudFileUploadBlockDetails block_requests = 2 [(.proto.steam.description) = "HTTP requests to make to perform upload"];
  int block_requests_size() const;
  void clear_block_requests();
  static const int kBlockRequestsFieldNumber = 2;
  ::proto::steam::ClientCloudFileUploadBlockDetails* mutable_block_requests(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::steam::ClientCloudFileUploadBlockDetails >*
      mutable_block_requests();
  const ::proto::steam::ClientCloudFileUploadBlockDetails& block_requests(int index) const;
  ::proto::steam::ClientCloudFileUploadBlockDetails* add_block_requests();
  const ::google::protobuf::RepeatedPtrField< ::proto::steam::ClientCloudFileUploadBlockDetails >&
      block_requests() const;

  // optional bool encrypt_file = 1 [(.proto.steam.description) = "If true, the file should be encrypted by the client before upload"];
  bool has_encrypt_file() const;
  void clear_encrypt_file();
  static const int kEncryptFileFieldNumber = 1;
  bool encrypt_file() const;
  void set_encrypt_file(bool value);

  // @@protoc_insertion_point(class_scope:proto.steam.CCloud_ClientBeginFileUpload_Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::steam::ClientCloudFileUploadBlockDetails > block_requests_;
  bool encrypt_file_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_ClientCommitFileUpload_Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CCloud_ClientCommitFileUpload_Request) */ {
 public:
  CCloud_ClientCommitFileUpload_Request();
  virtual ~CCloud_ClientCommitFileUpload_Request();

  CCloud_ClientCommitFileUpload_Request(const CCloud_ClientCommitFileUpload_Request& from);

  inline CCloud_ClientCommitFileUpload_Request& operator=(const CCloud_ClientCommitFileUpload_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CCloud_ClientCommitFileUpload_Request(CCloud_ClientCommitFileUpload_Request&& from) noexcept
    : CCloud_ClientCommitFileUpload_Request() {
    *this = ::std::move(from);
  }

  inline CCloud_ClientCommitFileUpload_Request& operator=(CCloud_ClientCommitFileUpload_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CCloud_ClientCommitFileUpload_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CCloud_ClientCommitFileUpload_Request* internal_default_instance() {
    return reinterpret_cast<const CCloud_ClientCommitFileUpload_Request*>(
               &_CCloud_ClientCommitFileUpload_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(CCloud_ClientCommitFileUpload_Request* other);
  friend void swap(CCloud_ClientCommitFileUpload_Request& a, CCloud_ClientCommitFileUpload_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CCloud_ClientCommitFileUpload_Request* New() const final {
    return CreateMaybeMessage<CCloud_ClientCommitFileUpload_Request>(nullptr);
  }

  CCloud_ClientCommitFileUpload_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CCloud_ClientCommitFileUpload_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CCloud_ClientCommitFileUpload_Request& from);
  void MergeFrom(const CCloud_ClientCommitFileUpload_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_ClientCommitFileUpload_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes file_sha = 3 [(.proto.steam.description) = "SHA1 digest of the raw file. Must match the SHA1 digest provided to Cloud.BeginFileUpload."];
  bool has_file_sha() const;
  void clear_file_sha();
  static const int kFileShaFieldNumber = 3;
  const ::std::string& file_sha() const;
  void set_file_sha(const ::std::string& value);
  #if LANG_CXX11
  void set_file_sha(::std::string&& value);
  #endif
  void set_file_sha(const char* value);
  void set_file_sha(const void* value, size_t size);
  ::std::string* mutable_file_sha();
  ::std::string* release_file_sha();
  void set_allocated_file_sha(::std::string* file_sha);

  // optional string filename = 4 [(.proto.steam.description) = "Filename as specified in the Cloud.BeginFileUpload request."];
  bool has_filename() const;
  void clear_filename();
  static const int kFilenameFieldNumber = 4;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_filename(::std::string&& value);
  #endif
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // optional bool transfer_succeeded = 1 [(.proto.steam.description) = "True if all block uploads succeeded, false if any of them failed."];
  bool has_transfer_succeeded() const;
  void clear_transfer_succeeded();
  static const int kTransferSucceededFieldNumber = 1;
  bool transfer_succeeded() const;
  void set_transfer_succeeded(bool value);

  // optional uint32 appid = 2 [(.proto.steam.description) = "App ID for which the file is being uploaded. Must match the app ID provided to Cloud.BeginFileUpload."];
  bool has_appid() const;
  void clear_appid();
  static const int kAppidFieldNumber = 2;
  ::google::protobuf::uint32 appid() const;
  void set_appid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CCloud_ClientCommitFileUpload_Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr file_sha_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  bool transfer_succeeded_;
  ::google::protobuf::uint32 appid_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_ClientCommitFileUpload_Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CCloud_ClientCommitFileUpload_Response) */ {
 public:
  CCloud_ClientCommitFileUpload_Response();
  virtual ~CCloud_ClientCommitFileUpload_Response();

  CCloud_ClientCommitFileUpload_Response(const CCloud_ClientCommitFileUpload_Response& from);

  inline CCloud_ClientCommitFileUpload_Response& operator=(const CCloud_ClientCommitFileUpload_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CCloud_ClientCommitFileUpload_Response(CCloud_ClientCommitFileUpload_Response&& from) noexcept
    : CCloud_ClientCommitFileUpload_Response() {
    *this = ::std::move(from);
  }

  inline CCloud_ClientCommitFileUpload_Response& operator=(CCloud_ClientCommitFileUpload_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CCloud_ClientCommitFileUpload_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CCloud_ClientCommitFileUpload_Response* internal_default_instance() {
    return reinterpret_cast<const CCloud_ClientCommitFileUpload_Response*>(
               &_CCloud_ClientCommitFileUpload_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(CCloud_ClientCommitFileUpload_Response* other);
  friend void swap(CCloud_ClientCommitFileUpload_Response& a, CCloud_ClientCommitFileUpload_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CCloud_ClientCommitFileUpload_Response* New() const final {
    return CreateMaybeMessage<CCloud_ClientCommitFileUpload_Response>(nullptr);
  }

  CCloud_ClientCommitFileUpload_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CCloud_ClientCommitFileUpload_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CCloud_ClientCommitFileUpload_Response& from);
  void MergeFrom(const CCloud_ClientCommitFileUpload_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_ClientCommitFileUpload_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool file_committed = 1 [(.proto.steam.description) = "True if the file was successfully committed, false otherwise."];
  bool has_file_committed() const;
  void clear_file_committed();
  static const int kFileCommittedFieldNumber = 1;
  bool file_committed() const;
  void set_file_committed(bool value);

  // @@protoc_insertion_point(class_scope:proto.steam.CCloud_ClientCommitFileUpload_Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  bool file_committed_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_ClientFileDownload_Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CCloud_ClientFileDownload_Request) */ {
 public:
  CCloud_ClientFileDownload_Request();
  virtual ~CCloud_ClientFileDownload_Request();

  CCloud_ClientFileDownload_Request(const CCloud_ClientFileDownload_Request& from);

  inline CCloud_ClientFileDownload_Request& operator=(const CCloud_ClientFileDownload_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CCloud_ClientFileDownload_Request(CCloud_ClientFileDownload_Request&& from) noexcept
    : CCloud_ClientFileDownload_Request() {
    *this = ::std::move(from);
  }

  inline CCloud_ClientFileDownload_Request& operator=(CCloud_ClientFileDownload_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CCloud_ClientFileDownload_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CCloud_ClientFileDownload_Request* internal_default_instance() {
    return reinterpret_cast<const CCloud_ClientFileDownload_Request*>(
               &_CCloud_ClientFileDownload_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(CCloud_ClientFileDownload_Request* other);
  friend void swap(CCloud_ClientFileDownload_Request& a, CCloud_ClientFileDownload_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CCloud_ClientFileDownload_Request* New() const final {
    return CreateMaybeMessage<CCloud_ClientFileDownload_Request>(nullptr);
  }

  CCloud_ClientFileDownload_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CCloud_ClientFileDownload_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CCloud_ClientFileDownload_Request& from);
  void MergeFrom(const CCloud_ClientFileDownload_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_ClientFileDownload_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string filename = 2 [(.proto.steam.description) = "Filename of the file."];
  bool has_filename() const;
  void clear_filename();
  static const int kFilenameFieldNumber = 2;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_filename(::std::string&& value);
  #endif
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // optional uint32 appid = 1 [(.proto.steam.description) = "App ID the file is part of."];
  bool has_appid() const;
  void clear_appid();
  static const int kAppidFieldNumber = 1;
  ::google::protobuf::uint32 appid() const;
  void set_appid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CCloud_ClientFileDownload_Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  ::google::protobuf::uint32 appid_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_ClientFileDownload_Response_HTTPHeaders final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders) */ {
 public:
  CCloud_ClientFileDownload_Response_HTTPHeaders();
  virtual ~CCloud_ClientFileDownload_Response_HTTPHeaders();

  CCloud_ClientFileDownload_Response_HTTPHeaders(const CCloud_ClientFileDownload_Response_HTTPHeaders& from);

  inline CCloud_ClientFileDownload_Response_HTTPHeaders& operator=(const CCloud_ClientFileDownload_Response_HTTPHeaders& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CCloud_ClientFileDownload_Response_HTTPHeaders(CCloud_ClientFileDownload_Response_HTTPHeaders&& from) noexcept
    : CCloud_ClientFileDownload_Response_HTTPHeaders() {
    *this = ::std::move(from);
  }

  inline CCloud_ClientFileDownload_Response_HTTPHeaders& operator=(CCloud_ClientFileDownload_Response_HTTPHeaders&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CCloud_ClientFileDownload_Response_HTTPHeaders& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CCloud_ClientFileDownload_Response_HTTPHeaders* internal_default_instance() {
    return reinterpret_cast<const CCloud_ClientFileDownload_Response_HTTPHeaders*>(
               &_CCloud_ClientFileDownload_Response_HTTPHeaders_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(CCloud_ClientFileDownload_Response_HTTPHeaders* other);
  friend void swap(CCloud_ClientFileDownload_Response_HTTPHeaders& a, CCloud_ClientFileDownload_Response_HTTPHeaders& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CCloud_ClientFileDownload_Response_HTTPHeaders* New() const final {
    return CreateMaybeMessage<CCloud_ClientFileDownload_Response_HTTPHeaders>(nullptr);
  }

  CCloud_ClientFileDownload_Response_HTTPHeaders* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CCloud_ClientFileDownload_Response_HTTPHeaders>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CCloud_ClientFileDownload_Response_HTTPHeaders& from);
  void MergeFrom(const CCloud_ClientFileDownload_Response_HTTPHeaders& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_ClientFileDownload_Response_HTTPHeaders* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_ClientFileDownload_Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CCloud_ClientFileDownload_Response) */ {
 public:
  CCloud_ClientFileDownload_Response();
  virtual ~CCloud_ClientFileDownload_Response();

  CCloud_ClientFileDownload_Response(const CCloud_ClientFileDownload_Response& from);

  inline CCloud_ClientFileDownload_Response& operator=(const CCloud_ClientFileDownload_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CCloud_ClientFileDownload_Response(CCloud_ClientFileDownload_Response&& from) noexcept
    : CCloud_ClientFileDownload_Response() {
    *this = ::std::move(from);
  }

  inline CCloud_ClientFileDownload_Response& operator=(CCloud_ClientFileDownload_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CCloud_ClientFileDownload_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CCloud_ClientFileDownload_Response* internal_default_instance() {
    return reinterpret_cast<const CCloud_ClientFileDownload_Response*>(
               &_CCloud_ClientFileDownload_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(CCloud_ClientFileDownload_Response* other);
  friend void swap(CCloud_ClientFileDownload_Response& a, CCloud_ClientFileDownload_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CCloud_ClientFileDownload_Response* New() const final {
    return CreateMaybeMessage<CCloud_ClientFileDownload_Response>(nullptr);
  }

  CCloud_ClientFileDownload_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CCloud_ClientFileDownload_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CCloud_ClientFileDownload_Response& from);
  void MergeFrom(const CCloud_ClientFileDownload_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_ClientFileDownload_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CCloud_ClientFileDownload_Response_HTTPHeaders HTTPHeaders;

  // accessors -------------------------------------------------------

  // repeated .proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders request_headers = 10 [(.proto.steam.description) = "Name-value pairs to be sent in HTTP GET request."];
  int request_headers_size() const;
  void clear_request_headers();
  static const int kRequestHeadersFieldNumber = 10;
  ::proto::steam::CCloud_ClientFileDownload_Response_HTTPHeaders* mutable_request_headers(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CCloud_ClientFileDownload_Response_HTTPHeaders >*
      mutable_request_headers();
  const ::proto::steam::CCloud_ClientFileDownload_Response_HTTPHeaders& request_headers(int index) const;
  ::proto::steam::CCloud_ClientFileDownload_Response_HTTPHeaders* add_request_headers();
  const ::google::protobuf::RepeatedPtrField< ::proto::steam::CCloud_ClientFileDownload_Response_HTTPHeaders >&
      request_headers() const;

  // optional bytes sha_file = 4 [(.proto.steam.description) = "SHA of file"];
  bool has_sha_file() const;
  void clear_sha_file();
  static const int kShaFileFieldNumber = 4;
  const ::std::string& sha_file() const;
  void set_sha_file(const ::std::string& value);
  #if LANG_CXX11
  void set_sha_file(::std::string&& value);
  #endif
  void set_sha_file(const char* value);
  void set_sha_file(const void* value, size_t size);
  ::std::string* mutable_sha_file();
  ::std::string* release_sha_file();
  void set_allocated_sha_file(::std::string* sha_file);

  // optional string url_host = 7 [(.proto.steam.description) = "Host to GET the file from"];
  bool has_url_host() const;
  void clear_url_host();
  static const int kUrlHostFieldNumber = 7;
  const ::std::string& url_host() const;
  void set_url_host(const ::std::string& value);
  #if LANG_CXX11
  void set_url_host(::std::string&& value);
  #endif
  void set_url_host(const char* value);
  void set_url_host(const char* value, size_t size);
  ::std::string* mutable_url_host();
  ::std::string* release_url_host();
  void set_allocated_url_host(::std::string* url_host);

  // optional string url_path = 8 [(.proto.steam.description) = "Path on that host to use, including URL parameters if any"];
  bool has_url_path() const;
  void clear_url_path();
  static const int kUrlPathFieldNumber = 8;
  const ::std::string& url_path() const;
  void set_url_path(const ::std::string& value);
  #if LANG_CXX11
  void set_url_path(::std::string&& value);
  #endif
  void set_url_path(const char* value);
  void set_url_path(const char* value, size_t size);
  ::std::string* mutable_url_path();
  ::std::string* release_url_path();
  void set_allocated_url_path(::std::string* url_path);

  // optional uint32 appid = 1 [(.proto.steam.description) = "Application the file belongs to"];
  bool has_appid() const;
  void clear_appid();
  static const int kAppidFieldNumber = 1;
  ::google::protobuf::uint32 appid() const;
  void set_appid(::google::protobuf::uint32 value);

  // optional uint32 file_size = 2 [(.proto.steam.description) = "file size as transmitted and stored in the Cloud"];
  bool has_file_size() const;
  void clear_file_size();
  static const int kFileSizeFieldNumber = 2;
  ::google::protobuf::uint32 file_size() const;
  void set_file_size(::google::protobuf::uint32 value);

  // optional uint64 time_stamp = 5 [(.proto.steam.description) = "Timestamp of file"];
  bool has_time_stamp() const;
  void clear_time_stamp();
  static const int kTimeStampFieldNumber = 5;
  ::google::protobuf::uint64 time_stamp() const;
  void set_time_stamp(::google::protobuf::uint64 value);

  // optional uint32 raw_file_size = 3 [(.proto.steam.description) = "file size when decompressed and/or decrypted"];
  bool has_raw_file_size() const;
  void clear_raw_file_size();
  static const int kRawFileSizeFieldNumber = 3;
  ::google::protobuf::uint32 raw_file_size() const;
  void set_raw_file_size(::google::protobuf::uint32 value);

  // optional bool is_explicit_delete = 6 [(.proto.steam.description) = "True if this is an explicitly deleted file"];
  bool has_is_explicit_delete() const;
  void clear_is_explicit_delete();
  static const int kIsExplicitDeleteFieldNumber = 6;
  bool is_explicit_delete() const;
  void set_is_explicit_delete(bool value);

  // optional bool use_https = 9 [(.proto.steam.description) = "If set, use HTTPS, else use HTTP"];
  bool has_use_https() const;
  void clear_use_https();
  static const int kUseHttpsFieldNumber = 9;
  bool use_https() const;
  void set_use_https(bool value);

  // optional bool encrypted = 11;
  bool has_encrypted() const;
  void clear_encrypted();
  static const int kEncryptedFieldNumber = 11;
  bool encrypted() const;
  void set_encrypted(bool value);

  // @@protoc_insertion_point(class_scope:proto.steam.CCloud_ClientFileDownload_Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CCloud_ClientFileDownload_Response_HTTPHeaders > request_headers_;
  ::google::protobuf::internal::ArenaStringPtr sha_file_;
  ::google::protobuf::internal::ArenaStringPtr url_host_;
  ::google::protobuf::internal::ArenaStringPtr url_path_;
  ::google::protobuf::uint32 appid_;
  ::google::protobuf::uint32 file_size_;
  ::google::protobuf::uint64 time_stamp_;
  ::google::protobuf::uint32 raw_file_size_;
  bool is_explicit_delete_;
  bool use_https_;
  bool encrypted_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_ClientDeleteFile_Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CCloud_ClientDeleteFile_Request) */ {
 public:
  CCloud_ClientDeleteFile_Request();
  virtual ~CCloud_ClientDeleteFile_Request();

  CCloud_ClientDeleteFile_Request(const CCloud_ClientDeleteFile_Request& from);

  inline CCloud_ClientDeleteFile_Request& operator=(const CCloud_ClientDeleteFile_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CCloud_ClientDeleteFile_Request(CCloud_ClientDeleteFile_Request&& from) noexcept
    : CCloud_ClientDeleteFile_Request() {
    *this = ::std::move(from);
  }

  inline CCloud_ClientDeleteFile_Request& operator=(CCloud_ClientDeleteFile_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CCloud_ClientDeleteFile_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CCloud_ClientDeleteFile_Request* internal_default_instance() {
    return reinterpret_cast<const CCloud_ClientDeleteFile_Request*>(
               &_CCloud_ClientDeleteFile_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(CCloud_ClientDeleteFile_Request* other);
  friend void swap(CCloud_ClientDeleteFile_Request& a, CCloud_ClientDeleteFile_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CCloud_ClientDeleteFile_Request* New() const final {
    return CreateMaybeMessage<CCloud_ClientDeleteFile_Request>(nullptr);
  }

  CCloud_ClientDeleteFile_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CCloud_ClientDeleteFile_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CCloud_ClientDeleteFile_Request& from);
  void MergeFrom(const CCloud_ClientDeleteFile_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_ClientDeleteFile_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string filename = 2 [(.proto.steam.description) = "Filename of file."];
  bool has_filename() const;
  void clear_filename();
  static const int kFilenameFieldNumber = 2;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_filename(::std::string&& value);
  #endif
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // optional uint32 appid = 1 [(.proto.steam.description) = "App ID for which the file is being deleted."];
  bool has_appid() const;
  void clear_appid();
  static const int kAppidFieldNumber = 1;
  ::google::protobuf::uint32 appid() const;
  void set_appid(::google::protobuf::uint32 value);

  // optional bool is_explicit_delete = 3 [(.proto.steam.description) = "If true, this is a \'delete\'; if false, it is a \'forget\'"];
  bool has_is_explicit_delete() const;
  void clear_is_explicit_delete();
  static const int kIsExplicitDeleteFieldNumber = 3;
  bool is_explicit_delete() const;
  void set_is_explicit_delete(bool value);

  // @@protoc_insertion_point(class_scope:proto.steam.CCloud_ClientDeleteFile_Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  ::google::protobuf::uint32 appid_;
  bool is_explicit_delete_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_ClientDeleteFile_Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CCloud_ClientDeleteFile_Response) */ {
 public:
  CCloud_ClientDeleteFile_Response();
  virtual ~CCloud_ClientDeleteFile_Response();

  CCloud_ClientDeleteFile_Response(const CCloud_ClientDeleteFile_Response& from);

  inline CCloud_ClientDeleteFile_Response& operator=(const CCloud_ClientDeleteFile_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CCloud_ClientDeleteFile_Response(CCloud_ClientDeleteFile_Response&& from) noexcept
    : CCloud_ClientDeleteFile_Response() {
    *this = ::std::move(from);
  }

  inline CCloud_ClientDeleteFile_Response& operator=(CCloud_ClientDeleteFile_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CCloud_ClientDeleteFile_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CCloud_ClientDeleteFile_Response* internal_default_instance() {
    return reinterpret_cast<const CCloud_ClientDeleteFile_Response*>(
               &_CCloud_ClientDeleteFile_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(CCloud_ClientDeleteFile_Response* other);
  friend void swap(CCloud_ClientDeleteFile_Response& a, CCloud_ClientDeleteFile_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CCloud_ClientDeleteFile_Response* New() const final {
    return CreateMaybeMessage<CCloud_ClientDeleteFile_Response>(nullptr);
  }

  CCloud_ClientDeleteFile_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CCloud_ClientDeleteFile_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CCloud_ClientDeleteFile_Response& from);
  void MergeFrom(const CCloud_ClientDeleteFile_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_ClientDeleteFile_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.steam.CCloud_ClientDeleteFile_Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_ClientConflictResolution_Notification final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CCloud_ClientConflictResolution_Notification) */ {
 public:
  CCloud_ClientConflictResolution_Notification();
  virtual ~CCloud_ClientConflictResolution_Notification();

  CCloud_ClientConflictResolution_Notification(const CCloud_ClientConflictResolution_Notification& from);

  inline CCloud_ClientConflictResolution_Notification& operator=(const CCloud_ClientConflictResolution_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CCloud_ClientConflictResolution_Notification(CCloud_ClientConflictResolution_Notification&& from) noexcept
    : CCloud_ClientConflictResolution_Notification() {
    *this = ::std::move(from);
  }

  inline CCloud_ClientConflictResolution_Notification& operator=(CCloud_ClientConflictResolution_Notification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CCloud_ClientConflictResolution_Notification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CCloud_ClientConflictResolution_Notification* internal_default_instance() {
    return reinterpret_cast<const CCloud_ClientConflictResolution_Notification*>(
               &_CCloud_ClientConflictResolution_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(CCloud_ClientConflictResolution_Notification* other);
  friend void swap(CCloud_ClientConflictResolution_Notification& a, CCloud_ClientConflictResolution_Notification& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CCloud_ClientConflictResolution_Notification* New() const final {
    return CreateMaybeMessage<CCloud_ClientConflictResolution_Notification>(nullptr);
  }

  CCloud_ClientConflictResolution_Notification* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CCloud_ClientConflictResolution_Notification>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CCloud_ClientConflictResolution_Notification& from);
  void MergeFrom(const CCloud_ClientConflictResolution_Notification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_ClientConflictResolution_Notification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 appid = 1 [(.proto.steam.description) = "App ID for which the conflict was resolved."];
  bool has_appid() const;
  void clear_appid();
  static const int kAppidFieldNumber = 1;
  ::google::protobuf::uint32 appid() const;
  void set_appid(::google::protobuf::uint32 value);

  // optional bool chose_local_files = 2 [(.proto.steam.description) = "Did the user choose to keep the files local to the machine they are on right now?"];
  bool has_chose_local_files() const;
  void clear_chose_local_files();
  static const int kChoseLocalFilesFieldNumber = 2;
  bool chose_local_files() const;
  void set_chose_local_files(bool value);

  // @@protoc_insertion_point(class_scope:proto.steam.CCloud_ClientConflictResolution_Notification)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 appid_;
  bool chose_local_files_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_EnumerateUserApps_Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CCloud_EnumerateUserApps_Request) */ {
 public:
  CCloud_EnumerateUserApps_Request();
  virtual ~CCloud_EnumerateUserApps_Request();

  CCloud_EnumerateUserApps_Request(const CCloud_EnumerateUserApps_Request& from);

  inline CCloud_EnumerateUserApps_Request& operator=(const CCloud_EnumerateUserApps_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CCloud_EnumerateUserApps_Request(CCloud_EnumerateUserApps_Request&& from) noexcept
    : CCloud_EnumerateUserApps_Request() {
    *this = ::std::move(from);
  }

  inline CCloud_EnumerateUserApps_Request& operator=(CCloud_EnumerateUserApps_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CCloud_EnumerateUserApps_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CCloud_EnumerateUserApps_Request* internal_default_instance() {
    return reinterpret_cast<const CCloud_EnumerateUserApps_Request*>(
               &_CCloud_EnumerateUserApps_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void Swap(CCloud_EnumerateUserApps_Request* other);
  friend void swap(CCloud_EnumerateUserApps_Request& a, CCloud_EnumerateUserApps_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CCloud_EnumerateUserApps_Request* New() const final {
    return CreateMaybeMessage<CCloud_EnumerateUserApps_Request>(nullptr);
  }

  CCloud_EnumerateUserApps_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CCloud_EnumerateUserApps_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CCloud_EnumerateUserApps_Request& from);
  void MergeFrom(const CCloud_EnumerateUserApps_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_EnumerateUserApps_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.steam.CCloud_EnumerateUserApps_Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_EnumerateUserApps_Response_Apps final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CCloud_EnumerateUserApps_Response.Apps) */ {
 public:
  CCloud_EnumerateUserApps_Response_Apps();
  virtual ~CCloud_EnumerateUserApps_Response_Apps();

  CCloud_EnumerateUserApps_Response_Apps(const CCloud_EnumerateUserApps_Response_Apps& from);

  inline CCloud_EnumerateUserApps_Response_Apps& operator=(const CCloud_EnumerateUserApps_Response_Apps& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CCloud_EnumerateUserApps_Response_Apps(CCloud_EnumerateUserApps_Response_Apps&& from) noexcept
    : CCloud_EnumerateUserApps_Response_Apps() {
    *this = ::std::move(from);
  }

  inline CCloud_EnumerateUserApps_Response_Apps& operator=(CCloud_EnumerateUserApps_Response_Apps&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CCloud_EnumerateUserApps_Response_Apps& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CCloud_EnumerateUserApps_Response_Apps* internal_default_instance() {
    return reinterpret_cast<const CCloud_EnumerateUserApps_Response_Apps*>(
               &_CCloud_EnumerateUserApps_Response_Apps_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  void Swap(CCloud_EnumerateUserApps_Response_Apps* other);
  friend void swap(CCloud_EnumerateUserApps_Response_Apps& a, CCloud_EnumerateUserApps_Response_Apps& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CCloud_EnumerateUserApps_Response_Apps* New() const final {
    return CreateMaybeMessage<CCloud_EnumerateUserApps_Response_Apps>(nullptr);
  }

  CCloud_EnumerateUserApps_Response_Apps* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CCloud_EnumerateUserApps_Response_Apps>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CCloud_EnumerateUserApps_Response_Apps& from);
  void MergeFrom(const CCloud_EnumerateUserApps_Response_Apps& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_EnumerateUserApps_Response_Apps* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 appid = 1;
  bool has_appid() const;
  void clear_appid();
  static const int kAppidFieldNumber = 1;
  ::google::protobuf::uint32 appid() const;
  void set_appid(::google::protobuf::uint32 value);

  // optional int32 totalcount = 2;
  bool has_totalcount() const;
  void clear_totalcount();
  static const int kTotalcountFieldNumber = 2;
  ::google::protobuf::int32 totalcount() const;
  void set_totalcount(::google::protobuf::int32 value);

  // optional int64 totalsize = 3;
  bool has_totalsize() const;
  void clear_totalsize();
  static const int kTotalsizeFieldNumber = 3;
  ::google::protobuf::int64 totalsize() const;
  void set_totalsize(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CCloud_EnumerateUserApps_Response.Apps)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 appid_;
  ::google::protobuf::int32 totalcount_;
  ::google::protobuf::int64 totalsize_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_EnumerateUserApps_Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CCloud_EnumerateUserApps_Response) */ {
 public:
  CCloud_EnumerateUserApps_Response();
  virtual ~CCloud_EnumerateUserApps_Response();

  CCloud_EnumerateUserApps_Response(const CCloud_EnumerateUserApps_Response& from);

  inline CCloud_EnumerateUserApps_Response& operator=(const CCloud_EnumerateUserApps_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CCloud_EnumerateUserApps_Response(CCloud_EnumerateUserApps_Response&& from) noexcept
    : CCloud_EnumerateUserApps_Response() {
    *this = ::std::move(from);
  }

  inline CCloud_EnumerateUserApps_Response& operator=(CCloud_EnumerateUserApps_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CCloud_EnumerateUserApps_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CCloud_EnumerateUserApps_Response* internal_default_instance() {
    return reinterpret_cast<const CCloud_EnumerateUserApps_Response*>(
               &_CCloud_EnumerateUserApps_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  void Swap(CCloud_EnumerateUserApps_Response* other);
  friend void swap(CCloud_EnumerateUserApps_Response& a, CCloud_EnumerateUserApps_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CCloud_EnumerateUserApps_Response* New() const final {
    return CreateMaybeMessage<CCloud_EnumerateUserApps_Response>(nullptr);
  }

  CCloud_EnumerateUserApps_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CCloud_EnumerateUserApps_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CCloud_EnumerateUserApps_Response& from);
  void MergeFrom(const CCloud_EnumerateUserApps_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_EnumerateUserApps_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CCloud_EnumerateUserApps_Response_Apps Apps;

  // accessors -------------------------------------------------------

  // repeated .proto.steam.CCloud_EnumerateUserApps_Response.Apps apps = 1;
  int apps_size() const;
  void clear_apps();
  static const int kAppsFieldNumber = 1;
  ::proto::steam::CCloud_EnumerateUserApps_Response_Apps* mutable_apps(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CCloud_EnumerateUserApps_Response_Apps >*
      mutable_apps();
  const ::proto::steam::CCloud_EnumerateUserApps_Response_Apps& apps(int index) const;
  ::proto::steam::CCloud_EnumerateUserApps_Response_Apps* add_apps();
  const ::google::protobuf::RepeatedPtrField< ::proto::steam::CCloud_EnumerateUserApps_Response_Apps >&
      apps() const;

  // @@protoc_insertion_point(class_scope:proto.steam.CCloud_EnumerateUserApps_Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CCloud_EnumerateUserApps_Response_Apps > apps_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// ===================================================================

class Cloud_Stub;

class Cloud : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline Cloud() {};
 public:
  virtual ~Cloud();

  typedef Cloud_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void GetUploadServerInfo(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CCloud_GetUploadServerInfo_Request* request,
                       ::proto::steam::CCloud_GetUploadServerInfo_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void BeginHTTPUpload(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CCloud_BeginHTTPUpload_Request* request,
                       ::proto::steam::CCloud_BeginHTTPUpload_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void CommitHTTPUpload(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CCloud_CommitHTTPUpload_Request* request,
                       ::proto::steam::CCloud_CommitHTTPUpload_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetFileDetails(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CCloud_GetFileDetails_Request* request,
                       ::proto::steam::CCloud_GetFileDetails_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void EnumerateUserFiles(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CCloud_EnumerateUserFiles_Request* request,
                       ::proto::steam::CCloud_EnumerateUserFiles_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void Delete(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CCloud_Delete_Request* request,
                       ::proto::steam::CCloud_Delete_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetClientEncryptionKey(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CCloud_GetClientEncryptionKey_Request* request,
                       ::proto::steam::CCloud_GetClientEncryptionKey_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void CDNReport(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CCloud_CDNReport_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void ExternalStorageTransferReport(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CCloud_ExternalStorageTransferReport_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void ClientBeginFileUpload(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CCloud_ClientBeginFileUpload_Request* request,
                       ::proto::steam::CCloud_ClientBeginFileUpload_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void ClientCommitFileUpload(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CCloud_ClientCommitFileUpload_Request* request,
                       ::proto::steam::CCloud_ClientCommitFileUpload_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void ClientFileDownload(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CCloud_ClientFileDownload_Request* request,
                       ::proto::steam::CCloud_ClientFileDownload_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void ClientDeleteFile(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CCloud_ClientDeleteFile_Request* request,
                       ::proto::steam::CCloud_ClientDeleteFile_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void ClientConflictResolution(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CCloud_ClientConflictResolution_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void EnumerateUserApps(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CCloud_EnumerateUserApps_Request* request,
                       ::proto::steam::CCloud_EnumerateUserApps_Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Cloud);
};

class Cloud_Stub : public Cloud {
 public:
  Cloud_Stub(::google::protobuf::RpcChannel* channel);
  Cloud_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~Cloud_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements Cloud ------------------------------------------

  void GetUploadServerInfo(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CCloud_GetUploadServerInfo_Request* request,
                       ::proto::steam::CCloud_GetUploadServerInfo_Response* response,
                       ::google::protobuf::Closure* done);
  void BeginHTTPUpload(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CCloud_BeginHTTPUpload_Request* request,
                       ::proto::steam::CCloud_BeginHTTPUpload_Response* response,
                       ::google::protobuf::Closure* done);
  void CommitHTTPUpload(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CCloud_CommitHTTPUpload_Request* request,
                       ::proto::steam::CCloud_CommitHTTPUpload_Response* response,
                       ::google::protobuf::Closure* done);
  void GetFileDetails(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CCloud_GetFileDetails_Request* request,
                       ::proto::steam::CCloud_GetFileDetails_Response* response,
                       ::google::protobuf::Closure* done);
  void EnumerateUserFiles(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CCloud_EnumerateUserFiles_Request* request,
                       ::proto::steam::CCloud_EnumerateUserFiles_Response* response,
                       ::google::protobuf::Closure* done);
  void Delete(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CCloud_Delete_Request* request,
                       ::proto::steam::CCloud_Delete_Response* response,
                       ::google::protobuf::Closure* done);
  void GetClientEncryptionKey(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CCloud_GetClientEncryptionKey_Request* request,
                       ::proto::steam::CCloud_GetClientEncryptionKey_Response* response,
                       ::google::protobuf::Closure* done);
  void CDNReport(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CCloud_CDNReport_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void ExternalStorageTransferReport(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CCloud_ExternalStorageTransferReport_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void ClientBeginFileUpload(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CCloud_ClientBeginFileUpload_Request* request,
                       ::proto::steam::CCloud_ClientBeginFileUpload_Response* response,
                       ::google::protobuf::Closure* done);
  void ClientCommitFileUpload(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CCloud_ClientCommitFileUpload_Request* request,
                       ::proto::steam::CCloud_ClientCommitFileUpload_Response* response,
                       ::google::protobuf::Closure* done);
  void ClientFileDownload(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CCloud_ClientFileDownload_Request* request,
                       ::proto::steam::CCloud_ClientFileDownload_Response* response,
                       ::google::protobuf::Closure* done);
  void ClientDeleteFile(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CCloud_ClientDeleteFile_Request* request,
                       ::proto::steam::CCloud_ClientDeleteFile_Response* response,
                       ::google::protobuf::Closure* done);
  void ClientConflictResolution(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CCloud_ClientConflictResolution_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void EnumerateUserApps(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CCloud_EnumerateUserApps_Request* request,
                       ::proto::steam::CCloud_EnumerateUserApps_Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Cloud_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CCloud_GetUploadServerInfo_Request

// optional uint32 appid = 1 [(.proto.steam.description) = "App ID to which a file will be uploaded to."];
inline bool CCloud_GetUploadServerInfo_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CCloud_GetUploadServerInfo_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CCloud_GetUploadServerInfo_Request::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_GetUploadServerInfo_Request.appid)
  return appid_;
}
inline void CCloud_GetUploadServerInfo_Request::set_appid(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_GetUploadServerInfo_Request.appid)
}

// -------------------------------------------------------------------

// CCloud_GetUploadServerInfo_Response

// optional string server_url = 1;
inline bool CCloud_GetUploadServerInfo_Response::has_server_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CCloud_GetUploadServerInfo_Response::clear_server_url() {
  server_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CCloud_GetUploadServerInfo_Response::server_url() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_GetUploadServerInfo_Response.server_url)
  return server_url_.GetNoArena();
}
inline void CCloud_GetUploadServerInfo_Response::set_server_url(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  server_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_GetUploadServerInfo_Response.server_url)
}
#if LANG_CXX11
inline void CCloud_GetUploadServerInfo_Response::set_server_url(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  server_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CCloud_GetUploadServerInfo_Response.server_url)
}
#endif
inline void CCloud_GetUploadServerInfo_Response::set_server_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  server_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CCloud_GetUploadServerInfo_Response.server_url)
}
inline void CCloud_GetUploadServerInfo_Response::set_server_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  server_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCloud_GetUploadServerInfo_Response.server_url)
}
inline ::std::string* CCloud_GetUploadServerInfo_Response::mutable_server_url() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CCloud_GetUploadServerInfo_Response.server_url)
  return server_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CCloud_GetUploadServerInfo_Response::release_server_url() {
  // @@protoc_insertion_point(field_release:proto.steam.CCloud_GetUploadServerInfo_Response.server_url)
  if (!has_server_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return server_url_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CCloud_GetUploadServerInfo_Response::set_allocated_server_url(::std::string* server_url) {
  if (server_url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  server_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_url);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CCloud_GetUploadServerInfo_Response.server_url)
}

// -------------------------------------------------------------------

// CCloud_BeginHTTPUpload_Request

// optional uint32 appid = 1 [(.proto.steam.description) = "App ID for which the file is being uploaded."];
inline bool CCloud_BeginHTTPUpload_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CCloud_BeginHTTPUpload_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CCloud_BeginHTTPUpload_Request::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_BeginHTTPUpload_Request.appid)
  return appid_;
}
inline void CCloud_BeginHTTPUpload_Request::set_appid(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_BeginHTTPUpload_Request.appid)
}

// optional uint32 file_size = 2 [(.proto.steam.description) = "Original file size in bytes."];
inline bool CCloud_BeginHTTPUpload_Request::has_file_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CCloud_BeginHTTPUpload_Request::clear_file_size() {
  file_size_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CCloud_BeginHTTPUpload_Request::file_size() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_BeginHTTPUpload_Request.file_size)
  return file_size_;
}
inline void CCloud_BeginHTTPUpload_Request::set_file_size(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  file_size_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_BeginHTTPUpload_Request.file_size)
}

// optional string filename = 3 [(.proto.steam.description) = "Name of the file to store in the cloud."];
inline bool CCloud_BeginHTTPUpload_Request::has_filename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CCloud_BeginHTTPUpload_Request::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CCloud_BeginHTTPUpload_Request::filename() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_BeginHTTPUpload_Request.filename)
  return filename_.GetNoArena();
}
inline void CCloud_BeginHTTPUpload_Request::set_filename(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_BeginHTTPUpload_Request.filename)
}
#if LANG_CXX11
inline void CCloud_BeginHTTPUpload_Request::set_filename(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CCloud_BeginHTTPUpload_Request.filename)
}
#endif
inline void CCloud_BeginHTTPUpload_Request::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CCloud_BeginHTTPUpload_Request.filename)
}
inline void CCloud_BeginHTTPUpload_Request::set_filename(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCloud_BeginHTTPUpload_Request.filename)
}
inline ::std::string* CCloud_BeginHTTPUpload_Request::mutable_filename() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CCloud_BeginHTTPUpload_Request.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CCloud_BeginHTTPUpload_Request::release_filename() {
  // @@protoc_insertion_point(field_release:proto.steam.CCloud_BeginHTTPUpload_Request.filename)
  if (!has_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return filename_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CCloud_BeginHTTPUpload_Request::set_allocated_filename(::std::string* filename) {
  if (filename != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CCloud_BeginHTTPUpload_Request.filename)
}

// optional string file_sha = 4 [(.proto.steam.description) = "Hex string (40 digits) representing the SHA1 digest of the file."];
inline bool CCloud_BeginHTTPUpload_Request::has_file_sha() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CCloud_BeginHTTPUpload_Request::clear_file_sha() {
  file_sha_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CCloud_BeginHTTPUpload_Request::file_sha() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_BeginHTTPUpload_Request.file_sha)
  return file_sha_.GetNoArena();
}
inline void CCloud_BeginHTTPUpload_Request::set_file_sha(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  file_sha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_BeginHTTPUpload_Request.file_sha)
}
#if LANG_CXX11
inline void CCloud_BeginHTTPUpload_Request::set_file_sha(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  file_sha_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CCloud_BeginHTTPUpload_Request.file_sha)
}
#endif
inline void CCloud_BeginHTTPUpload_Request::set_file_sha(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  file_sha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CCloud_BeginHTTPUpload_Request.file_sha)
}
inline void CCloud_BeginHTTPUpload_Request::set_file_sha(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  file_sha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCloud_BeginHTTPUpload_Request.file_sha)
}
inline ::std::string* CCloud_BeginHTTPUpload_Request::mutable_file_sha() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CCloud_BeginHTTPUpload_Request.file_sha)
  return file_sha_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CCloud_BeginHTTPUpload_Request::release_file_sha() {
  // @@protoc_insertion_point(field_release:proto.steam.CCloud_BeginHTTPUpload_Request.file_sha)
  if (!has_file_sha()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return file_sha_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CCloud_BeginHTTPUpload_Request::set_allocated_file_sha(::std::string* file_sha) {
  if (file_sha != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  file_sha_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_sha);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CCloud_BeginHTTPUpload_Request.file_sha)
}

// optional bool is_public = 5 [(.proto.steam.description) = "True if the file should be marked public on the UFS, false otherwise."];
inline bool CCloud_BeginHTTPUpload_Request::has_is_public() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CCloud_BeginHTTPUpload_Request::clear_is_public() {
  is_public_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CCloud_BeginHTTPUpload_Request::is_public() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_BeginHTTPUpload_Request.is_public)
  return is_public_;
}
inline void CCloud_BeginHTTPUpload_Request::set_is_public(bool value) {
  _has_bits_[0] |= 0x00000010u;
  is_public_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_BeginHTTPUpload_Request.is_public)
}

// repeated string platforms_to_sync = 6 [(.proto.steam.description) = "Array of string specifying which platforms to sync; value values: all, windows, osx, linux."];
inline int CCloud_BeginHTTPUpload_Request::platforms_to_sync_size() const {
  return platforms_to_sync_.size();
}
inline void CCloud_BeginHTTPUpload_Request::clear_platforms_to_sync() {
  platforms_to_sync_.Clear();
}
inline const ::std::string& CCloud_BeginHTTPUpload_Request::platforms_to_sync(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_BeginHTTPUpload_Request.platforms_to_sync)
  return platforms_to_sync_.Get(index);
}
inline ::std::string* CCloud_BeginHTTPUpload_Request::mutable_platforms_to_sync(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CCloud_BeginHTTPUpload_Request.platforms_to_sync)
  return platforms_to_sync_.Mutable(index);
}
inline void CCloud_BeginHTTPUpload_Request::set_platforms_to_sync(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_BeginHTTPUpload_Request.platforms_to_sync)
  platforms_to_sync_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void CCloud_BeginHTTPUpload_Request::set_platforms_to_sync(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_BeginHTTPUpload_Request.platforms_to_sync)
  platforms_to_sync_.Mutable(index)->assign(std::move(value));
}
#endif
inline void CCloud_BeginHTTPUpload_Request::set_platforms_to_sync(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  platforms_to_sync_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.steam.CCloud_BeginHTTPUpload_Request.platforms_to_sync)
}
inline void CCloud_BeginHTTPUpload_Request::set_platforms_to_sync(int index, const char* value, size_t size) {
  platforms_to_sync_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCloud_BeginHTTPUpload_Request.platforms_to_sync)
}
inline ::std::string* CCloud_BeginHTTPUpload_Request::add_platforms_to_sync() {
  // @@protoc_insertion_point(field_add_mutable:proto.steam.CCloud_BeginHTTPUpload_Request.platforms_to_sync)
  return platforms_to_sync_.Add();
}
inline void CCloud_BeginHTTPUpload_Request::add_platforms_to_sync(const ::std::string& value) {
  platforms_to_sync_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.steam.CCloud_BeginHTTPUpload_Request.platforms_to_sync)
}
#if LANG_CXX11
inline void CCloud_BeginHTTPUpload_Request::add_platforms_to_sync(::std::string&& value) {
  platforms_to_sync_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.steam.CCloud_BeginHTTPUpload_Request.platforms_to_sync)
}
#endif
inline void CCloud_BeginHTTPUpload_Request::add_platforms_to_sync(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  platforms_to_sync_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.steam.CCloud_BeginHTTPUpload_Request.platforms_to_sync)
}
inline void CCloud_BeginHTTPUpload_Request::add_platforms_to_sync(const char* value, size_t size) {
  platforms_to_sync_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.steam.CCloud_BeginHTTPUpload_Request.platforms_to_sync)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
CCloud_BeginHTTPUpload_Request::platforms_to_sync() const {
  // @@protoc_insertion_point(field_list:proto.steam.CCloud_BeginHTTPUpload_Request.platforms_to_sync)
  return platforms_to_sync_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
CCloud_BeginHTTPUpload_Request::mutable_platforms_to_sync() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CCloud_BeginHTTPUpload_Request.platforms_to_sync)
  return &platforms_to_sync_;
}

// repeated string request_headers_names = 7 [(.proto.steam.description) = "Names for headers you\'ll want to set on your upload request. May be left blank."];
inline int CCloud_BeginHTTPUpload_Request::request_headers_names_size() const {
  return request_headers_names_.size();
}
inline void CCloud_BeginHTTPUpload_Request::clear_request_headers_names() {
  request_headers_names_.Clear();
}
inline const ::std::string& CCloud_BeginHTTPUpload_Request::request_headers_names(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_BeginHTTPUpload_Request.request_headers_names)
  return request_headers_names_.Get(index);
}
inline ::std::string* CCloud_BeginHTTPUpload_Request::mutable_request_headers_names(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CCloud_BeginHTTPUpload_Request.request_headers_names)
  return request_headers_names_.Mutable(index);
}
inline void CCloud_BeginHTTPUpload_Request::set_request_headers_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_BeginHTTPUpload_Request.request_headers_names)
  request_headers_names_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void CCloud_BeginHTTPUpload_Request::set_request_headers_names(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_BeginHTTPUpload_Request.request_headers_names)
  request_headers_names_.Mutable(index)->assign(std::move(value));
}
#endif
inline void CCloud_BeginHTTPUpload_Request::set_request_headers_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  request_headers_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.steam.CCloud_BeginHTTPUpload_Request.request_headers_names)
}
inline void CCloud_BeginHTTPUpload_Request::set_request_headers_names(int index, const char* value, size_t size) {
  request_headers_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCloud_BeginHTTPUpload_Request.request_headers_names)
}
inline ::std::string* CCloud_BeginHTTPUpload_Request::add_request_headers_names() {
  // @@protoc_insertion_point(field_add_mutable:proto.steam.CCloud_BeginHTTPUpload_Request.request_headers_names)
  return request_headers_names_.Add();
}
inline void CCloud_BeginHTTPUpload_Request::add_request_headers_names(const ::std::string& value) {
  request_headers_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.steam.CCloud_BeginHTTPUpload_Request.request_headers_names)
}
#if LANG_CXX11
inline void CCloud_BeginHTTPUpload_Request::add_request_headers_names(::std::string&& value) {
  request_headers_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.steam.CCloud_BeginHTTPUpload_Request.request_headers_names)
}
#endif
inline void CCloud_BeginHTTPUpload_Request::add_request_headers_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  request_headers_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.steam.CCloud_BeginHTTPUpload_Request.request_headers_names)
}
inline void CCloud_BeginHTTPUpload_Request::add_request_headers_names(const char* value, size_t size) {
  request_headers_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.steam.CCloud_BeginHTTPUpload_Request.request_headers_names)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
CCloud_BeginHTTPUpload_Request::request_headers_names() const {
  // @@protoc_insertion_point(field_list:proto.steam.CCloud_BeginHTTPUpload_Request.request_headers_names)
  return request_headers_names_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
CCloud_BeginHTTPUpload_Request::mutable_request_headers_names() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CCloud_BeginHTTPUpload_Request.request_headers_names)
  return &request_headers_names_;
}

// repeated string request_headers_values = 8 [(.proto.steam.description) = "Values for headers you\'ll want to set on your upload request. The number of names must equal the number of values."];
inline int CCloud_BeginHTTPUpload_Request::request_headers_values_size() const {
  return request_headers_values_.size();
}
inline void CCloud_BeginHTTPUpload_Request::clear_request_headers_values() {
  request_headers_values_.Clear();
}
inline const ::std::string& CCloud_BeginHTTPUpload_Request::request_headers_values(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_BeginHTTPUpload_Request.request_headers_values)
  return request_headers_values_.Get(index);
}
inline ::std::string* CCloud_BeginHTTPUpload_Request::mutable_request_headers_values(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CCloud_BeginHTTPUpload_Request.request_headers_values)
  return request_headers_values_.Mutable(index);
}
inline void CCloud_BeginHTTPUpload_Request::set_request_headers_values(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_BeginHTTPUpload_Request.request_headers_values)
  request_headers_values_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void CCloud_BeginHTTPUpload_Request::set_request_headers_values(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_BeginHTTPUpload_Request.request_headers_values)
  request_headers_values_.Mutable(index)->assign(std::move(value));
}
#endif
inline void CCloud_BeginHTTPUpload_Request::set_request_headers_values(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  request_headers_values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.steam.CCloud_BeginHTTPUpload_Request.request_headers_values)
}
inline void CCloud_BeginHTTPUpload_Request::set_request_headers_values(int index, const char* value, size_t size) {
  request_headers_values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCloud_BeginHTTPUpload_Request.request_headers_values)
}
inline ::std::string* CCloud_BeginHTTPUpload_Request::add_request_headers_values() {
  // @@protoc_insertion_point(field_add_mutable:proto.steam.CCloud_BeginHTTPUpload_Request.request_headers_values)
  return request_headers_values_.Add();
}
inline void CCloud_BeginHTTPUpload_Request::add_request_headers_values(const ::std::string& value) {
  request_headers_values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.steam.CCloud_BeginHTTPUpload_Request.request_headers_values)
}
#if LANG_CXX11
inline void CCloud_BeginHTTPUpload_Request::add_request_headers_values(::std::string&& value) {
  request_headers_values_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.steam.CCloud_BeginHTTPUpload_Request.request_headers_values)
}
#endif
inline void CCloud_BeginHTTPUpload_Request::add_request_headers_values(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  request_headers_values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.steam.CCloud_BeginHTTPUpload_Request.request_headers_values)
}
inline void CCloud_BeginHTTPUpload_Request::add_request_headers_values(const char* value, size_t size) {
  request_headers_values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.steam.CCloud_BeginHTTPUpload_Request.request_headers_values)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
CCloud_BeginHTTPUpload_Request::request_headers_values() const {
  // @@protoc_insertion_point(field_list:proto.steam.CCloud_BeginHTTPUpload_Request.request_headers_values)
  return request_headers_values_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
CCloud_BeginHTTPUpload_Request::mutable_request_headers_values() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CCloud_BeginHTTPUpload_Request.request_headers_values)
  return &request_headers_values_;
}

// -------------------------------------------------------------------

// CCloud_BeginHTTPUpload_Response_HTTPHeaders

// optional string name = 1;
inline bool CCloud_BeginHTTPUpload_Response_HTTPHeaders::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CCloud_BeginHTTPUpload_Response_HTTPHeaders::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CCloud_BeginHTTPUpload_Response_HTTPHeaders::name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders.name)
  return name_.GetNoArena();
}
inline void CCloud_BeginHTTPUpload_Response_HTTPHeaders::set_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders.name)
}
#if LANG_CXX11
inline void CCloud_BeginHTTPUpload_Response_HTTPHeaders::set_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders.name)
}
#endif
inline void CCloud_BeginHTTPUpload_Response_HTTPHeaders::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders.name)
}
inline void CCloud_BeginHTTPUpload_Response_HTTPHeaders::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders.name)
}
inline ::std::string* CCloud_BeginHTTPUpload_Response_HTTPHeaders::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CCloud_BeginHTTPUpload_Response_HTTPHeaders::release_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CCloud_BeginHTTPUpload_Response_HTTPHeaders::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders.name)
}

// optional string value = 2;
inline bool CCloud_BeginHTTPUpload_Response_HTTPHeaders::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CCloud_BeginHTTPUpload_Response_HTTPHeaders::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CCloud_BeginHTTPUpload_Response_HTTPHeaders::value() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders.value)
  return value_.GetNoArena();
}
inline void CCloud_BeginHTTPUpload_Response_HTTPHeaders::set_value(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders.value)
}
#if LANG_CXX11
inline void CCloud_BeginHTTPUpload_Response_HTTPHeaders::set_value(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders.value)
}
#endif
inline void CCloud_BeginHTTPUpload_Response_HTTPHeaders::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders.value)
}
inline void CCloud_BeginHTTPUpload_Response_HTTPHeaders::set_value(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders.value)
}
inline ::std::string* CCloud_BeginHTTPUpload_Response_HTTPHeaders::mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CCloud_BeginHTTPUpload_Response_HTTPHeaders::release_value() {
  // @@protoc_insertion_point(field_release:proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders.value)
  if (!has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return value_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CCloud_BeginHTTPUpload_Response_HTTPHeaders::set_allocated_value(::std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders.value)
}

// -------------------------------------------------------------------

// CCloud_BeginHTTPUpload_Response

// optional fixed64 ugcid = 1 [(.proto.steam.description) = "UGC ID of the uploaded file."];
inline bool CCloud_BeginHTTPUpload_Response::has_ugcid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CCloud_BeginHTTPUpload_Response::clear_ugcid() {
  ugcid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint64 CCloud_BeginHTTPUpload_Response::ugcid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_BeginHTTPUpload_Response.ugcid)
  return ugcid_;
}
inline void CCloud_BeginHTTPUpload_Response::set_ugcid(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  ugcid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_BeginHTTPUpload_Response.ugcid)
}

// optional fixed32 timestamp = 2 [(.proto.steam.description) = "Server timestamp of file."];
inline bool CCloud_BeginHTTPUpload_Response::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CCloud_BeginHTTPUpload_Response::clear_timestamp() {
  timestamp_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CCloud_BeginHTTPUpload_Response::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_BeginHTTPUpload_Response.timestamp)
  return timestamp_;
}
inline void CCloud_BeginHTTPUpload_Response::set_timestamp(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_BeginHTTPUpload_Response.timestamp)
}

// optional string url_host = 3 [(.proto.steam.description) = "Host name of server to which file should be uploaded via HTTP PUT."];
inline bool CCloud_BeginHTTPUpload_Response::has_url_host() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CCloud_BeginHTTPUpload_Response::clear_url_host() {
  url_host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CCloud_BeginHTTPUpload_Response::url_host() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_BeginHTTPUpload_Response.url_host)
  return url_host_.GetNoArena();
}
inline void CCloud_BeginHTTPUpload_Response::set_url_host(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_BeginHTTPUpload_Response.url_host)
}
#if LANG_CXX11
inline void CCloud_BeginHTTPUpload_Response::set_url_host(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  url_host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CCloud_BeginHTTPUpload_Response.url_host)
}
#endif
inline void CCloud_BeginHTTPUpload_Response::set_url_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  url_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CCloud_BeginHTTPUpload_Response.url_host)
}
inline void CCloud_BeginHTTPUpload_Response::set_url_host(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  url_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCloud_BeginHTTPUpload_Response.url_host)
}
inline ::std::string* CCloud_BeginHTTPUpload_Response::mutable_url_host() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CCloud_BeginHTTPUpload_Response.url_host)
  return url_host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CCloud_BeginHTTPUpload_Response::release_url_host() {
  // @@protoc_insertion_point(field_release:proto.steam.CCloud_BeginHTTPUpload_Response.url_host)
  if (!has_url_host()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return url_host_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CCloud_BeginHTTPUpload_Response::set_allocated_url_host(::std::string* url_host) {
  if (url_host != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url_host);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CCloud_BeginHTTPUpload_Response.url_host)
}

// optional string url_path = 4 [(.proto.steam.description) = "Relative path on server to which file should be uploaded."];
inline bool CCloud_BeginHTTPUpload_Response::has_url_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CCloud_BeginHTTPUpload_Response::clear_url_path() {
  url_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CCloud_BeginHTTPUpload_Response::url_path() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_BeginHTTPUpload_Response.url_path)
  return url_path_.GetNoArena();
}
inline void CCloud_BeginHTTPUpload_Response::set_url_path(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  url_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_BeginHTTPUpload_Response.url_path)
}
#if LANG_CXX11
inline void CCloud_BeginHTTPUpload_Response::set_url_path(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  url_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CCloud_BeginHTTPUpload_Response.url_path)
}
#endif
inline void CCloud_BeginHTTPUpload_Response::set_url_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  url_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CCloud_BeginHTTPUpload_Response.url_path)
}
inline void CCloud_BeginHTTPUpload_Response::set_url_path(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  url_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCloud_BeginHTTPUpload_Response.url_path)
}
inline ::std::string* CCloud_BeginHTTPUpload_Response::mutable_url_path() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CCloud_BeginHTTPUpload_Response.url_path)
  return url_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CCloud_BeginHTTPUpload_Response::release_url_path() {
  // @@protoc_insertion_point(field_release:proto.steam.CCloud_BeginHTTPUpload_Response.url_path)
  if (!has_url_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return url_path_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CCloud_BeginHTTPUpload_Response::set_allocated_url_path(::std::string* url_path) {
  if (url_path != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  url_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url_path);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CCloud_BeginHTTPUpload_Response.url_path)
}

// optional bool use_https = 5 [(.proto.steam.description) = "If true, use https, otherwise use http."];
inline bool CCloud_BeginHTTPUpload_Response::has_use_https() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CCloud_BeginHTTPUpload_Response::clear_use_https() {
  use_https_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CCloud_BeginHTTPUpload_Response::use_https() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_BeginHTTPUpload_Response.use_https)
  return use_https_;
}
inline void CCloud_BeginHTTPUpload_Response::set_use_https(bool value) {
  _has_bits_[0] |= 0x00000010u;
  use_https_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_BeginHTTPUpload_Response.use_https)
}

// repeated .proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders request_headers = 6 [(.proto.steam.description) = "Name-value pairs to be sent in HTTP PUT request."];
inline int CCloud_BeginHTTPUpload_Response::request_headers_size() const {
  return request_headers_.size();
}
inline void CCloud_BeginHTTPUpload_Response::clear_request_headers() {
  request_headers_.Clear();
}
inline ::proto::steam::CCloud_BeginHTTPUpload_Response_HTTPHeaders* CCloud_BeginHTTPUpload_Response::mutable_request_headers(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CCloud_BeginHTTPUpload_Response.request_headers)
  return request_headers_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::steam::CCloud_BeginHTTPUpload_Response_HTTPHeaders >*
CCloud_BeginHTTPUpload_Response::mutable_request_headers() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CCloud_BeginHTTPUpload_Response.request_headers)
  return &request_headers_;
}
inline const ::proto::steam::CCloud_BeginHTTPUpload_Response_HTTPHeaders& CCloud_BeginHTTPUpload_Response::request_headers(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_BeginHTTPUpload_Response.request_headers)
  return request_headers_.Get(index);
}
inline ::proto::steam::CCloud_BeginHTTPUpload_Response_HTTPHeaders* CCloud_BeginHTTPUpload_Response::add_request_headers() {
  // @@protoc_insertion_point(field_add:proto.steam.CCloud_BeginHTTPUpload_Response.request_headers)
  return request_headers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::steam::CCloud_BeginHTTPUpload_Response_HTTPHeaders >&
CCloud_BeginHTTPUpload_Response::request_headers() const {
  // @@protoc_insertion_point(field_list:proto.steam.CCloud_BeginHTTPUpload_Response.request_headers)
  return request_headers_;
}

// -------------------------------------------------------------------

// CCloud_CommitHTTPUpload_Request

// optional bool transfer_succeeded = 1 [(.proto.steam.description) = "True if the HTTP PUT to the upload URL succeeded (URL provided in response to Cloud.BeginHTTPUpload), false if a failure occurred."];
inline bool CCloud_CommitHTTPUpload_Request::has_transfer_succeeded() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CCloud_CommitHTTPUpload_Request::clear_transfer_succeeded() {
  transfer_succeeded_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CCloud_CommitHTTPUpload_Request::transfer_succeeded() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_CommitHTTPUpload_Request.transfer_succeeded)
  return transfer_succeeded_;
}
inline void CCloud_CommitHTTPUpload_Request::set_transfer_succeeded(bool value) {
  _has_bits_[0] |= 0x00000004u;
  transfer_succeeded_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_CommitHTTPUpload_Request.transfer_succeeded)
}

// optional uint32 appid = 2 [(.proto.steam.description) = "App ID for which the file is being uploaded. Must match the app ID provided to Cloud.BeginHTTPUpload."];
inline bool CCloud_CommitHTTPUpload_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CCloud_CommitHTTPUpload_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CCloud_CommitHTTPUpload_Request::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_CommitHTTPUpload_Request.appid)
  return appid_;
}
inline void CCloud_CommitHTTPUpload_Request::set_appid(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_CommitHTTPUpload_Request.appid)
}

// optional string file_sha = 3 [(.proto.steam.description) = "Hex string (40 digits) representing the SHA1 digest of the file. Must match the SHA1 digest provided to Cloud.BeginHTTPUpload."];
inline bool CCloud_CommitHTTPUpload_Request::has_file_sha() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CCloud_CommitHTTPUpload_Request::clear_file_sha() {
  file_sha_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CCloud_CommitHTTPUpload_Request::file_sha() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_CommitHTTPUpload_Request.file_sha)
  return file_sha_.GetNoArena();
}
inline void CCloud_CommitHTTPUpload_Request::set_file_sha(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  file_sha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_CommitHTTPUpload_Request.file_sha)
}
#if LANG_CXX11
inline void CCloud_CommitHTTPUpload_Request::set_file_sha(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  file_sha_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CCloud_CommitHTTPUpload_Request.file_sha)
}
#endif
inline void CCloud_CommitHTTPUpload_Request::set_file_sha(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  file_sha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CCloud_CommitHTTPUpload_Request.file_sha)
}
inline void CCloud_CommitHTTPUpload_Request::set_file_sha(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  file_sha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCloud_CommitHTTPUpload_Request.file_sha)
}
inline ::std::string* CCloud_CommitHTTPUpload_Request::mutable_file_sha() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CCloud_CommitHTTPUpload_Request.file_sha)
  return file_sha_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CCloud_CommitHTTPUpload_Request::release_file_sha() {
  // @@protoc_insertion_point(field_release:proto.steam.CCloud_CommitHTTPUpload_Request.file_sha)
  if (!has_file_sha()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return file_sha_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CCloud_CommitHTTPUpload_Request::set_allocated_file_sha(::std::string* file_sha) {
  if (file_sha != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  file_sha_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_sha);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CCloud_CommitHTTPUpload_Request.file_sha)
}

// optional string filename = 4 [(.proto.steam.description) = "Filename as specified in the Cloud.BeginHTTPUpload request."];
inline bool CCloud_CommitHTTPUpload_Request::has_filename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CCloud_CommitHTTPUpload_Request::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CCloud_CommitHTTPUpload_Request::filename() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_CommitHTTPUpload_Request.filename)
  return filename_.GetNoArena();
}
inline void CCloud_CommitHTTPUpload_Request::set_filename(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_CommitHTTPUpload_Request.filename)
}
#if LANG_CXX11
inline void CCloud_CommitHTTPUpload_Request::set_filename(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CCloud_CommitHTTPUpload_Request.filename)
}
#endif
inline void CCloud_CommitHTTPUpload_Request::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CCloud_CommitHTTPUpload_Request.filename)
}
inline void CCloud_CommitHTTPUpload_Request::set_filename(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCloud_CommitHTTPUpload_Request.filename)
}
inline ::std::string* CCloud_CommitHTTPUpload_Request::mutable_filename() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CCloud_CommitHTTPUpload_Request.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CCloud_CommitHTTPUpload_Request::release_filename() {
  // @@protoc_insertion_point(field_release:proto.steam.CCloud_CommitHTTPUpload_Request.filename)
  if (!has_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return filename_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CCloud_CommitHTTPUpload_Request::set_allocated_filename(::std::string* filename) {
  if (filename != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CCloud_CommitHTTPUpload_Request.filename)
}

// -------------------------------------------------------------------

// CCloud_CommitHTTPUpload_Response

// optional bool file_committed = 1 [(.proto.steam.description) = "True if the file was successfully committed, false otherwise."];
inline bool CCloud_CommitHTTPUpload_Response::has_file_committed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CCloud_CommitHTTPUpload_Response::clear_file_committed() {
  file_committed_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CCloud_CommitHTTPUpload_Response::file_committed() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_CommitHTTPUpload_Response.file_committed)
  return file_committed_;
}
inline void CCloud_CommitHTTPUpload_Response::set_file_committed(bool value) {
  _has_bits_[0] |= 0x00000001u;
  file_committed_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_CommitHTTPUpload_Response.file_committed)
}

// -------------------------------------------------------------------

// CCloud_GetFileDetails_Request

// optional uint64 ugcid = 1 [(.proto.steam.description) = "ID of the Cloud file to get details for."];
inline bool CCloud_GetFileDetails_Request::has_ugcid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CCloud_GetFileDetails_Request::clear_ugcid() {
  ugcid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 CCloud_GetFileDetails_Request::ugcid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_GetFileDetails_Request.ugcid)
  return ugcid_;
}
inline void CCloud_GetFileDetails_Request::set_ugcid(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  ugcid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_GetFileDetails_Request.ugcid)
}

// optional uint32 appid = 2 [(.proto.steam.description) = "App ID the file belongs to."];
inline bool CCloud_GetFileDetails_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CCloud_GetFileDetails_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CCloud_GetFileDetails_Request::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_GetFileDetails_Request.appid)
  return appid_;
}
inline void CCloud_GetFileDetails_Request::set_appid(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_GetFileDetails_Request.appid)
}

// -------------------------------------------------------------------

// CCloud_UserFile

// optional uint32 appid = 1;
inline bool CCloud_UserFile::has_appid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CCloud_UserFile::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CCloud_UserFile::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_UserFile.appid)
  return appid_;
}
inline void CCloud_UserFile::set_appid(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_UserFile.appid)
}

// optional uint64 ugcid = 2;
inline bool CCloud_UserFile::has_ugcid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CCloud_UserFile::clear_ugcid() {
  ugcid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint64 CCloud_UserFile::ugcid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_UserFile.ugcid)
  return ugcid_;
}
inline void CCloud_UserFile::set_ugcid(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  ugcid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_UserFile.ugcid)
}

// optional string filename = 3;
inline bool CCloud_UserFile::has_filename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CCloud_UserFile::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CCloud_UserFile::filename() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_UserFile.filename)
  return filename_.GetNoArena();
}
inline void CCloud_UserFile::set_filename(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_UserFile.filename)
}
#if LANG_CXX11
inline void CCloud_UserFile::set_filename(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CCloud_UserFile.filename)
}
#endif
inline void CCloud_UserFile::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CCloud_UserFile.filename)
}
inline void CCloud_UserFile::set_filename(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCloud_UserFile.filename)
}
inline ::std::string* CCloud_UserFile::mutable_filename() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CCloud_UserFile.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CCloud_UserFile::release_filename() {
  // @@protoc_insertion_point(field_release:proto.steam.CCloud_UserFile.filename)
  if (!has_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return filename_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CCloud_UserFile::set_allocated_filename(::std::string* filename) {
  if (filename != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CCloud_UserFile.filename)
}

// optional uint64 timestamp = 4;
inline bool CCloud_UserFile::has_timestamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CCloud_UserFile::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint64 CCloud_UserFile::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_UserFile.timestamp)
  return timestamp_;
}
inline void CCloud_UserFile::set_timestamp(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_UserFile.timestamp)
}

// optional uint32 file_size = 5;
inline bool CCloud_UserFile::has_file_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CCloud_UserFile::clear_file_size() {
  file_size_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CCloud_UserFile::file_size() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_UserFile.file_size)
  return file_size_;
}
inline void CCloud_UserFile::set_file_size(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  file_size_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_UserFile.file_size)
}

// optional string url = 6;
inline bool CCloud_UserFile::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CCloud_UserFile::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CCloud_UserFile::url() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_UserFile.url)
  return url_.GetNoArena();
}
inline void CCloud_UserFile::set_url(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_UserFile.url)
}
#if LANG_CXX11
inline void CCloud_UserFile::set_url(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CCloud_UserFile.url)
}
#endif
inline void CCloud_UserFile::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CCloud_UserFile.url)
}
inline void CCloud_UserFile::set_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCloud_UserFile.url)
}
inline ::std::string* CCloud_UserFile::mutable_url() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CCloud_UserFile.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CCloud_UserFile::release_url() {
  // @@protoc_insertion_point(field_release:proto.steam.CCloud_UserFile.url)
  if (!has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return url_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CCloud_UserFile::set_allocated_url(::std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CCloud_UserFile.url)
}

// optional fixed64 steamid_creator = 7;
inline bool CCloud_UserFile::has_steamid_creator() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CCloud_UserFile::clear_steamid_creator() {
  steamid_creator_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint64 CCloud_UserFile::steamid_creator() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_UserFile.steamid_creator)
  return steamid_creator_;
}
inline void CCloud_UserFile::set_steamid_creator(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  steamid_creator_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_UserFile.steamid_creator)
}

// optional uint32 flags = 8;
inline bool CCloud_UserFile::has_flags() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CCloud_UserFile::clear_flags() {
  flags_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::uint32 CCloud_UserFile::flags() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_UserFile.flags)
  return flags_;
}
inline void CCloud_UserFile::set_flags(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  flags_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_UserFile.flags)
}

// -------------------------------------------------------------------

// CCloud_GetFileDetails_Response

// optional .proto.steam.CCloud_UserFile details = 1;
inline bool CCloud_GetFileDetails_Response::has_details() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CCloud_GetFileDetails_Response::clear_details() {
  if (details_ != nullptr) details_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::proto::steam::CCloud_UserFile& CCloud_GetFileDetails_Response::details() const {
  const ::proto::steam::CCloud_UserFile* p = details_;
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_GetFileDetails_Response.details)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::steam::CCloud_UserFile*>(
      &::proto::steam::_CCloud_UserFile_default_instance_);
}
inline ::proto::steam::CCloud_UserFile* CCloud_GetFileDetails_Response::release_details() {
  // @@protoc_insertion_point(field_release:proto.steam.CCloud_GetFileDetails_Response.details)
  _has_bits_[0] &= ~0x00000001u;
  ::proto::steam::CCloud_UserFile* temp = details_;
  details_ = nullptr;
  return temp;
}
inline ::proto::steam::CCloud_UserFile* CCloud_GetFileDetails_Response::mutable_details() {
  _has_bits_[0] |= 0x00000001u;
  if (details_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::steam::CCloud_UserFile>(GetArenaNoVirtual());
    details_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CCloud_GetFileDetails_Response.details)
  return details_;
}
inline void CCloud_GetFileDetails_Response::set_allocated_details(::proto::steam::CCloud_UserFile* details) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete details_;
  }
  if (details) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      details = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, details, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  details_ = details;
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CCloud_GetFileDetails_Response.details)
}

// -------------------------------------------------------------------

// CCloud_EnumerateUserFiles_Request

// optional uint32 appid = 1 [(.proto.steam.description) = "App ID to enumerate the files of."];
inline bool CCloud_EnumerateUserFiles_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CCloud_EnumerateUserFiles_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CCloud_EnumerateUserFiles_Request::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_EnumerateUserFiles_Request.appid)
  return appid_;
}
inline void CCloud_EnumerateUserFiles_Request::set_appid(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_EnumerateUserFiles_Request.appid)
}

// optional bool extended_details = 2 [(.proto.steam.description) = "(Optional) Get extended details back on the files found. Defaults to only returned the app Id and UGC Id of the files found."];
inline bool CCloud_EnumerateUserFiles_Request::has_extended_details() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CCloud_EnumerateUserFiles_Request::clear_extended_details() {
  extended_details_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CCloud_EnumerateUserFiles_Request::extended_details() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_EnumerateUserFiles_Request.extended_details)
  return extended_details_;
}
inline void CCloud_EnumerateUserFiles_Request::set_extended_details(bool value) {
  _has_bits_[0] |= 0x00000002u;
  extended_details_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_EnumerateUserFiles_Request.extended_details)
}

// optional uint32 count = 3 [(.proto.steam.description) = "(Optional) Maximum number of results to return on this call. Defaults to a maximum of 500 files returned."];
inline bool CCloud_EnumerateUserFiles_Request::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CCloud_EnumerateUserFiles_Request::clear_count() {
  count_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CCloud_EnumerateUserFiles_Request::count() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_EnumerateUserFiles_Request.count)
  return count_;
}
inline void CCloud_EnumerateUserFiles_Request::set_count(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  count_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_EnumerateUserFiles_Request.count)
}

// optional uint32 start_index = 4 [(.proto.steam.description) = "(Optional) Starting index to begin enumeration at. Defaults to the beginning of the list."];
inline bool CCloud_EnumerateUserFiles_Request::has_start_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CCloud_EnumerateUserFiles_Request::clear_start_index() {
  start_index_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CCloud_EnumerateUserFiles_Request::start_index() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_EnumerateUserFiles_Request.start_index)
  return start_index_;
}
inline void CCloud_EnumerateUserFiles_Request::set_start_index(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  start_index_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_EnumerateUserFiles_Request.start_index)
}

// -------------------------------------------------------------------

// CCloud_EnumerateUserFiles_Response

// repeated .proto.steam.CCloud_UserFile files = 1;
inline int CCloud_EnumerateUserFiles_Response::files_size() const {
  return files_.size();
}
inline void CCloud_EnumerateUserFiles_Response::clear_files() {
  files_.Clear();
}
inline ::proto::steam::CCloud_UserFile* CCloud_EnumerateUserFiles_Response::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CCloud_EnumerateUserFiles_Response.files)
  return files_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::steam::CCloud_UserFile >*
CCloud_EnumerateUserFiles_Response::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CCloud_EnumerateUserFiles_Response.files)
  return &files_;
}
inline const ::proto::steam::CCloud_UserFile& CCloud_EnumerateUserFiles_Response::files(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_EnumerateUserFiles_Response.files)
  return files_.Get(index);
}
inline ::proto::steam::CCloud_UserFile* CCloud_EnumerateUserFiles_Response::add_files() {
  // @@protoc_insertion_point(field_add:proto.steam.CCloud_EnumerateUserFiles_Response.files)
  return files_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::steam::CCloud_UserFile >&
CCloud_EnumerateUserFiles_Response::files() const {
  // @@protoc_insertion_point(field_list:proto.steam.CCloud_EnumerateUserFiles_Response.files)
  return files_;
}

// optional uint32 total_files = 2;
inline bool CCloud_EnumerateUserFiles_Response::has_total_files() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CCloud_EnumerateUserFiles_Response::clear_total_files() {
  total_files_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CCloud_EnumerateUserFiles_Response::total_files() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_EnumerateUserFiles_Response.total_files)
  return total_files_;
}
inline void CCloud_EnumerateUserFiles_Response::set_total_files(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  total_files_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_EnumerateUserFiles_Response.total_files)
}

// -------------------------------------------------------------------

// CCloud_Delete_Request

// optional string filename = 1;
inline bool CCloud_Delete_Request::has_filename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CCloud_Delete_Request::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CCloud_Delete_Request::filename() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_Delete_Request.filename)
  return filename_.GetNoArena();
}
inline void CCloud_Delete_Request::set_filename(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_Delete_Request.filename)
}
#if LANG_CXX11
inline void CCloud_Delete_Request::set_filename(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CCloud_Delete_Request.filename)
}
#endif
inline void CCloud_Delete_Request::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CCloud_Delete_Request.filename)
}
inline void CCloud_Delete_Request::set_filename(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCloud_Delete_Request.filename)
}
inline ::std::string* CCloud_Delete_Request::mutable_filename() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CCloud_Delete_Request.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CCloud_Delete_Request::release_filename() {
  // @@protoc_insertion_point(field_release:proto.steam.CCloud_Delete_Request.filename)
  if (!has_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return filename_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CCloud_Delete_Request::set_allocated_filename(::std::string* filename) {
  if (filename != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CCloud_Delete_Request.filename)
}

// optional uint32 appid = 2 [(.proto.steam.description) = "App ID the file belongs to."];
inline bool CCloud_Delete_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CCloud_Delete_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CCloud_Delete_Request::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_Delete_Request.appid)
  return appid_;
}
inline void CCloud_Delete_Request::set_appid(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_Delete_Request.appid)
}

// -------------------------------------------------------------------

// CCloud_Delete_Response

// -------------------------------------------------------------------

// CCloud_GetClientEncryptionKey_Request

// -------------------------------------------------------------------

// CCloud_GetClientEncryptionKey_Response

// optional bytes key = 1 [(.proto.steam.description) = "AES-256 encryption key"];
inline bool CCloud_GetClientEncryptionKey_Response::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CCloud_GetClientEncryptionKey_Response::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CCloud_GetClientEncryptionKey_Response::key() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_GetClientEncryptionKey_Response.key)
  return key_.GetNoArena();
}
inline void CCloud_GetClientEncryptionKey_Response::set_key(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_GetClientEncryptionKey_Response.key)
}
#if LANG_CXX11
inline void CCloud_GetClientEncryptionKey_Response::set_key(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CCloud_GetClientEncryptionKey_Response.key)
}
#endif
inline void CCloud_GetClientEncryptionKey_Response::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CCloud_GetClientEncryptionKey_Response.key)
}
inline void CCloud_GetClientEncryptionKey_Response::set_key(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCloud_GetClientEncryptionKey_Response.key)
}
inline ::std::string* CCloud_GetClientEncryptionKey_Response::mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CCloud_GetClientEncryptionKey_Response.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CCloud_GetClientEncryptionKey_Response::release_key() {
  // @@protoc_insertion_point(field_release:proto.steam.CCloud_GetClientEncryptionKey_Response.key)
  if (!has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CCloud_GetClientEncryptionKey_Response::set_allocated_key(::std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CCloud_GetClientEncryptionKey_Response.key)
}

// optional int32 crc = 2 [(.proto.steam.description) = "CRC of key"];
inline bool CCloud_GetClientEncryptionKey_Response::has_crc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CCloud_GetClientEncryptionKey_Response::clear_crc() {
  crc_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::int32 CCloud_GetClientEncryptionKey_Response::crc() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_GetClientEncryptionKey_Response.crc)
  return crc_;
}
inline void CCloud_GetClientEncryptionKey_Response::set_crc(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  crc_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_GetClientEncryptionKey_Response.crc)
}

// -------------------------------------------------------------------

// CCloud_CDNReport_Notification

// optional fixed64 steamid = 1;
inline bool CCloud_CDNReport_Notification::has_steamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CCloud_CDNReport_Notification::clear_steamid() {
  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint64 CCloud_CDNReport_Notification::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_CDNReport_Notification.steamid)
  return steamid_;
}
inline void CCloud_CDNReport_Notification::set_steamid(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_CDNReport_Notification.steamid)
}

// optional string url = 2;
inline bool CCloud_CDNReport_Notification::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CCloud_CDNReport_Notification::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CCloud_CDNReport_Notification::url() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_CDNReport_Notification.url)
  return url_.GetNoArena();
}
inline void CCloud_CDNReport_Notification::set_url(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_CDNReport_Notification.url)
}
#if LANG_CXX11
inline void CCloud_CDNReport_Notification::set_url(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CCloud_CDNReport_Notification.url)
}
#endif
inline void CCloud_CDNReport_Notification::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CCloud_CDNReport_Notification.url)
}
inline void CCloud_CDNReport_Notification::set_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCloud_CDNReport_Notification.url)
}
inline ::std::string* CCloud_CDNReport_Notification::mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CCloud_CDNReport_Notification.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CCloud_CDNReport_Notification::release_url() {
  // @@protoc_insertion_point(field_release:proto.steam.CCloud_CDNReport_Notification.url)
  if (!has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return url_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CCloud_CDNReport_Notification::set_allocated_url(::std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CCloud_CDNReport_Notification.url)
}

// optional bool success = 3;
inline bool CCloud_CDNReport_Notification::has_success() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CCloud_CDNReport_Notification::clear_success() {
  success_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CCloud_CDNReport_Notification::success() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_CDNReport_Notification.success)
  return success_;
}
inline void CCloud_CDNReport_Notification::set_success(bool value) {
  _has_bits_[0] |= 0x00000004u;
  success_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_CDNReport_Notification.success)
}

// optional uint32 http_status_code = 4;
inline bool CCloud_CDNReport_Notification::has_http_status_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CCloud_CDNReport_Notification::clear_http_status_code() {
  http_status_code_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CCloud_CDNReport_Notification::http_status_code() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_CDNReport_Notification.http_status_code)
  return http_status_code_;
}
inline void CCloud_CDNReport_Notification::set_http_status_code(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  http_status_code_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_CDNReport_Notification.http_status_code)
}

// optional uint64 expected_bytes = 5;
inline bool CCloud_CDNReport_Notification::has_expected_bytes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CCloud_CDNReport_Notification::clear_expected_bytes() {
  expected_bytes_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint64 CCloud_CDNReport_Notification::expected_bytes() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_CDNReport_Notification.expected_bytes)
  return expected_bytes_;
}
inline void CCloud_CDNReport_Notification::set_expected_bytes(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  expected_bytes_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_CDNReport_Notification.expected_bytes)
}

// optional uint64 received_bytes = 6;
inline bool CCloud_CDNReport_Notification::has_received_bytes() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CCloud_CDNReport_Notification::clear_received_bytes() {
  received_bytes_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint64 CCloud_CDNReport_Notification::received_bytes() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_CDNReport_Notification.received_bytes)
  return received_bytes_;
}
inline void CCloud_CDNReport_Notification::set_received_bytes(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  received_bytes_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_CDNReport_Notification.received_bytes)
}

// optional uint32 duration = 7;
inline bool CCloud_CDNReport_Notification::has_duration() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CCloud_CDNReport_Notification::clear_duration() {
  duration_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint32 CCloud_CDNReport_Notification::duration() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_CDNReport_Notification.duration)
  return duration_;
}
inline void CCloud_CDNReport_Notification::set_duration(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  duration_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_CDNReport_Notification.duration)
}

// -------------------------------------------------------------------

// CCloud_ExternalStorageTransferReport_Notification

// optional string host = 1;
inline bool CCloud_ExternalStorageTransferReport_Notification::has_host() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CCloud_ExternalStorageTransferReport_Notification::clear_host() {
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CCloud_ExternalStorageTransferReport_Notification::host() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ExternalStorageTransferReport_Notification.host)
  return host_.GetNoArena();
}
inline void CCloud_ExternalStorageTransferReport_Notification::set_host(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ExternalStorageTransferReport_Notification.host)
}
#if LANG_CXX11
inline void CCloud_ExternalStorageTransferReport_Notification::set_host(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CCloud_ExternalStorageTransferReport_Notification.host)
}
#endif
inline void CCloud_ExternalStorageTransferReport_Notification::set_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CCloud_ExternalStorageTransferReport_Notification.host)
}
inline void CCloud_ExternalStorageTransferReport_Notification::set_host(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCloud_ExternalStorageTransferReport_Notification.host)
}
inline ::std::string* CCloud_ExternalStorageTransferReport_Notification::mutable_host() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CCloud_ExternalStorageTransferReport_Notification.host)
  return host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CCloud_ExternalStorageTransferReport_Notification::release_host() {
  // @@protoc_insertion_point(field_release:proto.steam.CCloud_ExternalStorageTransferReport_Notification.host)
  if (!has_host()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return host_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CCloud_ExternalStorageTransferReport_Notification::set_allocated_host(::std::string* host) {
  if (host != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CCloud_ExternalStorageTransferReport_Notification.host)
}

// optional string path = 2;
inline bool CCloud_ExternalStorageTransferReport_Notification::has_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CCloud_ExternalStorageTransferReport_Notification::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CCloud_ExternalStorageTransferReport_Notification::path() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ExternalStorageTransferReport_Notification.path)
  return path_.GetNoArena();
}
inline void CCloud_ExternalStorageTransferReport_Notification::set_path(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ExternalStorageTransferReport_Notification.path)
}
#if LANG_CXX11
inline void CCloud_ExternalStorageTransferReport_Notification::set_path(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CCloud_ExternalStorageTransferReport_Notification.path)
}
#endif
inline void CCloud_ExternalStorageTransferReport_Notification::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CCloud_ExternalStorageTransferReport_Notification.path)
}
inline void CCloud_ExternalStorageTransferReport_Notification::set_path(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCloud_ExternalStorageTransferReport_Notification.path)
}
inline ::std::string* CCloud_ExternalStorageTransferReport_Notification::mutable_path() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CCloud_ExternalStorageTransferReport_Notification.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CCloud_ExternalStorageTransferReport_Notification::release_path() {
  // @@protoc_insertion_point(field_release:proto.steam.CCloud_ExternalStorageTransferReport_Notification.path)
  if (!has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return path_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CCloud_ExternalStorageTransferReport_Notification::set_allocated_path(::std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CCloud_ExternalStorageTransferReport_Notification.path)
}

// optional bool is_upload = 3;
inline bool CCloud_ExternalStorageTransferReport_Notification::has_is_upload() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CCloud_ExternalStorageTransferReport_Notification::clear_is_upload() {
  is_upload_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CCloud_ExternalStorageTransferReport_Notification::is_upload() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ExternalStorageTransferReport_Notification.is_upload)
  return is_upload_;
}
inline void CCloud_ExternalStorageTransferReport_Notification::set_is_upload(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_upload_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ExternalStorageTransferReport_Notification.is_upload)
}

// optional bool success = 4;
inline bool CCloud_ExternalStorageTransferReport_Notification::has_success() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CCloud_ExternalStorageTransferReport_Notification::clear_success() {
  success_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CCloud_ExternalStorageTransferReport_Notification::success() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ExternalStorageTransferReport_Notification.success)
  return success_;
}
inline void CCloud_ExternalStorageTransferReport_Notification::set_success(bool value) {
  _has_bits_[0] |= 0x00000008u;
  success_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ExternalStorageTransferReport_Notification.success)
}

// optional uint32 http_status_code = 5;
inline bool CCloud_ExternalStorageTransferReport_Notification::has_http_status_code() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CCloud_ExternalStorageTransferReport_Notification::clear_http_status_code() {
  http_status_code_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CCloud_ExternalStorageTransferReport_Notification::http_status_code() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ExternalStorageTransferReport_Notification.http_status_code)
  return http_status_code_;
}
inline void CCloud_ExternalStorageTransferReport_Notification::set_http_status_code(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  http_status_code_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ExternalStorageTransferReport_Notification.http_status_code)
}

// optional uint64 bytes_expected = 6;
inline bool CCloud_ExternalStorageTransferReport_Notification::has_bytes_expected() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CCloud_ExternalStorageTransferReport_Notification::clear_bytes_expected() {
  bytes_expected_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint64 CCloud_ExternalStorageTransferReport_Notification::bytes_expected() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ExternalStorageTransferReport_Notification.bytes_expected)
  return bytes_expected_;
}
inline void CCloud_ExternalStorageTransferReport_Notification::set_bytes_expected(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  bytes_expected_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ExternalStorageTransferReport_Notification.bytes_expected)
}

// optional uint64 bytes_actual = 7;
inline bool CCloud_ExternalStorageTransferReport_Notification::has_bytes_actual() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CCloud_ExternalStorageTransferReport_Notification::clear_bytes_actual() {
  bytes_actual_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint64 CCloud_ExternalStorageTransferReport_Notification::bytes_actual() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ExternalStorageTransferReport_Notification.bytes_actual)
  return bytes_actual_;
}
inline void CCloud_ExternalStorageTransferReport_Notification::set_bytes_actual(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  bytes_actual_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ExternalStorageTransferReport_Notification.bytes_actual)
}

// optional uint32 duration_ms = 8;
inline bool CCloud_ExternalStorageTransferReport_Notification::has_duration_ms() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CCloud_ExternalStorageTransferReport_Notification::clear_duration_ms() {
  duration_ms_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::uint32 CCloud_ExternalStorageTransferReport_Notification::duration_ms() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ExternalStorageTransferReport_Notification.duration_ms)
  return duration_ms_;
}
inline void CCloud_ExternalStorageTransferReport_Notification::set_duration_ms(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  duration_ms_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ExternalStorageTransferReport_Notification.duration_ms)
}

// optional uint32 cellid = 9;
inline bool CCloud_ExternalStorageTransferReport_Notification::has_cellid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CCloud_ExternalStorageTransferReport_Notification::clear_cellid() {
  cellid_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::google::protobuf::uint32 CCloud_ExternalStorageTransferReport_Notification::cellid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ExternalStorageTransferReport_Notification.cellid)
  return cellid_;
}
inline void CCloud_ExternalStorageTransferReport_Notification::set_cellid(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  cellid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ExternalStorageTransferReport_Notification.cellid)
}

// -------------------------------------------------------------------

// CCloud_ClientBeginFileUpload_Request

// optional uint32 appid = 1 [(.proto.steam.description) = "App ID for which the file is being uploaded."];
inline bool CCloud_ClientBeginFileUpload_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CCloud_ClientBeginFileUpload_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CCloud_ClientBeginFileUpload_Request::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientBeginFileUpload_Request.appid)
  return appid_;
}
inline void CCloud_ClientBeginFileUpload_Request::set_appid(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ClientBeginFileUpload_Request.appid)
}

// optional uint32 file_size = 2 [(.proto.steam.description) = "file size as transmitted and stored in Cloud."];
inline bool CCloud_ClientBeginFileUpload_Request::has_file_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CCloud_ClientBeginFileUpload_Request::clear_file_size() {
  file_size_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CCloud_ClientBeginFileUpload_Request::file_size() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientBeginFileUpload_Request.file_size)
  return file_size_;
}
inline void CCloud_ClientBeginFileUpload_Request::set_file_size(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  file_size_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ClientBeginFileUpload_Request.file_size)
}

// optional uint32 raw_file_size = 3 [(.proto.steam.description) = "file size before any compression and/or encryption."];
inline bool CCloud_ClientBeginFileUpload_Request::has_raw_file_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CCloud_ClientBeginFileUpload_Request::clear_raw_file_size() {
  raw_file_size_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint32 CCloud_ClientBeginFileUpload_Request::raw_file_size() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientBeginFileUpload_Request.raw_file_size)
  return raw_file_size_;
}
inline void CCloud_ClientBeginFileUpload_Request::set_raw_file_size(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  raw_file_size_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ClientBeginFileUpload_Request.raw_file_size)
}

// optional bytes file_sha = 4 [(.proto.steam.description) = "SHA-1 of raw file."];
inline bool CCloud_ClientBeginFileUpload_Request::has_file_sha() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CCloud_ClientBeginFileUpload_Request::clear_file_sha() {
  file_sha_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CCloud_ClientBeginFileUpload_Request::file_sha() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientBeginFileUpload_Request.file_sha)
  return file_sha_.GetNoArena();
}
inline void CCloud_ClientBeginFileUpload_Request::set_file_sha(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  file_sha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ClientBeginFileUpload_Request.file_sha)
}
#if LANG_CXX11
inline void CCloud_ClientBeginFileUpload_Request::set_file_sha(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  file_sha_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CCloud_ClientBeginFileUpload_Request.file_sha)
}
#endif
inline void CCloud_ClientBeginFileUpload_Request::set_file_sha(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  file_sha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CCloud_ClientBeginFileUpload_Request.file_sha)
}
inline void CCloud_ClientBeginFileUpload_Request::set_file_sha(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  file_sha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCloud_ClientBeginFileUpload_Request.file_sha)
}
inline ::std::string* CCloud_ClientBeginFileUpload_Request::mutable_file_sha() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CCloud_ClientBeginFileUpload_Request.file_sha)
  return file_sha_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CCloud_ClientBeginFileUpload_Request::release_file_sha() {
  // @@protoc_insertion_point(field_release:proto.steam.CCloud_ClientBeginFileUpload_Request.file_sha)
  if (!has_file_sha()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return file_sha_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CCloud_ClientBeginFileUpload_Request::set_allocated_file_sha(::std::string* file_sha) {
  if (file_sha != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  file_sha_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_sha);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CCloud_ClientBeginFileUpload_Request.file_sha)
}

// optional uint64 time_stamp = 5 [(.proto.steam.description) = "Timestamp of file."];
inline bool CCloud_ClientBeginFileUpload_Request::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CCloud_ClientBeginFileUpload_Request::clear_time_stamp() {
  time_stamp_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint64 CCloud_ClientBeginFileUpload_Request::time_stamp() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientBeginFileUpload_Request.time_stamp)
  return time_stamp_;
}
inline void CCloud_ClientBeginFileUpload_Request::set_time_stamp(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ClientBeginFileUpload_Request.time_stamp)
}

// optional string filename = 6 [(.proto.steam.description) = "Name of the file to store in the cloud."];
inline bool CCloud_ClientBeginFileUpload_Request::has_filename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CCloud_ClientBeginFileUpload_Request::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CCloud_ClientBeginFileUpload_Request::filename() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientBeginFileUpload_Request.filename)
  return filename_.GetNoArena();
}
inline void CCloud_ClientBeginFileUpload_Request::set_filename(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ClientBeginFileUpload_Request.filename)
}
#if LANG_CXX11
inline void CCloud_ClientBeginFileUpload_Request::set_filename(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CCloud_ClientBeginFileUpload_Request.filename)
}
#endif
inline void CCloud_ClientBeginFileUpload_Request::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CCloud_ClientBeginFileUpload_Request.filename)
}
inline void CCloud_ClientBeginFileUpload_Request::set_filename(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCloud_ClientBeginFileUpload_Request.filename)
}
inline ::std::string* CCloud_ClientBeginFileUpload_Request::mutable_filename() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CCloud_ClientBeginFileUpload_Request.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CCloud_ClientBeginFileUpload_Request::release_filename() {
  // @@protoc_insertion_point(field_release:proto.steam.CCloud_ClientBeginFileUpload_Request.filename)
  if (!has_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return filename_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CCloud_ClientBeginFileUpload_Request::set_allocated_filename(::std::string* filename) {
  if (filename != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CCloud_ClientBeginFileUpload_Request.filename)
}

// optional uint32 platforms_to_sync = 7 [default = 4294967295];
inline bool CCloud_ClientBeginFileUpload_Request::has_platforms_to_sync() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CCloud_ClientBeginFileUpload_Request::clear_platforms_to_sync() {
  platforms_to_sync_ = 4294967295u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::google::protobuf::uint32 CCloud_ClientBeginFileUpload_Request::platforms_to_sync() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientBeginFileUpload_Request.platforms_to_sync)
  return platforms_to_sync_;
}
inline void CCloud_ClientBeginFileUpload_Request::set_platforms_to_sync(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  platforms_to_sync_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ClientBeginFileUpload_Request.platforms_to_sync)
}

// optional uint32 cell_id = 9 [(.proto.steam.description) = "Client\'s cell ID so we can pick storage location."];
inline bool CCloud_ClientBeginFileUpload_Request::has_cell_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CCloud_ClientBeginFileUpload_Request::clear_cell_id() {
  cell_id_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint32 CCloud_ClientBeginFileUpload_Request::cell_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientBeginFileUpload_Request.cell_id)
  return cell_id_;
}
inline void CCloud_ClientBeginFileUpload_Request::set_cell_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  cell_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ClientBeginFileUpload_Request.cell_id)
}

// optional bool can_encrypt = 10 [(.proto.steam.description) = "if true, client can encrypt the file before uploading it"];
inline bool CCloud_ClientBeginFileUpload_Request::has_can_encrypt() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CCloud_ClientBeginFileUpload_Request::clear_can_encrypt() {
  can_encrypt_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CCloud_ClientBeginFileUpload_Request::can_encrypt() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientBeginFileUpload_Request.can_encrypt)
  return can_encrypt_;
}
inline void CCloud_ClientBeginFileUpload_Request::set_can_encrypt(bool value) {
  _has_bits_[0] |= 0x00000080u;
  can_encrypt_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ClientBeginFileUpload_Request.can_encrypt)
}

// optional bool is_shared_file = 11 [(.proto.steam.description) = "if true, this is going to be UGC or a screenshot or some other shared file"];
inline bool CCloud_ClientBeginFileUpload_Request::has_is_shared_file() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CCloud_ClientBeginFileUpload_Request::clear_is_shared_file() {
  is_shared_file_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool CCloud_ClientBeginFileUpload_Request::is_shared_file() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientBeginFileUpload_Request.is_shared_file)
  return is_shared_file_;
}
inline void CCloud_ClientBeginFileUpload_Request::set_is_shared_file(bool value) {
  _has_bits_[0] |= 0x00000100u;
  is_shared_file_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ClientBeginFileUpload_Request.is_shared_file)
}

// -------------------------------------------------------------------

// ClientCloudFileUploadBlockDetails_HTTPHeaders

// optional string name = 1;
inline bool ClientCloudFileUploadBlockDetails_HTTPHeaders::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientCloudFileUploadBlockDetails_HTTPHeaders::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& ClientCloudFileUploadBlockDetails_HTTPHeaders::name() const {
  // @@protoc_insertion_point(field_get:proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders.name)
  return name_.GetNoArena();
}
inline void ClientCloudFileUploadBlockDetails_HTTPHeaders::set_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders.name)
}
#if LANG_CXX11
inline void ClientCloudFileUploadBlockDetails_HTTPHeaders::set_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders.name)
}
#endif
inline void ClientCloudFileUploadBlockDetails_HTTPHeaders::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders.name)
}
inline void ClientCloudFileUploadBlockDetails_HTTPHeaders::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders.name)
}
inline ::std::string* ClientCloudFileUploadBlockDetails_HTTPHeaders::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientCloudFileUploadBlockDetails_HTTPHeaders::release_name() {
  // @@protoc_insertion_point(field_release:proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientCloudFileUploadBlockDetails_HTTPHeaders::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders.name)
}

// optional string value = 2;
inline bool ClientCloudFileUploadBlockDetails_HTTPHeaders::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientCloudFileUploadBlockDetails_HTTPHeaders::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& ClientCloudFileUploadBlockDetails_HTTPHeaders::value() const {
  // @@protoc_insertion_point(field_get:proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders.value)
  return value_.GetNoArena();
}
inline void ClientCloudFileUploadBlockDetails_HTTPHeaders::set_value(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders.value)
}
#if LANG_CXX11
inline void ClientCloudFileUploadBlockDetails_HTTPHeaders::set_value(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders.value)
}
#endif
inline void ClientCloudFileUploadBlockDetails_HTTPHeaders::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders.value)
}
inline void ClientCloudFileUploadBlockDetails_HTTPHeaders::set_value(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders.value)
}
inline ::std::string* ClientCloudFileUploadBlockDetails_HTTPHeaders::mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientCloudFileUploadBlockDetails_HTTPHeaders::release_value() {
  // @@protoc_insertion_point(field_release:proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders.value)
  if (!has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return value_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientCloudFileUploadBlockDetails_HTTPHeaders::set_allocated_value(::std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders.value)
}

// -------------------------------------------------------------------

// ClientCloudFileUploadBlockDetails

// optional string url_host = 1 [(.proto.steam.description) = "Host name of server to which file should be uploaded via HTTP PUT."];
inline bool ClientCloudFileUploadBlockDetails::has_url_host() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientCloudFileUploadBlockDetails::clear_url_host() {
  url_host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& ClientCloudFileUploadBlockDetails::url_host() const {
  // @@protoc_insertion_point(field_get:proto.steam.ClientCloudFileUploadBlockDetails.url_host)
  return url_host_.GetNoArena();
}
inline void ClientCloudFileUploadBlockDetails::set_url_host(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.ClientCloudFileUploadBlockDetails.url_host)
}
#if LANG_CXX11
inline void ClientCloudFileUploadBlockDetails::set_url_host(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  url_host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.ClientCloudFileUploadBlockDetails.url_host)
}
#endif
inline void ClientCloudFileUploadBlockDetails::set_url_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  url_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.ClientCloudFileUploadBlockDetails.url_host)
}
inline void ClientCloudFileUploadBlockDetails::set_url_host(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  url_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.ClientCloudFileUploadBlockDetails.url_host)
}
inline ::std::string* ClientCloudFileUploadBlockDetails::mutable_url_host() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.ClientCloudFileUploadBlockDetails.url_host)
  return url_host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientCloudFileUploadBlockDetails::release_url_host() {
  // @@protoc_insertion_point(field_release:proto.steam.ClientCloudFileUploadBlockDetails.url_host)
  if (!has_url_host()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return url_host_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientCloudFileUploadBlockDetails::set_allocated_url_host(::std::string* url_host) {
  if (url_host != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url_host);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.ClientCloudFileUploadBlockDetails.url_host)
}

// optional string url_path = 2 [(.proto.steam.description) = "Relative path on server to which file should be uploaded."];
inline bool ClientCloudFileUploadBlockDetails::has_url_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientCloudFileUploadBlockDetails::clear_url_path() {
  url_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& ClientCloudFileUploadBlockDetails::url_path() const {
  // @@protoc_insertion_point(field_get:proto.steam.ClientCloudFileUploadBlockDetails.url_path)
  return url_path_.GetNoArena();
}
inline void ClientCloudFileUploadBlockDetails::set_url_path(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  url_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.ClientCloudFileUploadBlockDetails.url_path)
}
#if LANG_CXX11
inline void ClientCloudFileUploadBlockDetails::set_url_path(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  url_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.ClientCloudFileUploadBlockDetails.url_path)
}
#endif
inline void ClientCloudFileUploadBlockDetails::set_url_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  url_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.ClientCloudFileUploadBlockDetails.url_path)
}
inline void ClientCloudFileUploadBlockDetails::set_url_path(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  url_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.ClientCloudFileUploadBlockDetails.url_path)
}
inline ::std::string* ClientCloudFileUploadBlockDetails::mutable_url_path() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.steam.ClientCloudFileUploadBlockDetails.url_path)
  return url_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientCloudFileUploadBlockDetails::release_url_path() {
  // @@protoc_insertion_point(field_release:proto.steam.ClientCloudFileUploadBlockDetails.url_path)
  if (!has_url_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return url_path_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientCloudFileUploadBlockDetails::set_allocated_url_path(::std::string* url_path) {
  if (url_path != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  url_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url_path);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.ClientCloudFileUploadBlockDetails.url_path)
}

// optional bool use_https = 3 [(.proto.steam.description) = "If true, use https, otherwise use http."];
inline bool ClientCloudFileUploadBlockDetails::has_use_https() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ClientCloudFileUploadBlockDetails::clear_use_https() {
  use_https_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool ClientCloudFileUploadBlockDetails::use_https() const {
  // @@protoc_insertion_point(field_get:proto.steam.ClientCloudFileUploadBlockDetails.use_https)
  return use_https_;
}
inline void ClientCloudFileUploadBlockDetails::set_use_https(bool value) {
  _has_bits_[0] |= 0x00000010u;
  use_https_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.ClientCloudFileUploadBlockDetails.use_https)
}

// optional int32 http_method = 4 [(.proto.steam.description) = "EHTTPMethod to use for this block."];
inline bool ClientCloudFileUploadBlockDetails::has_http_method() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ClientCloudFileUploadBlockDetails::clear_http_method() {
  http_method_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::int32 ClientCloudFileUploadBlockDetails::http_method() const {
  // @@protoc_insertion_point(field_get:proto.steam.ClientCloudFileUploadBlockDetails.http_method)
  return http_method_;
}
inline void ClientCloudFileUploadBlockDetails::set_http_method(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  http_method_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.ClientCloudFileUploadBlockDetails.http_method)
}

// repeated .proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders request_headers = 5 [(.proto.steam.description) = "Name-value pairs to be sent in HTTP PUT request."];
inline int ClientCloudFileUploadBlockDetails::request_headers_size() const {
  return request_headers_.size();
}
inline void ClientCloudFileUploadBlockDetails::clear_request_headers() {
  request_headers_.Clear();
}
inline ::proto::steam::ClientCloudFileUploadBlockDetails_HTTPHeaders* ClientCloudFileUploadBlockDetails::mutable_request_headers(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.ClientCloudFileUploadBlockDetails.request_headers)
  return request_headers_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::steam::ClientCloudFileUploadBlockDetails_HTTPHeaders >*
ClientCloudFileUploadBlockDetails::mutable_request_headers() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.ClientCloudFileUploadBlockDetails.request_headers)
  return &request_headers_;
}
inline const ::proto::steam::ClientCloudFileUploadBlockDetails_HTTPHeaders& ClientCloudFileUploadBlockDetails::request_headers(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.ClientCloudFileUploadBlockDetails.request_headers)
  return request_headers_.Get(index);
}
inline ::proto::steam::ClientCloudFileUploadBlockDetails_HTTPHeaders* ClientCloudFileUploadBlockDetails::add_request_headers() {
  // @@protoc_insertion_point(field_add:proto.steam.ClientCloudFileUploadBlockDetails.request_headers)
  return request_headers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::steam::ClientCloudFileUploadBlockDetails_HTTPHeaders >&
ClientCloudFileUploadBlockDetails::request_headers() const {
  // @@protoc_insertion_point(field_list:proto.steam.ClientCloudFileUploadBlockDetails.request_headers)
  return request_headers_;
}

// optional uint64 block_offset = 6 [(.proto.steam.description) = "offset of file block to upload"];
inline bool ClientCloudFileUploadBlockDetails::has_block_offset() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ClientCloudFileUploadBlockDetails::clear_block_offset() {
  block_offset_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint64 ClientCloudFileUploadBlockDetails::block_offset() const {
  // @@protoc_insertion_point(field_get:proto.steam.ClientCloudFileUploadBlockDetails.block_offset)
  return block_offset_;
}
inline void ClientCloudFileUploadBlockDetails::set_block_offset(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  block_offset_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.ClientCloudFileUploadBlockDetails.block_offset)
}

// optional uint32 block_length = 7 [(.proto.steam.description) = "length of file block to upload - if zero, no part of the file is part of this block"];
inline bool ClientCloudFileUploadBlockDetails::has_block_length() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ClientCloudFileUploadBlockDetails::clear_block_length() {
  block_length_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::uint32 ClientCloudFileUploadBlockDetails::block_length() const {
  // @@protoc_insertion_point(field_get:proto.steam.ClientCloudFileUploadBlockDetails.block_length)
  return block_length_;
}
inline void ClientCloudFileUploadBlockDetails::set_block_length(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  block_length_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.ClientCloudFileUploadBlockDetails.block_length)
}

// optional bytes explicit_body_data = 8 [(.proto.steam.description) = "explicit body data to use, instead of file data, for this block"];
inline bool ClientCloudFileUploadBlockDetails::has_explicit_body_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClientCloudFileUploadBlockDetails::clear_explicit_body_data() {
  explicit_body_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& ClientCloudFileUploadBlockDetails::explicit_body_data() const {
  // @@protoc_insertion_point(field_get:proto.steam.ClientCloudFileUploadBlockDetails.explicit_body_data)
  return explicit_body_data_.GetNoArena();
}
inline void ClientCloudFileUploadBlockDetails::set_explicit_body_data(const ::std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  explicit_body_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.ClientCloudFileUploadBlockDetails.explicit_body_data)
}
#if LANG_CXX11
inline void ClientCloudFileUploadBlockDetails::set_explicit_body_data(::std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  explicit_body_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.ClientCloudFileUploadBlockDetails.explicit_body_data)
}
#endif
inline void ClientCloudFileUploadBlockDetails::set_explicit_body_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  explicit_body_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.ClientCloudFileUploadBlockDetails.explicit_body_data)
}
inline void ClientCloudFileUploadBlockDetails::set_explicit_body_data(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  explicit_body_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.ClientCloudFileUploadBlockDetails.explicit_body_data)
}
inline ::std::string* ClientCloudFileUploadBlockDetails::mutable_explicit_body_data() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:proto.steam.ClientCloudFileUploadBlockDetails.explicit_body_data)
  return explicit_body_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientCloudFileUploadBlockDetails::release_explicit_body_data() {
  // @@protoc_insertion_point(field_release:proto.steam.ClientCloudFileUploadBlockDetails.explicit_body_data)
  if (!has_explicit_body_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return explicit_body_data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientCloudFileUploadBlockDetails::set_allocated_explicit_body_data(::std::string* explicit_body_data) {
  if (explicit_body_data != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  explicit_body_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), explicit_body_data);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.ClientCloudFileUploadBlockDetails.explicit_body_data)
}

// optional bool may_parallelize = 9 [(.proto.steam.description) = "if true, this request may be done in parallel with other similarly-marked requests"];
inline bool ClientCloudFileUploadBlockDetails::has_may_parallelize() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ClientCloudFileUploadBlockDetails::clear_may_parallelize() {
  may_parallelize_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool ClientCloudFileUploadBlockDetails::may_parallelize() const {
  // @@protoc_insertion_point(field_get:proto.steam.ClientCloudFileUploadBlockDetails.may_parallelize)
  return may_parallelize_;
}
inline void ClientCloudFileUploadBlockDetails::set_may_parallelize(bool value) {
  _has_bits_[0] |= 0x00000020u;
  may_parallelize_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.ClientCloudFileUploadBlockDetails.may_parallelize)
}

// -------------------------------------------------------------------

// CCloud_ClientBeginFileUpload_Response

// optional bool encrypt_file = 1 [(.proto.steam.description) = "If true, the file should be encrypted by the client before upload"];
inline bool CCloud_ClientBeginFileUpload_Response::has_encrypt_file() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CCloud_ClientBeginFileUpload_Response::clear_encrypt_file() {
  encrypt_file_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CCloud_ClientBeginFileUpload_Response::encrypt_file() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientBeginFileUpload_Response.encrypt_file)
  return encrypt_file_;
}
inline void CCloud_ClientBeginFileUpload_Response::set_encrypt_file(bool value) {
  _has_bits_[0] |= 0x00000001u;
  encrypt_file_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ClientBeginFileUpload_Response.encrypt_file)
}

// repeated .proto.steam.ClientCloudFileUploadBlockDetails block_requests = 2 [(.proto.steam.description) = "HTTP requests to make to perform upload"];
inline int CCloud_ClientBeginFileUpload_Response::block_requests_size() const {
  return block_requests_.size();
}
inline void CCloud_ClientBeginFileUpload_Response::clear_block_requests() {
  block_requests_.Clear();
}
inline ::proto::steam::ClientCloudFileUploadBlockDetails* CCloud_ClientBeginFileUpload_Response::mutable_block_requests(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CCloud_ClientBeginFileUpload_Response.block_requests)
  return block_requests_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::steam::ClientCloudFileUploadBlockDetails >*
CCloud_ClientBeginFileUpload_Response::mutable_block_requests() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CCloud_ClientBeginFileUpload_Response.block_requests)
  return &block_requests_;
}
inline const ::proto::steam::ClientCloudFileUploadBlockDetails& CCloud_ClientBeginFileUpload_Response::block_requests(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientBeginFileUpload_Response.block_requests)
  return block_requests_.Get(index);
}
inline ::proto::steam::ClientCloudFileUploadBlockDetails* CCloud_ClientBeginFileUpload_Response::add_block_requests() {
  // @@protoc_insertion_point(field_add:proto.steam.CCloud_ClientBeginFileUpload_Response.block_requests)
  return block_requests_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::steam::ClientCloudFileUploadBlockDetails >&
CCloud_ClientBeginFileUpload_Response::block_requests() const {
  // @@protoc_insertion_point(field_list:proto.steam.CCloud_ClientBeginFileUpload_Response.block_requests)
  return block_requests_;
}

// -------------------------------------------------------------------

// CCloud_ClientCommitFileUpload_Request

// optional bool transfer_succeeded = 1 [(.proto.steam.description) = "True if all block uploads succeeded, false if any of them failed."];
inline bool CCloud_ClientCommitFileUpload_Request::has_transfer_succeeded() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CCloud_ClientCommitFileUpload_Request::clear_transfer_succeeded() {
  transfer_succeeded_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CCloud_ClientCommitFileUpload_Request::transfer_succeeded() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientCommitFileUpload_Request.transfer_succeeded)
  return transfer_succeeded_;
}
inline void CCloud_ClientCommitFileUpload_Request::set_transfer_succeeded(bool value) {
  _has_bits_[0] |= 0x00000004u;
  transfer_succeeded_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ClientCommitFileUpload_Request.transfer_succeeded)
}

// optional uint32 appid = 2 [(.proto.steam.description) = "App ID for which the file is being uploaded. Must match the app ID provided to Cloud.BeginFileUpload."];
inline bool CCloud_ClientCommitFileUpload_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CCloud_ClientCommitFileUpload_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CCloud_ClientCommitFileUpload_Request::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientCommitFileUpload_Request.appid)
  return appid_;
}
inline void CCloud_ClientCommitFileUpload_Request::set_appid(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ClientCommitFileUpload_Request.appid)
}

// optional bytes file_sha = 3 [(.proto.steam.description) = "SHA1 digest of the raw file. Must match the SHA1 digest provided to Cloud.BeginFileUpload."];
inline bool CCloud_ClientCommitFileUpload_Request::has_file_sha() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CCloud_ClientCommitFileUpload_Request::clear_file_sha() {
  file_sha_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CCloud_ClientCommitFileUpload_Request::file_sha() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientCommitFileUpload_Request.file_sha)
  return file_sha_.GetNoArena();
}
inline void CCloud_ClientCommitFileUpload_Request::set_file_sha(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  file_sha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ClientCommitFileUpload_Request.file_sha)
}
#if LANG_CXX11
inline void CCloud_ClientCommitFileUpload_Request::set_file_sha(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  file_sha_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CCloud_ClientCommitFileUpload_Request.file_sha)
}
#endif
inline void CCloud_ClientCommitFileUpload_Request::set_file_sha(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  file_sha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CCloud_ClientCommitFileUpload_Request.file_sha)
}
inline void CCloud_ClientCommitFileUpload_Request::set_file_sha(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  file_sha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCloud_ClientCommitFileUpload_Request.file_sha)
}
inline ::std::string* CCloud_ClientCommitFileUpload_Request::mutable_file_sha() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CCloud_ClientCommitFileUpload_Request.file_sha)
  return file_sha_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CCloud_ClientCommitFileUpload_Request::release_file_sha() {
  // @@protoc_insertion_point(field_release:proto.steam.CCloud_ClientCommitFileUpload_Request.file_sha)
  if (!has_file_sha()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return file_sha_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CCloud_ClientCommitFileUpload_Request::set_allocated_file_sha(::std::string* file_sha) {
  if (file_sha != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  file_sha_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_sha);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CCloud_ClientCommitFileUpload_Request.file_sha)
}

// optional string filename = 4 [(.proto.steam.description) = "Filename as specified in the Cloud.BeginFileUpload request."];
inline bool CCloud_ClientCommitFileUpload_Request::has_filename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CCloud_ClientCommitFileUpload_Request::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CCloud_ClientCommitFileUpload_Request::filename() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientCommitFileUpload_Request.filename)
  return filename_.GetNoArena();
}
inline void CCloud_ClientCommitFileUpload_Request::set_filename(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ClientCommitFileUpload_Request.filename)
}
#if LANG_CXX11
inline void CCloud_ClientCommitFileUpload_Request::set_filename(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CCloud_ClientCommitFileUpload_Request.filename)
}
#endif
inline void CCloud_ClientCommitFileUpload_Request::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CCloud_ClientCommitFileUpload_Request.filename)
}
inline void CCloud_ClientCommitFileUpload_Request::set_filename(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCloud_ClientCommitFileUpload_Request.filename)
}
inline ::std::string* CCloud_ClientCommitFileUpload_Request::mutable_filename() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CCloud_ClientCommitFileUpload_Request.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CCloud_ClientCommitFileUpload_Request::release_filename() {
  // @@protoc_insertion_point(field_release:proto.steam.CCloud_ClientCommitFileUpload_Request.filename)
  if (!has_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return filename_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CCloud_ClientCommitFileUpload_Request::set_allocated_filename(::std::string* filename) {
  if (filename != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CCloud_ClientCommitFileUpload_Request.filename)
}

// -------------------------------------------------------------------

// CCloud_ClientCommitFileUpload_Response

// optional bool file_committed = 1 [(.proto.steam.description) = "True if the file was successfully committed, false otherwise."];
inline bool CCloud_ClientCommitFileUpload_Response::has_file_committed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CCloud_ClientCommitFileUpload_Response::clear_file_committed() {
  file_committed_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CCloud_ClientCommitFileUpload_Response::file_committed() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientCommitFileUpload_Response.file_committed)
  return file_committed_;
}
inline void CCloud_ClientCommitFileUpload_Response::set_file_committed(bool value) {
  _has_bits_[0] |= 0x00000001u;
  file_committed_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ClientCommitFileUpload_Response.file_committed)
}

// -------------------------------------------------------------------

// CCloud_ClientFileDownload_Request

// optional uint32 appid = 1 [(.proto.steam.description) = "App ID the file is part of."];
inline bool CCloud_ClientFileDownload_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CCloud_ClientFileDownload_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CCloud_ClientFileDownload_Request::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientFileDownload_Request.appid)
  return appid_;
}
inline void CCloud_ClientFileDownload_Request::set_appid(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ClientFileDownload_Request.appid)
}

// optional string filename = 2 [(.proto.steam.description) = "Filename of the file."];
inline bool CCloud_ClientFileDownload_Request::has_filename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CCloud_ClientFileDownload_Request::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CCloud_ClientFileDownload_Request::filename() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientFileDownload_Request.filename)
  return filename_.GetNoArena();
}
inline void CCloud_ClientFileDownload_Request::set_filename(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ClientFileDownload_Request.filename)
}
#if LANG_CXX11
inline void CCloud_ClientFileDownload_Request::set_filename(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CCloud_ClientFileDownload_Request.filename)
}
#endif
inline void CCloud_ClientFileDownload_Request::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CCloud_ClientFileDownload_Request.filename)
}
inline void CCloud_ClientFileDownload_Request::set_filename(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCloud_ClientFileDownload_Request.filename)
}
inline ::std::string* CCloud_ClientFileDownload_Request::mutable_filename() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CCloud_ClientFileDownload_Request.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CCloud_ClientFileDownload_Request::release_filename() {
  // @@protoc_insertion_point(field_release:proto.steam.CCloud_ClientFileDownload_Request.filename)
  if (!has_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return filename_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CCloud_ClientFileDownload_Request::set_allocated_filename(::std::string* filename) {
  if (filename != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CCloud_ClientFileDownload_Request.filename)
}

// -------------------------------------------------------------------

// CCloud_ClientFileDownload_Response_HTTPHeaders

// optional string name = 1;
inline bool CCloud_ClientFileDownload_Response_HTTPHeaders::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CCloud_ClientFileDownload_Response_HTTPHeaders::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CCloud_ClientFileDownload_Response_HTTPHeaders::name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders.name)
  return name_.GetNoArena();
}
inline void CCloud_ClientFileDownload_Response_HTTPHeaders::set_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders.name)
}
#if LANG_CXX11
inline void CCloud_ClientFileDownload_Response_HTTPHeaders::set_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders.name)
}
#endif
inline void CCloud_ClientFileDownload_Response_HTTPHeaders::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders.name)
}
inline void CCloud_ClientFileDownload_Response_HTTPHeaders::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders.name)
}
inline ::std::string* CCloud_ClientFileDownload_Response_HTTPHeaders::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CCloud_ClientFileDownload_Response_HTTPHeaders::release_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CCloud_ClientFileDownload_Response_HTTPHeaders::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders.name)
}

// optional string value = 2;
inline bool CCloud_ClientFileDownload_Response_HTTPHeaders::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CCloud_ClientFileDownload_Response_HTTPHeaders::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CCloud_ClientFileDownload_Response_HTTPHeaders::value() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders.value)
  return value_.GetNoArena();
}
inline void CCloud_ClientFileDownload_Response_HTTPHeaders::set_value(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders.value)
}
#if LANG_CXX11
inline void CCloud_ClientFileDownload_Response_HTTPHeaders::set_value(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders.value)
}
#endif
inline void CCloud_ClientFileDownload_Response_HTTPHeaders::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders.value)
}
inline void CCloud_ClientFileDownload_Response_HTTPHeaders::set_value(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders.value)
}
inline ::std::string* CCloud_ClientFileDownload_Response_HTTPHeaders::mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CCloud_ClientFileDownload_Response_HTTPHeaders::release_value() {
  // @@protoc_insertion_point(field_release:proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders.value)
  if (!has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return value_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CCloud_ClientFileDownload_Response_HTTPHeaders::set_allocated_value(::std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders.value)
}

// -------------------------------------------------------------------

// CCloud_ClientFileDownload_Response

// optional uint32 appid = 1 [(.proto.steam.description) = "Application the file belongs to"];
inline bool CCloud_ClientFileDownload_Response::has_appid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CCloud_ClientFileDownload_Response::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CCloud_ClientFileDownload_Response::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientFileDownload_Response.appid)
  return appid_;
}
inline void CCloud_ClientFileDownload_Response::set_appid(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ClientFileDownload_Response.appid)
}

// optional uint32 file_size = 2 [(.proto.steam.description) = "file size as transmitted and stored in the Cloud"];
inline bool CCloud_ClientFileDownload_Response::has_file_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CCloud_ClientFileDownload_Response::clear_file_size() {
  file_size_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CCloud_ClientFileDownload_Response::file_size() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientFileDownload_Response.file_size)
  return file_size_;
}
inline void CCloud_ClientFileDownload_Response::set_file_size(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  file_size_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ClientFileDownload_Response.file_size)
}

// optional uint32 raw_file_size = 3 [(.proto.steam.description) = "file size when decompressed and/or decrypted"];
inline bool CCloud_ClientFileDownload_Response::has_raw_file_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CCloud_ClientFileDownload_Response::clear_raw_file_size() {
  raw_file_size_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint32 CCloud_ClientFileDownload_Response::raw_file_size() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientFileDownload_Response.raw_file_size)
  return raw_file_size_;
}
inline void CCloud_ClientFileDownload_Response::set_raw_file_size(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  raw_file_size_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ClientFileDownload_Response.raw_file_size)
}

// optional bytes sha_file = 4 [(.proto.steam.description) = "SHA of file"];
inline bool CCloud_ClientFileDownload_Response::has_sha_file() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CCloud_ClientFileDownload_Response::clear_sha_file() {
  sha_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CCloud_ClientFileDownload_Response::sha_file() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientFileDownload_Response.sha_file)
  return sha_file_.GetNoArena();
}
inline void CCloud_ClientFileDownload_Response::set_sha_file(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sha_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ClientFileDownload_Response.sha_file)
}
#if LANG_CXX11
inline void CCloud_ClientFileDownload_Response::set_sha_file(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  sha_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CCloud_ClientFileDownload_Response.sha_file)
}
#endif
inline void CCloud_ClientFileDownload_Response::set_sha_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  sha_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CCloud_ClientFileDownload_Response.sha_file)
}
inline void CCloud_ClientFileDownload_Response::set_sha_file(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  sha_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCloud_ClientFileDownload_Response.sha_file)
}
inline ::std::string* CCloud_ClientFileDownload_Response::mutable_sha_file() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CCloud_ClientFileDownload_Response.sha_file)
  return sha_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CCloud_ClientFileDownload_Response::release_sha_file() {
  // @@protoc_insertion_point(field_release:proto.steam.CCloud_ClientFileDownload_Response.sha_file)
  if (!has_sha_file()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return sha_file_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CCloud_ClientFileDownload_Response::set_allocated_sha_file(::std::string* sha_file) {
  if (sha_file != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sha_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sha_file);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CCloud_ClientFileDownload_Response.sha_file)
}

// optional uint64 time_stamp = 5 [(.proto.steam.description) = "Timestamp of file"];
inline bool CCloud_ClientFileDownload_Response::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CCloud_ClientFileDownload_Response::clear_time_stamp() {
  time_stamp_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint64 CCloud_ClientFileDownload_Response::time_stamp() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientFileDownload_Response.time_stamp)
  return time_stamp_;
}
inline void CCloud_ClientFileDownload_Response::set_time_stamp(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ClientFileDownload_Response.time_stamp)
}

// optional bool is_explicit_delete = 6 [(.proto.steam.description) = "True if this is an explicitly deleted file"];
inline bool CCloud_ClientFileDownload_Response::has_is_explicit_delete() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CCloud_ClientFileDownload_Response::clear_is_explicit_delete() {
  is_explicit_delete_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CCloud_ClientFileDownload_Response::is_explicit_delete() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientFileDownload_Response.is_explicit_delete)
  return is_explicit_delete_;
}
inline void CCloud_ClientFileDownload_Response::set_is_explicit_delete(bool value) {
  _has_bits_[0] |= 0x00000080u;
  is_explicit_delete_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ClientFileDownload_Response.is_explicit_delete)
}

// optional string url_host = 7 [(.proto.steam.description) = "Host to GET the file from"];
inline bool CCloud_ClientFileDownload_Response::has_url_host() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CCloud_ClientFileDownload_Response::clear_url_host() {
  url_host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CCloud_ClientFileDownload_Response::url_host() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientFileDownload_Response.url_host)
  return url_host_.GetNoArena();
}
inline void CCloud_ClientFileDownload_Response::set_url_host(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  url_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ClientFileDownload_Response.url_host)
}
#if LANG_CXX11
inline void CCloud_ClientFileDownload_Response::set_url_host(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  url_host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CCloud_ClientFileDownload_Response.url_host)
}
#endif
inline void CCloud_ClientFileDownload_Response::set_url_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  url_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CCloud_ClientFileDownload_Response.url_host)
}
inline void CCloud_ClientFileDownload_Response::set_url_host(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  url_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCloud_ClientFileDownload_Response.url_host)
}
inline ::std::string* CCloud_ClientFileDownload_Response::mutable_url_host() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CCloud_ClientFileDownload_Response.url_host)
  return url_host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CCloud_ClientFileDownload_Response::release_url_host() {
  // @@protoc_insertion_point(field_release:proto.steam.CCloud_ClientFileDownload_Response.url_host)
  if (!has_url_host()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return url_host_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CCloud_ClientFileDownload_Response::set_allocated_url_host(::std::string* url_host) {
  if (url_host != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  url_host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url_host);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CCloud_ClientFileDownload_Response.url_host)
}

// optional string url_path = 8 [(.proto.steam.description) = "Path on that host to use, including URL parameters if any"];
inline bool CCloud_ClientFileDownload_Response::has_url_path() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CCloud_ClientFileDownload_Response::clear_url_path() {
  url_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& CCloud_ClientFileDownload_Response::url_path() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientFileDownload_Response.url_path)
  return url_path_.GetNoArena();
}
inline void CCloud_ClientFileDownload_Response::set_url_path(const ::std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  url_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ClientFileDownload_Response.url_path)
}
#if LANG_CXX11
inline void CCloud_ClientFileDownload_Response::set_url_path(::std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  url_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CCloud_ClientFileDownload_Response.url_path)
}
#endif
inline void CCloud_ClientFileDownload_Response::set_url_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  url_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CCloud_ClientFileDownload_Response.url_path)
}
inline void CCloud_ClientFileDownload_Response::set_url_path(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  url_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCloud_ClientFileDownload_Response.url_path)
}
inline ::std::string* CCloud_ClientFileDownload_Response::mutable_url_path() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CCloud_ClientFileDownload_Response.url_path)
  return url_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CCloud_ClientFileDownload_Response::release_url_path() {
  // @@protoc_insertion_point(field_release:proto.steam.CCloud_ClientFileDownload_Response.url_path)
  if (!has_url_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return url_path_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CCloud_ClientFileDownload_Response::set_allocated_url_path(::std::string* url_path) {
  if (url_path != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  url_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url_path);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CCloud_ClientFileDownload_Response.url_path)
}

// optional bool use_https = 9 [(.proto.steam.description) = "If set, use HTTPS, else use HTTP"];
inline bool CCloud_ClientFileDownload_Response::has_use_https() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CCloud_ClientFileDownload_Response::clear_use_https() {
  use_https_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool CCloud_ClientFileDownload_Response::use_https() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientFileDownload_Response.use_https)
  return use_https_;
}
inline void CCloud_ClientFileDownload_Response::set_use_https(bool value) {
  _has_bits_[0] |= 0x00000100u;
  use_https_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ClientFileDownload_Response.use_https)
}

// repeated .proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders request_headers = 10 [(.proto.steam.description) = "Name-value pairs to be sent in HTTP GET request."];
inline int CCloud_ClientFileDownload_Response::request_headers_size() const {
  return request_headers_.size();
}
inline void CCloud_ClientFileDownload_Response::clear_request_headers() {
  request_headers_.Clear();
}
inline ::proto::steam::CCloud_ClientFileDownload_Response_HTTPHeaders* CCloud_ClientFileDownload_Response::mutable_request_headers(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CCloud_ClientFileDownload_Response.request_headers)
  return request_headers_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::steam::CCloud_ClientFileDownload_Response_HTTPHeaders >*
CCloud_ClientFileDownload_Response::mutable_request_headers() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CCloud_ClientFileDownload_Response.request_headers)
  return &request_headers_;
}
inline const ::proto::steam::CCloud_ClientFileDownload_Response_HTTPHeaders& CCloud_ClientFileDownload_Response::request_headers(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientFileDownload_Response.request_headers)
  return request_headers_.Get(index);
}
inline ::proto::steam::CCloud_ClientFileDownload_Response_HTTPHeaders* CCloud_ClientFileDownload_Response::add_request_headers() {
  // @@protoc_insertion_point(field_add:proto.steam.CCloud_ClientFileDownload_Response.request_headers)
  return request_headers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::steam::CCloud_ClientFileDownload_Response_HTTPHeaders >&
CCloud_ClientFileDownload_Response::request_headers() const {
  // @@protoc_insertion_point(field_list:proto.steam.CCloud_ClientFileDownload_Response.request_headers)
  return request_headers_;
}

// optional bool encrypted = 11;
inline bool CCloud_ClientFileDownload_Response::has_encrypted() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CCloud_ClientFileDownload_Response::clear_encrypted() {
  encrypted_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool CCloud_ClientFileDownload_Response::encrypted() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientFileDownload_Response.encrypted)
  return encrypted_;
}
inline void CCloud_ClientFileDownload_Response::set_encrypted(bool value) {
  _has_bits_[0] |= 0x00000200u;
  encrypted_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ClientFileDownload_Response.encrypted)
}

// -------------------------------------------------------------------

// CCloud_ClientDeleteFile_Request

// optional uint32 appid = 1 [(.proto.steam.description) = "App ID for which the file is being deleted."];
inline bool CCloud_ClientDeleteFile_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CCloud_ClientDeleteFile_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CCloud_ClientDeleteFile_Request::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientDeleteFile_Request.appid)
  return appid_;
}
inline void CCloud_ClientDeleteFile_Request::set_appid(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ClientDeleteFile_Request.appid)
}

// optional string filename = 2 [(.proto.steam.description) = "Filename of file."];
inline bool CCloud_ClientDeleteFile_Request::has_filename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CCloud_ClientDeleteFile_Request::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CCloud_ClientDeleteFile_Request::filename() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientDeleteFile_Request.filename)
  return filename_.GetNoArena();
}
inline void CCloud_ClientDeleteFile_Request::set_filename(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ClientDeleteFile_Request.filename)
}
#if LANG_CXX11
inline void CCloud_ClientDeleteFile_Request::set_filename(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CCloud_ClientDeleteFile_Request.filename)
}
#endif
inline void CCloud_ClientDeleteFile_Request::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CCloud_ClientDeleteFile_Request.filename)
}
inline void CCloud_ClientDeleteFile_Request::set_filename(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCloud_ClientDeleteFile_Request.filename)
}
inline ::std::string* CCloud_ClientDeleteFile_Request::mutable_filename() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CCloud_ClientDeleteFile_Request.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CCloud_ClientDeleteFile_Request::release_filename() {
  // @@protoc_insertion_point(field_release:proto.steam.CCloud_ClientDeleteFile_Request.filename)
  if (!has_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return filename_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CCloud_ClientDeleteFile_Request::set_allocated_filename(::std::string* filename) {
  if (filename != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CCloud_ClientDeleteFile_Request.filename)
}

// optional bool is_explicit_delete = 3 [(.proto.steam.description) = "If true, this is a \'delete\'; if false, it is a \'forget\'"];
inline bool CCloud_ClientDeleteFile_Request::has_is_explicit_delete() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CCloud_ClientDeleteFile_Request::clear_is_explicit_delete() {
  is_explicit_delete_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CCloud_ClientDeleteFile_Request::is_explicit_delete() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientDeleteFile_Request.is_explicit_delete)
  return is_explicit_delete_;
}
inline void CCloud_ClientDeleteFile_Request::set_is_explicit_delete(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_explicit_delete_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ClientDeleteFile_Request.is_explicit_delete)
}

// -------------------------------------------------------------------

// CCloud_ClientDeleteFile_Response

// -------------------------------------------------------------------

// CCloud_ClientConflictResolution_Notification

// optional uint32 appid = 1 [(.proto.steam.description) = "App ID for which the conflict was resolved."];
inline bool CCloud_ClientConflictResolution_Notification::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CCloud_ClientConflictResolution_Notification::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CCloud_ClientConflictResolution_Notification::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientConflictResolution_Notification.appid)
  return appid_;
}
inline void CCloud_ClientConflictResolution_Notification::set_appid(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ClientConflictResolution_Notification.appid)
}

// optional bool chose_local_files = 2 [(.proto.steam.description) = "Did the user choose to keep the files local to the machine they are on right now?"];
inline bool CCloud_ClientConflictResolution_Notification::has_chose_local_files() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CCloud_ClientConflictResolution_Notification::clear_chose_local_files() {
  chose_local_files_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CCloud_ClientConflictResolution_Notification::chose_local_files() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientConflictResolution_Notification.chose_local_files)
  return chose_local_files_;
}
inline void CCloud_ClientConflictResolution_Notification::set_chose_local_files(bool value) {
  _has_bits_[0] |= 0x00000002u;
  chose_local_files_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ClientConflictResolution_Notification.chose_local_files)
}

// -------------------------------------------------------------------

// CCloud_EnumerateUserApps_Request

// -------------------------------------------------------------------

// CCloud_EnumerateUserApps_Response_Apps

// optional uint32 appid = 1;
inline bool CCloud_EnumerateUserApps_Response_Apps::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CCloud_EnumerateUserApps_Response_Apps::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CCloud_EnumerateUserApps_Response_Apps::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_EnumerateUserApps_Response.Apps.appid)
  return appid_;
}
inline void CCloud_EnumerateUserApps_Response_Apps::set_appid(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_EnumerateUserApps_Response.Apps.appid)
}

// optional int32 totalcount = 2;
inline bool CCloud_EnumerateUserApps_Response_Apps::has_totalcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CCloud_EnumerateUserApps_Response_Apps::clear_totalcount() {
  totalcount_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::int32 CCloud_EnumerateUserApps_Response_Apps::totalcount() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_EnumerateUserApps_Response.Apps.totalcount)
  return totalcount_;
}
inline void CCloud_EnumerateUserApps_Response_Apps::set_totalcount(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  totalcount_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_EnumerateUserApps_Response.Apps.totalcount)
}

// optional int64 totalsize = 3;
inline bool CCloud_EnumerateUserApps_Response_Apps::has_totalsize() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CCloud_EnumerateUserApps_Response_Apps::clear_totalsize() {
  totalsize_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::int64 CCloud_EnumerateUserApps_Response_Apps::totalsize() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_EnumerateUserApps_Response.Apps.totalsize)
  return totalsize_;
}
inline void CCloud_EnumerateUserApps_Response_Apps::set_totalsize(::google::protobuf::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  totalsize_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_EnumerateUserApps_Response.Apps.totalsize)
}

// -------------------------------------------------------------------

// CCloud_EnumerateUserApps_Response

// repeated .proto.steam.CCloud_EnumerateUserApps_Response.Apps apps = 1;
inline int CCloud_EnumerateUserApps_Response::apps_size() const {
  return apps_.size();
}
inline void CCloud_EnumerateUserApps_Response::clear_apps() {
  apps_.Clear();
}
inline ::proto::steam::CCloud_EnumerateUserApps_Response_Apps* CCloud_EnumerateUserApps_Response::mutable_apps(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CCloud_EnumerateUserApps_Response.apps)
  return apps_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::steam::CCloud_EnumerateUserApps_Response_Apps >*
CCloud_EnumerateUserApps_Response::mutable_apps() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CCloud_EnumerateUserApps_Response.apps)
  return &apps_;
}
inline const ::proto::steam::CCloud_EnumerateUserApps_Response_Apps& CCloud_EnumerateUserApps_Response::apps(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_EnumerateUserApps_Response.apps)
  return apps_.Get(index);
}
inline ::proto::steam::CCloud_EnumerateUserApps_Response_Apps* CCloud_EnumerateUserApps_Response::add_apps() {
  // @@protoc_insertion_point(field_add:proto.steam.CCloud_EnumerateUserApps_Response.apps)
  return apps_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::steam::CCloud_EnumerateUserApps_Response_Apps >&
CCloud_EnumerateUserApps_Response::apps() const {
  // @@protoc_insertion_point(field_list:proto.steam.CCloud_EnumerateUserApps_Response.apps)
  return apps_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace steam
}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_steammessages_5fcloud_2esteamclient_2eproto
