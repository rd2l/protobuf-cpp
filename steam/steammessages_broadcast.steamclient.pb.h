// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_broadcast.steamclient.proto

#ifndef PROTOBUF_INCLUDED_steammessages_5fbroadcast_2esteamclient_2eproto
#define PROTOBUF_INCLUDED_steammessages_5fbroadcast_2esteamclient_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages_unified_base.steamclient.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5fbroadcast_2esteamclient_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[62]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_steammessages_5fbroadcast_2esteamclient_2eproto();
namespace proto {
namespace steam {
class CBroadcast_BeginBroadcastSession_Request;
class CBroadcast_BeginBroadcastSession_RequestDefaultTypeInternal;
extern CBroadcast_BeginBroadcastSession_RequestDefaultTypeInternal _CBroadcast_BeginBroadcastSession_Request_default_instance_;
class CBroadcast_BeginBroadcastSession_Response;
class CBroadcast_BeginBroadcastSession_ResponseDefaultTypeInternal;
extern CBroadcast_BeginBroadcastSession_ResponseDefaultTypeInternal _CBroadcast_BeginBroadcastSession_Response_default_instance_;
class CBroadcast_BroadcastStatus_Notification;
class CBroadcast_BroadcastStatus_NotificationDefaultTypeInternal;
extern CBroadcast_BroadcastStatus_NotificationDefaultTypeInternal _CBroadcast_BroadcastStatus_Notification_default_instance_;
class CBroadcast_BroadcastViewerState_Notification;
class CBroadcast_BroadcastViewerState_NotificationDefaultTypeInternal;
extern CBroadcast_BroadcastViewerState_NotificationDefaultTypeInternal _CBroadcast_BroadcastViewerState_Notification_default_instance_;
class CBroadcast_EndBroadcastSession_Request;
class CBroadcast_EndBroadcastSession_RequestDefaultTypeInternal;
extern CBroadcast_EndBroadcastSession_RequestDefaultTypeInternal _CBroadcast_EndBroadcastSession_Request_default_instance_;
class CBroadcast_EndBroadcastSession_Response;
class CBroadcast_EndBroadcastSession_ResponseDefaultTypeInternal;
extern CBroadcast_EndBroadcastSession_ResponseDefaultTypeInternal _CBroadcast_EndBroadcastSession_Response_default_instance_;
class CBroadcast_GetBroadcastChatInfo_Request;
class CBroadcast_GetBroadcastChatInfo_RequestDefaultTypeInternal;
extern CBroadcast_GetBroadcastChatInfo_RequestDefaultTypeInternal _CBroadcast_GetBroadcastChatInfo_Request_default_instance_;
class CBroadcast_GetBroadcastChatInfo_Response;
class CBroadcast_GetBroadcastChatInfo_ResponseDefaultTypeInternal;
extern CBroadcast_GetBroadcastChatInfo_ResponseDefaultTypeInternal _CBroadcast_GetBroadcastChatInfo_Response_default_instance_;
class CBroadcast_GetBroadcastChatUserNames_Request;
class CBroadcast_GetBroadcastChatUserNames_RequestDefaultTypeInternal;
extern CBroadcast_GetBroadcastChatUserNames_RequestDefaultTypeInternal _CBroadcast_GetBroadcastChatUserNames_Request_default_instance_;
class CBroadcast_GetBroadcastChatUserNames_Response;
class CBroadcast_GetBroadcastChatUserNames_ResponseDefaultTypeInternal;
extern CBroadcast_GetBroadcastChatUserNames_ResponseDefaultTypeInternal _CBroadcast_GetBroadcastChatUserNames_Response_default_instance_;
class CBroadcast_GetBroadcastChatUserNames_Response_PersonaName;
class CBroadcast_GetBroadcastChatUserNames_Response_PersonaNameDefaultTypeInternal;
extern CBroadcast_GetBroadcastChatUserNames_Response_PersonaNameDefaultTypeInternal _CBroadcast_GetBroadcastChatUserNames_Response_PersonaName_default_instance_;
class CBroadcast_GetBroadcastStatus_Request;
class CBroadcast_GetBroadcastStatus_RequestDefaultTypeInternal;
extern CBroadcast_GetBroadcastStatus_RequestDefaultTypeInternal _CBroadcast_GetBroadcastStatus_Request_default_instance_;
class CBroadcast_GetBroadcastStatus_Response;
class CBroadcast_GetBroadcastStatus_ResponseDefaultTypeInternal;
extern CBroadcast_GetBroadcastStatus_ResponseDefaultTypeInternal _CBroadcast_GetBroadcastStatus_Response_default_instance_;
class CBroadcast_GetBroadcastThumbnail_Request;
class CBroadcast_GetBroadcastThumbnail_RequestDefaultTypeInternal;
extern CBroadcast_GetBroadcastThumbnail_RequestDefaultTypeInternal _CBroadcast_GetBroadcastThumbnail_Request_default_instance_;
class CBroadcast_GetBroadcastThumbnail_Response;
class CBroadcast_GetBroadcastThumbnail_ResponseDefaultTypeInternal;
extern CBroadcast_GetBroadcastThumbnail_ResponseDefaultTypeInternal _CBroadcast_GetBroadcastThumbnail_Response_default_instance_;
class CBroadcast_GetRTMPInfo_Request;
class CBroadcast_GetRTMPInfo_RequestDefaultTypeInternal;
extern CBroadcast_GetRTMPInfo_RequestDefaultTypeInternal _CBroadcast_GetRTMPInfo_Request_default_instance_;
class CBroadcast_GetRTMPInfo_Response;
class CBroadcast_GetRTMPInfo_ResponseDefaultTypeInternal;
extern CBroadcast_GetRTMPInfo_ResponseDefaultTypeInternal _CBroadcast_GetRTMPInfo_Response_default_instance_;
class CBroadcast_HeartbeatBroadcast_Notification;
class CBroadcast_HeartbeatBroadcast_NotificationDefaultTypeInternal;
extern CBroadcast_HeartbeatBroadcast_NotificationDefaultTypeInternal _CBroadcast_HeartbeatBroadcast_Notification_default_instance_;
class CBroadcast_InviteToBroadcast_Request;
class CBroadcast_InviteToBroadcast_RequestDefaultTypeInternal;
extern CBroadcast_InviteToBroadcast_RequestDefaultTypeInternal _CBroadcast_InviteToBroadcast_Request_default_instance_;
class CBroadcast_InviteToBroadcast_Response;
class CBroadcast_InviteToBroadcast_ResponseDefaultTypeInternal;
extern CBroadcast_InviteToBroadcast_ResponseDefaultTypeInternal _CBroadcast_InviteToBroadcast_Response_default_instance_;
class CBroadcast_MuteBroadcastChatUser_Request;
class CBroadcast_MuteBroadcastChatUser_RequestDefaultTypeInternal;
extern CBroadcast_MuteBroadcastChatUser_RequestDefaultTypeInternal _CBroadcast_MuteBroadcastChatUser_Request_default_instance_;
class CBroadcast_MuteBroadcastChatUser_Response;
class CBroadcast_MuteBroadcastChatUser_ResponseDefaultTypeInternal;
extern CBroadcast_MuteBroadcastChatUser_ResponseDefaultTypeInternal _CBroadcast_MuteBroadcastChatUser_Response_default_instance_;
class CBroadcast_NotifyBroadcastSessionHeartbeat_Notification;
class CBroadcast_NotifyBroadcastSessionHeartbeat_NotificationDefaultTypeInternal;
extern CBroadcast_NotifyBroadcastSessionHeartbeat_NotificationDefaultTypeInternal _CBroadcast_NotifyBroadcastSessionHeartbeat_Notification_default_instance_;
class CBroadcast_NotifyBroadcastUploadStop_Notification;
class CBroadcast_NotifyBroadcastUploadStop_NotificationDefaultTypeInternal;
extern CBroadcast_NotifyBroadcastUploadStop_NotificationDefaultTypeInternal _CBroadcast_NotifyBroadcastUploadStop_Notification_default_instance_;
class CBroadcast_PostChatMessage_Request;
class CBroadcast_PostChatMessage_RequestDefaultTypeInternal;
extern CBroadcast_PostChatMessage_RequestDefaultTypeInternal _CBroadcast_PostChatMessage_Request_default_instance_;
class CBroadcast_PostChatMessage_Response;
class CBroadcast_PostChatMessage_ResponseDefaultTypeInternal;
extern CBroadcast_PostChatMessage_ResponseDefaultTypeInternal _CBroadcast_PostChatMessage_Response_default_instance_;
class CBroadcast_RemoveUserChatText_Request;
class CBroadcast_RemoveUserChatText_RequestDefaultTypeInternal;
extern CBroadcast_RemoveUserChatText_RequestDefaultTypeInternal _CBroadcast_RemoveUserChatText_Request_default_instance_;
class CBroadcast_RemoveUserChatText_Response;
class CBroadcast_RemoveUserChatText_ResponseDefaultTypeInternal;
extern CBroadcast_RemoveUserChatText_ResponseDefaultTypeInternal _CBroadcast_RemoveUserChatText_Response_default_instance_;
class CBroadcast_SendBroadcastStateToServer_Request;
class CBroadcast_SendBroadcastStateToServer_RequestDefaultTypeInternal;
extern CBroadcast_SendBroadcastStateToServer_RequestDefaultTypeInternal _CBroadcast_SendBroadcastStateToServer_Request_default_instance_;
class CBroadcast_SendBroadcastStateToServer_Response;
class CBroadcast_SendBroadcastStateToServer_ResponseDefaultTypeInternal;
extern CBroadcast_SendBroadcastStateToServer_ResponseDefaultTypeInternal _CBroadcast_SendBroadcastStateToServer_Response_default_instance_;
class CBroadcast_SendThumbnailToRelay_Notification;
class CBroadcast_SendThumbnailToRelay_NotificationDefaultTypeInternal;
extern CBroadcast_SendThumbnailToRelay_NotificationDefaultTypeInternal _CBroadcast_SendThumbnailToRelay_Notification_default_instance_;
class CBroadcast_SessionClosed_Notification;
class CBroadcast_SessionClosed_NotificationDefaultTypeInternal;
extern CBroadcast_SessionClosed_NotificationDefaultTypeInternal _CBroadcast_SessionClosed_Notification_default_instance_;
class CBroadcast_SetRTMPInfo_Request;
class CBroadcast_SetRTMPInfo_RequestDefaultTypeInternal;
extern CBroadcast_SetRTMPInfo_RequestDefaultTypeInternal _CBroadcast_SetRTMPInfo_Request_default_instance_;
class CBroadcast_SetRTMPInfo_Response;
class CBroadcast_SetRTMPInfo_ResponseDefaultTypeInternal;
extern CBroadcast_SetRTMPInfo_ResponseDefaultTypeInternal _CBroadcast_SetRTMPInfo_Response_default_instance_;
class CBroadcast_StartBroadcastUpload_Request;
class CBroadcast_StartBroadcastUpload_RequestDefaultTypeInternal;
extern CBroadcast_StartBroadcastUpload_RequestDefaultTypeInternal _CBroadcast_StartBroadcastUpload_Request_default_instance_;
class CBroadcast_StartBroadcastUpload_Response;
class CBroadcast_StartBroadcastUpload_ResponseDefaultTypeInternal;
extern CBroadcast_StartBroadcastUpload_ResponseDefaultTypeInternal _CBroadcast_StartBroadcastUpload_Response_default_instance_;
class CBroadcast_StopBroadcastUpload_Notification;
class CBroadcast_StopBroadcastUpload_NotificationDefaultTypeInternal;
extern CBroadcast_StopBroadcastUpload_NotificationDefaultTypeInternal _CBroadcast_StopBroadcastUpload_Notification_default_instance_;
class CBroadcast_StopWatchingBroadcast_Notification;
class CBroadcast_StopWatchingBroadcast_NotificationDefaultTypeInternal;
extern CBroadcast_StopWatchingBroadcast_NotificationDefaultTypeInternal _CBroadcast_StopWatchingBroadcast_Notification_default_instance_;
class CBroadcast_ViewerBroadcastInvite_Notification;
class CBroadcast_ViewerBroadcastInvite_NotificationDefaultTypeInternal;
extern CBroadcast_ViewerBroadcastInvite_NotificationDefaultTypeInternal _CBroadcast_ViewerBroadcastInvite_Notification_default_instance_;
class CBroadcast_WaitingBroadcastViewer_Notification;
class CBroadcast_WaitingBroadcastViewer_NotificationDefaultTypeInternal;
extern CBroadcast_WaitingBroadcastViewer_NotificationDefaultTypeInternal _CBroadcast_WaitingBroadcastViewer_Notification_default_instance_;
class CBroadcast_WatchBroadcast_Request;
class CBroadcast_WatchBroadcast_RequestDefaultTypeInternal;
extern CBroadcast_WatchBroadcast_RequestDefaultTypeInternal _CBroadcast_WatchBroadcast_Request_default_instance_;
class CBroadcast_WatchBroadcast_Response;
class CBroadcast_WatchBroadcast_ResponseDefaultTypeInternal;
extern CBroadcast_WatchBroadcast_ResponseDefaultTypeInternal _CBroadcast_WatchBroadcast_Response_default_instance_;
class CBroadcast_WebRTCAddHostCandidate_Request;
class CBroadcast_WebRTCAddHostCandidate_RequestDefaultTypeInternal;
extern CBroadcast_WebRTCAddHostCandidate_RequestDefaultTypeInternal _CBroadcast_WebRTCAddHostCandidate_Request_default_instance_;
class CBroadcast_WebRTCAddHostCandidate_Response;
class CBroadcast_WebRTCAddHostCandidate_ResponseDefaultTypeInternal;
extern CBroadcast_WebRTCAddHostCandidate_ResponseDefaultTypeInternal _CBroadcast_WebRTCAddHostCandidate_Response_default_instance_;
class CBroadcast_WebRTCAddViewerCandidate_Notification;
class CBroadcast_WebRTCAddViewerCandidate_NotificationDefaultTypeInternal;
extern CBroadcast_WebRTCAddViewerCandidate_NotificationDefaultTypeInternal _CBroadcast_WebRTCAddViewerCandidate_Notification_default_instance_;
class CBroadcast_WebRTCAddViewerCandidate_Request;
class CBroadcast_WebRTCAddViewerCandidate_RequestDefaultTypeInternal;
extern CBroadcast_WebRTCAddViewerCandidate_RequestDefaultTypeInternal _CBroadcast_WebRTCAddViewerCandidate_Request_default_instance_;
class CBroadcast_WebRTCAddViewerCandidate_Response;
class CBroadcast_WebRTCAddViewerCandidate_ResponseDefaultTypeInternal;
extern CBroadcast_WebRTCAddViewerCandidate_ResponseDefaultTypeInternal _CBroadcast_WebRTCAddViewerCandidate_Response_default_instance_;
class CBroadcast_WebRTCGetHostCandidates_Request;
class CBroadcast_WebRTCGetHostCandidates_RequestDefaultTypeInternal;
extern CBroadcast_WebRTCGetHostCandidates_RequestDefaultTypeInternal _CBroadcast_WebRTCGetHostCandidates_Request_default_instance_;
class CBroadcast_WebRTCGetHostCandidates_Response;
class CBroadcast_WebRTCGetHostCandidates_ResponseDefaultTypeInternal;
extern CBroadcast_WebRTCGetHostCandidates_ResponseDefaultTypeInternal _CBroadcast_WebRTCGetHostCandidates_Response_default_instance_;
class CBroadcast_WebRTCHaveTURNServer_Notification;
class CBroadcast_WebRTCHaveTURNServer_NotificationDefaultTypeInternal;
extern CBroadcast_WebRTCHaveTURNServer_NotificationDefaultTypeInternal _CBroadcast_WebRTCHaveTURNServer_Notification_default_instance_;
class CBroadcast_WebRTCLookupTURNServer_Request;
class CBroadcast_WebRTCLookupTURNServer_RequestDefaultTypeInternal;
extern CBroadcast_WebRTCLookupTURNServer_RequestDefaultTypeInternal _CBroadcast_WebRTCLookupTURNServer_Request_default_instance_;
class CBroadcast_WebRTCLookupTURNServer_Response;
class CBroadcast_WebRTCLookupTURNServer_ResponseDefaultTypeInternal;
extern CBroadcast_WebRTCLookupTURNServer_ResponseDefaultTypeInternal _CBroadcast_WebRTCLookupTURNServer_Response_default_instance_;
class CBroadcast_WebRTCNeedTURNServer_Notification;
class CBroadcast_WebRTCNeedTURNServer_NotificationDefaultTypeInternal;
extern CBroadcast_WebRTCNeedTURNServer_NotificationDefaultTypeInternal _CBroadcast_WebRTCNeedTURNServer_Notification_default_instance_;
class CBroadcast_WebRTCSetAnswer_Notification;
class CBroadcast_WebRTCSetAnswer_NotificationDefaultTypeInternal;
extern CBroadcast_WebRTCSetAnswer_NotificationDefaultTypeInternal _CBroadcast_WebRTCSetAnswer_Notification_default_instance_;
class CBroadcast_WebRTCSetAnswer_Request;
class CBroadcast_WebRTCSetAnswer_RequestDefaultTypeInternal;
extern CBroadcast_WebRTCSetAnswer_RequestDefaultTypeInternal _CBroadcast_WebRTCSetAnswer_Request_default_instance_;
class CBroadcast_WebRTCSetAnswer_Response;
class CBroadcast_WebRTCSetAnswer_ResponseDefaultTypeInternal;
extern CBroadcast_WebRTCSetAnswer_ResponseDefaultTypeInternal _CBroadcast_WebRTCSetAnswer_Response_default_instance_;
class CBroadcast_WebRTCStartResult_Request;
class CBroadcast_WebRTCStartResult_RequestDefaultTypeInternal;
extern CBroadcast_WebRTCStartResult_RequestDefaultTypeInternal _CBroadcast_WebRTCStartResult_Request_default_instance_;
class CBroadcast_WebRTCStartResult_Response;
class CBroadcast_WebRTCStartResult_ResponseDefaultTypeInternal;
extern CBroadcast_WebRTCStartResult_ResponseDefaultTypeInternal _CBroadcast_WebRTCStartResult_Response_default_instance_;
class CBroadcast_WebRTCStart_Notification;
class CBroadcast_WebRTCStart_NotificationDefaultTypeInternal;
extern CBroadcast_WebRTCStart_NotificationDefaultTypeInternal _CBroadcast_WebRTCStart_Notification_default_instance_;
class CBroadcast_WebRTCStopped_Request;
class CBroadcast_WebRTCStopped_RequestDefaultTypeInternal;
extern CBroadcast_WebRTCStopped_RequestDefaultTypeInternal _CBroadcast_WebRTCStopped_Request_default_instance_;
class CBroadcast_WebRTCStopped_Response;
class CBroadcast_WebRTCStopped_ResponseDefaultTypeInternal;
extern CBroadcast_WebRTCStopped_ResponseDefaultTypeInternal _CBroadcast_WebRTCStopped_Response_default_instance_;
class CBroadcast_WebRTC_Candidate;
class CBroadcast_WebRTC_CandidateDefaultTypeInternal;
extern CBroadcast_WebRTC_CandidateDefaultTypeInternal _CBroadcast_WebRTC_Candidate_default_instance_;
}  // namespace steam
}  // namespace proto
namespace google {
namespace protobuf {
template<> ::proto::steam::CBroadcast_BeginBroadcastSession_Request* Arena::CreateMaybeMessage<::proto::steam::CBroadcast_BeginBroadcastSession_Request>(Arena*);
template<> ::proto::steam::CBroadcast_BeginBroadcastSession_Response* Arena::CreateMaybeMessage<::proto::steam::CBroadcast_BeginBroadcastSession_Response>(Arena*);
template<> ::proto::steam::CBroadcast_BroadcastStatus_Notification* Arena::CreateMaybeMessage<::proto::steam::CBroadcast_BroadcastStatus_Notification>(Arena*);
template<> ::proto::steam::CBroadcast_BroadcastViewerState_Notification* Arena::CreateMaybeMessage<::proto::steam::CBroadcast_BroadcastViewerState_Notification>(Arena*);
template<> ::proto::steam::CBroadcast_EndBroadcastSession_Request* Arena::CreateMaybeMessage<::proto::steam::CBroadcast_EndBroadcastSession_Request>(Arena*);
template<> ::proto::steam::CBroadcast_EndBroadcastSession_Response* Arena::CreateMaybeMessage<::proto::steam::CBroadcast_EndBroadcastSession_Response>(Arena*);
template<> ::proto::steam::CBroadcast_GetBroadcastChatInfo_Request* Arena::CreateMaybeMessage<::proto::steam::CBroadcast_GetBroadcastChatInfo_Request>(Arena*);
template<> ::proto::steam::CBroadcast_GetBroadcastChatInfo_Response* Arena::CreateMaybeMessage<::proto::steam::CBroadcast_GetBroadcastChatInfo_Response>(Arena*);
template<> ::proto::steam::CBroadcast_GetBroadcastChatUserNames_Request* Arena::CreateMaybeMessage<::proto::steam::CBroadcast_GetBroadcastChatUserNames_Request>(Arena*);
template<> ::proto::steam::CBroadcast_GetBroadcastChatUserNames_Response* Arena::CreateMaybeMessage<::proto::steam::CBroadcast_GetBroadcastChatUserNames_Response>(Arena*);
template<> ::proto::steam::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName* Arena::CreateMaybeMessage<::proto::steam::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName>(Arena*);
template<> ::proto::steam::CBroadcast_GetBroadcastStatus_Request* Arena::CreateMaybeMessage<::proto::steam::CBroadcast_GetBroadcastStatus_Request>(Arena*);
template<> ::proto::steam::CBroadcast_GetBroadcastStatus_Response* Arena::CreateMaybeMessage<::proto::steam::CBroadcast_GetBroadcastStatus_Response>(Arena*);
template<> ::proto::steam::CBroadcast_GetBroadcastThumbnail_Request* Arena::CreateMaybeMessage<::proto::steam::CBroadcast_GetBroadcastThumbnail_Request>(Arena*);
template<> ::proto::steam::CBroadcast_GetBroadcastThumbnail_Response* Arena::CreateMaybeMessage<::proto::steam::CBroadcast_GetBroadcastThumbnail_Response>(Arena*);
template<> ::proto::steam::CBroadcast_GetRTMPInfo_Request* Arena::CreateMaybeMessage<::proto::steam::CBroadcast_GetRTMPInfo_Request>(Arena*);
template<> ::proto::steam::CBroadcast_GetRTMPInfo_Response* Arena::CreateMaybeMessage<::proto::steam::CBroadcast_GetRTMPInfo_Response>(Arena*);
template<> ::proto::steam::CBroadcast_HeartbeatBroadcast_Notification* Arena::CreateMaybeMessage<::proto::steam::CBroadcast_HeartbeatBroadcast_Notification>(Arena*);
template<> ::proto::steam::CBroadcast_InviteToBroadcast_Request* Arena::CreateMaybeMessage<::proto::steam::CBroadcast_InviteToBroadcast_Request>(Arena*);
template<> ::proto::steam::CBroadcast_InviteToBroadcast_Response* Arena::CreateMaybeMessage<::proto::steam::CBroadcast_InviteToBroadcast_Response>(Arena*);
template<> ::proto::steam::CBroadcast_MuteBroadcastChatUser_Request* Arena::CreateMaybeMessage<::proto::steam::CBroadcast_MuteBroadcastChatUser_Request>(Arena*);
template<> ::proto::steam::CBroadcast_MuteBroadcastChatUser_Response* Arena::CreateMaybeMessage<::proto::steam::CBroadcast_MuteBroadcastChatUser_Response>(Arena*);
template<> ::proto::steam::CBroadcast_NotifyBroadcastSessionHeartbeat_Notification* Arena::CreateMaybeMessage<::proto::steam::CBroadcast_NotifyBroadcastSessionHeartbeat_Notification>(Arena*);
template<> ::proto::steam::CBroadcast_NotifyBroadcastUploadStop_Notification* Arena::CreateMaybeMessage<::proto::steam::CBroadcast_NotifyBroadcastUploadStop_Notification>(Arena*);
template<> ::proto::steam::CBroadcast_PostChatMessage_Request* Arena::CreateMaybeMessage<::proto::steam::CBroadcast_PostChatMessage_Request>(Arena*);
template<> ::proto::steam::CBroadcast_PostChatMessage_Response* Arena::CreateMaybeMessage<::proto::steam::CBroadcast_PostChatMessage_Response>(Arena*);
template<> ::proto::steam::CBroadcast_RemoveUserChatText_Request* Arena::CreateMaybeMessage<::proto::steam::CBroadcast_RemoveUserChatText_Request>(Arena*);
template<> ::proto::steam::CBroadcast_RemoveUserChatText_Response* Arena::CreateMaybeMessage<::proto::steam::CBroadcast_RemoveUserChatText_Response>(Arena*);
template<> ::proto::steam::CBroadcast_SendBroadcastStateToServer_Request* Arena::CreateMaybeMessage<::proto::steam::CBroadcast_SendBroadcastStateToServer_Request>(Arena*);
template<> ::proto::steam::CBroadcast_SendBroadcastStateToServer_Response* Arena::CreateMaybeMessage<::proto::steam::CBroadcast_SendBroadcastStateToServer_Response>(Arena*);
template<> ::proto::steam::CBroadcast_SendThumbnailToRelay_Notification* Arena::CreateMaybeMessage<::proto::steam::CBroadcast_SendThumbnailToRelay_Notification>(Arena*);
template<> ::proto::steam::CBroadcast_SessionClosed_Notification* Arena::CreateMaybeMessage<::proto::steam::CBroadcast_SessionClosed_Notification>(Arena*);
template<> ::proto::steam::CBroadcast_SetRTMPInfo_Request* Arena::CreateMaybeMessage<::proto::steam::CBroadcast_SetRTMPInfo_Request>(Arena*);
template<> ::proto::steam::CBroadcast_SetRTMPInfo_Response* Arena::CreateMaybeMessage<::proto::steam::CBroadcast_SetRTMPInfo_Response>(Arena*);
template<> ::proto::steam::CBroadcast_StartBroadcastUpload_Request* Arena::CreateMaybeMessage<::proto::steam::CBroadcast_StartBroadcastUpload_Request>(Arena*);
template<> ::proto::steam::CBroadcast_StartBroadcastUpload_Response* Arena::CreateMaybeMessage<::proto::steam::CBroadcast_StartBroadcastUpload_Response>(Arena*);
template<> ::proto::steam::CBroadcast_StopBroadcastUpload_Notification* Arena::CreateMaybeMessage<::proto::steam::CBroadcast_StopBroadcastUpload_Notification>(Arena*);
template<> ::proto::steam::CBroadcast_StopWatchingBroadcast_Notification* Arena::CreateMaybeMessage<::proto::steam::CBroadcast_StopWatchingBroadcast_Notification>(Arena*);
template<> ::proto::steam::CBroadcast_ViewerBroadcastInvite_Notification* Arena::CreateMaybeMessage<::proto::steam::CBroadcast_ViewerBroadcastInvite_Notification>(Arena*);
template<> ::proto::steam::CBroadcast_WaitingBroadcastViewer_Notification* Arena::CreateMaybeMessage<::proto::steam::CBroadcast_WaitingBroadcastViewer_Notification>(Arena*);
template<> ::proto::steam::CBroadcast_WatchBroadcast_Request* Arena::CreateMaybeMessage<::proto::steam::CBroadcast_WatchBroadcast_Request>(Arena*);
template<> ::proto::steam::CBroadcast_WatchBroadcast_Response* Arena::CreateMaybeMessage<::proto::steam::CBroadcast_WatchBroadcast_Response>(Arena*);
template<> ::proto::steam::CBroadcast_WebRTCAddHostCandidate_Request* Arena::CreateMaybeMessage<::proto::steam::CBroadcast_WebRTCAddHostCandidate_Request>(Arena*);
template<> ::proto::steam::CBroadcast_WebRTCAddHostCandidate_Response* Arena::CreateMaybeMessage<::proto::steam::CBroadcast_WebRTCAddHostCandidate_Response>(Arena*);
template<> ::proto::steam::CBroadcast_WebRTCAddViewerCandidate_Notification* Arena::CreateMaybeMessage<::proto::steam::CBroadcast_WebRTCAddViewerCandidate_Notification>(Arena*);
template<> ::proto::steam::CBroadcast_WebRTCAddViewerCandidate_Request* Arena::CreateMaybeMessage<::proto::steam::CBroadcast_WebRTCAddViewerCandidate_Request>(Arena*);
template<> ::proto::steam::CBroadcast_WebRTCAddViewerCandidate_Response* Arena::CreateMaybeMessage<::proto::steam::CBroadcast_WebRTCAddViewerCandidate_Response>(Arena*);
template<> ::proto::steam::CBroadcast_WebRTCGetHostCandidates_Request* Arena::CreateMaybeMessage<::proto::steam::CBroadcast_WebRTCGetHostCandidates_Request>(Arena*);
template<> ::proto::steam::CBroadcast_WebRTCGetHostCandidates_Response* Arena::CreateMaybeMessage<::proto::steam::CBroadcast_WebRTCGetHostCandidates_Response>(Arena*);
template<> ::proto::steam::CBroadcast_WebRTCHaveTURNServer_Notification* Arena::CreateMaybeMessage<::proto::steam::CBroadcast_WebRTCHaveTURNServer_Notification>(Arena*);
template<> ::proto::steam::CBroadcast_WebRTCLookupTURNServer_Request* Arena::CreateMaybeMessage<::proto::steam::CBroadcast_WebRTCLookupTURNServer_Request>(Arena*);
template<> ::proto::steam::CBroadcast_WebRTCLookupTURNServer_Response* Arena::CreateMaybeMessage<::proto::steam::CBroadcast_WebRTCLookupTURNServer_Response>(Arena*);
template<> ::proto::steam::CBroadcast_WebRTCNeedTURNServer_Notification* Arena::CreateMaybeMessage<::proto::steam::CBroadcast_WebRTCNeedTURNServer_Notification>(Arena*);
template<> ::proto::steam::CBroadcast_WebRTCSetAnswer_Notification* Arena::CreateMaybeMessage<::proto::steam::CBroadcast_WebRTCSetAnswer_Notification>(Arena*);
template<> ::proto::steam::CBroadcast_WebRTCSetAnswer_Request* Arena::CreateMaybeMessage<::proto::steam::CBroadcast_WebRTCSetAnswer_Request>(Arena*);
template<> ::proto::steam::CBroadcast_WebRTCSetAnswer_Response* Arena::CreateMaybeMessage<::proto::steam::CBroadcast_WebRTCSetAnswer_Response>(Arena*);
template<> ::proto::steam::CBroadcast_WebRTCStartResult_Request* Arena::CreateMaybeMessage<::proto::steam::CBroadcast_WebRTCStartResult_Request>(Arena*);
template<> ::proto::steam::CBroadcast_WebRTCStartResult_Response* Arena::CreateMaybeMessage<::proto::steam::CBroadcast_WebRTCStartResult_Response>(Arena*);
template<> ::proto::steam::CBroadcast_WebRTCStart_Notification* Arena::CreateMaybeMessage<::proto::steam::CBroadcast_WebRTCStart_Notification>(Arena*);
template<> ::proto::steam::CBroadcast_WebRTCStopped_Request* Arena::CreateMaybeMessage<::proto::steam::CBroadcast_WebRTCStopped_Request>(Arena*);
template<> ::proto::steam::CBroadcast_WebRTCStopped_Response* Arena::CreateMaybeMessage<::proto::steam::CBroadcast_WebRTCStopped_Response>(Arena*);
template<> ::proto::steam::CBroadcast_WebRTC_Candidate* Arena::CreateMaybeMessage<::proto::steam::CBroadcast_WebRTC_Candidate>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace proto {
namespace steam {

enum CBroadcast_WatchBroadcast_Response_EWatchResponse {
  CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseReady = 1,
  CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseNotAvailable = 2,
  CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseWaitingForApproval = 3,
  CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseWaitingForStart = 4,
  CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseInvalidSession = 5,
  CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseTooManyBroadcasts = 6,
  CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseWaitingForReconnect = 7,
  CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseSystemNotSupported = 8,
  CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseUserRestricted = 9,
  CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseClientOutOfDate = 10,
  CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponsePoorUploadQuality = 11,
  CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseMissingSubscription = 12
};
bool CBroadcast_WatchBroadcast_Response_EWatchResponse_IsValid(int value);
const CBroadcast_WatchBroadcast_Response_EWatchResponse CBroadcast_WatchBroadcast_Response_EWatchResponse_EWatchResponse_MIN = CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseReady;
const CBroadcast_WatchBroadcast_Response_EWatchResponse CBroadcast_WatchBroadcast_Response_EWatchResponse_EWatchResponse_MAX = CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseMissingSubscription;
const int CBroadcast_WatchBroadcast_Response_EWatchResponse_EWatchResponse_ARRAYSIZE = CBroadcast_WatchBroadcast_Response_EWatchResponse_EWatchResponse_MAX + 1;

const ::google::protobuf::EnumDescriptor* CBroadcast_WatchBroadcast_Response_EWatchResponse_descriptor();
inline const ::std::string& CBroadcast_WatchBroadcast_Response_EWatchResponse_Name(CBroadcast_WatchBroadcast_Response_EWatchResponse value) {
  return ::google::protobuf::internal::NameOfEnum(
    CBroadcast_WatchBroadcast_Response_EWatchResponse_descriptor(), value);
}
inline bool CBroadcast_WatchBroadcast_Response_EWatchResponse_Parse(
    const ::std::string& name, CBroadcast_WatchBroadcast_Response_EWatchResponse* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CBroadcast_WatchBroadcast_Response_EWatchResponse>(
    CBroadcast_WatchBroadcast_Response_EWatchResponse_descriptor(), name, value);
}
enum CBroadcast_BroadcastViewerState_Notification_EViewerState {
  CBroadcast_BroadcastViewerState_Notification_EViewerState_k_EViewerNeedsApproval = 1,
  CBroadcast_BroadcastViewerState_Notification_EViewerState_k_EViewerWatching = 2,
  CBroadcast_BroadcastViewerState_Notification_EViewerState_k_EViewerLeft = 3
};
bool CBroadcast_BroadcastViewerState_Notification_EViewerState_IsValid(int value);
const CBroadcast_BroadcastViewerState_Notification_EViewerState CBroadcast_BroadcastViewerState_Notification_EViewerState_EViewerState_MIN = CBroadcast_BroadcastViewerState_Notification_EViewerState_k_EViewerNeedsApproval;
const CBroadcast_BroadcastViewerState_Notification_EViewerState CBroadcast_BroadcastViewerState_Notification_EViewerState_EViewerState_MAX = CBroadcast_BroadcastViewerState_Notification_EViewerState_k_EViewerLeft;
const int CBroadcast_BroadcastViewerState_Notification_EViewerState_EViewerState_ARRAYSIZE = CBroadcast_BroadcastViewerState_Notification_EViewerState_EViewerState_MAX + 1;

const ::google::protobuf::EnumDescriptor* CBroadcast_BroadcastViewerState_Notification_EViewerState_descriptor();
inline const ::std::string& CBroadcast_BroadcastViewerState_Notification_EViewerState_Name(CBroadcast_BroadcastViewerState_Notification_EViewerState value) {
  return ::google::protobuf::internal::NameOfEnum(
    CBroadcast_BroadcastViewerState_Notification_EViewerState_descriptor(), value);
}
inline bool CBroadcast_BroadcastViewerState_Notification_EViewerState_Parse(
    const ::std::string& name, CBroadcast_BroadcastViewerState_Notification_EViewerState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CBroadcast_BroadcastViewerState_Notification_EViewerState>(
    CBroadcast_BroadcastViewerState_Notification_EViewerState_descriptor(), name, value);
}
enum EBroadcastWatchLocation {
  k_EBroadcastWatchLocation_Invalid = 0,
  k_EBroadcastWatchLocation_SteamTV_Tab = 1,
  k_EBroadcastWatchLocation_SteamTV_WatchParty = 2,
  k_EBroadcastWatchLocation_Chat_Tab = 3,
  k_EBroadcastWatchLocation_Chat_WatchParty = 4,
  k_EBroadcastWatchLocation_CommunityPage = 5,
  k_EBroadcastWatchLocation_StoreAppPage = 6,
  k_EBroadcastWatchLocation_InGame = 7,
  k_EBroadcastWatchLocation_BigPicture = 8,
  k_EBroadcastWatchLocation_SalesPage = 9,
  k_EBroadcastWatchLocation_CuratorPage = 10,
  k_EBroadcastWatchLocation_DeveloperPage = 11,
  k_EBroadcastWatchLocation_Chat_Friends = 12
};
bool EBroadcastWatchLocation_IsValid(int value);
const EBroadcastWatchLocation EBroadcastWatchLocation_MIN = k_EBroadcastWatchLocation_Invalid;
const EBroadcastWatchLocation EBroadcastWatchLocation_MAX = k_EBroadcastWatchLocation_Chat_Friends;
const int EBroadcastWatchLocation_ARRAYSIZE = EBroadcastWatchLocation_MAX + 1;

const ::google::protobuf::EnumDescriptor* EBroadcastWatchLocation_descriptor();
inline const ::std::string& EBroadcastWatchLocation_Name(EBroadcastWatchLocation value) {
  return ::google::protobuf::internal::NameOfEnum(
    EBroadcastWatchLocation_descriptor(), value);
}
inline bool EBroadcastWatchLocation_Parse(
    const ::std::string& name, EBroadcastWatchLocation* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EBroadcastWatchLocation>(
    EBroadcastWatchLocation_descriptor(), name, value);
}
enum EBroadcastChatPermission {
  k_EBroadcastChatPermissionPublic = 0,
  k_EBroadcastChatPermissionOwnsApp = 1
};
bool EBroadcastChatPermission_IsValid(int value);
const EBroadcastChatPermission EBroadcastChatPermission_MIN = k_EBroadcastChatPermissionPublic;
const EBroadcastChatPermission EBroadcastChatPermission_MAX = k_EBroadcastChatPermissionOwnsApp;
const int EBroadcastChatPermission_ARRAYSIZE = EBroadcastChatPermission_MAX + 1;

const ::google::protobuf::EnumDescriptor* EBroadcastChatPermission_descriptor();
inline const ::std::string& EBroadcastChatPermission_Name(EBroadcastChatPermission value) {
  return ::google::protobuf::internal::NameOfEnum(
    EBroadcastChatPermission_descriptor(), value);
}
inline bool EBroadcastChatPermission_Parse(
    const ::std::string& name, EBroadcastChatPermission* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EBroadcastChatPermission>(
    EBroadcastChatPermission_descriptor(), name, value);
}
// ===================================================================

class CBroadcast_BeginBroadcastSession_Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_BeginBroadcastSession_Request) */ {
 public:
  CBroadcast_BeginBroadcastSession_Request();
  virtual ~CBroadcast_BeginBroadcastSession_Request();

  CBroadcast_BeginBroadcastSession_Request(const CBroadcast_BeginBroadcastSession_Request& from);

  inline CBroadcast_BeginBroadcastSession_Request& operator=(const CBroadcast_BeginBroadcastSession_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CBroadcast_BeginBroadcastSession_Request(CBroadcast_BeginBroadcastSession_Request&& from) noexcept
    : CBroadcast_BeginBroadcastSession_Request() {
    *this = ::std::move(from);
  }

  inline CBroadcast_BeginBroadcastSession_Request& operator=(CBroadcast_BeginBroadcastSession_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CBroadcast_BeginBroadcastSession_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBroadcast_BeginBroadcastSession_Request* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_BeginBroadcastSession_Request*>(
               &_CBroadcast_BeginBroadcastSession_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CBroadcast_BeginBroadcastSession_Request* other);
  friend void swap(CBroadcast_BeginBroadcastSession_Request& a, CBroadcast_BeginBroadcastSession_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CBroadcast_BeginBroadcastSession_Request* New() const final {
    return CreateMaybeMessage<CBroadcast_BeginBroadcastSession_Request>(nullptr);
  }

  CBroadcast_BeginBroadcastSession_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CBroadcast_BeginBroadcastSession_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CBroadcast_BeginBroadcastSession_Request& from);
  void MergeFrom(const CBroadcast_BeginBroadcastSession_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_BeginBroadcastSession_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string title = 4;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 4;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // optional uint64 gameid = 2;
  bool has_gameid() const;
  void clear_gameid();
  static const int kGameidFieldNumber = 2;
  ::google::protobuf::uint64 gameid() const;
  void set_gameid(::google::protobuf::uint64 value);

  // optional uint64 client_instance_id = 3;
  bool has_client_instance_id() const;
  void clear_client_instance_id();
  static const int kClientInstanceIdFieldNumber = 3;
  ::google::protobuf::uint64 client_instance_id() const;
  void set_client_instance_id(::google::protobuf::uint64 value);

  // optional int32 permission = 1;
  bool has_permission() const;
  void clear_permission();
  static const int kPermissionFieldNumber = 1;
  ::google::protobuf::int32 permission() const;
  void set_permission(::google::protobuf::int32 value);

  // optional uint32 cellid = 5;
  bool has_cellid() const;
  void clear_cellid();
  static const int kCellidFieldNumber = 5;
  ::google::protobuf::uint32 cellid() const;
  void set_cellid(::google::protobuf::uint32 value);

  // optional uint64 rtmp_token = 6;
  bool has_rtmp_token() const;
  void clear_rtmp_token();
  static const int kRtmpTokenFieldNumber = 6;
  ::google::protobuf::uint64 rtmp_token() const;
  void set_rtmp_token(::google::protobuf::uint64 value);

  // optional bool thumbnail_upload = 7;
  bool has_thumbnail_upload() const;
  void clear_thumbnail_upload();
  static const int kThumbnailUploadFieldNumber = 7;
  bool thumbnail_upload() const;
  void set_thumbnail_upload(bool value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_BeginBroadcastSession_Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::uint64 gameid_;
  ::google::protobuf::uint64 client_instance_id_;
  ::google::protobuf::int32 permission_;
  ::google::protobuf::uint32 cellid_;
  ::google::protobuf::uint64 rtmp_token_;
  bool thumbnail_upload_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_BeginBroadcastSession_Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_BeginBroadcastSession_Response) */ {
 public:
  CBroadcast_BeginBroadcastSession_Response();
  virtual ~CBroadcast_BeginBroadcastSession_Response();

  CBroadcast_BeginBroadcastSession_Response(const CBroadcast_BeginBroadcastSession_Response& from);

  inline CBroadcast_BeginBroadcastSession_Response& operator=(const CBroadcast_BeginBroadcastSession_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CBroadcast_BeginBroadcastSession_Response(CBroadcast_BeginBroadcastSession_Response&& from) noexcept
    : CBroadcast_BeginBroadcastSession_Response() {
    *this = ::std::move(from);
  }

  inline CBroadcast_BeginBroadcastSession_Response& operator=(CBroadcast_BeginBroadcastSession_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CBroadcast_BeginBroadcastSession_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBroadcast_BeginBroadcastSession_Response* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_BeginBroadcastSession_Response*>(
               &_CBroadcast_BeginBroadcastSession_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CBroadcast_BeginBroadcastSession_Response* other);
  friend void swap(CBroadcast_BeginBroadcastSession_Response& a, CBroadcast_BeginBroadcastSession_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CBroadcast_BeginBroadcastSession_Response* New() const final {
    return CreateMaybeMessage<CBroadcast_BeginBroadcastSession_Response>(nullptr);
  }

  CBroadcast_BeginBroadcastSession_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CBroadcast_BeginBroadcastSession_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CBroadcast_BeginBroadcastSession_Response& from);
  void MergeFrom(const CBroadcast_BeginBroadcastSession_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_BeginBroadcastSession_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string thumbnail_upload_address = 2 [(.proto.steam.description) = "Http address to upload the thumbnail data."];
  bool has_thumbnail_upload_address() const;
  void clear_thumbnail_upload_address();
  static const int kThumbnailUploadAddressFieldNumber = 2;
  const ::std::string& thumbnail_upload_address() const;
  void set_thumbnail_upload_address(const ::std::string& value);
  #if LANG_CXX11
  void set_thumbnail_upload_address(::std::string&& value);
  #endif
  void set_thumbnail_upload_address(const char* value);
  void set_thumbnail_upload_address(const char* value, size_t size);
  ::std::string* mutable_thumbnail_upload_address();
  ::std::string* release_thumbnail_upload_address();
  void set_allocated_thumbnail_upload_address(::std::string* thumbnail_upload_address);

  // optional string thumbnail_upload_token = 3 [(.proto.steam.description) = "token to authorize as broadcaster to upload content to the relay."];
  bool has_thumbnail_upload_token() const;
  void clear_thumbnail_upload_token();
  static const int kThumbnailUploadTokenFieldNumber = 3;
  const ::std::string& thumbnail_upload_token() const;
  void set_thumbnail_upload_token(const ::std::string& value);
  #if LANG_CXX11
  void set_thumbnail_upload_token(::std::string&& value);
  #endif
  void set_thumbnail_upload_token(const char* value);
  void set_thumbnail_upload_token(const char* value, size_t size);
  ::std::string* mutable_thumbnail_upload_token();
  ::std::string* release_thumbnail_upload_token();
  void set_allocated_thumbnail_upload_token(::std::string* thumbnail_upload_token);

  // optional fixed64 broadcast_id = 1;
  bool has_broadcast_id() const;
  void clear_broadcast_id();
  static const int kBroadcastIdFieldNumber = 1;
  ::google::protobuf::uint64 broadcast_id() const;
  void set_broadcast_id(::google::protobuf::uint64 value);

  // optional uint32 thumbnail_interval_seconds = 4 [(.proto.steam.description) = "how many seconds between thumbnails"];
  bool has_thumbnail_interval_seconds() const;
  void clear_thumbnail_interval_seconds();
  static const int kThumbnailIntervalSecondsFieldNumber = 4;
  ::google::protobuf::uint32 thumbnail_interval_seconds() const;
  void set_thumbnail_interval_seconds(::google::protobuf::uint32 value);

  // optional uint32 heartbeat_interval_seconds = 5 [(.proto.steam.description) = "how many seconds between session heartbeats"];
  bool has_heartbeat_interval_seconds() const;
  void clear_heartbeat_interval_seconds();
  static const int kHeartbeatIntervalSecondsFieldNumber = 5;
  ::google::protobuf::uint32 heartbeat_interval_seconds() const;
  void set_heartbeat_interval_seconds(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_BeginBroadcastSession_Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr thumbnail_upload_address_;
  ::google::protobuf::internal::ArenaStringPtr thumbnail_upload_token_;
  ::google::protobuf::uint64 broadcast_id_;
  ::google::protobuf::uint32 thumbnail_interval_seconds_;
  ::google::protobuf::uint32 heartbeat_interval_seconds_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_EndBroadcastSession_Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_EndBroadcastSession_Request) */ {
 public:
  CBroadcast_EndBroadcastSession_Request();
  virtual ~CBroadcast_EndBroadcastSession_Request();

  CBroadcast_EndBroadcastSession_Request(const CBroadcast_EndBroadcastSession_Request& from);

  inline CBroadcast_EndBroadcastSession_Request& operator=(const CBroadcast_EndBroadcastSession_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CBroadcast_EndBroadcastSession_Request(CBroadcast_EndBroadcastSession_Request&& from) noexcept
    : CBroadcast_EndBroadcastSession_Request() {
    *this = ::std::move(from);
  }

  inline CBroadcast_EndBroadcastSession_Request& operator=(CBroadcast_EndBroadcastSession_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CBroadcast_EndBroadcastSession_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBroadcast_EndBroadcastSession_Request* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_EndBroadcastSession_Request*>(
               &_CBroadcast_EndBroadcastSession_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CBroadcast_EndBroadcastSession_Request* other);
  friend void swap(CBroadcast_EndBroadcastSession_Request& a, CBroadcast_EndBroadcastSession_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CBroadcast_EndBroadcastSession_Request* New() const final {
    return CreateMaybeMessage<CBroadcast_EndBroadcastSession_Request>(nullptr);
  }

  CBroadcast_EndBroadcastSession_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CBroadcast_EndBroadcastSession_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CBroadcast_EndBroadcastSession_Request& from);
  void MergeFrom(const CBroadcast_EndBroadcastSession_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_EndBroadcastSession_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 broadcast_id = 1;
  bool has_broadcast_id() const;
  void clear_broadcast_id();
  static const int kBroadcastIdFieldNumber = 1;
  ::google::protobuf::uint64 broadcast_id() const;
  void set_broadcast_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_EndBroadcastSession_Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 broadcast_id_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_EndBroadcastSession_Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_EndBroadcastSession_Response) */ {
 public:
  CBroadcast_EndBroadcastSession_Response();
  virtual ~CBroadcast_EndBroadcastSession_Response();

  CBroadcast_EndBroadcastSession_Response(const CBroadcast_EndBroadcastSession_Response& from);

  inline CBroadcast_EndBroadcastSession_Response& operator=(const CBroadcast_EndBroadcastSession_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CBroadcast_EndBroadcastSession_Response(CBroadcast_EndBroadcastSession_Response&& from) noexcept
    : CBroadcast_EndBroadcastSession_Response() {
    *this = ::std::move(from);
  }

  inline CBroadcast_EndBroadcastSession_Response& operator=(CBroadcast_EndBroadcastSession_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CBroadcast_EndBroadcastSession_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBroadcast_EndBroadcastSession_Response* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_EndBroadcastSession_Response*>(
               &_CBroadcast_EndBroadcastSession_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(CBroadcast_EndBroadcastSession_Response* other);
  friend void swap(CBroadcast_EndBroadcastSession_Response& a, CBroadcast_EndBroadcastSession_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CBroadcast_EndBroadcastSession_Response* New() const final {
    return CreateMaybeMessage<CBroadcast_EndBroadcastSession_Response>(nullptr);
  }

  CBroadcast_EndBroadcastSession_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CBroadcast_EndBroadcastSession_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CBroadcast_EndBroadcastSession_Response& from);
  void MergeFrom(const CBroadcast_EndBroadcastSession_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_EndBroadcastSession_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_EndBroadcastSession_Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_StartBroadcastUpload_Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_StartBroadcastUpload_Request) */ {
 public:
  CBroadcast_StartBroadcastUpload_Request();
  virtual ~CBroadcast_StartBroadcastUpload_Request();

  CBroadcast_StartBroadcastUpload_Request(const CBroadcast_StartBroadcastUpload_Request& from);

  inline CBroadcast_StartBroadcastUpload_Request& operator=(const CBroadcast_StartBroadcastUpload_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CBroadcast_StartBroadcastUpload_Request(CBroadcast_StartBroadcastUpload_Request&& from) noexcept
    : CBroadcast_StartBroadcastUpload_Request() {
    *this = ::std::move(from);
  }

  inline CBroadcast_StartBroadcastUpload_Request& operator=(CBroadcast_StartBroadcastUpload_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CBroadcast_StartBroadcastUpload_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBroadcast_StartBroadcastUpload_Request* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_StartBroadcastUpload_Request*>(
               &_CBroadcast_StartBroadcastUpload_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(CBroadcast_StartBroadcastUpload_Request* other);
  friend void swap(CBroadcast_StartBroadcastUpload_Request& a, CBroadcast_StartBroadcastUpload_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CBroadcast_StartBroadcastUpload_Request* New() const final {
    return CreateMaybeMessage<CBroadcast_StartBroadcastUpload_Request>(nullptr);
  }

  CBroadcast_StartBroadcastUpload_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CBroadcast_StartBroadcastUpload_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CBroadcast_StartBroadcastUpload_Request& from);
  void MergeFrom(const CBroadcast_StartBroadcastUpload_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_StartBroadcastUpload_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 broadcast_id = 1;
  bool has_broadcast_id() const;
  void clear_broadcast_id();
  static const int kBroadcastIdFieldNumber = 1;
  ::google::protobuf::uint64 broadcast_id() const;
  void set_broadcast_id(::google::protobuf::uint64 value);

  // optional uint32 cellid = 2;
  bool has_cellid() const;
  void clear_cellid();
  static const int kCellidFieldNumber = 2;
  ::google::protobuf::uint32 cellid() const;
  void set_cellid(::google::protobuf::uint32 value);

  // optional bool as_rtmp = 3;
  bool has_as_rtmp() const;
  void clear_as_rtmp();
  static const int kAsRtmpFieldNumber = 3;
  bool as_rtmp() const;
  void set_as_rtmp(bool value);

  // optional uint64 rtmp_token = 5 [default = 0, (.proto.steam.description) = "Only set during RTMP uploads; secret key from the user."];
  bool has_rtmp_token() const;
  void clear_rtmp_token();
  static const int kRtmpTokenFieldNumber = 5;
  ::google::protobuf::uint64 rtmp_token() const;
  void set_rtmp_token(::google::protobuf::uint64 value);

  // optional uint32 delay_seconds = 4;
  bool has_delay_seconds() const;
  void clear_delay_seconds();
  static const int kDelaySecondsFieldNumber = 4;
  ::google::protobuf::uint32 delay_seconds() const;
  void set_delay_seconds(::google::protobuf::uint32 value);

  // optional uint32 upload_ip_address = 6;
  bool has_upload_ip_address() const;
  void clear_upload_ip_address();
  static const int kUploadIpAddressFieldNumber = 6;
  ::google::protobuf::uint32 upload_ip_address() const;
  void set_upload_ip_address(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_StartBroadcastUpload_Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 broadcast_id_;
  ::google::protobuf::uint32 cellid_;
  bool as_rtmp_;
  ::google::protobuf::uint64 rtmp_token_;
  ::google::protobuf::uint32 delay_seconds_;
  ::google::protobuf::uint32 upload_ip_address_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_StartBroadcastUpload_Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_StartBroadcastUpload_Response) */ {
 public:
  CBroadcast_StartBroadcastUpload_Response();
  virtual ~CBroadcast_StartBroadcastUpload_Response();

  CBroadcast_StartBroadcastUpload_Response(const CBroadcast_StartBroadcastUpload_Response& from);

  inline CBroadcast_StartBroadcastUpload_Response& operator=(const CBroadcast_StartBroadcastUpload_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CBroadcast_StartBroadcastUpload_Response(CBroadcast_StartBroadcastUpload_Response&& from) noexcept
    : CBroadcast_StartBroadcastUpload_Response() {
    *this = ::std::move(from);
  }

  inline CBroadcast_StartBroadcastUpload_Response& operator=(CBroadcast_StartBroadcastUpload_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CBroadcast_StartBroadcastUpload_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBroadcast_StartBroadcastUpload_Response* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_StartBroadcastUpload_Response*>(
               &_CBroadcast_StartBroadcastUpload_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(CBroadcast_StartBroadcastUpload_Response* other);
  friend void swap(CBroadcast_StartBroadcastUpload_Response& a, CBroadcast_StartBroadcastUpload_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CBroadcast_StartBroadcastUpload_Response* New() const final {
    return CreateMaybeMessage<CBroadcast_StartBroadcastUpload_Response>(nullptr);
  }

  CBroadcast_StartBroadcastUpload_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CBroadcast_StartBroadcastUpload_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CBroadcast_StartBroadcastUpload_Response& from);
  void MergeFrom(const CBroadcast_StartBroadcastUpload_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_StartBroadcastUpload_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string upload_token = 1;
  bool has_upload_token() const;
  void clear_upload_token();
  static const int kUploadTokenFieldNumber = 1;
  const ::std::string& upload_token() const;
  void set_upload_token(const ::std::string& value);
  #if LANG_CXX11
  void set_upload_token(::std::string&& value);
  #endif
  void set_upload_token(const char* value);
  void set_upload_token(const char* value, size_t size);
  ::std::string* mutable_upload_token();
  ::std::string* release_upload_token();
  void set_allocated_upload_token(::std::string* upload_token);

  // optional string upload_address = 2;
  bool has_upload_address() const;
  void clear_upload_address();
  static const int kUploadAddressFieldNumber = 2;
  const ::std::string& upload_address() const;
  void set_upload_address(const ::std::string& value);
  #if LANG_CXX11
  void set_upload_address(::std::string&& value);
  #endif
  void set_upload_address(const char* value);
  void set_upload_address(const char* value, size_t size);
  ::std::string* mutable_upload_address();
  ::std::string* release_upload_address();
  void set_allocated_upload_address(::std::string* upload_address);

  // optional string thumbnail_upload_address = 4;
  bool has_thumbnail_upload_address() const;
  void clear_thumbnail_upload_address();
  static const int kThumbnailUploadAddressFieldNumber = 4;
  const ::std::string& thumbnail_upload_address() const;
  void set_thumbnail_upload_address(const ::std::string& value);
  #if LANG_CXX11
  void set_thumbnail_upload_address(::std::string&& value);
  #endif
  void set_thumbnail_upload_address(const char* value);
  void set_thumbnail_upload_address(const char* value, size_t size);
  ::std::string* mutable_thumbnail_upload_address();
  ::std::string* release_thumbnail_upload_address();
  void set_allocated_thumbnail_upload_address(::std::string* thumbnail_upload_address);

  // optional fixed64 upload_relay_id = 3;
  bool has_upload_relay_id() const;
  void clear_upload_relay_id();
  static const int kUploadRelayIdFieldNumber = 3;
  ::google::protobuf::uint64 upload_relay_id() const;
  void set_upload_relay_id(::google::protobuf::uint64 value);

  // optional uint32 thumbnail_interval_seconds = 5;
  bool has_thumbnail_interval_seconds() const;
  void clear_thumbnail_interval_seconds();
  static const int kThumbnailIntervalSecondsFieldNumber = 5;
  ::google::protobuf::uint32 thumbnail_interval_seconds() const;
  void set_thumbnail_interval_seconds(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_StartBroadcastUpload_Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr upload_token_;
  ::google::protobuf::internal::ArenaStringPtr upload_address_;
  ::google::protobuf::internal::ArenaStringPtr thumbnail_upload_address_;
  ::google::protobuf::uint64 upload_relay_id_;
  ::google::protobuf::uint32 thumbnail_interval_seconds_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_NotifyBroadcastUploadStop_Notification final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_NotifyBroadcastUploadStop_Notification) */ {
 public:
  CBroadcast_NotifyBroadcastUploadStop_Notification();
  virtual ~CBroadcast_NotifyBroadcastUploadStop_Notification();

  CBroadcast_NotifyBroadcastUploadStop_Notification(const CBroadcast_NotifyBroadcastUploadStop_Notification& from);

  inline CBroadcast_NotifyBroadcastUploadStop_Notification& operator=(const CBroadcast_NotifyBroadcastUploadStop_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CBroadcast_NotifyBroadcastUploadStop_Notification(CBroadcast_NotifyBroadcastUploadStop_Notification&& from) noexcept
    : CBroadcast_NotifyBroadcastUploadStop_Notification() {
    *this = ::std::move(from);
  }

  inline CBroadcast_NotifyBroadcastUploadStop_Notification& operator=(CBroadcast_NotifyBroadcastUploadStop_Notification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CBroadcast_NotifyBroadcastUploadStop_Notification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBroadcast_NotifyBroadcastUploadStop_Notification* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_NotifyBroadcastUploadStop_Notification*>(
               &_CBroadcast_NotifyBroadcastUploadStop_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(CBroadcast_NotifyBroadcastUploadStop_Notification* other);
  friend void swap(CBroadcast_NotifyBroadcastUploadStop_Notification& a, CBroadcast_NotifyBroadcastUploadStop_Notification& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CBroadcast_NotifyBroadcastUploadStop_Notification* New() const final {
    return CreateMaybeMessage<CBroadcast_NotifyBroadcastUploadStop_Notification>(nullptr);
  }

  CBroadcast_NotifyBroadcastUploadStop_Notification* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CBroadcast_NotifyBroadcastUploadStop_Notification>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CBroadcast_NotifyBroadcastUploadStop_Notification& from);
  void MergeFrom(const CBroadcast_NotifyBroadcastUploadStop_Notification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_NotifyBroadcastUploadStop_Notification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 broadcast_upload_id = 1;
  bool has_broadcast_upload_id() const;
  void clear_broadcast_upload_id();
  static const int kBroadcastUploadIdFieldNumber = 1;
  ::google::protobuf::uint64 broadcast_upload_id() const;
  void set_broadcast_upload_id(::google::protobuf::uint64 value);

  // optional uint32 upload_result = 2;
  bool has_upload_result() const;
  void clear_upload_result();
  static const int kUploadResultFieldNumber = 2;
  ::google::protobuf::uint32 upload_result() const;
  void set_upload_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_NotifyBroadcastUploadStop_Notification)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 broadcast_upload_id_;
  ::google::protobuf::uint32 upload_result_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_WatchBroadcast_Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_WatchBroadcast_Request) */ {
 public:
  CBroadcast_WatchBroadcast_Request();
  virtual ~CBroadcast_WatchBroadcast_Request();

  CBroadcast_WatchBroadcast_Request(const CBroadcast_WatchBroadcast_Request& from);

  inline CBroadcast_WatchBroadcast_Request& operator=(const CBroadcast_WatchBroadcast_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CBroadcast_WatchBroadcast_Request(CBroadcast_WatchBroadcast_Request&& from) noexcept
    : CBroadcast_WatchBroadcast_Request() {
    *this = ::std::move(from);
  }

  inline CBroadcast_WatchBroadcast_Request& operator=(CBroadcast_WatchBroadcast_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CBroadcast_WatchBroadcast_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBroadcast_WatchBroadcast_Request* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_WatchBroadcast_Request*>(
               &_CBroadcast_WatchBroadcast_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(CBroadcast_WatchBroadcast_Request* other);
  friend void swap(CBroadcast_WatchBroadcast_Request& a, CBroadcast_WatchBroadcast_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CBroadcast_WatchBroadcast_Request* New() const final {
    return CreateMaybeMessage<CBroadcast_WatchBroadcast_Request>(nullptr);
  }

  CBroadcast_WatchBroadcast_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CBroadcast_WatchBroadcast_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CBroadcast_WatchBroadcast_Request& from);
  void MergeFrom(const CBroadcast_WatchBroadcast_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_WatchBroadcast_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 steamid = 1 [(.proto.steam.description) = "broadcaster steamID."];
  bool has_steamid() const;
  void clear_steamid();
  static const int kSteamidFieldNumber = 1;
  ::google::protobuf::uint64 steamid() const;
  void set_steamid(::google::protobuf::uint64 value);

  // optional fixed64 existing_broadcast_id = 2 [(.proto.steam.description) = "broadcast session ID (optional, rejoin if specified)."];
  bool has_existing_broadcast_id() const;
  void clear_existing_broadcast_id();
  static const int kExistingBroadcastIdFieldNumber = 2;
  ::google::protobuf::uint64 existing_broadcast_id() const;
  void set_existing_broadcast_id(::google::protobuf::uint64 value);

  // optional fixed64 viewer_token = 3 [(.proto.steam.description) = "viewer token received from last WatchRequest call, from browser storage."];
  bool has_viewer_token() const;
  void clear_viewer_token();
  static const int kViewerTokenFieldNumber = 3;
  ::google::protobuf::uint64 viewer_token() const;
  void set_viewer_token(::google::protobuf::uint64 value);

  // optional uint32 client_ip = 4;
  bool has_client_ip() const;
  void clear_client_ip();
  static const int kClientIpFieldNumber = 4;
  ::google::protobuf::uint32 client_ip() const;
  void set_client_ip(::google::protobuf::uint32 value);

  // optional uint32 client_cell = 5;
  bool has_client_cell() const;
  void clear_client_cell();
  static const int kClientCellFieldNumber = 5;
  ::google::protobuf::uint32 client_cell() const;
  void set_client_cell(::google::protobuf::uint32 value);

  // optional .proto.steam.EBroadcastWatchLocation watch_location = 6 [default = k_EBroadcastWatchLocation_Invalid];
  bool has_watch_location() const;
  void clear_watch_location();
  static const int kWatchLocationFieldNumber = 6;
  ::proto::steam::EBroadcastWatchLocation watch_location() const;
  void set_watch_location(::proto::steam::EBroadcastWatchLocation value);

  // optional bool is_webrtc = 7;
  bool has_is_webrtc() const;
  void clear_is_webrtc();
  static const int kIsWebrtcFieldNumber = 7;
  bool is_webrtc() const;
  void set_is_webrtc(bool value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_WatchBroadcast_Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 steamid_;
  ::google::protobuf::uint64 existing_broadcast_id_;
  ::google::protobuf::uint64 viewer_token_;
  ::google::protobuf::uint32 client_ip_;
  ::google::protobuf::uint32 client_cell_;
  int watch_location_;
  bool is_webrtc_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_WatchBroadcast_Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_WatchBroadcast_Response) */ {
 public:
  CBroadcast_WatchBroadcast_Response();
  virtual ~CBroadcast_WatchBroadcast_Response();

  CBroadcast_WatchBroadcast_Response(const CBroadcast_WatchBroadcast_Response& from);

  inline CBroadcast_WatchBroadcast_Response& operator=(const CBroadcast_WatchBroadcast_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CBroadcast_WatchBroadcast_Response(CBroadcast_WatchBroadcast_Response&& from) noexcept
    : CBroadcast_WatchBroadcast_Response() {
    *this = ::std::move(from);
  }

  inline CBroadcast_WatchBroadcast_Response& operator=(CBroadcast_WatchBroadcast_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CBroadcast_WatchBroadcast_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBroadcast_WatchBroadcast_Response* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_WatchBroadcast_Response*>(
               &_CBroadcast_WatchBroadcast_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(CBroadcast_WatchBroadcast_Response* other);
  friend void swap(CBroadcast_WatchBroadcast_Response& a, CBroadcast_WatchBroadcast_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CBroadcast_WatchBroadcast_Response* New() const final {
    return CreateMaybeMessage<CBroadcast_WatchBroadcast_Response>(nullptr);
  }

  CBroadcast_WatchBroadcast_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CBroadcast_WatchBroadcast_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CBroadcast_WatchBroadcast_Response& from);
  void MergeFrom(const CBroadcast_WatchBroadcast_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_WatchBroadcast_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CBroadcast_WatchBroadcast_Response_EWatchResponse EWatchResponse;
  static const EWatchResponse k_EWatchResponseReady =
    CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseReady;
  static const EWatchResponse k_EWatchResponseNotAvailable =
    CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseNotAvailable;
  static const EWatchResponse k_EWatchResponseWaitingForApproval =
    CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseWaitingForApproval;
  static const EWatchResponse k_EWatchResponseWaitingForStart =
    CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseWaitingForStart;
  static const EWatchResponse k_EWatchResponseInvalidSession =
    CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseInvalidSession;
  static const EWatchResponse k_EWatchResponseTooManyBroadcasts =
    CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseTooManyBroadcasts;
  static const EWatchResponse k_EWatchResponseWaitingForReconnect =
    CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseWaitingForReconnect;
  static const EWatchResponse k_EWatchResponseSystemNotSupported =
    CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseSystemNotSupported;
  static const EWatchResponse k_EWatchResponseUserRestricted =
    CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseUserRestricted;
  static const EWatchResponse k_EWatchResponseClientOutOfDate =
    CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseClientOutOfDate;
  static const EWatchResponse k_EWatchResponsePoorUploadQuality =
    CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponsePoorUploadQuality;
  static const EWatchResponse k_EWatchResponseMissingSubscription =
    CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseMissingSubscription;
  static inline bool EWatchResponse_IsValid(int value) {
    return CBroadcast_WatchBroadcast_Response_EWatchResponse_IsValid(value);
  }
  static const EWatchResponse EWatchResponse_MIN =
    CBroadcast_WatchBroadcast_Response_EWatchResponse_EWatchResponse_MIN;
  static const EWatchResponse EWatchResponse_MAX =
    CBroadcast_WatchBroadcast_Response_EWatchResponse_EWatchResponse_MAX;
  static const int EWatchResponse_ARRAYSIZE =
    CBroadcast_WatchBroadcast_Response_EWatchResponse_EWatchResponse_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EWatchResponse_descriptor() {
    return CBroadcast_WatchBroadcast_Response_EWatchResponse_descriptor();
  }
  static inline const ::std::string& EWatchResponse_Name(EWatchResponse value) {
    return CBroadcast_WatchBroadcast_Response_EWatchResponse_Name(value);
  }
  static inline bool EWatchResponse_Parse(const ::std::string& name,
      EWatchResponse* value) {
    return CBroadcast_WatchBroadcast_Response_EWatchResponse_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string mpd_url = 2;
  bool has_mpd_url() const;
  void clear_mpd_url();
  static const int kMpdUrlFieldNumber = 2;
  const ::std::string& mpd_url() const;
  void set_mpd_url(const ::std::string& value);
  #if LANG_CXX11
  void set_mpd_url(::std::string&& value);
  #endif
  void set_mpd_url(const char* value);
  void set_mpd_url(const char* value, size_t size);
  ::std::string* mutable_mpd_url();
  ::std::string* release_mpd_url();
  void set_allocated_mpd_url(::std::string* mpd_url);

  // optional string title = 5;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 5;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // optional string hls_m3u8_master_url = 11;
  bool has_hls_m3u8_master_url() const;
  void clear_hls_m3u8_master_url();
  static const int kHlsM3U8MasterUrlFieldNumber = 11;
  const ::std::string& hls_m3u8_master_url() const;
  void set_hls_m3u8_master_url(const ::std::string& value);
  #if LANG_CXX11
  void set_hls_m3u8_master_url(::std::string&& value);
  #endif
  void set_hls_m3u8_master_url(const char* value);
  void set_hls_m3u8_master_url(const char* value, size_t size);
  ::std::string* mutable_hls_m3u8_master_url();
  ::std::string* release_hls_m3u8_master_url();
  void set_allocated_hls_m3u8_master_url(::std::string* hls_m3u8_master_url);

  // optional string thumbnail_url = 13;
  bool has_thumbnail_url() const;
  void clear_thumbnail_url();
  static const int kThumbnailUrlFieldNumber = 13;
  const ::std::string& thumbnail_url() const;
  void set_thumbnail_url(const ::std::string& value);
  #if LANG_CXX11
  void set_thumbnail_url(::std::string&& value);
  #endif
  void set_thumbnail_url(const char* value);
  void set_thumbnail_url(const char* value, size_t size);
  ::std::string* mutable_thumbnail_url();
  ::std::string* release_thumbnail_url();
  void set_allocated_thumbnail_url(::std::string* thumbnail_url);

  // optional string webrtc_offer_sdp = 16;
  bool has_webrtc_offer_sdp() const;
  void clear_webrtc_offer_sdp();
  static const int kWebrtcOfferSdpFieldNumber = 16;
  const ::std::string& webrtc_offer_sdp() const;
  void set_webrtc_offer_sdp(const ::std::string& value);
  #if LANG_CXX11
  void set_webrtc_offer_sdp(::std::string&& value);
  #endif
  void set_webrtc_offer_sdp(const char* value);
  void set_webrtc_offer_sdp(const char* value, size_t size);
  ::std::string* mutable_webrtc_offer_sdp();
  ::std::string* release_webrtc_offer_sdp();
  void set_allocated_webrtc_offer_sdp(::std::string* webrtc_offer_sdp);

  // optional string webrtc_turn_server = 17;
  bool has_webrtc_turn_server() const;
  void clear_webrtc_turn_server();
  static const int kWebrtcTurnServerFieldNumber = 17;
  const ::std::string& webrtc_turn_server() const;
  void set_webrtc_turn_server(const ::std::string& value);
  #if LANG_CXX11
  void set_webrtc_turn_server(::std::string&& value);
  #endif
  void set_webrtc_turn_server(const char* value);
  void set_webrtc_turn_server(const char* value, size_t size);
  ::std::string* mutable_webrtc_turn_server();
  ::std::string* release_webrtc_turn_server();
  void set_allocated_webrtc_turn_server(::std::string* webrtc_turn_server);

  // optional fixed64 broadcast_id = 3;
  bool has_broadcast_id() const;
  void clear_broadcast_id();
  static const int kBroadcastIdFieldNumber = 3;
  ::google::protobuf::uint64 broadcast_id() const;
  void set_broadcast_id(::google::protobuf::uint64 value);

  // optional uint64 gameid = 4;
  bool has_gameid() const;
  void clear_gameid();
  static const int kGameidFieldNumber = 4;
  ::google::protobuf::uint64 gameid() const;
  void set_gameid(::google::protobuf::uint64 value);

  // optional uint32 num_viewers = 6;
  bool has_num_viewers() const;
  void clear_num_viewers();
  static const int kNumViewersFieldNumber = 6;
  ::google::protobuf::uint32 num_viewers() const;
  void set_num_viewers(::google::protobuf::uint32 value);

  // optional int32 permission = 7;
  bool has_permission() const;
  void clear_permission();
  static const int kPermissionFieldNumber = 7;
  ::google::protobuf::int32 permission() const;
  void set_permission(::google::protobuf::int32 value);

  // optional fixed64 viewer_token = 10;
  bool has_viewer_token() const;
  void clear_viewer_token();
  static const int kViewerTokenFieldNumber = 10;
  ::google::protobuf::uint64 viewer_token() const;
  void set_viewer_token(::google::protobuf::uint64 value);

  // optional int32 seconds_delay = 9;
  bool has_seconds_delay() const;
  void clear_seconds_delay();
  static const int kSecondsDelayFieldNumber = 9;
  ::google::protobuf::int32 seconds_delay() const;
  void set_seconds_delay(::google::protobuf::int32 value);

  // optional bool is_rtmp = 8;
  bool has_is_rtmp() const;
  void clear_is_rtmp();
  static const int kIsRtmpFieldNumber = 8;
  bool is_rtmp() const;
  void set_is_rtmp(bool value);

  // optional bool is_webrtc = 14;
  bool has_is_webrtc() const;
  void clear_is_webrtc();
  static const int kIsWebrtcFieldNumber = 14;
  bool is_webrtc() const;
  void set_is_webrtc(bool value);

  // optional fixed64 webrtc_session_id = 15;
  bool has_webrtc_session_id() const;
  void clear_webrtc_session_id();
  static const int kWebrtcSessionIdFieldNumber = 15;
  ::google::protobuf::uint64 webrtc_session_id() const;
  void set_webrtc_session_id(::google::protobuf::uint64 value);

  // optional int32 heartbeat_interval = 12;
  bool has_heartbeat_interval() const;
  void clear_heartbeat_interval();
  static const int kHeartbeatIntervalFieldNumber = 12;
  ::google::protobuf::int32 heartbeat_interval() const;
  void set_heartbeat_interval(::google::protobuf::int32 value);

  // optional .proto.steam.CBroadcast_WatchBroadcast_Response.EWatchResponse response = 1 [default = k_EWatchResponseReady];
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  ::proto::steam::CBroadcast_WatchBroadcast_Response_EWatchResponse response() const;
  void set_response(::proto::steam::CBroadcast_WatchBroadcast_Response_EWatchResponse value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_WatchBroadcast_Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr mpd_url_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr hls_m3u8_master_url_;
  ::google::protobuf::internal::ArenaStringPtr thumbnail_url_;
  ::google::protobuf::internal::ArenaStringPtr webrtc_offer_sdp_;
  ::google::protobuf::internal::ArenaStringPtr webrtc_turn_server_;
  ::google::protobuf::uint64 broadcast_id_;
  ::google::protobuf::uint64 gameid_;
  ::google::protobuf::uint32 num_viewers_;
  ::google::protobuf::int32 permission_;
  ::google::protobuf::uint64 viewer_token_;
  ::google::protobuf::int32 seconds_delay_;
  bool is_rtmp_;
  bool is_webrtc_;
  ::google::protobuf::uint64 webrtc_session_id_;
  ::google::protobuf::int32 heartbeat_interval_;
  int response_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_HeartbeatBroadcast_Notification final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_HeartbeatBroadcast_Notification) */ {
 public:
  CBroadcast_HeartbeatBroadcast_Notification();
  virtual ~CBroadcast_HeartbeatBroadcast_Notification();

  CBroadcast_HeartbeatBroadcast_Notification(const CBroadcast_HeartbeatBroadcast_Notification& from);

  inline CBroadcast_HeartbeatBroadcast_Notification& operator=(const CBroadcast_HeartbeatBroadcast_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CBroadcast_HeartbeatBroadcast_Notification(CBroadcast_HeartbeatBroadcast_Notification&& from) noexcept
    : CBroadcast_HeartbeatBroadcast_Notification() {
    *this = ::std::move(from);
  }

  inline CBroadcast_HeartbeatBroadcast_Notification& operator=(CBroadcast_HeartbeatBroadcast_Notification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CBroadcast_HeartbeatBroadcast_Notification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBroadcast_HeartbeatBroadcast_Notification* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_HeartbeatBroadcast_Notification*>(
               &_CBroadcast_HeartbeatBroadcast_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(CBroadcast_HeartbeatBroadcast_Notification* other);
  friend void swap(CBroadcast_HeartbeatBroadcast_Notification& a, CBroadcast_HeartbeatBroadcast_Notification& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CBroadcast_HeartbeatBroadcast_Notification* New() const final {
    return CreateMaybeMessage<CBroadcast_HeartbeatBroadcast_Notification>(nullptr);
  }

  CBroadcast_HeartbeatBroadcast_Notification* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CBroadcast_HeartbeatBroadcast_Notification>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CBroadcast_HeartbeatBroadcast_Notification& from);
  void MergeFrom(const CBroadcast_HeartbeatBroadcast_Notification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_HeartbeatBroadcast_Notification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 steamid = 1 [(.proto.steam.description) = "broadcaster steamID."];
  bool has_steamid() const;
  void clear_steamid();
  static const int kSteamidFieldNumber = 1;
  ::google::protobuf::uint64 steamid() const;
  void set_steamid(::google::protobuf::uint64 value);

  // optional fixed64 broadcast_id = 2 [(.proto.steam.description) = "broadcast session ID."];
  bool has_broadcast_id() const;
  void clear_broadcast_id();
  static const int kBroadcastIdFieldNumber = 2;
  ::google::protobuf::uint64 broadcast_id() const;
  void set_broadcast_id(::google::protobuf::uint64 value);

  // optional fixed64 viewer_token = 3 [(.proto.steam.description) = "viewer token received from last WatchRequest call, from browser storage."];
  bool has_viewer_token() const;
  void clear_viewer_token();
  static const int kViewerTokenFieldNumber = 3;
  ::google::protobuf::uint64 viewer_token() const;
  void set_viewer_token(::google::protobuf::uint64 value);

  // optional uint32 representation = 4 [(.proto.steam.description) = "video stream representation watching"];
  bool has_representation() const;
  void clear_representation();
  static const int kRepresentationFieldNumber = 4;
  ::google::protobuf::uint32 representation() const;
  void set_representation(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_HeartbeatBroadcast_Notification)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 steamid_;
  ::google::protobuf::uint64 broadcast_id_;
  ::google::protobuf::uint64 viewer_token_;
  ::google::protobuf::uint32 representation_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_StopWatchingBroadcast_Notification final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_StopWatchingBroadcast_Notification) */ {
 public:
  CBroadcast_StopWatchingBroadcast_Notification();
  virtual ~CBroadcast_StopWatchingBroadcast_Notification();

  CBroadcast_StopWatchingBroadcast_Notification(const CBroadcast_StopWatchingBroadcast_Notification& from);

  inline CBroadcast_StopWatchingBroadcast_Notification& operator=(const CBroadcast_StopWatchingBroadcast_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CBroadcast_StopWatchingBroadcast_Notification(CBroadcast_StopWatchingBroadcast_Notification&& from) noexcept
    : CBroadcast_StopWatchingBroadcast_Notification() {
    *this = ::std::move(from);
  }

  inline CBroadcast_StopWatchingBroadcast_Notification& operator=(CBroadcast_StopWatchingBroadcast_Notification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CBroadcast_StopWatchingBroadcast_Notification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBroadcast_StopWatchingBroadcast_Notification* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_StopWatchingBroadcast_Notification*>(
               &_CBroadcast_StopWatchingBroadcast_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(CBroadcast_StopWatchingBroadcast_Notification* other);
  friend void swap(CBroadcast_StopWatchingBroadcast_Notification& a, CBroadcast_StopWatchingBroadcast_Notification& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CBroadcast_StopWatchingBroadcast_Notification* New() const final {
    return CreateMaybeMessage<CBroadcast_StopWatchingBroadcast_Notification>(nullptr);
  }

  CBroadcast_StopWatchingBroadcast_Notification* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CBroadcast_StopWatchingBroadcast_Notification>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CBroadcast_StopWatchingBroadcast_Notification& from);
  void MergeFrom(const CBroadcast_StopWatchingBroadcast_Notification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_StopWatchingBroadcast_Notification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 steamid = 1 [(.proto.steam.description) = "broadcaster steamID."];
  bool has_steamid() const;
  void clear_steamid();
  static const int kSteamidFieldNumber = 1;
  ::google::protobuf::uint64 steamid() const;
  void set_steamid(::google::protobuf::uint64 value);

  // optional fixed64 broadcast_id = 2 [(.proto.steam.description) = "broadcast session ID."];
  bool has_broadcast_id() const;
  void clear_broadcast_id();
  static const int kBroadcastIdFieldNumber = 2;
  ::google::protobuf::uint64 broadcast_id() const;
  void set_broadcast_id(::google::protobuf::uint64 value);

  // optional fixed64 viewer_token = 3 [(.proto.steam.description) = "viewer token received from last WatchRequest call, from browser storage."];
  bool has_viewer_token() const;
  void clear_viewer_token();
  static const int kViewerTokenFieldNumber = 3;
  ::google::protobuf::uint64 viewer_token() const;
  void set_viewer_token(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_StopWatchingBroadcast_Notification)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 steamid_;
  ::google::protobuf::uint64 broadcast_id_;
  ::google::protobuf::uint64 viewer_token_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_GetBroadcastStatus_Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_GetBroadcastStatus_Request) */ {
 public:
  CBroadcast_GetBroadcastStatus_Request();
  virtual ~CBroadcast_GetBroadcastStatus_Request();

  CBroadcast_GetBroadcastStatus_Request(const CBroadcast_GetBroadcastStatus_Request& from);

  inline CBroadcast_GetBroadcastStatus_Request& operator=(const CBroadcast_GetBroadcastStatus_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CBroadcast_GetBroadcastStatus_Request(CBroadcast_GetBroadcastStatus_Request&& from) noexcept
    : CBroadcast_GetBroadcastStatus_Request() {
    *this = ::std::move(from);
  }

  inline CBroadcast_GetBroadcastStatus_Request& operator=(CBroadcast_GetBroadcastStatus_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CBroadcast_GetBroadcastStatus_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBroadcast_GetBroadcastStatus_Request* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_GetBroadcastStatus_Request*>(
               &_CBroadcast_GetBroadcastStatus_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(CBroadcast_GetBroadcastStatus_Request* other);
  friend void swap(CBroadcast_GetBroadcastStatus_Request& a, CBroadcast_GetBroadcastStatus_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CBroadcast_GetBroadcastStatus_Request* New() const final {
    return CreateMaybeMessage<CBroadcast_GetBroadcastStatus_Request>(nullptr);
  }

  CBroadcast_GetBroadcastStatus_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CBroadcast_GetBroadcastStatus_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CBroadcast_GetBroadcastStatus_Request& from);
  void MergeFrom(const CBroadcast_GetBroadcastStatus_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_GetBroadcastStatus_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 steamid = 1 [(.proto.steam.description) = "broadcaster steamID."];
  bool has_steamid() const;
  void clear_steamid();
  static const int kSteamidFieldNumber = 1;
  ::google::protobuf::uint64 steamid() const;
  void set_steamid(::google::protobuf::uint64 value);

  // optional fixed64 broadcast_id = 2 [(.proto.steam.description) = "broadcast session ID to proof that user is allowed to see details."];
  bool has_broadcast_id() const;
  void clear_broadcast_id();
  static const int kBroadcastIdFieldNumber = 2;
  ::google::protobuf::uint64 broadcast_id() const;
  void set_broadcast_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_GetBroadcastStatus_Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 steamid_;
  ::google::protobuf::uint64 broadcast_id_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_GetBroadcastStatus_Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_GetBroadcastStatus_Response) */ {
 public:
  CBroadcast_GetBroadcastStatus_Response();
  virtual ~CBroadcast_GetBroadcastStatus_Response();

  CBroadcast_GetBroadcastStatus_Response(const CBroadcast_GetBroadcastStatus_Response& from);

  inline CBroadcast_GetBroadcastStatus_Response& operator=(const CBroadcast_GetBroadcastStatus_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CBroadcast_GetBroadcastStatus_Response(CBroadcast_GetBroadcastStatus_Response&& from) noexcept
    : CBroadcast_GetBroadcastStatus_Response() {
    *this = ::std::move(from);
  }

  inline CBroadcast_GetBroadcastStatus_Response& operator=(CBroadcast_GetBroadcastStatus_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CBroadcast_GetBroadcastStatus_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBroadcast_GetBroadcastStatus_Response* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_GetBroadcastStatus_Response*>(
               &_CBroadcast_GetBroadcastStatus_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(CBroadcast_GetBroadcastStatus_Response* other);
  friend void swap(CBroadcast_GetBroadcastStatus_Response& a, CBroadcast_GetBroadcastStatus_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CBroadcast_GetBroadcastStatus_Response* New() const final {
    return CreateMaybeMessage<CBroadcast_GetBroadcastStatus_Response>(nullptr);
  }

  CBroadcast_GetBroadcastStatus_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CBroadcast_GetBroadcastStatus_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CBroadcast_GetBroadcastStatus_Response& from);
  void MergeFrom(const CBroadcast_GetBroadcastStatus_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_GetBroadcastStatus_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string title = 2;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // optional string thumbnail_url = 8;
  bool has_thumbnail_url() const;
  void clear_thumbnail_url();
  static const int kThumbnailUrlFieldNumber = 8;
  const ::std::string& thumbnail_url() const;
  void set_thumbnail_url(const ::std::string& value);
  #if LANG_CXX11
  void set_thumbnail_url(::std::string&& value);
  #endif
  void set_thumbnail_url(const char* value);
  void set_thumbnail_url(const char* value, size_t size);
  ::std::string* mutable_thumbnail_url();
  ::std::string* release_thumbnail_url();
  void set_allocated_thumbnail_url(::std::string* thumbnail_url);

  // optional uint64 gameid = 1;
  bool has_gameid() const;
  void clear_gameid();
  static const int kGameidFieldNumber = 1;
  ::google::protobuf::uint64 gameid() const;
  void set_gameid(::google::protobuf::uint64 value);

  // optional uint32 num_viewers = 3;
  bool has_num_viewers() const;
  void clear_num_viewers();
  static const int kNumViewersFieldNumber = 3;
  ::google::protobuf::uint32 num_viewers() const;
  void set_num_viewers(::google::protobuf::uint32 value);

  // optional int32 permission = 4;
  bool has_permission() const;
  void clear_permission();
  static const int kPermissionFieldNumber = 4;
  ::google::protobuf::int32 permission() const;
  void set_permission(::google::protobuf::int32 value);

  // optional int32 seconds_delay = 6;
  bool has_seconds_delay() const;
  void clear_seconds_delay();
  static const int kSecondsDelayFieldNumber = 6;
  ::google::protobuf::int32 seconds_delay() const;
  void set_seconds_delay(::google::protobuf::int32 value);

  // optional bool is_rtmp = 5;
  bool has_is_rtmp() const;
  void clear_is_rtmp();
  static const int kIsRtmpFieldNumber = 5;
  bool is_rtmp() const;
  void set_is_rtmp(bool value);

  // optional bool is_publisher = 7;
  bool has_is_publisher() const;
  void clear_is_publisher();
  static const int kIsPublisherFieldNumber = 7;
  bool is_publisher() const;
  void set_is_publisher(bool value);

  // optional bool is_uploading = 10;
  bool has_is_uploading() const;
  void clear_is_uploading();
  static const int kIsUploadingFieldNumber = 10;
  bool is_uploading() const;
  void set_is_uploading(bool value);

  // optional int32 update_interval = 9;
  bool has_update_interval() const;
  void clear_update_interval();
  static const int kUpdateIntervalFieldNumber = 9;
  ::google::protobuf::int32 update_interval() const;
  void set_update_interval(::google::protobuf::int32 value);

  // optional uint32 duration = 11;
  bool has_duration() const;
  void clear_duration();
  static const int kDurationFieldNumber = 11;
  ::google::protobuf::uint32 duration() const;
  void set_duration(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_GetBroadcastStatus_Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr thumbnail_url_;
  ::google::protobuf::uint64 gameid_;
  ::google::protobuf::uint32 num_viewers_;
  ::google::protobuf::int32 permission_;
  ::google::protobuf::int32 seconds_delay_;
  bool is_rtmp_;
  bool is_publisher_;
  bool is_uploading_;
  ::google::protobuf::int32 update_interval_;
  ::google::protobuf::uint32 duration_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_GetBroadcastThumbnail_Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_GetBroadcastThumbnail_Request) */ {
 public:
  CBroadcast_GetBroadcastThumbnail_Request();
  virtual ~CBroadcast_GetBroadcastThumbnail_Request();

  CBroadcast_GetBroadcastThumbnail_Request(const CBroadcast_GetBroadcastThumbnail_Request& from);

  inline CBroadcast_GetBroadcastThumbnail_Request& operator=(const CBroadcast_GetBroadcastThumbnail_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CBroadcast_GetBroadcastThumbnail_Request(CBroadcast_GetBroadcastThumbnail_Request&& from) noexcept
    : CBroadcast_GetBroadcastThumbnail_Request() {
    *this = ::std::move(from);
  }

  inline CBroadcast_GetBroadcastThumbnail_Request& operator=(CBroadcast_GetBroadcastThumbnail_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CBroadcast_GetBroadcastThumbnail_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBroadcast_GetBroadcastThumbnail_Request* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_GetBroadcastThumbnail_Request*>(
               &_CBroadcast_GetBroadcastThumbnail_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(CBroadcast_GetBroadcastThumbnail_Request* other);
  friend void swap(CBroadcast_GetBroadcastThumbnail_Request& a, CBroadcast_GetBroadcastThumbnail_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CBroadcast_GetBroadcastThumbnail_Request* New() const final {
    return CreateMaybeMessage<CBroadcast_GetBroadcastThumbnail_Request>(nullptr);
  }

  CBroadcast_GetBroadcastThumbnail_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CBroadcast_GetBroadcastThumbnail_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CBroadcast_GetBroadcastThumbnail_Request& from);
  void MergeFrom(const CBroadcast_GetBroadcastThumbnail_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_GetBroadcastThumbnail_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  void clear_steamid();
  static const int kSteamidFieldNumber = 1;
  ::google::protobuf::uint64 steamid() const;
  void set_steamid(::google::protobuf::uint64 value);

  // optional fixed64 broadcast_id = 2;
  bool has_broadcast_id() const;
  void clear_broadcast_id();
  static const int kBroadcastIdFieldNumber = 2;
  ::google::protobuf::uint64 broadcast_id() const;
  void set_broadcast_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_GetBroadcastThumbnail_Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 steamid_;
  ::google::protobuf::uint64 broadcast_id_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_GetBroadcastThumbnail_Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_GetBroadcastThumbnail_Response) */ {
 public:
  CBroadcast_GetBroadcastThumbnail_Response();
  virtual ~CBroadcast_GetBroadcastThumbnail_Response();

  CBroadcast_GetBroadcastThumbnail_Response(const CBroadcast_GetBroadcastThumbnail_Response& from);

  inline CBroadcast_GetBroadcastThumbnail_Response& operator=(const CBroadcast_GetBroadcastThumbnail_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CBroadcast_GetBroadcastThumbnail_Response(CBroadcast_GetBroadcastThumbnail_Response&& from) noexcept
    : CBroadcast_GetBroadcastThumbnail_Response() {
    *this = ::std::move(from);
  }

  inline CBroadcast_GetBroadcastThumbnail_Response& operator=(CBroadcast_GetBroadcastThumbnail_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CBroadcast_GetBroadcastThumbnail_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBroadcast_GetBroadcastThumbnail_Response* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_GetBroadcastThumbnail_Response*>(
               &_CBroadcast_GetBroadcastThumbnail_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(CBroadcast_GetBroadcastThumbnail_Response* other);
  friend void swap(CBroadcast_GetBroadcastThumbnail_Response& a, CBroadcast_GetBroadcastThumbnail_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CBroadcast_GetBroadcastThumbnail_Response* New() const final {
    return CreateMaybeMessage<CBroadcast_GetBroadcastThumbnail_Response>(nullptr);
  }

  CBroadcast_GetBroadcastThumbnail_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CBroadcast_GetBroadcastThumbnail_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CBroadcast_GetBroadcastThumbnail_Response& from);
  void MergeFrom(const CBroadcast_GetBroadcastThumbnail_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_GetBroadcastThumbnail_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string thumbnail_url = 1;
  bool has_thumbnail_url() const;
  void clear_thumbnail_url();
  static const int kThumbnailUrlFieldNumber = 1;
  const ::std::string& thumbnail_url() const;
  void set_thumbnail_url(const ::std::string& value);
  #if LANG_CXX11
  void set_thumbnail_url(::std::string&& value);
  #endif
  void set_thumbnail_url(const char* value);
  void set_thumbnail_url(const char* value, size_t size);
  ::std::string* mutable_thumbnail_url();
  ::std::string* release_thumbnail_url();
  void set_allocated_thumbnail_url(::std::string* thumbnail_url);

  // optional int32 update_interval = 2;
  bool has_update_interval() const;
  void clear_update_interval();
  static const int kUpdateIntervalFieldNumber = 2;
  ::google::protobuf::int32 update_interval() const;
  void set_update_interval(::google::protobuf::int32 value);

  // optional int32 num_viewers = 3;
  bool has_num_viewers() const;
  void clear_num_viewers();
  static const int kNumViewersFieldNumber = 3;
  ::google::protobuf::int32 num_viewers() const;
  void set_num_viewers(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_GetBroadcastThumbnail_Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr thumbnail_url_;
  ::google::protobuf::int32 update_interval_;
  ::google::protobuf::int32 num_viewers_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_InviteToBroadcast_Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_InviteToBroadcast_Request) */ {
 public:
  CBroadcast_InviteToBroadcast_Request();
  virtual ~CBroadcast_InviteToBroadcast_Request();

  CBroadcast_InviteToBroadcast_Request(const CBroadcast_InviteToBroadcast_Request& from);

  inline CBroadcast_InviteToBroadcast_Request& operator=(const CBroadcast_InviteToBroadcast_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CBroadcast_InviteToBroadcast_Request(CBroadcast_InviteToBroadcast_Request&& from) noexcept
    : CBroadcast_InviteToBroadcast_Request() {
    *this = ::std::move(from);
  }

  inline CBroadcast_InviteToBroadcast_Request& operator=(CBroadcast_InviteToBroadcast_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CBroadcast_InviteToBroadcast_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBroadcast_InviteToBroadcast_Request* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_InviteToBroadcast_Request*>(
               &_CBroadcast_InviteToBroadcast_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(CBroadcast_InviteToBroadcast_Request* other);
  friend void swap(CBroadcast_InviteToBroadcast_Request& a, CBroadcast_InviteToBroadcast_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CBroadcast_InviteToBroadcast_Request* New() const final {
    return CreateMaybeMessage<CBroadcast_InviteToBroadcast_Request>(nullptr);
  }

  CBroadcast_InviteToBroadcast_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CBroadcast_InviteToBroadcast_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CBroadcast_InviteToBroadcast_Request& from);
  void MergeFrom(const CBroadcast_InviteToBroadcast_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_InviteToBroadcast_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  void clear_steamid();
  static const int kSteamidFieldNumber = 1;
  ::google::protobuf::uint64 steamid() const;
  void set_steamid(::google::protobuf::uint64 value);

  // optional bool approval_response = 2;
  bool has_approval_response() const;
  void clear_approval_response();
  static const int kApprovalResponseFieldNumber = 2;
  bool approval_response() const;
  void set_approval_response(bool value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_InviteToBroadcast_Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 steamid_;
  bool approval_response_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_InviteToBroadcast_Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_InviteToBroadcast_Response) */ {
 public:
  CBroadcast_InviteToBroadcast_Response();
  virtual ~CBroadcast_InviteToBroadcast_Response();

  CBroadcast_InviteToBroadcast_Response(const CBroadcast_InviteToBroadcast_Response& from);

  inline CBroadcast_InviteToBroadcast_Response& operator=(const CBroadcast_InviteToBroadcast_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CBroadcast_InviteToBroadcast_Response(CBroadcast_InviteToBroadcast_Response&& from) noexcept
    : CBroadcast_InviteToBroadcast_Response() {
    *this = ::std::move(from);
  }

  inline CBroadcast_InviteToBroadcast_Response& operator=(CBroadcast_InviteToBroadcast_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CBroadcast_InviteToBroadcast_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBroadcast_InviteToBroadcast_Response* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_InviteToBroadcast_Response*>(
               &_CBroadcast_InviteToBroadcast_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(CBroadcast_InviteToBroadcast_Response* other);
  friend void swap(CBroadcast_InviteToBroadcast_Response& a, CBroadcast_InviteToBroadcast_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CBroadcast_InviteToBroadcast_Response* New() const final {
    return CreateMaybeMessage<CBroadcast_InviteToBroadcast_Response>(nullptr);
  }

  CBroadcast_InviteToBroadcast_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CBroadcast_InviteToBroadcast_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CBroadcast_InviteToBroadcast_Response& from);
  void MergeFrom(const CBroadcast_InviteToBroadcast_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_InviteToBroadcast_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool success = 1;
  bool has_success() const;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_InviteToBroadcast_Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  bool success_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_SendBroadcastStateToServer_Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_SendBroadcastStateToServer_Request) */ {
 public:
  CBroadcast_SendBroadcastStateToServer_Request();
  virtual ~CBroadcast_SendBroadcastStateToServer_Request();

  CBroadcast_SendBroadcastStateToServer_Request(const CBroadcast_SendBroadcastStateToServer_Request& from);

  inline CBroadcast_SendBroadcastStateToServer_Request& operator=(const CBroadcast_SendBroadcastStateToServer_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CBroadcast_SendBroadcastStateToServer_Request(CBroadcast_SendBroadcastStateToServer_Request&& from) noexcept
    : CBroadcast_SendBroadcastStateToServer_Request() {
    *this = ::std::move(from);
  }

  inline CBroadcast_SendBroadcastStateToServer_Request& operator=(CBroadcast_SendBroadcastStateToServer_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CBroadcast_SendBroadcastStateToServer_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBroadcast_SendBroadcastStateToServer_Request* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_SendBroadcastStateToServer_Request*>(
               &_CBroadcast_SendBroadcastStateToServer_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(CBroadcast_SendBroadcastStateToServer_Request* other);
  friend void swap(CBroadcast_SendBroadcastStateToServer_Request& a, CBroadcast_SendBroadcastStateToServer_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CBroadcast_SendBroadcastStateToServer_Request* New() const final {
    return CreateMaybeMessage<CBroadcast_SendBroadcastStateToServer_Request>(nullptr);
  }

  CBroadcast_SendBroadcastStateToServer_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CBroadcast_SendBroadcastStateToServer_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CBroadcast_SendBroadcastStateToServer_Request& from);
  void MergeFrom(const CBroadcast_SendBroadcastStateToServer_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_SendBroadcastStateToServer_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string title = 3;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 3;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // optional string game_data_config = 4;
  bool has_game_data_config() const;
  void clear_game_data_config();
  static const int kGameDataConfigFieldNumber = 4;
  const ::std::string& game_data_config() const;
  void set_game_data_config(const ::std::string& value);
  #if LANG_CXX11
  void set_game_data_config(::std::string&& value);
  #endif
  void set_game_data_config(const char* value);
  void set_game_data_config(const char* value, size_t size);
  ::std::string* mutable_game_data_config();
  ::std::string* release_game_data_config();
  void set_allocated_game_data_config(::std::string* game_data_config);

  // optional uint64 gameid = 2;
  bool has_gameid() const;
  void clear_gameid();
  static const int kGameidFieldNumber = 2;
  ::google::protobuf::uint64 gameid() const;
  void set_gameid(::google::protobuf::uint64 value);

  // optional int32 permission = 1;
  bool has_permission() const;
  void clear_permission();
  static const int kPermissionFieldNumber = 1;
  ::google::protobuf::int32 permission() const;
  void set_permission(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_SendBroadcastStateToServer_Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr game_data_config_;
  ::google::protobuf::uint64 gameid_;
  ::google::protobuf::int32 permission_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_SendBroadcastStateToServer_Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_SendBroadcastStateToServer_Response) */ {
 public:
  CBroadcast_SendBroadcastStateToServer_Response();
  virtual ~CBroadcast_SendBroadcastStateToServer_Response();

  CBroadcast_SendBroadcastStateToServer_Response(const CBroadcast_SendBroadcastStateToServer_Response& from);

  inline CBroadcast_SendBroadcastStateToServer_Response& operator=(const CBroadcast_SendBroadcastStateToServer_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CBroadcast_SendBroadcastStateToServer_Response(CBroadcast_SendBroadcastStateToServer_Response&& from) noexcept
    : CBroadcast_SendBroadcastStateToServer_Response() {
    *this = ::std::move(from);
  }

  inline CBroadcast_SendBroadcastStateToServer_Response& operator=(CBroadcast_SendBroadcastStateToServer_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CBroadcast_SendBroadcastStateToServer_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBroadcast_SendBroadcastStateToServer_Response* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_SendBroadcastStateToServer_Response*>(
               &_CBroadcast_SendBroadcastStateToServer_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(CBroadcast_SendBroadcastStateToServer_Response* other);
  friend void swap(CBroadcast_SendBroadcastStateToServer_Response& a, CBroadcast_SendBroadcastStateToServer_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CBroadcast_SendBroadcastStateToServer_Response* New() const final {
    return CreateMaybeMessage<CBroadcast_SendBroadcastStateToServer_Response>(nullptr);
  }

  CBroadcast_SendBroadcastStateToServer_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CBroadcast_SendBroadcastStateToServer_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CBroadcast_SendBroadcastStateToServer_Response& from);
  void MergeFrom(const CBroadcast_SendBroadcastStateToServer_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_SendBroadcastStateToServer_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_SendBroadcastStateToServer_Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_NotifyBroadcastSessionHeartbeat_Notification final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_NotifyBroadcastSessionHeartbeat_Notification) */ {
 public:
  CBroadcast_NotifyBroadcastSessionHeartbeat_Notification();
  virtual ~CBroadcast_NotifyBroadcastSessionHeartbeat_Notification();

  CBroadcast_NotifyBroadcastSessionHeartbeat_Notification(const CBroadcast_NotifyBroadcastSessionHeartbeat_Notification& from);

  inline CBroadcast_NotifyBroadcastSessionHeartbeat_Notification& operator=(const CBroadcast_NotifyBroadcastSessionHeartbeat_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CBroadcast_NotifyBroadcastSessionHeartbeat_Notification(CBroadcast_NotifyBroadcastSessionHeartbeat_Notification&& from) noexcept
    : CBroadcast_NotifyBroadcastSessionHeartbeat_Notification() {
    *this = ::std::move(from);
  }

  inline CBroadcast_NotifyBroadcastSessionHeartbeat_Notification& operator=(CBroadcast_NotifyBroadcastSessionHeartbeat_Notification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CBroadcast_NotifyBroadcastSessionHeartbeat_Notification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBroadcast_NotifyBroadcastSessionHeartbeat_Notification* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_NotifyBroadcastSessionHeartbeat_Notification*>(
               &_CBroadcast_NotifyBroadcastSessionHeartbeat_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(CBroadcast_NotifyBroadcastSessionHeartbeat_Notification* other);
  friend void swap(CBroadcast_NotifyBroadcastSessionHeartbeat_Notification& a, CBroadcast_NotifyBroadcastSessionHeartbeat_Notification& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CBroadcast_NotifyBroadcastSessionHeartbeat_Notification* New() const final {
    return CreateMaybeMessage<CBroadcast_NotifyBroadcastSessionHeartbeat_Notification>(nullptr);
  }

  CBroadcast_NotifyBroadcastSessionHeartbeat_Notification* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CBroadcast_NotifyBroadcastSessionHeartbeat_Notification>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CBroadcast_NotifyBroadcastSessionHeartbeat_Notification& from);
  void MergeFrom(const CBroadcast_NotifyBroadcastSessionHeartbeat_Notification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_NotifyBroadcastSessionHeartbeat_Notification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 broadcast_id = 1;
  bool has_broadcast_id() const;
  void clear_broadcast_id();
  static const int kBroadcastIdFieldNumber = 1;
  ::google::protobuf::uint64 broadcast_id() const;
  void set_broadcast_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 broadcast_id_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_GetBroadcastChatInfo_Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_GetBroadcastChatInfo_Request) */ {
 public:
  CBroadcast_GetBroadcastChatInfo_Request();
  virtual ~CBroadcast_GetBroadcastChatInfo_Request();

  CBroadcast_GetBroadcastChatInfo_Request(const CBroadcast_GetBroadcastChatInfo_Request& from);

  inline CBroadcast_GetBroadcastChatInfo_Request& operator=(const CBroadcast_GetBroadcastChatInfo_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CBroadcast_GetBroadcastChatInfo_Request(CBroadcast_GetBroadcastChatInfo_Request&& from) noexcept
    : CBroadcast_GetBroadcastChatInfo_Request() {
    *this = ::std::move(from);
  }

  inline CBroadcast_GetBroadcastChatInfo_Request& operator=(CBroadcast_GetBroadcastChatInfo_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CBroadcast_GetBroadcastChatInfo_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBroadcast_GetBroadcastChatInfo_Request* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_GetBroadcastChatInfo_Request*>(
               &_CBroadcast_GetBroadcastChatInfo_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(CBroadcast_GetBroadcastChatInfo_Request* other);
  friend void swap(CBroadcast_GetBroadcastChatInfo_Request& a, CBroadcast_GetBroadcastChatInfo_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CBroadcast_GetBroadcastChatInfo_Request* New() const final {
    return CreateMaybeMessage<CBroadcast_GetBroadcastChatInfo_Request>(nullptr);
  }

  CBroadcast_GetBroadcastChatInfo_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CBroadcast_GetBroadcastChatInfo_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CBroadcast_GetBroadcastChatInfo_Request& from);
  void MergeFrom(const CBroadcast_GetBroadcastChatInfo_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_GetBroadcastChatInfo_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  void clear_steamid();
  static const int kSteamidFieldNumber = 1;
  ::google::protobuf::uint64 steamid() const;
  void set_steamid(::google::protobuf::uint64 value);

  // optional fixed64 broadcast_id = 2;
  bool has_broadcast_id() const;
  void clear_broadcast_id();
  static const int kBroadcastIdFieldNumber = 2;
  ::google::protobuf::uint64 broadcast_id() const;
  void set_broadcast_id(::google::protobuf::uint64 value);

  // optional uint32 client_ip = 3;
  bool has_client_ip() const;
  void clear_client_ip();
  static const int kClientIpFieldNumber = 3;
  ::google::protobuf::uint32 client_ip() const;
  void set_client_ip(::google::protobuf::uint32 value);

  // optional uint32 client_cell = 4;
  bool has_client_cell() const;
  void clear_client_cell();
  static const int kClientCellFieldNumber = 4;
  ::google::protobuf::uint32 client_cell() const;
  void set_client_cell(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_GetBroadcastChatInfo_Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 steamid_;
  ::google::protobuf::uint64 broadcast_id_;
  ::google::protobuf::uint32 client_ip_;
  ::google::protobuf::uint32 client_cell_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_GetBroadcastChatInfo_Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_GetBroadcastChatInfo_Response) */ {
 public:
  CBroadcast_GetBroadcastChatInfo_Response();
  virtual ~CBroadcast_GetBroadcastChatInfo_Response();

  CBroadcast_GetBroadcastChatInfo_Response(const CBroadcast_GetBroadcastChatInfo_Response& from);

  inline CBroadcast_GetBroadcastChatInfo_Response& operator=(const CBroadcast_GetBroadcastChatInfo_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CBroadcast_GetBroadcastChatInfo_Response(CBroadcast_GetBroadcastChatInfo_Response&& from) noexcept
    : CBroadcast_GetBroadcastChatInfo_Response() {
    *this = ::std::move(from);
  }

  inline CBroadcast_GetBroadcastChatInfo_Response& operator=(CBroadcast_GetBroadcastChatInfo_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CBroadcast_GetBroadcastChatInfo_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBroadcast_GetBroadcastChatInfo_Response* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_GetBroadcastChatInfo_Response*>(
               &_CBroadcast_GetBroadcastChatInfo_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(CBroadcast_GetBroadcastChatInfo_Response* other);
  friend void swap(CBroadcast_GetBroadcastChatInfo_Response& a, CBroadcast_GetBroadcastChatInfo_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CBroadcast_GetBroadcastChatInfo_Response* New() const final {
    return CreateMaybeMessage<CBroadcast_GetBroadcastChatInfo_Response>(nullptr);
  }

  CBroadcast_GetBroadcastChatInfo_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CBroadcast_GetBroadcastChatInfo_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CBroadcast_GetBroadcastChatInfo_Response& from);
  void MergeFrom(const CBroadcast_GetBroadcastChatInfo_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_GetBroadcastChatInfo_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string view_url = 2;
  bool has_view_url() const;
  void clear_view_url();
  static const int kViewUrlFieldNumber = 2;
  const ::std::string& view_url() const;
  void set_view_url(const ::std::string& value);
  #if LANG_CXX11
  void set_view_url(::std::string&& value);
  #endif
  void set_view_url(const char* value);
  void set_view_url(const char* value, size_t size);
  ::std::string* mutable_view_url();
  ::std::string* release_view_url();
  void set_allocated_view_url(::std::string* view_url);

  // optional string view_url_template = 3;
  bool has_view_url_template() const;
  void clear_view_url_template();
  static const int kViewUrlTemplateFieldNumber = 3;
  const ::std::string& view_url_template() const;
  void set_view_url_template(const ::std::string& value);
  #if LANG_CXX11
  void set_view_url_template(::std::string&& value);
  #endif
  void set_view_url_template(const char* value);
  void set_view_url_template(const char* value, size_t size);
  ::std::string* mutable_view_url_template();
  ::std::string* release_view_url_template();
  void set_allocated_view_url_template(::std::string* view_url_template);

  // optional fixed64 chat_id = 1;
  bool has_chat_id() const;
  void clear_chat_id();
  static const int kChatIdFieldNumber = 1;
  ::google::protobuf::uint64 chat_id() const;
  void set_chat_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_GetBroadcastChatInfo_Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr view_url_;
  ::google::protobuf::internal::ArenaStringPtr view_url_template_;
  ::google::protobuf::uint64 chat_id_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_PostChatMessage_Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_PostChatMessage_Request) */ {
 public:
  CBroadcast_PostChatMessage_Request();
  virtual ~CBroadcast_PostChatMessage_Request();

  CBroadcast_PostChatMessage_Request(const CBroadcast_PostChatMessage_Request& from);

  inline CBroadcast_PostChatMessage_Request& operator=(const CBroadcast_PostChatMessage_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CBroadcast_PostChatMessage_Request(CBroadcast_PostChatMessage_Request&& from) noexcept
    : CBroadcast_PostChatMessage_Request() {
    *this = ::std::move(from);
  }

  inline CBroadcast_PostChatMessage_Request& operator=(CBroadcast_PostChatMessage_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CBroadcast_PostChatMessage_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBroadcast_PostChatMessage_Request* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_PostChatMessage_Request*>(
               &_CBroadcast_PostChatMessage_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(CBroadcast_PostChatMessage_Request* other);
  friend void swap(CBroadcast_PostChatMessage_Request& a, CBroadcast_PostChatMessage_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CBroadcast_PostChatMessage_Request* New() const final {
    return CreateMaybeMessage<CBroadcast_PostChatMessage_Request>(nullptr);
  }

  CBroadcast_PostChatMessage_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CBroadcast_PostChatMessage_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CBroadcast_PostChatMessage_Request& from);
  void MergeFrom(const CBroadcast_PostChatMessage_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_PostChatMessage_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string message = 2;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // optional fixed64 chat_id = 1;
  bool has_chat_id() const;
  void clear_chat_id();
  static const int kChatIdFieldNumber = 1;
  ::google::protobuf::uint64 chat_id() const;
  void set_chat_id(::google::protobuf::uint64 value);

  // optional uint32 instance_id = 3;
  bool has_instance_id() const;
  void clear_instance_id();
  static const int kInstanceIdFieldNumber = 3;
  ::google::protobuf::uint32 instance_id() const;
  void set_instance_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_PostChatMessage_Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::uint64 chat_id_;
  ::google::protobuf::uint32 instance_id_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_PostChatMessage_Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_PostChatMessage_Response) */ {
 public:
  CBroadcast_PostChatMessage_Response();
  virtual ~CBroadcast_PostChatMessage_Response();

  CBroadcast_PostChatMessage_Response(const CBroadcast_PostChatMessage_Response& from);

  inline CBroadcast_PostChatMessage_Response& operator=(const CBroadcast_PostChatMessage_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CBroadcast_PostChatMessage_Response(CBroadcast_PostChatMessage_Response&& from) noexcept
    : CBroadcast_PostChatMessage_Response() {
    *this = ::std::move(from);
  }

  inline CBroadcast_PostChatMessage_Response& operator=(CBroadcast_PostChatMessage_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CBroadcast_PostChatMessage_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBroadcast_PostChatMessage_Response* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_PostChatMessage_Response*>(
               &_CBroadcast_PostChatMessage_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(CBroadcast_PostChatMessage_Response* other);
  friend void swap(CBroadcast_PostChatMessage_Response& a, CBroadcast_PostChatMessage_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CBroadcast_PostChatMessage_Response* New() const final {
    return CreateMaybeMessage<CBroadcast_PostChatMessage_Response>(nullptr);
  }

  CBroadcast_PostChatMessage_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CBroadcast_PostChatMessage_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CBroadcast_PostChatMessage_Response& from);
  void MergeFrom(const CBroadcast_PostChatMessage_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_PostChatMessage_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string persona_name = 1;
  bool has_persona_name() const;
  void clear_persona_name();
  static const int kPersonaNameFieldNumber = 1;
  const ::std::string& persona_name() const;
  void set_persona_name(const ::std::string& value);
  #if LANG_CXX11
  void set_persona_name(::std::string&& value);
  #endif
  void set_persona_name(const char* value);
  void set_persona_name(const char* value, size_t size);
  ::std::string* mutable_persona_name();
  ::std::string* release_persona_name();
  void set_allocated_persona_name(::std::string* persona_name);

  // optional bool in_game = 2;
  bool has_in_game() const;
  void clear_in_game();
  static const int kInGameFieldNumber = 2;
  bool in_game() const;
  void set_in_game(bool value);

  // optional int32 result = 3;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 3;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // optional int32 cooldown_time_seconds = 4;
  bool has_cooldown_time_seconds() const;
  void clear_cooldown_time_seconds();
  static const int kCooldownTimeSecondsFieldNumber = 4;
  ::google::protobuf::int32 cooldown_time_seconds() const;
  void set_cooldown_time_seconds(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_PostChatMessage_Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr persona_name_;
  bool in_game_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 cooldown_time_seconds_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_MuteBroadcastChatUser_Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_MuteBroadcastChatUser_Request) */ {
 public:
  CBroadcast_MuteBroadcastChatUser_Request();
  virtual ~CBroadcast_MuteBroadcastChatUser_Request();

  CBroadcast_MuteBroadcastChatUser_Request(const CBroadcast_MuteBroadcastChatUser_Request& from);

  inline CBroadcast_MuteBroadcastChatUser_Request& operator=(const CBroadcast_MuteBroadcastChatUser_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CBroadcast_MuteBroadcastChatUser_Request(CBroadcast_MuteBroadcastChatUser_Request&& from) noexcept
    : CBroadcast_MuteBroadcastChatUser_Request() {
    *this = ::std::move(from);
  }

  inline CBroadcast_MuteBroadcastChatUser_Request& operator=(CBroadcast_MuteBroadcastChatUser_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CBroadcast_MuteBroadcastChatUser_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBroadcast_MuteBroadcastChatUser_Request* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_MuteBroadcastChatUser_Request*>(
               &_CBroadcast_MuteBroadcastChatUser_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(CBroadcast_MuteBroadcastChatUser_Request* other);
  friend void swap(CBroadcast_MuteBroadcastChatUser_Request& a, CBroadcast_MuteBroadcastChatUser_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CBroadcast_MuteBroadcastChatUser_Request* New() const final {
    return CreateMaybeMessage<CBroadcast_MuteBroadcastChatUser_Request>(nullptr);
  }

  CBroadcast_MuteBroadcastChatUser_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CBroadcast_MuteBroadcastChatUser_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CBroadcast_MuteBroadcastChatUser_Request& from);
  void MergeFrom(const CBroadcast_MuteBroadcastChatUser_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_MuteBroadcastChatUser_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 chat_id = 1;
  bool has_chat_id() const;
  void clear_chat_id();
  static const int kChatIdFieldNumber = 1;
  ::google::protobuf::uint64 chat_id() const;
  void set_chat_id(::google::protobuf::uint64 value);

  // optional fixed64 user_steamid = 2;
  bool has_user_steamid() const;
  void clear_user_steamid();
  static const int kUserSteamidFieldNumber = 2;
  ::google::protobuf::uint64 user_steamid() const;
  void set_user_steamid(::google::protobuf::uint64 value);

  // optional bool muted = 3;
  bool has_muted() const;
  void clear_muted();
  static const int kMutedFieldNumber = 3;
  bool muted() const;
  void set_muted(bool value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_MuteBroadcastChatUser_Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 chat_id_;
  ::google::protobuf::uint64 user_steamid_;
  bool muted_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_MuteBroadcastChatUser_Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_MuteBroadcastChatUser_Response) */ {
 public:
  CBroadcast_MuteBroadcastChatUser_Response();
  virtual ~CBroadcast_MuteBroadcastChatUser_Response();

  CBroadcast_MuteBroadcastChatUser_Response(const CBroadcast_MuteBroadcastChatUser_Response& from);

  inline CBroadcast_MuteBroadcastChatUser_Response& operator=(const CBroadcast_MuteBroadcastChatUser_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CBroadcast_MuteBroadcastChatUser_Response(CBroadcast_MuteBroadcastChatUser_Response&& from) noexcept
    : CBroadcast_MuteBroadcastChatUser_Response() {
    *this = ::std::move(from);
  }

  inline CBroadcast_MuteBroadcastChatUser_Response& operator=(CBroadcast_MuteBroadcastChatUser_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CBroadcast_MuteBroadcastChatUser_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBroadcast_MuteBroadcastChatUser_Response* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_MuteBroadcastChatUser_Response*>(
               &_CBroadcast_MuteBroadcastChatUser_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(CBroadcast_MuteBroadcastChatUser_Response* other);
  friend void swap(CBroadcast_MuteBroadcastChatUser_Response& a, CBroadcast_MuteBroadcastChatUser_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CBroadcast_MuteBroadcastChatUser_Response* New() const final {
    return CreateMaybeMessage<CBroadcast_MuteBroadcastChatUser_Response>(nullptr);
  }

  CBroadcast_MuteBroadcastChatUser_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CBroadcast_MuteBroadcastChatUser_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CBroadcast_MuteBroadcastChatUser_Response& from);
  void MergeFrom(const CBroadcast_MuteBroadcastChatUser_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_MuteBroadcastChatUser_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_MuteBroadcastChatUser_Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_RemoveUserChatText_Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_RemoveUserChatText_Request) */ {
 public:
  CBroadcast_RemoveUserChatText_Request();
  virtual ~CBroadcast_RemoveUserChatText_Request();

  CBroadcast_RemoveUserChatText_Request(const CBroadcast_RemoveUserChatText_Request& from);

  inline CBroadcast_RemoveUserChatText_Request& operator=(const CBroadcast_RemoveUserChatText_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CBroadcast_RemoveUserChatText_Request(CBroadcast_RemoveUserChatText_Request&& from) noexcept
    : CBroadcast_RemoveUserChatText_Request() {
    *this = ::std::move(from);
  }

  inline CBroadcast_RemoveUserChatText_Request& operator=(CBroadcast_RemoveUserChatText_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CBroadcast_RemoveUserChatText_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBroadcast_RemoveUserChatText_Request* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_RemoveUserChatText_Request*>(
               &_CBroadcast_RemoveUserChatText_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(CBroadcast_RemoveUserChatText_Request* other);
  friend void swap(CBroadcast_RemoveUserChatText_Request& a, CBroadcast_RemoveUserChatText_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CBroadcast_RemoveUserChatText_Request* New() const final {
    return CreateMaybeMessage<CBroadcast_RemoveUserChatText_Request>(nullptr);
  }

  CBroadcast_RemoveUserChatText_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CBroadcast_RemoveUserChatText_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CBroadcast_RemoveUserChatText_Request& from);
  void MergeFrom(const CBroadcast_RemoveUserChatText_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_RemoveUserChatText_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 chat_id = 1;
  bool has_chat_id() const;
  void clear_chat_id();
  static const int kChatIdFieldNumber = 1;
  ::google::protobuf::uint64 chat_id() const;
  void set_chat_id(::google::protobuf::uint64 value);

  // optional fixed64 user_steamid = 2;
  bool has_user_steamid() const;
  void clear_user_steamid();
  static const int kUserSteamidFieldNumber = 2;
  ::google::protobuf::uint64 user_steamid() const;
  void set_user_steamid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_RemoveUserChatText_Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 chat_id_;
  ::google::protobuf::uint64 user_steamid_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_RemoveUserChatText_Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_RemoveUserChatText_Response) */ {
 public:
  CBroadcast_RemoveUserChatText_Response();
  virtual ~CBroadcast_RemoveUserChatText_Response();

  CBroadcast_RemoveUserChatText_Response(const CBroadcast_RemoveUserChatText_Response& from);

  inline CBroadcast_RemoveUserChatText_Response& operator=(const CBroadcast_RemoveUserChatText_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CBroadcast_RemoveUserChatText_Response(CBroadcast_RemoveUserChatText_Response&& from) noexcept
    : CBroadcast_RemoveUserChatText_Response() {
    *this = ::std::move(from);
  }

  inline CBroadcast_RemoveUserChatText_Response& operator=(CBroadcast_RemoveUserChatText_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CBroadcast_RemoveUserChatText_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBroadcast_RemoveUserChatText_Response* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_RemoveUserChatText_Response*>(
               &_CBroadcast_RemoveUserChatText_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(CBroadcast_RemoveUserChatText_Response* other);
  friend void swap(CBroadcast_RemoveUserChatText_Response& a, CBroadcast_RemoveUserChatText_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CBroadcast_RemoveUserChatText_Response* New() const final {
    return CreateMaybeMessage<CBroadcast_RemoveUserChatText_Response>(nullptr);
  }

  CBroadcast_RemoveUserChatText_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CBroadcast_RemoveUserChatText_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CBroadcast_RemoveUserChatText_Response& from);
  void MergeFrom(const CBroadcast_RemoveUserChatText_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_RemoveUserChatText_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_RemoveUserChatText_Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_GetBroadcastChatUserNames_Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_GetBroadcastChatUserNames_Request) */ {
 public:
  CBroadcast_GetBroadcastChatUserNames_Request();
  virtual ~CBroadcast_GetBroadcastChatUserNames_Request();

  CBroadcast_GetBroadcastChatUserNames_Request(const CBroadcast_GetBroadcastChatUserNames_Request& from);

  inline CBroadcast_GetBroadcastChatUserNames_Request& operator=(const CBroadcast_GetBroadcastChatUserNames_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CBroadcast_GetBroadcastChatUserNames_Request(CBroadcast_GetBroadcastChatUserNames_Request&& from) noexcept
    : CBroadcast_GetBroadcastChatUserNames_Request() {
    *this = ::std::move(from);
  }

  inline CBroadcast_GetBroadcastChatUserNames_Request& operator=(CBroadcast_GetBroadcastChatUserNames_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CBroadcast_GetBroadcastChatUserNames_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBroadcast_GetBroadcastChatUserNames_Request* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_GetBroadcastChatUserNames_Request*>(
               &_CBroadcast_GetBroadcastChatUserNames_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(CBroadcast_GetBroadcastChatUserNames_Request* other);
  friend void swap(CBroadcast_GetBroadcastChatUserNames_Request& a, CBroadcast_GetBroadcastChatUserNames_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CBroadcast_GetBroadcastChatUserNames_Request* New() const final {
    return CreateMaybeMessage<CBroadcast_GetBroadcastChatUserNames_Request>(nullptr);
  }

  CBroadcast_GetBroadcastChatUserNames_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CBroadcast_GetBroadcastChatUserNames_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CBroadcast_GetBroadcastChatUserNames_Request& from);
  void MergeFrom(const CBroadcast_GetBroadcastChatUserNames_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_GetBroadcastChatUserNames_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated fixed64 user_steamid = 2;
  int user_steamid_size() const;
  void clear_user_steamid();
  static const int kUserSteamidFieldNumber = 2;
  ::google::protobuf::uint64 user_steamid(int index) const;
  void set_user_steamid(int index, ::google::protobuf::uint64 value);
  void add_user_steamid(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      user_steamid() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_user_steamid();

  // optional fixed64 chat_id = 1;
  bool has_chat_id() const;
  void clear_chat_id();
  static const int kChatIdFieldNumber = 1;
  ::google::protobuf::uint64 chat_id() const;
  void set_chat_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_GetBroadcastChatUserNames_Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > user_steamid_;
  ::google::protobuf::uint64 chat_id_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_GetBroadcastChatUserNames_Response_PersonaName final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName) */ {
 public:
  CBroadcast_GetBroadcastChatUserNames_Response_PersonaName();
  virtual ~CBroadcast_GetBroadcastChatUserNames_Response_PersonaName();

  CBroadcast_GetBroadcastChatUserNames_Response_PersonaName(const CBroadcast_GetBroadcastChatUserNames_Response_PersonaName& from);

  inline CBroadcast_GetBroadcastChatUserNames_Response_PersonaName& operator=(const CBroadcast_GetBroadcastChatUserNames_Response_PersonaName& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CBroadcast_GetBroadcastChatUserNames_Response_PersonaName(CBroadcast_GetBroadcastChatUserNames_Response_PersonaName&& from) noexcept
    : CBroadcast_GetBroadcastChatUserNames_Response_PersonaName() {
    *this = ::std::move(from);
  }

  inline CBroadcast_GetBroadcastChatUserNames_Response_PersonaName& operator=(CBroadcast_GetBroadcastChatUserNames_Response_PersonaName&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CBroadcast_GetBroadcastChatUserNames_Response_PersonaName& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBroadcast_GetBroadcastChatUserNames_Response_PersonaName* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_GetBroadcastChatUserNames_Response_PersonaName*>(
               &_CBroadcast_GetBroadcastChatUserNames_Response_PersonaName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(CBroadcast_GetBroadcastChatUserNames_Response_PersonaName* other);
  friend void swap(CBroadcast_GetBroadcastChatUserNames_Response_PersonaName& a, CBroadcast_GetBroadcastChatUserNames_Response_PersonaName& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CBroadcast_GetBroadcastChatUserNames_Response_PersonaName* New() const final {
    return CreateMaybeMessage<CBroadcast_GetBroadcastChatUserNames_Response_PersonaName>(nullptr);
  }

  CBroadcast_GetBroadcastChatUserNames_Response_PersonaName* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CBroadcast_GetBroadcastChatUserNames_Response_PersonaName>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CBroadcast_GetBroadcastChatUserNames_Response_PersonaName& from);
  void MergeFrom(const CBroadcast_GetBroadcastChatUserNames_Response_PersonaName& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_GetBroadcastChatUserNames_Response_PersonaName* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string persona = 2;
  bool has_persona() const;
  void clear_persona();
  static const int kPersonaFieldNumber = 2;
  const ::std::string& persona() const;
  void set_persona(const ::std::string& value);
  #if LANG_CXX11
  void set_persona(::std::string&& value);
  #endif
  void set_persona(const char* value);
  void set_persona(const char* value, size_t size);
  ::std::string* mutable_persona();
  ::std::string* release_persona();
  void set_allocated_persona(::std::string* persona);

  // optional fixed64 steam_id = 1;
  bool has_steam_id() const;
  void clear_steam_id();
  static const int kSteamIdFieldNumber = 1;
  ::google::protobuf::uint64 steam_id() const;
  void set_steam_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr persona_;
  ::google::protobuf::uint64 steam_id_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_GetBroadcastChatUserNames_Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response) */ {
 public:
  CBroadcast_GetBroadcastChatUserNames_Response();
  virtual ~CBroadcast_GetBroadcastChatUserNames_Response();

  CBroadcast_GetBroadcastChatUserNames_Response(const CBroadcast_GetBroadcastChatUserNames_Response& from);

  inline CBroadcast_GetBroadcastChatUserNames_Response& operator=(const CBroadcast_GetBroadcastChatUserNames_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CBroadcast_GetBroadcastChatUserNames_Response(CBroadcast_GetBroadcastChatUserNames_Response&& from) noexcept
    : CBroadcast_GetBroadcastChatUserNames_Response() {
    *this = ::std::move(from);
  }

  inline CBroadcast_GetBroadcastChatUserNames_Response& operator=(CBroadcast_GetBroadcastChatUserNames_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CBroadcast_GetBroadcastChatUserNames_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBroadcast_GetBroadcastChatUserNames_Response* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_GetBroadcastChatUserNames_Response*>(
               &_CBroadcast_GetBroadcastChatUserNames_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void Swap(CBroadcast_GetBroadcastChatUserNames_Response* other);
  friend void swap(CBroadcast_GetBroadcastChatUserNames_Response& a, CBroadcast_GetBroadcastChatUserNames_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CBroadcast_GetBroadcastChatUserNames_Response* New() const final {
    return CreateMaybeMessage<CBroadcast_GetBroadcastChatUserNames_Response>(nullptr);
  }

  CBroadcast_GetBroadcastChatUserNames_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CBroadcast_GetBroadcastChatUserNames_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CBroadcast_GetBroadcastChatUserNames_Response& from);
  void MergeFrom(const CBroadcast_GetBroadcastChatUserNames_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_GetBroadcastChatUserNames_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CBroadcast_GetBroadcastChatUserNames_Response_PersonaName PersonaName;

  // accessors -------------------------------------------------------

  // repeated .proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName persona_names = 1;
  int persona_names_size() const;
  void clear_persona_names();
  static const int kPersonaNamesFieldNumber = 1;
  ::proto::steam::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName* mutable_persona_names(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName >*
      mutable_persona_names();
  const ::proto::steam::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName& persona_names(int index) const;
  ::proto::steam::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName* add_persona_names();
  const ::google::protobuf::RepeatedPtrField< ::proto::steam::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName >&
      persona_names() const;

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName > persona_names_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_SetRTMPInfo_Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_SetRTMPInfo_Request) */ {
 public:
  CBroadcast_SetRTMPInfo_Request();
  virtual ~CBroadcast_SetRTMPInfo_Request();

  CBroadcast_SetRTMPInfo_Request(const CBroadcast_SetRTMPInfo_Request& from);

  inline CBroadcast_SetRTMPInfo_Request& operator=(const CBroadcast_SetRTMPInfo_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CBroadcast_SetRTMPInfo_Request(CBroadcast_SetRTMPInfo_Request&& from) noexcept
    : CBroadcast_SetRTMPInfo_Request() {
    *this = ::std::move(from);
  }

  inline CBroadcast_SetRTMPInfo_Request& operator=(CBroadcast_SetRTMPInfo_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CBroadcast_SetRTMPInfo_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBroadcast_SetRTMPInfo_Request* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_SetRTMPInfo_Request*>(
               &_CBroadcast_SetRTMPInfo_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  void Swap(CBroadcast_SetRTMPInfo_Request* other);
  friend void swap(CBroadcast_SetRTMPInfo_Request& a, CBroadcast_SetRTMPInfo_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CBroadcast_SetRTMPInfo_Request* New() const final {
    return CreateMaybeMessage<CBroadcast_SetRTMPInfo_Request>(nullptr);
  }

  CBroadcast_SetRTMPInfo_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CBroadcast_SetRTMPInfo_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CBroadcast_SetRTMPInfo_Request& from);
  void MergeFrom(const CBroadcast_SetRTMPInfo_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_SetRTMPInfo_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 broadcast_permission = 1;
  bool has_broadcast_permission() const;
  void clear_broadcast_permission();
  static const int kBroadcastPermissionFieldNumber = 1;
  ::google::protobuf::int32 broadcast_permission() const;
  void set_broadcast_permission(::google::protobuf::int32 value);

  // optional bool update_token = 2;
  bool has_update_token() const;
  void clear_update_token();
  static const int kUpdateTokenFieldNumber = 2;
  bool update_token() const;
  void set_update_token(bool value);

  // optional int32 broadcast_delay = 3;
  bool has_broadcast_delay() const;
  void clear_broadcast_delay();
  static const int kBroadcastDelayFieldNumber = 3;
  ::google::protobuf::int32 broadcast_delay() const;
  void set_broadcast_delay(::google::protobuf::int32 value);

  // optional uint32 app_id = 4;
  bool has_app_id() const;
  void clear_app_id();
  static const int kAppIdFieldNumber = 4;
  ::google::protobuf::uint32 app_id() const;
  void set_app_id(::google::protobuf::uint32 value);

  // optional uint32 required_app_id = 5;
  bool has_required_app_id() const;
  void clear_required_app_id();
  static const int kRequiredAppIdFieldNumber = 5;
  ::google::protobuf::uint32 required_app_id() const;
  void set_required_app_id(::google::protobuf::uint32 value);

  // optional .proto.steam.EBroadcastChatPermission broadcast_chat_permission = 6 [default = k_EBroadcastChatPermissionPublic, (.proto.steam.description) = "Who is permitted to send a chat message during broadcast"];
  bool has_broadcast_chat_permission() const;
  void clear_broadcast_chat_permission();
  static const int kBroadcastChatPermissionFieldNumber = 6;
  ::proto::steam::EBroadcastChatPermission broadcast_chat_permission() const;
  void set_broadcast_chat_permission(::proto::steam::EBroadcastChatPermission value);

  // optional fixed64 steamid = 8 [(.proto.steam.description) = "broadcaster steamID if not logged-in user"];
  bool has_steamid() const;
  void clear_steamid();
  static const int kSteamidFieldNumber = 8;
  ::google::protobuf::uint64 steamid() const;
  void set_steamid(::google::protobuf::uint64 value);

  // optional int32 broadcast_buffer = 7 [(.proto.steam.description) = "Previous seconds we keep of the stream available"];
  bool has_broadcast_buffer() const;
  void clear_broadcast_buffer();
  static const int kBroadcastBufferFieldNumber = 7;
  ::google::protobuf::int32 broadcast_buffer() const;
  void set_broadcast_buffer(::google::protobuf::int32 value);

  // optional uint32 chat_rate_limit = 9 [(.proto.steam.description) = "Seconds required between chat messages"];
  bool has_chat_rate_limit() const;
  void clear_chat_rate_limit();
  static const int kChatRateLimitFieldNumber = 9;
  ::google::protobuf::uint32 chat_rate_limit() const;
  void set_chat_rate_limit(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_SetRTMPInfo_Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 broadcast_permission_;
  bool update_token_;
  ::google::protobuf::int32 broadcast_delay_;
  ::google::protobuf::uint32 app_id_;
  ::google::protobuf::uint32 required_app_id_;
  int broadcast_chat_permission_;
  ::google::protobuf::uint64 steamid_;
  ::google::protobuf::int32 broadcast_buffer_;
  ::google::protobuf::uint32 chat_rate_limit_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_SetRTMPInfo_Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_SetRTMPInfo_Response) */ {
 public:
  CBroadcast_SetRTMPInfo_Response();
  virtual ~CBroadcast_SetRTMPInfo_Response();

  CBroadcast_SetRTMPInfo_Response(const CBroadcast_SetRTMPInfo_Response& from);

  inline CBroadcast_SetRTMPInfo_Response& operator=(const CBroadcast_SetRTMPInfo_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CBroadcast_SetRTMPInfo_Response(CBroadcast_SetRTMPInfo_Response&& from) noexcept
    : CBroadcast_SetRTMPInfo_Response() {
    *this = ::std::move(from);
  }

  inline CBroadcast_SetRTMPInfo_Response& operator=(CBroadcast_SetRTMPInfo_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CBroadcast_SetRTMPInfo_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBroadcast_SetRTMPInfo_Response* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_SetRTMPInfo_Response*>(
               &_CBroadcast_SetRTMPInfo_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  void Swap(CBroadcast_SetRTMPInfo_Response* other);
  friend void swap(CBroadcast_SetRTMPInfo_Response& a, CBroadcast_SetRTMPInfo_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CBroadcast_SetRTMPInfo_Response* New() const final {
    return CreateMaybeMessage<CBroadcast_SetRTMPInfo_Response>(nullptr);
  }

  CBroadcast_SetRTMPInfo_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CBroadcast_SetRTMPInfo_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CBroadcast_SetRTMPInfo_Response& from);
  void MergeFrom(const CBroadcast_SetRTMPInfo_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_SetRTMPInfo_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_SetRTMPInfo_Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_GetRTMPInfo_Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_GetRTMPInfo_Request) */ {
 public:
  CBroadcast_GetRTMPInfo_Request();
  virtual ~CBroadcast_GetRTMPInfo_Request();

  CBroadcast_GetRTMPInfo_Request(const CBroadcast_GetRTMPInfo_Request& from);

  inline CBroadcast_GetRTMPInfo_Request& operator=(const CBroadcast_GetRTMPInfo_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CBroadcast_GetRTMPInfo_Request(CBroadcast_GetRTMPInfo_Request&& from) noexcept
    : CBroadcast_GetRTMPInfo_Request() {
    *this = ::std::move(from);
  }

  inline CBroadcast_GetRTMPInfo_Request& operator=(CBroadcast_GetRTMPInfo_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CBroadcast_GetRTMPInfo_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBroadcast_GetRTMPInfo_Request* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_GetRTMPInfo_Request*>(
               &_CBroadcast_GetRTMPInfo_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  void Swap(CBroadcast_GetRTMPInfo_Request* other);
  friend void swap(CBroadcast_GetRTMPInfo_Request& a, CBroadcast_GetRTMPInfo_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CBroadcast_GetRTMPInfo_Request* New() const final {
    return CreateMaybeMessage<CBroadcast_GetRTMPInfo_Request>(nullptr);
  }

  CBroadcast_GetRTMPInfo_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CBroadcast_GetRTMPInfo_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CBroadcast_GetRTMPInfo_Request& from);
  void MergeFrom(const CBroadcast_GetRTMPInfo_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_GetRTMPInfo_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 steamid = 2 [(.proto.steam.description) = "broadcaster steamID if not logged-in user"];
  bool has_steamid() const;
  void clear_steamid();
  static const int kSteamidFieldNumber = 2;
  ::google::protobuf::uint64 steamid() const;
  void set_steamid(::google::protobuf::uint64 value);

  // optional uint32 ip = 1;
  bool has_ip() const;
  void clear_ip();
  static const int kIpFieldNumber = 1;
  ::google::protobuf::uint32 ip() const;
  void set_ip(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_GetRTMPInfo_Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 steamid_;
  ::google::protobuf::uint32 ip_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_GetRTMPInfo_Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_GetRTMPInfo_Response) */ {
 public:
  CBroadcast_GetRTMPInfo_Response();
  virtual ~CBroadcast_GetRTMPInfo_Response();

  CBroadcast_GetRTMPInfo_Response(const CBroadcast_GetRTMPInfo_Response& from);

  inline CBroadcast_GetRTMPInfo_Response& operator=(const CBroadcast_GetRTMPInfo_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CBroadcast_GetRTMPInfo_Response(CBroadcast_GetRTMPInfo_Response&& from) noexcept
    : CBroadcast_GetRTMPInfo_Response() {
    *this = ::std::move(from);
  }

  inline CBroadcast_GetRTMPInfo_Response& operator=(CBroadcast_GetRTMPInfo_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CBroadcast_GetRTMPInfo_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBroadcast_GetRTMPInfo_Response* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_GetRTMPInfo_Response*>(
               &_CBroadcast_GetRTMPInfo_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  void Swap(CBroadcast_GetRTMPInfo_Response* other);
  friend void swap(CBroadcast_GetRTMPInfo_Response& a, CBroadcast_GetRTMPInfo_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CBroadcast_GetRTMPInfo_Response* New() const final {
    return CreateMaybeMessage<CBroadcast_GetRTMPInfo_Response>(nullptr);
  }

  CBroadcast_GetRTMPInfo_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CBroadcast_GetRTMPInfo_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CBroadcast_GetRTMPInfo_Response& from);
  void MergeFrom(const CBroadcast_GetRTMPInfo_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_GetRTMPInfo_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string rtmp_host = 2;
  bool has_rtmp_host() const;
  void clear_rtmp_host();
  static const int kRtmpHostFieldNumber = 2;
  const ::std::string& rtmp_host() const;
  void set_rtmp_host(const ::std::string& value);
  #if LANG_CXX11
  void set_rtmp_host(::std::string&& value);
  #endif
  void set_rtmp_host(const char* value);
  void set_rtmp_host(const char* value, size_t size);
  ::std::string* mutable_rtmp_host();
  ::std::string* release_rtmp_host();
  void set_allocated_rtmp_host(::std::string* rtmp_host);

  // optional string rtmp_token = 3;
  bool has_rtmp_token() const;
  void clear_rtmp_token();
  static const int kRtmpTokenFieldNumber = 3;
  const ::std::string& rtmp_token() const;
  void set_rtmp_token(const ::std::string& value);
  #if LANG_CXX11
  void set_rtmp_token(::std::string&& value);
  #endif
  void set_rtmp_token(const char* value);
  void set_rtmp_token(const char* value, size_t size);
  ::std::string* mutable_rtmp_token();
  ::std::string* release_rtmp_token();
  void set_allocated_rtmp_token(::std::string* rtmp_token);

  // optional int32 broadcast_permission = 1;
  bool has_broadcast_permission() const;
  void clear_broadcast_permission();
  static const int kBroadcastPermissionFieldNumber = 1;
  ::google::protobuf::int32 broadcast_permission() const;
  void set_broadcast_permission(::google::protobuf::int32 value);

  // optional int32 broadcast_delay = 4;
  bool has_broadcast_delay() const;
  void clear_broadcast_delay();
  static const int kBroadcastDelayFieldNumber = 4;
  ::google::protobuf::int32 broadcast_delay() const;
  void set_broadcast_delay(::google::protobuf::int32 value);

  // optional uint32 app_id = 5;
  bool has_app_id() const;
  void clear_app_id();
  static const int kAppIdFieldNumber = 5;
  ::google::protobuf::uint32 app_id() const;
  void set_app_id(::google::protobuf::uint32 value);

  // optional uint32 required_app_id = 6;
  bool has_required_app_id() const;
  void clear_required_app_id();
  static const int kRequiredAppIdFieldNumber = 6;
  ::google::protobuf::uint32 required_app_id() const;
  void set_required_app_id(::google::protobuf::uint32 value);

  // optional .proto.steam.EBroadcastChatPermission broadcast_chat_permission = 7 [default = k_EBroadcastChatPermissionPublic, (.proto.steam.description) = "Who is permitted to send a chat message during broadcast"];
  bool has_broadcast_chat_permission() const;
  void clear_broadcast_chat_permission();
  static const int kBroadcastChatPermissionFieldNumber = 7;
  ::proto::steam::EBroadcastChatPermission broadcast_chat_permission() const;
  void set_broadcast_chat_permission(::proto::steam::EBroadcastChatPermission value);

  // optional int32 broadcast_buffer = 8 [(.proto.steam.description) = "Seconds we keep streams available"];
  bool has_broadcast_buffer() const;
  void clear_broadcast_buffer();
  static const int kBroadcastBufferFieldNumber = 8;
  ::google::protobuf::int32 broadcast_buffer() const;
  void set_broadcast_buffer(::google::protobuf::int32 value);

  // optional fixed64 steamid = 9 [(.proto.steam.description) = "broadcaster steamID"];
  bool has_steamid() const;
  void clear_steamid();
  static const int kSteamidFieldNumber = 9;
  ::google::protobuf::uint64 steamid() const;
  void set_steamid(::google::protobuf::uint64 value);

  // optional uint32 chat_rate_limit = 10 [(.proto.steam.description) = "Seconds required between chat messages"];
  bool has_chat_rate_limit() const;
  void clear_chat_rate_limit();
  static const int kChatRateLimitFieldNumber = 10;
  ::google::protobuf::uint32 chat_rate_limit() const;
  void set_chat_rate_limit(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_GetRTMPInfo_Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr rtmp_host_;
  ::google::protobuf::internal::ArenaStringPtr rtmp_token_;
  ::google::protobuf::int32 broadcast_permission_;
  ::google::protobuf::int32 broadcast_delay_;
  ::google::protobuf::uint32 app_id_;
  ::google::protobuf::uint32 required_app_id_;
  int broadcast_chat_permission_;
  ::google::protobuf::int32 broadcast_buffer_;
  ::google::protobuf::uint64 steamid_;
  ::google::protobuf::uint32 chat_rate_limit_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_WebRTCHaveTURNServer_Notification final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_WebRTCHaveTURNServer_Notification) */ {
 public:
  CBroadcast_WebRTCHaveTURNServer_Notification();
  virtual ~CBroadcast_WebRTCHaveTURNServer_Notification();

  CBroadcast_WebRTCHaveTURNServer_Notification(const CBroadcast_WebRTCHaveTURNServer_Notification& from);

  inline CBroadcast_WebRTCHaveTURNServer_Notification& operator=(const CBroadcast_WebRTCHaveTURNServer_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CBroadcast_WebRTCHaveTURNServer_Notification(CBroadcast_WebRTCHaveTURNServer_Notification&& from) noexcept
    : CBroadcast_WebRTCHaveTURNServer_Notification() {
    *this = ::std::move(from);
  }

  inline CBroadcast_WebRTCHaveTURNServer_Notification& operator=(CBroadcast_WebRTCHaveTURNServer_Notification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CBroadcast_WebRTCHaveTURNServer_Notification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBroadcast_WebRTCHaveTURNServer_Notification* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_WebRTCHaveTURNServer_Notification*>(
               &_CBroadcast_WebRTCHaveTURNServer_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  void Swap(CBroadcast_WebRTCHaveTURNServer_Notification* other);
  friend void swap(CBroadcast_WebRTCHaveTURNServer_Notification& a, CBroadcast_WebRTCHaveTURNServer_Notification& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CBroadcast_WebRTCHaveTURNServer_Notification* New() const final {
    return CreateMaybeMessage<CBroadcast_WebRTCHaveTURNServer_Notification>(nullptr);
  }

  CBroadcast_WebRTCHaveTURNServer_Notification* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CBroadcast_WebRTCHaveTURNServer_Notification>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CBroadcast_WebRTCHaveTURNServer_Notification& from);
  void MergeFrom(const CBroadcast_WebRTCHaveTURNServer_Notification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_WebRTCHaveTURNServer_Notification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string turn_server = 2;
  bool has_turn_server() const;
  void clear_turn_server();
  static const int kTurnServerFieldNumber = 2;
  const ::std::string& turn_server() const;
  void set_turn_server(const ::std::string& value);
  #if LANG_CXX11
  void set_turn_server(::std::string&& value);
  #endif
  void set_turn_server(const char* value);
  void set_turn_server(const char* value, size_t size);
  ::std::string* mutable_turn_server();
  ::std::string* release_turn_server();
  void set_allocated_turn_server(::std::string* turn_server);

  // optional fixed64 broadcast_session_id = 1;
  bool has_broadcast_session_id() const;
  void clear_broadcast_session_id();
  static const int kBroadcastSessionIdFieldNumber = 1;
  ::google::protobuf::uint64 broadcast_session_id() const;
  void set_broadcast_session_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_WebRTCHaveTURNServer_Notification)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr turn_server_;
  ::google::protobuf::uint64 broadcast_session_id_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_WebRTCStartResult_Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_WebRTCStartResult_Request) */ {
 public:
  CBroadcast_WebRTCStartResult_Request();
  virtual ~CBroadcast_WebRTCStartResult_Request();

  CBroadcast_WebRTCStartResult_Request(const CBroadcast_WebRTCStartResult_Request& from);

  inline CBroadcast_WebRTCStartResult_Request& operator=(const CBroadcast_WebRTCStartResult_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CBroadcast_WebRTCStartResult_Request(CBroadcast_WebRTCStartResult_Request&& from) noexcept
    : CBroadcast_WebRTCStartResult_Request() {
    *this = ::std::move(from);
  }

  inline CBroadcast_WebRTCStartResult_Request& operator=(CBroadcast_WebRTCStartResult_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CBroadcast_WebRTCStartResult_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBroadcast_WebRTCStartResult_Request* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_WebRTCStartResult_Request*>(
               &_CBroadcast_WebRTCStartResult_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  void Swap(CBroadcast_WebRTCStartResult_Request* other);
  friend void swap(CBroadcast_WebRTCStartResult_Request& a, CBroadcast_WebRTCStartResult_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CBroadcast_WebRTCStartResult_Request* New() const final {
    return CreateMaybeMessage<CBroadcast_WebRTCStartResult_Request>(nullptr);
  }

  CBroadcast_WebRTCStartResult_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CBroadcast_WebRTCStartResult_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CBroadcast_WebRTCStartResult_Request& from);
  void MergeFrom(const CBroadcast_WebRTCStartResult_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_WebRTCStartResult_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string offer = 3;
  bool has_offer() const;
  void clear_offer();
  static const int kOfferFieldNumber = 3;
  const ::std::string& offer() const;
  void set_offer(const ::std::string& value);
  #if LANG_CXX11
  void set_offer(::std::string&& value);
  #endif
  void set_offer(const char* value);
  void set_offer(const char* value, size_t size);
  ::std::string* mutable_offer();
  ::std::string* release_offer();
  void set_allocated_offer(::std::string* offer);

  // optional fixed64 webrtc_session_id = 1;
  bool has_webrtc_session_id() const;
  void clear_webrtc_session_id();
  static const int kWebrtcSessionIdFieldNumber = 1;
  ::google::protobuf::uint64 webrtc_session_id() const;
  void set_webrtc_session_id(::google::protobuf::uint64 value);

  // optional bool started = 2;
  bool has_started() const;
  void clear_started();
  static const int kStartedFieldNumber = 2;
  bool started() const;
  void set_started(bool value);

  // optional uint32 resolution_x = 4;
  bool has_resolution_x() const;
  void clear_resolution_x();
  static const int kResolutionXFieldNumber = 4;
  ::google::protobuf::uint32 resolution_x() const;
  void set_resolution_x(::google::protobuf::uint32 value);

  // optional uint32 resolution_y = 5;
  bool has_resolution_y() const;
  void clear_resolution_y();
  static const int kResolutionYFieldNumber = 5;
  ::google::protobuf::uint32 resolution_y() const;
  void set_resolution_y(::google::protobuf::uint32 value);

  // optional uint32 fps = 6;
  bool has_fps() const;
  void clear_fps();
  static const int kFpsFieldNumber = 6;
  ::google::protobuf::uint32 fps() const;
  void set_fps(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_WebRTCStartResult_Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr offer_;
  ::google::protobuf::uint64 webrtc_session_id_;
  bool started_;
  ::google::protobuf::uint32 resolution_x_;
  ::google::protobuf::uint32 resolution_y_;
  ::google::protobuf::uint32 fps_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_WebRTCStartResult_Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_WebRTCStartResult_Response) */ {
 public:
  CBroadcast_WebRTCStartResult_Response();
  virtual ~CBroadcast_WebRTCStartResult_Response();

  CBroadcast_WebRTCStartResult_Response(const CBroadcast_WebRTCStartResult_Response& from);

  inline CBroadcast_WebRTCStartResult_Response& operator=(const CBroadcast_WebRTCStartResult_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CBroadcast_WebRTCStartResult_Response(CBroadcast_WebRTCStartResult_Response&& from) noexcept
    : CBroadcast_WebRTCStartResult_Response() {
    *this = ::std::move(from);
  }

  inline CBroadcast_WebRTCStartResult_Response& operator=(CBroadcast_WebRTCStartResult_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CBroadcast_WebRTCStartResult_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBroadcast_WebRTCStartResult_Response* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_WebRTCStartResult_Response*>(
               &_CBroadcast_WebRTCStartResult_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  void Swap(CBroadcast_WebRTCStartResult_Response* other);
  friend void swap(CBroadcast_WebRTCStartResult_Response& a, CBroadcast_WebRTCStartResult_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CBroadcast_WebRTCStartResult_Response* New() const final {
    return CreateMaybeMessage<CBroadcast_WebRTCStartResult_Response>(nullptr);
  }

  CBroadcast_WebRTCStartResult_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CBroadcast_WebRTCStartResult_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CBroadcast_WebRTCStartResult_Response& from);
  void MergeFrom(const CBroadcast_WebRTCStartResult_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_WebRTCStartResult_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_WebRTCStartResult_Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_WebRTCStopped_Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_WebRTCStopped_Request) */ {
 public:
  CBroadcast_WebRTCStopped_Request();
  virtual ~CBroadcast_WebRTCStopped_Request();

  CBroadcast_WebRTCStopped_Request(const CBroadcast_WebRTCStopped_Request& from);

  inline CBroadcast_WebRTCStopped_Request& operator=(const CBroadcast_WebRTCStopped_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CBroadcast_WebRTCStopped_Request(CBroadcast_WebRTCStopped_Request&& from) noexcept
    : CBroadcast_WebRTCStopped_Request() {
    *this = ::std::move(from);
  }

  inline CBroadcast_WebRTCStopped_Request& operator=(CBroadcast_WebRTCStopped_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CBroadcast_WebRTCStopped_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBroadcast_WebRTCStopped_Request* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_WebRTCStopped_Request*>(
               &_CBroadcast_WebRTCStopped_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  void Swap(CBroadcast_WebRTCStopped_Request* other);
  friend void swap(CBroadcast_WebRTCStopped_Request& a, CBroadcast_WebRTCStopped_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CBroadcast_WebRTCStopped_Request* New() const final {
    return CreateMaybeMessage<CBroadcast_WebRTCStopped_Request>(nullptr);
  }

  CBroadcast_WebRTCStopped_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CBroadcast_WebRTCStopped_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CBroadcast_WebRTCStopped_Request& from);
  void MergeFrom(const CBroadcast_WebRTCStopped_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_WebRTCStopped_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 webrtc_session_id = 1;
  bool has_webrtc_session_id() const;
  void clear_webrtc_session_id();
  static const int kWebrtcSessionIdFieldNumber = 1;
  ::google::protobuf::uint64 webrtc_session_id() const;
  void set_webrtc_session_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_WebRTCStopped_Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 webrtc_session_id_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_WebRTCStopped_Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_WebRTCStopped_Response) */ {
 public:
  CBroadcast_WebRTCStopped_Response();
  virtual ~CBroadcast_WebRTCStopped_Response();

  CBroadcast_WebRTCStopped_Response(const CBroadcast_WebRTCStopped_Response& from);

  inline CBroadcast_WebRTCStopped_Response& operator=(const CBroadcast_WebRTCStopped_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CBroadcast_WebRTCStopped_Response(CBroadcast_WebRTCStopped_Response&& from) noexcept
    : CBroadcast_WebRTCStopped_Response() {
    *this = ::std::move(from);
  }

  inline CBroadcast_WebRTCStopped_Response& operator=(CBroadcast_WebRTCStopped_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CBroadcast_WebRTCStopped_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBroadcast_WebRTCStopped_Response* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_WebRTCStopped_Response*>(
               &_CBroadcast_WebRTCStopped_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  void Swap(CBroadcast_WebRTCStopped_Response* other);
  friend void swap(CBroadcast_WebRTCStopped_Response& a, CBroadcast_WebRTCStopped_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CBroadcast_WebRTCStopped_Response* New() const final {
    return CreateMaybeMessage<CBroadcast_WebRTCStopped_Response>(nullptr);
  }

  CBroadcast_WebRTCStopped_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CBroadcast_WebRTCStopped_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CBroadcast_WebRTCStopped_Response& from);
  void MergeFrom(const CBroadcast_WebRTCStopped_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_WebRTCStopped_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_WebRTCStopped_Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_WebRTCSetAnswer_Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_WebRTCSetAnswer_Request) */ {
 public:
  CBroadcast_WebRTCSetAnswer_Request();
  virtual ~CBroadcast_WebRTCSetAnswer_Request();

  CBroadcast_WebRTCSetAnswer_Request(const CBroadcast_WebRTCSetAnswer_Request& from);

  inline CBroadcast_WebRTCSetAnswer_Request& operator=(const CBroadcast_WebRTCSetAnswer_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CBroadcast_WebRTCSetAnswer_Request(CBroadcast_WebRTCSetAnswer_Request&& from) noexcept
    : CBroadcast_WebRTCSetAnswer_Request() {
    *this = ::std::move(from);
  }

  inline CBroadcast_WebRTCSetAnswer_Request& operator=(CBroadcast_WebRTCSetAnswer_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CBroadcast_WebRTCSetAnswer_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBroadcast_WebRTCSetAnswer_Request* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_WebRTCSetAnswer_Request*>(
               &_CBroadcast_WebRTCSetAnswer_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  void Swap(CBroadcast_WebRTCSetAnswer_Request* other);
  friend void swap(CBroadcast_WebRTCSetAnswer_Request& a, CBroadcast_WebRTCSetAnswer_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CBroadcast_WebRTCSetAnswer_Request* New() const final {
    return CreateMaybeMessage<CBroadcast_WebRTCSetAnswer_Request>(nullptr);
  }

  CBroadcast_WebRTCSetAnswer_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CBroadcast_WebRTCSetAnswer_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CBroadcast_WebRTCSetAnswer_Request& from);
  void MergeFrom(const CBroadcast_WebRTCSetAnswer_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_WebRTCSetAnswer_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string answer = 3;
  bool has_answer() const;
  void clear_answer();
  static const int kAnswerFieldNumber = 3;
  const ::std::string& answer() const;
  void set_answer(const ::std::string& value);
  #if LANG_CXX11
  void set_answer(::std::string&& value);
  #endif
  void set_answer(const char* value);
  void set_answer(const char* value, size_t size);
  ::std::string* mutable_answer();
  ::std::string* release_answer();
  void set_allocated_answer(::std::string* answer);

  // optional fixed64 broadcaster_steamid = 1;
  bool has_broadcaster_steamid() const;
  void clear_broadcaster_steamid();
  static const int kBroadcasterSteamidFieldNumber = 1;
  ::google::protobuf::uint64 broadcaster_steamid() const;
  void set_broadcaster_steamid(::google::protobuf::uint64 value);

  // optional fixed64 webrtc_session_id = 2;
  bool has_webrtc_session_id() const;
  void clear_webrtc_session_id();
  static const int kWebrtcSessionIdFieldNumber = 2;
  ::google::protobuf::uint64 webrtc_session_id() const;
  void set_webrtc_session_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_WebRTCSetAnswer_Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr answer_;
  ::google::protobuf::uint64 broadcaster_steamid_;
  ::google::protobuf::uint64 webrtc_session_id_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_WebRTCSetAnswer_Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_WebRTCSetAnswer_Response) */ {
 public:
  CBroadcast_WebRTCSetAnswer_Response();
  virtual ~CBroadcast_WebRTCSetAnswer_Response();

  CBroadcast_WebRTCSetAnswer_Response(const CBroadcast_WebRTCSetAnswer_Response& from);

  inline CBroadcast_WebRTCSetAnswer_Response& operator=(const CBroadcast_WebRTCSetAnswer_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CBroadcast_WebRTCSetAnswer_Response(CBroadcast_WebRTCSetAnswer_Response&& from) noexcept
    : CBroadcast_WebRTCSetAnswer_Response() {
    *this = ::std::move(from);
  }

  inline CBroadcast_WebRTCSetAnswer_Response& operator=(CBroadcast_WebRTCSetAnswer_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CBroadcast_WebRTCSetAnswer_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBroadcast_WebRTCSetAnswer_Response* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_WebRTCSetAnswer_Response*>(
               &_CBroadcast_WebRTCSetAnswer_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  void Swap(CBroadcast_WebRTCSetAnswer_Response* other);
  friend void swap(CBroadcast_WebRTCSetAnswer_Response& a, CBroadcast_WebRTCSetAnswer_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CBroadcast_WebRTCSetAnswer_Response* New() const final {
    return CreateMaybeMessage<CBroadcast_WebRTCSetAnswer_Response>(nullptr);
  }

  CBroadcast_WebRTCSetAnswer_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CBroadcast_WebRTCSetAnswer_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CBroadcast_WebRTCSetAnswer_Response& from);
  void MergeFrom(const CBroadcast_WebRTCSetAnswer_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_WebRTCSetAnswer_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_WebRTCSetAnswer_Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_WebRTCLookupTURNServer_Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_WebRTCLookupTURNServer_Request) */ {
 public:
  CBroadcast_WebRTCLookupTURNServer_Request();
  virtual ~CBroadcast_WebRTCLookupTURNServer_Request();

  CBroadcast_WebRTCLookupTURNServer_Request(const CBroadcast_WebRTCLookupTURNServer_Request& from);

  inline CBroadcast_WebRTCLookupTURNServer_Request& operator=(const CBroadcast_WebRTCLookupTURNServer_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CBroadcast_WebRTCLookupTURNServer_Request(CBroadcast_WebRTCLookupTURNServer_Request&& from) noexcept
    : CBroadcast_WebRTCLookupTURNServer_Request() {
    *this = ::std::move(from);
  }

  inline CBroadcast_WebRTCLookupTURNServer_Request& operator=(CBroadcast_WebRTCLookupTURNServer_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CBroadcast_WebRTCLookupTURNServer_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBroadcast_WebRTCLookupTURNServer_Request* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_WebRTCLookupTURNServer_Request*>(
               &_CBroadcast_WebRTCLookupTURNServer_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  void Swap(CBroadcast_WebRTCLookupTURNServer_Request* other);
  friend void swap(CBroadcast_WebRTCLookupTURNServer_Request& a, CBroadcast_WebRTCLookupTURNServer_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CBroadcast_WebRTCLookupTURNServer_Request* New() const final {
    return CreateMaybeMessage<CBroadcast_WebRTCLookupTURNServer_Request>(nullptr);
  }

  CBroadcast_WebRTCLookupTURNServer_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CBroadcast_WebRTCLookupTURNServer_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CBroadcast_WebRTCLookupTURNServer_Request& from);
  void MergeFrom(const CBroadcast_WebRTCLookupTURNServer_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_WebRTCLookupTURNServer_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 cellid = 1;
  bool has_cellid() const;
  void clear_cellid();
  static const int kCellidFieldNumber = 1;
  ::google::protobuf::uint32 cellid() const;
  void set_cellid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_WebRTCLookupTURNServer_Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 cellid_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_WebRTCLookupTURNServer_Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_WebRTCLookupTURNServer_Response) */ {
 public:
  CBroadcast_WebRTCLookupTURNServer_Response();
  virtual ~CBroadcast_WebRTCLookupTURNServer_Response();

  CBroadcast_WebRTCLookupTURNServer_Response(const CBroadcast_WebRTCLookupTURNServer_Response& from);

  inline CBroadcast_WebRTCLookupTURNServer_Response& operator=(const CBroadcast_WebRTCLookupTURNServer_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CBroadcast_WebRTCLookupTURNServer_Response(CBroadcast_WebRTCLookupTURNServer_Response&& from) noexcept
    : CBroadcast_WebRTCLookupTURNServer_Response() {
    *this = ::std::move(from);
  }

  inline CBroadcast_WebRTCLookupTURNServer_Response& operator=(CBroadcast_WebRTCLookupTURNServer_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CBroadcast_WebRTCLookupTURNServer_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBroadcast_WebRTCLookupTURNServer_Response* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_WebRTCLookupTURNServer_Response*>(
               &_CBroadcast_WebRTCLookupTURNServer_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  void Swap(CBroadcast_WebRTCLookupTURNServer_Response* other);
  friend void swap(CBroadcast_WebRTCLookupTURNServer_Response& a, CBroadcast_WebRTCLookupTURNServer_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CBroadcast_WebRTCLookupTURNServer_Response* New() const final {
    return CreateMaybeMessage<CBroadcast_WebRTCLookupTURNServer_Response>(nullptr);
  }

  CBroadcast_WebRTCLookupTURNServer_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CBroadcast_WebRTCLookupTURNServer_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CBroadcast_WebRTCLookupTURNServer_Response& from);
  void MergeFrom(const CBroadcast_WebRTCLookupTURNServer_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_WebRTCLookupTURNServer_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string turn_server = 1;
  bool has_turn_server() const;
  void clear_turn_server();
  static const int kTurnServerFieldNumber = 1;
  const ::std::string& turn_server() const;
  void set_turn_server(const ::std::string& value);
  #if LANG_CXX11
  void set_turn_server(::std::string&& value);
  #endif
  void set_turn_server(const char* value);
  void set_turn_server(const char* value, size_t size);
  ::std::string* mutable_turn_server();
  ::std::string* release_turn_server();
  void set_allocated_turn_server(::std::string* turn_server);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_WebRTCLookupTURNServer_Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr turn_server_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_WebRTC_Candidate final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_WebRTC_Candidate) */ {
 public:
  CBroadcast_WebRTC_Candidate();
  virtual ~CBroadcast_WebRTC_Candidate();

  CBroadcast_WebRTC_Candidate(const CBroadcast_WebRTC_Candidate& from);

  inline CBroadcast_WebRTC_Candidate& operator=(const CBroadcast_WebRTC_Candidate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CBroadcast_WebRTC_Candidate(CBroadcast_WebRTC_Candidate&& from) noexcept
    : CBroadcast_WebRTC_Candidate() {
    *this = ::std::move(from);
  }

  inline CBroadcast_WebRTC_Candidate& operator=(CBroadcast_WebRTC_Candidate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CBroadcast_WebRTC_Candidate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBroadcast_WebRTC_Candidate* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_WebRTC_Candidate*>(
               &_CBroadcast_WebRTC_Candidate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  void Swap(CBroadcast_WebRTC_Candidate* other);
  friend void swap(CBroadcast_WebRTC_Candidate& a, CBroadcast_WebRTC_Candidate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CBroadcast_WebRTC_Candidate* New() const final {
    return CreateMaybeMessage<CBroadcast_WebRTC_Candidate>(nullptr);
  }

  CBroadcast_WebRTC_Candidate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CBroadcast_WebRTC_Candidate>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CBroadcast_WebRTC_Candidate& from);
  void MergeFrom(const CBroadcast_WebRTC_Candidate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_WebRTC_Candidate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string sdp_mid = 1;
  bool has_sdp_mid() const;
  void clear_sdp_mid();
  static const int kSdpMidFieldNumber = 1;
  const ::std::string& sdp_mid() const;
  void set_sdp_mid(const ::std::string& value);
  #if LANG_CXX11
  void set_sdp_mid(::std::string&& value);
  #endif
  void set_sdp_mid(const char* value);
  void set_sdp_mid(const char* value, size_t size);
  ::std::string* mutable_sdp_mid();
  ::std::string* release_sdp_mid();
  void set_allocated_sdp_mid(::std::string* sdp_mid);

  // optional string candidate = 3;
  bool has_candidate() const;
  void clear_candidate();
  static const int kCandidateFieldNumber = 3;
  const ::std::string& candidate() const;
  void set_candidate(const ::std::string& value);
  #if LANG_CXX11
  void set_candidate(::std::string&& value);
  #endif
  void set_candidate(const char* value);
  void set_candidate(const char* value, size_t size);
  ::std::string* mutable_candidate();
  ::std::string* release_candidate();
  void set_allocated_candidate(::std::string* candidate);

  // optional int32 sdp_mline_index = 2;
  bool has_sdp_mline_index() const;
  void clear_sdp_mline_index();
  static const int kSdpMlineIndexFieldNumber = 2;
  ::google::protobuf::int32 sdp_mline_index() const;
  void set_sdp_mline_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_WebRTC_Candidate)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr sdp_mid_;
  ::google::protobuf::internal::ArenaStringPtr candidate_;
  ::google::protobuf::int32 sdp_mline_index_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_WebRTCAddHostCandidate_Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_WebRTCAddHostCandidate_Request) */ {
 public:
  CBroadcast_WebRTCAddHostCandidate_Request();
  virtual ~CBroadcast_WebRTCAddHostCandidate_Request();

  CBroadcast_WebRTCAddHostCandidate_Request(const CBroadcast_WebRTCAddHostCandidate_Request& from);

  inline CBroadcast_WebRTCAddHostCandidate_Request& operator=(const CBroadcast_WebRTCAddHostCandidate_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CBroadcast_WebRTCAddHostCandidate_Request(CBroadcast_WebRTCAddHostCandidate_Request&& from) noexcept
    : CBroadcast_WebRTCAddHostCandidate_Request() {
    *this = ::std::move(from);
  }

  inline CBroadcast_WebRTCAddHostCandidate_Request& operator=(CBroadcast_WebRTCAddHostCandidate_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CBroadcast_WebRTCAddHostCandidate_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBroadcast_WebRTCAddHostCandidate_Request* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_WebRTCAddHostCandidate_Request*>(
               &_CBroadcast_WebRTCAddHostCandidate_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  void Swap(CBroadcast_WebRTCAddHostCandidate_Request* other);
  friend void swap(CBroadcast_WebRTCAddHostCandidate_Request& a, CBroadcast_WebRTCAddHostCandidate_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CBroadcast_WebRTCAddHostCandidate_Request* New() const final {
    return CreateMaybeMessage<CBroadcast_WebRTCAddHostCandidate_Request>(nullptr);
  }

  CBroadcast_WebRTCAddHostCandidate_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CBroadcast_WebRTCAddHostCandidate_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CBroadcast_WebRTCAddHostCandidate_Request& from);
  void MergeFrom(const CBroadcast_WebRTCAddHostCandidate_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_WebRTCAddHostCandidate_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.steam.CBroadcast_WebRTC_Candidate candidate = 2;
  bool has_candidate() const;
  void clear_candidate();
  static const int kCandidateFieldNumber = 2;
  const ::proto::steam::CBroadcast_WebRTC_Candidate& candidate() const;
  ::proto::steam::CBroadcast_WebRTC_Candidate* release_candidate();
  ::proto::steam::CBroadcast_WebRTC_Candidate* mutable_candidate();
  void set_allocated_candidate(::proto::steam::CBroadcast_WebRTC_Candidate* candidate);

  // optional fixed64 webrtc_session_id = 1;
  bool has_webrtc_session_id() const;
  void clear_webrtc_session_id();
  static const int kWebrtcSessionIdFieldNumber = 1;
  ::google::protobuf::uint64 webrtc_session_id() const;
  void set_webrtc_session_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_WebRTCAddHostCandidate_Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::proto::steam::CBroadcast_WebRTC_Candidate* candidate_;
  ::google::protobuf::uint64 webrtc_session_id_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_WebRTCAddHostCandidate_Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_WebRTCAddHostCandidate_Response) */ {
 public:
  CBroadcast_WebRTCAddHostCandidate_Response();
  virtual ~CBroadcast_WebRTCAddHostCandidate_Response();

  CBroadcast_WebRTCAddHostCandidate_Response(const CBroadcast_WebRTCAddHostCandidate_Response& from);

  inline CBroadcast_WebRTCAddHostCandidate_Response& operator=(const CBroadcast_WebRTCAddHostCandidate_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CBroadcast_WebRTCAddHostCandidate_Response(CBroadcast_WebRTCAddHostCandidate_Response&& from) noexcept
    : CBroadcast_WebRTCAddHostCandidate_Response() {
    *this = ::std::move(from);
  }

  inline CBroadcast_WebRTCAddHostCandidate_Response& operator=(CBroadcast_WebRTCAddHostCandidate_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CBroadcast_WebRTCAddHostCandidate_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBroadcast_WebRTCAddHostCandidate_Response* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_WebRTCAddHostCandidate_Response*>(
               &_CBroadcast_WebRTCAddHostCandidate_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  void Swap(CBroadcast_WebRTCAddHostCandidate_Response* other);
  friend void swap(CBroadcast_WebRTCAddHostCandidate_Response& a, CBroadcast_WebRTCAddHostCandidate_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CBroadcast_WebRTCAddHostCandidate_Response* New() const final {
    return CreateMaybeMessage<CBroadcast_WebRTCAddHostCandidate_Response>(nullptr);
  }

  CBroadcast_WebRTCAddHostCandidate_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CBroadcast_WebRTCAddHostCandidate_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CBroadcast_WebRTCAddHostCandidate_Response& from);
  void MergeFrom(const CBroadcast_WebRTCAddHostCandidate_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_WebRTCAddHostCandidate_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_WebRTCAddHostCandidate_Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_WebRTCAddViewerCandidate_Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Request) */ {
 public:
  CBroadcast_WebRTCAddViewerCandidate_Request();
  virtual ~CBroadcast_WebRTCAddViewerCandidate_Request();

  CBroadcast_WebRTCAddViewerCandidate_Request(const CBroadcast_WebRTCAddViewerCandidate_Request& from);

  inline CBroadcast_WebRTCAddViewerCandidate_Request& operator=(const CBroadcast_WebRTCAddViewerCandidate_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CBroadcast_WebRTCAddViewerCandidate_Request(CBroadcast_WebRTCAddViewerCandidate_Request&& from) noexcept
    : CBroadcast_WebRTCAddViewerCandidate_Request() {
    *this = ::std::move(from);
  }

  inline CBroadcast_WebRTCAddViewerCandidate_Request& operator=(CBroadcast_WebRTCAddViewerCandidate_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CBroadcast_WebRTCAddViewerCandidate_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBroadcast_WebRTCAddViewerCandidate_Request* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_WebRTCAddViewerCandidate_Request*>(
               &_CBroadcast_WebRTCAddViewerCandidate_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  void Swap(CBroadcast_WebRTCAddViewerCandidate_Request* other);
  friend void swap(CBroadcast_WebRTCAddViewerCandidate_Request& a, CBroadcast_WebRTCAddViewerCandidate_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CBroadcast_WebRTCAddViewerCandidate_Request* New() const final {
    return CreateMaybeMessage<CBroadcast_WebRTCAddViewerCandidate_Request>(nullptr);
  }

  CBroadcast_WebRTCAddViewerCandidate_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CBroadcast_WebRTCAddViewerCandidate_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CBroadcast_WebRTCAddViewerCandidate_Request& from);
  void MergeFrom(const CBroadcast_WebRTCAddViewerCandidate_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_WebRTCAddViewerCandidate_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.steam.CBroadcast_WebRTC_Candidate candidate = 3;
  bool has_candidate() const;
  void clear_candidate();
  static const int kCandidateFieldNumber = 3;
  const ::proto::steam::CBroadcast_WebRTC_Candidate& candidate() const;
  ::proto::steam::CBroadcast_WebRTC_Candidate* release_candidate();
  ::proto::steam::CBroadcast_WebRTC_Candidate* mutable_candidate();
  void set_allocated_candidate(::proto::steam::CBroadcast_WebRTC_Candidate* candidate);

  // optional fixed64 broadcaster_steamid = 1;
  bool has_broadcaster_steamid() const;
  void clear_broadcaster_steamid();
  static const int kBroadcasterSteamidFieldNumber = 1;
  ::google::protobuf::uint64 broadcaster_steamid() const;
  void set_broadcaster_steamid(::google::protobuf::uint64 value);

  // optional fixed64 webrtc_session_id = 2;
  bool has_webrtc_session_id() const;
  void clear_webrtc_session_id();
  static const int kWebrtcSessionIdFieldNumber = 2;
  ::google::protobuf::uint64 webrtc_session_id() const;
  void set_webrtc_session_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::proto::steam::CBroadcast_WebRTC_Candidate* candidate_;
  ::google::protobuf::uint64 broadcaster_steamid_;
  ::google::protobuf::uint64 webrtc_session_id_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_WebRTCAddViewerCandidate_Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Response) */ {
 public:
  CBroadcast_WebRTCAddViewerCandidate_Response();
  virtual ~CBroadcast_WebRTCAddViewerCandidate_Response();

  CBroadcast_WebRTCAddViewerCandidate_Response(const CBroadcast_WebRTCAddViewerCandidate_Response& from);

  inline CBroadcast_WebRTCAddViewerCandidate_Response& operator=(const CBroadcast_WebRTCAddViewerCandidate_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CBroadcast_WebRTCAddViewerCandidate_Response(CBroadcast_WebRTCAddViewerCandidate_Response&& from) noexcept
    : CBroadcast_WebRTCAddViewerCandidate_Response() {
    *this = ::std::move(from);
  }

  inline CBroadcast_WebRTCAddViewerCandidate_Response& operator=(CBroadcast_WebRTCAddViewerCandidate_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CBroadcast_WebRTCAddViewerCandidate_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBroadcast_WebRTCAddViewerCandidate_Response* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_WebRTCAddViewerCandidate_Response*>(
               &_CBroadcast_WebRTCAddViewerCandidate_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  void Swap(CBroadcast_WebRTCAddViewerCandidate_Response* other);
  friend void swap(CBroadcast_WebRTCAddViewerCandidate_Response& a, CBroadcast_WebRTCAddViewerCandidate_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CBroadcast_WebRTCAddViewerCandidate_Response* New() const final {
    return CreateMaybeMessage<CBroadcast_WebRTCAddViewerCandidate_Response>(nullptr);
  }

  CBroadcast_WebRTCAddViewerCandidate_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CBroadcast_WebRTCAddViewerCandidate_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CBroadcast_WebRTCAddViewerCandidate_Response& from);
  void MergeFrom(const CBroadcast_WebRTCAddViewerCandidate_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_WebRTCAddViewerCandidate_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_WebRTCGetHostCandidates_Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_WebRTCGetHostCandidates_Request) */ {
 public:
  CBroadcast_WebRTCGetHostCandidates_Request();
  virtual ~CBroadcast_WebRTCGetHostCandidates_Request();

  CBroadcast_WebRTCGetHostCandidates_Request(const CBroadcast_WebRTCGetHostCandidates_Request& from);

  inline CBroadcast_WebRTCGetHostCandidates_Request& operator=(const CBroadcast_WebRTCGetHostCandidates_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CBroadcast_WebRTCGetHostCandidates_Request(CBroadcast_WebRTCGetHostCandidates_Request&& from) noexcept
    : CBroadcast_WebRTCGetHostCandidates_Request() {
    *this = ::std::move(from);
  }

  inline CBroadcast_WebRTCGetHostCandidates_Request& operator=(CBroadcast_WebRTCGetHostCandidates_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CBroadcast_WebRTCGetHostCandidates_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBroadcast_WebRTCGetHostCandidates_Request* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_WebRTCGetHostCandidates_Request*>(
               &_CBroadcast_WebRTCGetHostCandidates_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  void Swap(CBroadcast_WebRTCGetHostCandidates_Request* other);
  friend void swap(CBroadcast_WebRTCGetHostCandidates_Request& a, CBroadcast_WebRTCGetHostCandidates_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CBroadcast_WebRTCGetHostCandidates_Request* New() const final {
    return CreateMaybeMessage<CBroadcast_WebRTCGetHostCandidates_Request>(nullptr);
  }

  CBroadcast_WebRTCGetHostCandidates_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CBroadcast_WebRTCGetHostCandidates_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CBroadcast_WebRTCGetHostCandidates_Request& from);
  void MergeFrom(const CBroadcast_WebRTCGetHostCandidates_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_WebRTCGetHostCandidates_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 broadcaster_steamid = 1;
  bool has_broadcaster_steamid() const;
  void clear_broadcaster_steamid();
  static const int kBroadcasterSteamidFieldNumber = 1;
  ::google::protobuf::uint64 broadcaster_steamid() const;
  void set_broadcaster_steamid(::google::protobuf::uint64 value);

  // optional fixed64 webrtc_session_id = 2;
  bool has_webrtc_session_id() const;
  void clear_webrtc_session_id();
  static const int kWebrtcSessionIdFieldNumber = 2;
  ::google::protobuf::uint64 webrtc_session_id() const;
  void set_webrtc_session_id(::google::protobuf::uint64 value);

  // optional uint32 candidate_generation = 3;
  bool has_candidate_generation() const;
  void clear_candidate_generation();
  static const int kCandidateGenerationFieldNumber = 3;
  ::google::protobuf::uint32 candidate_generation() const;
  void set_candidate_generation(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_WebRTCGetHostCandidates_Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 broadcaster_steamid_;
  ::google::protobuf::uint64 webrtc_session_id_;
  ::google::protobuf::uint32 candidate_generation_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_WebRTCGetHostCandidates_Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_WebRTCGetHostCandidates_Response) */ {
 public:
  CBroadcast_WebRTCGetHostCandidates_Response();
  virtual ~CBroadcast_WebRTCGetHostCandidates_Response();

  CBroadcast_WebRTCGetHostCandidates_Response(const CBroadcast_WebRTCGetHostCandidates_Response& from);

  inline CBroadcast_WebRTCGetHostCandidates_Response& operator=(const CBroadcast_WebRTCGetHostCandidates_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CBroadcast_WebRTCGetHostCandidates_Response(CBroadcast_WebRTCGetHostCandidates_Response&& from) noexcept
    : CBroadcast_WebRTCGetHostCandidates_Response() {
    *this = ::std::move(from);
  }

  inline CBroadcast_WebRTCGetHostCandidates_Response& operator=(CBroadcast_WebRTCGetHostCandidates_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CBroadcast_WebRTCGetHostCandidates_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBroadcast_WebRTCGetHostCandidates_Response* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_WebRTCGetHostCandidates_Response*>(
               &_CBroadcast_WebRTCGetHostCandidates_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  void Swap(CBroadcast_WebRTCGetHostCandidates_Response* other);
  friend void swap(CBroadcast_WebRTCGetHostCandidates_Response& a, CBroadcast_WebRTCGetHostCandidates_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CBroadcast_WebRTCGetHostCandidates_Response* New() const final {
    return CreateMaybeMessage<CBroadcast_WebRTCGetHostCandidates_Response>(nullptr);
  }

  CBroadcast_WebRTCGetHostCandidates_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CBroadcast_WebRTCGetHostCandidates_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CBroadcast_WebRTCGetHostCandidates_Response& from);
  void MergeFrom(const CBroadcast_WebRTCGetHostCandidates_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_WebRTCGetHostCandidates_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.steam.CBroadcast_WebRTC_Candidate candidates = 2;
  int candidates_size() const;
  void clear_candidates();
  static const int kCandidatesFieldNumber = 2;
  ::proto::steam::CBroadcast_WebRTC_Candidate* mutable_candidates(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CBroadcast_WebRTC_Candidate >*
      mutable_candidates();
  const ::proto::steam::CBroadcast_WebRTC_Candidate& candidates(int index) const;
  ::proto::steam::CBroadcast_WebRTC_Candidate* add_candidates();
  const ::google::protobuf::RepeatedPtrField< ::proto::steam::CBroadcast_WebRTC_Candidate >&
      candidates() const;

  // optional uint32 candidate_generation = 1;
  bool has_candidate_generation() const;
  void clear_candidate_generation();
  static const int kCandidateGenerationFieldNumber = 1;
  ::google::protobuf::uint32 candidate_generation() const;
  void set_candidate_generation(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_WebRTCGetHostCandidates_Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CBroadcast_WebRTC_Candidate > candidates_;
  ::google::protobuf::uint32 candidate_generation_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_BroadcastViewerState_Notification final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_BroadcastViewerState_Notification) */ {
 public:
  CBroadcast_BroadcastViewerState_Notification();
  virtual ~CBroadcast_BroadcastViewerState_Notification();

  CBroadcast_BroadcastViewerState_Notification(const CBroadcast_BroadcastViewerState_Notification& from);

  inline CBroadcast_BroadcastViewerState_Notification& operator=(const CBroadcast_BroadcastViewerState_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CBroadcast_BroadcastViewerState_Notification(CBroadcast_BroadcastViewerState_Notification&& from) noexcept
    : CBroadcast_BroadcastViewerState_Notification() {
    *this = ::std::move(from);
  }

  inline CBroadcast_BroadcastViewerState_Notification& operator=(CBroadcast_BroadcastViewerState_Notification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CBroadcast_BroadcastViewerState_Notification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBroadcast_BroadcastViewerState_Notification* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_BroadcastViewerState_Notification*>(
               &_CBroadcast_BroadcastViewerState_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  void Swap(CBroadcast_BroadcastViewerState_Notification* other);
  friend void swap(CBroadcast_BroadcastViewerState_Notification& a, CBroadcast_BroadcastViewerState_Notification& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CBroadcast_BroadcastViewerState_Notification* New() const final {
    return CreateMaybeMessage<CBroadcast_BroadcastViewerState_Notification>(nullptr);
  }

  CBroadcast_BroadcastViewerState_Notification* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CBroadcast_BroadcastViewerState_Notification>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CBroadcast_BroadcastViewerState_Notification& from);
  void MergeFrom(const CBroadcast_BroadcastViewerState_Notification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_BroadcastViewerState_Notification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CBroadcast_BroadcastViewerState_Notification_EViewerState EViewerState;
  static const EViewerState k_EViewerNeedsApproval =
    CBroadcast_BroadcastViewerState_Notification_EViewerState_k_EViewerNeedsApproval;
  static const EViewerState k_EViewerWatching =
    CBroadcast_BroadcastViewerState_Notification_EViewerState_k_EViewerWatching;
  static const EViewerState k_EViewerLeft =
    CBroadcast_BroadcastViewerState_Notification_EViewerState_k_EViewerLeft;
  static inline bool EViewerState_IsValid(int value) {
    return CBroadcast_BroadcastViewerState_Notification_EViewerState_IsValid(value);
  }
  static const EViewerState EViewerState_MIN =
    CBroadcast_BroadcastViewerState_Notification_EViewerState_EViewerState_MIN;
  static const EViewerState EViewerState_MAX =
    CBroadcast_BroadcastViewerState_Notification_EViewerState_EViewerState_MAX;
  static const int EViewerState_ARRAYSIZE =
    CBroadcast_BroadcastViewerState_Notification_EViewerState_EViewerState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EViewerState_descriptor() {
    return CBroadcast_BroadcastViewerState_Notification_EViewerState_descriptor();
  }
  static inline const ::std::string& EViewerState_Name(EViewerState value) {
    return CBroadcast_BroadcastViewerState_Notification_EViewerState_Name(value);
  }
  static inline bool EViewerState_Parse(const ::std::string& name,
      EViewerState* value) {
    return CBroadcast_BroadcastViewerState_Notification_EViewerState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  void clear_steamid();
  static const int kSteamidFieldNumber = 1;
  ::google::protobuf::uint64 steamid() const;
  void set_steamid(::google::protobuf::uint64 value);

  // optional .proto.steam.CBroadcast_BroadcastViewerState_Notification.EViewerState state = 2 [default = k_EViewerNeedsApproval];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 2;
  ::proto::steam::CBroadcast_BroadcastViewerState_Notification_EViewerState state() const;
  void set_state(::proto::steam::CBroadcast_BroadcastViewerState_Notification_EViewerState value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_BroadcastViewerState_Notification)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 steamid_;
  int state_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_WaitingBroadcastViewer_Notification final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_WaitingBroadcastViewer_Notification) */ {
 public:
  CBroadcast_WaitingBroadcastViewer_Notification();
  virtual ~CBroadcast_WaitingBroadcastViewer_Notification();

  CBroadcast_WaitingBroadcastViewer_Notification(const CBroadcast_WaitingBroadcastViewer_Notification& from);

  inline CBroadcast_WaitingBroadcastViewer_Notification& operator=(const CBroadcast_WaitingBroadcastViewer_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CBroadcast_WaitingBroadcastViewer_Notification(CBroadcast_WaitingBroadcastViewer_Notification&& from) noexcept
    : CBroadcast_WaitingBroadcastViewer_Notification() {
    *this = ::std::move(from);
  }

  inline CBroadcast_WaitingBroadcastViewer_Notification& operator=(CBroadcast_WaitingBroadcastViewer_Notification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CBroadcast_WaitingBroadcastViewer_Notification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBroadcast_WaitingBroadcastViewer_Notification* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_WaitingBroadcastViewer_Notification*>(
               &_CBroadcast_WaitingBroadcastViewer_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  void Swap(CBroadcast_WaitingBroadcastViewer_Notification* other);
  friend void swap(CBroadcast_WaitingBroadcastViewer_Notification& a, CBroadcast_WaitingBroadcastViewer_Notification& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CBroadcast_WaitingBroadcastViewer_Notification* New() const final {
    return CreateMaybeMessage<CBroadcast_WaitingBroadcastViewer_Notification>(nullptr);
  }

  CBroadcast_WaitingBroadcastViewer_Notification* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CBroadcast_WaitingBroadcastViewer_Notification>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CBroadcast_WaitingBroadcastViewer_Notification& from);
  void MergeFrom(const CBroadcast_WaitingBroadcastViewer_Notification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_WaitingBroadcastViewer_Notification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 broadcast_id = 1;
  bool has_broadcast_id() const;
  void clear_broadcast_id();
  static const int kBroadcastIdFieldNumber = 1;
  ::google::protobuf::uint64 broadcast_id() const;
  void set_broadcast_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_WaitingBroadcastViewer_Notification)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 broadcast_id_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_StopBroadcastUpload_Notification final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_StopBroadcastUpload_Notification) */ {
 public:
  CBroadcast_StopBroadcastUpload_Notification();
  virtual ~CBroadcast_StopBroadcastUpload_Notification();

  CBroadcast_StopBroadcastUpload_Notification(const CBroadcast_StopBroadcastUpload_Notification& from);

  inline CBroadcast_StopBroadcastUpload_Notification& operator=(const CBroadcast_StopBroadcastUpload_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CBroadcast_StopBroadcastUpload_Notification(CBroadcast_StopBroadcastUpload_Notification&& from) noexcept
    : CBroadcast_StopBroadcastUpload_Notification() {
    *this = ::std::move(from);
  }

  inline CBroadcast_StopBroadcastUpload_Notification& operator=(CBroadcast_StopBroadcastUpload_Notification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CBroadcast_StopBroadcastUpload_Notification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBroadcast_StopBroadcastUpload_Notification* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_StopBroadcastUpload_Notification*>(
               &_CBroadcast_StopBroadcastUpload_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  void Swap(CBroadcast_StopBroadcastUpload_Notification* other);
  friend void swap(CBroadcast_StopBroadcastUpload_Notification& a, CBroadcast_StopBroadcastUpload_Notification& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CBroadcast_StopBroadcastUpload_Notification* New() const final {
    return CreateMaybeMessage<CBroadcast_StopBroadcastUpload_Notification>(nullptr);
  }

  CBroadcast_StopBroadcastUpload_Notification* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CBroadcast_StopBroadcastUpload_Notification>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CBroadcast_StopBroadcastUpload_Notification& from);
  void MergeFrom(const CBroadcast_StopBroadcastUpload_Notification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_StopBroadcastUpload_Notification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 broadcast_id = 1;
  bool has_broadcast_id() const;
  void clear_broadcast_id();
  static const int kBroadcastIdFieldNumber = 1;
  ::google::protobuf::uint64 broadcast_id() const;
  void set_broadcast_id(::google::protobuf::uint64 value);

  // optional fixed64 broadcast_relay_id = 2;
  bool has_broadcast_relay_id() const;
  void clear_broadcast_relay_id();
  static const int kBroadcastRelayIdFieldNumber = 2;
  ::google::protobuf::uint64 broadcast_relay_id() const;
  void set_broadcast_relay_id(::google::protobuf::uint64 value);

  // optional uint32 upload_result = 3;
  bool has_upload_result() const;
  void clear_upload_result();
  static const int kUploadResultFieldNumber = 3;
  ::google::protobuf::uint32 upload_result() const;
  void set_upload_result(::google::protobuf::uint32 value);

  // optional bool too_many_poor_uploads = 4;
  bool has_too_many_poor_uploads() const;
  void clear_too_many_poor_uploads();
  static const int kTooManyPoorUploadsFieldNumber = 4;
  bool too_many_poor_uploads() const;
  void set_too_many_poor_uploads(bool value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_StopBroadcastUpload_Notification)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 broadcast_id_;
  ::google::protobuf::uint64 broadcast_relay_id_;
  ::google::protobuf::uint32 upload_result_;
  bool too_many_poor_uploads_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_SessionClosed_Notification final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_SessionClosed_Notification) */ {
 public:
  CBroadcast_SessionClosed_Notification();
  virtual ~CBroadcast_SessionClosed_Notification();

  CBroadcast_SessionClosed_Notification(const CBroadcast_SessionClosed_Notification& from);

  inline CBroadcast_SessionClosed_Notification& operator=(const CBroadcast_SessionClosed_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CBroadcast_SessionClosed_Notification(CBroadcast_SessionClosed_Notification&& from) noexcept
    : CBroadcast_SessionClosed_Notification() {
    *this = ::std::move(from);
  }

  inline CBroadcast_SessionClosed_Notification& operator=(CBroadcast_SessionClosed_Notification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CBroadcast_SessionClosed_Notification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBroadcast_SessionClosed_Notification* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_SessionClosed_Notification*>(
               &_CBroadcast_SessionClosed_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  void Swap(CBroadcast_SessionClosed_Notification* other);
  friend void swap(CBroadcast_SessionClosed_Notification& a, CBroadcast_SessionClosed_Notification& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CBroadcast_SessionClosed_Notification* New() const final {
    return CreateMaybeMessage<CBroadcast_SessionClosed_Notification>(nullptr);
  }

  CBroadcast_SessionClosed_Notification* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CBroadcast_SessionClosed_Notification>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CBroadcast_SessionClosed_Notification& from);
  void MergeFrom(const CBroadcast_SessionClosed_Notification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_SessionClosed_Notification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 broadcast_id = 1;
  bool has_broadcast_id() const;
  void clear_broadcast_id();
  static const int kBroadcastIdFieldNumber = 1;
  ::google::protobuf::uint64 broadcast_id() const;
  void set_broadcast_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_SessionClosed_Notification)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 broadcast_id_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_ViewerBroadcastInvite_Notification final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_ViewerBroadcastInvite_Notification) */ {
 public:
  CBroadcast_ViewerBroadcastInvite_Notification();
  virtual ~CBroadcast_ViewerBroadcastInvite_Notification();

  CBroadcast_ViewerBroadcastInvite_Notification(const CBroadcast_ViewerBroadcastInvite_Notification& from);

  inline CBroadcast_ViewerBroadcastInvite_Notification& operator=(const CBroadcast_ViewerBroadcastInvite_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CBroadcast_ViewerBroadcastInvite_Notification(CBroadcast_ViewerBroadcastInvite_Notification&& from) noexcept
    : CBroadcast_ViewerBroadcastInvite_Notification() {
    *this = ::std::move(from);
  }

  inline CBroadcast_ViewerBroadcastInvite_Notification& operator=(CBroadcast_ViewerBroadcastInvite_Notification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CBroadcast_ViewerBroadcastInvite_Notification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBroadcast_ViewerBroadcastInvite_Notification* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_ViewerBroadcastInvite_Notification*>(
               &_CBroadcast_ViewerBroadcastInvite_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  void Swap(CBroadcast_ViewerBroadcastInvite_Notification* other);
  friend void swap(CBroadcast_ViewerBroadcastInvite_Notification& a, CBroadcast_ViewerBroadcastInvite_Notification& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CBroadcast_ViewerBroadcastInvite_Notification* New() const final {
    return CreateMaybeMessage<CBroadcast_ViewerBroadcastInvite_Notification>(nullptr);
  }

  CBroadcast_ViewerBroadcastInvite_Notification* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CBroadcast_ViewerBroadcastInvite_Notification>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CBroadcast_ViewerBroadcastInvite_Notification& from);
  void MergeFrom(const CBroadcast_ViewerBroadcastInvite_Notification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_ViewerBroadcastInvite_Notification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 broadcaster_steamid = 1;
  bool has_broadcaster_steamid() const;
  void clear_broadcaster_steamid();
  static const int kBroadcasterSteamidFieldNumber = 1;
  ::google::protobuf::uint64 broadcaster_steamid() const;
  void set_broadcaster_steamid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_ViewerBroadcastInvite_Notification)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 broadcaster_steamid_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_BroadcastStatus_Notification final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_BroadcastStatus_Notification) */ {
 public:
  CBroadcast_BroadcastStatus_Notification();
  virtual ~CBroadcast_BroadcastStatus_Notification();

  CBroadcast_BroadcastStatus_Notification(const CBroadcast_BroadcastStatus_Notification& from);

  inline CBroadcast_BroadcastStatus_Notification& operator=(const CBroadcast_BroadcastStatus_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CBroadcast_BroadcastStatus_Notification(CBroadcast_BroadcastStatus_Notification&& from) noexcept
    : CBroadcast_BroadcastStatus_Notification() {
    *this = ::std::move(from);
  }

  inline CBroadcast_BroadcastStatus_Notification& operator=(CBroadcast_BroadcastStatus_Notification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CBroadcast_BroadcastStatus_Notification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBroadcast_BroadcastStatus_Notification* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_BroadcastStatus_Notification*>(
               &_CBroadcast_BroadcastStatus_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  void Swap(CBroadcast_BroadcastStatus_Notification* other);
  friend void swap(CBroadcast_BroadcastStatus_Notification& a, CBroadcast_BroadcastStatus_Notification& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CBroadcast_BroadcastStatus_Notification* New() const final {
    return CreateMaybeMessage<CBroadcast_BroadcastStatus_Notification>(nullptr);
  }

  CBroadcast_BroadcastStatus_Notification* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CBroadcast_BroadcastStatus_Notification>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CBroadcast_BroadcastStatus_Notification& from);
  void MergeFrom(const CBroadcast_BroadcastStatus_Notification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_BroadcastStatus_Notification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 broadcast_id = 1;
  bool has_broadcast_id() const;
  void clear_broadcast_id();
  static const int kBroadcastIdFieldNumber = 1;
  ::google::protobuf::uint64 broadcast_id() const;
  void set_broadcast_id(::google::protobuf::uint64 value);

  // optional int32 num_viewers = 2;
  bool has_num_viewers() const;
  void clear_num_viewers();
  static const int kNumViewersFieldNumber = 2;
  ::google::protobuf::int32 num_viewers() const;
  void set_num_viewers(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_BroadcastStatus_Notification)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 broadcast_id_;
  ::google::protobuf::int32 num_viewers_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_SendThumbnailToRelay_Notification final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_SendThumbnailToRelay_Notification) */ {
 public:
  CBroadcast_SendThumbnailToRelay_Notification();
  virtual ~CBroadcast_SendThumbnailToRelay_Notification();

  CBroadcast_SendThumbnailToRelay_Notification(const CBroadcast_SendThumbnailToRelay_Notification& from);

  inline CBroadcast_SendThumbnailToRelay_Notification& operator=(const CBroadcast_SendThumbnailToRelay_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CBroadcast_SendThumbnailToRelay_Notification(CBroadcast_SendThumbnailToRelay_Notification&& from) noexcept
    : CBroadcast_SendThumbnailToRelay_Notification() {
    *this = ::std::move(from);
  }

  inline CBroadcast_SendThumbnailToRelay_Notification& operator=(CBroadcast_SendThumbnailToRelay_Notification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CBroadcast_SendThumbnailToRelay_Notification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBroadcast_SendThumbnailToRelay_Notification* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_SendThumbnailToRelay_Notification*>(
               &_CBroadcast_SendThumbnailToRelay_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  void Swap(CBroadcast_SendThumbnailToRelay_Notification* other);
  friend void swap(CBroadcast_SendThumbnailToRelay_Notification& a, CBroadcast_SendThumbnailToRelay_Notification& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CBroadcast_SendThumbnailToRelay_Notification* New() const final {
    return CreateMaybeMessage<CBroadcast_SendThumbnailToRelay_Notification>(nullptr);
  }

  CBroadcast_SendThumbnailToRelay_Notification* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CBroadcast_SendThumbnailToRelay_Notification>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CBroadcast_SendThumbnailToRelay_Notification& from);
  void MergeFrom(const CBroadcast_SendThumbnailToRelay_Notification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_SendThumbnailToRelay_Notification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string thumbnail_upload_token = 1;
  bool has_thumbnail_upload_token() const;
  void clear_thumbnail_upload_token();
  static const int kThumbnailUploadTokenFieldNumber = 1;
  const ::std::string& thumbnail_upload_token() const;
  void set_thumbnail_upload_token(const ::std::string& value);
  #if LANG_CXX11
  void set_thumbnail_upload_token(::std::string&& value);
  #endif
  void set_thumbnail_upload_token(const char* value);
  void set_thumbnail_upload_token(const char* value, size_t size);
  ::std::string* mutable_thumbnail_upload_token();
  ::std::string* release_thumbnail_upload_token();
  void set_allocated_thumbnail_upload_token(::std::string* thumbnail_upload_token);

  // optional bytes thumbnail_data = 3;
  bool has_thumbnail_data() const;
  void clear_thumbnail_data();
  static const int kThumbnailDataFieldNumber = 3;
  const ::std::string& thumbnail_data() const;
  void set_thumbnail_data(const ::std::string& value);
  #if LANG_CXX11
  void set_thumbnail_data(::std::string&& value);
  #endif
  void set_thumbnail_data(const char* value);
  void set_thumbnail_data(const void* value, size_t size);
  ::std::string* mutable_thumbnail_data();
  ::std::string* release_thumbnail_data();
  void set_allocated_thumbnail_data(::std::string* thumbnail_data);

  // optional fixed64 thumbnail_broadcast_session_id = 2;
  bool has_thumbnail_broadcast_session_id() const;
  void clear_thumbnail_broadcast_session_id();
  static const int kThumbnailBroadcastSessionIdFieldNumber = 2;
  ::google::protobuf::uint64 thumbnail_broadcast_session_id() const;
  void set_thumbnail_broadcast_session_id(::google::protobuf::uint64 value);

  // optional uint32 thumbnail_width = 4;
  bool has_thumbnail_width() const;
  void clear_thumbnail_width();
  static const int kThumbnailWidthFieldNumber = 4;
  ::google::protobuf::uint32 thumbnail_width() const;
  void set_thumbnail_width(::google::protobuf::uint32 value);

  // optional uint32 thumbnail_height = 5;
  bool has_thumbnail_height() const;
  void clear_thumbnail_height();
  static const int kThumbnailHeightFieldNumber = 5;
  ::google::protobuf::uint32 thumbnail_height() const;
  void set_thumbnail_height(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_SendThumbnailToRelay_Notification)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr thumbnail_upload_token_;
  ::google::protobuf::internal::ArenaStringPtr thumbnail_data_;
  ::google::protobuf::uint64 thumbnail_broadcast_session_id_;
  ::google::protobuf::uint32 thumbnail_width_;
  ::google::protobuf::uint32 thumbnail_height_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_WebRTCNeedTURNServer_Notification final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_WebRTCNeedTURNServer_Notification) */ {
 public:
  CBroadcast_WebRTCNeedTURNServer_Notification();
  virtual ~CBroadcast_WebRTCNeedTURNServer_Notification();

  CBroadcast_WebRTCNeedTURNServer_Notification(const CBroadcast_WebRTCNeedTURNServer_Notification& from);

  inline CBroadcast_WebRTCNeedTURNServer_Notification& operator=(const CBroadcast_WebRTCNeedTURNServer_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CBroadcast_WebRTCNeedTURNServer_Notification(CBroadcast_WebRTCNeedTURNServer_Notification&& from) noexcept
    : CBroadcast_WebRTCNeedTURNServer_Notification() {
    *this = ::std::move(from);
  }

  inline CBroadcast_WebRTCNeedTURNServer_Notification& operator=(CBroadcast_WebRTCNeedTURNServer_Notification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CBroadcast_WebRTCNeedTURNServer_Notification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBroadcast_WebRTCNeedTURNServer_Notification* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_WebRTCNeedTURNServer_Notification*>(
               &_CBroadcast_WebRTCNeedTURNServer_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  void Swap(CBroadcast_WebRTCNeedTURNServer_Notification* other);
  friend void swap(CBroadcast_WebRTCNeedTURNServer_Notification& a, CBroadcast_WebRTCNeedTURNServer_Notification& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CBroadcast_WebRTCNeedTURNServer_Notification* New() const final {
    return CreateMaybeMessage<CBroadcast_WebRTCNeedTURNServer_Notification>(nullptr);
  }

  CBroadcast_WebRTCNeedTURNServer_Notification* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CBroadcast_WebRTCNeedTURNServer_Notification>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CBroadcast_WebRTCNeedTURNServer_Notification& from);
  void MergeFrom(const CBroadcast_WebRTCNeedTURNServer_Notification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_WebRTCNeedTURNServer_Notification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 broadcast_session_id = 1;
  bool has_broadcast_session_id() const;
  void clear_broadcast_session_id();
  static const int kBroadcastSessionIdFieldNumber = 1;
  ::google::protobuf::uint64 broadcast_session_id() const;
  void set_broadcast_session_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_WebRTCNeedTURNServer_Notification)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 broadcast_session_id_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_WebRTCStart_Notification final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_WebRTCStart_Notification) */ {
 public:
  CBroadcast_WebRTCStart_Notification();
  virtual ~CBroadcast_WebRTCStart_Notification();

  CBroadcast_WebRTCStart_Notification(const CBroadcast_WebRTCStart_Notification& from);

  inline CBroadcast_WebRTCStart_Notification& operator=(const CBroadcast_WebRTCStart_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CBroadcast_WebRTCStart_Notification(CBroadcast_WebRTCStart_Notification&& from) noexcept
    : CBroadcast_WebRTCStart_Notification() {
    *this = ::std::move(from);
  }

  inline CBroadcast_WebRTCStart_Notification& operator=(CBroadcast_WebRTCStart_Notification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CBroadcast_WebRTCStart_Notification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBroadcast_WebRTCStart_Notification* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_WebRTCStart_Notification*>(
               &_CBroadcast_WebRTCStart_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  void Swap(CBroadcast_WebRTCStart_Notification* other);
  friend void swap(CBroadcast_WebRTCStart_Notification& a, CBroadcast_WebRTCStart_Notification& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CBroadcast_WebRTCStart_Notification* New() const final {
    return CreateMaybeMessage<CBroadcast_WebRTCStart_Notification>(nullptr);
  }

  CBroadcast_WebRTCStart_Notification* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CBroadcast_WebRTCStart_Notification>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CBroadcast_WebRTCStart_Notification& from);
  void MergeFrom(const CBroadcast_WebRTCStart_Notification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_WebRTCStart_Notification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 broadcast_session_id = 1;
  bool has_broadcast_session_id() const;
  void clear_broadcast_session_id();
  static const int kBroadcastSessionIdFieldNumber = 1;
  ::google::protobuf::uint64 broadcast_session_id() const;
  void set_broadcast_session_id(::google::protobuf::uint64 value);

  // optional fixed64 webrtc_session_id = 2;
  bool has_webrtc_session_id() const;
  void clear_webrtc_session_id();
  static const int kWebrtcSessionIdFieldNumber = 2;
  ::google::protobuf::uint64 webrtc_session_id() const;
  void set_webrtc_session_id(::google::protobuf::uint64 value);

  // optional fixed64 viewer_steamid = 3;
  bool has_viewer_steamid() const;
  void clear_viewer_steamid();
  static const int kViewerSteamidFieldNumber = 3;
  ::google::protobuf::uint64 viewer_steamid() const;
  void set_viewer_steamid(::google::protobuf::uint64 value);

  // optional fixed64 viewer_token = 4;
  bool has_viewer_token() const;
  void clear_viewer_token();
  static const int kViewerTokenFieldNumber = 4;
  ::google::protobuf::uint64 viewer_token() const;
  void set_viewer_token(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_WebRTCStart_Notification)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 broadcast_session_id_;
  ::google::protobuf::uint64 webrtc_session_id_;
  ::google::protobuf::uint64 viewer_steamid_;
  ::google::protobuf::uint64 viewer_token_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_WebRTCSetAnswer_Notification final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_WebRTCSetAnswer_Notification) */ {
 public:
  CBroadcast_WebRTCSetAnswer_Notification();
  virtual ~CBroadcast_WebRTCSetAnswer_Notification();

  CBroadcast_WebRTCSetAnswer_Notification(const CBroadcast_WebRTCSetAnswer_Notification& from);

  inline CBroadcast_WebRTCSetAnswer_Notification& operator=(const CBroadcast_WebRTCSetAnswer_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CBroadcast_WebRTCSetAnswer_Notification(CBroadcast_WebRTCSetAnswer_Notification&& from) noexcept
    : CBroadcast_WebRTCSetAnswer_Notification() {
    *this = ::std::move(from);
  }

  inline CBroadcast_WebRTCSetAnswer_Notification& operator=(CBroadcast_WebRTCSetAnswer_Notification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CBroadcast_WebRTCSetAnswer_Notification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBroadcast_WebRTCSetAnswer_Notification* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_WebRTCSetAnswer_Notification*>(
               &_CBroadcast_WebRTCSetAnswer_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  void Swap(CBroadcast_WebRTCSetAnswer_Notification* other);
  friend void swap(CBroadcast_WebRTCSetAnswer_Notification& a, CBroadcast_WebRTCSetAnswer_Notification& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CBroadcast_WebRTCSetAnswer_Notification* New() const final {
    return CreateMaybeMessage<CBroadcast_WebRTCSetAnswer_Notification>(nullptr);
  }

  CBroadcast_WebRTCSetAnswer_Notification* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CBroadcast_WebRTCSetAnswer_Notification>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CBroadcast_WebRTCSetAnswer_Notification& from);
  void MergeFrom(const CBroadcast_WebRTCSetAnswer_Notification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_WebRTCSetAnswer_Notification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string answer = 3;
  bool has_answer() const;
  void clear_answer();
  static const int kAnswerFieldNumber = 3;
  const ::std::string& answer() const;
  void set_answer(const ::std::string& value);
  #if LANG_CXX11
  void set_answer(::std::string&& value);
  #endif
  void set_answer(const char* value);
  void set_answer(const char* value, size_t size);
  ::std::string* mutable_answer();
  ::std::string* release_answer();
  void set_allocated_answer(::std::string* answer);

  // optional fixed64 broadcast_session_id = 1;
  bool has_broadcast_session_id() const;
  void clear_broadcast_session_id();
  static const int kBroadcastSessionIdFieldNumber = 1;
  ::google::protobuf::uint64 broadcast_session_id() const;
  void set_broadcast_session_id(::google::protobuf::uint64 value);

  // optional fixed64 webrtc_session_id = 2;
  bool has_webrtc_session_id() const;
  void clear_webrtc_session_id();
  static const int kWebrtcSessionIdFieldNumber = 2;
  ::google::protobuf::uint64 webrtc_session_id() const;
  void set_webrtc_session_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_WebRTCSetAnswer_Notification)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr answer_;
  ::google::protobuf::uint64 broadcast_session_id_;
  ::google::protobuf::uint64 webrtc_session_id_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_WebRTCAddViewerCandidate_Notification final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Notification) */ {
 public:
  CBroadcast_WebRTCAddViewerCandidate_Notification();
  virtual ~CBroadcast_WebRTCAddViewerCandidate_Notification();

  CBroadcast_WebRTCAddViewerCandidate_Notification(const CBroadcast_WebRTCAddViewerCandidate_Notification& from);

  inline CBroadcast_WebRTCAddViewerCandidate_Notification& operator=(const CBroadcast_WebRTCAddViewerCandidate_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CBroadcast_WebRTCAddViewerCandidate_Notification(CBroadcast_WebRTCAddViewerCandidate_Notification&& from) noexcept
    : CBroadcast_WebRTCAddViewerCandidate_Notification() {
    *this = ::std::move(from);
  }

  inline CBroadcast_WebRTCAddViewerCandidate_Notification& operator=(CBroadcast_WebRTCAddViewerCandidate_Notification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CBroadcast_WebRTCAddViewerCandidate_Notification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBroadcast_WebRTCAddViewerCandidate_Notification* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_WebRTCAddViewerCandidate_Notification*>(
               &_CBroadcast_WebRTCAddViewerCandidate_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  void Swap(CBroadcast_WebRTCAddViewerCandidate_Notification* other);
  friend void swap(CBroadcast_WebRTCAddViewerCandidate_Notification& a, CBroadcast_WebRTCAddViewerCandidate_Notification& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CBroadcast_WebRTCAddViewerCandidate_Notification* New() const final {
    return CreateMaybeMessage<CBroadcast_WebRTCAddViewerCandidate_Notification>(nullptr);
  }

  CBroadcast_WebRTCAddViewerCandidate_Notification* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CBroadcast_WebRTCAddViewerCandidate_Notification>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CBroadcast_WebRTCAddViewerCandidate_Notification& from);
  void MergeFrom(const CBroadcast_WebRTCAddViewerCandidate_Notification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_WebRTCAddViewerCandidate_Notification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.steam.CBroadcast_WebRTC_Candidate candidate = 3;
  bool has_candidate() const;
  void clear_candidate();
  static const int kCandidateFieldNumber = 3;
  const ::proto::steam::CBroadcast_WebRTC_Candidate& candidate() const;
  ::proto::steam::CBroadcast_WebRTC_Candidate* release_candidate();
  ::proto::steam::CBroadcast_WebRTC_Candidate* mutable_candidate();
  void set_allocated_candidate(::proto::steam::CBroadcast_WebRTC_Candidate* candidate);

  // optional fixed64 broadcast_session_id = 1;
  bool has_broadcast_session_id() const;
  void clear_broadcast_session_id();
  static const int kBroadcastSessionIdFieldNumber = 1;
  ::google::protobuf::uint64 broadcast_session_id() const;
  void set_broadcast_session_id(::google::protobuf::uint64 value);

  // optional fixed64 webrtc_session_id = 2;
  bool has_webrtc_session_id() const;
  void clear_webrtc_session_id();
  static const int kWebrtcSessionIdFieldNumber = 2;
  ::google::protobuf::uint64 webrtc_session_id() const;
  void set_webrtc_session_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Notification)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::proto::steam::CBroadcast_WebRTC_Candidate* candidate_;
  ::google::protobuf::uint64 broadcast_session_id_;
  ::google::protobuf::uint64 webrtc_session_id_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// ===================================================================

class Broadcast_Stub;

class Broadcast : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline Broadcast() {};
 public:
  virtual ~Broadcast();

  typedef Broadcast_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void BeginBroadcastSession(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_BeginBroadcastSession_Request* request,
                       ::proto::steam::CBroadcast_BeginBroadcastSession_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void EndBroadcastSession(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_EndBroadcastSession_Request* request,
                       ::proto::steam::CBroadcast_EndBroadcastSession_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void StartBroadcastUpload(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_StartBroadcastUpload_Request* request,
                       ::proto::steam::CBroadcast_StartBroadcastUpload_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyBroadcastUploadStop(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_NotifyBroadcastUploadStop_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void WatchBroadcast(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_WatchBroadcast_Request* request,
                       ::proto::steam::CBroadcast_WatchBroadcast_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void HeartbeatBroadcast(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_HeartbeatBroadcast_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void StopWatchingBroadcast(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_StopWatchingBroadcast_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetBroadcastStatus(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_GetBroadcastStatus_Request* request,
                       ::proto::steam::CBroadcast_GetBroadcastStatus_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetBroadcastThumbnail(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_GetBroadcastThumbnail_Request* request,
                       ::proto::steam::CBroadcast_GetBroadcastThumbnail_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void InviteToBroadcast(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_InviteToBroadcast_Request* request,
                       ::proto::steam::CBroadcast_InviteToBroadcast_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void SendBroadcastStateToServer(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_SendBroadcastStateToServer_Request* request,
                       ::proto::steam::CBroadcast_SendBroadcastStateToServer_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyBroadcastSessionHeartbeat(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_NotifyBroadcastSessionHeartbeat_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetBroadcastChatInfo(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_GetBroadcastChatInfo_Request* request,
                       ::proto::steam::CBroadcast_GetBroadcastChatInfo_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void PostChatMessage(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_PostChatMessage_Request* request,
                       ::proto::steam::CBroadcast_PostChatMessage_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void MuteBroadcastChatUser(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_MuteBroadcastChatUser_Request* request,
                       ::proto::steam::CBroadcast_MuteBroadcastChatUser_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void RemoveUserChatText(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_RemoveUserChatText_Request* request,
                       ::proto::steam::CBroadcast_RemoveUserChatText_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetBroadcastChatUserNames(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_GetBroadcastChatUserNames_Request* request,
                       ::proto::steam::CBroadcast_GetBroadcastChatUserNames_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void SetRTMPInfo(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_SetRTMPInfo_Request* request,
                       ::proto::steam::CBroadcast_SetRTMPInfo_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetRTMPInfo(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_GetRTMPInfo_Request* request,
                       ::proto::steam::CBroadcast_GetRTMPInfo_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyWebRTCHaveTURNServer(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_WebRTCHaveTURNServer_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void WebRTCStartResult(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_WebRTCStartResult_Request* request,
                       ::proto::steam::CBroadcast_WebRTCStartResult_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void WebRTCStopped(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_WebRTCStopped_Request* request,
                       ::proto::steam::CBroadcast_WebRTCStopped_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void WebRTCSetAnswer(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_WebRTCSetAnswer_Request* request,
                       ::proto::steam::CBroadcast_WebRTCSetAnswer_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void WebRTCLookupTURNServer(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_WebRTCLookupTURNServer_Request* request,
                       ::proto::steam::CBroadcast_WebRTCLookupTURNServer_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void WebRTCAddHostCandidate(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_WebRTCAddHostCandidate_Request* request,
                       ::proto::steam::CBroadcast_WebRTCAddHostCandidate_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void WebRTCAddViewerCandidate(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_WebRTCAddViewerCandidate_Request* request,
                       ::proto::steam::CBroadcast_WebRTCAddViewerCandidate_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void WebRTCGetHostCandidates(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_WebRTCGetHostCandidates_Request* request,
                       ::proto::steam::CBroadcast_WebRTCGetHostCandidates_Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Broadcast);
};

class Broadcast_Stub : public Broadcast {
 public:
  Broadcast_Stub(::google::protobuf::RpcChannel* channel);
  Broadcast_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~Broadcast_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements Broadcast ------------------------------------------

  void BeginBroadcastSession(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_BeginBroadcastSession_Request* request,
                       ::proto::steam::CBroadcast_BeginBroadcastSession_Response* response,
                       ::google::protobuf::Closure* done);
  void EndBroadcastSession(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_EndBroadcastSession_Request* request,
                       ::proto::steam::CBroadcast_EndBroadcastSession_Response* response,
                       ::google::protobuf::Closure* done);
  void StartBroadcastUpload(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_StartBroadcastUpload_Request* request,
                       ::proto::steam::CBroadcast_StartBroadcastUpload_Response* response,
                       ::google::protobuf::Closure* done);
  void NotifyBroadcastUploadStop(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_NotifyBroadcastUploadStop_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void WatchBroadcast(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_WatchBroadcast_Request* request,
                       ::proto::steam::CBroadcast_WatchBroadcast_Response* response,
                       ::google::protobuf::Closure* done);
  void HeartbeatBroadcast(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_HeartbeatBroadcast_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void StopWatchingBroadcast(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_StopWatchingBroadcast_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void GetBroadcastStatus(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_GetBroadcastStatus_Request* request,
                       ::proto::steam::CBroadcast_GetBroadcastStatus_Response* response,
                       ::google::protobuf::Closure* done);
  void GetBroadcastThumbnail(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_GetBroadcastThumbnail_Request* request,
                       ::proto::steam::CBroadcast_GetBroadcastThumbnail_Response* response,
                       ::google::protobuf::Closure* done);
  void InviteToBroadcast(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_InviteToBroadcast_Request* request,
                       ::proto::steam::CBroadcast_InviteToBroadcast_Response* response,
                       ::google::protobuf::Closure* done);
  void SendBroadcastStateToServer(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_SendBroadcastStateToServer_Request* request,
                       ::proto::steam::CBroadcast_SendBroadcastStateToServer_Response* response,
                       ::google::protobuf::Closure* done);
  void NotifyBroadcastSessionHeartbeat(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_NotifyBroadcastSessionHeartbeat_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void GetBroadcastChatInfo(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_GetBroadcastChatInfo_Request* request,
                       ::proto::steam::CBroadcast_GetBroadcastChatInfo_Response* response,
                       ::google::protobuf::Closure* done);
  void PostChatMessage(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_PostChatMessage_Request* request,
                       ::proto::steam::CBroadcast_PostChatMessage_Response* response,
                       ::google::protobuf::Closure* done);
  void MuteBroadcastChatUser(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_MuteBroadcastChatUser_Request* request,
                       ::proto::steam::CBroadcast_MuteBroadcastChatUser_Response* response,
                       ::google::protobuf::Closure* done);
  void RemoveUserChatText(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_RemoveUserChatText_Request* request,
                       ::proto::steam::CBroadcast_RemoveUserChatText_Response* response,
                       ::google::protobuf::Closure* done);
  void GetBroadcastChatUserNames(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_GetBroadcastChatUserNames_Request* request,
                       ::proto::steam::CBroadcast_GetBroadcastChatUserNames_Response* response,
                       ::google::protobuf::Closure* done);
  void SetRTMPInfo(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_SetRTMPInfo_Request* request,
                       ::proto::steam::CBroadcast_SetRTMPInfo_Response* response,
                       ::google::protobuf::Closure* done);
  void GetRTMPInfo(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_GetRTMPInfo_Request* request,
                       ::proto::steam::CBroadcast_GetRTMPInfo_Response* response,
                       ::google::protobuf::Closure* done);
  void NotifyWebRTCHaveTURNServer(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_WebRTCHaveTURNServer_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void WebRTCStartResult(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_WebRTCStartResult_Request* request,
                       ::proto::steam::CBroadcast_WebRTCStartResult_Response* response,
                       ::google::protobuf::Closure* done);
  void WebRTCStopped(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_WebRTCStopped_Request* request,
                       ::proto::steam::CBroadcast_WebRTCStopped_Response* response,
                       ::google::protobuf::Closure* done);
  void WebRTCSetAnswer(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_WebRTCSetAnswer_Request* request,
                       ::proto::steam::CBroadcast_WebRTCSetAnswer_Response* response,
                       ::google::protobuf::Closure* done);
  void WebRTCLookupTURNServer(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_WebRTCLookupTURNServer_Request* request,
                       ::proto::steam::CBroadcast_WebRTCLookupTURNServer_Response* response,
                       ::google::protobuf::Closure* done);
  void WebRTCAddHostCandidate(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_WebRTCAddHostCandidate_Request* request,
                       ::proto::steam::CBroadcast_WebRTCAddHostCandidate_Response* response,
                       ::google::protobuf::Closure* done);
  void WebRTCAddViewerCandidate(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_WebRTCAddViewerCandidate_Request* request,
                       ::proto::steam::CBroadcast_WebRTCAddViewerCandidate_Response* response,
                       ::google::protobuf::Closure* done);
  void WebRTCGetHostCandidates(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_WebRTCGetHostCandidates_Request* request,
                       ::proto::steam::CBroadcast_WebRTCGetHostCandidates_Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Broadcast_Stub);
};


// -------------------------------------------------------------------

class BroadcastClient_Stub;

class BroadcastClient : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline BroadcastClient() {};
 public:
  virtual ~BroadcastClient();

  typedef BroadcastClient_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void NotifyBroadcastViewerState(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_BroadcastViewerState_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyWaitingBroadcastViewer(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_WaitingBroadcastViewer_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyStopBroadcastUpload(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_StopBroadcastUpload_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifySessionClosed(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_SessionClosed_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyViewerBroadcastInvite(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_ViewerBroadcastInvite_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyBroadcastStatus(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_BroadcastStatus_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void SendThumbnailToRelay(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_SendThumbnailToRelay_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyWebRTCNeedTURNServer(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_WebRTCNeedTURNServer_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyWebRTCStart(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_WebRTCStart_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyWebRTCSetAnswer(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_WebRTCSetAnswer_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyWebRTCAddViewerCandidate(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_WebRTCAddViewerCandidate_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(BroadcastClient);
};

class BroadcastClient_Stub : public BroadcastClient {
 public:
  BroadcastClient_Stub(::google::protobuf::RpcChannel* channel);
  BroadcastClient_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~BroadcastClient_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements BroadcastClient ------------------------------------------

  void NotifyBroadcastViewerState(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_BroadcastViewerState_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void NotifyWaitingBroadcastViewer(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_WaitingBroadcastViewer_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void NotifyStopBroadcastUpload(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_StopBroadcastUpload_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void NotifySessionClosed(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_SessionClosed_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void NotifyViewerBroadcastInvite(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_ViewerBroadcastInvite_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void NotifyBroadcastStatus(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_BroadcastStatus_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void SendThumbnailToRelay(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_SendThumbnailToRelay_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void NotifyWebRTCNeedTURNServer(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_WebRTCNeedTURNServer_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void NotifyWebRTCStart(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_WebRTCStart_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void NotifyWebRTCSetAnswer(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_WebRTCSetAnswer_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void NotifyWebRTCAddViewerCandidate(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_WebRTCAddViewerCandidate_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(BroadcastClient_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CBroadcast_BeginBroadcastSession_Request

// optional int32 permission = 1;
inline bool CBroadcast_BeginBroadcastSession_Request::has_permission() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CBroadcast_BeginBroadcastSession_Request::clear_permission() {
  permission_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::int32 CBroadcast_BeginBroadcastSession_Request::permission() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_BeginBroadcastSession_Request.permission)
  return permission_;
}
inline void CBroadcast_BeginBroadcastSession_Request::set_permission(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  permission_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_BeginBroadcastSession_Request.permission)
}

// optional uint64 gameid = 2;
inline bool CBroadcast_BeginBroadcastSession_Request::has_gameid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CBroadcast_BeginBroadcastSession_Request::clear_gameid() {
  gameid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint64 CBroadcast_BeginBroadcastSession_Request::gameid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_BeginBroadcastSession_Request.gameid)
  return gameid_;
}
inline void CBroadcast_BeginBroadcastSession_Request::set_gameid(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  gameid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_BeginBroadcastSession_Request.gameid)
}

// optional uint64 client_instance_id = 3;
inline bool CBroadcast_BeginBroadcastSession_Request::has_client_instance_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CBroadcast_BeginBroadcastSession_Request::clear_client_instance_id() {
  client_instance_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint64 CBroadcast_BeginBroadcastSession_Request::client_instance_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_BeginBroadcastSession_Request.client_instance_id)
  return client_instance_id_;
}
inline void CBroadcast_BeginBroadcastSession_Request::set_client_instance_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  client_instance_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_BeginBroadcastSession_Request.client_instance_id)
}

// optional string title = 4;
inline bool CBroadcast_BeginBroadcastSession_Request::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_BeginBroadcastSession_Request::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CBroadcast_BeginBroadcastSession_Request::title() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_BeginBroadcastSession_Request.title)
  return title_.GetNoArena();
}
inline void CBroadcast_BeginBroadcastSession_Request::set_title(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_BeginBroadcastSession_Request.title)
}
#if LANG_CXX11
inline void CBroadcast_BeginBroadcastSession_Request::set_title(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CBroadcast_BeginBroadcastSession_Request.title)
}
#endif
inline void CBroadcast_BeginBroadcastSession_Request::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CBroadcast_BeginBroadcastSession_Request.title)
}
inline void CBroadcast_BeginBroadcastSession_Request::set_title(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CBroadcast_BeginBroadcastSession_Request.title)
}
inline ::std::string* CBroadcast_BeginBroadcastSession_Request::mutable_title() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_BeginBroadcastSession_Request.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CBroadcast_BeginBroadcastSession_Request::release_title() {
  // @@protoc_insertion_point(field_release:proto.steam.CBroadcast_BeginBroadcastSession_Request.title)
  if (!has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return title_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CBroadcast_BeginBroadcastSession_Request::set_allocated_title(::std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CBroadcast_BeginBroadcastSession_Request.title)
}

// optional uint32 cellid = 5;
inline bool CBroadcast_BeginBroadcastSession_Request::has_cellid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CBroadcast_BeginBroadcastSession_Request::clear_cellid() {
  cellid_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CBroadcast_BeginBroadcastSession_Request::cellid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_BeginBroadcastSession_Request.cellid)
  return cellid_;
}
inline void CBroadcast_BeginBroadcastSession_Request::set_cellid(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  cellid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_BeginBroadcastSession_Request.cellid)
}

// optional uint64 rtmp_token = 6;
inline bool CBroadcast_BeginBroadcastSession_Request::has_rtmp_token() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CBroadcast_BeginBroadcastSession_Request::clear_rtmp_token() {
  rtmp_token_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint64 CBroadcast_BeginBroadcastSession_Request::rtmp_token() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_BeginBroadcastSession_Request.rtmp_token)
  return rtmp_token_;
}
inline void CBroadcast_BeginBroadcastSession_Request::set_rtmp_token(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  rtmp_token_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_BeginBroadcastSession_Request.rtmp_token)
}

// optional bool thumbnail_upload = 7;
inline bool CBroadcast_BeginBroadcastSession_Request::has_thumbnail_upload() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CBroadcast_BeginBroadcastSession_Request::clear_thumbnail_upload() {
  thumbnail_upload_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CBroadcast_BeginBroadcastSession_Request::thumbnail_upload() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_BeginBroadcastSession_Request.thumbnail_upload)
  return thumbnail_upload_;
}
inline void CBroadcast_BeginBroadcastSession_Request::set_thumbnail_upload(bool value) {
  _has_bits_[0] |= 0x00000040u;
  thumbnail_upload_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_BeginBroadcastSession_Request.thumbnail_upload)
}

// -------------------------------------------------------------------

// CBroadcast_BeginBroadcastSession_Response

// optional fixed64 broadcast_id = 1;
inline bool CBroadcast_BeginBroadcastSession_Response::has_broadcast_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CBroadcast_BeginBroadcastSession_Response::clear_broadcast_id() {
  broadcast_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint64 CBroadcast_BeginBroadcastSession_Response::broadcast_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_BeginBroadcastSession_Response.broadcast_id)
  return broadcast_id_;
}
inline void CBroadcast_BeginBroadcastSession_Response::set_broadcast_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  broadcast_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_BeginBroadcastSession_Response.broadcast_id)
}

// optional string thumbnail_upload_address = 2 [(.proto.steam.description) = "Http address to upload the thumbnail data."];
inline bool CBroadcast_BeginBroadcastSession_Response::has_thumbnail_upload_address() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_BeginBroadcastSession_Response::clear_thumbnail_upload_address() {
  thumbnail_upload_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CBroadcast_BeginBroadcastSession_Response::thumbnail_upload_address() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_BeginBroadcastSession_Response.thumbnail_upload_address)
  return thumbnail_upload_address_.GetNoArena();
}
inline void CBroadcast_BeginBroadcastSession_Response::set_thumbnail_upload_address(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  thumbnail_upload_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_BeginBroadcastSession_Response.thumbnail_upload_address)
}
#if LANG_CXX11
inline void CBroadcast_BeginBroadcastSession_Response::set_thumbnail_upload_address(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  thumbnail_upload_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CBroadcast_BeginBroadcastSession_Response.thumbnail_upload_address)
}
#endif
inline void CBroadcast_BeginBroadcastSession_Response::set_thumbnail_upload_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  thumbnail_upload_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CBroadcast_BeginBroadcastSession_Response.thumbnail_upload_address)
}
inline void CBroadcast_BeginBroadcastSession_Response::set_thumbnail_upload_address(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  thumbnail_upload_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CBroadcast_BeginBroadcastSession_Response.thumbnail_upload_address)
}
inline ::std::string* CBroadcast_BeginBroadcastSession_Response::mutable_thumbnail_upload_address() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_BeginBroadcastSession_Response.thumbnail_upload_address)
  return thumbnail_upload_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CBroadcast_BeginBroadcastSession_Response::release_thumbnail_upload_address() {
  // @@protoc_insertion_point(field_release:proto.steam.CBroadcast_BeginBroadcastSession_Response.thumbnail_upload_address)
  if (!has_thumbnail_upload_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return thumbnail_upload_address_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CBroadcast_BeginBroadcastSession_Response::set_allocated_thumbnail_upload_address(::std::string* thumbnail_upload_address) {
  if (thumbnail_upload_address != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  thumbnail_upload_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), thumbnail_upload_address);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CBroadcast_BeginBroadcastSession_Response.thumbnail_upload_address)
}

// optional string thumbnail_upload_token = 3 [(.proto.steam.description) = "token to authorize as broadcaster to upload content to the relay."];
inline bool CBroadcast_BeginBroadcastSession_Response::has_thumbnail_upload_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CBroadcast_BeginBroadcastSession_Response::clear_thumbnail_upload_token() {
  thumbnail_upload_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CBroadcast_BeginBroadcastSession_Response::thumbnail_upload_token() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_BeginBroadcastSession_Response.thumbnail_upload_token)
  return thumbnail_upload_token_.GetNoArena();
}
inline void CBroadcast_BeginBroadcastSession_Response::set_thumbnail_upload_token(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  thumbnail_upload_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_BeginBroadcastSession_Response.thumbnail_upload_token)
}
#if LANG_CXX11
inline void CBroadcast_BeginBroadcastSession_Response::set_thumbnail_upload_token(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  thumbnail_upload_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CBroadcast_BeginBroadcastSession_Response.thumbnail_upload_token)
}
#endif
inline void CBroadcast_BeginBroadcastSession_Response::set_thumbnail_upload_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  thumbnail_upload_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CBroadcast_BeginBroadcastSession_Response.thumbnail_upload_token)
}
inline void CBroadcast_BeginBroadcastSession_Response::set_thumbnail_upload_token(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  thumbnail_upload_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CBroadcast_BeginBroadcastSession_Response.thumbnail_upload_token)
}
inline ::std::string* CBroadcast_BeginBroadcastSession_Response::mutable_thumbnail_upload_token() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_BeginBroadcastSession_Response.thumbnail_upload_token)
  return thumbnail_upload_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CBroadcast_BeginBroadcastSession_Response::release_thumbnail_upload_token() {
  // @@protoc_insertion_point(field_release:proto.steam.CBroadcast_BeginBroadcastSession_Response.thumbnail_upload_token)
  if (!has_thumbnail_upload_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return thumbnail_upload_token_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CBroadcast_BeginBroadcastSession_Response::set_allocated_thumbnail_upload_token(::std::string* thumbnail_upload_token) {
  if (thumbnail_upload_token != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  thumbnail_upload_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), thumbnail_upload_token);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CBroadcast_BeginBroadcastSession_Response.thumbnail_upload_token)
}

// optional uint32 thumbnail_interval_seconds = 4 [(.proto.steam.description) = "how many seconds between thumbnails"];
inline bool CBroadcast_BeginBroadcastSession_Response::has_thumbnail_interval_seconds() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CBroadcast_BeginBroadcastSession_Response::clear_thumbnail_interval_seconds() {
  thumbnail_interval_seconds_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CBroadcast_BeginBroadcastSession_Response::thumbnail_interval_seconds() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_BeginBroadcastSession_Response.thumbnail_interval_seconds)
  return thumbnail_interval_seconds_;
}
inline void CBroadcast_BeginBroadcastSession_Response::set_thumbnail_interval_seconds(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  thumbnail_interval_seconds_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_BeginBroadcastSession_Response.thumbnail_interval_seconds)
}

// optional uint32 heartbeat_interval_seconds = 5 [(.proto.steam.description) = "how many seconds between session heartbeats"];
inline bool CBroadcast_BeginBroadcastSession_Response::has_heartbeat_interval_seconds() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CBroadcast_BeginBroadcastSession_Response::clear_heartbeat_interval_seconds() {
  heartbeat_interval_seconds_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CBroadcast_BeginBroadcastSession_Response::heartbeat_interval_seconds() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_BeginBroadcastSession_Response.heartbeat_interval_seconds)
  return heartbeat_interval_seconds_;
}
inline void CBroadcast_BeginBroadcastSession_Response::set_heartbeat_interval_seconds(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  heartbeat_interval_seconds_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_BeginBroadcastSession_Response.heartbeat_interval_seconds)
}

// -------------------------------------------------------------------

// CBroadcast_EndBroadcastSession_Request

// optional fixed64 broadcast_id = 1;
inline bool CBroadcast_EndBroadcastSession_Request::has_broadcast_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_EndBroadcastSession_Request::clear_broadcast_id() {
  broadcast_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 CBroadcast_EndBroadcastSession_Request::broadcast_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_EndBroadcastSession_Request.broadcast_id)
  return broadcast_id_;
}
inline void CBroadcast_EndBroadcastSession_Request::set_broadcast_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  broadcast_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_EndBroadcastSession_Request.broadcast_id)
}

// -------------------------------------------------------------------

// CBroadcast_EndBroadcastSession_Response

// -------------------------------------------------------------------

// CBroadcast_StartBroadcastUpload_Request

// optional fixed64 broadcast_id = 1;
inline bool CBroadcast_StartBroadcastUpload_Request::has_broadcast_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_StartBroadcastUpload_Request::clear_broadcast_id() {
  broadcast_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 CBroadcast_StartBroadcastUpload_Request::broadcast_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_StartBroadcastUpload_Request.broadcast_id)
  return broadcast_id_;
}
inline void CBroadcast_StartBroadcastUpload_Request::set_broadcast_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  broadcast_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_StartBroadcastUpload_Request.broadcast_id)
}

// optional uint32 cellid = 2;
inline bool CBroadcast_StartBroadcastUpload_Request::has_cellid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CBroadcast_StartBroadcastUpload_Request::clear_cellid() {
  cellid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CBroadcast_StartBroadcastUpload_Request::cellid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_StartBroadcastUpload_Request.cellid)
  return cellid_;
}
inline void CBroadcast_StartBroadcastUpload_Request::set_cellid(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  cellid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_StartBroadcastUpload_Request.cellid)
}

// optional bool as_rtmp = 3;
inline bool CBroadcast_StartBroadcastUpload_Request::has_as_rtmp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CBroadcast_StartBroadcastUpload_Request::clear_as_rtmp() {
  as_rtmp_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CBroadcast_StartBroadcastUpload_Request::as_rtmp() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_StartBroadcastUpload_Request.as_rtmp)
  return as_rtmp_;
}
inline void CBroadcast_StartBroadcastUpload_Request::set_as_rtmp(bool value) {
  _has_bits_[0] |= 0x00000004u;
  as_rtmp_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_StartBroadcastUpload_Request.as_rtmp)
}

// optional uint32 delay_seconds = 4;
inline bool CBroadcast_StartBroadcastUpload_Request::has_delay_seconds() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CBroadcast_StartBroadcastUpload_Request::clear_delay_seconds() {
  delay_seconds_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CBroadcast_StartBroadcastUpload_Request::delay_seconds() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_StartBroadcastUpload_Request.delay_seconds)
  return delay_seconds_;
}
inline void CBroadcast_StartBroadcastUpload_Request::set_delay_seconds(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  delay_seconds_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_StartBroadcastUpload_Request.delay_seconds)
}

// optional uint64 rtmp_token = 5 [default = 0, (.proto.steam.description) = "Only set during RTMP uploads; secret key from the user."];
inline bool CBroadcast_StartBroadcastUpload_Request::has_rtmp_token() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CBroadcast_StartBroadcastUpload_Request::clear_rtmp_token() {
  rtmp_token_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint64 CBroadcast_StartBroadcastUpload_Request::rtmp_token() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_StartBroadcastUpload_Request.rtmp_token)
  return rtmp_token_;
}
inline void CBroadcast_StartBroadcastUpload_Request::set_rtmp_token(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  rtmp_token_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_StartBroadcastUpload_Request.rtmp_token)
}

// optional uint32 upload_ip_address = 6;
inline bool CBroadcast_StartBroadcastUpload_Request::has_upload_ip_address() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CBroadcast_StartBroadcastUpload_Request::clear_upload_ip_address() {
  upload_ip_address_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint32 CBroadcast_StartBroadcastUpload_Request::upload_ip_address() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_StartBroadcastUpload_Request.upload_ip_address)
  return upload_ip_address_;
}
inline void CBroadcast_StartBroadcastUpload_Request::set_upload_ip_address(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  upload_ip_address_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_StartBroadcastUpload_Request.upload_ip_address)
}

// -------------------------------------------------------------------

// CBroadcast_StartBroadcastUpload_Response

// optional string upload_token = 1;
inline bool CBroadcast_StartBroadcastUpload_Response::has_upload_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_StartBroadcastUpload_Response::clear_upload_token() {
  upload_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CBroadcast_StartBroadcastUpload_Response::upload_token() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_StartBroadcastUpload_Response.upload_token)
  return upload_token_.GetNoArena();
}
inline void CBroadcast_StartBroadcastUpload_Response::set_upload_token(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  upload_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_StartBroadcastUpload_Response.upload_token)
}
#if LANG_CXX11
inline void CBroadcast_StartBroadcastUpload_Response::set_upload_token(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  upload_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CBroadcast_StartBroadcastUpload_Response.upload_token)
}
#endif
inline void CBroadcast_StartBroadcastUpload_Response::set_upload_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  upload_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CBroadcast_StartBroadcastUpload_Response.upload_token)
}
inline void CBroadcast_StartBroadcastUpload_Response::set_upload_token(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  upload_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CBroadcast_StartBroadcastUpload_Response.upload_token)
}
inline ::std::string* CBroadcast_StartBroadcastUpload_Response::mutable_upload_token() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_StartBroadcastUpload_Response.upload_token)
  return upload_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CBroadcast_StartBroadcastUpload_Response::release_upload_token() {
  // @@protoc_insertion_point(field_release:proto.steam.CBroadcast_StartBroadcastUpload_Response.upload_token)
  if (!has_upload_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return upload_token_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CBroadcast_StartBroadcastUpload_Response::set_allocated_upload_token(::std::string* upload_token) {
  if (upload_token != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  upload_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), upload_token);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CBroadcast_StartBroadcastUpload_Response.upload_token)
}

// optional string upload_address = 2;
inline bool CBroadcast_StartBroadcastUpload_Response::has_upload_address() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CBroadcast_StartBroadcastUpload_Response::clear_upload_address() {
  upload_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CBroadcast_StartBroadcastUpload_Response::upload_address() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_StartBroadcastUpload_Response.upload_address)
  return upload_address_.GetNoArena();
}
inline void CBroadcast_StartBroadcastUpload_Response::set_upload_address(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  upload_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_StartBroadcastUpload_Response.upload_address)
}
#if LANG_CXX11
inline void CBroadcast_StartBroadcastUpload_Response::set_upload_address(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  upload_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CBroadcast_StartBroadcastUpload_Response.upload_address)
}
#endif
inline void CBroadcast_StartBroadcastUpload_Response::set_upload_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  upload_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CBroadcast_StartBroadcastUpload_Response.upload_address)
}
inline void CBroadcast_StartBroadcastUpload_Response::set_upload_address(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  upload_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CBroadcast_StartBroadcastUpload_Response.upload_address)
}
inline ::std::string* CBroadcast_StartBroadcastUpload_Response::mutable_upload_address() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_StartBroadcastUpload_Response.upload_address)
  return upload_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CBroadcast_StartBroadcastUpload_Response::release_upload_address() {
  // @@protoc_insertion_point(field_release:proto.steam.CBroadcast_StartBroadcastUpload_Response.upload_address)
  if (!has_upload_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return upload_address_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CBroadcast_StartBroadcastUpload_Response::set_allocated_upload_address(::std::string* upload_address) {
  if (upload_address != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  upload_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), upload_address);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CBroadcast_StartBroadcastUpload_Response.upload_address)
}

// optional fixed64 upload_relay_id = 3;
inline bool CBroadcast_StartBroadcastUpload_Response::has_upload_relay_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CBroadcast_StartBroadcastUpload_Response::clear_upload_relay_id() {
  upload_relay_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint64 CBroadcast_StartBroadcastUpload_Response::upload_relay_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_StartBroadcastUpload_Response.upload_relay_id)
  return upload_relay_id_;
}
inline void CBroadcast_StartBroadcastUpload_Response::set_upload_relay_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  upload_relay_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_StartBroadcastUpload_Response.upload_relay_id)
}

// optional string thumbnail_upload_address = 4;
inline bool CBroadcast_StartBroadcastUpload_Response::has_thumbnail_upload_address() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CBroadcast_StartBroadcastUpload_Response::clear_thumbnail_upload_address() {
  thumbnail_upload_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& CBroadcast_StartBroadcastUpload_Response::thumbnail_upload_address() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_StartBroadcastUpload_Response.thumbnail_upload_address)
  return thumbnail_upload_address_.GetNoArena();
}
inline void CBroadcast_StartBroadcastUpload_Response::set_thumbnail_upload_address(const ::std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  thumbnail_upload_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_StartBroadcastUpload_Response.thumbnail_upload_address)
}
#if LANG_CXX11
inline void CBroadcast_StartBroadcastUpload_Response::set_thumbnail_upload_address(::std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  thumbnail_upload_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CBroadcast_StartBroadcastUpload_Response.thumbnail_upload_address)
}
#endif
inline void CBroadcast_StartBroadcastUpload_Response::set_thumbnail_upload_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  thumbnail_upload_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CBroadcast_StartBroadcastUpload_Response.thumbnail_upload_address)
}
inline void CBroadcast_StartBroadcastUpload_Response::set_thumbnail_upload_address(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  thumbnail_upload_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CBroadcast_StartBroadcastUpload_Response.thumbnail_upload_address)
}
inline ::std::string* CBroadcast_StartBroadcastUpload_Response::mutable_thumbnail_upload_address() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_StartBroadcastUpload_Response.thumbnail_upload_address)
  return thumbnail_upload_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CBroadcast_StartBroadcastUpload_Response::release_thumbnail_upload_address() {
  // @@protoc_insertion_point(field_release:proto.steam.CBroadcast_StartBroadcastUpload_Response.thumbnail_upload_address)
  if (!has_thumbnail_upload_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return thumbnail_upload_address_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CBroadcast_StartBroadcastUpload_Response::set_allocated_thumbnail_upload_address(::std::string* thumbnail_upload_address) {
  if (thumbnail_upload_address != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  thumbnail_upload_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), thumbnail_upload_address);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CBroadcast_StartBroadcastUpload_Response.thumbnail_upload_address)
}

// optional uint32 thumbnail_interval_seconds = 5;
inline bool CBroadcast_StartBroadcastUpload_Response::has_thumbnail_interval_seconds() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CBroadcast_StartBroadcastUpload_Response::clear_thumbnail_interval_seconds() {
  thumbnail_interval_seconds_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CBroadcast_StartBroadcastUpload_Response::thumbnail_interval_seconds() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_StartBroadcastUpload_Response.thumbnail_interval_seconds)
  return thumbnail_interval_seconds_;
}
inline void CBroadcast_StartBroadcastUpload_Response::set_thumbnail_interval_seconds(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  thumbnail_interval_seconds_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_StartBroadcastUpload_Response.thumbnail_interval_seconds)
}

// -------------------------------------------------------------------

// CBroadcast_NotifyBroadcastUploadStop_Notification

// optional fixed64 broadcast_upload_id = 1;
inline bool CBroadcast_NotifyBroadcastUploadStop_Notification::has_broadcast_upload_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_NotifyBroadcastUploadStop_Notification::clear_broadcast_upload_id() {
  broadcast_upload_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 CBroadcast_NotifyBroadcastUploadStop_Notification::broadcast_upload_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_NotifyBroadcastUploadStop_Notification.broadcast_upload_id)
  return broadcast_upload_id_;
}
inline void CBroadcast_NotifyBroadcastUploadStop_Notification::set_broadcast_upload_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  broadcast_upload_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_NotifyBroadcastUploadStop_Notification.broadcast_upload_id)
}

// optional uint32 upload_result = 2;
inline bool CBroadcast_NotifyBroadcastUploadStop_Notification::has_upload_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CBroadcast_NotifyBroadcastUploadStop_Notification::clear_upload_result() {
  upload_result_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CBroadcast_NotifyBroadcastUploadStop_Notification::upload_result() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_NotifyBroadcastUploadStop_Notification.upload_result)
  return upload_result_;
}
inline void CBroadcast_NotifyBroadcastUploadStop_Notification::set_upload_result(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  upload_result_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_NotifyBroadcastUploadStop_Notification.upload_result)
}

// -------------------------------------------------------------------

// CBroadcast_WatchBroadcast_Request

// optional fixed64 steamid = 1 [(.proto.steam.description) = "broadcaster steamID."];
inline bool CBroadcast_WatchBroadcast_Request::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_WatchBroadcast_Request::clear_steamid() {
  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 CBroadcast_WatchBroadcast_Request::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WatchBroadcast_Request.steamid)
  return steamid_;
}
inline void CBroadcast_WatchBroadcast_Request::set_steamid(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WatchBroadcast_Request.steamid)
}

// optional fixed64 existing_broadcast_id = 2 [(.proto.steam.description) = "broadcast session ID (optional, rejoin if specified)."];
inline bool CBroadcast_WatchBroadcast_Request::has_existing_broadcast_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CBroadcast_WatchBroadcast_Request::clear_existing_broadcast_id() {
  existing_broadcast_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint64 CBroadcast_WatchBroadcast_Request::existing_broadcast_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WatchBroadcast_Request.existing_broadcast_id)
  return existing_broadcast_id_;
}
inline void CBroadcast_WatchBroadcast_Request::set_existing_broadcast_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  existing_broadcast_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WatchBroadcast_Request.existing_broadcast_id)
}

// optional fixed64 viewer_token = 3 [(.proto.steam.description) = "viewer token received from last WatchRequest call, from browser storage."];
inline bool CBroadcast_WatchBroadcast_Request::has_viewer_token() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CBroadcast_WatchBroadcast_Request::clear_viewer_token() {
  viewer_token_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint64 CBroadcast_WatchBroadcast_Request::viewer_token() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WatchBroadcast_Request.viewer_token)
  return viewer_token_;
}
inline void CBroadcast_WatchBroadcast_Request::set_viewer_token(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  viewer_token_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WatchBroadcast_Request.viewer_token)
}

// optional uint32 client_ip = 4;
inline bool CBroadcast_WatchBroadcast_Request::has_client_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CBroadcast_WatchBroadcast_Request::clear_client_ip() {
  client_ip_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CBroadcast_WatchBroadcast_Request::client_ip() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WatchBroadcast_Request.client_ip)
  return client_ip_;
}
inline void CBroadcast_WatchBroadcast_Request::set_client_ip(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  client_ip_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WatchBroadcast_Request.client_ip)
}

// optional uint32 client_cell = 5;
inline bool CBroadcast_WatchBroadcast_Request::has_client_cell() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CBroadcast_WatchBroadcast_Request::clear_client_cell() {
  client_cell_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CBroadcast_WatchBroadcast_Request::client_cell() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WatchBroadcast_Request.client_cell)
  return client_cell_;
}
inline void CBroadcast_WatchBroadcast_Request::set_client_cell(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  client_cell_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WatchBroadcast_Request.client_cell)
}

// optional .proto.steam.EBroadcastWatchLocation watch_location = 6 [default = k_EBroadcastWatchLocation_Invalid];
inline bool CBroadcast_WatchBroadcast_Request::has_watch_location() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CBroadcast_WatchBroadcast_Request::clear_watch_location() {
  watch_location_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::proto::steam::EBroadcastWatchLocation CBroadcast_WatchBroadcast_Request::watch_location() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WatchBroadcast_Request.watch_location)
  return static_cast< ::proto::steam::EBroadcastWatchLocation >(watch_location_);
}
inline void CBroadcast_WatchBroadcast_Request::set_watch_location(::proto::steam::EBroadcastWatchLocation value) {
  assert(::proto::steam::EBroadcastWatchLocation_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  watch_location_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WatchBroadcast_Request.watch_location)
}

// optional bool is_webrtc = 7;
inline bool CBroadcast_WatchBroadcast_Request::has_is_webrtc() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CBroadcast_WatchBroadcast_Request::clear_is_webrtc() {
  is_webrtc_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CBroadcast_WatchBroadcast_Request::is_webrtc() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WatchBroadcast_Request.is_webrtc)
  return is_webrtc_;
}
inline void CBroadcast_WatchBroadcast_Request::set_is_webrtc(bool value) {
  _has_bits_[0] |= 0x00000040u;
  is_webrtc_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WatchBroadcast_Request.is_webrtc)
}

// -------------------------------------------------------------------

// CBroadcast_WatchBroadcast_Response

// optional .proto.steam.CBroadcast_WatchBroadcast_Response.EWatchResponse response = 1 [default = k_EWatchResponseReady];
inline bool CBroadcast_WatchBroadcast_Response::has_response() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CBroadcast_WatchBroadcast_Response::clear_response() {
  response_ = 1;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::proto::steam::CBroadcast_WatchBroadcast_Response_EWatchResponse CBroadcast_WatchBroadcast_Response::response() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WatchBroadcast_Response.response)
  return static_cast< ::proto::steam::CBroadcast_WatchBroadcast_Response_EWatchResponse >(response_);
}
inline void CBroadcast_WatchBroadcast_Response::set_response(::proto::steam::CBroadcast_WatchBroadcast_Response_EWatchResponse value) {
  assert(::proto::steam::CBroadcast_WatchBroadcast_Response_EWatchResponse_IsValid(value));
  _has_bits_[0] |= 0x00010000u;
  response_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WatchBroadcast_Response.response)
}

// optional string mpd_url = 2;
inline bool CBroadcast_WatchBroadcast_Response::has_mpd_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_WatchBroadcast_Response::clear_mpd_url() {
  mpd_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CBroadcast_WatchBroadcast_Response::mpd_url() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WatchBroadcast_Response.mpd_url)
  return mpd_url_.GetNoArena();
}
inline void CBroadcast_WatchBroadcast_Response::set_mpd_url(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  mpd_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WatchBroadcast_Response.mpd_url)
}
#if LANG_CXX11
inline void CBroadcast_WatchBroadcast_Response::set_mpd_url(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  mpd_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CBroadcast_WatchBroadcast_Response.mpd_url)
}
#endif
inline void CBroadcast_WatchBroadcast_Response::set_mpd_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  mpd_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CBroadcast_WatchBroadcast_Response.mpd_url)
}
inline void CBroadcast_WatchBroadcast_Response::set_mpd_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  mpd_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CBroadcast_WatchBroadcast_Response.mpd_url)
}
inline ::std::string* CBroadcast_WatchBroadcast_Response::mutable_mpd_url() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_WatchBroadcast_Response.mpd_url)
  return mpd_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CBroadcast_WatchBroadcast_Response::release_mpd_url() {
  // @@protoc_insertion_point(field_release:proto.steam.CBroadcast_WatchBroadcast_Response.mpd_url)
  if (!has_mpd_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return mpd_url_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CBroadcast_WatchBroadcast_Response::set_allocated_mpd_url(::std::string* mpd_url) {
  if (mpd_url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mpd_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mpd_url);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CBroadcast_WatchBroadcast_Response.mpd_url)
}

// optional fixed64 broadcast_id = 3;
inline bool CBroadcast_WatchBroadcast_Response::has_broadcast_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CBroadcast_WatchBroadcast_Response::clear_broadcast_id() {
  broadcast_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint64 CBroadcast_WatchBroadcast_Response::broadcast_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WatchBroadcast_Response.broadcast_id)
  return broadcast_id_;
}
inline void CBroadcast_WatchBroadcast_Response::set_broadcast_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  broadcast_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WatchBroadcast_Response.broadcast_id)
}

// optional uint64 gameid = 4;
inline bool CBroadcast_WatchBroadcast_Response::has_gameid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CBroadcast_WatchBroadcast_Response::clear_gameid() {
  gameid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::uint64 CBroadcast_WatchBroadcast_Response::gameid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WatchBroadcast_Response.gameid)
  return gameid_;
}
inline void CBroadcast_WatchBroadcast_Response::set_gameid(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  gameid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WatchBroadcast_Response.gameid)
}

// optional string title = 5;
inline bool CBroadcast_WatchBroadcast_Response::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CBroadcast_WatchBroadcast_Response::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CBroadcast_WatchBroadcast_Response::title() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WatchBroadcast_Response.title)
  return title_.GetNoArena();
}
inline void CBroadcast_WatchBroadcast_Response::set_title(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WatchBroadcast_Response.title)
}
#if LANG_CXX11
inline void CBroadcast_WatchBroadcast_Response::set_title(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CBroadcast_WatchBroadcast_Response.title)
}
#endif
inline void CBroadcast_WatchBroadcast_Response::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CBroadcast_WatchBroadcast_Response.title)
}
inline void CBroadcast_WatchBroadcast_Response::set_title(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CBroadcast_WatchBroadcast_Response.title)
}
inline ::std::string* CBroadcast_WatchBroadcast_Response::mutable_title() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_WatchBroadcast_Response.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CBroadcast_WatchBroadcast_Response::release_title() {
  // @@protoc_insertion_point(field_release:proto.steam.CBroadcast_WatchBroadcast_Response.title)
  if (!has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return title_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CBroadcast_WatchBroadcast_Response::set_allocated_title(::std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CBroadcast_WatchBroadcast_Response.title)
}

// optional uint32 num_viewers = 6;
inline bool CBroadcast_WatchBroadcast_Response::has_num_viewers() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CBroadcast_WatchBroadcast_Response::clear_num_viewers() {
  num_viewers_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::google::protobuf::uint32 CBroadcast_WatchBroadcast_Response::num_viewers() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WatchBroadcast_Response.num_viewers)
  return num_viewers_;
}
inline void CBroadcast_WatchBroadcast_Response::set_num_viewers(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  num_viewers_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WatchBroadcast_Response.num_viewers)
}

// optional int32 permission = 7;
inline bool CBroadcast_WatchBroadcast_Response::has_permission() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CBroadcast_WatchBroadcast_Response::clear_permission() {
  permission_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::google::protobuf::int32 CBroadcast_WatchBroadcast_Response::permission() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WatchBroadcast_Response.permission)
  return permission_;
}
inline void CBroadcast_WatchBroadcast_Response::set_permission(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  permission_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WatchBroadcast_Response.permission)
}

// optional bool is_rtmp = 8;
inline bool CBroadcast_WatchBroadcast_Response::has_is_rtmp() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CBroadcast_WatchBroadcast_Response::clear_is_rtmp() {
  is_rtmp_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool CBroadcast_WatchBroadcast_Response::is_rtmp() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WatchBroadcast_Response.is_rtmp)
  return is_rtmp_;
}
inline void CBroadcast_WatchBroadcast_Response::set_is_rtmp(bool value) {
  _has_bits_[0] |= 0x00001000u;
  is_rtmp_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WatchBroadcast_Response.is_rtmp)
}

// optional int32 seconds_delay = 9;
inline bool CBroadcast_WatchBroadcast_Response::has_seconds_delay() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CBroadcast_WatchBroadcast_Response::clear_seconds_delay() {
  seconds_delay_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::google::protobuf::int32 CBroadcast_WatchBroadcast_Response::seconds_delay() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WatchBroadcast_Response.seconds_delay)
  return seconds_delay_;
}
inline void CBroadcast_WatchBroadcast_Response::set_seconds_delay(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  seconds_delay_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WatchBroadcast_Response.seconds_delay)
}

// optional fixed64 viewer_token = 10;
inline bool CBroadcast_WatchBroadcast_Response::has_viewer_token() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CBroadcast_WatchBroadcast_Response::clear_viewer_token() {
  viewer_token_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000400u;
}
inline ::google::protobuf::uint64 CBroadcast_WatchBroadcast_Response::viewer_token() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WatchBroadcast_Response.viewer_token)
  return viewer_token_;
}
inline void CBroadcast_WatchBroadcast_Response::set_viewer_token(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000400u;
  viewer_token_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WatchBroadcast_Response.viewer_token)
}

// optional string hls_m3u8_master_url = 11;
inline bool CBroadcast_WatchBroadcast_Response::has_hls_m3u8_master_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CBroadcast_WatchBroadcast_Response::clear_hls_m3u8_master_url() {
  hls_m3u8_master_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& CBroadcast_WatchBroadcast_Response::hls_m3u8_master_url() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WatchBroadcast_Response.hls_m3u8_master_url)
  return hls_m3u8_master_url_.GetNoArena();
}
inline void CBroadcast_WatchBroadcast_Response::set_hls_m3u8_master_url(const ::std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  hls_m3u8_master_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WatchBroadcast_Response.hls_m3u8_master_url)
}
#if LANG_CXX11
inline void CBroadcast_WatchBroadcast_Response::set_hls_m3u8_master_url(::std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  hls_m3u8_master_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CBroadcast_WatchBroadcast_Response.hls_m3u8_master_url)
}
#endif
inline void CBroadcast_WatchBroadcast_Response::set_hls_m3u8_master_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  hls_m3u8_master_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CBroadcast_WatchBroadcast_Response.hls_m3u8_master_url)
}
inline void CBroadcast_WatchBroadcast_Response::set_hls_m3u8_master_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  hls_m3u8_master_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CBroadcast_WatchBroadcast_Response.hls_m3u8_master_url)
}
inline ::std::string* CBroadcast_WatchBroadcast_Response::mutable_hls_m3u8_master_url() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_WatchBroadcast_Response.hls_m3u8_master_url)
  return hls_m3u8_master_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CBroadcast_WatchBroadcast_Response::release_hls_m3u8_master_url() {
  // @@protoc_insertion_point(field_release:proto.steam.CBroadcast_WatchBroadcast_Response.hls_m3u8_master_url)
  if (!has_hls_m3u8_master_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return hls_m3u8_master_url_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CBroadcast_WatchBroadcast_Response::set_allocated_hls_m3u8_master_url(::std::string* hls_m3u8_master_url) {
  if (hls_m3u8_master_url != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  hls_m3u8_master_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hls_m3u8_master_url);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CBroadcast_WatchBroadcast_Response.hls_m3u8_master_url)
}

// optional int32 heartbeat_interval = 12;
inline bool CBroadcast_WatchBroadcast_Response::has_heartbeat_interval() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CBroadcast_WatchBroadcast_Response::clear_heartbeat_interval() {
  heartbeat_interval_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::google::protobuf::int32 CBroadcast_WatchBroadcast_Response::heartbeat_interval() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WatchBroadcast_Response.heartbeat_interval)
  return heartbeat_interval_;
}
inline void CBroadcast_WatchBroadcast_Response::set_heartbeat_interval(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00008000u;
  heartbeat_interval_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WatchBroadcast_Response.heartbeat_interval)
}

// optional string thumbnail_url = 13;
inline bool CBroadcast_WatchBroadcast_Response::has_thumbnail_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CBroadcast_WatchBroadcast_Response::clear_thumbnail_url() {
  thumbnail_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::std::string& CBroadcast_WatchBroadcast_Response::thumbnail_url() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WatchBroadcast_Response.thumbnail_url)
  return thumbnail_url_.GetNoArena();
}
inline void CBroadcast_WatchBroadcast_Response::set_thumbnail_url(const ::std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  thumbnail_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WatchBroadcast_Response.thumbnail_url)
}
#if LANG_CXX11
inline void CBroadcast_WatchBroadcast_Response::set_thumbnail_url(::std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  thumbnail_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CBroadcast_WatchBroadcast_Response.thumbnail_url)
}
#endif
inline void CBroadcast_WatchBroadcast_Response::set_thumbnail_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  thumbnail_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CBroadcast_WatchBroadcast_Response.thumbnail_url)
}
inline void CBroadcast_WatchBroadcast_Response::set_thumbnail_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  thumbnail_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CBroadcast_WatchBroadcast_Response.thumbnail_url)
}
inline ::std::string* CBroadcast_WatchBroadcast_Response::mutable_thumbnail_url() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_WatchBroadcast_Response.thumbnail_url)
  return thumbnail_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CBroadcast_WatchBroadcast_Response::release_thumbnail_url() {
  // @@protoc_insertion_point(field_release:proto.steam.CBroadcast_WatchBroadcast_Response.thumbnail_url)
  if (!has_thumbnail_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return thumbnail_url_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CBroadcast_WatchBroadcast_Response::set_allocated_thumbnail_url(::std::string* thumbnail_url) {
  if (thumbnail_url != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  thumbnail_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), thumbnail_url);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CBroadcast_WatchBroadcast_Response.thumbnail_url)
}

// optional bool is_webrtc = 14;
inline bool CBroadcast_WatchBroadcast_Response::has_is_webrtc() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CBroadcast_WatchBroadcast_Response::clear_is_webrtc() {
  is_webrtc_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool CBroadcast_WatchBroadcast_Response::is_webrtc() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WatchBroadcast_Response.is_webrtc)
  return is_webrtc_;
}
inline void CBroadcast_WatchBroadcast_Response::set_is_webrtc(bool value) {
  _has_bits_[0] |= 0x00002000u;
  is_webrtc_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WatchBroadcast_Response.is_webrtc)
}

// optional fixed64 webrtc_session_id = 15;
inline bool CBroadcast_WatchBroadcast_Response::has_webrtc_session_id() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CBroadcast_WatchBroadcast_Response::clear_webrtc_session_id() {
  webrtc_session_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00004000u;
}
inline ::google::protobuf::uint64 CBroadcast_WatchBroadcast_Response::webrtc_session_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WatchBroadcast_Response.webrtc_session_id)
  return webrtc_session_id_;
}
inline void CBroadcast_WatchBroadcast_Response::set_webrtc_session_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00004000u;
  webrtc_session_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WatchBroadcast_Response.webrtc_session_id)
}

// optional string webrtc_offer_sdp = 16;
inline bool CBroadcast_WatchBroadcast_Response::has_webrtc_offer_sdp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CBroadcast_WatchBroadcast_Response::clear_webrtc_offer_sdp() {
  webrtc_offer_sdp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::std::string& CBroadcast_WatchBroadcast_Response::webrtc_offer_sdp() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WatchBroadcast_Response.webrtc_offer_sdp)
  return webrtc_offer_sdp_.GetNoArena();
}
inline void CBroadcast_WatchBroadcast_Response::set_webrtc_offer_sdp(const ::std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  webrtc_offer_sdp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WatchBroadcast_Response.webrtc_offer_sdp)
}
#if LANG_CXX11
inline void CBroadcast_WatchBroadcast_Response::set_webrtc_offer_sdp(::std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  webrtc_offer_sdp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CBroadcast_WatchBroadcast_Response.webrtc_offer_sdp)
}
#endif
inline void CBroadcast_WatchBroadcast_Response::set_webrtc_offer_sdp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  webrtc_offer_sdp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CBroadcast_WatchBroadcast_Response.webrtc_offer_sdp)
}
inline void CBroadcast_WatchBroadcast_Response::set_webrtc_offer_sdp(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  webrtc_offer_sdp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CBroadcast_WatchBroadcast_Response.webrtc_offer_sdp)
}
inline ::std::string* CBroadcast_WatchBroadcast_Response::mutable_webrtc_offer_sdp() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_WatchBroadcast_Response.webrtc_offer_sdp)
  return webrtc_offer_sdp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CBroadcast_WatchBroadcast_Response::release_webrtc_offer_sdp() {
  // @@protoc_insertion_point(field_release:proto.steam.CBroadcast_WatchBroadcast_Response.webrtc_offer_sdp)
  if (!has_webrtc_offer_sdp()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return webrtc_offer_sdp_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CBroadcast_WatchBroadcast_Response::set_allocated_webrtc_offer_sdp(::std::string* webrtc_offer_sdp) {
  if (webrtc_offer_sdp != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  webrtc_offer_sdp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), webrtc_offer_sdp);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CBroadcast_WatchBroadcast_Response.webrtc_offer_sdp)
}

// optional string webrtc_turn_server = 17;
inline bool CBroadcast_WatchBroadcast_Response::has_webrtc_turn_server() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CBroadcast_WatchBroadcast_Response::clear_webrtc_turn_server() {
  webrtc_turn_server_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::std::string& CBroadcast_WatchBroadcast_Response::webrtc_turn_server() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WatchBroadcast_Response.webrtc_turn_server)
  return webrtc_turn_server_.GetNoArena();
}
inline void CBroadcast_WatchBroadcast_Response::set_webrtc_turn_server(const ::std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  webrtc_turn_server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WatchBroadcast_Response.webrtc_turn_server)
}
#if LANG_CXX11
inline void CBroadcast_WatchBroadcast_Response::set_webrtc_turn_server(::std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  webrtc_turn_server_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CBroadcast_WatchBroadcast_Response.webrtc_turn_server)
}
#endif
inline void CBroadcast_WatchBroadcast_Response::set_webrtc_turn_server(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  webrtc_turn_server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CBroadcast_WatchBroadcast_Response.webrtc_turn_server)
}
inline void CBroadcast_WatchBroadcast_Response::set_webrtc_turn_server(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  webrtc_turn_server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CBroadcast_WatchBroadcast_Response.webrtc_turn_server)
}
inline ::std::string* CBroadcast_WatchBroadcast_Response::mutable_webrtc_turn_server() {
  _has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_WatchBroadcast_Response.webrtc_turn_server)
  return webrtc_turn_server_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CBroadcast_WatchBroadcast_Response::release_webrtc_turn_server() {
  // @@protoc_insertion_point(field_release:proto.steam.CBroadcast_WatchBroadcast_Response.webrtc_turn_server)
  if (!has_webrtc_turn_server()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return webrtc_turn_server_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CBroadcast_WatchBroadcast_Response::set_allocated_webrtc_turn_server(::std::string* webrtc_turn_server) {
  if (webrtc_turn_server != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  webrtc_turn_server_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), webrtc_turn_server);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CBroadcast_WatchBroadcast_Response.webrtc_turn_server)
}

// -------------------------------------------------------------------

// CBroadcast_HeartbeatBroadcast_Notification

// optional fixed64 steamid = 1 [(.proto.steam.description) = "broadcaster steamID."];
inline bool CBroadcast_HeartbeatBroadcast_Notification::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_HeartbeatBroadcast_Notification::clear_steamid() {
  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 CBroadcast_HeartbeatBroadcast_Notification::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_HeartbeatBroadcast_Notification.steamid)
  return steamid_;
}
inline void CBroadcast_HeartbeatBroadcast_Notification::set_steamid(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_HeartbeatBroadcast_Notification.steamid)
}

// optional fixed64 broadcast_id = 2 [(.proto.steam.description) = "broadcast session ID."];
inline bool CBroadcast_HeartbeatBroadcast_Notification::has_broadcast_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CBroadcast_HeartbeatBroadcast_Notification::clear_broadcast_id() {
  broadcast_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint64 CBroadcast_HeartbeatBroadcast_Notification::broadcast_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_HeartbeatBroadcast_Notification.broadcast_id)
  return broadcast_id_;
}
inline void CBroadcast_HeartbeatBroadcast_Notification::set_broadcast_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  broadcast_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_HeartbeatBroadcast_Notification.broadcast_id)
}

// optional fixed64 viewer_token = 3 [(.proto.steam.description) = "viewer token received from last WatchRequest call, from browser storage."];
inline bool CBroadcast_HeartbeatBroadcast_Notification::has_viewer_token() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CBroadcast_HeartbeatBroadcast_Notification::clear_viewer_token() {
  viewer_token_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint64 CBroadcast_HeartbeatBroadcast_Notification::viewer_token() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_HeartbeatBroadcast_Notification.viewer_token)
  return viewer_token_;
}
inline void CBroadcast_HeartbeatBroadcast_Notification::set_viewer_token(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  viewer_token_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_HeartbeatBroadcast_Notification.viewer_token)
}

// optional uint32 representation = 4 [(.proto.steam.description) = "video stream representation watching"];
inline bool CBroadcast_HeartbeatBroadcast_Notification::has_representation() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CBroadcast_HeartbeatBroadcast_Notification::clear_representation() {
  representation_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CBroadcast_HeartbeatBroadcast_Notification::representation() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_HeartbeatBroadcast_Notification.representation)
  return representation_;
}
inline void CBroadcast_HeartbeatBroadcast_Notification::set_representation(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  representation_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_HeartbeatBroadcast_Notification.representation)
}

// -------------------------------------------------------------------

// CBroadcast_StopWatchingBroadcast_Notification

// optional fixed64 steamid = 1 [(.proto.steam.description) = "broadcaster steamID."];
inline bool CBroadcast_StopWatchingBroadcast_Notification::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_StopWatchingBroadcast_Notification::clear_steamid() {
  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 CBroadcast_StopWatchingBroadcast_Notification::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_StopWatchingBroadcast_Notification.steamid)
  return steamid_;
}
inline void CBroadcast_StopWatchingBroadcast_Notification::set_steamid(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_StopWatchingBroadcast_Notification.steamid)
}

// optional fixed64 broadcast_id = 2 [(.proto.steam.description) = "broadcast session ID."];
inline bool CBroadcast_StopWatchingBroadcast_Notification::has_broadcast_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CBroadcast_StopWatchingBroadcast_Notification::clear_broadcast_id() {
  broadcast_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint64 CBroadcast_StopWatchingBroadcast_Notification::broadcast_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_StopWatchingBroadcast_Notification.broadcast_id)
  return broadcast_id_;
}
inline void CBroadcast_StopWatchingBroadcast_Notification::set_broadcast_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  broadcast_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_StopWatchingBroadcast_Notification.broadcast_id)
}

// optional fixed64 viewer_token = 3 [(.proto.steam.description) = "viewer token received from last WatchRequest call, from browser storage."];
inline bool CBroadcast_StopWatchingBroadcast_Notification::has_viewer_token() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CBroadcast_StopWatchingBroadcast_Notification::clear_viewer_token() {
  viewer_token_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint64 CBroadcast_StopWatchingBroadcast_Notification::viewer_token() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_StopWatchingBroadcast_Notification.viewer_token)
  return viewer_token_;
}
inline void CBroadcast_StopWatchingBroadcast_Notification::set_viewer_token(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  viewer_token_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_StopWatchingBroadcast_Notification.viewer_token)
}

// -------------------------------------------------------------------

// CBroadcast_GetBroadcastStatus_Request

// optional fixed64 steamid = 1 [(.proto.steam.description) = "broadcaster steamID."];
inline bool CBroadcast_GetBroadcastStatus_Request::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_GetBroadcastStatus_Request::clear_steamid() {
  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 CBroadcast_GetBroadcastStatus_Request::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastStatus_Request.steamid)
  return steamid_;
}
inline void CBroadcast_GetBroadcastStatus_Request::set_steamid(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetBroadcastStatus_Request.steamid)
}

// optional fixed64 broadcast_id = 2 [(.proto.steam.description) = "broadcast session ID to proof that user is allowed to see details."];
inline bool CBroadcast_GetBroadcastStatus_Request::has_broadcast_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CBroadcast_GetBroadcastStatus_Request::clear_broadcast_id() {
  broadcast_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint64 CBroadcast_GetBroadcastStatus_Request::broadcast_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastStatus_Request.broadcast_id)
  return broadcast_id_;
}
inline void CBroadcast_GetBroadcastStatus_Request::set_broadcast_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  broadcast_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetBroadcastStatus_Request.broadcast_id)
}

// -------------------------------------------------------------------

// CBroadcast_GetBroadcastStatus_Response

// optional uint64 gameid = 1;
inline bool CBroadcast_GetBroadcastStatus_Response::has_gameid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CBroadcast_GetBroadcastStatus_Response::clear_gameid() {
  gameid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint64 CBroadcast_GetBroadcastStatus_Response::gameid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastStatus_Response.gameid)
  return gameid_;
}
inline void CBroadcast_GetBroadcastStatus_Response::set_gameid(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  gameid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetBroadcastStatus_Response.gameid)
}

// optional string title = 2;
inline bool CBroadcast_GetBroadcastStatus_Response::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_GetBroadcastStatus_Response::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CBroadcast_GetBroadcastStatus_Response::title() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastStatus_Response.title)
  return title_.GetNoArena();
}
inline void CBroadcast_GetBroadcastStatus_Response::set_title(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetBroadcastStatus_Response.title)
}
#if LANG_CXX11
inline void CBroadcast_GetBroadcastStatus_Response::set_title(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CBroadcast_GetBroadcastStatus_Response.title)
}
#endif
inline void CBroadcast_GetBroadcastStatus_Response::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CBroadcast_GetBroadcastStatus_Response.title)
}
inline void CBroadcast_GetBroadcastStatus_Response::set_title(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CBroadcast_GetBroadcastStatus_Response.title)
}
inline ::std::string* CBroadcast_GetBroadcastStatus_Response::mutable_title() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_GetBroadcastStatus_Response.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CBroadcast_GetBroadcastStatus_Response::release_title() {
  // @@protoc_insertion_point(field_release:proto.steam.CBroadcast_GetBroadcastStatus_Response.title)
  if (!has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return title_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CBroadcast_GetBroadcastStatus_Response::set_allocated_title(::std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CBroadcast_GetBroadcastStatus_Response.title)
}

// optional uint32 num_viewers = 3;
inline bool CBroadcast_GetBroadcastStatus_Response::has_num_viewers() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CBroadcast_GetBroadcastStatus_Response::clear_num_viewers() {
  num_viewers_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CBroadcast_GetBroadcastStatus_Response::num_viewers() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastStatus_Response.num_viewers)
  return num_viewers_;
}
inline void CBroadcast_GetBroadcastStatus_Response::set_num_viewers(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  num_viewers_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetBroadcastStatus_Response.num_viewers)
}

// optional int32 permission = 4;
inline bool CBroadcast_GetBroadcastStatus_Response::has_permission() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CBroadcast_GetBroadcastStatus_Response::clear_permission() {
  permission_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::int32 CBroadcast_GetBroadcastStatus_Response::permission() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastStatus_Response.permission)
  return permission_;
}
inline void CBroadcast_GetBroadcastStatus_Response::set_permission(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  permission_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetBroadcastStatus_Response.permission)
}

// optional bool is_rtmp = 5;
inline bool CBroadcast_GetBroadcastStatus_Response::has_is_rtmp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CBroadcast_GetBroadcastStatus_Response::clear_is_rtmp() {
  is_rtmp_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CBroadcast_GetBroadcastStatus_Response::is_rtmp() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastStatus_Response.is_rtmp)
  return is_rtmp_;
}
inline void CBroadcast_GetBroadcastStatus_Response::set_is_rtmp(bool value) {
  _has_bits_[0] |= 0x00000040u;
  is_rtmp_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetBroadcastStatus_Response.is_rtmp)
}

// optional int32 seconds_delay = 6;
inline bool CBroadcast_GetBroadcastStatus_Response::has_seconds_delay() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CBroadcast_GetBroadcastStatus_Response::clear_seconds_delay() {
  seconds_delay_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::int32 CBroadcast_GetBroadcastStatus_Response::seconds_delay() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastStatus_Response.seconds_delay)
  return seconds_delay_;
}
inline void CBroadcast_GetBroadcastStatus_Response::set_seconds_delay(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  seconds_delay_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetBroadcastStatus_Response.seconds_delay)
}

// optional bool is_publisher = 7;
inline bool CBroadcast_GetBroadcastStatus_Response::has_is_publisher() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CBroadcast_GetBroadcastStatus_Response::clear_is_publisher() {
  is_publisher_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CBroadcast_GetBroadcastStatus_Response::is_publisher() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastStatus_Response.is_publisher)
  return is_publisher_;
}
inline void CBroadcast_GetBroadcastStatus_Response::set_is_publisher(bool value) {
  _has_bits_[0] |= 0x00000080u;
  is_publisher_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetBroadcastStatus_Response.is_publisher)
}

// optional string thumbnail_url = 8;
inline bool CBroadcast_GetBroadcastStatus_Response::has_thumbnail_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CBroadcast_GetBroadcastStatus_Response::clear_thumbnail_url() {
  thumbnail_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CBroadcast_GetBroadcastStatus_Response::thumbnail_url() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastStatus_Response.thumbnail_url)
  return thumbnail_url_.GetNoArena();
}
inline void CBroadcast_GetBroadcastStatus_Response::set_thumbnail_url(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  thumbnail_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetBroadcastStatus_Response.thumbnail_url)
}
#if LANG_CXX11
inline void CBroadcast_GetBroadcastStatus_Response::set_thumbnail_url(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  thumbnail_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CBroadcast_GetBroadcastStatus_Response.thumbnail_url)
}
#endif
inline void CBroadcast_GetBroadcastStatus_Response::set_thumbnail_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  thumbnail_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CBroadcast_GetBroadcastStatus_Response.thumbnail_url)
}
inline void CBroadcast_GetBroadcastStatus_Response::set_thumbnail_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  thumbnail_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CBroadcast_GetBroadcastStatus_Response.thumbnail_url)
}
inline ::std::string* CBroadcast_GetBroadcastStatus_Response::mutable_thumbnail_url() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_GetBroadcastStatus_Response.thumbnail_url)
  return thumbnail_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CBroadcast_GetBroadcastStatus_Response::release_thumbnail_url() {
  // @@protoc_insertion_point(field_release:proto.steam.CBroadcast_GetBroadcastStatus_Response.thumbnail_url)
  if (!has_thumbnail_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return thumbnail_url_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CBroadcast_GetBroadcastStatus_Response::set_allocated_thumbnail_url(::std::string* thumbnail_url) {
  if (thumbnail_url != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  thumbnail_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), thumbnail_url);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CBroadcast_GetBroadcastStatus_Response.thumbnail_url)
}

// optional int32 update_interval = 9;
inline bool CBroadcast_GetBroadcastStatus_Response::has_update_interval() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CBroadcast_GetBroadcastStatus_Response::clear_update_interval() {
  update_interval_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::google::protobuf::int32 CBroadcast_GetBroadcastStatus_Response::update_interval() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastStatus_Response.update_interval)
  return update_interval_;
}
inline void CBroadcast_GetBroadcastStatus_Response::set_update_interval(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  update_interval_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetBroadcastStatus_Response.update_interval)
}

// optional bool is_uploading = 10;
inline bool CBroadcast_GetBroadcastStatus_Response::has_is_uploading() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CBroadcast_GetBroadcastStatus_Response::clear_is_uploading() {
  is_uploading_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool CBroadcast_GetBroadcastStatus_Response::is_uploading() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastStatus_Response.is_uploading)
  return is_uploading_;
}
inline void CBroadcast_GetBroadcastStatus_Response::set_is_uploading(bool value) {
  _has_bits_[0] |= 0x00000100u;
  is_uploading_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetBroadcastStatus_Response.is_uploading)
}

// optional uint32 duration = 11;
inline bool CBroadcast_GetBroadcastStatus_Response::has_duration() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CBroadcast_GetBroadcastStatus_Response::clear_duration() {
  duration_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::google::protobuf::uint32 CBroadcast_GetBroadcastStatus_Response::duration() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastStatus_Response.duration)
  return duration_;
}
inline void CBroadcast_GetBroadcastStatus_Response::set_duration(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  duration_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetBroadcastStatus_Response.duration)
}

// -------------------------------------------------------------------

// CBroadcast_GetBroadcastThumbnail_Request

// optional fixed64 steamid = 1;
inline bool CBroadcast_GetBroadcastThumbnail_Request::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_GetBroadcastThumbnail_Request::clear_steamid() {
  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 CBroadcast_GetBroadcastThumbnail_Request::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastThumbnail_Request.steamid)
  return steamid_;
}
inline void CBroadcast_GetBroadcastThumbnail_Request::set_steamid(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetBroadcastThumbnail_Request.steamid)
}

// optional fixed64 broadcast_id = 2;
inline bool CBroadcast_GetBroadcastThumbnail_Request::has_broadcast_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CBroadcast_GetBroadcastThumbnail_Request::clear_broadcast_id() {
  broadcast_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint64 CBroadcast_GetBroadcastThumbnail_Request::broadcast_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastThumbnail_Request.broadcast_id)
  return broadcast_id_;
}
inline void CBroadcast_GetBroadcastThumbnail_Request::set_broadcast_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  broadcast_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetBroadcastThumbnail_Request.broadcast_id)
}

// -------------------------------------------------------------------

// CBroadcast_GetBroadcastThumbnail_Response

// optional string thumbnail_url = 1;
inline bool CBroadcast_GetBroadcastThumbnail_Response::has_thumbnail_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_GetBroadcastThumbnail_Response::clear_thumbnail_url() {
  thumbnail_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CBroadcast_GetBroadcastThumbnail_Response::thumbnail_url() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastThumbnail_Response.thumbnail_url)
  return thumbnail_url_.GetNoArena();
}
inline void CBroadcast_GetBroadcastThumbnail_Response::set_thumbnail_url(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  thumbnail_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetBroadcastThumbnail_Response.thumbnail_url)
}
#if LANG_CXX11
inline void CBroadcast_GetBroadcastThumbnail_Response::set_thumbnail_url(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  thumbnail_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CBroadcast_GetBroadcastThumbnail_Response.thumbnail_url)
}
#endif
inline void CBroadcast_GetBroadcastThumbnail_Response::set_thumbnail_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  thumbnail_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CBroadcast_GetBroadcastThumbnail_Response.thumbnail_url)
}
inline void CBroadcast_GetBroadcastThumbnail_Response::set_thumbnail_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  thumbnail_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CBroadcast_GetBroadcastThumbnail_Response.thumbnail_url)
}
inline ::std::string* CBroadcast_GetBroadcastThumbnail_Response::mutable_thumbnail_url() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_GetBroadcastThumbnail_Response.thumbnail_url)
  return thumbnail_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CBroadcast_GetBroadcastThumbnail_Response::release_thumbnail_url() {
  // @@protoc_insertion_point(field_release:proto.steam.CBroadcast_GetBroadcastThumbnail_Response.thumbnail_url)
  if (!has_thumbnail_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return thumbnail_url_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CBroadcast_GetBroadcastThumbnail_Response::set_allocated_thumbnail_url(::std::string* thumbnail_url) {
  if (thumbnail_url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  thumbnail_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), thumbnail_url);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CBroadcast_GetBroadcastThumbnail_Response.thumbnail_url)
}

// optional int32 update_interval = 2;
inline bool CBroadcast_GetBroadcastThumbnail_Response::has_update_interval() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CBroadcast_GetBroadcastThumbnail_Response::clear_update_interval() {
  update_interval_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::int32 CBroadcast_GetBroadcastThumbnail_Response::update_interval() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastThumbnail_Response.update_interval)
  return update_interval_;
}
inline void CBroadcast_GetBroadcastThumbnail_Response::set_update_interval(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  update_interval_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetBroadcastThumbnail_Response.update_interval)
}

// optional int32 num_viewers = 3;
inline bool CBroadcast_GetBroadcastThumbnail_Response::has_num_viewers() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CBroadcast_GetBroadcastThumbnail_Response::clear_num_viewers() {
  num_viewers_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::int32 CBroadcast_GetBroadcastThumbnail_Response::num_viewers() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastThumbnail_Response.num_viewers)
  return num_viewers_;
}
inline void CBroadcast_GetBroadcastThumbnail_Response::set_num_viewers(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  num_viewers_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetBroadcastThumbnail_Response.num_viewers)
}

// -------------------------------------------------------------------

// CBroadcast_InviteToBroadcast_Request

// optional fixed64 steamid = 1;
inline bool CBroadcast_InviteToBroadcast_Request::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_InviteToBroadcast_Request::clear_steamid() {
  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 CBroadcast_InviteToBroadcast_Request::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_InviteToBroadcast_Request.steamid)
  return steamid_;
}
inline void CBroadcast_InviteToBroadcast_Request::set_steamid(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_InviteToBroadcast_Request.steamid)
}

// optional bool approval_response = 2;
inline bool CBroadcast_InviteToBroadcast_Request::has_approval_response() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CBroadcast_InviteToBroadcast_Request::clear_approval_response() {
  approval_response_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CBroadcast_InviteToBroadcast_Request::approval_response() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_InviteToBroadcast_Request.approval_response)
  return approval_response_;
}
inline void CBroadcast_InviteToBroadcast_Request::set_approval_response(bool value) {
  _has_bits_[0] |= 0x00000002u;
  approval_response_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_InviteToBroadcast_Request.approval_response)
}

// -------------------------------------------------------------------

// CBroadcast_InviteToBroadcast_Response

// optional bool success = 1;
inline bool CBroadcast_InviteToBroadcast_Response::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_InviteToBroadcast_Response::clear_success() {
  success_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CBroadcast_InviteToBroadcast_Response::success() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_InviteToBroadcast_Response.success)
  return success_;
}
inline void CBroadcast_InviteToBroadcast_Response::set_success(bool value) {
  _has_bits_[0] |= 0x00000001u;
  success_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_InviteToBroadcast_Response.success)
}

// -------------------------------------------------------------------

// CBroadcast_SendBroadcastStateToServer_Request

// optional int32 permission = 1;
inline bool CBroadcast_SendBroadcastStateToServer_Request::has_permission() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CBroadcast_SendBroadcastStateToServer_Request::clear_permission() {
  permission_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::int32 CBroadcast_SendBroadcastStateToServer_Request::permission() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_SendBroadcastStateToServer_Request.permission)
  return permission_;
}
inline void CBroadcast_SendBroadcastStateToServer_Request::set_permission(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  permission_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_SendBroadcastStateToServer_Request.permission)
}

// optional uint64 gameid = 2;
inline bool CBroadcast_SendBroadcastStateToServer_Request::has_gameid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CBroadcast_SendBroadcastStateToServer_Request::clear_gameid() {
  gameid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint64 CBroadcast_SendBroadcastStateToServer_Request::gameid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_SendBroadcastStateToServer_Request.gameid)
  return gameid_;
}
inline void CBroadcast_SendBroadcastStateToServer_Request::set_gameid(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  gameid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_SendBroadcastStateToServer_Request.gameid)
}

// optional string title = 3;
inline bool CBroadcast_SendBroadcastStateToServer_Request::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_SendBroadcastStateToServer_Request::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CBroadcast_SendBroadcastStateToServer_Request::title() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_SendBroadcastStateToServer_Request.title)
  return title_.GetNoArena();
}
inline void CBroadcast_SendBroadcastStateToServer_Request::set_title(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_SendBroadcastStateToServer_Request.title)
}
#if LANG_CXX11
inline void CBroadcast_SendBroadcastStateToServer_Request::set_title(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CBroadcast_SendBroadcastStateToServer_Request.title)
}
#endif
inline void CBroadcast_SendBroadcastStateToServer_Request::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CBroadcast_SendBroadcastStateToServer_Request.title)
}
inline void CBroadcast_SendBroadcastStateToServer_Request::set_title(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CBroadcast_SendBroadcastStateToServer_Request.title)
}
inline ::std::string* CBroadcast_SendBroadcastStateToServer_Request::mutable_title() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_SendBroadcastStateToServer_Request.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CBroadcast_SendBroadcastStateToServer_Request::release_title() {
  // @@protoc_insertion_point(field_release:proto.steam.CBroadcast_SendBroadcastStateToServer_Request.title)
  if (!has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return title_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CBroadcast_SendBroadcastStateToServer_Request::set_allocated_title(::std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CBroadcast_SendBroadcastStateToServer_Request.title)
}

// optional string game_data_config = 4;
inline bool CBroadcast_SendBroadcastStateToServer_Request::has_game_data_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CBroadcast_SendBroadcastStateToServer_Request::clear_game_data_config() {
  game_data_config_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CBroadcast_SendBroadcastStateToServer_Request::game_data_config() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_SendBroadcastStateToServer_Request.game_data_config)
  return game_data_config_.GetNoArena();
}
inline void CBroadcast_SendBroadcastStateToServer_Request::set_game_data_config(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  game_data_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_SendBroadcastStateToServer_Request.game_data_config)
}
#if LANG_CXX11
inline void CBroadcast_SendBroadcastStateToServer_Request::set_game_data_config(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  game_data_config_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CBroadcast_SendBroadcastStateToServer_Request.game_data_config)
}
#endif
inline void CBroadcast_SendBroadcastStateToServer_Request::set_game_data_config(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  game_data_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CBroadcast_SendBroadcastStateToServer_Request.game_data_config)
}
inline void CBroadcast_SendBroadcastStateToServer_Request::set_game_data_config(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  game_data_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CBroadcast_SendBroadcastStateToServer_Request.game_data_config)
}
inline ::std::string* CBroadcast_SendBroadcastStateToServer_Request::mutable_game_data_config() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_SendBroadcastStateToServer_Request.game_data_config)
  return game_data_config_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CBroadcast_SendBroadcastStateToServer_Request::release_game_data_config() {
  // @@protoc_insertion_point(field_release:proto.steam.CBroadcast_SendBroadcastStateToServer_Request.game_data_config)
  if (!has_game_data_config()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return game_data_config_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CBroadcast_SendBroadcastStateToServer_Request::set_allocated_game_data_config(::std::string* game_data_config) {
  if (game_data_config != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  game_data_config_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), game_data_config);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CBroadcast_SendBroadcastStateToServer_Request.game_data_config)
}

// -------------------------------------------------------------------

// CBroadcast_SendBroadcastStateToServer_Response

// -------------------------------------------------------------------

// CBroadcast_NotifyBroadcastSessionHeartbeat_Notification

// optional fixed64 broadcast_id = 1;
inline bool CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::has_broadcast_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::clear_broadcast_id() {
  broadcast_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::broadcast_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_NotifyBroadcastSessionHeartbeat_Notification.broadcast_id)
  return broadcast_id_;
}
inline void CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::set_broadcast_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  broadcast_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_NotifyBroadcastSessionHeartbeat_Notification.broadcast_id)
}

// -------------------------------------------------------------------

// CBroadcast_GetBroadcastChatInfo_Request

// optional fixed64 steamid = 1;
inline bool CBroadcast_GetBroadcastChatInfo_Request::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_GetBroadcastChatInfo_Request::clear_steamid() {
  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 CBroadcast_GetBroadcastChatInfo_Request::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastChatInfo_Request.steamid)
  return steamid_;
}
inline void CBroadcast_GetBroadcastChatInfo_Request::set_steamid(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetBroadcastChatInfo_Request.steamid)
}

// optional fixed64 broadcast_id = 2;
inline bool CBroadcast_GetBroadcastChatInfo_Request::has_broadcast_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CBroadcast_GetBroadcastChatInfo_Request::clear_broadcast_id() {
  broadcast_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint64 CBroadcast_GetBroadcastChatInfo_Request::broadcast_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastChatInfo_Request.broadcast_id)
  return broadcast_id_;
}
inline void CBroadcast_GetBroadcastChatInfo_Request::set_broadcast_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  broadcast_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetBroadcastChatInfo_Request.broadcast_id)
}

// optional uint32 client_ip = 3;
inline bool CBroadcast_GetBroadcastChatInfo_Request::has_client_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CBroadcast_GetBroadcastChatInfo_Request::clear_client_ip() {
  client_ip_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CBroadcast_GetBroadcastChatInfo_Request::client_ip() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastChatInfo_Request.client_ip)
  return client_ip_;
}
inline void CBroadcast_GetBroadcastChatInfo_Request::set_client_ip(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  client_ip_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetBroadcastChatInfo_Request.client_ip)
}

// optional uint32 client_cell = 4;
inline bool CBroadcast_GetBroadcastChatInfo_Request::has_client_cell() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CBroadcast_GetBroadcastChatInfo_Request::clear_client_cell() {
  client_cell_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CBroadcast_GetBroadcastChatInfo_Request::client_cell() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastChatInfo_Request.client_cell)
  return client_cell_;
}
inline void CBroadcast_GetBroadcastChatInfo_Request::set_client_cell(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  client_cell_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetBroadcastChatInfo_Request.client_cell)
}

// -------------------------------------------------------------------

// CBroadcast_GetBroadcastChatInfo_Response

// optional fixed64 chat_id = 1;
inline bool CBroadcast_GetBroadcastChatInfo_Response::has_chat_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CBroadcast_GetBroadcastChatInfo_Response::clear_chat_id() {
  chat_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint64 CBroadcast_GetBroadcastChatInfo_Response::chat_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastChatInfo_Response.chat_id)
  return chat_id_;
}
inline void CBroadcast_GetBroadcastChatInfo_Response::set_chat_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  chat_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetBroadcastChatInfo_Response.chat_id)
}

// optional string view_url = 2;
inline bool CBroadcast_GetBroadcastChatInfo_Response::has_view_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_GetBroadcastChatInfo_Response::clear_view_url() {
  view_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CBroadcast_GetBroadcastChatInfo_Response::view_url() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastChatInfo_Response.view_url)
  return view_url_.GetNoArena();
}
inline void CBroadcast_GetBroadcastChatInfo_Response::set_view_url(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  view_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetBroadcastChatInfo_Response.view_url)
}
#if LANG_CXX11
inline void CBroadcast_GetBroadcastChatInfo_Response::set_view_url(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  view_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CBroadcast_GetBroadcastChatInfo_Response.view_url)
}
#endif
inline void CBroadcast_GetBroadcastChatInfo_Response::set_view_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  view_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CBroadcast_GetBroadcastChatInfo_Response.view_url)
}
inline void CBroadcast_GetBroadcastChatInfo_Response::set_view_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  view_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CBroadcast_GetBroadcastChatInfo_Response.view_url)
}
inline ::std::string* CBroadcast_GetBroadcastChatInfo_Response::mutable_view_url() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_GetBroadcastChatInfo_Response.view_url)
  return view_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CBroadcast_GetBroadcastChatInfo_Response::release_view_url() {
  // @@protoc_insertion_point(field_release:proto.steam.CBroadcast_GetBroadcastChatInfo_Response.view_url)
  if (!has_view_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return view_url_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CBroadcast_GetBroadcastChatInfo_Response::set_allocated_view_url(::std::string* view_url) {
  if (view_url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  view_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), view_url);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CBroadcast_GetBroadcastChatInfo_Response.view_url)
}

// optional string view_url_template = 3;
inline bool CBroadcast_GetBroadcastChatInfo_Response::has_view_url_template() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CBroadcast_GetBroadcastChatInfo_Response::clear_view_url_template() {
  view_url_template_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CBroadcast_GetBroadcastChatInfo_Response::view_url_template() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastChatInfo_Response.view_url_template)
  return view_url_template_.GetNoArena();
}
inline void CBroadcast_GetBroadcastChatInfo_Response::set_view_url_template(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  view_url_template_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetBroadcastChatInfo_Response.view_url_template)
}
#if LANG_CXX11
inline void CBroadcast_GetBroadcastChatInfo_Response::set_view_url_template(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  view_url_template_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CBroadcast_GetBroadcastChatInfo_Response.view_url_template)
}
#endif
inline void CBroadcast_GetBroadcastChatInfo_Response::set_view_url_template(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  view_url_template_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CBroadcast_GetBroadcastChatInfo_Response.view_url_template)
}
inline void CBroadcast_GetBroadcastChatInfo_Response::set_view_url_template(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  view_url_template_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CBroadcast_GetBroadcastChatInfo_Response.view_url_template)
}
inline ::std::string* CBroadcast_GetBroadcastChatInfo_Response::mutable_view_url_template() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_GetBroadcastChatInfo_Response.view_url_template)
  return view_url_template_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CBroadcast_GetBroadcastChatInfo_Response::release_view_url_template() {
  // @@protoc_insertion_point(field_release:proto.steam.CBroadcast_GetBroadcastChatInfo_Response.view_url_template)
  if (!has_view_url_template()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return view_url_template_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CBroadcast_GetBroadcastChatInfo_Response::set_allocated_view_url_template(::std::string* view_url_template) {
  if (view_url_template != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  view_url_template_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), view_url_template);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CBroadcast_GetBroadcastChatInfo_Response.view_url_template)
}

// -------------------------------------------------------------------

// CBroadcast_PostChatMessage_Request

// optional fixed64 chat_id = 1;
inline bool CBroadcast_PostChatMessage_Request::has_chat_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CBroadcast_PostChatMessage_Request::clear_chat_id() {
  chat_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint64 CBroadcast_PostChatMessage_Request::chat_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_PostChatMessage_Request.chat_id)
  return chat_id_;
}
inline void CBroadcast_PostChatMessage_Request::set_chat_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  chat_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_PostChatMessage_Request.chat_id)
}

// optional string message = 2;
inline bool CBroadcast_PostChatMessage_Request::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_PostChatMessage_Request::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CBroadcast_PostChatMessage_Request::message() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_PostChatMessage_Request.message)
  return message_.GetNoArena();
}
inline void CBroadcast_PostChatMessage_Request::set_message(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_PostChatMessage_Request.message)
}
#if LANG_CXX11
inline void CBroadcast_PostChatMessage_Request::set_message(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CBroadcast_PostChatMessage_Request.message)
}
#endif
inline void CBroadcast_PostChatMessage_Request::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CBroadcast_PostChatMessage_Request.message)
}
inline void CBroadcast_PostChatMessage_Request::set_message(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CBroadcast_PostChatMessage_Request.message)
}
inline ::std::string* CBroadcast_PostChatMessage_Request::mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_PostChatMessage_Request.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CBroadcast_PostChatMessage_Request::release_message() {
  // @@protoc_insertion_point(field_release:proto.steam.CBroadcast_PostChatMessage_Request.message)
  if (!has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return message_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CBroadcast_PostChatMessage_Request::set_allocated_message(::std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CBroadcast_PostChatMessage_Request.message)
}

// optional uint32 instance_id = 3;
inline bool CBroadcast_PostChatMessage_Request::has_instance_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CBroadcast_PostChatMessage_Request::clear_instance_id() {
  instance_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CBroadcast_PostChatMessage_Request::instance_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_PostChatMessage_Request.instance_id)
  return instance_id_;
}
inline void CBroadcast_PostChatMessage_Request::set_instance_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  instance_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_PostChatMessage_Request.instance_id)
}

// -------------------------------------------------------------------

// CBroadcast_PostChatMessage_Response

// optional string persona_name = 1;
inline bool CBroadcast_PostChatMessage_Response::has_persona_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_PostChatMessage_Response::clear_persona_name() {
  persona_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CBroadcast_PostChatMessage_Response::persona_name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_PostChatMessage_Response.persona_name)
  return persona_name_.GetNoArena();
}
inline void CBroadcast_PostChatMessage_Response::set_persona_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_PostChatMessage_Response.persona_name)
}
#if LANG_CXX11
inline void CBroadcast_PostChatMessage_Response::set_persona_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  persona_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CBroadcast_PostChatMessage_Response.persona_name)
}
#endif
inline void CBroadcast_PostChatMessage_Response::set_persona_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CBroadcast_PostChatMessage_Response.persona_name)
}
inline void CBroadcast_PostChatMessage_Response::set_persona_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CBroadcast_PostChatMessage_Response.persona_name)
}
inline ::std::string* CBroadcast_PostChatMessage_Response::mutable_persona_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_PostChatMessage_Response.persona_name)
  return persona_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CBroadcast_PostChatMessage_Response::release_persona_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CBroadcast_PostChatMessage_Response.persona_name)
  if (!has_persona_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return persona_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CBroadcast_PostChatMessage_Response::set_allocated_persona_name(::std::string* persona_name) {
  if (persona_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  persona_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), persona_name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CBroadcast_PostChatMessage_Response.persona_name)
}

// optional bool in_game = 2;
inline bool CBroadcast_PostChatMessage_Response::has_in_game() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CBroadcast_PostChatMessage_Response::clear_in_game() {
  in_game_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CBroadcast_PostChatMessage_Response::in_game() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_PostChatMessage_Response.in_game)
  return in_game_;
}
inline void CBroadcast_PostChatMessage_Response::set_in_game(bool value) {
  _has_bits_[0] |= 0x00000002u;
  in_game_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_PostChatMessage_Response.in_game)
}

// optional int32 result = 3;
inline bool CBroadcast_PostChatMessage_Response::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CBroadcast_PostChatMessage_Response::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::int32 CBroadcast_PostChatMessage_Response::result() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_PostChatMessage_Response.result)
  return result_;
}
inline void CBroadcast_PostChatMessage_Response::set_result(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_PostChatMessage_Response.result)
}

// optional int32 cooldown_time_seconds = 4;
inline bool CBroadcast_PostChatMessage_Response::has_cooldown_time_seconds() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CBroadcast_PostChatMessage_Response::clear_cooldown_time_seconds() {
  cooldown_time_seconds_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::int32 CBroadcast_PostChatMessage_Response::cooldown_time_seconds() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_PostChatMessage_Response.cooldown_time_seconds)
  return cooldown_time_seconds_;
}
inline void CBroadcast_PostChatMessage_Response::set_cooldown_time_seconds(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  cooldown_time_seconds_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_PostChatMessage_Response.cooldown_time_seconds)
}

// -------------------------------------------------------------------

// CBroadcast_MuteBroadcastChatUser_Request

// optional fixed64 chat_id = 1;
inline bool CBroadcast_MuteBroadcastChatUser_Request::has_chat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_MuteBroadcastChatUser_Request::clear_chat_id() {
  chat_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 CBroadcast_MuteBroadcastChatUser_Request::chat_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_MuteBroadcastChatUser_Request.chat_id)
  return chat_id_;
}
inline void CBroadcast_MuteBroadcastChatUser_Request::set_chat_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  chat_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_MuteBroadcastChatUser_Request.chat_id)
}

// optional fixed64 user_steamid = 2;
inline bool CBroadcast_MuteBroadcastChatUser_Request::has_user_steamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CBroadcast_MuteBroadcastChatUser_Request::clear_user_steamid() {
  user_steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint64 CBroadcast_MuteBroadcastChatUser_Request::user_steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_MuteBroadcastChatUser_Request.user_steamid)
  return user_steamid_;
}
inline void CBroadcast_MuteBroadcastChatUser_Request::set_user_steamid(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  user_steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_MuteBroadcastChatUser_Request.user_steamid)
}

// optional bool muted = 3;
inline bool CBroadcast_MuteBroadcastChatUser_Request::has_muted() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CBroadcast_MuteBroadcastChatUser_Request::clear_muted() {
  muted_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CBroadcast_MuteBroadcastChatUser_Request::muted() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_MuteBroadcastChatUser_Request.muted)
  return muted_;
}
inline void CBroadcast_MuteBroadcastChatUser_Request::set_muted(bool value) {
  _has_bits_[0] |= 0x00000004u;
  muted_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_MuteBroadcastChatUser_Request.muted)
}

// -------------------------------------------------------------------

// CBroadcast_MuteBroadcastChatUser_Response

// -------------------------------------------------------------------

// CBroadcast_RemoveUserChatText_Request

// optional fixed64 chat_id = 1;
inline bool CBroadcast_RemoveUserChatText_Request::has_chat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_RemoveUserChatText_Request::clear_chat_id() {
  chat_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 CBroadcast_RemoveUserChatText_Request::chat_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_RemoveUserChatText_Request.chat_id)
  return chat_id_;
}
inline void CBroadcast_RemoveUserChatText_Request::set_chat_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  chat_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_RemoveUserChatText_Request.chat_id)
}

// optional fixed64 user_steamid = 2;
inline bool CBroadcast_RemoveUserChatText_Request::has_user_steamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CBroadcast_RemoveUserChatText_Request::clear_user_steamid() {
  user_steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint64 CBroadcast_RemoveUserChatText_Request::user_steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_RemoveUserChatText_Request.user_steamid)
  return user_steamid_;
}
inline void CBroadcast_RemoveUserChatText_Request::set_user_steamid(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  user_steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_RemoveUserChatText_Request.user_steamid)
}

// -------------------------------------------------------------------

// CBroadcast_RemoveUserChatText_Response

// -------------------------------------------------------------------

// CBroadcast_GetBroadcastChatUserNames_Request

// optional fixed64 chat_id = 1;
inline bool CBroadcast_GetBroadcastChatUserNames_Request::has_chat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_GetBroadcastChatUserNames_Request::clear_chat_id() {
  chat_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 CBroadcast_GetBroadcastChatUserNames_Request::chat_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastChatUserNames_Request.chat_id)
  return chat_id_;
}
inline void CBroadcast_GetBroadcastChatUserNames_Request::set_chat_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  chat_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetBroadcastChatUserNames_Request.chat_id)
}

// repeated fixed64 user_steamid = 2;
inline int CBroadcast_GetBroadcastChatUserNames_Request::user_steamid_size() const {
  return user_steamid_.size();
}
inline void CBroadcast_GetBroadcastChatUserNames_Request::clear_user_steamid() {
  user_steamid_.Clear();
}
inline ::google::protobuf::uint64 CBroadcast_GetBroadcastChatUserNames_Request::user_steamid(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastChatUserNames_Request.user_steamid)
  return user_steamid_.Get(index);
}
inline void CBroadcast_GetBroadcastChatUserNames_Request::set_user_steamid(int index, ::google::protobuf::uint64 value) {
  user_steamid_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetBroadcastChatUserNames_Request.user_steamid)
}
inline void CBroadcast_GetBroadcastChatUserNames_Request::add_user_steamid(::google::protobuf::uint64 value) {
  user_steamid_.Add(value);
  // @@protoc_insertion_point(field_add:proto.steam.CBroadcast_GetBroadcastChatUserNames_Request.user_steamid)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CBroadcast_GetBroadcastChatUserNames_Request::user_steamid() const {
  // @@protoc_insertion_point(field_list:proto.steam.CBroadcast_GetBroadcastChatUserNames_Request.user_steamid)
  return user_steamid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CBroadcast_GetBroadcastChatUserNames_Request::mutable_user_steamid() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CBroadcast_GetBroadcastChatUserNames_Request.user_steamid)
  return &user_steamid_;
}

// -------------------------------------------------------------------

// CBroadcast_GetBroadcastChatUserNames_Response_PersonaName

// optional fixed64 steam_id = 1;
inline bool CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::has_steam_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::clear_steam_id() {
  steam_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint64 CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::steam_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName.steam_id)
  return steam_id_;
}
inline void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::set_steam_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName.steam_id)
}

// optional string persona = 2;
inline bool CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::has_persona() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::clear_persona() {
  persona_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::persona() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName.persona)
  return persona_.GetNoArena();
}
inline void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::set_persona(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  persona_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName.persona)
}
#if LANG_CXX11
inline void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::set_persona(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  persona_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName.persona)
}
#endif
inline void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::set_persona(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  persona_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName.persona)
}
inline void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::set_persona(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  persona_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName.persona)
}
inline ::std::string* CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::mutable_persona() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName.persona)
  return persona_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::release_persona() {
  // @@protoc_insertion_point(field_release:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName.persona)
  if (!has_persona()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return persona_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::set_allocated_persona(::std::string* persona) {
  if (persona != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  persona_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), persona);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName.persona)
}

// -------------------------------------------------------------------

// CBroadcast_GetBroadcastChatUserNames_Response

// repeated .proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName persona_names = 1;
inline int CBroadcast_GetBroadcastChatUserNames_Response::persona_names_size() const {
  return persona_names_.size();
}
inline void CBroadcast_GetBroadcastChatUserNames_Response::clear_persona_names() {
  persona_names_.Clear();
}
inline ::proto::steam::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName* CBroadcast_GetBroadcastChatUserNames_Response::mutable_persona_names(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.persona_names)
  return persona_names_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::steam::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName >*
CBroadcast_GetBroadcastChatUserNames_Response::mutable_persona_names() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.persona_names)
  return &persona_names_;
}
inline const ::proto::steam::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName& CBroadcast_GetBroadcastChatUserNames_Response::persona_names(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.persona_names)
  return persona_names_.Get(index);
}
inline ::proto::steam::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName* CBroadcast_GetBroadcastChatUserNames_Response::add_persona_names() {
  // @@protoc_insertion_point(field_add:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.persona_names)
  return persona_names_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::steam::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName >&
CBroadcast_GetBroadcastChatUserNames_Response::persona_names() const {
  // @@protoc_insertion_point(field_list:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.persona_names)
  return persona_names_;
}

// -------------------------------------------------------------------

// CBroadcast_SetRTMPInfo_Request

// optional int32 broadcast_permission = 1;
inline bool CBroadcast_SetRTMPInfo_Request::has_broadcast_permission() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_SetRTMPInfo_Request::clear_broadcast_permission() {
  broadcast_permission_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::int32 CBroadcast_SetRTMPInfo_Request::broadcast_permission() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_SetRTMPInfo_Request.broadcast_permission)
  return broadcast_permission_;
}
inline void CBroadcast_SetRTMPInfo_Request::set_broadcast_permission(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  broadcast_permission_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_SetRTMPInfo_Request.broadcast_permission)
}

// optional bool update_token = 2;
inline bool CBroadcast_SetRTMPInfo_Request::has_update_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CBroadcast_SetRTMPInfo_Request::clear_update_token() {
  update_token_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CBroadcast_SetRTMPInfo_Request::update_token() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_SetRTMPInfo_Request.update_token)
  return update_token_;
}
inline void CBroadcast_SetRTMPInfo_Request::set_update_token(bool value) {
  _has_bits_[0] |= 0x00000002u;
  update_token_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_SetRTMPInfo_Request.update_token)
}

// optional int32 broadcast_delay = 3;
inline bool CBroadcast_SetRTMPInfo_Request::has_broadcast_delay() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CBroadcast_SetRTMPInfo_Request::clear_broadcast_delay() {
  broadcast_delay_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::int32 CBroadcast_SetRTMPInfo_Request::broadcast_delay() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_SetRTMPInfo_Request.broadcast_delay)
  return broadcast_delay_;
}
inline void CBroadcast_SetRTMPInfo_Request::set_broadcast_delay(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  broadcast_delay_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_SetRTMPInfo_Request.broadcast_delay)
}

// optional uint32 app_id = 4;
inline bool CBroadcast_SetRTMPInfo_Request::has_app_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CBroadcast_SetRTMPInfo_Request::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CBroadcast_SetRTMPInfo_Request::app_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_SetRTMPInfo_Request.app_id)
  return app_id_;
}
inline void CBroadcast_SetRTMPInfo_Request::set_app_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_SetRTMPInfo_Request.app_id)
}

// optional uint32 required_app_id = 5;
inline bool CBroadcast_SetRTMPInfo_Request::has_required_app_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CBroadcast_SetRTMPInfo_Request::clear_required_app_id() {
  required_app_id_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CBroadcast_SetRTMPInfo_Request::required_app_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_SetRTMPInfo_Request.required_app_id)
  return required_app_id_;
}
inline void CBroadcast_SetRTMPInfo_Request::set_required_app_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  required_app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_SetRTMPInfo_Request.required_app_id)
}

// optional .proto.steam.EBroadcastChatPermission broadcast_chat_permission = 6 [default = k_EBroadcastChatPermissionPublic, (.proto.steam.description) = "Who is permitted to send a chat message during broadcast"];
inline bool CBroadcast_SetRTMPInfo_Request::has_broadcast_chat_permission() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CBroadcast_SetRTMPInfo_Request::clear_broadcast_chat_permission() {
  broadcast_chat_permission_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::proto::steam::EBroadcastChatPermission CBroadcast_SetRTMPInfo_Request::broadcast_chat_permission() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_SetRTMPInfo_Request.broadcast_chat_permission)
  return static_cast< ::proto::steam::EBroadcastChatPermission >(broadcast_chat_permission_);
}
inline void CBroadcast_SetRTMPInfo_Request::set_broadcast_chat_permission(::proto::steam::EBroadcastChatPermission value) {
  assert(::proto::steam::EBroadcastChatPermission_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  broadcast_chat_permission_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_SetRTMPInfo_Request.broadcast_chat_permission)
}

// optional int32 broadcast_buffer = 7 [(.proto.steam.description) = "Previous seconds we keep of the stream available"];
inline bool CBroadcast_SetRTMPInfo_Request::has_broadcast_buffer() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CBroadcast_SetRTMPInfo_Request::clear_broadcast_buffer() {
  broadcast_buffer_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::int32 CBroadcast_SetRTMPInfo_Request::broadcast_buffer() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_SetRTMPInfo_Request.broadcast_buffer)
  return broadcast_buffer_;
}
inline void CBroadcast_SetRTMPInfo_Request::set_broadcast_buffer(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  broadcast_buffer_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_SetRTMPInfo_Request.broadcast_buffer)
}

// optional fixed64 steamid = 8 [(.proto.steam.description) = "broadcaster steamID if not logged-in user"];
inline bool CBroadcast_SetRTMPInfo_Request::has_steamid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CBroadcast_SetRTMPInfo_Request::clear_steamid() {
  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint64 CBroadcast_SetRTMPInfo_Request::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_SetRTMPInfo_Request.steamid)
  return steamid_;
}
inline void CBroadcast_SetRTMPInfo_Request::set_steamid(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_SetRTMPInfo_Request.steamid)
}

// optional uint32 chat_rate_limit = 9 [(.proto.steam.description) = "Seconds required between chat messages"];
inline bool CBroadcast_SetRTMPInfo_Request::has_chat_rate_limit() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CBroadcast_SetRTMPInfo_Request::clear_chat_rate_limit() {
  chat_rate_limit_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::google::protobuf::uint32 CBroadcast_SetRTMPInfo_Request::chat_rate_limit() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_SetRTMPInfo_Request.chat_rate_limit)
  return chat_rate_limit_;
}
inline void CBroadcast_SetRTMPInfo_Request::set_chat_rate_limit(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  chat_rate_limit_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_SetRTMPInfo_Request.chat_rate_limit)
}

// -------------------------------------------------------------------

// CBroadcast_SetRTMPInfo_Response

// -------------------------------------------------------------------

// CBroadcast_GetRTMPInfo_Request

// optional uint32 ip = 1;
inline bool CBroadcast_GetRTMPInfo_Request::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CBroadcast_GetRTMPInfo_Request::clear_ip() {
  ip_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CBroadcast_GetRTMPInfo_Request::ip() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetRTMPInfo_Request.ip)
  return ip_;
}
inline void CBroadcast_GetRTMPInfo_Request::set_ip(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  ip_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetRTMPInfo_Request.ip)
}

// optional fixed64 steamid = 2 [(.proto.steam.description) = "broadcaster steamID if not logged-in user"];
inline bool CBroadcast_GetRTMPInfo_Request::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_GetRTMPInfo_Request::clear_steamid() {
  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 CBroadcast_GetRTMPInfo_Request::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetRTMPInfo_Request.steamid)
  return steamid_;
}
inline void CBroadcast_GetRTMPInfo_Request::set_steamid(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetRTMPInfo_Request.steamid)
}

// -------------------------------------------------------------------

// CBroadcast_GetRTMPInfo_Response

// optional int32 broadcast_permission = 1;
inline bool CBroadcast_GetRTMPInfo_Response::has_broadcast_permission() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CBroadcast_GetRTMPInfo_Response::clear_broadcast_permission() {
  broadcast_permission_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::int32 CBroadcast_GetRTMPInfo_Response::broadcast_permission() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetRTMPInfo_Response.broadcast_permission)
  return broadcast_permission_;
}
inline void CBroadcast_GetRTMPInfo_Response::set_broadcast_permission(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  broadcast_permission_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetRTMPInfo_Response.broadcast_permission)
}

// optional string rtmp_host = 2;
inline bool CBroadcast_GetRTMPInfo_Response::has_rtmp_host() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_GetRTMPInfo_Response::clear_rtmp_host() {
  rtmp_host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CBroadcast_GetRTMPInfo_Response::rtmp_host() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetRTMPInfo_Response.rtmp_host)
  return rtmp_host_.GetNoArena();
}
inline void CBroadcast_GetRTMPInfo_Response::set_rtmp_host(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  rtmp_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetRTMPInfo_Response.rtmp_host)
}
#if LANG_CXX11
inline void CBroadcast_GetRTMPInfo_Response::set_rtmp_host(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  rtmp_host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CBroadcast_GetRTMPInfo_Response.rtmp_host)
}
#endif
inline void CBroadcast_GetRTMPInfo_Response::set_rtmp_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  rtmp_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CBroadcast_GetRTMPInfo_Response.rtmp_host)
}
inline void CBroadcast_GetRTMPInfo_Response::set_rtmp_host(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  rtmp_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CBroadcast_GetRTMPInfo_Response.rtmp_host)
}
inline ::std::string* CBroadcast_GetRTMPInfo_Response::mutable_rtmp_host() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_GetRTMPInfo_Response.rtmp_host)
  return rtmp_host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CBroadcast_GetRTMPInfo_Response::release_rtmp_host() {
  // @@protoc_insertion_point(field_release:proto.steam.CBroadcast_GetRTMPInfo_Response.rtmp_host)
  if (!has_rtmp_host()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return rtmp_host_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CBroadcast_GetRTMPInfo_Response::set_allocated_rtmp_host(::std::string* rtmp_host) {
  if (rtmp_host != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  rtmp_host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rtmp_host);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CBroadcast_GetRTMPInfo_Response.rtmp_host)
}

// optional string rtmp_token = 3;
inline bool CBroadcast_GetRTMPInfo_Response::has_rtmp_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CBroadcast_GetRTMPInfo_Response::clear_rtmp_token() {
  rtmp_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CBroadcast_GetRTMPInfo_Response::rtmp_token() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetRTMPInfo_Response.rtmp_token)
  return rtmp_token_.GetNoArena();
}
inline void CBroadcast_GetRTMPInfo_Response::set_rtmp_token(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  rtmp_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetRTMPInfo_Response.rtmp_token)
}
#if LANG_CXX11
inline void CBroadcast_GetRTMPInfo_Response::set_rtmp_token(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  rtmp_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CBroadcast_GetRTMPInfo_Response.rtmp_token)
}
#endif
inline void CBroadcast_GetRTMPInfo_Response::set_rtmp_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  rtmp_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CBroadcast_GetRTMPInfo_Response.rtmp_token)
}
inline void CBroadcast_GetRTMPInfo_Response::set_rtmp_token(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  rtmp_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CBroadcast_GetRTMPInfo_Response.rtmp_token)
}
inline ::std::string* CBroadcast_GetRTMPInfo_Response::mutable_rtmp_token() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_GetRTMPInfo_Response.rtmp_token)
  return rtmp_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CBroadcast_GetRTMPInfo_Response::release_rtmp_token() {
  // @@protoc_insertion_point(field_release:proto.steam.CBroadcast_GetRTMPInfo_Response.rtmp_token)
  if (!has_rtmp_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return rtmp_token_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CBroadcast_GetRTMPInfo_Response::set_allocated_rtmp_token(::std::string* rtmp_token) {
  if (rtmp_token != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  rtmp_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rtmp_token);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CBroadcast_GetRTMPInfo_Response.rtmp_token)
}

// optional int32 broadcast_delay = 4;
inline bool CBroadcast_GetRTMPInfo_Response::has_broadcast_delay() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CBroadcast_GetRTMPInfo_Response::clear_broadcast_delay() {
  broadcast_delay_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::int32 CBroadcast_GetRTMPInfo_Response::broadcast_delay() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetRTMPInfo_Response.broadcast_delay)
  return broadcast_delay_;
}
inline void CBroadcast_GetRTMPInfo_Response::set_broadcast_delay(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  broadcast_delay_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetRTMPInfo_Response.broadcast_delay)
}

// optional uint32 app_id = 5;
inline bool CBroadcast_GetRTMPInfo_Response::has_app_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CBroadcast_GetRTMPInfo_Response::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CBroadcast_GetRTMPInfo_Response::app_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetRTMPInfo_Response.app_id)
  return app_id_;
}
inline void CBroadcast_GetRTMPInfo_Response::set_app_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetRTMPInfo_Response.app_id)
}

// optional uint32 required_app_id = 6;
inline bool CBroadcast_GetRTMPInfo_Response::has_required_app_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CBroadcast_GetRTMPInfo_Response::clear_required_app_id() {
  required_app_id_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint32 CBroadcast_GetRTMPInfo_Response::required_app_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetRTMPInfo_Response.required_app_id)
  return required_app_id_;
}
inline void CBroadcast_GetRTMPInfo_Response::set_required_app_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  required_app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetRTMPInfo_Response.required_app_id)
}

// optional .proto.steam.EBroadcastChatPermission broadcast_chat_permission = 7 [default = k_EBroadcastChatPermissionPublic, (.proto.steam.description) = "Who is permitted to send a chat message during broadcast"];
inline bool CBroadcast_GetRTMPInfo_Response::has_broadcast_chat_permission() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CBroadcast_GetRTMPInfo_Response::clear_broadcast_chat_permission() {
  broadcast_chat_permission_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::proto::steam::EBroadcastChatPermission CBroadcast_GetRTMPInfo_Response::broadcast_chat_permission() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetRTMPInfo_Response.broadcast_chat_permission)
  return static_cast< ::proto::steam::EBroadcastChatPermission >(broadcast_chat_permission_);
}
inline void CBroadcast_GetRTMPInfo_Response::set_broadcast_chat_permission(::proto::steam::EBroadcastChatPermission value) {
  assert(::proto::steam::EBroadcastChatPermission_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  broadcast_chat_permission_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetRTMPInfo_Response.broadcast_chat_permission)
}

// optional int32 broadcast_buffer = 8 [(.proto.steam.description) = "Seconds we keep streams available"];
inline bool CBroadcast_GetRTMPInfo_Response::has_broadcast_buffer() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CBroadcast_GetRTMPInfo_Response::clear_broadcast_buffer() {
  broadcast_buffer_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::int32 CBroadcast_GetRTMPInfo_Response::broadcast_buffer() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetRTMPInfo_Response.broadcast_buffer)
  return broadcast_buffer_;
}
inline void CBroadcast_GetRTMPInfo_Response::set_broadcast_buffer(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  broadcast_buffer_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetRTMPInfo_Response.broadcast_buffer)
}

// optional fixed64 steamid = 9 [(.proto.steam.description) = "broadcaster steamID"];
inline bool CBroadcast_GetRTMPInfo_Response::has_steamid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CBroadcast_GetRTMPInfo_Response::clear_steamid() {
  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::google::protobuf::uint64 CBroadcast_GetRTMPInfo_Response::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetRTMPInfo_Response.steamid)
  return steamid_;
}
inline void CBroadcast_GetRTMPInfo_Response::set_steamid(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000100u;
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetRTMPInfo_Response.steamid)
}

// optional uint32 chat_rate_limit = 10 [(.proto.steam.description) = "Seconds required between chat messages"];
inline bool CBroadcast_GetRTMPInfo_Response::has_chat_rate_limit() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CBroadcast_GetRTMPInfo_Response::clear_chat_rate_limit() {
  chat_rate_limit_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::google::protobuf::uint32 CBroadcast_GetRTMPInfo_Response::chat_rate_limit() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetRTMPInfo_Response.chat_rate_limit)
  return chat_rate_limit_;
}
inline void CBroadcast_GetRTMPInfo_Response::set_chat_rate_limit(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  chat_rate_limit_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetRTMPInfo_Response.chat_rate_limit)
}

// -------------------------------------------------------------------

// CBroadcast_WebRTCHaveTURNServer_Notification

// optional fixed64 broadcast_session_id = 1;
inline bool CBroadcast_WebRTCHaveTURNServer_Notification::has_broadcast_session_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CBroadcast_WebRTCHaveTURNServer_Notification::clear_broadcast_session_id() {
  broadcast_session_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint64 CBroadcast_WebRTCHaveTURNServer_Notification::broadcast_session_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WebRTCHaveTURNServer_Notification.broadcast_session_id)
  return broadcast_session_id_;
}
inline void CBroadcast_WebRTCHaveTURNServer_Notification::set_broadcast_session_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  broadcast_session_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WebRTCHaveTURNServer_Notification.broadcast_session_id)
}

// optional string turn_server = 2;
inline bool CBroadcast_WebRTCHaveTURNServer_Notification::has_turn_server() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_WebRTCHaveTURNServer_Notification::clear_turn_server() {
  turn_server_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CBroadcast_WebRTCHaveTURNServer_Notification::turn_server() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WebRTCHaveTURNServer_Notification.turn_server)
  return turn_server_.GetNoArena();
}
inline void CBroadcast_WebRTCHaveTURNServer_Notification::set_turn_server(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  turn_server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WebRTCHaveTURNServer_Notification.turn_server)
}
#if LANG_CXX11
inline void CBroadcast_WebRTCHaveTURNServer_Notification::set_turn_server(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  turn_server_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CBroadcast_WebRTCHaveTURNServer_Notification.turn_server)
}
#endif
inline void CBroadcast_WebRTCHaveTURNServer_Notification::set_turn_server(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  turn_server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CBroadcast_WebRTCHaveTURNServer_Notification.turn_server)
}
inline void CBroadcast_WebRTCHaveTURNServer_Notification::set_turn_server(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  turn_server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CBroadcast_WebRTCHaveTURNServer_Notification.turn_server)
}
inline ::std::string* CBroadcast_WebRTCHaveTURNServer_Notification::mutable_turn_server() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_WebRTCHaveTURNServer_Notification.turn_server)
  return turn_server_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CBroadcast_WebRTCHaveTURNServer_Notification::release_turn_server() {
  // @@protoc_insertion_point(field_release:proto.steam.CBroadcast_WebRTCHaveTURNServer_Notification.turn_server)
  if (!has_turn_server()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return turn_server_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CBroadcast_WebRTCHaveTURNServer_Notification::set_allocated_turn_server(::std::string* turn_server) {
  if (turn_server != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  turn_server_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), turn_server);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CBroadcast_WebRTCHaveTURNServer_Notification.turn_server)
}

// -------------------------------------------------------------------

// CBroadcast_WebRTCStartResult_Request

// optional fixed64 webrtc_session_id = 1;
inline bool CBroadcast_WebRTCStartResult_Request::has_webrtc_session_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CBroadcast_WebRTCStartResult_Request::clear_webrtc_session_id() {
  webrtc_session_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint64 CBroadcast_WebRTCStartResult_Request::webrtc_session_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WebRTCStartResult_Request.webrtc_session_id)
  return webrtc_session_id_;
}
inline void CBroadcast_WebRTCStartResult_Request::set_webrtc_session_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  webrtc_session_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WebRTCStartResult_Request.webrtc_session_id)
}

// optional bool started = 2;
inline bool CBroadcast_WebRTCStartResult_Request::has_started() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CBroadcast_WebRTCStartResult_Request::clear_started() {
  started_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CBroadcast_WebRTCStartResult_Request::started() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WebRTCStartResult_Request.started)
  return started_;
}
inline void CBroadcast_WebRTCStartResult_Request::set_started(bool value) {
  _has_bits_[0] |= 0x00000004u;
  started_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WebRTCStartResult_Request.started)
}

// optional string offer = 3;
inline bool CBroadcast_WebRTCStartResult_Request::has_offer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_WebRTCStartResult_Request::clear_offer() {
  offer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CBroadcast_WebRTCStartResult_Request::offer() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WebRTCStartResult_Request.offer)
  return offer_.GetNoArena();
}
inline void CBroadcast_WebRTCStartResult_Request::set_offer(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  offer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WebRTCStartResult_Request.offer)
}
#if LANG_CXX11
inline void CBroadcast_WebRTCStartResult_Request::set_offer(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  offer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CBroadcast_WebRTCStartResult_Request.offer)
}
#endif
inline void CBroadcast_WebRTCStartResult_Request::set_offer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  offer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CBroadcast_WebRTCStartResult_Request.offer)
}
inline void CBroadcast_WebRTCStartResult_Request::set_offer(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  offer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CBroadcast_WebRTCStartResult_Request.offer)
}
inline ::std::string* CBroadcast_WebRTCStartResult_Request::mutable_offer() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_WebRTCStartResult_Request.offer)
  return offer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CBroadcast_WebRTCStartResult_Request::release_offer() {
  // @@protoc_insertion_point(field_release:proto.steam.CBroadcast_WebRTCStartResult_Request.offer)
  if (!has_offer()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return offer_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CBroadcast_WebRTCStartResult_Request::set_allocated_offer(::std::string* offer) {
  if (offer != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  offer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), offer);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CBroadcast_WebRTCStartResult_Request.offer)
}

// optional uint32 resolution_x = 4;
inline bool CBroadcast_WebRTCStartResult_Request::has_resolution_x() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CBroadcast_WebRTCStartResult_Request::clear_resolution_x() {
  resolution_x_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CBroadcast_WebRTCStartResult_Request::resolution_x() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WebRTCStartResult_Request.resolution_x)
  return resolution_x_;
}
inline void CBroadcast_WebRTCStartResult_Request::set_resolution_x(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  resolution_x_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WebRTCStartResult_Request.resolution_x)
}

// optional uint32 resolution_y = 5;
inline bool CBroadcast_WebRTCStartResult_Request::has_resolution_y() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CBroadcast_WebRTCStartResult_Request::clear_resolution_y() {
  resolution_y_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CBroadcast_WebRTCStartResult_Request::resolution_y() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WebRTCStartResult_Request.resolution_y)
  return resolution_y_;
}
inline void CBroadcast_WebRTCStartResult_Request::set_resolution_y(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  resolution_y_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WebRTCStartResult_Request.resolution_y)
}

// optional uint32 fps = 6;
inline bool CBroadcast_WebRTCStartResult_Request::has_fps() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CBroadcast_WebRTCStartResult_Request::clear_fps() {
  fps_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint32 CBroadcast_WebRTCStartResult_Request::fps() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WebRTCStartResult_Request.fps)
  return fps_;
}
inline void CBroadcast_WebRTCStartResult_Request::set_fps(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  fps_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WebRTCStartResult_Request.fps)
}

// -------------------------------------------------------------------

// CBroadcast_WebRTCStartResult_Response

// -------------------------------------------------------------------

// CBroadcast_WebRTCStopped_Request

// optional fixed64 webrtc_session_id = 1;
inline bool CBroadcast_WebRTCStopped_Request::has_webrtc_session_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_WebRTCStopped_Request::clear_webrtc_session_id() {
  webrtc_session_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 CBroadcast_WebRTCStopped_Request::webrtc_session_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WebRTCStopped_Request.webrtc_session_id)
  return webrtc_session_id_;
}
inline void CBroadcast_WebRTCStopped_Request::set_webrtc_session_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  webrtc_session_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WebRTCStopped_Request.webrtc_session_id)
}

// -------------------------------------------------------------------

// CBroadcast_WebRTCStopped_Response

// -------------------------------------------------------------------

// CBroadcast_WebRTCSetAnswer_Request

// optional fixed64 broadcaster_steamid = 1;
inline bool CBroadcast_WebRTCSetAnswer_Request::has_broadcaster_steamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CBroadcast_WebRTCSetAnswer_Request::clear_broadcaster_steamid() {
  broadcaster_steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint64 CBroadcast_WebRTCSetAnswer_Request::broadcaster_steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WebRTCSetAnswer_Request.broadcaster_steamid)
  return broadcaster_steamid_;
}
inline void CBroadcast_WebRTCSetAnswer_Request::set_broadcaster_steamid(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  broadcaster_steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WebRTCSetAnswer_Request.broadcaster_steamid)
}

// optional fixed64 webrtc_session_id = 2;
inline bool CBroadcast_WebRTCSetAnswer_Request::has_webrtc_session_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CBroadcast_WebRTCSetAnswer_Request::clear_webrtc_session_id() {
  webrtc_session_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint64 CBroadcast_WebRTCSetAnswer_Request::webrtc_session_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WebRTCSetAnswer_Request.webrtc_session_id)
  return webrtc_session_id_;
}
inline void CBroadcast_WebRTCSetAnswer_Request::set_webrtc_session_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  webrtc_session_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WebRTCSetAnswer_Request.webrtc_session_id)
}

// optional string answer = 3;
inline bool CBroadcast_WebRTCSetAnswer_Request::has_answer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_WebRTCSetAnswer_Request::clear_answer() {
  answer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CBroadcast_WebRTCSetAnswer_Request::answer() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WebRTCSetAnswer_Request.answer)
  return answer_.GetNoArena();
}
inline void CBroadcast_WebRTCSetAnswer_Request::set_answer(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  answer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WebRTCSetAnswer_Request.answer)
}
#if LANG_CXX11
inline void CBroadcast_WebRTCSetAnswer_Request::set_answer(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  answer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CBroadcast_WebRTCSetAnswer_Request.answer)
}
#endif
inline void CBroadcast_WebRTCSetAnswer_Request::set_answer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  answer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CBroadcast_WebRTCSetAnswer_Request.answer)
}
inline void CBroadcast_WebRTCSetAnswer_Request::set_answer(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  answer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CBroadcast_WebRTCSetAnswer_Request.answer)
}
inline ::std::string* CBroadcast_WebRTCSetAnswer_Request::mutable_answer() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_WebRTCSetAnswer_Request.answer)
  return answer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CBroadcast_WebRTCSetAnswer_Request::release_answer() {
  // @@protoc_insertion_point(field_release:proto.steam.CBroadcast_WebRTCSetAnswer_Request.answer)
  if (!has_answer()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return answer_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CBroadcast_WebRTCSetAnswer_Request::set_allocated_answer(::std::string* answer) {
  if (answer != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  answer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), answer);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CBroadcast_WebRTCSetAnswer_Request.answer)
}

// -------------------------------------------------------------------

// CBroadcast_WebRTCSetAnswer_Response

// -------------------------------------------------------------------

// CBroadcast_WebRTCLookupTURNServer_Request

// optional uint32 cellid = 1;
inline bool CBroadcast_WebRTCLookupTURNServer_Request::has_cellid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_WebRTCLookupTURNServer_Request::clear_cellid() {
  cellid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CBroadcast_WebRTCLookupTURNServer_Request::cellid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WebRTCLookupTURNServer_Request.cellid)
  return cellid_;
}
inline void CBroadcast_WebRTCLookupTURNServer_Request::set_cellid(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  cellid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WebRTCLookupTURNServer_Request.cellid)
}

// -------------------------------------------------------------------

// CBroadcast_WebRTCLookupTURNServer_Response

// optional string turn_server = 1;
inline bool CBroadcast_WebRTCLookupTURNServer_Response::has_turn_server() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_WebRTCLookupTURNServer_Response::clear_turn_server() {
  turn_server_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CBroadcast_WebRTCLookupTURNServer_Response::turn_server() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WebRTCLookupTURNServer_Response.turn_server)
  return turn_server_.GetNoArena();
}
inline void CBroadcast_WebRTCLookupTURNServer_Response::set_turn_server(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  turn_server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WebRTCLookupTURNServer_Response.turn_server)
}
#if LANG_CXX11
inline void CBroadcast_WebRTCLookupTURNServer_Response::set_turn_server(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  turn_server_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CBroadcast_WebRTCLookupTURNServer_Response.turn_server)
}
#endif
inline void CBroadcast_WebRTCLookupTURNServer_Response::set_turn_server(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  turn_server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CBroadcast_WebRTCLookupTURNServer_Response.turn_server)
}
inline void CBroadcast_WebRTCLookupTURNServer_Response::set_turn_server(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  turn_server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CBroadcast_WebRTCLookupTURNServer_Response.turn_server)
}
inline ::std::string* CBroadcast_WebRTCLookupTURNServer_Response::mutable_turn_server() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_WebRTCLookupTURNServer_Response.turn_server)
  return turn_server_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CBroadcast_WebRTCLookupTURNServer_Response::release_turn_server() {
  // @@protoc_insertion_point(field_release:proto.steam.CBroadcast_WebRTCLookupTURNServer_Response.turn_server)
  if (!has_turn_server()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return turn_server_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CBroadcast_WebRTCLookupTURNServer_Response::set_allocated_turn_server(::std::string* turn_server) {
  if (turn_server != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  turn_server_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), turn_server);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CBroadcast_WebRTCLookupTURNServer_Response.turn_server)
}

// -------------------------------------------------------------------

// CBroadcast_WebRTC_Candidate

// optional string sdp_mid = 1;
inline bool CBroadcast_WebRTC_Candidate::has_sdp_mid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_WebRTC_Candidate::clear_sdp_mid() {
  sdp_mid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CBroadcast_WebRTC_Candidate::sdp_mid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WebRTC_Candidate.sdp_mid)
  return sdp_mid_.GetNoArena();
}
inline void CBroadcast_WebRTC_Candidate::set_sdp_mid(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sdp_mid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WebRTC_Candidate.sdp_mid)
}
#if LANG_CXX11
inline void CBroadcast_WebRTC_Candidate::set_sdp_mid(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  sdp_mid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CBroadcast_WebRTC_Candidate.sdp_mid)
}
#endif
inline void CBroadcast_WebRTC_Candidate::set_sdp_mid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  sdp_mid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CBroadcast_WebRTC_Candidate.sdp_mid)
}
inline void CBroadcast_WebRTC_Candidate::set_sdp_mid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  sdp_mid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CBroadcast_WebRTC_Candidate.sdp_mid)
}
inline ::std::string* CBroadcast_WebRTC_Candidate::mutable_sdp_mid() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_WebRTC_Candidate.sdp_mid)
  return sdp_mid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CBroadcast_WebRTC_Candidate::release_sdp_mid() {
  // @@protoc_insertion_point(field_release:proto.steam.CBroadcast_WebRTC_Candidate.sdp_mid)
  if (!has_sdp_mid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return sdp_mid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CBroadcast_WebRTC_Candidate::set_allocated_sdp_mid(::std::string* sdp_mid) {
  if (sdp_mid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sdp_mid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sdp_mid);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CBroadcast_WebRTC_Candidate.sdp_mid)
}

// optional int32 sdp_mline_index = 2;
inline bool CBroadcast_WebRTC_Candidate::has_sdp_mline_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CBroadcast_WebRTC_Candidate::clear_sdp_mline_index() {
  sdp_mline_index_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::int32 CBroadcast_WebRTC_Candidate::sdp_mline_index() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WebRTC_Candidate.sdp_mline_index)
  return sdp_mline_index_;
}
inline void CBroadcast_WebRTC_Candidate::set_sdp_mline_index(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  sdp_mline_index_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WebRTC_Candidate.sdp_mline_index)
}

// optional string candidate = 3;
inline bool CBroadcast_WebRTC_Candidate::has_candidate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CBroadcast_WebRTC_Candidate::clear_candidate() {
  candidate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CBroadcast_WebRTC_Candidate::candidate() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WebRTC_Candidate.candidate)
  return candidate_.GetNoArena();
}
inline void CBroadcast_WebRTC_Candidate::set_candidate(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  candidate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WebRTC_Candidate.candidate)
}
#if LANG_CXX11
inline void CBroadcast_WebRTC_Candidate::set_candidate(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  candidate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CBroadcast_WebRTC_Candidate.candidate)
}
#endif
inline void CBroadcast_WebRTC_Candidate::set_candidate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  candidate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CBroadcast_WebRTC_Candidate.candidate)
}
inline void CBroadcast_WebRTC_Candidate::set_candidate(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  candidate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CBroadcast_WebRTC_Candidate.candidate)
}
inline ::std::string* CBroadcast_WebRTC_Candidate::mutable_candidate() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_WebRTC_Candidate.candidate)
  return candidate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CBroadcast_WebRTC_Candidate::release_candidate() {
  // @@protoc_insertion_point(field_release:proto.steam.CBroadcast_WebRTC_Candidate.candidate)
  if (!has_candidate()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return candidate_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CBroadcast_WebRTC_Candidate::set_allocated_candidate(::std::string* candidate) {
  if (candidate != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  candidate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), candidate);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CBroadcast_WebRTC_Candidate.candidate)
}

// -------------------------------------------------------------------

// CBroadcast_WebRTCAddHostCandidate_Request

// optional fixed64 webrtc_session_id = 1;
inline bool CBroadcast_WebRTCAddHostCandidate_Request::has_webrtc_session_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CBroadcast_WebRTCAddHostCandidate_Request::clear_webrtc_session_id() {
  webrtc_session_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint64 CBroadcast_WebRTCAddHostCandidate_Request::webrtc_session_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WebRTCAddHostCandidate_Request.webrtc_session_id)
  return webrtc_session_id_;
}
inline void CBroadcast_WebRTCAddHostCandidate_Request::set_webrtc_session_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  webrtc_session_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WebRTCAddHostCandidate_Request.webrtc_session_id)
}

// optional .proto.steam.CBroadcast_WebRTC_Candidate candidate = 2;
inline bool CBroadcast_WebRTCAddHostCandidate_Request::has_candidate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_WebRTCAddHostCandidate_Request::clear_candidate() {
  if (candidate_ != nullptr) candidate_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::proto::steam::CBroadcast_WebRTC_Candidate& CBroadcast_WebRTCAddHostCandidate_Request::candidate() const {
  const ::proto::steam::CBroadcast_WebRTC_Candidate* p = candidate_;
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WebRTCAddHostCandidate_Request.candidate)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::steam::CBroadcast_WebRTC_Candidate*>(
      &::proto::steam::_CBroadcast_WebRTC_Candidate_default_instance_);
}
inline ::proto::steam::CBroadcast_WebRTC_Candidate* CBroadcast_WebRTCAddHostCandidate_Request::release_candidate() {
  // @@protoc_insertion_point(field_release:proto.steam.CBroadcast_WebRTCAddHostCandidate_Request.candidate)
  _has_bits_[0] &= ~0x00000001u;
  ::proto::steam::CBroadcast_WebRTC_Candidate* temp = candidate_;
  candidate_ = nullptr;
  return temp;
}
inline ::proto::steam::CBroadcast_WebRTC_Candidate* CBroadcast_WebRTCAddHostCandidate_Request::mutable_candidate() {
  _has_bits_[0] |= 0x00000001u;
  if (candidate_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::steam::CBroadcast_WebRTC_Candidate>(GetArenaNoVirtual());
    candidate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_WebRTCAddHostCandidate_Request.candidate)
  return candidate_;
}
inline void CBroadcast_WebRTCAddHostCandidate_Request::set_allocated_candidate(::proto::steam::CBroadcast_WebRTC_Candidate* candidate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete candidate_;
  }
  if (candidate) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      candidate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, candidate, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  candidate_ = candidate;
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CBroadcast_WebRTCAddHostCandidate_Request.candidate)
}

// -------------------------------------------------------------------

// CBroadcast_WebRTCAddHostCandidate_Response

// -------------------------------------------------------------------

// CBroadcast_WebRTCAddViewerCandidate_Request

// optional fixed64 broadcaster_steamid = 1;
inline bool CBroadcast_WebRTCAddViewerCandidate_Request::has_broadcaster_steamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CBroadcast_WebRTCAddViewerCandidate_Request::clear_broadcaster_steamid() {
  broadcaster_steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint64 CBroadcast_WebRTCAddViewerCandidate_Request::broadcaster_steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Request.broadcaster_steamid)
  return broadcaster_steamid_;
}
inline void CBroadcast_WebRTCAddViewerCandidate_Request::set_broadcaster_steamid(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  broadcaster_steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Request.broadcaster_steamid)
}

// optional fixed64 webrtc_session_id = 2;
inline bool CBroadcast_WebRTCAddViewerCandidate_Request::has_webrtc_session_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CBroadcast_WebRTCAddViewerCandidate_Request::clear_webrtc_session_id() {
  webrtc_session_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint64 CBroadcast_WebRTCAddViewerCandidate_Request::webrtc_session_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Request.webrtc_session_id)
  return webrtc_session_id_;
}
inline void CBroadcast_WebRTCAddViewerCandidate_Request::set_webrtc_session_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  webrtc_session_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Request.webrtc_session_id)
}

// optional .proto.steam.CBroadcast_WebRTC_Candidate candidate = 3;
inline bool CBroadcast_WebRTCAddViewerCandidate_Request::has_candidate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_WebRTCAddViewerCandidate_Request::clear_candidate() {
  if (candidate_ != nullptr) candidate_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::proto::steam::CBroadcast_WebRTC_Candidate& CBroadcast_WebRTCAddViewerCandidate_Request::candidate() const {
  const ::proto::steam::CBroadcast_WebRTC_Candidate* p = candidate_;
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Request.candidate)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::steam::CBroadcast_WebRTC_Candidate*>(
      &::proto::steam::_CBroadcast_WebRTC_Candidate_default_instance_);
}
inline ::proto::steam::CBroadcast_WebRTC_Candidate* CBroadcast_WebRTCAddViewerCandidate_Request::release_candidate() {
  // @@protoc_insertion_point(field_release:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Request.candidate)
  _has_bits_[0] &= ~0x00000001u;
  ::proto::steam::CBroadcast_WebRTC_Candidate* temp = candidate_;
  candidate_ = nullptr;
  return temp;
}
inline ::proto::steam::CBroadcast_WebRTC_Candidate* CBroadcast_WebRTCAddViewerCandidate_Request::mutable_candidate() {
  _has_bits_[0] |= 0x00000001u;
  if (candidate_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::steam::CBroadcast_WebRTC_Candidate>(GetArenaNoVirtual());
    candidate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Request.candidate)
  return candidate_;
}
inline void CBroadcast_WebRTCAddViewerCandidate_Request::set_allocated_candidate(::proto::steam::CBroadcast_WebRTC_Candidate* candidate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete candidate_;
  }
  if (candidate) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      candidate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, candidate, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  candidate_ = candidate;
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Request.candidate)
}

// -------------------------------------------------------------------

// CBroadcast_WebRTCAddViewerCandidate_Response

// -------------------------------------------------------------------

// CBroadcast_WebRTCGetHostCandidates_Request

// optional fixed64 broadcaster_steamid = 1;
inline bool CBroadcast_WebRTCGetHostCandidates_Request::has_broadcaster_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_WebRTCGetHostCandidates_Request::clear_broadcaster_steamid() {
  broadcaster_steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 CBroadcast_WebRTCGetHostCandidates_Request::broadcaster_steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WebRTCGetHostCandidates_Request.broadcaster_steamid)
  return broadcaster_steamid_;
}
inline void CBroadcast_WebRTCGetHostCandidates_Request::set_broadcaster_steamid(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  broadcaster_steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WebRTCGetHostCandidates_Request.broadcaster_steamid)
}

// optional fixed64 webrtc_session_id = 2;
inline bool CBroadcast_WebRTCGetHostCandidates_Request::has_webrtc_session_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CBroadcast_WebRTCGetHostCandidates_Request::clear_webrtc_session_id() {
  webrtc_session_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint64 CBroadcast_WebRTCGetHostCandidates_Request::webrtc_session_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WebRTCGetHostCandidates_Request.webrtc_session_id)
  return webrtc_session_id_;
}
inline void CBroadcast_WebRTCGetHostCandidates_Request::set_webrtc_session_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  webrtc_session_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WebRTCGetHostCandidates_Request.webrtc_session_id)
}

// optional uint32 candidate_generation = 3;
inline bool CBroadcast_WebRTCGetHostCandidates_Request::has_candidate_generation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CBroadcast_WebRTCGetHostCandidates_Request::clear_candidate_generation() {
  candidate_generation_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CBroadcast_WebRTCGetHostCandidates_Request::candidate_generation() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WebRTCGetHostCandidates_Request.candidate_generation)
  return candidate_generation_;
}
inline void CBroadcast_WebRTCGetHostCandidates_Request::set_candidate_generation(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  candidate_generation_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WebRTCGetHostCandidates_Request.candidate_generation)
}

// -------------------------------------------------------------------

// CBroadcast_WebRTCGetHostCandidates_Response

// optional uint32 candidate_generation = 1;
inline bool CBroadcast_WebRTCGetHostCandidates_Response::has_candidate_generation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_WebRTCGetHostCandidates_Response::clear_candidate_generation() {
  candidate_generation_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CBroadcast_WebRTCGetHostCandidates_Response::candidate_generation() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WebRTCGetHostCandidates_Response.candidate_generation)
  return candidate_generation_;
}
inline void CBroadcast_WebRTCGetHostCandidates_Response::set_candidate_generation(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  candidate_generation_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WebRTCGetHostCandidates_Response.candidate_generation)
}

// repeated .proto.steam.CBroadcast_WebRTC_Candidate candidates = 2;
inline int CBroadcast_WebRTCGetHostCandidates_Response::candidates_size() const {
  return candidates_.size();
}
inline void CBroadcast_WebRTCGetHostCandidates_Response::clear_candidates() {
  candidates_.Clear();
}
inline ::proto::steam::CBroadcast_WebRTC_Candidate* CBroadcast_WebRTCGetHostCandidates_Response::mutable_candidates(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_WebRTCGetHostCandidates_Response.candidates)
  return candidates_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::steam::CBroadcast_WebRTC_Candidate >*
CBroadcast_WebRTCGetHostCandidates_Response::mutable_candidates() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CBroadcast_WebRTCGetHostCandidates_Response.candidates)
  return &candidates_;
}
inline const ::proto::steam::CBroadcast_WebRTC_Candidate& CBroadcast_WebRTCGetHostCandidates_Response::candidates(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WebRTCGetHostCandidates_Response.candidates)
  return candidates_.Get(index);
}
inline ::proto::steam::CBroadcast_WebRTC_Candidate* CBroadcast_WebRTCGetHostCandidates_Response::add_candidates() {
  // @@protoc_insertion_point(field_add:proto.steam.CBroadcast_WebRTCGetHostCandidates_Response.candidates)
  return candidates_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::steam::CBroadcast_WebRTC_Candidate >&
CBroadcast_WebRTCGetHostCandidates_Response::candidates() const {
  // @@protoc_insertion_point(field_list:proto.steam.CBroadcast_WebRTCGetHostCandidates_Response.candidates)
  return candidates_;
}

// -------------------------------------------------------------------

// CBroadcast_BroadcastViewerState_Notification

// optional fixed64 steamid = 1;
inline bool CBroadcast_BroadcastViewerState_Notification::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_BroadcastViewerState_Notification::clear_steamid() {
  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 CBroadcast_BroadcastViewerState_Notification::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_BroadcastViewerState_Notification.steamid)
  return steamid_;
}
inline void CBroadcast_BroadcastViewerState_Notification::set_steamid(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_BroadcastViewerState_Notification.steamid)
}

// optional .proto.steam.CBroadcast_BroadcastViewerState_Notification.EViewerState state = 2 [default = k_EViewerNeedsApproval];
inline bool CBroadcast_BroadcastViewerState_Notification::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CBroadcast_BroadcastViewerState_Notification::clear_state() {
  state_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::proto::steam::CBroadcast_BroadcastViewerState_Notification_EViewerState CBroadcast_BroadcastViewerState_Notification::state() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_BroadcastViewerState_Notification.state)
  return static_cast< ::proto::steam::CBroadcast_BroadcastViewerState_Notification_EViewerState >(state_);
}
inline void CBroadcast_BroadcastViewerState_Notification::set_state(::proto::steam::CBroadcast_BroadcastViewerState_Notification_EViewerState value) {
  assert(::proto::steam::CBroadcast_BroadcastViewerState_Notification_EViewerState_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  state_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_BroadcastViewerState_Notification.state)
}

// -------------------------------------------------------------------

// CBroadcast_WaitingBroadcastViewer_Notification

// optional fixed64 broadcast_id = 1;
inline bool CBroadcast_WaitingBroadcastViewer_Notification::has_broadcast_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_WaitingBroadcastViewer_Notification::clear_broadcast_id() {
  broadcast_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 CBroadcast_WaitingBroadcastViewer_Notification::broadcast_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WaitingBroadcastViewer_Notification.broadcast_id)
  return broadcast_id_;
}
inline void CBroadcast_WaitingBroadcastViewer_Notification::set_broadcast_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  broadcast_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WaitingBroadcastViewer_Notification.broadcast_id)
}

// -------------------------------------------------------------------

// CBroadcast_StopBroadcastUpload_Notification

// optional fixed64 broadcast_id = 1;
inline bool CBroadcast_StopBroadcastUpload_Notification::has_broadcast_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_StopBroadcastUpload_Notification::clear_broadcast_id() {
  broadcast_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 CBroadcast_StopBroadcastUpload_Notification::broadcast_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_StopBroadcastUpload_Notification.broadcast_id)
  return broadcast_id_;
}
inline void CBroadcast_StopBroadcastUpload_Notification::set_broadcast_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  broadcast_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_StopBroadcastUpload_Notification.broadcast_id)
}

// optional fixed64 broadcast_relay_id = 2;
inline bool CBroadcast_StopBroadcastUpload_Notification::has_broadcast_relay_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CBroadcast_StopBroadcastUpload_Notification::clear_broadcast_relay_id() {
  broadcast_relay_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint64 CBroadcast_StopBroadcastUpload_Notification::broadcast_relay_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_StopBroadcastUpload_Notification.broadcast_relay_id)
  return broadcast_relay_id_;
}
inline void CBroadcast_StopBroadcastUpload_Notification::set_broadcast_relay_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  broadcast_relay_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_StopBroadcastUpload_Notification.broadcast_relay_id)
}

// optional uint32 upload_result = 3;
inline bool CBroadcast_StopBroadcastUpload_Notification::has_upload_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CBroadcast_StopBroadcastUpload_Notification::clear_upload_result() {
  upload_result_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CBroadcast_StopBroadcastUpload_Notification::upload_result() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_StopBroadcastUpload_Notification.upload_result)
  return upload_result_;
}
inline void CBroadcast_StopBroadcastUpload_Notification::set_upload_result(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  upload_result_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_StopBroadcastUpload_Notification.upload_result)
}

// optional bool too_many_poor_uploads = 4;
inline bool CBroadcast_StopBroadcastUpload_Notification::has_too_many_poor_uploads() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CBroadcast_StopBroadcastUpload_Notification::clear_too_many_poor_uploads() {
  too_many_poor_uploads_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CBroadcast_StopBroadcastUpload_Notification::too_many_poor_uploads() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_StopBroadcastUpload_Notification.too_many_poor_uploads)
  return too_many_poor_uploads_;
}
inline void CBroadcast_StopBroadcastUpload_Notification::set_too_many_poor_uploads(bool value) {
  _has_bits_[0] |= 0x00000008u;
  too_many_poor_uploads_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_StopBroadcastUpload_Notification.too_many_poor_uploads)
}

// -------------------------------------------------------------------

// CBroadcast_SessionClosed_Notification

// optional fixed64 broadcast_id = 1;
inline bool CBroadcast_SessionClosed_Notification::has_broadcast_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_SessionClosed_Notification::clear_broadcast_id() {
  broadcast_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 CBroadcast_SessionClosed_Notification::broadcast_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_SessionClosed_Notification.broadcast_id)
  return broadcast_id_;
}
inline void CBroadcast_SessionClosed_Notification::set_broadcast_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  broadcast_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_SessionClosed_Notification.broadcast_id)
}

// -------------------------------------------------------------------

// CBroadcast_ViewerBroadcastInvite_Notification

// optional fixed64 broadcaster_steamid = 1;
inline bool CBroadcast_ViewerBroadcastInvite_Notification::has_broadcaster_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_ViewerBroadcastInvite_Notification::clear_broadcaster_steamid() {
  broadcaster_steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 CBroadcast_ViewerBroadcastInvite_Notification::broadcaster_steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_ViewerBroadcastInvite_Notification.broadcaster_steamid)
  return broadcaster_steamid_;
}
inline void CBroadcast_ViewerBroadcastInvite_Notification::set_broadcaster_steamid(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  broadcaster_steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_ViewerBroadcastInvite_Notification.broadcaster_steamid)
}

// -------------------------------------------------------------------

// CBroadcast_BroadcastStatus_Notification

// optional fixed64 broadcast_id = 1;
inline bool CBroadcast_BroadcastStatus_Notification::has_broadcast_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_BroadcastStatus_Notification::clear_broadcast_id() {
  broadcast_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 CBroadcast_BroadcastStatus_Notification::broadcast_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_BroadcastStatus_Notification.broadcast_id)
  return broadcast_id_;
}
inline void CBroadcast_BroadcastStatus_Notification::set_broadcast_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  broadcast_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_BroadcastStatus_Notification.broadcast_id)
}

// optional int32 num_viewers = 2;
inline bool CBroadcast_BroadcastStatus_Notification::has_num_viewers() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CBroadcast_BroadcastStatus_Notification::clear_num_viewers() {
  num_viewers_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::int32 CBroadcast_BroadcastStatus_Notification::num_viewers() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_BroadcastStatus_Notification.num_viewers)
  return num_viewers_;
}
inline void CBroadcast_BroadcastStatus_Notification::set_num_viewers(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  num_viewers_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_BroadcastStatus_Notification.num_viewers)
}

// -------------------------------------------------------------------

// CBroadcast_SendThumbnailToRelay_Notification

// optional string thumbnail_upload_token = 1;
inline bool CBroadcast_SendThumbnailToRelay_Notification::has_thumbnail_upload_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_SendThumbnailToRelay_Notification::clear_thumbnail_upload_token() {
  thumbnail_upload_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CBroadcast_SendThumbnailToRelay_Notification::thumbnail_upload_token() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_SendThumbnailToRelay_Notification.thumbnail_upload_token)
  return thumbnail_upload_token_.GetNoArena();
}
inline void CBroadcast_SendThumbnailToRelay_Notification::set_thumbnail_upload_token(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  thumbnail_upload_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_SendThumbnailToRelay_Notification.thumbnail_upload_token)
}
#if LANG_CXX11
inline void CBroadcast_SendThumbnailToRelay_Notification::set_thumbnail_upload_token(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  thumbnail_upload_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CBroadcast_SendThumbnailToRelay_Notification.thumbnail_upload_token)
}
#endif
inline void CBroadcast_SendThumbnailToRelay_Notification::set_thumbnail_upload_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  thumbnail_upload_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CBroadcast_SendThumbnailToRelay_Notification.thumbnail_upload_token)
}
inline void CBroadcast_SendThumbnailToRelay_Notification::set_thumbnail_upload_token(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  thumbnail_upload_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CBroadcast_SendThumbnailToRelay_Notification.thumbnail_upload_token)
}
inline ::std::string* CBroadcast_SendThumbnailToRelay_Notification::mutable_thumbnail_upload_token() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_SendThumbnailToRelay_Notification.thumbnail_upload_token)
  return thumbnail_upload_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CBroadcast_SendThumbnailToRelay_Notification::release_thumbnail_upload_token() {
  // @@protoc_insertion_point(field_release:proto.steam.CBroadcast_SendThumbnailToRelay_Notification.thumbnail_upload_token)
  if (!has_thumbnail_upload_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return thumbnail_upload_token_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CBroadcast_SendThumbnailToRelay_Notification::set_allocated_thumbnail_upload_token(::std::string* thumbnail_upload_token) {
  if (thumbnail_upload_token != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  thumbnail_upload_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), thumbnail_upload_token);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CBroadcast_SendThumbnailToRelay_Notification.thumbnail_upload_token)
}

// optional fixed64 thumbnail_broadcast_session_id = 2;
inline bool CBroadcast_SendThumbnailToRelay_Notification::has_thumbnail_broadcast_session_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CBroadcast_SendThumbnailToRelay_Notification::clear_thumbnail_broadcast_session_id() {
  thumbnail_broadcast_session_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint64 CBroadcast_SendThumbnailToRelay_Notification::thumbnail_broadcast_session_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_SendThumbnailToRelay_Notification.thumbnail_broadcast_session_id)
  return thumbnail_broadcast_session_id_;
}
inline void CBroadcast_SendThumbnailToRelay_Notification::set_thumbnail_broadcast_session_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  thumbnail_broadcast_session_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_SendThumbnailToRelay_Notification.thumbnail_broadcast_session_id)
}

// optional bytes thumbnail_data = 3;
inline bool CBroadcast_SendThumbnailToRelay_Notification::has_thumbnail_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CBroadcast_SendThumbnailToRelay_Notification::clear_thumbnail_data() {
  thumbnail_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CBroadcast_SendThumbnailToRelay_Notification::thumbnail_data() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_SendThumbnailToRelay_Notification.thumbnail_data)
  return thumbnail_data_.GetNoArena();
}
inline void CBroadcast_SendThumbnailToRelay_Notification::set_thumbnail_data(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  thumbnail_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_SendThumbnailToRelay_Notification.thumbnail_data)
}
#if LANG_CXX11
inline void CBroadcast_SendThumbnailToRelay_Notification::set_thumbnail_data(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  thumbnail_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CBroadcast_SendThumbnailToRelay_Notification.thumbnail_data)
}
#endif
inline void CBroadcast_SendThumbnailToRelay_Notification::set_thumbnail_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  thumbnail_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CBroadcast_SendThumbnailToRelay_Notification.thumbnail_data)
}
inline void CBroadcast_SendThumbnailToRelay_Notification::set_thumbnail_data(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  thumbnail_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CBroadcast_SendThumbnailToRelay_Notification.thumbnail_data)
}
inline ::std::string* CBroadcast_SendThumbnailToRelay_Notification::mutable_thumbnail_data() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_SendThumbnailToRelay_Notification.thumbnail_data)
  return thumbnail_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CBroadcast_SendThumbnailToRelay_Notification::release_thumbnail_data() {
  // @@protoc_insertion_point(field_release:proto.steam.CBroadcast_SendThumbnailToRelay_Notification.thumbnail_data)
  if (!has_thumbnail_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return thumbnail_data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CBroadcast_SendThumbnailToRelay_Notification::set_allocated_thumbnail_data(::std::string* thumbnail_data) {
  if (thumbnail_data != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  thumbnail_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), thumbnail_data);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CBroadcast_SendThumbnailToRelay_Notification.thumbnail_data)
}

// optional uint32 thumbnail_width = 4;
inline bool CBroadcast_SendThumbnailToRelay_Notification::has_thumbnail_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CBroadcast_SendThumbnailToRelay_Notification::clear_thumbnail_width() {
  thumbnail_width_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CBroadcast_SendThumbnailToRelay_Notification::thumbnail_width() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_SendThumbnailToRelay_Notification.thumbnail_width)
  return thumbnail_width_;
}
inline void CBroadcast_SendThumbnailToRelay_Notification::set_thumbnail_width(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  thumbnail_width_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_SendThumbnailToRelay_Notification.thumbnail_width)
}

// optional uint32 thumbnail_height = 5;
inline bool CBroadcast_SendThumbnailToRelay_Notification::has_thumbnail_height() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CBroadcast_SendThumbnailToRelay_Notification::clear_thumbnail_height() {
  thumbnail_height_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CBroadcast_SendThumbnailToRelay_Notification::thumbnail_height() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_SendThumbnailToRelay_Notification.thumbnail_height)
  return thumbnail_height_;
}
inline void CBroadcast_SendThumbnailToRelay_Notification::set_thumbnail_height(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  thumbnail_height_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_SendThumbnailToRelay_Notification.thumbnail_height)
}

// -------------------------------------------------------------------

// CBroadcast_WebRTCNeedTURNServer_Notification

// optional fixed64 broadcast_session_id = 1;
inline bool CBroadcast_WebRTCNeedTURNServer_Notification::has_broadcast_session_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_WebRTCNeedTURNServer_Notification::clear_broadcast_session_id() {
  broadcast_session_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 CBroadcast_WebRTCNeedTURNServer_Notification::broadcast_session_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WebRTCNeedTURNServer_Notification.broadcast_session_id)
  return broadcast_session_id_;
}
inline void CBroadcast_WebRTCNeedTURNServer_Notification::set_broadcast_session_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  broadcast_session_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WebRTCNeedTURNServer_Notification.broadcast_session_id)
}

// -------------------------------------------------------------------

// CBroadcast_WebRTCStart_Notification

// optional fixed64 broadcast_session_id = 1;
inline bool CBroadcast_WebRTCStart_Notification::has_broadcast_session_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_WebRTCStart_Notification::clear_broadcast_session_id() {
  broadcast_session_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 CBroadcast_WebRTCStart_Notification::broadcast_session_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WebRTCStart_Notification.broadcast_session_id)
  return broadcast_session_id_;
}
inline void CBroadcast_WebRTCStart_Notification::set_broadcast_session_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  broadcast_session_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WebRTCStart_Notification.broadcast_session_id)
}

// optional fixed64 webrtc_session_id = 2;
inline bool CBroadcast_WebRTCStart_Notification::has_webrtc_session_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CBroadcast_WebRTCStart_Notification::clear_webrtc_session_id() {
  webrtc_session_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint64 CBroadcast_WebRTCStart_Notification::webrtc_session_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WebRTCStart_Notification.webrtc_session_id)
  return webrtc_session_id_;
}
inline void CBroadcast_WebRTCStart_Notification::set_webrtc_session_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  webrtc_session_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WebRTCStart_Notification.webrtc_session_id)
}

// optional fixed64 viewer_steamid = 3;
inline bool CBroadcast_WebRTCStart_Notification::has_viewer_steamid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CBroadcast_WebRTCStart_Notification::clear_viewer_steamid() {
  viewer_steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint64 CBroadcast_WebRTCStart_Notification::viewer_steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WebRTCStart_Notification.viewer_steamid)
  return viewer_steamid_;
}
inline void CBroadcast_WebRTCStart_Notification::set_viewer_steamid(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  viewer_steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WebRTCStart_Notification.viewer_steamid)
}

// optional fixed64 viewer_token = 4;
inline bool CBroadcast_WebRTCStart_Notification::has_viewer_token() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CBroadcast_WebRTCStart_Notification::clear_viewer_token() {
  viewer_token_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint64 CBroadcast_WebRTCStart_Notification::viewer_token() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WebRTCStart_Notification.viewer_token)
  return viewer_token_;
}
inline void CBroadcast_WebRTCStart_Notification::set_viewer_token(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  viewer_token_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WebRTCStart_Notification.viewer_token)
}

// -------------------------------------------------------------------

// CBroadcast_WebRTCSetAnswer_Notification

// optional fixed64 broadcast_session_id = 1;
inline bool CBroadcast_WebRTCSetAnswer_Notification::has_broadcast_session_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CBroadcast_WebRTCSetAnswer_Notification::clear_broadcast_session_id() {
  broadcast_session_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint64 CBroadcast_WebRTCSetAnswer_Notification::broadcast_session_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WebRTCSetAnswer_Notification.broadcast_session_id)
  return broadcast_session_id_;
}
inline void CBroadcast_WebRTCSetAnswer_Notification::set_broadcast_session_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  broadcast_session_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WebRTCSetAnswer_Notification.broadcast_session_id)
}

// optional fixed64 webrtc_session_id = 2;
inline bool CBroadcast_WebRTCSetAnswer_Notification::has_webrtc_session_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CBroadcast_WebRTCSetAnswer_Notification::clear_webrtc_session_id() {
  webrtc_session_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint64 CBroadcast_WebRTCSetAnswer_Notification::webrtc_session_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WebRTCSetAnswer_Notification.webrtc_session_id)
  return webrtc_session_id_;
}
inline void CBroadcast_WebRTCSetAnswer_Notification::set_webrtc_session_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  webrtc_session_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WebRTCSetAnswer_Notification.webrtc_session_id)
}

// optional string answer = 3;
inline bool CBroadcast_WebRTCSetAnswer_Notification::has_answer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_WebRTCSetAnswer_Notification::clear_answer() {
  answer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CBroadcast_WebRTCSetAnswer_Notification::answer() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WebRTCSetAnswer_Notification.answer)
  return answer_.GetNoArena();
}
inline void CBroadcast_WebRTCSetAnswer_Notification::set_answer(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  answer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WebRTCSetAnswer_Notification.answer)
}
#if LANG_CXX11
inline void CBroadcast_WebRTCSetAnswer_Notification::set_answer(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  answer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CBroadcast_WebRTCSetAnswer_Notification.answer)
}
#endif
inline void CBroadcast_WebRTCSetAnswer_Notification::set_answer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  answer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CBroadcast_WebRTCSetAnswer_Notification.answer)
}
inline void CBroadcast_WebRTCSetAnswer_Notification::set_answer(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  answer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CBroadcast_WebRTCSetAnswer_Notification.answer)
}
inline ::std::string* CBroadcast_WebRTCSetAnswer_Notification::mutable_answer() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_WebRTCSetAnswer_Notification.answer)
  return answer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CBroadcast_WebRTCSetAnswer_Notification::release_answer() {
  // @@protoc_insertion_point(field_release:proto.steam.CBroadcast_WebRTCSetAnswer_Notification.answer)
  if (!has_answer()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return answer_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CBroadcast_WebRTCSetAnswer_Notification::set_allocated_answer(::std::string* answer) {
  if (answer != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  answer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), answer);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CBroadcast_WebRTCSetAnswer_Notification.answer)
}

// -------------------------------------------------------------------

// CBroadcast_WebRTCAddViewerCandidate_Notification

// optional fixed64 broadcast_session_id = 1;
inline bool CBroadcast_WebRTCAddViewerCandidate_Notification::has_broadcast_session_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CBroadcast_WebRTCAddViewerCandidate_Notification::clear_broadcast_session_id() {
  broadcast_session_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint64 CBroadcast_WebRTCAddViewerCandidate_Notification::broadcast_session_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Notification.broadcast_session_id)
  return broadcast_session_id_;
}
inline void CBroadcast_WebRTCAddViewerCandidate_Notification::set_broadcast_session_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  broadcast_session_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Notification.broadcast_session_id)
}

// optional fixed64 webrtc_session_id = 2;
inline bool CBroadcast_WebRTCAddViewerCandidate_Notification::has_webrtc_session_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CBroadcast_WebRTCAddViewerCandidate_Notification::clear_webrtc_session_id() {
  webrtc_session_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint64 CBroadcast_WebRTCAddViewerCandidate_Notification::webrtc_session_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Notification.webrtc_session_id)
  return webrtc_session_id_;
}
inline void CBroadcast_WebRTCAddViewerCandidate_Notification::set_webrtc_session_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  webrtc_session_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Notification.webrtc_session_id)
}

// optional .proto.steam.CBroadcast_WebRTC_Candidate candidate = 3;
inline bool CBroadcast_WebRTCAddViewerCandidate_Notification::has_candidate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_WebRTCAddViewerCandidate_Notification::clear_candidate() {
  if (candidate_ != nullptr) candidate_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::proto::steam::CBroadcast_WebRTC_Candidate& CBroadcast_WebRTCAddViewerCandidate_Notification::candidate() const {
  const ::proto::steam::CBroadcast_WebRTC_Candidate* p = candidate_;
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Notification.candidate)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::steam::CBroadcast_WebRTC_Candidate*>(
      &::proto::steam::_CBroadcast_WebRTC_Candidate_default_instance_);
}
inline ::proto::steam::CBroadcast_WebRTC_Candidate* CBroadcast_WebRTCAddViewerCandidate_Notification::release_candidate() {
  // @@protoc_insertion_point(field_release:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Notification.candidate)
  _has_bits_[0] &= ~0x00000001u;
  ::proto::steam::CBroadcast_WebRTC_Candidate* temp = candidate_;
  candidate_ = nullptr;
  return temp;
}
inline ::proto::steam::CBroadcast_WebRTC_Candidate* CBroadcast_WebRTCAddViewerCandidate_Notification::mutable_candidate() {
  _has_bits_[0] |= 0x00000001u;
  if (candidate_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::steam::CBroadcast_WebRTC_Candidate>(GetArenaNoVirtual());
    candidate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Notification.candidate)
  return candidate_;
}
inline void CBroadcast_WebRTCAddViewerCandidate_Notification::set_allocated_candidate(::proto::steam::CBroadcast_WebRTC_Candidate* candidate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete candidate_;
  }
  if (candidate) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      candidate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, candidate, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  candidate_ = candidate;
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Notification.candidate)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace steam
}  // namespace proto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::proto::steam::CBroadcast_WatchBroadcast_Response_EWatchResponse> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::steam::CBroadcast_WatchBroadcast_Response_EWatchResponse>() {
  return ::proto::steam::CBroadcast_WatchBroadcast_Response_EWatchResponse_descriptor();
}
template <> struct is_proto_enum< ::proto::steam::CBroadcast_BroadcastViewerState_Notification_EViewerState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::steam::CBroadcast_BroadcastViewerState_Notification_EViewerState>() {
  return ::proto::steam::CBroadcast_BroadcastViewerState_Notification_EViewerState_descriptor();
}
template <> struct is_proto_enum< ::proto::steam::EBroadcastWatchLocation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::steam::EBroadcastWatchLocation>() {
  return ::proto::steam::EBroadcastWatchLocation_descriptor();
}
template <> struct is_proto_enum< ::proto::steam::EBroadcastChatPermission> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::steam::EBroadcastChatPermission>() {
  return ::proto::steam::EBroadcastChatPermission_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_steammessages_5fbroadcast_2esteamclient_2eproto
