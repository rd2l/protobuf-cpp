// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_clientserver_login.proto

#include "steammessages_clientserver_login.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

namespace proto {
namespace steam {
class CMsgClientHeartBeatDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientHeartBeat> _instance;
} _CMsgClientHeartBeat_default_instance_;
class CMsgClientServerTimestampRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientServerTimestampRequest> _instance;
} _CMsgClientServerTimestampRequest_default_instance_;
class CMsgClientServerTimestampResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientServerTimestampResponse> _instance;
} _CMsgClientServerTimestampResponse_default_instance_;
class CMsgClientLogonDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientLogon> _instance;
} _CMsgClientLogon_default_instance_;
class CMsgClientLogonResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientLogonResponse> _instance;
} _CMsgClientLogonResponse_default_instance_;
class CMsgClientRequestWebAPIAuthenticateUserNonceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientRequestWebAPIAuthenticateUserNonce> _instance;
} _CMsgClientRequestWebAPIAuthenticateUserNonce_default_instance_;
class CMsgClientRequestWebAPIAuthenticateUserNonceResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientRequestWebAPIAuthenticateUserNonceResponse> _instance;
} _CMsgClientRequestWebAPIAuthenticateUserNonceResponse_default_instance_;
class CMsgClientLogOffDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientLogOff> _instance;
} _CMsgClientLogOff_default_instance_;
class CMsgClientLoggedOffDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientLoggedOff> _instance;
} _CMsgClientLoggedOff_default_instance_;
class CMsgClientNewLoginKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientNewLoginKey> _instance;
} _CMsgClientNewLoginKey_default_instance_;
class CMsgClientNewLoginKeyAcceptedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientNewLoginKeyAccepted> _instance;
} _CMsgClientNewLoginKeyAccepted_default_instance_;
class CMsgClientAccountInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientAccountInfo> _instance;
} _CMsgClientAccountInfo_default_instance_;
}  // namespace steam
}  // namespace proto
static void InitDefaultsCMsgClientHeartBeat_steammessages_5fclientserver_5flogin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientHeartBeat_default_instance_;
    new (ptr) ::proto::steam::CMsgClientHeartBeat();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientHeartBeat::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientHeartBeat_steammessages_5fclientserver_5flogin_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientHeartBeat_steammessages_5fclientserver_5flogin_2eproto}, {}};

static void InitDefaultsCMsgClientServerTimestampRequest_steammessages_5fclientserver_5flogin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientServerTimestampRequest_default_instance_;
    new (ptr) ::proto::steam::CMsgClientServerTimestampRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientServerTimestampRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientServerTimestampRequest_steammessages_5fclientserver_5flogin_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientServerTimestampRequest_steammessages_5fclientserver_5flogin_2eproto}, {}};

static void InitDefaultsCMsgClientServerTimestampResponse_steammessages_5fclientserver_5flogin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientServerTimestampResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgClientServerTimestampResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientServerTimestampResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientServerTimestampResponse_steammessages_5fclientserver_5flogin_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientServerTimestampResponse_steammessages_5fclientserver_5flogin_2eproto}, {}};

static void InitDefaultsCMsgClientLogon_steammessages_5fclientserver_5flogin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientLogon_default_instance_;
    new (ptr) ::proto::steam::CMsgClientLogon();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientLogon::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientLogon_steammessages_5fclientserver_5flogin_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientLogon_steammessages_5fclientserver_5flogin_2eproto}, {}};

static void InitDefaultsCMsgClientLogonResponse_steammessages_5fclientserver_5flogin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientLogonResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgClientLogonResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientLogonResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientLogonResponse_steammessages_5fclientserver_5flogin_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientLogonResponse_steammessages_5fclientserver_5flogin_2eproto}, {}};

static void InitDefaultsCMsgClientRequestWebAPIAuthenticateUserNonce_steammessages_5fclientserver_5flogin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientRequestWebAPIAuthenticateUserNonce_default_instance_;
    new (ptr) ::proto::steam::CMsgClientRequestWebAPIAuthenticateUserNonce();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientRequestWebAPIAuthenticateUserNonce::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientRequestWebAPIAuthenticateUserNonce_steammessages_5fclientserver_5flogin_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientRequestWebAPIAuthenticateUserNonce_steammessages_5fclientserver_5flogin_2eproto}, {}};

static void InitDefaultsCMsgClientRequestWebAPIAuthenticateUserNonceResponse_steammessages_5fclientserver_5flogin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientRequestWebAPIAuthenticateUserNonceResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgClientRequestWebAPIAuthenticateUserNonceResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientRequestWebAPIAuthenticateUserNonceResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientRequestWebAPIAuthenticateUserNonceResponse_steammessages_5fclientserver_5flogin_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientRequestWebAPIAuthenticateUserNonceResponse_steammessages_5fclientserver_5flogin_2eproto}, {}};

static void InitDefaultsCMsgClientLogOff_steammessages_5fclientserver_5flogin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientLogOff_default_instance_;
    new (ptr) ::proto::steam::CMsgClientLogOff();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientLogOff::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientLogOff_steammessages_5fclientserver_5flogin_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientLogOff_steammessages_5fclientserver_5flogin_2eproto}, {}};

static void InitDefaultsCMsgClientLoggedOff_steammessages_5fclientserver_5flogin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientLoggedOff_default_instance_;
    new (ptr) ::proto::steam::CMsgClientLoggedOff();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientLoggedOff::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientLoggedOff_steammessages_5fclientserver_5flogin_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientLoggedOff_steammessages_5fclientserver_5flogin_2eproto}, {}};

static void InitDefaultsCMsgClientNewLoginKey_steammessages_5fclientserver_5flogin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientNewLoginKey_default_instance_;
    new (ptr) ::proto::steam::CMsgClientNewLoginKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientNewLoginKey::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientNewLoginKey_steammessages_5fclientserver_5flogin_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientNewLoginKey_steammessages_5fclientserver_5flogin_2eproto}, {}};

static void InitDefaultsCMsgClientNewLoginKeyAccepted_steammessages_5fclientserver_5flogin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientNewLoginKeyAccepted_default_instance_;
    new (ptr) ::proto::steam::CMsgClientNewLoginKeyAccepted();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientNewLoginKeyAccepted::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientNewLoginKeyAccepted_steammessages_5fclientserver_5flogin_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientNewLoginKeyAccepted_steammessages_5fclientserver_5flogin_2eproto}, {}};

static void InitDefaultsCMsgClientAccountInfo_steammessages_5fclientserver_5flogin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientAccountInfo_default_instance_;
    new (ptr) ::proto::steam::CMsgClientAccountInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientAccountInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientAccountInfo_steammessages_5fclientserver_5flogin_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientAccountInfo_steammessages_5fclientserver_5flogin_2eproto}, {}};

void InitDefaults_steammessages_5fclientserver_5flogin_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientHeartBeat_steammessages_5fclientserver_5flogin_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientServerTimestampRequest_steammessages_5fclientserver_5flogin_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientServerTimestampResponse_steammessages_5fclientserver_5flogin_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientLogon_steammessages_5fclientserver_5flogin_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientLogonResponse_steammessages_5fclientserver_5flogin_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientRequestWebAPIAuthenticateUserNonce_steammessages_5fclientserver_5flogin_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientRequestWebAPIAuthenticateUserNonceResponse_steammessages_5fclientserver_5flogin_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientLogOff_steammessages_5fclientserver_5flogin_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientLoggedOff_steammessages_5fclientserver_5flogin_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientNewLoginKey_steammessages_5fclientserver_5flogin_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientNewLoginKeyAccepted_steammessages_5fclientserver_5flogin_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientAccountInfo_steammessages_5fclientserver_5flogin_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_steammessages_5fclientserver_5flogin_2eproto[12];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_steammessages_5fclientserver_5flogin_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_steammessages_5fclientserver_5flogin_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_steammessages_5fclientserver_5flogin_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientHeartBeat, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientHeartBeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientServerTimestampRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientServerTimestampRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientServerTimestampRequest, client_request_timestamp_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientServerTimestampResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientServerTimestampResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientServerTimestampResponse, client_request_timestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientServerTimestampResponse, server_timestamp_ms_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogon, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogon, protocol_version_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogon, obfustucated_private_ip_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogon, cell_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogon, last_session_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogon, client_package_version_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogon, client_language_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogon, client_os_type_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogon, should_remember_password_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogon, wine_version_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogon, ping_ms_from_cell_search_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogon, public_ip_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogon, qos_level_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogon, client_supplied_steam_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogon, machine_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogon, launcher_type_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogon, ui_mode_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogon, chat_mode_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogon, steam2_auth_ticket_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogon, email_address_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogon, rtime32_account_creation_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogon, account_name_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogon, password_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogon, game_server_token_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogon, login_key_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogon, was_converted_deprecated_msg_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogon, anon_user_target_account_name_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogon, resolved_user_steam_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogon, eresult_sentryfile_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogon, sha_sentryfile_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogon, auth_code_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogon, otp_type_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogon, otp_value_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogon, otp_identifier_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogon, steam2_ticket_request_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogon, sony_psn_ticket_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogon, sony_psn_service_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogon, create_new_psn_linked_account_if_needed_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogon, sony_psn_name_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogon, game_server_app_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogon, steamguard_dont_remember_computer_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogon, machine_name_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogon, machine_name_userchosen_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogon, country_override_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogon, is_steam_box_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogon, client_instance_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogon, two_factor_code_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogon, supports_rate_limit_response_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogon, web_logon_nonce_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogon, priority_reason_),
  21,
  22,
  23,
  24,
  25,
  0,
  26,
  35,
  1,
  27,
  28,
  30,
  29,
  2,
  31,
  32,
  33,
  3,
  4,
  34,
  5,
  6,
  7,
  8,
  36,
  9,
  39,
  40,
  10,
  11,
  41,
  42,
  12,
  37,
  13,
  14,
  38,
  15,
  43,
  45,
  16,
  17,
  18,
  46,
  44,
  19,
  47,
  20,
  48,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogonResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogonResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogonResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogonResponse, out_of_game_heartbeat_seconds_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogonResponse, in_game_heartbeat_seconds_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogonResponse, public_ip_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogonResponse, rtime32_server_time_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogonResponse, account_flags_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogonResponse, cell_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogonResponse, email_domain_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogonResponse, steam2_ticket_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogonResponse, eresult_extended_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogonResponse, webapi_authenticate_user_nonce_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogonResponse, cell_id_ping_threshold_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogonResponse, use_pics_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogonResponse, vanity_url_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogonResponse, client_supplied_steamid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogonResponse, ip_country_code_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogonResponse, parental_settings_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogonResponse, parental_setting_signature_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogonResponse, count_loginfailures_to_migrate_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogonResponse, count_disconnects_to_migrate_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogonResponse, ogs_data_report_time_window_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogonResponse, client_instance_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogonResponse, force_client_update_check_),
  22,
  7,
  8,
  9,
  10,
  11,
  12,
  0,
  1,
  13,
  2,
  14,
  16,
  3,
  15,
  4,
  5,
  6,
  18,
  19,
  20,
  21,
  17,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientRequestWebAPIAuthenticateUserNonce, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientRequestWebAPIAuthenticateUserNonce, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientRequestWebAPIAuthenticateUserNonce, token_type_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientRequestWebAPIAuthenticateUserNonceResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientRequestWebAPIAuthenticateUserNonceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientRequestWebAPIAuthenticateUserNonceResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientRequestWebAPIAuthenticateUserNonceResponse, webapi_authenticate_user_nonce_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientRequestWebAPIAuthenticateUserNonceResponse, token_type_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogOff, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLogOff, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLoggedOff, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLoggedOff, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientLoggedOff, eresult_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientNewLoginKey, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientNewLoginKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientNewLoginKey, unique_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientNewLoginKey, login_key_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientNewLoginKeyAccepted, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientNewLoginKeyAccepted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientNewLoginKeyAccepted, unique_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAccountInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAccountInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAccountInfo, persona_name_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAccountInfo, ip_country_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAccountInfo, count_authed_computers_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAccountInfo, account_flags_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAccountInfo, facebook_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAccountInfo, facebook_name_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAccountInfo, steamguard_notify_newmachines_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAccountInfo, steamguard_machine_name_user_chosen_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAccountInfo, is_phone_verified_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAccountInfo, two_factor_state_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAccountInfo, is_phone_identifying_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAccountInfo, is_phone_needing_reverify_),
  0,
  1,
  4,
  5,
  6,
  2,
  7,
  3,
  8,
  11,
  9,
  10,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 5, sizeof(::proto::steam::CMsgClientHeartBeat)},
  { 5, 11, sizeof(::proto::steam::CMsgClientServerTimestampRequest)},
  { 12, 19, sizeof(::proto::steam::CMsgClientServerTimestampResponse)},
  { 21, 75, sizeof(::proto::steam::CMsgClientLogon)},
  { 124, 152, sizeof(::proto::steam::CMsgClientLogonResponse)},
  { 175, 181, sizeof(::proto::steam::CMsgClientRequestWebAPIAuthenticateUserNonce)},
  { 182, 190, sizeof(::proto::steam::CMsgClientRequestWebAPIAuthenticateUserNonceResponse)},
  { 193, 198, sizeof(::proto::steam::CMsgClientLogOff)},
  { 198, 204, sizeof(::proto::steam::CMsgClientLoggedOff)},
  { 205, 212, sizeof(::proto::steam::CMsgClientNewLoginKey)},
  { 214, 220, sizeof(::proto::steam::CMsgClientNewLoginKeyAccepted)},
  { 221, 238, sizeof(::proto::steam::CMsgClientAccountInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientHeartBeat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientServerTimestampRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientServerTimestampResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientLogon_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientLogonResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientRequestWebAPIAuthenticateUserNonce_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientRequestWebAPIAuthenticateUserNonceResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientLogOff_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientLoggedOff_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientNewLoginKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientNewLoginKeyAccepted_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientAccountInfo_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_steammessages_5fclientserver_5flogin_2eproto = {
  {}, AddDescriptors_steammessages_5fclientserver_5flogin_2eproto, "steammessages_clientserver_login.proto", schemas,
  file_default_instances, TableStruct_steammessages_5fclientserver_5flogin_2eproto::offsets,
  file_level_metadata_steammessages_5fclientserver_5flogin_2eproto, 12, file_level_enum_descriptors_steammessages_5fclientserver_5flogin_2eproto, file_level_service_descriptors_steammessages_5fclientserver_5flogin_2eproto,
};

const char descriptor_table_protodef_steammessages_5fclientserver_5flogin_2eproto[] =
  "\n&steammessages_clientserver_login.proto"
  "\022\013proto.steam\032\030steammessages_base.proto\""
  "\025\n\023CMsgClientHeartBeat\"D\n CMsgClientServ"
  "erTimestampRequest\022 \n\030client_request_tim"
  "estamp\030\001 \001(\004\"b\n!CMsgClientServerTimestam"
  "pResponse\022 \n\030client_request_timestamp\030\001 "
  "\001(\004\022\033\n\023server_timestamp_ms\030\002 \001(\004\"\312\n\n\017CMs"
  "gClientLogon\022\030\n\020protocol_version\030\001 \001(\r\022\037"
  "\n\027obfustucated_private_ip\030\002 \001(\r\022\017\n\007cell_"
  "id\030\003 \001(\r\022\027\n\017last_session_id\030\004 \001(\r\022\036\n\026cli"
  "ent_package_version\030\005 \001(\r\022\027\n\017client_lang"
  "uage\030\006 \001(\t\022\026\n\016client_os_type\030\007 \001(\r\022\'\n\030sh"
  "ould_remember_password\030\010 \001(\010:\005false\022\024\n\014w"
  "ine_version\030\t \001(\t\022 \n\030ping_ms_from_cell_s"
  "earch\030\n \001(\r\022\021\n\tpublic_ip\030\024 \001(\r\022\021\n\tqos_le"
  "vel\030\025 \001(\r\022 \n\030client_supplied_steam_id\030\026 "
  "\001(\006\022\022\n\nmachine_id\030\036 \001(\014\022\030\n\rlauncher_type"
  "\030\037 \001(\r:\0010\022\022\n\007ui_mode\030  \001(\r:\0010\022\024\n\tchat_mo"
  "de\030! \001(\r:\0010\022\032\n\022steam2_auth_ticket\030) \001(\014\022"
  "\025\n\remail_address\030* \001(\t\022 \n\030rtime32_accoun"
  "t_creation\030+ \001(\007\022\024\n\014account_name\0302 \001(\t\022\020"
  "\n\010password\0303 \001(\t\022\031\n\021game_server_token\0304 "
  "\001(\t\022\021\n\tlogin_key\030< \001(\t\022+\n\034was_converted_"
  "deprecated_msg\030F \001(\010:\005false\022%\n\035anon_user"
  "_target_account_name\030P \001(\t\022\036\n\026resolved_u"
  "ser_steam_id\030Q \001(\006\022\032\n\022eresult_sentryfile"
  "\030R \001(\005\022\026\n\016sha_sentryfile\030S \001(\014\022\021\n\tauth_c"
  "ode\030T \001(\t\022\020\n\010otp_type\030U \001(\005\022\021\n\totp_value"
  "\030V \001(\r\022\026\n\016otp_identifier\030W \001(\t\022\035\n\025steam2"
  "_ticket_request\030X \001(\010\022\027\n\017sony_psn_ticket"
  "\030Z \001(\014\022\033\n\023sony_psn_service_id\030[ \001(\t\0226\n\'c"
  "reate_new_psn_linked_account_if_needed\030\\"
  " \001(\010:\005false\022\025\n\rsony_psn_name\030] \001(\t\022\032\n\022ga"
  "me_server_app_id\030^ \001(\005\022)\n!steamguard_don"
  "t_remember_computer\030_ \001(\010\022\024\n\014machine_nam"
  "e\030` \001(\t\022\037\n\027machine_name_userchosen\030a \001(\t"
  "\022\030\n\020country_override\030b \001(\t\022\024\n\014is_steam_b"
  "ox\030c \001(\010\022\032\n\022client_instance_id\030d \001(\004\022\027\n\017"
  "two_factor_code\030e \001(\t\022$\n\034supports_rate_l"
  "imit_response\030f \001(\010\022\027\n\017web_logon_nonce\030g"
  " \001(\t\022\027\n\017priority_reason\030h \001(\005\"\257\005\n\027CMsgCl"
  "ientLogonResponse\022\022\n\007eresult\030\001 \001(\005:\0012\022%\n"
  "\035out_of_game_heartbeat_seconds\030\002 \001(\005\022!\n\031"
  "in_game_heartbeat_seconds\030\003 \001(\005\022\021\n\tpubli"
  "c_ip\030\004 \001(\r\022\033\n\023rtime32_server_time\030\005 \001(\007\022"
  "\025\n\raccount_flags\030\006 \001(\r\022\017\n\007cell_id\030\007 \001(\r\022"
  "\024\n\014email_domain\030\010 \001(\t\022\025\n\rsteam2_ticket\030\t"
  " \001(\014\022\030\n\020eresult_extended\030\n \001(\005\022&\n\036webapi"
  "_authenticate_user_nonce\030\013 \001(\t\022\036\n\026cell_i"
  "d_ping_threshold\030\014 \001(\r\022\020\n\010use_pics\030\r \001(\010"
  "\022\022\n\nvanity_url\030\016 \001(\t\022\037\n\027client_supplied_"
  "steamid\030\024 \001(\006\022\027\n\017ip_country_code\030\025 \001(\t\022\031"
  "\n\021parental_settings\030\026 \001(\014\022\"\n\032parental_se"
  "tting_signature\030\027 \001(\014\022&\n\036count_loginfail"
  "ures_to_migrate\030\030 \001(\005\022$\n\034count_disconnec"
  "ts_to_migrate\030\031 \001(\005\022#\n\033ogs_data_report_t"
  "ime_window\030\032 \001(\005\022\032\n\022client_instance_id\030\033"
  " \001(\004\022!\n\031force_client_update_check\030\034 \001(\010\""
  "F\n,CMsgClientRequestWebAPIAuthenticateUs"
  "erNonce\022\026\n\ntoken_type\030\001 \001(\005:\002-1\"\212\001\n4CMsg"
  "ClientRequestWebAPIAuthenticateUserNonce"
  "Response\022\022\n\007eresult\030\001 \001(\005:\0012\022&\n\036webapi_a"
  "uthenticate_user_nonce\030\013 \001(\t\022\026\n\ntoken_ty"
  "pe\030\003 \001(\005:\002-1\"\022\n\020CMsgClientLogOff\")\n\023CMsg"
  "ClientLoggedOff\022\022\n\007eresult\030\001 \001(\005:\0012\"=\n\025C"
  "MsgClientNewLoginKey\022\021\n\tunique_id\030\001 \001(\r\022"
  "\021\n\tlogin_key\030\002 \001(\t\"2\n\035CMsgClientNewLogin"
  "KeyAccepted\022\021\n\tunique_id\030\001 \001(\r\"\356\002\n\025CMsgC"
  "lientAccountInfo\022\024\n\014persona_name\030\001 \001(\t\022\022"
  "\n\nip_country\030\002 \001(\t\022\036\n\026count_authed_compu"
  "ters\030\005 \001(\005\022\025\n\raccount_flags\030\007 \001(\r\022\023\n\013fac"
  "ebook_id\030\010 \001(\004\022\025\n\rfacebook_name\030\t \001(\t\022%\n"
  "\035steamguard_notify_newmachines\030\016 \001(\010\022+\n#"
  "steamguard_machine_name_user_chosen\030\017 \001("
  "\t\022\031\n\021is_phone_verified\030\020 \001(\010\022\030\n\020two_fact"
  "or_state\030\021 \001(\r\022\034\n\024is_phone_identifying\030\022"
  " \001(\010\022!\n\031is_phone_needing_reverify\030\023 \001(\010B"
  "\005H\001\200\001\000"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_steammessages_5fclientserver_5flogin_2eproto = {
  false, InitDefaults_steammessages_5fclientserver_5flogin_2eproto, 
  descriptor_table_protodef_steammessages_5fclientserver_5flogin_2eproto,
  "steammessages_clientserver_login.proto", &assign_descriptors_table_steammessages_5fclientserver_5flogin_2eproto, 3086,
};

void AddDescriptors_steammessages_5fclientserver_5flogin_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_steammessages_5fbase_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_steammessages_5fclientserver_5flogin_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_steammessages_5fclientserver_5flogin_2eproto = []() { AddDescriptors_steammessages_5fclientserver_5flogin_2eproto(); return true; }();
namespace proto {
namespace steam {

// ===================================================================

void CMsgClientHeartBeat::InitAsDefaultInstance() {
}
class CMsgClientHeartBeat::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientHeartBeat::CMsgClientHeartBeat()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientHeartBeat)
}
CMsgClientHeartBeat::CMsgClientHeartBeat(const CMsgClientHeartBeat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientHeartBeat)
}

void CMsgClientHeartBeat::SharedCtor() {
}

CMsgClientHeartBeat::~CMsgClientHeartBeat() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientHeartBeat)
  SharedDtor();
}

void CMsgClientHeartBeat::SharedDtor() {
}

void CMsgClientHeartBeat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientHeartBeat& CMsgClientHeartBeat::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientHeartBeat_steammessages_5fclientserver_5flogin_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientHeartBeat::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientHeartBeat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientHeartBeat::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientHeartBeat*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientHeartBeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientHeartBeat)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientHeartBeat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientHeartBeat)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientHeartBeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientHeartBeat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientHeartBeat)
}

::google::protobuf::uint8* CMsgClientHeartBeat::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientHeartBeat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientHeartBeat)
  return target;
}

size_t CMsgClientHeartBeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientHeartBeat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientHeartBeat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientHeartBeat)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientHeartBeat* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientHeartBeat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientHeartBeat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientHeartBeat)
    MergeFrom(*source);
  }
}

void CMsgClientHeartBeat::MergeFrom(const CMsgClientHeartBeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientHeartBeat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgClientHeartBeat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientHeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientHeartBeat::CopyFrom(const CMsgClientHeartBeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientHeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientHeartBeat::IsInitialized() const {
  return true;
}

void CMsgClientHeartBeat::Swap(CMsgClientHeartBeat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientHeartBeat::InternalSwap(CMsgClientHeartBeat* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CMsgClientHeartBeat::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_5flogin_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_5flogin_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientServerTimestampRequest::InitAsDefaultInstance() {
}
class CMsgClientServerTimestampRequest::HasBitSetters {
 public:
  static void set_has_client_request_timestamp(CMsgClientServerTimestampRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientServerTimestampRequest::kClientRequestTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientServerTimestampRequest::CMsgClientServerTimestampRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientServerTimestampRequest)
}
CMsgClientServerTimestampRequest::CMsgClientServerTimestampRequest(const CMsgClientServerTimestampRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_request_timestamp_ = from.client_request_timestamp_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientServerTimestampRequest)
}

void CMsgClientServerTimestampRequest::SharedCtor() {
  client_request_timestamp_ = PROTOBUF_ULONGLONG(0);
}

CMsgClientServerTimestampRequest::~CMsgClientServerTimestampRequest() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientServerTimestampRequest)
  SharedDtor();
}

void CMsgClientServerTimestampRequest::SharedDtor() {
}

void CMsgClientServerTimestampRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientServerTimestampRequest& CMsgClientServerTimestampRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientServerTimestampRequest_steammessages_5fclientserver_5flogin_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientServerTimestampRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientServerTimestampRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_request_timestamp_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientServerTimestampRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientServerTimestampRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 client_request_timestamp = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_client_request_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientServerTimestampRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientServerTimestampRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 client_request_timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_client_request_timestamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &client_request_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientServerTimestampRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientServerTimestampRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientServerTimestampRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientServerTimestampRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 client_request_timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->client_request_timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientServerTimestampRequest)
}

::google::protobuf::uint8* CMsgClientServerTimestampRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientServerTimestampRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 client_request_timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->client_request_timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientServerTimestampRequest)
  return target;
}

size_t CMsgClientServerTimestampRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientServerTimestampRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 client_request_timestamp = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->client_request_timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientServerTimestampRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientServerTimestampRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientServerTimestampRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientServerTimestampRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientServerTimestampRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientServerTimestampRequest)
    MergeFrom(*source);
  }
}

void CMsgClientServerTimestampRequest::MergeFrom(const CMsgClientServerTimestampRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientServerTimestampRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_client_request_timestamp()) {
    set_client_request_timestamp(from.client_request_timestamp());
  }
}

void CMsgClientServerTimestampRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientServerTimestampRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientServerTimestampRequest::CopyFrom(const CMsgClientServerTimestampRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientServerTimestampRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientServerTimestampRequest::IsInitialized() const {
  return true;
}

void CMsgClientServerTimestampRequest::Swap(CMsgClientServerTimestampRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientServerTimestampRequest::InternalSwap(CMsgClientServerTimestampRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(client_request_timestamp_, other->client_request_timestamp_);
}

::google::protobuf::Metadata CMsgClientServerTimestampRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_5flogin_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_5flogin_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientServerTimestampResponse::InitAsDefaultInstance() {
}
class CMsgClientServerTimestampResponse::HasBitSetters {
 public:
  static void set_has_client_request_timestamp(CMsgClientServerTimestampResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_server_timestamp_ms(CMsgClientServerTimestampResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientServerTimestampResponse::kClientRequestTimestampFieldNumber;
const int CMsgClientServerTimestampResponse::kServerTimestampMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientServerTimestampResponse::CMsgClientServerTimestampResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientServerTimestampResponse)
}
CMsgClientServerTimestampResponse::CMsgClientServerTimestampResponse(const CMsgClientServerTimestampResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&client_request_timestamp_, &from.client_request_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&server_timestamp_ms_) -
    reinterpret_cast<char*>(&client_request_timestamp_)) + sizeof(server_timestamp_ms_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientServerTimestampResponse)
}

void CMsgClientServerTimestampResponse::SharedCtor() {
  ::memset(&client_request_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_timestamp_ms_) -
      reinterpret_cast<char*>(&client_request_timestamp_)) + sizeof(server_timestamp_ms_));
}

CMsgClientServerTimestampResponse::~CMsgClientServerTimestampResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientServerTimestampResponse)
  SharedDtor();
}

void CMsgClientServerTimestampResponse::SharedDtor() {
}

void CMsgClientServerTimestampResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientServerTimestampResponse& CMsgClientServerTimestampResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientServerTimestampResponse_steammessages_5fclientserver_5flogin_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientServerTimestampResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientServerTimestampResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&client_request_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&server_timestamp_ms_) -
        reinterpret_cast<char*>(&client_request_timestamp_)) + sizeof(server_timestamp_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientServerTimestampResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientServerTimestampResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 client_request_timestamp = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_client_request_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 server_timestamp_ms = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_server_timestamp_ms(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientServerTimestampResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientServerTimestampResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 client_request_timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_client_request_timestamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &client_request_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 server_timestamp_ms = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_server_timestamp_ms(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &server_timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientServerTimestampResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientServerTimestampResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientServerTimestampResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientServerTimestampResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 client_request_timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->client_request_timestamp(), output);
  }

  // optional uint64 server_timestamp_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->server_timestamp_ms(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientServerTimestampResponse)
}

::google::protobuf::uint8* CMsgClientServerTimestampResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientServerTimestampResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 client_request_timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->client_request_timestamp(), target);
  }

  // optional uint64 server_timestamp_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->server_timestamp_ms(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientServerTimestampResponse)
  return target;
}

size_t CMsgClientServerTimestampResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientServerTimestampResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 client_request_timestamp = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->client_request_timestamp());
    }

    // optional uint64 server_timestamp_ms = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->server_timestamp_ms());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientServerTimestampResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientServerTimestampResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientServerTimestampResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientServerTimestampResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientServerTimestampResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientServerTimestampResponse)
    MergeFrom(*source);
  }
}

void CMsgClientServerTimestampResponse::MergeFrom(const CMsgClientServerTimestampResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientServerTimestampResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      client_request_timestamp_ = from.client_request_timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      server_timestamp_ms_ = from.server_timestamp_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientServerTimestampResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientServerTimestampResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientServerTimestampResponse::CopyFrom(const CMsgClientServerTimestampResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientServerTimestampResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientServerTimestampResponse::IsInitialized() const {
  return true;
}

void CMsgClientServerTimestampResponse::Swap(CMsgClientServerTimestampResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientServerTimestampResponse::InternalSwap(CMsgClientServerTimestampResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(client_request_timestamp_, other->client_request_timestamp_);
  swap(server_timestamp_ms_, other->server_timestamp_ms_);
}

::google::protobuf::Metadata CMsgClientServerTimestampResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_5flogin_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_5flogin_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientLogon::InitAsDefaultInstance() {
}
class CMsgClientLogon::HasBitSetters {
 public:
  static void set_has_protocol_version(CMsgClientLogon* msg) {
    msg->_has_bits_[0] |= 0x00200000u;
  }
  static void set_has_obfustucated_private_ip(CMsgClientLogon* msg) {
    msg->_has_bits_[0] |= 0x00400000u;
  }
  static void set_has_cell_id(CMsgClientLogon* msg) {
    msg->_has_bits_[0] |= 0x00800000u;
  }
  static void set_has_last_session_id(CMsgClientLogon* msg) {
    msg->_has_bits_[0] |= 0x01000000u;
  }
  static void set_has_client_package_version(CMsgClientLogon* msg) {
    msg->_has_bits_[0] |= 0x02000000u;
  }
  static void set_has_client_language(CMsgClientLogon* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_client_os_type(CMsgClientLogon* msg) {
    msg->_has_bits_[0] |= 0x04000000u;
  }
  static void set_has_should_remember_password(CMsgClientLogon* msg) {
    msg->_has_bits_[1] |= 0x00000008u;
  }
  static void set_has_wine_version(CMsgClientLogon* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_ping_ms_from_cell_search(CMsgClientLogon* msg) {
    msg->_has_bits_[0] |= 0x08000000u;
  }
  static void set_has_public_ip(CMsgClientLogon* msg) {
    msg->_has_bits_[0] |= 0x10000000u;
  }
  static void set_has_qos_level(CMsgClientLogon* msg) {
    msg->_has_bits_[0] |= 0x40000000u;
  }
  static void set_has_client_supplied_steam_id(CMsgClientLogon* msg) {
    msg->_has_bits_[0] |= 0x20000000u;
  }
  static void set_has_machine_id(CMsgClientLogon* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_launcher_type(CMsgClientLogon* msg) {
    msg->_has_bits_[0] |= 0x80000000u;
  }
  static void set_has_ui_mode(CMsgClientLogon* msg) {
    msg->_has_bits_[1] |= 0x00000001u;
  }
  static void set_has_chat_mode(CMsgClientLogon* msg) {
    msg->_has_bits_[1] |= 0x00000002u;
  }
  static void set_has_steam2_auth_ticket(CMsgClientLogon* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_email_address(CMsgClientLogon* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_rtime32_account_creation(CMsgClientLogon* msg) {
    msg->_has_bits_[1] |= 0x00000004u;
  }
  static void set_has_account_name(CMsgClientLogon* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_password(CMsgClientLogon* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_game_server_token(CMsgClientLogon* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_login_key(CMsgClientLogon* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_was_converted_deprecated_msg(CMsgClientLogon* msg) {
    msg->_has_bits_[1] |= 0x00000010u;
  }
  static void set_has_anon_user_target_account_name(CMsgClientLogon* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_resolved_user_steam_id(CMsgClientLogon* msg) {
    msg->_has_bits_[1] |= 0x00000080u;
  }
  static void set_has_eresult_sentryfile(CMsgClientLogon* msg) {
    msg->_has_bits_[1] |= 0x00000100u;
  }
  static void set_has_sha_sentryfile(CMsgClientLogon* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_auth_code(CMsgClientLogon* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_otp_type(CMsgClientLogon* msg) {
    msg->_has_bits_[1] |= 0x00000200u;
  }
  static void set_has_otp_value(CMsgClientLogon* msg) {
    msg->_has_bits_[1] |= 0x00000400u;
  }
  static void set_has_otp_identifier(CMsgClientLogon* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_steam2_ticket_request(CMsgClientLogon* msg) {
    msg->_has_bits_[1] |= 0x00000020u;
  }
  static void set_has_sony_psn_ticket(CMsgClientLogon* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static void set_has_sony_psn_service_id(CMsgClientLogon* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
  static void set_has_create_new_psn_linked_account_if_needed(CMsgClientLogon* msg) {
    msg->_has_bits_[1] |= 0x00000040u;
  }
  static void set_has_sony_psn_name(CMsgClientLogon* msg) {
    msg->_has_bits_[0] |= 0x00008000u;
  }
  static void set_has_game_server_app_id(CMsgClientLogon* msg) {
    msg->_has_bits_[1] |= 0x00000800u;
  }
  static void set_has_steamguard_dont_remember_computer(CMsgClientLogon* msg) {
    msg->_has_bits_[1] |= 0x00002000u;
  }
  static void set_has_machine_name(CMsgClientLogon* msg) {
    msg->_has_bits_[0] |= 0x00010000u;
  }
  static void set_has_machine_name_userchosen(CMsgClientLogon* msg) {
    msg->_has_bits_[0] |= 0x00020000u;
  }
  static void set_has_country_override(CMsgClientLogon* msg) {
    msg->_has_bits_[0] |= 0x00040000u;
  }
  static void set_has_is_steam_box(CMsgClientLogon* msg) {
    msg->_has_bits_[1] |= 0x00004000u;
  }
  static void set_has_client_instance_id(CMsgClientLogon* msg) {
    msg->_has_bits_[1] |= 0x00001000u;
  }
  static void set_has_two_factor_code(CMsgClientLogon* msg) {
    msg->_has_bits_[0] |= 0x00080000u;
  }
  static void set_has_supports_rate_limit_response(CMsgClientLogon* msg) {
    msg->_has_bits_[1] |= 0x00008000u;
  }
  static void set_has_web_logon_nonce(CMsgClientLogon* msg) {
    msg->_has_bits_[0] |= 0x00100000u;
  }
  static void set_has_priority_reason(CMsgClientLogon* msg) {
    msg->_has_bits_[1] |= 0x00010000u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientLogon::kProtocolVersionFieldNumber;
const int CMsgClientLogon::kObfustucatedPrivateIpFieldNumber;
const int CMsgClientLogon::kCellIdFieldNumber;
const int CMsgClientLogon::kLastSessionIdFieldNumber;
const int CMsgClientLogon::kClientPackageVersionFieldNumber;
const int CMsgClientLogon::kClientLanguageFieldNumber;
const int CMsgClientLogon::kClientOsTypeFieldNumber;
const int CMsgClientLogon::kShouldRememberPasswordFieldNumber;
const int CMsgClientLogon::kWineVersionFieldNumber;
const int CMsgClientLogon::kPingMsFromCellSearchFieldNumber;
const int CMsgClientLogon::kPublicIpFieldNumber;
const int CMsgClientLogon::kQosLevelFieldNumber;
const int CMsgClientLogon::kClientSuppliedSteamIdFieldNumber;
const int CMsgClientLogon::kMachineIdFieldNumber;
const int CMsgClientLogon::kLauncherTypeFieldNumber;
const int CMsgClientLogon::kUiModeFieldNumber;
const int CMsgClientLogon::kChatModeFieldNumber;
const int CMsgClientLogon::kSteam2AuthTicketFieldNumber;
const int CMsgClientLogon::kEmailAddressFieldNumber;
const int CMsgClientLogon::kRtime32AccountCreationFieldNumber;
const int CMsgClientLogon::kAccountNameFieldNumber;
const int CMsgClientLogon::kPasswordFieldNumber;
const int CMsgClientLogon::kGameServerTokenFieldNumber;
const int CMsgClientLogon::kLoginKeyFieldNumber;
const int CMsgClientLogon::kWasConvertedDeprecatedMsgFieldNumber;
const int CMsgClientLogon::kAnonUserTargetAccountNameFieldNumber;
const int CMsgClientLogon::kResolvedUserSteamIdFieldNumber;
const int CMsgClientLogon::kEresultSentryfileFieldNumber;
const int CMsgClientLogon::kShaSentryfileFieldNumber;
const int CMsgClientLogon::kAuthCodeFieldNumber;
const int CMsgClientLogon::kOtpTypeFieldNumber;
const int CMsgClientLogon::kOtpValueFieldNumber;
const int CMsgClientLogon::kOtpIdentifierFieldNumber;
const int CMsgClientLogon::kSteam2TicketRequestFieldNumber;
const int CMsgClientLogon::kSonyPsnTicketFieldNumber;
const int CMsgClientLogon::kSonyPsnServiceIdFieldNumber;
const int CMsgClientLogon::kCreateNewPsnLinkedAccountIfNeededFieldNumber;
const int CMsgClientLogon::kSonyPsnNameFieldNumber;
const int CMsgClientLogon::kGameServerAppIdFieldNumber;
const int CMsgClientLogon::kSteamguardDontRememberComputerFieldNumber;
const int CMsgClientLogon::kMachineNameFieldNumber;
const int CMsgClientLogon::kMachineNameUserchosenFieldNumber;
const int CMsgClientLogon::kCountryOverrideFieldNumber;
const int CMsgClientLogon::kIsSteamBoxFieldNumber;
const int CMsgClientLogon::kClientInstanceIdFieldNumber;
const int CMsgClientLogon::kTwoFactorCodeFieldNumber;
const int CMsgClientLogon::kSupportsRateLimitResponseFieldNumber;
const int CMsgClientLogon::kWebLogonNonceFieldNumber;
const int CMsgClientLogon::kPriorityReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientLogon::CMsgClientLogon()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientLogon)
}
CMsgClientLogon::CMsgClientLogon(const CMsgClientLogon& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_client_language()) {
    client_language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_language_);
  }
  wine_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_wine_version()) {
    wine_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wine_version_);
  }
  machine_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_machine_id()) {
    machine_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_id_);
  }
  steam2_auth_ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_steam2_auth_ticket()) {
    steam2_auth_ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.steam2_auth_ticket_);
  }
  email_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_email_address()) {
    email_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_address_);
  }
  account_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_account_name()) {
    account_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_name_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  game_server_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_game_server_token()) {
    game_server_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_server_token_);
  }
  login_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_login_key()) {
    login_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.login_key_);
  }
  anon_user_target_account_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_anon_user_target_account_name()) {
    anon_user_target_account_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.anon_user_target_account_name_);
  }
  sha_sentryfile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sha_sentryfile()) {
    sha_sentryfile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_sentryfile_);
  }
  auth_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_auth_code()) {
    auth_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.auth_code_);
  }
  otp_identifier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_otp_identifier()) {
    otp_identifier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.otp_identifier_);
  }
  sony_psn_ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sony_psn_ticket()) {
    sony_psn_ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sony_psn_ticket_);
  }
  sony_psn_service_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sony_psn_service_id()) {
    sony_psn_service_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sony_psn_service_id_);
  }
  sony_psn_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sony_psn_name()) {
    sony_psn_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sony_psn_name_);
  }
  machine_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_machine_name()) {
    machine_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_name_);
  }
  machine_name_userchosen_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_machine_name_userchosen()) {
    machine_name_userchosen_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_name_userchosen_);
  }
  country_override_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_country_override()) {
    country_override_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_override_);
  }
  two_factor_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_two_factor_code()) {
    two_factor_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.two_factor_code_);
  }
  web_logon_nonce_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_web_logon_nonce()) {
    web_logon_nonce_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.web_logon_nonce_);
  }
  ::memcpy(&protocol_version_, &from.protocol_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&priority_reason_) -
    reinterpret_cast<char*>(&protocol_version_)) + sizeof(priority_reason_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientLogon)
}

void CMsgClientLogon::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientLogon_steammessages_5fclientserver_5flogin_2eproto.base);
  client_language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wine_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  machine_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  steam2_auth_ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_server_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  login_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  anon_user_target_account_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sha_sentryfile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  auth_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  otp_identifier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sony_psn_ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sony_psn_service_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sony_psn_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  machine_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  machine_name_userchosen_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_override_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  two_factor_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  web_logon_nonce_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&protocol_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&priority_reason_) -
      reinterpret_cast<char*>(&protocol_version_)) + sizeof(priority_reason_));
}

CMsgClientLogon::~CMsgClientLogon() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientLogon)
  SharedDtor();
}

void CMsgClientLogon::SharedDtor() {
  client_language_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wine_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  machine_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  steam2_auth_ticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_server_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  login_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  anon_user_target_account_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sha_sentryfile_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  auth_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  otp_identifier_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sony_psn_ticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sony_psn_service_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sony_psn_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  machine_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  machine_name_userchosen_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_override_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  two_factor_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  web_logon_nonce_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientLogon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientLogon& CMsgClientLogon::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientLogon_steammessages_5fclientserver_5flogin_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientLogon::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientLogon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      client_language_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      wine_version_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      machine_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      steam2_auth_ticket_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      email_address_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      account_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      password_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000080u) {
      game_server_token_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      login_key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000200u) {
      anon_user_target_account_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000400u) {
      sha_sentryfile_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000800u) {
      auth_code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00001000u) {
      otp_identifier_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00002000u) {
      sony_psn_ticket_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00004000u) {
      sony_psn_service_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00008000u) {
      sony_psn_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x001f0000u) {
    if (cached_has_bits & 0x00010000u) {
      machine_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00020000u) {
      machine_name_userchosen_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00040000u) {
      country_override_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00080000u) {
      two_factor_code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00100000u) {
      web_logon_nonce_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00e00000u) {
    ::memset(&protocol_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cell_id_) -
        reinterpret_cast<char*>(&protocol_version_)) + sizeof(cell_id_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&last_session_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&launcher_type_) -
        reinterpret_cast<char*>(&last_session_id_)) + sizeof(launcher_type_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&ui_mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&resolved_user_steam_id_) -
        reinterpret_cast<char*>(&ui_mode_)) + sizeof(resolved_user_steam_id_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&eresult_sentryfile_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&supports_rate_limit_response_) -
        reinterpret_cast<char*>(&eresult_sentryfile_)) + sizeof(supports_rate_limit_response_));
  }
  priority_reason_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientLogon::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientLogon*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 protocol_version = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_protocol_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 obfustucated_private_ip = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_obfustucated_private_ip(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 cell_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_cell_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 last_session_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_last_session_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 client_package_version = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_client_package_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string client_language = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientLogon.client_language");
        object = msg->mutable_client_language();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 client_os_type = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_client_os_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool should_remember_password = 8 [default = false];
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_should_remember_password(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string wine_version = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientLogon.wine_version");
        object = msg->mutable_wine_version();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 ping_ms_from_cell_search = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_ping_ms_from_cell_search(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 public_ip = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 160) goto handle_unusual;
        msg->set_public_ip(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 qos_level = 21;
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 168) goto handle_unusual;
        msg->set_qos_level(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 client_supplied_steam_id = 22;
      case 22: {
        if (static_cast<::google::protobuf::uint8>(tag) != 177) goto handle_unusual;
        msg->set_client_supplied_steam_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional bytes machine_id = 30;
      case 30: {
        if (static_cast<::google::protobuf::uint8>(tag) != 242) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_machine_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 launcher_type = 31 [default = 0];
      case 31: {
        if (static_cast<::google::protobuf::uint8>(tag) != 248) goto handle_unusual;
        msg->set_launcher_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 ui_mode = 32 [default = 0];
      case 32: {
        if (static_cast<::google::protobuf::uint8>(tag) != 0) goto handle_unusual;
        msg->set_ui_mode(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 chat_mode = 33 [default = 0];
      case 33: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_chat_mode(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes steam2_auth_ticket = 41;
      case 41: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_steam2_auth_ticket();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string email_address = 42;
      case 42: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientLogon.email_address");
        object = msg->mutable_email_address();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional fixed32 rtime32_account_creation = 43;
      case 43: {
        if (static_cast<::google::protobuf::uint8>(tag) != 93) goto handle_unusual;
        msg->set_rtime32_account_creation(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional string account_name = 50;
      case 50: {
        if (static_cast<::google::protobuf::uint8>(tag) != 146) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientLogon.account_name");
        object = msg->mutable_account_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string password = 51;
      case 51: {
        if (static_cast<::google::protobuf::uint8>(tag) != 154) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientLogon.password");
        object = msg->mutable_password();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string game_server_token = 52;
      case 52: {
        if (static_cast<::google::protobuf::uint8>(tag) != 162) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientLogon.game_server_token");
        object = msg->mutable_game_server_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string login_key = 60;
      case 60: {
        if (static_cast<::google::protobuf::uint8>(tag) != 226) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientLogon.login_key");
        object = msg->mutable_login_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool was_converted_deprecated_msg = 70 [default = false];
      case 70: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_was_converted_deprecated_msg(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string anon_user_target_account_name = 80;
      case 80: {
        if (static_cast<::google::protobuf::uint8>(tag) != 130) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientLogon.anon_user_target_account_name");
        object = msg->mutable_anon_user_target_account_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional fixed64 resolved_user_steam_id = 81;
      case 81: {
        if (static_cast<::google::protobuf::uint8>(tag) != 137) goto handle_unusual;
        msg->set_resolved_user_steam_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional int32 eresult_sentryfile = 82;
      case 82: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        msg->set_eresult_sentryfile(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes sha_sentryfile = 83;
      case 83: {
        if (static_cast<::google::protobuf::uint8>(tag) != 154) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_sha_sentryfile();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string auth_code = 84;
      case 84: {
        if (static_cast<::google::protobuf::uint8>(tag) != 162) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientLogon.auth_code");
        object = msg->mutable_auth_code();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional int32 otp_type = 85;
      case 85: {
        if (static_cast<::google::protobuf::uint8>(tag) != 168) goto handle_unusual;
        msg->set_otp_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 otp_value = 86;
      case 86: {
        if (static_cast<::google::protobuf::uint8>(tag) != 176) goto handle_unusual;
        msg->set_otp_value(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string otp_identifier = 87;
      case 87: {
        if (static_cast<::google::protobuf::uint8>(tag) != 186) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientLogon.otp_identifier");
        object = msg->mutable_otp_identifier();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool steam2_ticket_request = 88;
      case 88: {
        if (static_cast<::google::protobuf::uint8>(tag) != 192) goto handle_unusual;
        msg->set_steam2_ticket_request(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes sony_psn_ticket = 90;
      case 90: {
        if (static_cast<::google::protobuf::uint8>(tag) != 210) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_sony_psn_ticket();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string sony_psn_service_id = 91;
      case 91: {
        if (static_cast<::google::protobuf::uint8>(tag) != 218) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientLogon.sony_psn_service_id");
        object = msg->mutable_sony_psn_service_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool create_new_psn_linked_account_if_needed = 92 [default = false];
      case 92: {
        if (static_cast<::google::protobuf::uint8>(tag) != 224) goto handle_unusual;
        msg->set_create_new_psn_linked_account_if_needed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string sony_psn_name = 93;
      case 93: {
        if (static_cast<::google::protobuf::uint8>(tag) != 234) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientLogon.sony_psn_name");
        object = msg->mutable_sony_psn_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional int32 game_server_app_id = 94;
      case 94: {
        if (static_cast<::google::protobuf::uint8>(tag) != 240) goto handle_unusual;
        msg->set_game_server_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool steamguard_dont_remember_computer = 95;
      case 95: {
        if (static_cast<::google::protobuf::uint8>(tag) != 248) goto handle_unusual;
        msg->set_steamguard_dont_remember_computer(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string machine_name = 96;
      case 96: {
        if (static_cast<::google::protobuf::uint8>(tag) != 2) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientLogon.machine_name");
        object = msg->mutable_machine_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string machine_name_userchosen = 97;
      case 97: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientLogon.machine_name_userchosen");
        object = msg->mutable_machine_name_userchosen();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string country_override = 98;
      case 98: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientLogon.country_override");
        object = msg->mutable_country_override();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool is_steam_box = 99;
      case 99: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_is_steam_box(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 client_instance_id = 100;
      case 100: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_client_instance_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string two_factor_code = 101;
      case 101: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientLogon.two_factor_code");
        object = msg->mutable_two_factor_code();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool supports_rate_limit_response = 102;
      case 102: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_supports_rate_limit_response(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string web_logon_nonce = 103;
      case 103: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientLogon.web_logon_nonce");
        object = msg->mutable_web_logon_nonce();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional int32 priority_reason = 104;
      case 104: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_priority_reason(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientLogon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientLogon)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 protocol_version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_protocol_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protocol_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 obfustucated_private_ip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_obfustucated_private_ip(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &obfustucated_private_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cell_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_cell_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cell_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 last_session_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_last_session_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_package_version = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_client_package_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_package_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string client_language = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->client_language().data(), static_cast<int>(this->client_language().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientLogon.client_language");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_os_type = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_client_os_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_os_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool should_remember_password = 8 [default = false];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_should_remember_password(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &should_remember_password_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string wine_version = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wine_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->wine_version().data(), static_cast<int>(this->wine_version().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientLogon.wine_version");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ping_ms_from_cell_search = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_ping_ms_from_cell_search(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_ms_from_cell_search_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 public_ip = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (160 & 0xFF)) {
          HasBitSetters::set_has_public_ip(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &public_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 qos_level = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (168 & 0xFF)) {
          HasBitSetters::set_has_qos_level(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qos_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 client_supplied_steam_id = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (177 & 0xFF)) {
          HasBitSetters::set_has_client_supplied_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &client_supplied_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes machine_id = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (242 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_machine_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 launcher_type = 31 [default = 0];
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (248 & 0xFF)) {
          HasBitSetters::set_has_launcher_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &launcher_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ui_mode = 32 [default = 0];
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (256 & 0xFF)) {
          HasBitSetters::set_has_ui_mode(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ui_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 chat_mode = 33 [default = 0];
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (264 & 0xFF)) {
          HasBitSetters::set_has_chat_mode(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chat_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes steam2_auth_ticket = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (330 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_steam2_auth_ticket()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string email_address = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (338 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->email_address().data(), static_cast<int>(this->email_address().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientLogon.email_address");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 rtime32_account_creation = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (349 & 0xFF)) {
          HasBitSetters::set_has_rtime32_account_creation(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &rtime32_account_creation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string account_name = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (402 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account_name().data(), static_cast<int>(this->account_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientLogon.account_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string password = 51;
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (410 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientLogon.password");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string game_server_token = 52;
      case 52: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (418 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_server_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_server_token().data(), static_cast<int>(this->game_server_token().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientLogon.game_server_token");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string login_key = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (482 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_login_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->login_key().data(), static_cast<int>(this->login_key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientLogon.login_key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool was_converted_deprecated_msg = 70 [default = false];
      case 70: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (560 & 0xFF)) {
          HasBitSetters::set_has_was_converted_deprecated_msg(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &was_converted_deprecated_msg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string anon_user_target_account_name = 80;
      case 80: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (642 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_anon_user_target_account_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->anon_user_target_account_name().data(), static_cast<int>(this->anon_user_target_account_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientLogon.anon_user_target_account_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 resolved_user_steam_id = 81;
      case 81: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (649 & 0xFF)) {
          HasBitSetters::set_has_resolved_user_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &resolved_user_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 eresult_sentryfile = 82;
      case 82: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (656 & 0xFF)) {
          HasBitSetters::set_has_eresult_sentryfile(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_sentryfile_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sha_sentryfile = 83;
      case 83: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (666 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha_sentryfile()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string auth_code = 84;
      case 84: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (674 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_auth_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->auth_code().data(), static_cast<int>(this->auth_code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientLogon.auth_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 otp_type = 85;
      case 85: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (680 & 0xFF)) {
          HasBitSetters::set_has_otp_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &otp_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 otp_value = 86;
      case 86: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (688 & 0xFF)) {
          HasBitSetters::set_has_otp_value(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &otp_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string otp_identifier = 87;
      case 87: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (698 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_otp_identifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->otp_identifier().data(), static_cast<int>(this->otp_identifier().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientLogon.otp_identifier");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool steam2_ticket_request = 88;
      case 88: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (704 & 0xFF)) {
          HasBitSetters::set_has_steam2_ticket_request(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &steam2_ticket_request_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sony_psn_ticket = 90;
      case 90: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (722 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sony_psn_ticket()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string sony_psn_service_id = 91;
      case 91: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (730 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sony_psn_service_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sony_psn_service_id().data(), static_cast<int>(this->sony_psn_service_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientLogon.sony_psn_service_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool create_new_psn_linked_account_if_needed = 92 [default = false];
      case 92: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (736 & 0xFF)) {
          HasBitSetters::set_has_create_new_psn_linked_account_if_needed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &create_new_psn_linked_account_if_needed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string sony_psn_name = 93;
      case 93: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (746 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sony_psn_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sony_psn_name().data(), static_cast<int>(this->sony_psn_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientLogon.sony_psn_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 game_server_app_id = 94;
      case 94: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (752 & 0xFF)) {
          HasBitSetters::set_has_game_server_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_server_app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool steamguard_dont_remember_computer = 95;
      case 95: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (760 & 0xFF)) {
          HasBitSetters::set_has_steamguard_dont_remember_computer(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &steamguard_dont_remember_computer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string machine_name = 96;
      case 96: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (770 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->machine_name().data(), static_cast<int>(this->machine_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientLogon.machine_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string machine_name_userchosen = 97;
      case 97: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (778 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_name_userchosen()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->machine_name_userchosen().data(), static_cast<int>(this->machine_name_userchosen().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientLogon.machine_name_userchosen");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string country_override = 98;
      case 98: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (786 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country_override()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country_override().data(), static_cast<int>(this->country_override().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientLogon.country_override");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_steam_box = 99;
      case 99: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (792 & 0xFF)) {
          HasBitSetters::set_has_is_steam_box(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_steam_box_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 client_instance_id = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (800 & 0xFF)) {
          HasBitSetters::set_has_client_instance_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &client_instance_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string two_factor_code = 101;
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (810 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_two_factor_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->two_factor_code().data(), static_cast<int>(this->two_factor_code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientLogon.two_factor_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool supports_rate_limit_response = 102;
      case 102: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (816 & 0xFF)) {
          HasBitSetters::set_has_supports_rate_limit_response(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &supports_rate_limit_response_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string web_logon_nonce = 103;
      case 103: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (826 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_web_logon_nonce()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->web_logon_nonce().data(), static_cast<int>(this->web_logon_nonce().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientLogon.web_logon_nonce");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 priority_reason = 104;
      case 104: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (832 & 0xFF)) {
          HasBitSetters::set_has_priority_reason(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_reason_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientLogon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientLogon)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientLogon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientLogon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 protocol_version = 1;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->protocol_version(), output);
  }

  // optional uint32 obfustucated_private_ip = 2;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->obfustucated_private_ip(), output);
  }

  // optional uint32 cell_id = 3;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cell_id(), output);
  }

  // optional uint32 last_session_id = 4;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->last_session_id(), output);
  }

  // optional uint32 client_package_version = 5;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->client_package_version(), output);
  }

  // optional string client_language = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_language().data(), static_cast<int>(this->client_language().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogon.client_language");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->client_language(), output);
  }

  // optional uint32 client_os_type = 7;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->client_os_type(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool should_remember_password = 8 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->should_remember_password(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string wine_version = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wine_version().data(), static_cast<int>(this->wine_version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogon.wine_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->wine_version(), output);
  }

  // optional uint32 ping_ms_from_cell_search = 10;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->ping_ms_from_cell_search(), output);
  }

  // optional uint32 public_ip = 20;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->public_ip(), output);
  }

  // optional uint32 qos_level = 21;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->qos_level(), output);
  }

  // optional fixed64 client_supplied_steam_id = 22;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(22, this->client_supplied_steam_id(), output);
  }

  // optional bytes machine_id = 30;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      30, this->machine_id(), output);
  }

  // optional uint32 launcher_type = 31 [default = 0];
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->launcher_type(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 ui_mode = 32 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->ui_mode(), output);
  }

  // optional uint32 chat_mode = 33 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->chat_mode(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bytes steam2_auth_ticket = 41;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      41, this->steam2_auth_ticket(), output);
  }

  // optional string email_address = 42;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email_address().data(), static_cast<int>(this->email_address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogon.email_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      42, this->email_address(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional fixed32 rtime32_account_creation = 43;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(43, this->rtime32_account_creation(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string account_name = 50;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account_name().data(), static_cast<int>(this->account_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogon.account_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      50, this->account_name(), output);
  }

  // optional string password = 51;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogon.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      51, this->password(), output);
  }

  // optional string game_server_token = 52;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_server_token().data(), static_cast<int>(this->game_server_token().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogon.game_server_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      52, this->game_server_token(), output);
  }

  // optional string login_key = 60;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->login_key().data(), static_cast<int>(this->login_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogon.login_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      60, this->login_key(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool was_converted_deprecated_msg = 70 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(70, this->was_converted_deprecated_msg(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string anon_user_target_account_name = 80;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->anon_user_target_account_name().data(), static_cast<int>(this->anon_user_target_account_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogon.anon_user_target_account_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      80, this->anon_user_target_account_name(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional fixed64 resolved_user_steam_id = 81;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(81, this->resolved_user_steam_id(), output);
  }

  // optional int32 eresult_sentryfile = 82;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(82, this->eresult_sentryfile(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bytes sha_sentryfile = 83;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      83, this->sha_sentryfile(), output);
  }

  // optional string auth_code = 84;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->auth_code().data(), static_cast<int>(this->auth_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogon.auth_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      84, this->auth_code(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 otp_type = 85;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(85, this->otp_type(), output);
  }

  // optional uint32 otp_value = 86;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(86, this->otp_value(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string otp_identifier = 87;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->otp_identifier().data(), static_cast<int>(this->otp_identifier().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogon.otp_identifier");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      87, this->otp_identifier(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool steam2_ticket_request = 88;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(88, this->steam2_ticket_request(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bytes sony_psn_ticket = 90;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      90, this->sony_psn_ticket(), output);
  }

  // optional string sony_psn_service_id = 91;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sony_psn_service_id().data(), static_cast<int>(this->sony_psn_service_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogon.sony_psn_service_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      91, this->sony_psn_service_id(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool create_new_psn_linked_account_if_needed = 92 [default = false];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(92, this->create_new_psn_linked_account_if_needed(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string sony_psn_name = 93;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sony_psn_name().data(), static_cast<int>(this->sony_psn_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogon.sony_psn_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      93, this->sony_psn_name(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 game_server_app_id = 94;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(94, this->game_server_app_id(), output);
  }

  // optional bool steamguard_dont_remember_computer = 95;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(95, this->steamguard_dont_remember_computer(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string machine_name = 96;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->machine_name().data(), static_cast<int>(this->machine_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogon.machine_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      96, this->machine_name(), output);
  }

  // optional string machine_name_userchosen = 97;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->machine_name_userchosen().data(), static_cast<int>(this->machine_name_userchosen().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogon.machine_name_userchosen");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      97, this->machine_name_userchosen(), output);
  }

  // optional string country_override = 98;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_override().data(), static_cast<int>(this->country_override().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogon.country_override");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      98, this->country_override(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool is_steam_box = 99;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(99, this->is_steam_box(), output);
  }

  // optional uint64 client_instance_id = 100;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(100, this->client_instance_id(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string two_factor_code = 101;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->two_factor_code().data(), static_cast<int>(this->two_factor_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogon.two_factor_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      101, this->two_factor_code(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool supports_rate_limit_response = 102;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(102, this->supports_rate_limit_response(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string web_logon_nonce = 103;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->web_logon_nonce().data(), static_cast<int>(this->web_logon_nonce().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogon.web_logon_nonce");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      103, this->web_logon_nonce(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 priority_reason = 104;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(104, this->priority_reason(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientLogon)
}

::google::protobuf::uint8* CMsgClientLogon::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientLogon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 protocol_version = 1;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->protocol_version(), target);
  }

  // optional uint32 obfustucated_private_ip = 2;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->obfustucated_private_ip(), target);
  }

  // optional uint32 cell_id = 3;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cell_id(), target);
  }

  // optional uint32 last_session_id = 4;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->last_session_id(), target);
  }

  // optional uint32 client_package_version = 5;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->client_package_version(), target);
  }

  // optional string client_language = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_language().data(), static_cast<int>(this->client_language().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogon.client_language");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->client_language(), target);
  }

  // optional uint32 client_os_type = 7;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->client_os_type(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool should_remember_password = 8 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->should_remember_password(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string wine_version = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wine_version().data(), static_cast<int>(this->wine_version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogon.wine_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->wine_version(), target);
  }

  // optional uint32 ping_ms_from_cell_search = 10;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->ping_ms_from_cell_search(), target);
  }

  // optional uint32 public_ip = 20;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->public_ip(), target);
  }

  // optional uint32 qos_level = 21;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->qos_level(), target);
  }

  // optional fixed64 client_supplied_steam_id = 22;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(22, this->client_supplied_steam_id(), target);
  }

  // optional bytes machine_id = 30;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        30, this->machine_id(), target);
  }

  // optional uint32 launcher_type = 31 [default = 0];
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->launcher_type(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 ui_mode = 32 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->ui_mode(), target);
  }

  // optional uint32 chat_mode = 33 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->chat_mode(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bytes steam2_auth_ticket = 41;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        41, this->steam2_auth_ticket(), target);
  }

  // optional string email_address = 42;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email_address().data(), static_cast<int>(this->email_address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogon.email_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        42, this->email_address(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional fixed32 rtime32_account_creation = 43;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(43, this->rtime32_account_creation(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string account_name = 50;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account_name().data(), static_cast<int>(this->account_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogon.account_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        50, this->account_name(), target);
  }

  // optional string password = 51;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogon.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        51, this->password(), target);
  }

  // optional string game_server_token = 52;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_server_token().data(), static_cast<int>(this->game_server_token().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogon.game_server_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        52, this->game_server_token(), target);
  }

  // optional string login_key = 60;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->login_key().data(), static_cast<int>(this->login_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogon.login_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        60, this->login_key(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool was_converted_deprecated_msg = 70 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(70, this->was_converted_deprecated_msg(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string anon_user_target_account_name = 80;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->anon_user_target_account_name().data(), static_cast<int>(this->anon_user_target_account_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogon.anon_user_target_account_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        80, this->anon_user_target_account_name(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional fixed64 resolved_user_steam_id = 81;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(81, this->resolved_user_steam_id(), target);
  }

  // optional int32 eresult_sentryfile = 82;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(82, this->eresult_sentryfile(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bytes sha_sentryfile = 83;
  if (cached_has_bits & 0x00000400u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        83, this->sha_sentryfile(), target);
  }

  // optional string auth_code = 84;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->auth_code().data(), static_cast<int>(this->auth_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogon.auth_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        84, this->auth_code(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 otp_type = 85;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(85, this->otp_type(), target);
  }

  // optional uint32 otp_value = 86;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(86, this->otp_value(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string otp_identifier = 87;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->otp_identifier().data(), static_cast<int>(this->otp_identifier().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogon.otp_identifier");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        87, this->otp_identifier(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool steam2_ticket_request = 88;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(88, this->steam2_ticket_request(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bytes sony_psn_ticket = 90;
  if (cached_has_bits & 0x00002000u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        90, this->sony_psn_ticket(), target);
  }

  // optional string sony_psn_service_id = 91;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sony_psn_service_id().data(), static_cast<int>(this->sony_psn_service_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogon.sony_psn_service_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        91, this->sony_psn_service_id(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool create_new_psn_linked_account_if_needed = 92 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(92, this->create_new_psn_linked_account_if_needed(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string sony_psn_name = 93;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sony_psn_name().data(), static_cast<int>(this->sony_psn_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogon.sony_psn_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        93, this->sony_psn_name(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 game_server_app_id = 94;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(94, this->game_server_app_id(), target);
  }

  // optional bool steamguard_dont_remember_computer = 95;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(95, this->steamguard_dont_remember_computer(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string machine_name = 96;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->machine_name().data(), static_cast<int>(this->machine_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogon.machine_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        96, this->machine_name(), target);
  }

  // optional string machine_name_userchosen = 97;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->machine_name_userchosen().data(), static_cast<int>(this->machine_name_userchosen().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogon.machine_name_userchosen");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        97, this->machine_name_userchosen(), target);
  }

  // optional string country_override = 98;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_override().data(), static_cast<int>(this->country_override().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogon.country_override");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        98, this->country_override(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool is_steam_box = 99;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(99, this->is_steam_box(), target);
  }

  // optional uint64 client_instance_id = 100;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(100, this->client_instance_id(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string two_factor_code = 101;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->two_factor_code().data(), static_cast<int>(this->two_factor_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogon.two_factor_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        101, this->two_factor_code(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool supports_rate_limit_response = 102;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(102, this->supports_rate_limit_response(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string web_logon_nonce = 103;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->web_logon_nonce().data(), static_cast<int>(this->web_logon_nonce().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogon.web_logon_nonce");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        103, this->web_logon_nonce(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 priority_reason = 104;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(104, this->priority_reason(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientLogon)
  return target;
}

size_t CMsgClientLogon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientLogon)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string client_language = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_language());
    }

    // optional string wine_version = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wine_version());
    }

    // optional bytes machine_id = 30;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->machine_id());
    }

    // optional bytes steam2_auth_ticket = 41;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->steam2_auth_ticket());
    }

    // optional string email_address = 42;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email_address());
    }

    // optional string account_name = 50;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account_name());
    }

    // optional string password = 51;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional string game_server_token = 52;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_server_token());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional string login_key = 60;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->login_key());
    }

    // optional string anon_user_target_account_name = 80;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->anon_user_target_account_name());
    }

    // optional bytes sha_sentryfile = 83;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha_sentryfile());
    }

    // optional string auth_code = 84;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->auth_code());
    }

    // optional string otp_identifier = 87;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->otp_identifier());
    }

    // optional bytes sony_psn_ticket = 90;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sony_psn_ticket());
    }

    // optional string sony_psn_service_id = 91;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sony_psn_service_id());
    }

    // optional string sony_psn_name = 93;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sony_psn_name());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional string machine_name = 96;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machine_name());
    }

    // optional string machine_name_userchosen = 97;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machine_name_userchosen());
    }

    // optional string country_override = 98;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country_override());
    }

    // optional string two_factor_code = 101;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->two_factor_code());
    }

    // optional string web_logon_nonce = 103;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->web_logon_nonce());
    }

    // optional uint32 protocol_version = 1;
    if (cached_has_bits & 0x00200000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->protocol_version());
    }

    // optional uint32 obfustucated_private_ip = 2;
    if (cached_has_bits & 0x00400000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->obfustucated_private_ip());
    }

    // optional uint32 cell_id = 3;
    if (cached_has_bits & 0x00800000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cell_id());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional uint32 last_session_id = 4;
    if (cached_has_bits & 0x01000000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_session_id());
    }

    // optional uint32 client_package_version = 5;
    if (cached_has_bits & 0x02000000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_package_version());
    }

    // optional uint32 client_os_type = 7;
    if (cached_has_bits & 0x04000000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_os_type());
    }

    // optional uint32 ping_ms_from_cell_search = 10;
    if (cached_has_bits & 0x08000000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_ms_from_cell_search());
    }

    // optional uint32 public_ip = 20;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->public_ip());
    }

    // optional fixed64 client_supplied_steam_id = 22;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 8;
    }

    // optional uint32 qos_level = 21;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->qos_level());
    }

    // optional uint32 launcher_type = 31 [default = 0];
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->launcher_type());
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 ui_mode = 32 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ui_mode());
    }

    // optional uint32 chat_mode = 33 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chat_mode());
    }

    // optional fixed32 rtime32_account_creation = 43;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 4;
    }

    // optional bool should_remember_password = 8 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool was_converted_deprecated_msg = 70 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 1;
    }

    // optional bool steam2_ticket_request = 88;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 1;
    }

    // optional bool create_new_psn_linked_account_if_needed = 92 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional fixed64 resolved_user_steam_id = 81;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 eresult_sentryfile = 82;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult_sentryfile());
    }

    // optional int32 otp_type = 85;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->otp_type());
    }

    // optional uint32 otp_value = 86;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->otp_value());
    }

    // optional int32 game_server_app_id = 94;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_server_app_id());
    }

    // optional uint64 client_instance_id = 100;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->client_instance_id());
    }

    // optional bool steamguard_dont_remember_computer = 95;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional bool is_steam_box = 99;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional bool supports_rate_limit_response = 102;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  // optional int32 priority_reason = 104;
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->priority_reason());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientLogon::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientLogon)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientLogon* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientLogon>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientLogon)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientLogon)
    MergeFrom(*source);
  }
}

void CMsgClientLogon::MergeFrom(const CMsgClientLogon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientLogon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      client_language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_language_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      wine_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wine_version_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      machine_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      steam2_auth_ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.steam2_auth_ticket_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      email_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_address_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      account_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_name_);
    }
    if (cached_has_bits & 0x00000040u) {
      _has_bits_[0] |= 0x00000040u;
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (cached_has_bits & 0x00000080u) {
      _has_bits_[0] |= 0x00000080u;
      game_server_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_server_token_);
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _has_bits_[0] |= 0x00000100u;
      login_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.login_key_);
    }
    if (cached_has_bits & 0x00000200u) {
      _has_bits_[0] |= 0x00000200u;
      anon_user_target_account_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.anon_user_target_account_name_);
    }
    if (cached_has_bits & 0x00000400u) {
      _has_bits_[0] |= 0x00000400u;
      sha_sentryfile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_sentryfile_);
    }
    if (cached_has_bits & 0x00000800u) {
      _has_bits_[0] |= 0x00000800u;
      auth_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.auth_code_);
    }
    if (cached_has_bits & 0x00001000u) {
      _has_bits_[0] |= 0x00001000u;
      otp_identifier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.otp_identifier_);
    }
    if (cached_has_bits & 0x00002000u) {
      _has_bits_[0] |= 0x00002000u;
      sony_psn_ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sony_psn_ticket_);
    }
    if (cached_has_bits & 0x00004000u) {
      _has_bits_[0] |= 0x00004000u;
      sony_psn_service_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sony_psn_service_id_);
    }
    if (cached_has_bits & 0x00008000u) {
      _has_bits_[0] |= 0x00008000u;
      sony_psn_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sony_psn_name_);
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _has_bits_[0] |= 0x00010000u;
      machine_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_name_);
    }
    if (cached_has_bits & 0x00020000u) {
      _has_bits_[0] |= 0x00020000u;
      machine_name_userchosen_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_name_userchosen_);
    }
    if (cached_has_bits & 0x00040000u) {
      _has_bits_[0] |= 0x00040000u;
      country_override_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_override_);
    }
    if (cached_has_bits & 0x00080000u) {
      _has_bits_[0] |= 0x00080000u;
      two_factor_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.two_factor_code_);
    }
    if (cached_has_bits & 0x00100000u) {
      _has_bits_[0] |= 0x00100000u;
      web_logon_nonce_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.web_logon_nonce_);
    }
    if (cached_has_bits & 0x00200000u) {
      protocol_version_ = from.protocol_version_;
    }
    if (cached_has_bits & 0x00400000u) {
      obfustucated_private_ip_ = from.obfustucated_private_ip_;
    }
    if (cached_has_bits & 0x00800000u) {
      cell_id_ = from.cell_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      last_session_id_ = from.last_session_id_;
    }
    if (cached_has_bits & 0x02000000u) {
      client_package_version_ = from.client_package_version_;
    }
    if (cached_has_bits & 0x04000000u) {
      client_os_type_ = from.client_os_type_;
    }
    if (cached_has_bits & 0x08000000u) {
      ping_ms_from_cell_search_ = from.ping_ms_from_cell_search_;
    }
    if (cached_has_bits & 0x10000000u) {
      public_ip_ = from.public_ip_;
    }
    if (cached_has_bits & 0x20000000u) {
      client_supplied_steam_id_ = from.client_supplied_steam_id_;
    }
    if (cached_has_bits & 0x40000000u) {
      qos_level_ = from.qos_level_;
    }
    if (cached_has_bits & 0x80000000u) {
      launcher_type_ = from.launcher_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ui_mode_ = from.ui_mode_;
    }
    if (cached_has_bits & 0x00000002u) {
      chat_mode_ = from.chat_mode_;
    }
    if (cached_has_bits & 0x00000004u) {
      rtime32_account_creation_ = from.rtime32_account_creation_;
    }
    if (cached_has_bits & 0x00000008u) {
      should_remember_password_ = from.should_remember_password_;
    }
    if (cached_has_bits & 0x00000010u) {
      was_converted_deprecated_msg_ = from.was_converted_deprecated_msg_;
    }
    if (cached_has_bits & 0x00000020u) {
      steam2_ticket_request_ = from.steam2_ticket_request_;
    }
    if (cached_has_bits & 0x00000040u) {
      create_new_psn_linked_account_if_needed_ = from.create_new_psn_linked_account_if_needed_;
    }
    if (cached_has_bits & 0x00000080u) {
      resolved_user_steam_id_ = from.resolved_user_steam_id_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      eresult_sentryfile_ = from.eresult_sentryfile_;
    }
    if (cached_has_bits & 0x00000200u) {
      otp_type_ = from.otp_type_;
    }
    if (cached_has_bits & 0x00000400u) {
      otp_value_ = from.otp_value_;
    }
    if (cached_has_bits & 0x00000800u) {
      game_server_app_id_ = from.game_server_app_id_;
    }
    if (cached_has_bits & 0x00001000u) {
      client_instance_id_ = from.client_instance_id_;
    }
    if (cached_has_bits & 0x00002000u) {
      steamguard_dont_remember_computer_ = from.steamguard_dont_remember_computer_;
    }
    if (cached_has_bits & 0x00004000u) {
      is_steam_box_ = from.is_steam_box_;
    }
    if (cached_has_bits & 0x00008000u) {
      supports_rate_limit_response_ = from.supports_rate_limit_response_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    set_priority_reason(from.priority_reason());
  }
}

void CMsgClientLogon::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientLogon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientLogon::CopyFrom(const CMsgClientLogon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientLogon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLogon::IsInitialized() const {
  return true;
}

void CMsgClientLogon::Swap(CMsgClientLogon* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientLogon::InternalSwap(CMsgClientLogon* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  client_language_.Swap(&other->client_language_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  wine_version_.Swap(&other->wine_version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  machine_id_.Swap(&other->machine_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  steam2_auth_ticket_.Swap(&other->steam2_auth_ticket_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  email_address_.Swap(&other->email_address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  account_name_.Swap(&other->account_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  password_.Swap(&other->password_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  game_server_token_.Swap(&other->game_server_token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  login_key_.Swap(&other->login_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  anon_user_target_account_name_.Swap(&other->anon_user_target_account_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sha_sentryfile_.Swap(&other->sha_sentryfile_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  auth_code_.Swap(&other->auth_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  otp_identifier_.Swap(&other->otp_identifier_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sony_psn_ticket_.Swap(&other->sony_psn_ticket_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sony_psn_service_id_.Swap(&other->sony_psn_service_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sony_psn_name_.Swap(&other->sony_psn_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  machine_name_.Swap(&other->machine_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  machine_name_userchosen_.Swap(&other->machine_name_userchosen_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  country_override_.Swap(&other->country_override_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  two_factor_code_.Swap(&other->two_factor_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  web_logon_nonce_.Swap(&other->web_logon_nonce_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(protocol_version_, other->protocol_version_);
  swap(obfustucated_private_ip_, other->obfustucated_private_ip_);
  swap(cell_id_, other->cell_id_);
  swap(last_session_id_, other->last_session_id_);
  swap(client_package_version_, other->client_package_version_);
  swap(client_os_type_, other->client_os_type_);
  swap(ping_ms_from_cell_search_, other->ping_ms_from_cell_search_);
  swap(public_ip_, other->public_ip_);
  swap(client_supplied_steam_id_, other->client_supplied_steam_id_);
  swap(qos_level_, other->qos_level_);
  swap(launcher_type_, other->launcher_type_);
  swap(ui_mode_, other->ui_mode_);
  swap(chat_mode_, other->chat_mode_);
  swap(rtime32_account_creation_, other->rtime32_account_creation_);
  swap(should_remember_password_, other->should_remember_password_);
  swap(was_converted_deprecated_msg_, other->was_converted_deprecated_msg_);
  swap(steam2_ticket_request_, other->steam2_ticket_request_);
  swap(create_new_psn_linked_account_if_needed_, other->create_new_psn_linked_account_if_needed_);
  swap(resolved_user_steam_id_, other->resolved_user_steam_id_);
  swap(eresult_sentryfile_, other->eresult_sentryfile_);
  swap(otp_type_, other->otp_type_);
  swap(otp_value_, other->otp_value_);
  swap(game_server_app_id_, other->game_server_app_id_);
  swap(client_instance_id_, other->client_instance_id_);
  swap(steamguard_dont_remember_computer_, other->steamguard_dont_remember_computer_);
  swap(is_steam_box_, other->is_steam_box_);
  swap(supports_rate_limit_response_, other->supports_rate_limit_response_);
  swap(priority_reason_, other->priority_reason_);
}

::google::protobuf::Metadata CMsgClientLogon::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_5flogin_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_5flogin_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientLogonResponse::InitAsDefaultInstance() {
}
class CMsgClientLogonResponse::HasBitSetters {
 public:
  static void set_has_eresult(CMsgClientLogonResponse* msg) {
    msg->_has_bits_[0] |= 0x00400000u;
  }
  static void set_has_out_of_game_heartbeat_seconds(CMsgClientLogonResponse* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_in_game_heartbeat_seconds(CMsgClientLogonResponse* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_public_ip(CMsgClientLogonResponse* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_rtime32_server_time(CMsgClientLogonResponse* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_account_flags(CMsgClientLogonResponse* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_cell_id(CMsgClientLogonResponse* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_email_domain(CMsgClientLogonResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_steam2_ticket(CMsgClientLogonResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_eresult_extended(CMsgClientLogonResponse* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static void set_has_webapi_authenticate_user_nonce(CMsgClientLogonResponse* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_cell_id_ping_threshold(CMsgClientLogonResponse* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
  static void set_has_use_pics(CMsgClientLogonResponse* msg) {
    msg->_has_bits_[0] |= 0x00010000u;
  }
  static void set_has_vanity_url(CMsgClientLogonResponse* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_client_supplied_steamid(CMsgClientLogonResponse* msg) {
    msg->_has_bits_[0] |= 0x00008000u;
  }
  static void set_has_ip_country_code(CMsgClientLogonResponse* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_parental_settings(CMsgClientLogonResponse* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_parental_setting_signature(CMsgClientLogonResponse* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_count_loginfailures_to_migrate(CMsgClientLogonResponse* msg) {
    msg->_has_bits_[0] |= 0x00040000u;
  }
  static void set_has_count_disconnects_to_migrate(CMsgClientLogonResponse* msg) {
    msg->_has_bits_[0] |= 0x00080000u;
  }
  static void set_has_ogs_data_report_time_window(CMsgClientLogonResponse* msg) {
    msg->_has_bits_[0] |= 0x00100000u;
  }
  static void set_has_client_instance_id(CMsgClientLogonResponse* msg) {
    msg->_has_bits_[0] |= 0x00200000u;
  }
  static void set_has_force_client_update_check(CMsgClientLogonResponse* msg) {
    msg->_has_bits_[0] |= 0x00020000u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientLogonResponse::kEresultFieldNumber;
const int CMsgClientLogonResponse::kOutOfGameHeartbeatSecondsFieldNumber;
const int CMsgClientLogonResponse::kInGameHeartbeatSecondsFieldNumber;
const int CMsgClientLogonResponse::kPublicIpFieldNumber;
const int CMsgClientLogonResponse::kRtime32ServerTimeFieldNumber;
const int CMsgClientLogonResponse::kAccountFlagsFieldNumber;
const int CMsgClientLogonResponse::kCellIdFieldNumber;
const int CMsgClientLogonResponse::kEmailDomainFieldNumber;
const int CMsgClientLogonResponse::kSteam2TicketFieldNumber;
const int CMsgClientLogonResponse::kEresultExtendedFieldNumber;
const int CMsgClientLogonResponse::kWebapiAuthenticateUserNonceFieldNumber;
const int CMsgClientLogonResponse::kCellIdPingThresholdFieldNumber;
const int CMsgClientLogonResponse::kUsePicsFieldNumber;
const int CMsgClientLogonResponse::kVanityUrlFieldNumber;
const int CMsgClientLogonResponse::kClientSuppliedSteamidFieldNumber;
const int CMsgClientLogonResponse::kIpCountryCodeFieldNumber;
const int CMsgClientLogonResponse::kParentalSettingsFieldNumber;
const int CMsgClientLogonResponse::kParentalSettingSignatureFieldNumber;
const int CMsgClientLogonResponse::kCountLoginfailuresToMigrateFieldNumber;
const int CMsgClientLogonResponse::kCountDisconnectsToMigrateFieldNumber;
const int CMsgClientLogonResponse::kOgsDataReportTimeWindowFieldNumber;
const int CMsgClientLogonResponse::kClientInstanceIdFieldNumber;
const int CMsgClientLogonResponse::kForceClientUpdateCheckFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientLogonResponse::CMsgClientLogonResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientLogonResponse)
}
CMsgClientLogonResponse::CMsgClientLogonResponse(const CMsgClientLogonResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  email_domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_email_domain()) {
    email_domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_domain_);
  }
  steam2_ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_steam2_ticket()) {
    steam2_ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.steam2_ticket_);
  }
  webapi_authenticate_user_nonce_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_webapi_authenticate_user_nonce()) {
    webapi_authenticate_user_nonce_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.webapi_authenticate_user_nonce_);
  }
  vanity_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_vanity_url()) {
    vanity_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vanity_url_);
  }
  ip_country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ip_country_code()) {
    ip_country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_country_code_);
  }
  parental_settings_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_parental_settings()) {
    parental_settings_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parental_settings_);
  }
  parental_setting_signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_parental_setting_signature()) {
    parental_setting_signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parental_setting_signature_);
  }
  ::memcpy(&out_of_game_heartbeat_seconds_, &from.out_of_game_heartbeat_seconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&out_of_game_heartbeat_seconds_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientLogonResponse)
}

void CMsgClientLogonResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientLogonResponse_steammessages_5fclientserver_5flogin_2eproto.base);
  email_domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  steam2_ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  webapi_authenticate_user_nonce_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vanity_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parental_settings_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parental_setting_signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&out_of_game_heartbeat_seconds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_instance_id_) -
      reinterpret_cast<char*>(&out_of_game_heartbeat_seconds_)) + sizeof(client_instance_id_));
  eresult_ = 2;
}

CMsgClientLogonResponse::~CMsgClientLogonResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientLogonResponse)
  SharedDtor();
}

void CMsgClientLogonResponse::SharedDtor() {
  email_domain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  steam2_ticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  webapi_authenticate_user_nonce_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vanity_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_country_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parental_settings_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parental_setting_signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientLogonResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientLogonResponse& CMsgClientLogonResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientLogonResponse_steammessages_5fclientserver_5flogin_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientLogonResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientLogonResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      email_domain_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      steam2_ticket_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      webapi_authenticate_user_nonce_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      vanity_url_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      ip_country_code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      parental_settings_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      parental_setting_signature_.ClearNonDefaultToEmptyNoArena();
    }
  }
  out_of_game_heartbeat_seconds_ = 0;
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&in_game_heartbeat_seconds_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&client_supplied_steamid_) -
        reinterpret_cast<char*>(&in_game_heartbeat_seconds_)) + sizeof(client_supplied_steamid_));
  }
  if (cached_has_bits & 0x007f0000u) {
    ::memset(&use_pics_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&client_instance_id_) -
        reinterpret_cast<char*>(&use_pics_)) + sizeof(client_instance_id_));
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientLogonResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientLogonResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_eresult(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 out_of_game_heartbeat_seconds = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_out_of_game_heartbeat_seconds(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 in_game_heartbeat_seconds = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_in_game_heartbeat_seconds(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 public_ip = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_public_ip(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed32 rtime32_server_time = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 45) goto handle_unusual;
        msg->set_rtime32_server_time(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional uint32 account_flags = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_account_flags(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 cell_id = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_cell_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string email_domain = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientLogonResponse.email_domain");
        object = msg->mutable_email_domain();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bytes steam2_ticket = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_steam2_ticket();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional int32 eresult_extended = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_eresult_extended(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string webapi_authenticate_user_nonce = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientLogonResponse.webapi_authenticate_user_nonce");
        object = msg->mutable_webapi_authenticate_user_nonce();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 cell_id_ping_threshold = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_cell_id_ping_threshold(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool use_pics = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_use_pics(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string vanity_url = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 114) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientLogonResponse.vanity_url");
        object = msg->mutable_vanity_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional fixed64 client_supplied_steamid = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 161) goto handle_unusual;
        msg->set_client_supplied_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional string ip_country_code = 21;
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 170) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientLogonResponse.ip_country_code");
        object = msg->mutable_ip_country_code();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bytes parental_settings = 22;
      case 22: {
        if (static_cast<::google::protobuf::uint8>(tag) != 178) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_parental_settings();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bytes parental_setting_signature = 23;
      case 23: {
        if (static_cast<::google::protobuf::uint8>(tag) != 186) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_parental_setting_signature();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional int32 count_loginfailures_to_migrate = 24;
      case 24: {
        if (static_cast<::google::protobuf::uint8>(tag) != 192) goto handle_unusual;
        msg->set_count_loginfailures_to_migrate(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 count_disconnects_to_migrate = 25;
      case 25: {
        if (static_cast<::google::protobuf::uint8>(tag) != 200) goto handle_unusual;
        msg->set_count_disconnects_to_migrate(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 ogs_data_report_time_window = 26;
      case 26: {
        if (static_cast<::google::protobuf::uint8>(tag) != 208) goto handle_unusual;
        msg->set_ogs_data_report_time_window(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 client_instance_id = 27;
      case 27: {
        if (static_cast<::google::protobuf::uint8>(tag) != 216) goto handle_unusual;
        msg->set_client_instance_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool force_client_update_check = 28;
      case 28: {
        if (static_cast<::google::protobuf::uint8>(tag) != 224) goto handle_unusual;
        msg->set_force_client_update_check(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientLogonResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientLogonResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_eresult(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 out_of_game_heartbeat_seconds = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_out_of_game_heartbeat_seconds(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &out_of_game_heartbeat_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 in_game_heartbeat_seconds = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_in_game_heartbeat_seconds(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &in_game_heartbeat_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 public_ip = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_public_ip(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &public_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 rtime32_server_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (45 & 0xFF)) {
          HasBitSetters::set_has_rtime32_server_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &rtime32_server_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 account_flags = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_account_flags(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cell_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_cell_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cell_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string email_domain = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email_domain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->email_domain().data(), static_cast<int>(this->email_domain().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientLogonResponse.email_domain");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes steam2_ticket = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_steam2_ticket()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 eresult_extended = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_eresult_extended(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_extended_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string webapi_authenticate_user_nonce = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_webapi_authenticate_user_nonce()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->webapi_authenticate_user_nonce().data(), static_cast<int>(this->webapi_authenticate_user_nonce().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientLogonResponse.webapi_authenticate_user_nonce");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cell_id_ping_threshold = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_cell_id_ping_threshold(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cell_id_ping_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_pics = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {
          HasBitSetters::set_has_use_pics(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_pics_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string vanity_url = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (114 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vanity_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vanity_url().data(), static_cast<int>(this->vanity_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientLogonResponse.vanity_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 client_supplied_steamid = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (161 & 0xFF)) {
          HasBitSetters::set_has_client_supplied_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &client_supplied_steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ip_country_code = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (170 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip_country_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip_country_code().data(), static_cast<int>(this->ip_country_code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientLogonResponse.ip_country_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes parental_settings = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (178 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_parental_settings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes parental_setting_signature = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (186 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_parental_setting_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 count_loginfailures_to_migrate = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (192 & 0xFF)) {
          HasBitSetters::set_has_count_loginfailures_to_migrate(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_loginfailures_to_migrate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 count_disconnects_to_migrate = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (200 & 0xFF)) {
          HasBitSetters::set_has_count_disconnects_to_migrate(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_disconnects_to_migrate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ogs_data_report_time_window = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (208 & 0xFF)) {
          HasBitSetters::set_has_ogs_data_report_time_window(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ogs_data_report_time_window_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 client_instance_id = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (216 & 0xFF)) {
          HasBitSetters::set_has_client_instance_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &client_instance_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool force_client_update_check = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (224 & 0xFF)) {
          HasBitSetters::set_has_force_client_update_check(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_client_update_check_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientLogonResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientLogonResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientLogonResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientLogonResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional int32 out_of_game_heartbeat_seconds = 2;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->out_of_game_heartbeat_seconds(), output);
  }

  // optional int32 in_game_heartbeat_seconds = 3;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->in_game_heartbeat_seconds(), output);
  }

  // optional uint32 public_ip = 4;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->public_ip(), output);
  }

  // optional fixed32 rtime32_server_time = 5;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->rtime32_server_time(), output);
  }

  // optional uint32 account_flags = 6;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->account_flags(), output);
  }

  // optional uint32 cell_id = 7;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->cell_id(), output);
  }

  // optional string email_domain = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email_domain().data(), static_cast<int>(this->email_domain().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogonResponse.email_domain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->email_domain(), output);
  }

  // optional bytes steam2_ticket = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->steam2_ticket(), output);
  }

  // optional int32 eresult_extended = 10;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->eresult_extended(), output);
  }

  // optional string webapi_authenticate_user_nonce = 11;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->webapi_authenticate_user_nonce().data(), static_cast<int>(this->webapi_authenticate_user_nonce().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogonResponse.webapi_authenticate_user_nonce");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->webapi_authenticate_user_nonce(), output);
  }

  // optional uint32 cell_id_ping_threshold = 12;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->cell_id_ping_threshold(), output);
  }

  // optional bool use_pics = 13;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->use_pics(), output);
  }

  // optional string vanity_url = 14;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vanity_url().data(), static_cast<int>(this->vanity_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogonResponse.vanity_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->vanity_url(), output);
  }

  // optional fixed64 client_supplied_steamid = 20;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(20, this->client_supplied_steamid(), output);
  }

  // optional string ip_country_code = 21;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip_country_code().data(), static_cast<int>(this->ip_country_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogonResponse.ip_country_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->ip_country_code(), output);
  }

  // optional bytes parental_settings = 22;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      22, this->parental_settings(), output);
  }

  // optional bytes parental_setting_signature = 23;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      23, this->parental_setting_signature(), output);
  }

  // optional int32 count_loginfailures_to_migrate = 24;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->count_loginfailures_to_migrate(), output);
  }

  // optional int32 count_disconnects_to_migrate = 25;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->count_disconnects_to_migrate(), output);
  }

  // optional int32 ogs_data_report_time_window = 26;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->ogs_data_report_time_window(), output);
  }

  // optional uint64 client_instance_id = 27;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(27, this->client_instance_id(), output);
  }

  // optional bool force_client_update_check = 28;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(28, this->force_client_update_check(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientLogonResponse)
}

::google::protobuf::uint8* CMsgClientLogonResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientLogonResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // optional int32 out_of_game_heartbeat_seconds = 2;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->out_of_game_heartbeat_seconds(), target);
  }

  // optional int32 in_game_heartbeat_seconds = 3;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->in_game_heartbeat_seconds(), target);
  }

  // optional uint32 public_ip = 4;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->public_ip(), target);
  }

  // optional fixed32 rtime32_server_time = 5;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->rtime32_server_time(), target);
  }

  // optional uint32 account_flags = 6;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->account_flags(), target);
  }

  // optional uint32 cell_id = 7;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->cell_id(), target);
  }

  // optional string email_domain = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email_domain().data(), static_cast<int>(this->email_domain().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogonResponse.email_domain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->email_domain(), target);
  }

  // optional bytes steam2_ticket = 9;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->steam2_ticket(), target);
  }

  // optional int32 eresult_extended = 10;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->eresult_extended(), target);
  }

  // optional string webapi_authenticate_user_nonce = 11;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->webapi_authenticate_user_nonce().data(), static_cast<int>(this->webapi_authenticate_user_nonce().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogonResponse.webapi_authenticate_user_nonce");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->webapi_authenticate_user_nonce(), target);
  }

  // optional uint32 cell_id_ping_threshold = 12;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->cell_id_ping_threshold(), target);
  }

  // optional bool use_pics = 13;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->use_pics(), target);
  }

  // optional string vanity_url = 14;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vanity_url().data(), static_cast<int>(this->vanity_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogonResponse.vanity_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->vanity_url(), target);
  }

  // optional fixed64 client_supplied_steamid = 20;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(20, this->client_supplied_steamid(), target);
  }

  // optional string ip_country_code = 21;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip_country_code().data(), static_cast<int>(this->ip_country_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogonResponse.ip_country_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->ip_country_code(), target);
  }

  // optional bytes parental_settings = 22;
  if (cached_has_bits & 0x00000020u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        22, this->parental_settings(), target);
  }

  // optional bytes parental_setting_signature = 23;
  if (cached_has_bits & 0x00000040u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        23, this->parental_setting_signature(), target);
  }

  // optional int32 count_loginfailures_to_migrate = 24;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->count_loginfailures_to_migrate(), target);
  }

  // optional int32 count_disconnects_to_migrate = 25;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->count_disconnects_to_migrate(), target);
  }

  // optional int32 ogs_data_report_time_window = 26;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->ogs_data_report_time_window(), target);
  }

  // optional uint64 client_instance_id = 27;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(27, this->client_instance_id(), target);
  }

  // optional bool force_client_update_check = 28;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(28, this->force_client_update_check(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientLogonResponse)
  return target;
}

size_t CMsgClientLogonResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientLogonResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string email_domain = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email_domain());
    }

    // optional bytes steam2_ticket = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->steam2_ticket());
    }

    // optional string webapi_authenticate_user_nonce = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->webapi_authenticate_user_nonce());
    }

    // optional string vanity_url = 14;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vanity_url());
    }

    // optional string ip_country_code = 21;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip_country_code());
    }

    // optional bytes parental_settings = 22;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->parental_settings());
    }

    // optional bytes parental_setting_signature = 23;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->parental_setting_signature());
    }

    // optional int32 out_of_game_heartbeat_seconds = 2;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->out_of_game_heartbeat_seconds());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 in_game_heartbeat_seconds = 3;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->in_game_heartbeat_seconds());
    }

    // optional uint32 public_ip = 4;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->public_ip());
    }

    // optional fixed32 rtime32_server_time = 5;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional uint32 account_flags = 6;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_flags());
    }

    // optional uint32 cell_id = 7;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cell_id());
    }

    // optional int32 eresult_extended = 10;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult_extended());
    }

    // optional uint32 cell_id_ping_threshold = 12;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cell_id_ping_threshold());
    }

    // optional fixed64 client_supplied_steamid = 20;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x007f0000u) {
    // optional bool use_pics = 13;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 1;
    }

    // optional bool force_client_update_check = 28;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional int32 count_loginfailures_to_migrate = 24;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count_loginfailures_to_migrate());
    }

    // optional int32 count_disconnects_to_migrate = 25;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count_disconnects_to_migrate());
    }

    // optional int32 ogs_data_report_time_window = 26;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ogs_data_report_time_window());
    }

    // optional uint64 client_instance_id = 27;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->client_instance_id());
    }

    // optional int32 eresult = 1 [default = 2];
    if (cached_has_bits & 0x00400000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientLogonResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientLogonResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientLogonResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientLogonResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientLogonResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientLogonResponse)
    MergeFrom(*source);
  }
}

void CMsgClientLogonResponse::MergeFrom(const CMsgClientLogonResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientLogonResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      email_domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_domain_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      steam2_ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.steam2_ticket_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      webapi_authenticate_user_nonce_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.webapi_authenticate_user_nonce_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      vanity_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vanity_url_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      ip_country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_country_code_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      parental_settings_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parental_settings_);
    }
    if (cached_has_bits & 0x00000040u) {
      _has_bits_[0] |= 0x00000040u;
      parental_setting_signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parental_setting_signature_);
    }
    if (cached_has_bits & 0x00000080u) {
      out_of_game_heartbeat_seconds_ = from.out_of_game_heartbeat_seconds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      in_game_heartbeat_seconds_ = from.in_game_heartbeat_seconds_;
    }
    if (cached_has_bits & 0x00000200u) {
      public_ip_ = from.public_ip_;
    }
    if (cached_has_bits & 0x00000400u) {
      rtime32_server_time_ = from.rtime32_server_time_;
    }
    if (cached_has_bits & 0x00000800u) {
      account_flags_ = from.account_flags_;
    }
    if (cached_has_bits & 0x00001000u) {
      cell_id_ = from.cell_id_;
    }
    if (cached_has_bits & 0x00002000u) {
      eresult_extended_ = from.eresult_extended_;
    }
    if (cached_has_bits & 0x00004000u) {
      cell_id_ping_threshold_ = from.cell_id_ping_threshold_;
    }
    if (cached_has_bits & 0x00008000u) {
      client_supplied_steamid_ = from.client_supplied_steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x007f0000u) {
    if (cached_has_bits & 0x00010000u) {
      use_pics_ = from.use_pics_;
    }
    if (cached_has_bits & 0x00020000u) {
      force_client_update_check_ = from.force_client_update_check_;
    }
    if (cached_has_bits & 0x00040000u) {
      count_loginfailures_to_migrate_ = from.count_loginfailures_to_migrate_;
    }
    if (cached_has_bits & 0x00080000u) {
      count_disconnects_to_migrate_ = from.count_disconnects_to_migrate_;
    }
    if (cached_has_bits & 0x00100000u) {
      ogs_data_report_time_window_ = from.ogs_data_report_time_window_;
    }
    if (cached_has_bits & 0x00200000u) {
      client_instance_id_ = from.client_instance_id_;
    }
    if (cached_has_bits & 0x00400000u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientLogonResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientLogonResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientLogonResponse::CopyFrom(const CMsgClientLogonResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientLogonResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLogonResponse::IsInitialized() const {
  return true;
}

void CMsgClientLogonResponse::Swap(CMsgClientLogonResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientLogonResponse::InternalSwap(CMsgClientLogonResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  email_domain_.Swap(&other->email_domain_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  steam2_ticket_.Swap(&other->steam2_ticket_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  webapi_authenticate_user_nonce_.Swap(&other->webapi_authenticate_user_nonce_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  vanity_url_.Swap(&other->vanity_url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ip_country_code_.Swap(&other->ip_country_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  parental_settings_.Swap(&other->parental_settings_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  parental_setting_signature_.Swap(&other->parental_setting_signature_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(out_of_game_heartbeat_seconds_, other->out_of_game_heartbeat_seconds_);
  swap(in_game_heartbeat_seconds_, other->in_game_heartbeat_seconds_);
  swap(public_ip_, other->public_ip_);
  swap(rtime32_server_time_, other->rtime32_server_time_);
  swap(account_flags_, other->account_flags_);
  swap(cell_id_, other->cell_id_);
  swap(eresult_extended_, other->eresult_extended_);
  swap(cell_id_ping_threshold_, other->cell_id_ping_threshold_);
  swap(client_supplied_steamid_, other->client_supplied_steamid_);
  swap(use_pics_, other->use_pics_);
  swap(force_client_update_check_, other->force_client_update_check_);
  swap(count_loginfailures_to_migrate_, other->count_loginfailures_to_migrate_);
  swap(count_disconnects_to_migrate_, other->count_disconnects_to_migrate_);
  swap(ogs_data_report_time_window_, other->ogs_data_report_time_window_);
  swap(client_instance_id_, other->client_instance_id_);
  swap(eresult_, other->eresult_);
}

::google::protobuf::Metadata CMsgClientLogonResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_5flogin_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_5flogin_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientRequestWebAPIAuthenticateUserNonce::InitAsDefaultInstance() {
}
class CMsgClientRequestWebAPIAuthenticateUserNonce::HasBitSetters {
 public:
  static void set_has_token_type(CMsgClientRequestWebAPIAuthenticateUserNonce* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientRequestWebAPIAuthenticateUserNonce::kTokenTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientRequestWebAPIAuthenticateUserNonce::CMsgClientRequestWebAPIAuthenticateUserNonce()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonce)
}
CMsgClientRequestWebAPIAuthenticateUserNonce::CMsgClientRequestWebAPIAuthenticateUserNonce(const CMsgClientRequestWebAPIAuthenticateUserNonce& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_type_ = from.token_type_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonce)
}

void CMsgClientRequestWebAPIAuthenticateUserNonce::SharedCtor() {
  token_type_ = -1;
}

CMsgClientRequestWebAPIAuthenticateUserNonce::~CMsgClientRequestWebAPIAuthenticateUserNonce() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonce)
  SharedDtor();
}

void CMsgClientRequestWebAPIAuthenticateUserNonce::SharedDtor() {
}

void CMsgClientRequestWebAPIAuthenticateUserNonce::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientRequestWebAPIAuthenticateUserNonce& CMsgClientRequestWebAPIAuthenticateUserNonce::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientRequestWebAPIAuthenticateUserNonce_steammessages_5fclientserver_5flogin_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientRequestWebAPIAuthenticateUserNonce::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonce)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_type_ = -1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientRequestWebAPIAuthenticateUserNonce::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientRequestWebAPIAuthenticateUserNonce*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 token_type = 1 [default = -1];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_token_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientRequestWebAPIAuthenticateUserNonce::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonce)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 token_type = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_token_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &token_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonce)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonce)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientRequestWebAPIAuthenticateUserNonce::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonce)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 token_type = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->token_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonce)
}

::google::protobuf::uint8* CMsgClientRequestWebAPIAuthenticateUserNonce::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonce)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 token_type = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->token_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonce)
  return target;
}

size_t CMsgClientRequestWebAPIAuthenticateUserNonce::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonce)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 token_type = 1 [default = -1];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->token_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientRequestWebAPIAuthenticateUserNonce::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonce)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientRequestWebAPIAuthenticateUserNonce* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientRequestWebAPIAuthenticateUserNonce>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonce)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonce)
    MergeFrom(*source);
  }
}

void CMsgClientRequestWebAPIAuthenticateUserNonce::MergeFrom(const CMsgClientRequestWebAPIAuthenticateUserNonce& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonce)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_token_type()) {
    set_token_type(from.token_type());
  }
}

void CMsgClientRequestWebAPIAuthenticateUserNonce::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonce)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientRequestWebAPIAuthenticateUserNonce::CopyFrom(const CMsgClientRequestWebAPIAuthenticateUserNonce& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonce)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRequestWebAPIAuthenticateUserNonce::IsInitialized() const {
  return true;
}

void CMsgClientRequestWebAPIAuthenticateUserNonce::Swap(CMsgClientRequestWebAPIAuthenticateUserNonce* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientRequestWebAPIAuthenticateUserNonce::InternalSwap(CMsgClientRequestWebAPIAuthenticateUserNonce* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(token_type_, other->token_type_);
}

::google::protobuf::Metadata CMsgClientRequestWebAPIAuthenticateUserNonce::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_5flogin_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_5flogin_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::InitAsDefaultInstance() {
}
class CMsgClientRequestWebAPIAuthenticateUserNonceResponse::HasBitSetters {
 public:
  static void set_has_eresult(CMsgClientRequestWebAPIAuthenticateUserNonceResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_webapi_authenticate_user_nonce(CMsgClientRequestWebAPIAuthenticateUserNonceResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_token_type(CMsgClientRequestWebAPIAuthenticateUserNonceResponse* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientRequestWebAPIAuthenticateUserNonceResponse::kEresultFieldNumber;
const int CMsgClientRequestWebAPIAuthenticateUserNonceResponse::kWebapiAuthenticateUserNonceFieldNumber;
const int CMsgClientRequestWebAPIAuthenticateUserNonceResponse::kTokenTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientRequestWebAPIAuthenticateUserNonceResponse::CMsgClientRequestWebAPIAuthenticateUserNonceResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonceResponse)
}
CMsgClientRequestWebAPIAuthenticateUserNonceResponse::CMsgClientRequestWebAPIAuthenticateUserNonceResponse(const CMsgClientRequestWebAPIAuthenticateUserNonceResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  webapi_authenticate_user_nonce_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_webapi_authenticate_user_nonce()) {
    webapi_authenticate_user_nonce_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.webapi_authenticate_user_nonce_);
  }
  ::memcpy(&eresult_, &from.eresult_,
    static_cast<size_t>(reinterpret_cast<char*>(&token_type_) -
    reinterpret_cast<char*>(&eresult_)) + sizeof(token_type_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonceResponse)
}

void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientRequestWebAPIAuthenticateUserNonceResponse_steammessages_5fclientserver_5flogin_2eproto.base);
  webapi_authenticate_user_nonce_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  eresult_ = 2;
  token_type_ = -1;
}

CMsgClientRequestWebAPIAuthenticateUserNonceResponse::~CMsgClientRequestWebAPIAuthenticateUserNonceResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonceResponse)
  SharedDtor();
}

void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::SharedDtor() {
  webapi_authenticate_user_nonce_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientRequestWebAPIAuthenticateUserNonceResponse& CMsgClientRequestWebAPIAuthenticateUserNonceResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientRequestWebAPIAuthenticateUserNonceResponse_steammessages_5fclientserver_5flogin_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonceResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      webapi_authenticate_user_nonce_.ClearNonDefaultToEmptyNoArena();
    }
    eresult_ = 2;
    token_type_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientRequestWebAPIAuthenticateUserNonceResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientRequestWebAPIAuthenticateUserNonceResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_eresult(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 token_type = 3 [default = -1];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_token_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string webapi_authenticate_user_nonce = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonceResponse.webapi_authenticate_user_nonce");
        object = msg->mutable_webapi_authenticate_user_nonce();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientRequestWebAPIAuthenticateUserNonceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonceResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_eresult(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 token_type = 3 [default = -1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_token_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &token_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string webapi_authenticate_user_nonce = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_webapi_authenticate_user_nonce()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->webapi_authenticate_user_nonce().data(), static_cast<int>(this->webapi_authenticate_user_nonce().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonceResponse.webapi_authenticate_user_nonce");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonceResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonceResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonceResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional int32 token_type = 3 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->token_type(), output);
  }

  // optional string webapi_authenticate_user_nonce = 11;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->webapi_authenticate_user_nonce().data(), static_cast<int>(this->webapi_authenticate_user_nonce().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonceResponse.webapi_authenticate_user_nonce");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->webapi_authenticate_user_nonce(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonceResponse)
}

::google::protobuf::uint8* CMsgClientRequestWebAPIAuthenticateUserNonceResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonceResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // optional int32 token_type = 3 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->token_type(), target);
  }

  // optional string webapi_authenticate_user_nonce = 11;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->webapi_authenticate_user_nonce().data(), static_cast<int>(this->webapi_authenticate_user_nonce().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonceResponse.webapi_authenticate_user_nonce");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->webapi_authenticate_user_nonce(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonceResponse)
  return target;
}

size_t CMsgClientRequestWebAPIAuthenticateUserNonceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonceResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string webapi_authenticate_user_nonce = 11;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->webapi_authenticate_user_nonce());
    }

    // optional int32 eresult = 1 [default = 2];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional int32 token_type = 3 [default = -1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->token_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientRequestWebAPIAuthenticateUserNonceResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientRequestWebAPIAuthenticateUserNonceResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonceResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonceResponse)
    MergeFrom(*source);
  }
}

void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::MergeFrom(const CMsgClientRequestWebAPIAuthenticateUserNonceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      webapi_authenticate_user_nonce_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.webapi_authenticate_user_nonce_);
    }
    if (cached_has_bits & 0x00000002u) {
      eresult_ = from.eresult_;
    }
    if (cached_has_bits & 0x00000004u) {
      token_type_ = from.token_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::CopyFrom(const CMsgClientRequestWebAPIAuthenticateUserNonceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRequestWebAPIAuthenticateUserNonceResponse::IsInitialized() const {
  return true;
}

void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::Swap(CMsgClientRequestWebAPIAuthenticateUserNonceResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::InternalSwap(CMsgClientRequestWebAPIAuthenticateUserNonceResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  webapi_authenticate_user_nonce_.Swap(&other->webapi_authenticate_user_nonce_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(eresult_, other->eresult_);
  swap(token_type_, other->token_type_);
}

::google::protobuf::Metadata CMsgClientRequestWebAPIAuthenticateUserNonceResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_5flogin_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_5flogin_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientLogOff::InitAsDefaultInstance() {
}
class CMsgClientLogOff::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientLogOff::CMsgClientLogOff()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientLogOff)
}
CMsgClientLogOff::CMsgClientLogOff(const CMsgClientLogOff& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientLogOff)
}

void CMsgClientLogOff::SharedCtor() {
}

CMsgClientLogOff::~CMsgClientLogOff() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientLogOff)
  SharedDtor();
}

void CMsgClientLogOff::SharedDtor() {
}

void CMsgClientLogOff::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientLogOff& CMsgClientLogOff::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientLogOff_steammessages_5fclientserver_5flogin_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientLogOff::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientLogOff)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientLogOff::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientLogOff*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientLogOff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientLogOff)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientLogOff)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientLogOff)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientLogOff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientLogOff)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientLogOff)
}

::google::protobuf::uint8* CMsgClientLogOff::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientLogOff)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientLogOff)
  return target;
}

size_t CMsgClientLogOff::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientLogOff)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientLogOff::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientLogOff)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientLogOff* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientLogOff>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientLogOff)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientLogOff)
    MergeFrom(*source);
  }
}

void CMsgClientLogOff::MergeFrom(const CMsgClientLogOff& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientLogOff)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgClientLogOff::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientLogOff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientLogOff::CopyFrom(const CMsgClientLogOff& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientLogOff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLogOff::IsInitialized() const {
  return true;
}

void CMsgClientLogOff::Swap(CMsgClientLogOff* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientLogOff::InternalSwap(CMsgClientLogOff* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CMsgClientLogOff::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_5flogin_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_5flogin_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientLoggedOff::InitAsDefaultInstance() {
}
class CMsgClientLoggedOff::HasBitSetters {
 public:
  static void set_has_eresult(CMsgClientLoggedOff* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientLoggedOff::kEresultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientLoggedOff::CMsgClientLoggedOff()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientLoggedOff)
}
CMsgClientLoggedOff::CMsgClientLoggedOff(const CMsgClientLoggedOff& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientLoggedOff)
}

void CMsgClientLoggedOff::SharedCtor() {
  eresult_ = 2;
}

CMsgClientLoggedOff::~CMsgClientLoggedOff() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientLoggedOff)
  SharedDtor();
}

void CMsgClientLoggedOff::SharedDtor() {
}

void CMsgClientLoggedOff::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientLoggedOff& CMsgClientLoggedOff::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientLoggedOff_steammessages_5fclientserver_5flogin_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientLoggedOff::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientLoggedOff)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  eresult_ = 2;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientLoggedOff::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientLoggedOff*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_eresult(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientLoggedOff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientLoggedOff)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_eresult(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientLoggedOff)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientLoggedOff)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientLoggedOff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientLoggedOff)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientLoggedOff)
}

::google::protobuf::uint8* CMsgClientLoggedOff::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientLoggedOff)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientLoggedOff)
  return target;
}

size_t CMsgClientLoggedOff::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientLoggedOff)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 eresult = 1 [default = 2];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->eresult());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientLoggedOff::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientLoggedOff)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientLoggedOff* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientLoggedOff>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientLoggedOff)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientLoggedOff)
    MergeFrom(*source);
  }
}

void CMsgClientLoggedOff::MergeFrom(const CMsgClientLoggedOff& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientLoggedOff)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_eresult()) {
    set_eresult(from.eresult());
  }
}

void CMsgClientLoggedOff::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientLoggedOff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientLoggedOff::CopyFrom(const CMsgClientLoggedOff& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientLoggedOff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLoggedOff::IsInitialized() const {
  return true;
}

void CMsgClientLoggedOff::Swap(CMsgClientLoggedOff* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientLoggedOff::InternalSwap(CMsgClientLoggedOff* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(eresult_, other->eresult_);
}

::google::protobuf::Metadata CMsgClientLoggedOff::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_5flogin_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_5flogin_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientNewLoginKey::InitAsDefaultInstance() {
}
class CMsgClientNewLoginKey::HasBitSetters {
 public:
  static void set_has_unique_id(CMsgClientNewLoginKey* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_login_key(CMsgClientNewLoginKey* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientNewLoginKey::kUniqueIdFieldNumber;
const int CMsgClientNewLoginKey::kLoginKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientNewLoginKey::CMsgClientNewLoginKey()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientNewLoginKey)
}
CMsgClientNewLoginKey::CMsgClientNewLoginKey(const CMsgClientNewLoginKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  login_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_login_key()) {
    login_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.login_key_);
  }
  unique_id_ = from.unique_id_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientNewLoginKey)
}

void CMsgClientNewLoginKey::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientNewLoginKey_steammessages_5fclientserver_5flogin_2eproto.base);
  login_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unique_id_ = 0u;
}

CMsgClientNewLoginKey::~CMsgClientNewLoginKey() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientNewLoginKey)
  SharedDtor();
}

void CMsgClientNewLoginKey::SharedDtor() {
  login_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientNewLoginKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientNewLoginKey& CMsgClientNewLoginKey::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientNewLoginKey_steammessages_5fclientserver_5flogin_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientNewLoginKey::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientNewLoginKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    login_key_.ClearNonDefaultToEmptyNoArena();
  }
  unique_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientNewLoginKey::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientNewLoginKey*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 unique_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_unique_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string login_key = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientNewLoginKey.login_key");
        object = msg->mutable_login_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientNewLoginKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientNewLoginKey)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 unique_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_unique_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unique_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string login_key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_login_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->login_key().data(), static_cast<int>(this->login_key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientNewLoginKey.login_key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientNewLoginKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientNewLoginKey)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientNewLoginKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientNewLoginKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 unique_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unique_id(), output);
  }

  // optional string login_key = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->login_key().data(), static_cast<int>(this->login_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientNewLoginKey.login_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->login_key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientNewLoginKey)
}

::google::protobuf::uint8* CMsgClientNewLoginKey::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientNewLoginKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 unique_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unique_id(), target);
  }

  // optional string login_key = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->login_key().data(), static_cast<int>(this->login_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientNewLoginKey.login_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->login_key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientNewLoginKey)
  return target;
}

size_t CMsgClientNewLoginKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientNewLoginKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string login_key = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->login_key());
    }

    // optional uint32 unique_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unique_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientNewLoginKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientNewLoginKey)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientNewLoginKey* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientNewLoginKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientNewLoginKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientNewLoginKey)
    MergeFrom(*source);
  }
}

void CMsgClientNewLoginKey::MergeFrom(const CMsgClientNewLoginKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientNewLoginKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      login_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.login_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      unique_id_ = from.unique_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientNewLoginKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientNewLoginKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientNewLoginKey::CopyFrom(const CMsgClientNewLoginKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientNewLoginKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientNewLoginKey::IsInitialized() const {
  return true;
}

void CMsgClientNewLoginKey::Swap(CMsgClientNewLoginKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientNewLoginKey::InternalSwap(CMsgClientNewLoginKey* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  login_key_.Swap(&other->login_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(unique_id_, other->unique_id_);
}

::google::protobuf::Metadata CMsgClientNewLoginKey::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_5flogin_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_5flogin_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientNewLoginKeyAccepted::InitAsDefaultInstance() {
}
class CMsgClientNewLoginKeyAccepted::HasBitSetters {
 public:
  static void set_has_unique_id(CMsgClientNewLoginKeyAccepted* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientNewLoginKeyAccepted::kUniqueIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientNewLoginKeyAccepted::CMsgClientNewLoginKeyAccepted()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientNewLoginKeyAccepted)
}
CMsgClientNewLoginKeyAccepted::CMsgClientNewLoginKeyAccepted(const CMsgClientNewLoginKeyAccepted& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  unique_id_ = from.unique_id_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientNewLoginKeyAccepted)
}

void CMsgClientNewLoginKeyAccepted::SharedCtor() {
  unique_id_ = 0u;
}

CMsgClientNewLoginKeyAccepted::~CMsgClientNewLoginKeyAccepted() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientNewLoginKeyAccepted)
  SharedDtor();
}

void CMsgClientNewLoginKeyAccepted::SharedDtor() {
}

void CMsgClientNewLoginKeyAccepted::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientNewLoginKeyAccepted& CMsgClientNewLoginKeyAccepted::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientNewLoginKeyAccepted_steammessages_5fclientserver_5flogin_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientNewLoginKeyAccepted::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientNewLoginKeyAccepted)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unique_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientNewLoginKeyAccepted::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientNewLoginKeyAccepted*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 unique_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_unique_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientNewLoginKeyAccepted::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientNewLoginKeyAccepted)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 unique_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_unique_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unique_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientNewLoginKeyAccepted)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientNewLoginKeyAccepted)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientNewLoginKeyAccepted::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientNewLoginKeyAccepted)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 unique_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unique_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientNewLoginKeyAccepted)
}

::google::protobuf::uint8* CMsgClientNewLoginKeyAccepted::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientNewLoginKeyAccepted)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 unique_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unique_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientNewLoginKeyAccepted)
  return target;
}

size_t CMsgClientNewLoginKeyAccepted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientNewLoginKeyAccepted)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 unique_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->unique_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientNewLoginKeyAccepted::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientNewLoginKeyAccepted)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientNewLoginKeyAccepted* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientNewLoginKeyAccepted>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientNewLoginKeyAccepted)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientNewLoginKeyAccepted)
    MergeFrom(*source);
  }
}

void CMsgClientNewLoginKeyAccepted::MergeFrom(const CMsgClientNewLoginKeyAccepted& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientNewLoginKeyAccepted)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_unique_id()) {
    set_unique_id(from.unique_id());
  }
}

void CMsgClientNewLoginKeyAccepted::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientNewLoginKeyAccepted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientNewLoginKeyAccepted::CopyFrom(const CMsgClientNewLoginKeyAccepted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientNewLoginKeyAccepted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientNewLoginKeyAccepted::IsInitialized() const {
  return true;
}

void CMsgClientNewLoginKeyAccepted::Swap(CMsgClientNewLoginKeyAccepted* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientNewLoginKeyAccepted::InternalSwap(CMsgClientNewLoginKeyAccepted* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(unique_id_, other->unique_id_);
}

::google::protobuf::Metadata CMsgClientNewLoginKeyAccepted::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_5flogin_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_5flogin_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientAccountInfo::InitAsDefaultInstance() {
}
class CMsgClientAccountInfo::HasBitSetters {
 public:
  static void set_has_persona_name(CMsgClientAccountInfo* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_ip_country(CMsgClientAccountInfo* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_count_authed_computers(CMsgClientAccountInfo* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_account_flags(CMsgClientAccountInfo* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_facebook_id(CMsgClientAccountInfo* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_facebook_name(CMsgClientAccountInfo* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_steamguard_notify_newmachines(CMsgClientAccountInfo* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_steamguard_machine_name_user_chosen(CMsgClientAccountInfo* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_is_phone_verified(CMsgClientAccountInfo* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_two_factor_state(CMsgClientAccountInfo* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_is_phone_identifying(CMsgClientAccountInfo* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_is_phone_needing_reverify(CMsgClientAccountInfo* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientAccountInfo::kPersonaNameFieldNumber;
const int CMsgClientAccountInfo::kIpCountryFieldNumber;
const int CMsgClientAccountInfo::kCountAuthedComputersFieldNumber;
const int CMsgClientAccountInfo::kAccountFlagsFieldNumber;
const int CMsgClientAccountInfo::kFacebookIdFieldNumber;
const int CMsgClientAccountInfo::kFacebookNameFieldNumber;
const int CMsgClientAccountInfo::kSteamguardNotifyNewmachinesFieldNumber;
const int CMsgClientAccountInfo::kSteamguardMachineNameUserChosenFieldNumber;
const int CMsgClientAccountInfo::kIsPhoneVerifiedFieldNumber;
const int CMsgClientAccountInfo::kTwoFactorStateFieldNumber;
const int CMsgClientAccountInfo::kIsPhoneIdentifyingFieldNumber;
const int CMsgClientAccountInfo::kIsPhoneNeedingReverifyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientAccountInfo::CMsgClientAccountInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientAccountInfo)
}
CMsgClientAccountInfo::CMsgClientAccountInfo(const CMsgClientAccountInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  persona_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_persona_name()) {
    persona_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_);
  }
  ip_country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ip_country()) {
    ip_country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_country_);
  }
  facebook_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_facebook_name()) {
    facebook_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.facebook_name_);
  }
  steamguard_machine_name_user_chosen_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_steamguard_machine_name_user_chosen()) {
    steamguard_machine_name_user_chosen_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.steamguard_machine_name_user_chosen_);
  }
  ::memcpy(&count_authed_computers_, &from.count_authed_computers_,
    static_cast<size_t>(reinterpret_cast<char*>(&two_factor_state_) -
    reinterpret_cast<char*>(&count_authed_computers_)) + sizeof(two_factor_state_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientAccountInfo)
}

void CMsgClientAccountInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientAccountInfo_steammessages_5fclientserver_5flogin_2eproto.base);
  persona_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  facebook_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  steamguard_machine_name_user_chosen_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&count_authed_computers_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&two_factor_state_) -
      reinterpret_cast<char*>(&count_authed_computers_)) + sizeof(two_factor_state_));
}

CMsgClientAccountInfo::~CMsgClientAccountInfo() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientAccountInfo)
  SharedDtor();
}

void CMsgClientAccountInfo::SharedDtor() {
  persona_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_country_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  facebook_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  steamguard_machine_name_user_chosen_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientAccountInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientAccountInfo& CMsgClientAccountInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientAccountInfo_steammessages_5fclientserver_5flogin_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientAccountInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientAccountInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      persona_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      ip_country_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      facebook_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      steamguard_machine_name_user_chosen_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&count_authed_computers_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steamguard_notify_newmachines_) -
        reinterpret_cast<char*>(&count_authed_computers_)) + sizeof(steamguard_notify_newmachines_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&is_phone_verified_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&two_factor_state_) -
        reinterpret_cast<char*>(&is_phone_verified_)) + sizeof(two_factor_state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientAccountInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientAccountInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string persona_name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientAccountInfo.persona_name");
        object = msg->mutable_persona_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string ip_country = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientAccountInfo.ip_country");
        object = msg->mutable_ip_country();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional int32 count_authed_computers = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_count_authed_computers(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 account_flags = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_account_flags(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 facebook_id = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_facebook_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string facebook_name = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientAccountInfo.facebook_name");
        object = msg->mutable_facebook_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool steamguard_notify_newmachines = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_steamguard_notify_newmachines(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string steamguard_machine_name_user_chosen = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 122) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientAccountInfo.steamguard_machine_name_user_chosen");
        object = msg->mutable_steamguard_machine_name_user_chosen();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool is_phone_verified = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_is_phone_verified(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 two_factor_state = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_two_factor_state(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool is_phone_identifying = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        msg->set_is_phone_identifying(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool is_phone_needing_reverify = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        msg->set_is_phone_needing_reverify(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientAccountInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientAccountInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string persona_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_persona_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->persona_name().data(), static_cast<int>(this->persona_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientAccountInfo.persona_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ip_country = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip_country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip_country().data(), static_cast<int>(this->ip_country().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientAccountInfo.ip_country");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 count_authed_computers = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_count_authed_computers(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_authed_computers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 account_flags = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_account_flags(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 facebook_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_facebook_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &facebook_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string facebook_name = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_facebook_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->facebook_name().data(), static_cast<int>(this->facebook_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientAccountInfo.facebook_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool steamguard_notify_newmachines = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {
          HasBitSetters::set_has_steamguard_notify_newmachines(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &steamguard_notify_newmachines_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string steamguard_machine_name_user_chosen = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (122 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_steamguard_machine_name_user_chosen()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->steamguard_machine_name_user_chosen().data(), static_cast<int>(this->steamguard_machine_name_user_chosen().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientAccountInfo.steamguard_machine_name_user_chosen");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_phone_verified = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (128 & 0xFF)) {
          HasBitSetters::set_has_is_phone_verified(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_phone_verified_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 two_factor_state = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (136 & 0xFF)) {
          HasBitSetters::set_has_two_factor_state(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &two_factor_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_phone_identifying = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (144 & 0xFF)) {
          HasBitSetters::set_has_is_phone_identifying(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_phone_identifying_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_phone_needing_reverify = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (152 & 0xFF)) {
          HasBitSetters::set_has_is_phone_needing_reverify(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_phone_needing_reverify_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientAccountInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientAccountInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientAccountInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientAccountInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string persona_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), static_cast<int>(this->persona_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientAccountInfo.persona_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->persona_name(), output);
  }

  // optional string ip_country = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip_country().data(), static_cast<int>(this->ip_country().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientAccountInfo.ip_country");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ip_country(), output);
  }

  // optional int32 count_authed_computers = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->count_authed_computers(), output);
  }

  // optional uint32 account_flags = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->account_flags(), output);
  }

  // optional uint64 facebook_id = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->facebook_id(), output);
  }

  // optional string facebook_name = 9;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->facebook_name().data(), static_cast<int>(this->facebook_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientAccountInfo.facebook_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->facebook_name(), output);
  }

  // optional bool steamguard_notify_newmachines = 14;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->steamguard_notify_newmachines(), output);
  }

  // optional string steamguard_machine_name_user_chosen = 15;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->steamguard_machine_name_user_chosen().data(), static_cast<int>(this->steamguard_machine_name_user_chosen().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientAccountInfo.steamguard_machine_name_user_chosen");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->steamguard_machine_name_user_chosen(), output);
  }

  // optional bool is_phone_verified = 16;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->is_phone_verified(), output);
  }

  // optional uint32 two_factor_state = 17;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->two_factor_state(), output);
  }

  // optional bool is_phone_identifying = 18;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->is_phone_identifying(), output);
  }

  // optional bool is_phone_needing_reverify = 19;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->is_phone_needing_reverify(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientAccountInfo)
}

::google::protobuf::uint8* CMsgClientAccountInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientAccountInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string persona_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), static_cast<int>(this->persona_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientAccountInfo.persona_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->persona_name(), target);
  }

  // optional string ip_country = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip_country().data(), static_cast<int>(this->ip_country().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientAccountInfo.ip_country");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip_country(), target);
  }

  // optional int32 count_authed_computers = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->count_authed_computers(), target);
  }

  // optional uint32 account_flags = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->account_flags(), target);
  }

  // optional uint64 facebook_id = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->facebook_id(), target);
  }

  // optional string facebook_name = 9;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->facebook_name().data(), static_cast<int>(this->facebook_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientAccountInfo.facebook_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->facebook_name(), target);
  }

  // optional bool steamguard_notify_newmachines = 14;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->steamguard_notify_newmachines(), target);
  }

  // optional string steamguard_machine_name_user_chosen = 15;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->steamguard_machine_name_user_chosen().data(), static_cast<int>(this->steamguard_machine_name_user_chosen().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientAccountInfo.steamguard_machine_name_user_chosen");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->steamguard_machine_name_user_chosen(), target);
  }

  // optional bool is_phone_verified = 16;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->is_phone_verified(), target);
  }

  // optional uint32 two_factor_state = 17;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->two_factor_state(), target);
  }

  // optional bool is_phone_identifying = 18;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->is_phone_identifying(), target);
  }

  // optional bool is_phone_needing_reverify = 19;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->is_phone_needing_reverify(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientAccountInfo)
  return target;
}

size_t CMsgClientAccountInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientAccountInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string persona_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->persona_name());
    }

    // optional string ip_country = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip_country());
    }

    // optional string facebook_name = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->facebook_name());
    }

    // optional string steamguard_machine_name_user_chosen = 15;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->steamguard_machine_name_user_chosen());
    }

    // optional int32 count_authed_computers = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count_authed_computers());
    }

    // optional uint32 account_flags = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_flags());
    }

    // optional uint64 facebook_id = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->facebook_id());
    }

    // optional bool steamguard_notify_newmachines = 14;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional bool is_phone_verified = 16;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional bool is_phone_identifying = 18;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional bool is_phone_needing_reverify = 19;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional uint32 two_factor_state = 17;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->two_factor_state());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientAccountInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientAccountInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientAccountInfo* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientAccountInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientAccountInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientAccountInfo)
    MergeFrom(*source);
  }
}

void CMsgClientAccountInfo::MergeFrom(const CMsgClientAccountInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientAccountInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      persona_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      ip_country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_country_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      facebook_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.facebook_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      steamguard_machine_name_user_chosen_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.steamguard_machine_name_user_chosen_);
    }
    if (cached_has_bits & 0x00000010u) {
      count_authed_computers_ = from.count_authed_computers_;
    }
    if (cached_has_bits & 0x00000020u) {
      account_flags_ = from.account_flags_;
    }
    if (cached_has_bits & 0x00000040u) {
      facebook_id_ = from.facebook_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      steamguard_notify_newmachines_ = from.steamguard_notify_newmachines_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      is_phone_verified_ = from.is_phone_verified_;
    }
    if (cached_has_bits & 0x00000200u) {
      is_phone_identifying_ = from.is_phone_identifying_;
    }
    if (cached_has_bits & 0x00000400u) {
      is_phone_needing_reverify_ = from.is_phone_needing_reverify_;
    }
    if (cached_has_bits & 0x00000800u) {
      two_factor_state_ = from.two_factor_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientAccountInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientAccountInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAccountInfo::CopyFrom(const CMsgClientAccountInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientAccountInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAccountInfo::IsInitialized() const {
  return true;
}

void CMsgClientAccountInfo::Swap(CMsgClientAccountInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientAccountInfo::InternalSwap(CMsgClientAccountInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  persona_name_.Swap(&other->persona_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ip_country_.Swap(&other->ip_country_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  facebook_name_.Swap(&other->facebook_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  steamguard_machine_name_user_chosen_.Swap(&other->steamguard_machine_name_user_chosen_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(count_authed_computers_, other->count_authed_computers_);
  swap(account_flags_, other->account_flags_);
  swap(facebook_id_, other->facebook_id_);
  swap(steamguard_notify_newmachines_, other->steamguard_notify_newmachines_);
  swap(is_phone_verified_, other->is_phone_verified_);
  swap(is_phone_identifying_, other->is_phone_identifying_);
  swap(is_phone_needing_reverify_, other->is_phone_needing_reverify_);
  swap(two_factor_state_, other->two_factor_state_);
}

::google::protobuf::Metadata CMsgClientAccountInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_5flogin_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_5flogin_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace steam
}  // namespace proto
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientHeartBeat* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientHeartBeat >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientHeartBeat >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientServerTimestampRequest* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientServerTimestampRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientServerTimestampRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientServerTimestampResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientServerTimestampResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientServerTimestampResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientLogon* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientLogon >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientLogon >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientLogonResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientLogonResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientLogonResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientRequestWebAPIAuthenticateUserNonce* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientRequestWebAPIAuthenticateUserNonce >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientRequestWebAPIAuthenticateUserNonce >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientRequestWebAPIAuthenticateUserNonceResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientRequestWebAPIAuthenticateUserNonceResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientRequestWebAPIAuthenticateUserNonceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientLogOff* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientLogOff >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientLogOff >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientLoggedOff* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientLoggedOff >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientLoggedOff >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientNewLoginKey* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientNewLoginKey >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientNewLoginKey >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientNewLoginKeyAccepted* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientNewLoginKeyAccepted >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientNewLoginKeyAccepted >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientAccountInfo* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientAccountInfo >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientAccountInfo >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
