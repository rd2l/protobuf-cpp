// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_broadcast.steamclient.proto

#include "steammessages_broadcast.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fbroadcast_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_GetBroadcastChatUserNames_Response_PersonaName_steammessages_5fbroadcast_2esteamclient_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fbroadcast_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_WebRTC_Candidate_steammessages_5fbroadcast_2esteamclient_2eproto;
namespace proto {
namespace steam {
class CBroadcast_BeginBroadcastSession_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_BeginBroadcastSession_Request> _instance;
} _CBroadcast_BeginBroadcastSession_Request_default_instance_;
class CBroadcast_BeginBroadcastSession_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_BeginBroadcastSession_Response> _instance;
} _CBroadcast_BeginBroadcastSession_Response_default_instance_;
class CBroadcast_EndBroadcastSession_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_EndBroadcastSession_Request> _instance;
} _CBroadcast_EndBroadcastSession_Request_default_instance_;
class CBroadcast_EndBroadcastSession_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_EndBroadcastSession_Response> _instance;
} _CBroadcast_EndBroadcastSession_Response_default_instance_;
class CBroadcast_StartBroadcastUpload_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_StartBroadcastUpload_Request> _instance;
} _CBroadcast_StartBroadcastUpload_Request_default_instance_;
class CBroadcast_StartBroadcastUpload_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_StartBroadcastUpload_Response> _instance;
} _CBroadcast_StartBroadcastUpload_Response_default_instance_;
class CBroadcast_NotifyBroadcastUploadStop_NotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_NotifyBroadcastUploadStop_Notification> _instance;
} _CBroadcast_NotifyBroadcastUploadStop_Notification_default_instance_;
class CBroadcast_WatchBroadcast_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_WatchBroadcast_Request> _instance;
} _CBroadcast_WatchBroadcast_Request_default_instance_;
class CBroadcast_WatchBroadcast_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_WatchBroadcast_Response> _instance;
} _CBroadcast_WatchBroadcast_Response_default_instance_;
class CBroadcast_HeartbeatBroadcast_NotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_HeartbeatBroadcast_Notification> _instance;
} _CBroadcast_HeartbeatBroadcast_Notification_default_instance_;
class CBroadcast_StopWatchingBroadcast_NotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_StopWatchingBroadcast_Notification> _instance;
} _CBroadcast_StopWatchingBroadcast_Notification_default_instance_;
class CBroadcast_GetBroadcastStatus_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_GetBroadcastStatus_Request> _instance;
} _CBroadcast_GetBroadcastStatus_Request_default_instance_;
class CBroadcast_GetBroadcastStatus_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_GetBroadcastStatus_Response> _instance;
} _CBroadcast_GetBroadcastStatus_Response_default_instance_;
class CBroadcast_GetBroadcastThumbnail_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_GetBroadcastThumbnail_Request> _instance;
} _CBroadcast_GetBroadcastThumbnail_Request_default_instance_;
class CBroadcast_GetBroadcastThumbnail_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_GetBroadcastThumbnail_Response> _instance;
} _CBroadcast_GetBroadcastThumbnail_Response_default_instance_;
class CBroadcast_InviteToBroadcast_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_InviteToBroadcast_Request> _instance;
} _CBroadcast_InviteToBroadcast_Request_default_instance_;
class CBroadcast_InviteToBroadcast_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_InviteToBroadcast_Response> _instance;
} _CBroadcast_InviteToBroadcast_Response_default_instance_;
class CBroadcast_SendBroadcastStateToServer_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_SendBroadcastStateToServer_Request> _instance;
} _CBroadcast_SendBroadcastStateToServer_Request_default_instance_;
class CBroadcast_SendBroadcastStateToServer_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_SendBroadcastStateToServer_Response> _instance;
} _CBroadcast_SendBroadcastStateToServer_Response_default_instance_;
class CBroadcast_NotifyBroadcastSessionHeartbeat_NotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_NotifyBroadcastSessionHeartbeat_Notification> _instance;
} _CBroadcast_NotifyBroadcastSessionHeartbeat_Notification_default_instance_;
class CBroadcast_GetBroadcastChatInfo_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_GetBroadcastChatInfo_Request> _instance;
} _CBroadcast_GetBroadcastChatInfo_Request_default_instance_;
class CBroadcast_GetBroadcastChatInfo_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_GetBroadcastChatInfo_Response> _instance;
} _CBroadcast_GetBroadcastChatInfo_Response_default_instance_;
class CBroadcast_PostChatMessage_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_PostChatMessage_Request> _instance;
} _CBroadcast_PostChatMessage_Request_default_instance_;
class CBroadcast_PostChatMessage_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_PostChatMessage_Response> _instance;
} _CBroadcast_PostChatMessage_Response_default_instance_;
class CBroadcast_MuteBroadcastChatUser_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_MuteBroadcastChatUser_Request> _instance;
} _CBroadcast_MuteBroadcastChatUser_Request_default_instance_;
class CBroadcast_MuteBroadcastChatUser_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_MuteBroadcastChatUser_Response> _instance;
} _CBroadcast_MuteBroadcastChatUser_Response_default_instance_;
class CBroadcast_RemoveUserChatText_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_RemoveUserChatText_Request> _instance;
} _CBroadcast_RemoveUserChatText_Request_default_instance_;
class CBroadcast_RemoveUserChatText_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_RemoveUserChatText_Response> _instance;
} _CBroadcast_RemoveUserChatText_Response_default_instance_;
class CBroadcast_GetBroadcastChatUserNames_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_GetBroadcastChatUserNames_Request> _instance;
} _CBroadcast_GetBroadcastChatUserNames_Request_default_instance_;
class CBroadcast_GetBroadcastChatUserNames_Response_PersonaNameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_GetBroadcastChatUserNames_Response_PersonaName> _instance;
} _CBroadcast_GetBroadcastChatUserNames_Response_PersonaName_default_instance_;
class CBroadcast_GetBroadcastChatUserNames_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_GetBroadcastChatUserNames_Response> _instance;
} _CBroadcast_GetBroadcastChatUserNames_Response_default_instance_;
class CBroadcast_SetRTMPInfo_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_SetRTMPInfo_Request> _instance;
} _CBroadcast_SetRTMPInfo_Request_default_instance_;
class CBroadcast_SetRTMPInfo_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_SetRTMPInfo_Response> _instance;
} _CBroadcast_SetRTMPInfo_Response_default_instance_;
class CBroadcast_GetRTMPInfo_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_GetRTMPInfo_Request> _instance;
} _CBroadcast_GetRTMPInfo_Request_default_instance_;
class CBroadcast_GetRTMPInfo_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_GetRTMPInfo_Response> _instance;
} _CBroadcast_GetRTMPInfo_Response_default_instance_;
class CBroadcast_WebRTCHaveTURNServer_NotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_WebRTCHaveTURNServer_Notification> _instance;
} _CBroadcast_WebRTCHaveTURNServer_Notification_default_instance_;
class CBroadcast_WebRTCStartResult_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_WebRTCStartResult_Request> _instance;
} _CBroadcast_WebRTCStartResult_Request_default_instance_;
class CBroadcast_WebRTCStartResult_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_WebRTCStartResult_Response> _instance;
} _CBroadcast_WebRTCStartResult_Response_default_instance_;
class CBroadcast_WebRTCStopped_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_WebRTCStopped_Request> _instance;
} _CBroadcast_WebRTCStopped_Request_default_instance_;
class CBroadcast_WebRTCStopped_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_WebRTCStopped_Response> _instance;
} _CBroadcast_WebRTCStopped_Response_default_instance_;
class CBroadcast_WebRTCSetAnswer_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_WebRTCSetAnswer_Request> _instance;
} _CBroadcast_WebRTCSetAnswer_Request_default_instance_;
class CBroadcast_WebRTCSetAnswer_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_WebRTCSetAnswer_Response> _instance;
} _CBroadcast_WebRTCSetAnswer_Response_default_instance_;
class CBroadcast_WebRTCLookupTURNServer_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_WebRTCLookupTURNServer_Request> _instance;
} _CBroadcast_WebRTCLookupTURNServer_Request_default_instance_;
class CBroadcast_WebRTCLookupTURNServer_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_WebRTCLookupTURNServer_Response> _instance;
} _CBroadcast_WebRTCLookupTURNServer_Response_default_instance_;
class CBroadcast_WebRTC_CandidateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_WebRTC_Candidate> _instance;
} _CBroadcast_WebRTC_Candidate_default_instance_;
class CBroadcast_WebRTCAddHostCandidate_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_WebRTCAddHostCandidate_Request> _instance;
} _CBroadcast_WebRTCAddHostCandidate_Request_default_instance_;
class CBroadcast_WebRTCAddHostCandidate_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_WebRTCAddHostCandidate_Response> _instance;
} _CBroadcast_WebRTCAddHostCandidate_Response_default_instance_;
class CBroadcast_WebRTCAddViewerCandidate_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_WebRTCAddViewerCandidate_Request> _instance;
} _CBroadcast_WebRTCAddViewerCandidate_Request_default_instance_;
class CBroadcast_WebRTCAddViewerCandidate_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_WebRTCAddViewerCandidate_Response> _instance;
} _CBroadcast_WebRTCAddViewerCandidate_Response_default_instance_;
class CBroadcast_WebRTCGetHostCandidates_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_WebRTCGetHostCandidates_Request> _instance;
} _CBroadcast_WebRTCGetHostCandidates_Request_default_instance_;
class CBroadcast_WebRTCGetHostCandidates_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_WebRTCGetHostCandidates_Response> _instance;
} _CBroadcast_WebRTCGetHostCandidates_Response_default_instance_;
class CBroadcast_BroadcastViewerState_NotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_BroadcastViewerState_Notification> _instance;
} _CBroadcast_BroadcastViewerState_Notification_default_instance_;
class CBroadcast_WaitingBroadcastViewer_NotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_WaitingBroadcastViewer_Notification> _instance;
} _CBroadcast_WaitingBroadcastViewer_Notification_default_instance_;
class CBroadcast_StopBroadcastUpload_NotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_StopBroadcastUpload_Notification> _instance;
} _CBroadcast_StopBroadcastUpload_Notification_default_instance_;
class CBroadcast_SessionClosed_NotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_SessionClosed_Notification> _instance;
} _CBroadcast_SessionClosed_Notification_default_instance_;
class CBroadcast_ViewerBroadcastInvite_NotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_ViewerBroadcastInvite_Notification> _instance;
} _CBroadcast_ViewerBroadcastInvite_Notification_default_instance_;
class CBroadcast_BroadcastStatus_NotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_BroadcastStatus_Notification> _instance;
} _CBroadcast_BroadcastStatus_Notification_default_instance_;
class CBroadcast_SendThumbnailToRelay_NotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_SendThumbnailToRelay_Notification> _instance;
} _CBroadcast_SendThumbnailToRelay_Notification_default_instance_;
class CBroadcast_WebRTCNeedTURNServer_NotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_WebRTCNeedTURNServer_Notification> _instance;
} _CBroadcast_WebRTCNeedTURNServer_Notification_default_instance_;
class CBroadcast_WebRTCStart_NotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_WebRTCStart_Notification> _instance;
} _CBroadcast_WebRTCStart_Notification_default_instance_;
class CBroadcast_WebRTCSetAnswer_NotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_WebRTCSetAnswer_Notification> _instance;
} _CBroadcast_WebRTCSetAnswer_Notification_default_instance_;
class CBroadcast_WebRTCAddViewerCandidate_NotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_WebRTCAddViewerCandidate_Notification> _instance;
} _CBroadcast_WebRTCAddViewerCandidate_Notification_default_instance_;
}  // namespace steam
}  // namespace proto
static void InitDefaultsCBroadcast_BeginBroadcastSession_Request_steammessages_5fbroadcast_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CBroadcast_BeginBroadcastSession_Request_default_instance_;
    new (ptr) ::proto::steam::CBroadcast_BeginBroadcastSession_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CBroadcast_BeginBroadcastSession_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_BeginBroadcastSession_Request_steammessages_5fbroadcast_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_BeginBroadcastSession_Request_steammessages_5fbroadcast_2esteamclient_2eproto}, {}};

static void InitDefaultsCBroadcast_BeginBroadcastSession_Response_steammessages_5fbroadcast_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CBroadcast_BeginBroadcastSession_Response_default_instance_;
    new (ptr) ::proto::steam::CBroadcast_BeginBroadcastSession_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CBroadcast_BeginBroadcastSession_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_BeginBroadcastSession_Response_steammessages_5fbroadcast_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_BeginBroadcastSession_Response_steammessages_5fbroadcast_2esteamclient_2eproto}, {}};

static void InitDefaultsCBroadcast_EndBroadcastSession_Request_steammessages_5fbroadcast_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CBroadcast_EndBroadcastSession_Request_default_instance_;
    new (ptr) ::proto::steam::CBroadcast_EndBroadcastSession_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CBroadcast_EndBroadcastSession_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_EndBroadcastSession_Request_steammessages_5fbroadcast_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_EndBroadcastSession_Request_steammessages_5fbroadcast_2esteamclient_2eproto}, {}};

static void InitDefaultsCBroadcast_EndBroadcastSession_Response_steammessages_5fbroadcast_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CBroadcast_EndBroadcastSession_Response_default_instance_;
    new (ptr) ::proto::steam::CBroadcast_EndBroadcastSession_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CBroadcast_EndBroadcastSession_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_EndBroadcastSession_Response_steammessages_5fbroadcast_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_EndBroadcastSession_Response_steammessages_5fbroadcast_2esteamclient_2eproto}, {}};

static void InitDefaultsCBroadcast_StartBroadcastUpload_Request_steammessages_5fbroadcast_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CBroadcast_StartBroadcastUpload_Request_default_instance_;
    new (ptr) ::proto::steam::CBroadcast_StartBroadcastUpload_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CBroadcast_StartBroadcastUpload_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_StartBroadcastUpload_Request_steammessages_5fbroadcast_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_StartBroadcastUpload_Request_steammessages_5fbroadcast_2esteamclient_2eproto}, {}};

static void InitDefaultsCBroadcast_StartBroadcastUpload_Response_steammessages_5fbroadcast_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CBroadcast_StartBroadcastUpload_Response_default_instance_;
    new (ptr) ::proto::steam::CBroadcast_StartBroadcastUpload_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CBroadcast_StartBroadcastUpload_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_StartBroadcastUpload_Response_steammessages_5fbroadcast_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_StartBroadcastUpload_Response_steammessages_5fbroadcast_2esteamclient_2eproto}, {}};

static void InitDefaultsCBroadcast_NotifyBroadcastUploadStop_Notification_steammessages_5fbroadcast_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CBroadcast_NotifyBroadcastUploadStop_Notification_default_instance_;
    new (ptr) ::proto::steam::CBroadcast_NotifyBroadcastUploadStop_Notification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CBroadcast_NotifyBroadcastUploadStop_Notification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_NotifyBroadcastUploadStop_Notification_steammessages_5fbroadcast_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_NotifyBroadcastUploadStop_Notification_steammessages_5fbroadcast_2esteamclient_2eproto}, {}};

static void InitDefaultsCBroadcast_WatchBroadcast_Request_steammessages_5fbroadcast_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CBroadcast_WatchBroadcast_Request_default_instance_;
    new (ptr) ::proto::steam::CBroadcast_WatchBroadcast_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CBroadcast_WatchBroadcast_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_WatchBroadcast_Request_steammessages_5fbroadcast_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_WatchBroadcast_Request_steammessages_5fbroadcast_2esteamclient_2eproto}, {}};

static void InitDefaultsCBroadcast_WatchBroadcast_Response_steammessages_5fbroadcast_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CBroadcast_WatchBroadcast_Response_default_instance_;
    new (ptr) ::proto::steam::CBroadcast_WatchBroadcast_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CBroadcast_WatchBroadcast_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_WatchBroadcast_Response_steammessages_5fbroadcast_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_WatchBroadcast_Response_steammessages_5fbroadcast_2esteamclient_2eproto}, {}};

static void InitDefaultsCBroadcast_HeartbeatBroadcast_Notification_steammessages_5fbroadcast_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CBroadcast_HeartbeatBroadcast_Notification_default_instance_;
    new (ptr) ::proto::steam::CBroadcast_HeartbeatBroadcast_Notification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CBroadcast_HeartbeatBroadcast_Notification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_HeartbeatBroadcast_Notification_steammessages_5fbroadcast_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_HeartbeatBroadcast_Notification_steammessages_5fbroadcast_2esteamclient_2eproto}, {}};

static void InitDefaultsCBroadcast_StopWatchingBroadcast_Notification_steammessages_5fbroadcast_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CBroadcast_StopWatchingBroadcast_Notification_default_instance_;
    new (ptr) ::proto::steam::CBroadcast_StopWatchingBroadcast_Notification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CBroadcast_StopWatchingBroadcast_Notification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_StopWatchingBroadcast_Notification_steammessages_5fbroadcast_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_StopWatchingBroadcast_Notification_steammessages_5fbroadcast_2esteamclient_2eproto}, {}};

static void InitDefaultsCBroadcast_GetBroadcastStatus_Request_steammessages_5fbroadcast_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CBroadcast_GetBroadcastStatus_Request_default_instance_;
    new (ptr) ::proto::steam::CBroadcast_GetBroadcastStatus_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CBroadcast_GetBroadcastStatus_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_GetBroadcastStatus_Request_steammessages_5fbroadcast_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_GetBroadcastStatus_Request_steammessages_5fbroadcast_2esteamclient_2eproto}, {}};

static void InitDefaultsCBroadcast_GetBroadcastStatus_Response_steammessages_5fbroadcast_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CBroadcast_GetBroadcastStatus_Response_default_instance_;
    new (ptr) ::proto::steam::CBroadcast_GetBroadcastStatus_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CBroadcast_GetBroadcastStatus_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_GetBroadcastStatus_Response_steammessages_5fbroadcast_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_GetBroadcastStatus_Response_steammessages_5fbroadcast_2esteamclient_2eproto}, {}};

static void InitDefaultsCBroadcast_GetBroadcastThumbnail_Request_steammessages_5fbroadcast_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CBroadcast_GetBroadcastThumbnail_Request_default_instance_;
    new (ptr) ::proto::steam::CBroadcast_GetBroadcastThumbnail_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CBroadcast_GetBroadcastThumbnail_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_GetBroadcastThumbnail_Request_steammessages_5fbroadcast_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_GetBroadcastThumbnail_Request_steammessages_5fbroadcast_2esteamclient_2eproto}, {}};

static void InitDefaultsCBroadcast_GetBroadcastThumbnail_Response_steammessages_5fbroadcast_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CBroadcast_GetBroadcastThumbnail_Response_default_instance_;
    new (ptr) ::proto::steam::CBroadcast_GetBroadcastThumbnail_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CBroadcast_GetBroadcastThumbnail_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_GetBroadcastThumbnail_Response_steammessages_5fbroadcast_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_GetBroadcastThumbnail_Response_steammessages_5fbroadcast_2esteamclient_2eproto}, {}};

static void InitDefaultsCBroadcast_InviteToBroadcast_Request_steammessages_5fbroadcast_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CBroadcast_InviteToBroadcast_Request_default_instance_;
    new (ptr) ::proto::steam::CBroadcast_InviteToBroadcast_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CBroadcast_InviteToBroadcast_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_InviteToBroadcast_Request_steammessages_5fbroadcast_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_InviteToBroadcast_Request_steammessages_5fbroadcast_2esteamclient_2eproto}, {}};

static void InitDefaultsCBroadcast_InviteToBroadcast_Response_steammessages_5fbroadcast_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CBroadcast_InviteToBroadcast_Response_default_instance_;
    new (ptr) ::proto::steam::CBroadcast_InviteToBroadcast_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CBroadcast_InviteToBroadcast_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_InviteToBroadcast_Response_steammessages_5fbroadcast_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_InviteToBroadcast_Response_steammessages_5fbroadcast_2esteamclient_2eproto}, {}};

static void InitDefaultsCBroadcast_SendBroadcastStateToServer_Request_steammessages_5fbroadcast_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CBroadcast_SendBroadcastStateToServer_Request_default_instance_;
    new (ptr) ::proto::steam::CBroadcast_SendBroadcastStateToServer_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CBroadcast_SendBroadcastStateToServer_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_SendBroadcastStateToServer_Request_steammessages_5fbroadcast_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_SendBroadcastStateToServer_Request_steammessages_5fbroadcast_2esteamclient_2eproto}, {}};

static void InitDefaultsCBroadcast_SendBroadcastStateToServer_Response_steammessages_5fbroadcast_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CBroadcast_SendBroadcastStateToServer_Response_default_instance_;
    new (ptr) ::proto::steam::CBroadcast_SendBroadcastStateToServer_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CBroadcast_SendBroadcastStateToServer_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_SendBroadcastStateToServer_Response_steammessages_5fbroadcast_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_SendBroadcastStateToServer_Response_steammessages_5fbroadcast_2esteamclient_2eproto}, {}};

static void InitDefaultsCBroadcast_NotifyBroadcastSessionHeartbeat_Notification_steammessages_5fbroadcast_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CBroadcast_NotifyBroadcastSessionHeartbeat_Notification_default_instance_;
    new (ptr) ::proto::steam::CBroadcast_NotifyBroadcastSessionHeartbeat_Notification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_NotifyBroadcastSessionHeartbeat_Notification_steammessages_5fbroadcast_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_NotifyBroadcastSessionHeartbeat_Notification_steammessages_5fbroadcast_2esteamclient_2eproto}, {}};

static void InitDefaultsCBroadcast_GetBroadcastChatInfo_Request_steammessages_5fbroadcast_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CBroadcast_GetBroadcastChatInfo_Request_default_instance_;
    new (ptr) ::proto::steam::CBroadcast_GetBroadcastChatInfo_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CBroadcast_GetBroadcastChatInfo_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_GetBroadcastChatInfo_Request_steammessages_5fbroadcast_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_GetBroadcastChatInfo_Request_steammessages_5fbroadcast_2esteamclient_2eproto}, {}};

static void InitDefaultsCBroadcast_GetBroadcastChatInfo_Response_steammessages_5fbroadcast_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CBroadcast_GetBroadcastChatInfo_Response_default_instance_;
    new (ptr) ::proto::steam::CBroadcast_GetBroadcastChatInfo_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CBroadcast_GetBroadcastChatInfo_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_GetBroadcastChatInfo_Response_steammessages_5fbroadcast_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_GetBroadcastChatInfo_Response_steammessages_5fbroadcast_2esteamclient_2eproto}, {}};

static void InitDefaultsCBroadcast_PostChatMessage_Request_steammessages_5fbroadcast_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CBroadcast_PostChatMessage_Request_default_instance_;
    new (ptr) ::proto::steam::CBroadcast_PostChatMessage_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CBroadcast_PostChatMessage_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_PostChatMessage_Request_steammessages_5fbroadcast_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_PostChatMessage_Request_steammessages_5fbroadcast_2esteamclient_2eproto}, {}};

static void InitDefaultsCBroadcast_PostChatMessage_Response_steammessages_5fbroadcast_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CBroadcast_PostChatMessage_Response_default_instance_;
    new (ptr) ::proto::steam::CBroadcast_PostChatMessage_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CBroadcast_PostChatMessage_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_PostChatMessage_Response_steammessages_5fbroadcast_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_PostChatMessage_Response_steammessages_5fbroadcast_2esteamclient_2eproto}, {}};

static void InitDefaultsCBroadcast_MuteBroadcastChatUser_Request_steammessages_5fbroadcast_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CBroadcast_MuteBroadcastChatUser_Request_default_instance_;
    new (ptr) ::proto::steam::CBroadcast_MuteBroadcastChatUser_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CBroadcast_MuteBroadcastChatUser_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_MuteBroadcastChatUser_Request_steammessages_5fbroadcast_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_MuteBroadcastChatUser_Request_steammessages_5fbroadcast_2esteamclient_2eproto}, {}};

static void InitDefaultsCBroadcast_MuteBroadcastChatUser_Response_steammessages_5fbroadcast_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CBroadcast_MuteBroadcastChatUser_Response_default_instance_;
    new (ptr) ::proto::steam::CBroadcast_MuteBroadcastChatUser_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CBroadcast_MuteBroadcastChatUser_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_MuteBroadcastChatUser_Response_steammessages_5fbroadcast_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_MuteBroadcastChatUser_Response_steammessages_5fbroadcast_2esteamclient_2eproto}, {}};

static void InitDefaultsCBroadcast_RemoveUserChatText_Request_steammessages_5fbroadcast_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CBroadcast_RemoveUserChatText_Request_default_instance_;
    new (ptr) ::proto::steam::CBroadcast_RemoveUserChatText_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CBroadcast_RemoveUserChatText_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_RemoveUserChatText_Request_steammessages_5fbroadcast_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_RemoveUserChatText_Request_steammessages_5fbroadcast_2esteamclient_2eproto}, {}};

static void InitDefaultsCBroadcast_RemoveUserChatText_Response_steammessages_5fbroadcast_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CBroadcast_RemoveUserChatText_Response_default_instance_;
    new (ptr) ::proto::steam::CBroadcast_RemoveUserChatText_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CBroadcast_RemoveUserChatText_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_RemoveUserChatText_Response_steammessages_5fbroadcast_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_RemoveUserChatText_Response_steammessages_5fbroadcast_2esteamclient_2eproto}, {}};

static void InitDefaultsCBroadcast_GetBroadcastChatUserNames_Request_steammessages_5fbroadcast_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CBroadcast_GetBroadcastChatUserNames_Request_default_instance_;
    new (ptr) ::proto::steam::CBroadcast_GetBroadcastChatUserNames_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CBroadcast_GetBroadcastChatUserNames_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_GetBroadcastChatUserNames_Request_steammessages_5fbroadcast_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_GetBroadcastChatUserNames_Request_steammessages_5fbroadcast_2esteamclient_2eproto}, {}};

static void InitDefaultsCBroadcast_GetBroadcastChatUserNames_Response_PersonaName_steammessages_5fbroadcast_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CBroadcast_GetBroadcastChatUserNames_Response_PersonaName_default_instance_;
    new (ptr) ::proto::steam::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_GetBroadcastChatUserNames_Response_PersonaName_steammessages_5fbroadcast_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_GetBroadcastChatUserNames_Response_PersonaName_steammessages_5fbroadcast_2esteamclient_2eproto}, {}};

static void InitDefaultsCBroadcast_GetBroadcastChatUserNames_Response_steammessages_5fbroadcast_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CBroadcast_GetBroadcastChatUserNames_Response_default_instance_;
    new (ptr) ::proto::steam::CBroadcast_GetBroadcastChatUserNames_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CBroadcast_GetBroadcastChatUserNames_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CBroadcast_GetBroadcastChatUserNames_Response_steammessages_5fbroadcast_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCBroadcast_GetBroadcastChatUserNames_Response_steammessages_5fbroadcast_2esteamclient_2eproto}, {
      &scc_info_CBroadcast_GetBroadcastChatUserNames_Response_PersonaName_steammessages_5fbroadcast_2esteamclient_2eproto.base,}};

static void InitDefaultsCBroadcast_SetRTMPInfo_Request_steammessages_5fbroadcast_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CBroadcast_SetRTMPInfo_Request_default_instance_;
    new (ptr) ::proto::steam::CBroadcast_SetRTMPInfo_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CBroadcast_SetRTMPInfo_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_SetRTMPInfo_Request_steammessages_5fbroadcast_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_SetRTMPInfo_Request_steammessages_5fbroadcast_2esteamclient_2eproto}, {}};

static void InitDefaultsCBroadcast_SetRTMPInfo_Response_steammessages_5fbroadcast_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CBroadcast_SetRTMPInfo_Response_default_instance_;
    new (ptr) ::proto::steam::CBroadcast_SetRTMPInfo_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CBroadcast_SetRTMPInfo_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_SetRTMPInfo_Response_steammessages_5fbroadcast_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_SetRTMPInfo_Response_steammessages_5fbroadcast_2esteamclient_2eproto}, {}};

static void InitDefaultsCBroadcast_GetRTMPInfo_Request_steammessages_5fbroadcast_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CBroadcast_GetRTMPInfo_Request_default_instance_;
    new (ptr) ::proto::steam::CBroadcast_GetRTMPInfo_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CBroadcast_GetRTMPInfo_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_GetRTMPInfo_Request_steammessages_5fbroadcast_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_GetRTMPInfo_Request_steammessages_5fbroadcast_2esteamclient_2eproto}, {}};

static void InitDefaultsCBroadcast_GetRTMPInfo_Response_steammessages_5fbroadcast_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CBroadcast_GetRTMPInfo_Response_default_instance_;
    new (ptr) ::proto::steam::CBroadcast_GetRTMPInfo_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CBroadcast_GetRTMPInfo_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_GetRTMPInfo_Response_steammessages_5fbroadcast_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_GetRTMPInfo_Response_steammessages_5fbroadcast_2esteamclient_2eproto}, {}};

static void InitDefaultsCBroadcast_WebRTCHaveTURNServer_Notification_steammessages_5fbroadcast_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CBroadcast_WebRTCHaveTURNServer_Notification_default_instance_;
    new (ptr) ::proto::steam::CBroadcast_WebRTCHaveTURNServer_Notification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CBroadcast_WebRTCHaveTURNServer_Notification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_WebRTCHaveTURNServer_Notification_steammessages_5fbroadcast_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_WebRTCHaveTURNServer_Notification_steammessages_5fbroadcast_2esteamclient_2eproto}, {}};

static void InitDefaultsCBroadcast_WebRTCStartResult_Request_steammessages_5fbroadcast_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CBroadcast_WebRTCStartResult_Request_default_instance_;
    new (ptr) ::proto::steam::CBroadcast_WebRTCStartResult_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CBroadcast_WebRTCStartResult_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_WebRTCStartResult_Request_steammessages_5fbroadcast_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_WebRTCStartResult_Request_steammessages_5fbroadcast_2esteamclient_2eproto}, {}};

static void InitDefaultsCBroadcast_WebRTCStartResult_Response_steammessages_5fbroadcast_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CBroadcast_WebRTCStartResult_Response_default_instance_;
    new (ptr) ::proto::steam::CBroadcast_WebRTCStartResult_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CBroadcast_WebRTCStartResult_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_WebRTCStartResult_Response_steammessages_5fbroadcast_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_WebRTCStartResult_Response_steammessages_5fbroadcast_2esteamclient_2eproto}, {}};

static void InitDefaultsCBroadcast_WebRTCStopped_Request_steammessages_5fbroadcast_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CBroadcast_WebRTCStopped_Request_default_instance_;
    new (ptr) ::proto::steam::CBroadcast_WebRTCStopped_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CBroadcast_WebRTCStopped_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_WebRTCStopped_Request_steammessages_5fbroadcast_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_WebRTCStopped_Request_steammessages_5fbroadcast_2esteamclient_2eproto}, {}};

static void InitDefaultsCBroadcast_WebRTCStopped_Response_steammessages_5fbroadcast_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CBroadcast_WebRTCStopped_Response_default_instance_;
    new (ptr) ::proto::steam::CBroadcast_WebRTCStopped_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CBroadcast_WebRTCStopped_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_WebRTCStopped_Response_steammessages_5fbroadcast_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_WebRTCStopped_Response_steammessages_5fbroadcast_2esteamclient_2eproto}, {}};

static void InitDefaultsCBroadcast_WebRTCSetAnswer_Request_steammessages_5fbroadcast_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CBroadcast_WebRTCSetAnswer_Request_default_instance_;
    new (ptr) ::proto::steam::CBroadcast_WebRTCSetAnswer_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CBroadcast_WebRTCSetAnswer_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_WebRTCSetAnswer_Request_steammessages_5fbroadcast_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_WebRTCSetAnswer_Request_steammessages_5fbroadcast_2esteamclient_2eproto}, {}};

static void InitDefaultsCBroadcast_WebRTCSetAnswer_Response_steammessages_5fbroadcast_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CBroadcast_WebRTCSetAnswer_Response_default_instance_;
    new (ptr) ::proto::steam::CBroadcast_WebRTCSetAnswer_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CBroadcast_WebRTCSetAnswer_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_WebRTCSetAnswer_Response_steammessages_5fbroadcast_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_WebRTCSetAnswer_Response_steammessages_5fbroadcast_2esteamclient_2eproto}, {}};

static void InitDefaultsCBroadcast_WebRTCLookupTURNServer_Request_steammessages_5fbroadcast_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CBroadcast_WebRTCLookupTURNServer_Request_default_instance_;
    new (ptr) ::proto::steam::CBroadcast_WebRTCLookupTURNServer_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CBroadcast_WebRTCLookupTURNServer_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_WebRTCLookupTURNServer_Request_steammessages_5fbroadcast_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_WebRTCLookupTURNServer_Request_steammessages_5fbroadcast_2esteamclient_2eproto}, {}};

static void InitDefaultsCBroadcast_WebRTCLookupTURNServer_Response_steammessages_5fbroadcast_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CBroadcast_WebRTCLookupTURNServer_Response_default_instance_;
    new (ptr) ::proto::steam::CBroadcast_WebRTCLookupTURNServer_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CBroadcast_WebRTCLookupTURNServer_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_WebRTCLookupTURNServer_Response_steammessages_5fbroadcast_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_WebRTCLookupTURNServer_Response_steammessages_5fbroadcast_2esteamclient_2eproto}, {}};

static void InitDefaultsCBroadcast_WebRTC_Candidate_steammessages_5fbroadcast_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CBroadcast_WebRTC_Candidate_default_instance_;
    new (ptr) ::proto::steam::CBroadcast_WebRTC_Candidate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CBroadcast_WebRTC_Candidate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_WebRTC_Candidate_steammessages_5fbroadcast_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_WebRTC_Candidate_steammessages_5fbroadcast_2esteamclient_2eproto}, {}};

static void InitDefaultsCBroadcast_WebRTCAddHostCandidate_Request_steammessages_5fbroadcast_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CBroadcast_WebRTCAddHostCandidate_Request_default_instance_;
    new (ptr) ::proto::steam::CBroadcast_WebRTCAddHostCandidate_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CBroadcast_WebRTCAddHostCandidate_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CBroadcast_WebRTCAddHostCandidate_Request_steammessages_5fbroadcast_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCBroadcast_WebRTCAddHostCandidate_Request_steammessages_5fbroadcast_2esteamclient_2eproto}, {
      &scc_info_CBroadcast_WebRTC_Candidate_steammessages_5fbroadcast_2esteamclient_2eproto.base,}};

static void InitDefaultsCBroadcast_WebRTCAddHostCandidate_Response_steammessages_5fbroadcast_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CBroadcast_WebRTCAddHostCandidate_Response_default_instance_;
    new (ptr) ::proto::steam::CBroadcast_WebRTCAddHostCandidate_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CBroadcast_WebRTCAddHostCandidate_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_WebRTCAddHostCandidate_Response_steammessages_5fbroadcast_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_WebRTCAddHostCandidate_Response_steammessages_5fbroadcast_2esteamclient_2eproto}, {}};

static void InitDefaultsCBroadcast_WebRTCAddViewerCandidate_Request_steammessages_5fbroadcast_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CBroadcast_WebRTCAddViewerCandidate_Request_default_instance_;
    new (ptr) ::proto::steam::CBroadcast_WebRTCAddViewerCandidate_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CBroadcast_WebRTCAddViewerCandidate_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CBroadcast_WebRTCAddViewerCandidate_Request_steammessages_5fbroadcast_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCBroadcast_WebRTCAddViewerCandidate_Request_steammessages_5fbroadcast_2esteamclient_2eproto}, {
      &scc_info_CBroadcast_WebRTC_Candidate_steammessages_5fbroadcast_2esteamclient_2eproto.base,}};

static void InitDefaultsCBroadcast_WebRTCAddViewerCandidate_Response_steammessages_5fbroadcast_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CBroadcast_WebRTCAddViewerCandidate_Response_default_instance_;
    new (ptr) ::proto::steam::CBroadcast_WebRTCAddViewerCandidate_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CBroadcast_WebRTCAddViewerCandidate_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_WebRTCAddViewerCandidate_Response_steammessages_5fbroadcast_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_WebRTCAddViewerCandidate_Response_steammessages_5fbroadcast_2esteamclient_2eproto}, {}};

static void InitDefaultsCBroadcast_WebRTCGetHostCandidates_Request_steammessages_5fbroadcast_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CBroadcast_WebRTCGetHostCandidates_Request_default_instance_;
    new (ptr) ::proto::steam::CBroadcast_WebRTCGetHostCandidates_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CBroadcast_WebRTCGetHostCandidates_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_WebRTCGetHostCandidates_Request_steammessages_5fbroadcast_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_WebRTCGetHostCandidates_Request_steammessages_5fbroadcast_2esteamclient_2eproto}, {}};

static void InitDefaultsCBroadcast_WebRTCGetHostCandidates_Response_steammessages_5fbroadcast_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CBroadcast_WebRTCGetHostCandidates_Response_default_instance_;
    new (ptr) ::proto::steam::CBroadcast_WebRTCGetHostCandidates_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CBroadcast_WebRTCGetHostCandidates_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CBroadcast_WebRTCGetHostCandidates_Response_steammessages_5fbroadcast_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCBroadcast_WebRTCGetHostCandidates_Response_steammessages_5fbroadcast_2esteamclient_2eproto}, {
      &scc_info_CBroadcast_WebRTC_Candidate_steammessages_5fbroadcast_2esteamclient_2eproto.base,}};

static void InitDefaultsCBroadcast_BroadcastViewerState_Notification_steammessages_5fbroadcast_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CBroadcast_BroadcastViewerState_Notification_default_instance_;
    new (ptr) ::proto::steam::CBroadcast_BroadcastViewerState_Notification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CBroadcast_BroadcastViewerState_Notification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_BroadcastViewerState_Notification_steammessages_5fbroadcast_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_BroadcastViewerState_Notification_steammessages_5fbroadcast_2esteamclient_2eproto}, {}};

static void InitDefaultsCBroadcast_WaitingBroadcastViewer_Notification_steammessages_5fbroadcast_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CBroadcast_WaitingBroadcastViewer_Notification_default_instance_;
    new (ptr) ::proto::steam::CBroadcast_WaitingBroadcastViewer_Notification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CBroadcast_WaitingBroadcastViewer_Notification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_WaitingBroadcastViewer_Notification_steammessages_5fbroadcast_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_WaitingBroadcastViewer_Notification_steammessages_5fbroadcast_2esteamclient_2eproto}, {}};

static void InitDefaultsCBroadcast_StopBroadcastUpload_Notification_steammessages_5fbroadcast_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CBroadcast_StopBroadcastUpload_Notification_default_instance_;
    new (ptr) ::proto::steam::CBroadcast_StopBroadcastUpload_Notification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CBroadcast_StopBroadcastUpload_Notification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_StopBroadcastUpload_Notification_steammessages_5fbroadcast_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_StopBroadcastUpload_Notification_steammessages_5fbroadcast_2esteamclient_2eproto}, {}};

static void InitDefaultsCBroadcast_SessionClosed_Notification_steammessages_5fbroadcast_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CBroadcast_SessionClosed_Notification_default_instance_;
    new (ptr) ::proto::steam::CBroadcast_SessionClosed_Notification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CBroadcast_SessionClosed_Notification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_SessionClosed_Notification_steammessages_5fbroadcast_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_SessionClosed_Notification_steammessages_5fbroadcast_2esteamclient_2eproto}, {}};

static void InitDefaultsCBroadcast_ViewerBroadcastInvite_Notification_steammessages_5fbroadcast_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CBroadcast_ViewerBroadcastInvite_Notification_default_instance_;
    new (ptr) ::proto::steam::CBroadcast_ViewerBroadcastInvite_Notification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CBroadcast_ViewerBroadcastInvite_Notification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_ViewerBroadcastInvite_Notification_steammessages_5fbroadcast_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_ViewerBroadcastInvite_Notification_steammessages_5fbroadcast_2esteamclient_2eproto}, {}};

static void InitDefaultsCBroadcast_BroadcastStatus_Notification_steammessages_5fbroadcast_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CBroadcast_BroadcastStatus_Notification_default_instance_;
    new (ptr) ::proto::steam::CBroadcast_BroadcastStatus_Notification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CBroadcast_BroadcastStatus_Notification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_BroadcastStatus_Notification_steammessages_5fbroadcast_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_BroadcastStatus_Notification_steammessages_5fbroadcast_2esteamclient_2eproto}, {}};

static void InitDefaultsCBroadcast_SendThumbnailToRelay_Notification_steammessages_5fbroadcast_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CBroadcast_SendThumbnailToRelay_Notification_default_instance_;
    new (ptr) ::proto::steam::CBroadcast_SendThumbnailToRelay_Notification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CBroadcast_SendThumbnailToRelay_Notification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_SendThumbnailToRelay_Notification_steammessages_5fbroadcast_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_SendThumbnailToRelay_Notification_steammessages_5fbroadcast_2esteamclient_2eproto}, {}};

static void InitDefaultsCBroadcast_WebRTCNeedTURNServer_Notification_steammessages_5fbroadcast_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CBroadcast_WebRTCNeedTURNServer_Notification_default_instance_;
    new (ptr) ::proto::steam::CBroadcast_WebRTCNeedTURNServer_Notification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CBroadcast_WebRTCNeedTURNServer_Notification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_WebRTCNeedTURNServer_Notification_steammessages_5fbroadcast_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_WebRTCNeedTURNServer_Notification_steammessages_5fbroadcast_2esteamclient_2eproto}, {}};

static void InitDefaultsCBroadcast_WebRTCStart_Notification_steammessages_5fbroadcast_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CBroadcast_WebRTCStart_Notification_default_instance_;
    new (ptr) ::proto::steam::CBroadcast_WebRTCStart_Notification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CBroadcast_WebRTCStart_Notification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_WebRTCStart_Notification_steammessages_5fbroadcast_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_WebRTCStart_Notification_steammessages_5fbroadcast_2esteamclient_2eproto}, {}};

static void InitDefaultsCBroadcast_WebRTCSetAnswer_Notification_steammessages_5fbroadcast_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CBroadcast_WebRTCSetAnswer_Notification_default_instance_;
    new (ptr) ::proto::steam::CBroadcast_WebRTCSetAnswer_Notification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CBroadcast_WebRTCSetAnswer_Notification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_WebRTCSetAnswer_Notification_steammessages_5fbroadcast_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_WebRTCSetAnswer_Notification_steammessages_5fbroadcast_2esteamclient_2eproto}, {}};

static void InitDefaultsCBroadcast_WebRTCAddViewerCandidate_Notification_steammessages_5fbroadcast_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CBroadcast_WebRTCAddViewerCandidate_Notification_default_instance_;
    new (ptr) ::proto::steam::CBroadcast_WebRTCAddViewerCandidate_Notification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CBroadcast_WebRTCAddViewerCandidate_Notification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CBroadcast_WebRTCAddViewerCandidate_Notification_steammessages_5fbroadcast_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCBroadcast_WebRTCAddViewerCandidate_Notification_steammessages_5fbroadcast_2esteamclient_2eproto}, {
      &scc_info_CBroadcast_WebRTC_Candidate_steammessages_5fbroadcast_2esteamclient_2eproto.base,}};

void InitDefaults_steammessages_5fbroadcast_2esteamclient_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_BeginBroadcastSession_Request_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_BeginBroadcastSession_Response_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_EndBroadcastSession_Request_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_EndBroadcastSession_Response_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_StartBroadcastUpload_Request_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_StartBroadcastUpload_Response_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_NotifyBroadcastUploadStop_Notification_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_WatchBroadcast_Request_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_WatchBroadcast_Response_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_HeartbeatBroadcast_Notification_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_StopWatchingBroadcast_Notification_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_GetBroadcastStatus_Request_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_GetBroadcastStatus_Response_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_GetBroadcastThumbnail_Request_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_GetBroadcastThumbnail_Response_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_InviteToBroadcast_Request_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_InviteToBroadcast_Response_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_SendBroadcastStateToServer_Request_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_SendBroadcastStateToServer_Response_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_NotifyBroadcastSessionHeartbeat_Notification_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_GetBroadcastChatInfo_Request_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_GetBroadcastChatInfo_Response_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_PostChatMessage_Request_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_PostChatMessage_Response_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_MuteBroadcastChatUser_Request_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_MuteBroadcastChatUser_Response_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_RemoveUserChatText_Request_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_RemoveUserChatText_Response_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_GetBroadcastChatUserNames_Request_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_GetBroadcastChatUserNames_Response_PersonaName_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_GetBroadcastChatUserNames_Response_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_SetRTMPInfo_Request_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_SetRTMPInfo_Response_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_GetRTMPInfo_Request_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_GetRTMPInfo_Response_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_WebRTCHaveTURNServer_Notification_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_WebRTCStartResult_Request_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_WebRTCStartResult_Response_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_WebRTCStopped_Request_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_WebRTCStopped_Response_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_WebRTCSetAnswer_Request_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_WebRTCSetAnswer_Response_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_WebRTCLookupTURNServer_Request_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_WebRTCLookupTURNServer_Response_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_WebRTC_Candidate_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_WebRTCAddHostCandidate_Request_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_WebRTCAddHostCandidate_Response_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_WebRTCAddViewerCandidate_Request_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_WebRTCAddViewerCandidate_Response_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_WebRTCGetHostCandidates_Request_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_WebRTCGetHostCandidates_Response_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_BroadcastViewerState_Notification_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_WaitingBroadcastViewer_Notification_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_StopBroadcastUpload_Notification_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_SessionClosed_Notification_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_ViewerBroadcastInvite_Notification_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_BroadcastStatus_Notification_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_SendThumbnailToRelay_Notification_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_WebRTCNeedTURNServer_Notification_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_WebRTCStart_Notification_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_WebRTCSetAnswer_Notification_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_WebRTCAddViewerCandidate_Notification_steammessages_5fbroadcast_2esteamclient_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[62];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_steammessages_5fbroadcast_2esteamclient_2eproto[4];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors_steammessages_5fbroadcast_2esteamclient_2eproto[2];

const ::google::protobuf::uint32 TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_BeginBroadcastSession_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_BeginBroadcastSession_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_BeginBroadcastSession_Request, permission_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_BeginBroadcastSession_Request, gameid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_BeginBroadcastSession_Request, client_instance_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_BeginBroadcastSession_Request, title_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_BeginBroadcastSession_Request, cellid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_BeginBroadcastSession_Request, rtmp_token_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_BeginBroadcastSession_Request, thumbnail_upload_),
  3,
  1,
  2,
  0,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_BeginBroadcastSession_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_BeginBroadcastSession_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_BeginBroadcastSession_Response, broadcast_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_BeginBroadcastSession_Response, thumbnail_upload_address_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_BeginBroadcastSession_Response, thumbnail_upload_token_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_BeginBroadcastSession_Response, thumbnail_interval_seconds_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_BeginBroadcastSession_Response, heartbeat_interval_seconds_),
  2,
  0,
  1,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_EndBroadcastSession_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_EndBroadcastSession_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_EndBroadcastSession_Request, broadcast_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_EndBroadcastSession_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_EndBroadcastSession_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_StartBroadcastUpload_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_StartBroadcastUpload_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_StartBroadcastUpload_Request, broadcast_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_StartBroadcastUpload_Request, cellid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_StartBroadcastUpload_Request, as_rtmp_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_StartBroadcastUpload_Request, delay_seconds_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_StartBroadcastUpload_Request, rtmp_token_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_StartBroadcastUpload_Request, upload_ip_address_),
  0,
  1,
  2,
  4,
  3,
  5,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_StartBroadcastUpload_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_StartBroadcastUpload_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_StartBroadcastUpload_Response, upload_token_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_StartBroadcastUpload_Response, upload_address_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_StartBroadcastUpload_Response, upload_relay_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_StartBroadcastUpload_Response, thumbnail_upload_address_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_StartBroadcastUpload_Response, thumbnail_interval_seconds_),
  0,
  1,
  3,
  2,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_NotifyBroadcastUploadStop_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_NotifyBroadcastUploadStop_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_NotifyBroadcastUploadStop_Notification, broadcast_upload_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_NotifyBroadcastUploadStop_Notification, upload_result_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WatchBroadcast_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WatchBroadcast_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WatchBroadcast_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WatchBroadcast_Request, existing_broadcast_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WatchBroadcast_Request, viewer_token_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WatchBroadcast_Request, client_ip_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WatchBroadcast_Request, client_cell_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WatchBroadcast_Request, watch_location_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WatchBroadcast_Request, is_webrtc_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WatchBroadcast_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WatchBroadcast_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WatchBroadcast_Response, response_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WatchBroadcast_Response, mpd_url_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WatchBroadcast_Response, broadcast_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WatchBroadcast_Response, gameid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WatchBroadcast_Response, title_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WatchBroadcast_Response, num_viewers_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WatchBroadcast_Response, permission_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WatchBroadcast_Response, is_rtmp_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WatchBroadcast_Response, seconds_delay_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WatchBroadcast_Response, viewer_token_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WatchBroadcast_Response, hls_m3u8_master_url_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WatchBroadcast_Response, heartbeat_interval_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WatchBroadcast_Response, thumbnail_url_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WatchBroadcast_Response, is_webrtc_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WatchBroadcast_Response, webrtc_session_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WatchBroadcast_Response, webrtc_offer_sdp_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WatchBroadcast_Response, webrtc_turn_server_),
  16,
  0,
  6,
  7,
  1,
  8,
  9,
  12,
  11,
  10,
  2,
  15,
  3,
  13,
  14,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_HeartbeatBroadcast_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_HeartbeatBroadcast_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_HeartbeatBroadcast_Notification, steamid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_HeartbeatBroadcast_Notification, broadcast_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_HeartbeatBroadcast_Notification, viewer_token_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_HeartbeatBroadcast_Notification, representation_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_StopWatchingBroadcast_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_StopWatchingBroadcast_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_StopWatchingBroadcast_Notification, steamid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_StopWatchingBroadcast_Notification, broadcast_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_StopWatchingBroadcast_Notification, viewer_token_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_GetBroadcastStatus_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_GetBroadcastStatus_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_GetBroadcastStatus_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_GetBroadcastStatus_Request, broadcast_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_GetBroadcastStatus_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_GetBroadcastStatus_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_GetBroadcastStatus_Response, gameid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_GetBroadcastStatus_Response, title_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_GetBroadcastStatus_Response, num_viewers_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_GetBroadcastStatus_Response, permission_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_GetBroadcastStatus_Response, is_rtmp_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_GetBroadcastStatus_Response, seconds_delay_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_GetBroadcastStatus_Response, is_publisher_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_GetBroadcastStatus_Response, thumbnail_url_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_GetBroadcastStatus_Response, update_interval_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_GetBroadcastStatus_Response, is_uploading_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_GetBroadcastStatus_Response, duration_),
  2,
  0,
  3,
  4,
  6,
  5,
  7,
  1,
  9,
  8,
  10,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_GetBroadcastThumbnail_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_GetBroadcastThumbnail_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_GetBroadcastThumbnail_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_GetBroadcastThumbnail_Request, broadcast_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_GetBroadcastThumbnail_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_GetBroadcastThumbnail_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_GetBroadcastThumbnail_Response, thumbnail_url_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_GetBroadcastThumbnail_Response, update_interval_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_GetBroadcastThumbnail_Response, num_viewers_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_InviteToBroadcast_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_InviteToBroadcast_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_InviteToBroadcast_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_InviteToBroadcast_Request, approval_response_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_InviteToBroadcast_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_InviteToBroadcast_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_InviteToBroadcast_Response, success_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_SendBroadcastStateToServer_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_SendBroadcastStateToServer_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_SendBroadcastStateToServer_Request, permission_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_SendBroadcastStateToServer_Request, gameid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_SendBroadcastStateToServer_Request, title_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_SendBroadcastStateToServer_Request, game_data_config_),
  3,
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_SendBroadcastStateToServer_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_SendBroadcastStateToServer_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_NotifyBroadcastSessionHeartbeat_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_NotifyBroadcastSessionHeartbeat_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_NotifyBroadcastSessionHeartbeat_Notification, broadcast_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_GetBroadcastChatInfo_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_GetBroadcastChatInfo_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_GetBroadcastChatInfo_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_GetBroadcastChatInfo_Request, broadcast_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_GetBroadcastChatInfo_Request, client_ip_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_GetBroadcastChatInfo_Request, client_cell_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_GetBroadcastChatInfo_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_GetBroadcastChatInfo_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_GetBroadcastChatInfo_Response, chat_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_GetBroadcastChatInfo_Response, view_url_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_GetBroadcastChatInfo_Response, view_url_template_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_PostChatMessage_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_PostChatMessage_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_PostChatMessage_Request, chat_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_PostChatMessage_Request, message_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_PostChatMessage_Request, instance_id_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_PostChatMessage_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_PostChatMessage_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_PostChatMessage_Response, persona_name_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_PostChatMessage_Response, in_game_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_PostChatMessage_Response, result_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_PostChatMessage_Response, cooldown_time_seconds_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_MuteBroadcastChatUser_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_MuteBroadcastChatUser_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_MuteBroadcastChatUser_Request, chat_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_MuteBroadcastChatUser_Request, user_steamid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_MuteBroadcastChatUser_Request, muted_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_MuteBroadcastChatUser_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_MuteBroadcastChatUser_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_RemoveUserChatText_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_RemoveUserChatText_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_RemoveUserChatText_Request, chat_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_RemoveUserChatText_Request, user_steamid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_RemoveUserChatText_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_RemoveUserChatText_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_GetBroadcastChatUserNames_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_GetBroadcastChatUserNames_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_GetBroadcastChatUserNames_Request, chat_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_GetBroadcastChatUserNames_Request, user_steamid_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName, steam_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName, persona_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_GetBroadcastChatUserNames_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_GetBroadcastChatUserNames_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_GetBroadcastChatUserNames_Response, persona_names_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_SetRTMPInfo_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_SetRTMPInfo_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_SetRTMPInfo_Request, broadcast_permission_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_SetRTMPInfo_Request, update_token_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_SetRTMPInfo_Request, broadcast_delay_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_SetRTMPInfo_Request, app_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_SetRTMPInfo_Request, required_app_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_SetRTMPInfo_Request, broadcast_chat_permission_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_SetRTMPInfo_Request, broadcast_buffer_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_SetRTMPInfo_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_SetRTMPInfo_Request, chat_rate_limit_),
  0,
  1,
  2,
  3,
  4,
  5,
  7,
  6,
  8,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_SetRTMPInfo_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_SetRTMPInfo_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_GetRTMPInfo_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_GetRTMPInfo_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_GetRTMPInfo_Request, ip_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_GetRTMPInfo_Request, steamid_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_GetRTMPInfo_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_GetRTMPInfo_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_GetRTMPInfo_Response, broadcast_permission_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_GetRTMPInfo_Response, rtmp_host_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_GetRTMPInfo_Response, rtmp_token_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_GetRTMPInfo_Response, broadcast_delay_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_GetRTMPInfo_Response, app_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_GetRTMPInfo_Response, required_app_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_GetRTMPInfo_Response, broadcast_chat_permission_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_GetRTMPInfo_Response, broadcast_buffer_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_GetRTMPInfo_Response, steamid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_GetRTMPInfo_Response, chat_rate_limit_),
  2,
  0,
  1,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCHaveTURNServer_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCHaveTURNServer_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCHaveTURNServer_Notification, broadcast_session_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCHaveTURNServer_Notification, turn_server_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCStartResult_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCStartResult_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCStartResult_Request, webrtc_session_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCStartResult_Request, started_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCStartResult_Request, offer_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCStartResult_Request, resolution_x_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCStartResult_Request, resolution_y_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCStartResult_Request, fps_),
  1,
  2,
  0,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCStartResult_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCStartResult_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCStopped_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCStopped_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCStopped_Request, webrtc_session_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCStopped_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCStopped_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCSetAnswer_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCSetAnswer_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCSetAnswer_Request, broadcaster_steamid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCSetAnswer_Request, webrtc_session_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCSetAnswer_Request, answer_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCSetAnswer_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCSetAnswer_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCLookupTURNServer_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCLookupTURNServer_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCLookupTURNServer_Request, cellid_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCLookupTURNServer_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCLookupTURNServer_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCLookupTURNServer_Response, turn_server_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTC_Candidate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTC_Candidate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTC_Candidate, sdp_mid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTC_Candidate, sdp_mline_index_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTC_Candidate, candidate_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCAddHostCandidate_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCAddHostCandidate_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCAddHostCandidate_Request, webrtc_session_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCAddHostCandidate_Request, candidate_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCAddHostCandidate_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCAddHostCandidate_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCAddViewerCandidate_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCAddViewerCandidate_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCAddViewerCandidate_Request, broadcaster_steamid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCAddViewerCandidate_Request, webrtc_session_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCAddViewerCandidate_Request, candidate_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCAddViewerCandidate_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCAddViewerCandidate_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCGetHostCandidates_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCGetHostCandidates_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCGetHostCandidates_Request, broadcaster_steamid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCGetHostCandidates_Request, webrtc_session_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCGetHostCandidates_Request, candidate_generation_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCGetHostCandidates_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCGetHostCandidates_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCGetHostCandidates_Response, candidate_generation_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCGetHostCandidates_Response, candidates_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_BroadcastViewerState_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_BroadcastViewerState_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_BroadcastViewerState_Notification, steamid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_BroadcastViewerState_Notification, state_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WaitingBroadcastViewer_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WaitingBroadcastViewer_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WaitingBroadcastViewer_Notification, broadcast_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_StopBroadcastUpload_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_StopBroadcastUpload_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_StopBroadcastUpload_Notification, broadcast_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_StopBroadcastUpload_Notification, broadcast_relay_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_StopBroadcastUpload_Notification, upload_result_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_StopBroadcastUpload_Notification, too_many_poor_uploads_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_SessionClosed_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_SessionClosed_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_SessionClosed_Notification, broadcast_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_ViewerBroadcastInvite_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_ViewerBroadcastInvite_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_ViewerBroadcastInvite_Notification, broadcaster_steamid_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_BroadcastStatus_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_BroadcastStatus_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_BroadcastStatus_Notification, broadcast_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_BroadcastStatus_Notification, num_viewers_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_SendThumbnailToRelay_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_SendThumbnailToRelay_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_SendThumbnailToRelay_Notification, thumbnail_upload_token_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_SendThumbnailToRelay_Notification, thumbnail_broadcast_session_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_SendThumbnailToRelay_Notification, thumbnail_data_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_SendThumbnailToRelay_Notification, thumbnail_width_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_SendThumbnailToRelay_Notification, thumbnail_height_),
  0,
  2,
  1,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCNeedTURNServer_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCNeedTURNServer_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCNeedTURNServer_Notification, broadcast_session_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCStart_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCStart_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCStart_Notification, broadcast_session_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCStart_Notification, webrtc_session_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCStart_Notification, viewer_steamid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCStart_Notification, viewer_token_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCSetAnswer_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCSetAnswer_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCSetAnswer_Notification, broadcast_session_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCSetAnswer_Notification, webrtc_session_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCSetAnswer_Notification, answer_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCAddViewerCandidate_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCAddViewerCandidate_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCAddViewerCandidate_Notification, broadcast_session_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCAddViewerCandidate_Notification, webrtc_session_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CBroadcast_WebRTCAddViewerCandidate_Notification, candidate_),
  1,
  2,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(::proto::steam::CBroadcast_BeginBroadcastSession_Request)},
  { 19, 29, sizeof(::proto::steam::CBroadcast_BeginBroadcastSession_Response)},
  { 34, 40, sizeof(::proto::steam::CBroadcast_EndBroadcastSession_Request)},
  { 41, 46, sizeof(::proto::steam::CBroadcast_EndBroadcastSession_Response)},
  { 46, 57, sizeof(::proto::steam::CBroadcast_StartBroadcastUpload_Request)},
  { 63, 73, sizeof(::proto::steam::CBroadcast_StartBroadcastUpload_Response)},
  { 78, 85, sizeof(::proto::steam::CBroadcast_NotifyBroadcastUploadStop_Notification)},
  { 87, 99, sizeof(::proto::steam::CBroadcast_WatchBroadcast_Request)},
  { 106, 128, sizeof(::proto::steam::CBroadcast_WatchBroadcast_Response)},
  { 145, 154, sizeof(::proto::steam::CBroadcast_HeartbeatBroadcast_Notification)},
  { 158, 166, sizeof(::proto::steam::CBroadcast_StopWatchingBroadcast_Notification)},
  { 169, 176, sizeof(::proto::steam::CBroadcast_GetBroadcastStatus_Request)},
  { 178, 194, sizeof(::proto::steam::CBroadcast_GetBroadcastStatus_Response)},
  { 205, 212, sizeof(::proto::steam::CBroadcast_GetBroadcastThumbnail_Request)},
  { 214, 222, sizeof(::proto::steam::CBroadcast_GetBroadcastThumbnail_Response)},
  { 225, 232, sizeof(::proto::steam::CBroadcast_InviteToBroadcast_Request)},
  { 234, 240, sizeof(::proto::steam::CBroadcast_InviteToBroadcast_Response)},
  { 241, 250, sizeof(::proto::steam::CBroadcast_SendBroadcastStateToServer_Request)},
  { 254, 259, sizeof(::proto::steam::CBroadcast_SendBroadcastStateToServer_Response)},
  { 259, 265, sizeof(::proto::steam::CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)},
  { 266, 275, sizeof(::proto::steam::CBroadcast_GetBroadcastChatInfo_Request)},
  { 279, 287, sizeof(::proto::steam::CBroadcast_GetBroadcastChatInfo_Response)},
  { 290, 298, sizeof(::proto::steam::CBroadcast_PostChatMessage_Request)},
  { 301, 310, sizeof(::proto::steam::CBroadcast_PostChatMessage_Response)},
  { 314, 322, sizeof(::proto::steam::CBroadcast_MuteBroadcastChatUser_Request)},
  { 325, 330, sizeof(::proto::steam::CBroadcast_MuteBroadcastChatUser_Response)},
  { 330, 337, sizeof(::proto::steam::CBroadcast_RemoveUserChatText_Request)},
  { 339, 344, sizeof(::proto::steam::CBroadcast_RemoveUserChatText_Response)},
  { 344, 351, sizeof(::proto::steam::CBroadcast_GetBroadcastChatUserNames_Request)},
  { 353, 360, sizeof(::proto::steam::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName)},
  { 362, 368, sizeof(::proto::steam::CBroadcast_GetBroadcastChatUserNames_Response)},
  { 369, 383, sizeof(::proto::steam::CBroadcast_SetRTMPInfo_Request)},
  { 392, 397, sizeof(::proto::steam::CBroadcast_SetRTMPInfo_Response)},
  { 397, 404, sizeof(::proto::steam::CBroadcast_GetRTMPInfo_Request)},
  { 406, 421, sizeof(::proto::steam::CBroadcast_GetRTMPInfo_Response)},
  { 431, 438, sizeof(::proto::steam::CBroadcast_WebRTCHaveTURNServer_Notification)},
  { 440, 451, sizeof(::proto::steam::CBroadcast_WebRTCStartResult_Request)},
  { 457, 462, sizeof(::proto::steam::CBroadcast_WebRTCStartResult_Response)},
  { 462, 468, sizeof(::proto::steam::CBroadcast_WebRTCStopped_Request)},
  { 469, 474, sizeof(::proto::steam::CBroadcast_WebRTCStopped_Response)},
  { 474, 482, sizeof(::proto::steam::CBroadcast_WebRTCSetAnswer_Request)},
  { 485, 490, sizeof(::proto::steam::CBroadcast_WebRTCSetAnswer_Response)},
  { 490, 496, sizeof(::proto::steam::CBroadcast_WebRTCLookupTURNServer_Request)},
  { 497, 503, sizeof(::proto::steam::CBroadcast_WebRTCLookupTURNServer_Response)},
  { 504, 512, sizeof(::proto::steam::CBroadcast_WebRTC_Candidate)},
  { 515, 522, sizeof(::proto::steam::CBroadcast_WebRTCAddHostCandidate_Request)},
  { 524, 529, sizeof(::proto::steam::CBroadcast_WebRTCAddHostCandidate_Response)},
  { 529, 537, sizeof(::proto::steam::CBroadcast_WebRTCAddViewerCandidate_Request)},
  { 540, 545, sizeof(::proto::steam::CBroadcast_WebRTCAddViewerCandidate_Response)},
  { 545, 553, sizeof(::proto::steam::CBroadcast_WebRTCGetHostCandidates_Request)},
  { 556, 563, sizeof(::proto::steam::CBroadcast_WebRTCGetHostCandidates_Response)},
  { 565, 572, sizeof(::proto::steam::CBroadcast_BroadcastViewerState_Notification)},
  { 574, 580, sizeof(::proto::steam::CBroadcast_WaitingBroadcastViewer_Notification)},
  { 581, 590, sizeof(::proto::steam::CBroadcast_StopBroadcastUpload_Notification)},
  { 594, 600, sizeof(::proto::steam::CBroadcast_SessionClosed_Notification)},
  { 601, 607, sizeof(::proto::steam::CBroadcast_ViewerBroadcastInvite_Notification)},
  { 608, 615, sizeof(::proto::steam::CBroadcast_BroadcastStatus_Notification)},
  { 617, 627, sizeof(::proto::steam::CBroadcast_SendThumbnailToRelay_Notification)},
  { 632, 638, sizeof(::proto::steam::CBroadcast_WebRTCNeedTURNServer_Notification)},
  { 639, 648, sizeof(::proto::steam::CBroadcast_WebRTCStart_Notification)},
  { 652, 660, sizeof(::proto::steam::CBroadcast_WebRTCSetAnswer_Notification)},
  { 663, 671, sizeof(::proto::steam::CBroadcast_WebRTCAddViewerCandidate_Notification)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CBroadcast_BeginBroadcastSession_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CBroadcast_BeginBroadcastSession_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CBroadcast_EndBroadcastSession_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CBroadcast_EndBroadcastSession_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CBroadcast_StartBroadcastUpload_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CBroadcast_StartBroadcastUpload_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CBroadcast_NotifyBroadcastUploadStop_Notification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CBroadcast_WatchBroadcast_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CBroadcast_WatchBroadcast_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CBroadcast_HeartbeatBroadcast_Notification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CBroadcast_StopWatchingBroadcast_Notification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CBroadcast_GetBroadcastStatus_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CBroadcast_GetBroadcastStatus_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CBroadcast_GetBroadcastThumbnail_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CBroadcast_GetBroadcastThumbnail_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CBroadcast_InviteToBroadcast_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CBroadcast_InviteToBroadcast_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CBroadcast_SendBroadcastStateToServer_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CBroadcast_SendBroadcastStateToServer_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CBroadcast_NotifyBroadcastSessionHeartbeat_Notification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CBroadcast_GetBroadcastChatInfo_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CBroadcast_GetBroadcastChatInfo_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CBroadcast_PostChatMessage_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CBroadcast_PostChatMessage_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CBroadcast_MuteBroadcastChatUser_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CBroadcast_MuteBroadcastChatUser_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CBroadcast_RemoveUserChatText_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CBroadcast_RemoveUserChatText_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CBroadcast_GetBroadcastChatUserNames_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CBroadcast_GetBroadcastChatUserNames_Response_PersonaName_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CBroadcast_GetBroadcastChatUserNames_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CBroadcast_SetRTMPInfo_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CBroadcast_SetRTMPInfo_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CBroadcast_GetRTMPInfo_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CBroadcast_GetRTMPInfo_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CBroadcast_WebRTCHaveTURNServer_Notification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CBroadcast_WebRTCStartResult_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CBroadcast_WebRTCStartResult_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CBroadcast_WebRTCStopped_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CBroadcast_WebRTCStopped_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CBroadcast_WebRTCSetAnswer_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CBroadcast_WebRTCSetAnswer_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CBroadcast_WebRTCLookupTURNServer_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CBroadcast_WebRTCLookupTURNServer_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CBroadcast_WebRTC_Candidate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CBroadcast_WebRTCAddHostCandidate_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CBroadcast_WebRTCAddHostCandidate_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CBroadcast_WebRTCAddViewerCandidate_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CBroadcast_WebRTCAddViewerCandidate_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CBroadcast_WebRTCGetHostCandidates_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CBroadcast_WebRTCGetHostCandidates_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CBroadcast_BroadcastViewerState_Notification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CBroadcast_WaitingBroadcastViewer_Notification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CBroadcast_StopBroadcastUpload_Notification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CBroadcast_SessionClosed_Notification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CBroadcast_ViewerBroadcastInvite_Notification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CBroadcast_BroadcastStatus_Notification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CBroadcast_SendThumbnailToRelay_Notification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CBroadcast_WebRTCNeedTURNServer_Notification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CBroadcast_WebRTCStart_Notification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CBroadcast_WebRTCSetAnswer_Notification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CBroadcast_WebRTCAddViewerCandidate_Notification_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_steammessages_5fbroadcast_2esteamclient_2eproto = {
  {}, AddDescriptors_steammessages_5fbroadcast_2esteamclient_2eproto, "steammessages_broadcast.steamclient.proto", schemas,
  file_default_instances, TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto::offsets,
  file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto, 62, file_level_enum_descriptors_steammessages_5fbroadcast_2esteamclient_2eproto, file_level_service_descriptors_steammessages_5fbroadcast_2esteamclient_2eproto,
};

const char descriptor_table_protodef_steammessages_5fbroadcast_2esteamclient_2eproto[] =
  "\n)steammessages_broadcast.steamclient.pr"
  "oto\022\013proto.steam\032,steammessages_unified_"
  "base.steamclient.proto\"\267\001\n(CBroadcast_Be"
  "ginBroadcastSession_Request\022\022\n\npermissio"
  "n\030\001 \001(\005\022\016\n\006gameid\030\002 \001(\004\022\032\n\022client_instan"
  "ce_id\030\003 \001(\004\022\r\n\005title\030\004 \001(\t\022\016\n\006cellid\030\005 \001"
  "(\r\022\022\n\nrtmp_token\030\006 \001(\004\022\030\n\020thumbnail_uplo"
  "ad\030\007 \001(\010\"\234\003\n)CBroadcast_BeginBroadcastSe"
  "ssion_Response\022\024\n\014broadcast_id\030\001 \001(\006\022P\n\030"
  "thumbnail_upload_address\030\002 \001(\tB.\202\265\030*Http"
  " address to upload the thumbnail data.\022e"
  "\n\026thumbnail_upload_token\030\003 \001(\tBE\202\265\030Atoke"
  "n to authorize as broadcaster to upload "
  "content to the relay.\022K\n\032thumbnail_inter"
  "val_seconds\030\004 \001(\rB\'\202\265\030#how many seconds "
  "between thumbnails\022S\n\032heartbeat_interval"
  "_seconds\030\005 \001(\rB/\202\265\030+how many seconds bet"
  "ween session heartbeats\">\n&CBroadcast_En"
  "dBroadcastSession_Request\022\024\n\014broadcast_i"
  "d\030\001 \001(\006\")\n\'CBroadcast_EndBroadcastSessio"
  "n_Response\"\346\001\n\'CBroadcast_StartBroadcast"
  "Upload_Request\022\024\n\014broadcast_id\030\001 \001(\006\022\016\n\006"
  "cellid\030\002 \001(\r\022\017\n\007as_rtmp\030\003 \001(\010\022\025\n\rdelay_s"
  "econds\030\004 \001(\r\022R\n\nrtmp_token\030\005 \001(\004:\0010B;\202\265\030"
  "7Only set during RTMP uploads; secret ke"
  "y from the user.\022\031\n\021upload_ip_address\030\006 "
  "\001(\r\"\267\001\n(CBroadcast_StartBroadcastUpload_"
  "Response\022\024\n\014upload_token\030\001 \001(\t\022\026\n\016upload"
  "_address\030\002 \001(\t\022\027\n\017upload_relay_id\030\003 \001(\006\022"
  " \n\030thumbnail_upload_address\030\004 \001(\t\022\"\n\032thu"
  "mbnail_interval_seconds\030\005 \001(\r\"g\n1CBroadc"
  "ast_NotifyBroadcastUploadStop_Notificati"
  "on\022\033\n\023broadcast_upload_id\030\001 \001(\006\022\025\n\ruploa"
  "d_result\030\002 \001(\r\"\250\003\n!CBroadcast_WatchBroad"
  "cast_Request\022)\n\007steamid\030\001 \001(\006B\030\202\265\030\024broad"
  "caster steamID.\022X\n\025existing_broadcast_id"
  "\030\002 \001(\006B9\202\265\0305broadcast session ID (option"
  "al, rejoin if specified).\022b\n\014viewer_toke"
  "n\030\003 \001(\006BL\202\265\030Hviewer token received from "
  "last WatchRequest call, from browser sto"
  "rage.\022\021\n\tclient_ip\030\004 \001(\r\022\023\n\013client_cell\030"
  "\005 \001(\r\022_\n\016watch_location\030\006 \001(\0162$.proto.st"
  "eam.EBroadcastWatchLocation:!k_EBroadcas"
  "tWatchLocation_Invalid\022\021\n\tis_webrtc\030\007 \001("
  "\010\"\300\007\n\"CBroadcast_WatchBroadcast_Response"
  "\022g\n\010response\030\001 \001(\0162>.proto.steam.CBroadc"
  "ast_WatchBroadcast_Response.EWatchRespon"
  "se:\025k_EWatchResponseReady\022\017\n\007mpd_url\030\002 \001"
  "(\t\022\024\n\014broadcast_id\030\003 \001(\006\022\016\n\006gameid\030\004 \001(\004"
  "\022\r\n\005title\030\005 \001(\t\022\023\n\013num_viewers\030\006 \001(\r\022\022\n\n"
  "permission\030\007 \001(\005\022\017\n\007is_rtmp\030\010 \001(\010\022\025\n\rsec"
  "onds_delay\030\t \001(\005\022\024\n\014viewer_token\030\n \001(\006\022\033"
  "\n\023hls_m3u8_master_url\030\013 \001(\t\022\032\n\022heartbeat"
  "_interval\030\014 \001(\005\022\025\n\rthumbnail_url\030\r \001(\t\022\021"
  "\n\tis_webrtc\030\016 \001(\010\022\031\n\021webrtc_session_id\030\017"
  " \001(\006\022\030\n\020webrtc_offer_sdp\030\020 \001(\t\022\032\n\022webrtc"
  "_turn_server\030\021 \001(\t\"\317\003\n\016EWatchResponse\022\031\n"
  "\025k_EWatchResponseReady\020\001\022 \n\034k_EWatchResp"
  "onseNotAvailable\020\002\022&\n\"k_EWatchResponseWa"
  "itingForApproval\020\003\022#\n\037k_EWatchResponseWa"
  "itingForStart\020\004\022\"\n\036k_EWatchResponseInval"
  "idSession\020\005\022%\n!k_EWatchResponseTooManyBr"
  "oadcasts\020\006\022\'\n#k_EWatchResponseWaitingFor"
  "Reconnect\020\007\022&\n\"k_EWatchResponseSystemNot"
  "Supported\020\010\022\"\n\036k_EWatchResponseUserRestr"
  "icted\020\t\022#\n\037k_EWatchResponseClientOutOfDa"
  "te\020\n\022%\n!k_EWatchResponsePoorUploadQualit"
  "y\020\013\022\'\n#k_EWatchResponseMissingSubscripti"
  "on\020\014\"\256\002\n*CBroadcast_HeartbeatBroadcast_N"
  "otification\022)\n\007steamid\030\001 \001(\006B\030\202\265\030\024broadc"
  "aster steamID.\022/\n\014broadcast_id\030\002 \001(\006B\031\202\265"
  "\030\025broadcast session ID.\022b\n\014viewer_token\030"
  "\003 \001(\006BL\202\265\030Hviewer token received from la"
  "st WatchRequest call, from browser stora"
  "ge.\022@\n\016representation\030\004 \001(\rB(\202\265\030$video s"
  "tream representation watching\"\357\001\n-CBroad"
  "cast_StopWatchingBroadcast_Notification\022"
  ")\n\007steamid\030\001 \001(\006B\030\202\265\030\024broadcaster steamI"
  "D.\022/\n\014broadcast_id\030\002 \001(\006B\031\202\265\030\025broadcast "
  "session ID.\022b\n\014viewer_token\030\003 \001(\006BL\202\265\030Hv"
  "iewer token received from last WatchRequ"
  "est call, from browser storage.\"\260\001\n%CBro"
  "adcast_GetBroadcastStatus_Request\022)\n\007ste"
  "amid\030\001 \001(\006B\030\202\265\030\024broadcaster steamID.\022\\\n\014"
  "broadcast_id\030\002 \001(\006BF\202\265\030Bbroadcast sessio"
  "n ID to proof that user is allowed to se"
  "e details.\"\206\002\n&CBroadcast_GetBroadcastSt"
  "atus_Response\022\016\n\006gameid\030\001 \001(\004\022\r\n\005title\030\002"
  " \001(\t\022\023\n\013num_viewers\030\003 \001(\r\022\022\n\npermission\030"
  "\004 \001(\005\022\017\n\007is_rtmp\030\005 \001(\010\022\025\n\rseconds_delay\030"
  "\006 \001(\005\022\024\n\014is_publisher\030\007 \001(\010\022\025\n\rthumbnail"
  "_url\030\010 \001(\t\022\027\n\017update_interval\030\t \001(\005\022\024\n\014i"
  "s_uploading\030\n \001(\010\022\020\n\010duration\030\013 \001(\r\"Q\n(C"
  "Broadcast_GetBroadcastThumbnail_Request\022"
  "\017\n\007steamid\030\001 \001(\006\022\024\n\014broadcast_id\030\002 \001(\006\"p"
  "\n)CBroadcast_GetBroadcastThumbnail_Respo"
  "nse\022\025\n\rthumbnail_url\030\001 \001(\t\022\027\n\017update_int"
  "erval\030\002 \001(\005\022\023\n\013num_viewers\030\003 \001(\005\"R\n$CBro"
  "adcast_InviteToBroadcast_Request\022\017\n\007stea"
  "mid\030\001 \001(\006\022\031\n\021approval_response\030\002 \001(\010\"8\n%"
  "CBroadcast_InviteToBroadcast_Response\022\017\n"
  "\007success\030\001 \001(\010\"|\n-CBroadcast_SendBroadca"
  "stStateToServer_Request\022\022\n\npermission\030\001 "
  "\001(\005\022\016\n\006gameid\030\002 \001(\004\022\r\n\005title\030\003 \001(\t\022\030\n\020ga"
  "me_data_config\030\004 \001(\t\"0\n.CBroadcast_SendB"
  "roadcastStateToServer_Response\"O\n7CBroad"
  "cast_NotifyBroadcastSessionHeartbeat_Not"
  "ification\022\024\n\014broadcast_id\030\001 \001(\006\"x\n\'CBroa"
  "dcast_GetBroadcastChatInfo_Request\022\017\n\007st"
  "eamid\030\001 \001(\006\022\024\n\014broadcast_id\030\002 \001(\006\022\021\n\tcli"
  "ent_ip\030\003 \001(\r\022\023\n\013client_cell\030\004 \001(\r\"h\n(CBr"
  "oadcast_GetBroadcastChatInfo_Response\022\017\n"
  "\007chat_id\030\001 \001(\006\022\020\n\010view_url\030\002 \001(\t\022\031\n\021view"
  "_url_template\030\003 \001(\t\"[\n\"CBroadcast_PostCh"
  "atMessage_Request\022\017\n\007chat_id\030\001 \001(\006\022\017\n\007me"
  "ssage\030\002 \001(\t\022\023\n\013instance_id\030\003 \001(\r\"{\n#CBro"
  "adcast_PostChatMessage_Response\022\024\n\014perso"
  "na_name\030\001 \001(\t\022\017\n\007in_game\030\002 \001(\010\022\016\n\006result"
  "\030\003 \001(\005\022\035\n\025cooldown_time_seconds\030\004 \001(\005\"`\n"
  "(CBroadcast_MuteBroadcastChatUser_Reques"
  "t\022\017\n\007chat_id\030\001 \001(\006\022\024\n\014user_steamid\030\002 \001(\006"
  "\022\r\n\005muted\030\003 \001(\010\"+\n)CBroadcast_MuteBroadc"
  "astChatUser_Response\"N\n%CBroadcast_Remov"
  "eUserChatText_Request\022\017\n\007chat_id\030\001 \001(\006\022\024"
  "\n\014user_steamid\030\002 \001(\006\"(\n&CBroadcast_Remov"
  "eUserChatText_Response\"U\n,CBroadcast_Get"
  "BroadcastChatUserNames_Request\022\017\n\007chat_i"
  "d\030\001 \001(\006\022\024\n\014user_steamid\030\002 \003(\006\"\300\001\n-CBroad"
  "cast_GetBroadcastChatUserNames_Response\022"
  "]\n\rpersona_names\030\001 \003(\0132F.proto.steam.CBr"
  "oadcast_GetBroadcastChatUserNames_Respon"
  "se.PersonaName\0320\n\013PersonaName\022\020\n\010steam_i"
  "d\030\001 \001(\006\022\017\n\007persona\030\002 \001(\t\"\226\004\n\036CBroadcast_"
  "SetRTMPInfo_Request\022\034\n\024broadcast_permiss"
  "ion\030\001 \001(\005\022\024\n\014update_token\030\002 \001(\010\022\027\n\017broad"
  "cast_delay\030\003 \001(\005\022\016\n\006app_id\030\004 \001(\r\022\027\n\017requ"
  "ired_app_id\030\005 \001(\r\022\250\001\n\031broadcast_chat_per"
  "mission\030\006 \001(\0162%.proto.steam.EBroadcastCh"
  "atPermission: k_EBroadcastChatPermission"
  "PublicB<\202\265\0308Who is permitted to send a c"
  "hat message during broadcast\022N\n\020broadcas"
  "t_buffer\030\007 \001(\005B4\202\265\0300Previous seconds we "
  "keep of the stream available\022>\n\007steamid\030"
  "\010 \001(\006B-\202\265\030)broadcaster steamID if not lo"
  "gged-in user\022C\n\017chat_rate_limit\030\t \001(\rB*\202"
  "\265\030&Seconds required between chat message"
  "s\"!\n\037CBroadcast_SetRTMPInfo_Response\"l\n\036"
  "CBroadcast_GetRTMPInfo_Request\022\n\n\002ip\030\001 \001"
  "(\r\022>\n\007steamid\030\002 \001(\006B-\202\265\030)broadcaster ste"
  "amID if not logged-in user\"\203\004\n\037CBroadcas"
  "t_GetRTMPInfo_Response\022\034\n\024broadcast_perm"
  "ission\030\001 \001(\005\022\021\n\trtmp_host\030\002 \001(\t\022\022\n\nrtmp_"
  "token\030\003 \001(\t\022\027\n\017broadcast_delay\030\004 \001(\005\022\016\n\006"
  "app_id\030\005 \001(\r\022\027\n\017required_app_id\030\006 \001(\r\022\250\001"
  "\n\031broadcast_chat_permission\030\007 \001(\0162%.prot"
  "o.steam.EBroadcastChatPermission: k_EBro"
  "adcastChatPermissionPublicB<\202\265\0308Who is p"
  "ermitted to send a chat message during b"
  "roadcast\022\?\n\020broadcast_buffer\030\010 \001(\005B%\202\265\030!"
  "Seconds we keep streams available\022(\n\007ste"
  "amid\030\t \001(\006B\027\202\265\030\023broadcaster steamID\022C\n\017c"
  "hat_rate_limit\030\n \001(\rB*\202\265\030&Seconds requir"
  "ed between chat messages\"a\n,CBroadcast_W"
  "ebRTCHaveTURNServer_Notification\022\034\n\024broa"
  "dcast_session_id\030\001 \001(\006\022\023\n\013turn_server\030\002 "
  "\001(\t\"\232\001\n$CBroadcast_WebRTCStartResult_Req"
  "uest\022\031\n\021webrtc_session_id\030\001 \001(\006\022\017\n\007start"
  "ed\030\002 \001(\010\022\r\n\005offer\030\003 \001(\t\022\024\n\014resolution_x\030"
  "\004 \001(\r\022\024\n\014resolution_y\030\005 \001(\r\022\013\n\003fps\030\006 \001(\r"
  "\"\'\n%CBroadcast_WebRTCStartResult_Respons"
  "e\"=\n CBroadcast_WebRTCStopped_Request\022\031\n"
  "\021webrtc_session_id\030\001 \001(\006\"#\n!CBroadcast_W"
  "ebRTCStopped_Response\"l\n\"CBroadcast_WebR"
  "TCSetAnswer_Request\022\033\n\023broadcaster_steam"
  "id\030\001 \001(\006\022\031\n\021webrtc_session_id\030\002 \001(\006\022\016\n\006a"
  "nswer\030\003 \001(\t\"%\n#CBroadcast_WebRTCSetAnswe"
  "r_Response\";\n)CBroadcast_WebRTCLookupTUR"
  "NServer_Request\022\016\n\006cellid\030\001 \001(\r\"A\n*CBroa"
  "dcast_WebRTCLookupTURNServer_Response\022\023\n"
  "\013turn_server\030\001 \001(\t\"Z\n\033CBroadcast_WebRTC_"
  "Candidate\022\017\n\007sdp_mid\030\001 \001(\t\022\027\n\017sdp_mline_"
  "index\030\002 \001(\005\022\021\n\tcandidate\030\003 \001(\t\"\203\001\n)CBroa"
  "dcast_WebRTCAddHostCandidate_Request\022\031\n\021"
  "webrtc_session_id\030\001 \001(\006\022;\n\tcandidate\030\002 \001"
  "(\0132(.proto.steam.CBroadcast_WebRTC_Candi"
  "date\",\n*CBroadcast_WebRTCAddHostCandidat"
  "e_Response\"\242\001\n+CBroadcast_WebRTCAddViewe"
  "rCandidate_Request\022\033\n\023broadcaster_steami"
  "d\030\001 \001(\006\022\031\n\021webrtc_session_id\030\002 \001(\006\022;\n\tca"
  "ndidate\030\003 \001(\0132(.proto.steam.CBroadcast_W"
  "ebRTC_Candidate\".\n,CBroadcast_WebRTCAddV"
  "iewerCandidate_Response\"\202\001\n*CBroadcast_W"
  "ebRTCGetHostCandidates_Request\022\033\n\023broadc"
  "aster_steamid\030\001 \001(\006\022\031\n\021webrtc_session_id"
  "\030\002 \001(\006\022\034\n\024candidate_generation\030\003 \001(\r\"\211\001\n"
  "+CBroadcast_WebRTCGetHostCandidates_Resp"
  "onse\022\034\n\024candidate_generation\030\001 \001(\r\022<\n\nca"
  "ndidates\030\002 \003(\0132(.proto.steam.CBroadcast_"
  "WebRTC_Candidate\"\204\002\n,CBroadcast_Broadcas"
  "tViewerState_Notification\022\017\n\007steamid\030\001 \001"
  "(\006\022m\n\005state\030\002 \001(\0162F.proto.steam.CBroadca"
  "st_BroadcastViewerState_Notification.EVi"
  "ewerState:\026k_EViewerNeedsApproval\"T\n\014EVi"
  "ewerState\022\032\n\026k_EViewerNeedsApproval\020\001\022\025\n"
  "\021k_EViewerWatching\020\002\022\021\n\rk_EViewerLeft\020\003\""
  "F\n.CBroadcast_WaitingBroadcastViewer_Not"
  "ification\022\024\n\014broadcast_id\030\001 \001(\006\"\225\001\n+CBro"
  "adcast_StopBroadcastUpload_Notification\022"
  "\024\n\014broadcast_id\030\001 \001(\006\022\032\n\022broadcast_relay"
  "_id\030\002 \001(\006\022\025\n\rupload_result\030\003 \001(\r\022\035\n\025too_"
  "many_poor_uploads\030\004 \001(\010\"=\n%CBroadcast_Se"
  "ssionClosed_Notification\022\024\n\014broadcast_id"
  "\030\001 \001(\006\"L\n-CBroadcast_ViewerBroadcastInvi"
  "te_Notification\022\033\n\023broadcaster_steamid\030\001"
  " \001(\006\"T\n\'CBroadcast_BroadcastStatus_Notif"
  "ication\022\024\n\014broadcast_id\030\001 \001(\006\022\023\n\013num_vie"
  "wers\030\002 \001(\005\"\301\001\n,CBroadcast_SendThumbnailT"
  "oRelay_Notification\022\036\n\026thumbnail_upload_"
  "token\030\001 \001(\t\022&\n\036thumbnail_broadcast_sessi"
  "on_id\030\002 \001(\006\022\026\n\016thumbnail_data\030\003 \001(\014\022\027\n\017t"
  "humbnail_width\030\004 \001(\r\022\030\n\020thumbnail_height"
  "\030\005 \001(\r\"L\n,CBroadcast_WebRTCNeedTURNServe"
  "r_Notification\022\034\n\024broadcast_session_id\030\001"
  " \001(\006\"\214\001\n#CBroadcast_WebRTCStart_Notifica"
  "tion\022\034\n\024broadcast_session_id\030\001 \001(\006\022\031\n\021we"
  "brtc_session_id\030\002 \001(\006\022\026\n\016viewer_steamid\030"
  "\003 \001(\006\022\024\n\014viewer_token\030\004 \001(\006\"r\n\'CBroadcas"
  "t_WebRTCSetAnswer_Notification\022\034\n\024broadc"
  "ast_session_id\030\001 \001(\006\022\031\n\021webrtc_session_i"
  "d\030\002 \001(\006\022\016\n\006answer\030\003 \001(\t\"\250\001\n0CBroadcast_W"
  "ebRTCAddViewerCandidate_Notification\022\034\n\024"
  "broadcast_session_id\030\001 \001(\006\022\031\n\021webrtc_ses"
  "sion_id\030\002 \001(\006\022;\n\tcandidate\030\003 \001(\0132(.proto"
  ".steam.CBroadcast_WebRTC_Candidate*\312\004\n\027E"
  "BroadcastWatchLocation\022%\n!k_EBroadcastWa"
  "tchLocation_Invalid\020\000\022)\n%k_EBroadcastWat"
  "chLocation_SteamTV_Tab\020\001\0220\n,k_EBroadcast"
  "WatchLocation_SteamTV_WatchParty\020\002\022&\n\"k_"
  "EBroadcastWatchLocation_Chat_Tab\020\003\022-\n)k_"
  "EBroadcastWatchLocation_Chat_WatchParty\020"
  "\004\022+\n\'k_EBroadcastWatchLocation_Community"
  "Page\020\005\022*\n&k_EBroadcastWatchLocation_Stor"
  "eAppPage\020\006\022$\n k_EBroadcastWatchLocation_"
  "InGame\020\007\022(\n$k_EBroadcastWatchLocation_Bi"
  "gPicture\020\010\022\'\n#k_EBroadcastWatchLocation_"
  "SalesPage\020\t\022)\n%k_EBroadcastWatchLocation"
  "_CuratorPage\020\n\022+\n\'k_EBroadcastWatchLocat"
  "ion_DeveloperPage\020\013\022*\n&k_EBroadcastWatch"
  "Location_Chat_Friends\020\014*g\n\030EBroadcastCha"
  "tPermission\022$\n k_EBroadcastChatPermissio"
  "nPublic\020\000\022%\n!k_EBroadcastChatPermissionO"
  "wnsApp\020\0012\231(\n\tBroadcast\022\205\002\n\025BeginBroadcas"
  "tSession\0225.proto.steam.CBroadcast_BeginB"
  "roadcastSession_Request\0326.proto.steam.CB"
  "roadcast_BeginBroadcastSession_Response\""
  "}\202\265\030yRequest from client to directory to"
  " begin a broadcast session. No data bein"
  "g sent to relay; just available for broa"
  "dcast.\022\322\001\n\023EndBroadcastSession\0223.proto.s"
  "team.CBroadcast_EndBroadcastSession_Requ"
  "est\0324.proto.steam.CBroadcast_EndBroadcas"
  "tSession_Response\"P\202\265\030LRequest from clie"
  "nt to stop a broadcast session. Any uplo"
  "ads will terminate.\022\304\001\n\024StartBroadcastUp"
  "load\0224.proto.steam.CBroadcast_StartBroad"
  "castUpload_Request\0325.proto.steam.CBroadc"
  "ast_StartBroadcastUpload_Response\"\?\202\265\030;R"
  "equest from client to begin sending vide"
  "o for a broadcast.\022\261\001\n\031NotifyBroadcastUp"
  "loadStop\022>.proto.steam.CBroadcast_Notify"
  "BroadcastUploadStop_Notification\032\027.proto"
  ".steam.NoResponse\";\202\265\0307Tells directory t"
  "hat client stopped uploading broadcast\022\237"
  "\001\n\016WatchBroadcast\022..proto.steam.CBroadca"
  "st_WatchBroadcast_Request\032/.proto.steam."
  "CBroadcast_WatchBroadcast_Response\",\202\265\030("
  "Request from viewer to watch a broadcast"
  "\022\231\001\n\022HeartbeatBroadcast\0227.proto.steam.CB"
  "roadcast_HeartbeatBroadcast_Notification"
  "\032\027.proto.steam.NoResponse\"1\202\265\030-Notify di"
  "rectory that user is still watching.\022\331\001\n"
  "\025StopWatchingBroadcast\022:.proto.steam.CBr"
  "oadcast_StopWatchingBroadcast_Notificati"
  "on\032\027.proto.steam.NoResponse\"k\202\265\030gRequest"
  " to immediately stop watching a broadcas"
  "t. Optional Method, if not called, viewe"
  "r will time out.\022\256\001\n\022GetBroadcastStatus\022"
  "2.proto.steam.CBroadcast_GetBroadcastSta"
  "tus_Request\0323.proto.steam.CBroadcast_Get"
  "BroadcastStatus_Response\"/\202\265\030+Request fr"
  "om viewer about broadcast details\022\257\001\n\025Ge"
  "tBroadcastThumbnail\0225.proto.steam.CBroad"
  "cast_GetBroadcastThumbnail_Request\0326.pro"
  "to.steam.CBroadcast_GetBroadcastThumbnai"
  "l_Response\"\'\202\265\030#Request thumbnail URL fo"
  "r broadcast\022\272\001\n\021InviteToBroadcast\0221.prot"
  "o.steam.CBroadcast_InviteToBroadcast_Req"
  "uest\0322.proto.steam.CBroadcast_InviteToBr"
  "oadcast_Response\">\202\265\030:Invites another st"
  "eam user to watch the caller\'s broadcast"
  "\022\340\001\n\032SendBroadcastStateToServer\022:.proto."
  "steam.CBroadcast_SendBroadcastStateToSer"
  "ver_Request\032;.proto.steam.CBroadcast_Sen"
  "dBroadcastStateToServer_Response\"I\202\265\030ESe"
  "nds users current broadcast state (permi"
  "ssions, game) to the server\022\272\001\n\037NotifyBr"
  "oadcastSessionHeartbeat\022D.proto.steam.CB"
  "roadcast_NotifyBroadcastSessionHeartbeat"
  "_Notification\032\027.proto.steam.NoResponse\"8"
  "\202\265\0304Tells directory broadcast session is"
  " still available\022\254\001\n\024GetBroadcastChatInf"
  "o\0224.proto.steam.CBroadcast_GetBroadcastC"
  "hatInfo_Request\0325.proto.steam.CBroadcast"
  "_GetBroadcastChatInfo_Response\"\'\202\265\030#Gets"
  " chat room info for a broadcast\022\242\001\n\017Post"
  "ChatMessage\022/.proto.steam.CBroadcast_Pos"
  "tChatMessage_Request\0320.proto.steam.CBroa"
  "dcast_PostChatMessage_Response\",\202\265\030(Post"
  " chat message to specified chat room\022\256\001\n"
  "\025MuteBroadcastChatUser\0225.proto.steam.CBr"
  "oadcast_MuteBroadcastChatUser_Request\0326."
  "proto.steam.CBroadcast_MuteBroadcastChat"
  "User_Response\"&\202\265\030\"Mute a user in your b"
  "roadcast chat\022\254\001\n\022RemoveUserChatText\0222.p"
  "roto.steam.CBroadcast_RemoveUserChatText"
  "_Request\0323.proto.steam.CBroadcast_Remove"
  "UserChatText_Response\"-\202\265\030)Tell all view"
  "ers to remove user chat text\022\273\001\n\031GetBroa"
  "dcastChatUserNames\0229.proto.steam.CBroadc"
  "ast_GetBroadcastChatUserNames_Request\032:."
  "proto.steam.CBroadcast_GetBroadcastChatU"
  "serNames_Response\"\'\202\265\030#Get names for lis"
  "t of users in chat\022\206\001\n\013SetRTMPInfo\022+.pro"
  "to.steam.CBroadcast_SetRTMPInfo_Request\032"
  ",.proto.steam.CBroadcast_SetRTMPInfo_Res"
  "ponse\"\034\202\265\030\030Sets RTMP broadcast info\022\206\001\n\013"
  "GetRTMPInfo\022+.proto.steam.CBroadcast_Get"
  "RTMPInfo_Request\032,.proto.steam.CBroadcas"
  "t_GetRTMPInfo_Response\"\034\202\265\030\030Gets RTMP br"
  "oadcast info\022\266\001\n\032NotifyWebRTCHaveTURNSer"
  "ver\0229.proto.steam.CBroadcast_WebRTCHaveT"
  "URNServer_Notification\032\027.proto.steam.NoR"
  "esponse\"D\202\265\030@Notification from client to"
  " server with the client\'s TURN server\022\304\001"
  "\n\021WebRTCStartResult\0221.proto.steam.CBroad"
  "cast_WebRTCStartResult_Request\0322.proto.s"
  "team.CBroadcast_WebRTCStartResult_Respon"
  "se\"H\202\265\030DNotify the server that a WebRTC "
  "session has been created by the host\022\270\001\n"
  "\rWebRTCStopped\022-.proto.steam.CBroadcast_"
  "WebRTCStopped_Request\032..proto.steam.CBro"
  "adcast_WebRTCStopped_Response\"H\202\265\030DNotif"
  "y the server that a WebRTC session has b"
  "een stopped by the host\022\300\001\n\017WebRTCSetAns"
  "wer\022/.proto.steam.CBroadcast_WebRTCSetAn"
  "swer_Request\0320.proto.steam.CBroadcast_We"
  "bRTCSetAnswer_Response\"J\202\265\030FNotify the s"
  "erver that a WebRTC session has been cre"
  "ated by the viewer\022\272\001\n\026WebRTCLookupTURNS"
  "erver\0226.proto.steam.CBroadcast_WebRTCLoo"
  "kupTURNServer_Request\0327.proto.steam.CBro"
  "adcast_WebRTCLookupTURNServer_Response\"/"
  "\202\265\030+Lookup the best TURN server for this"
  " client\022\311\001\n\026WebRTCAddHostCandidate\0226.pro"
  "to.steam.CBroadcast_WebRTCAddHostCandida"
  "te_Request\0327.proto.steam.CBroadcast_WebR"
  "TCAddHostCandidate_Response\">\202\265\030:Add an "
  "ICE candidate for the host side of a Web"
  "RTC session\022\321\001\n\030WebRTCAddViewerCandidate"
  "\0228.proto.steam.CBroadcast_WebRTCAddViewe"
  "rCandidate_Request\0329.proto.steam.CBroadc"
  "ast_WebRTCAddViewerCandidate_Response\"@\202"
  "\265\030<Add an ICE candidate for the viewer s"
  "ide of a WebRTC session\022\316\001\n\027WebRTCGetHos"
  "tCandidates\0227.proto.steam.CBroadcast_Web"
  "RTCGetHostCandidates_Request\0328.proto.ste"
  "am.CBroadcast_WebRTCGetHostCandidates_Re"
  "sponse\"@\202\265\030<Get the ICE candidates for t"
  "he host side of a WebRTC session\032*\202\265\030&Me"
  "thods for Steam broadcast operations2\201\021\n"
  "\017BroadcastClient\022\271\001\n\032NotifyBroadcastView"
  "erState\0229.proto.steam.CBroadcast_Broadca"
  "stViewerState_Notification\032\027.proto.steam"
  ".NoResponse\"G\202\265\030CNotification from serve"
  "r to client that a viewers state has cha"
  "nged\022\325\001\n\034NotifyWaitingBroadcastViewer\022;."
  "proto.steam.CBroadcast_WaitingBroadcastV"
  "iewer_Notification\032\027.proto.steam.NoRespo"
  "nse\"_\202\265\030[Notification from server to cli"
  "ent one or more users is waiting for use"
  "r to start broadcast\022\356\001\n\031NotifyStopBroad"
  "castUpload\0228.proto.steam.CBroadcast_Stop"
  "BroadcastUpload_Notification\032\027.proto.ste"
  "am.NoResponse\"~\202\265\030zNotification from ser"
  "ver to client telling it to stop uploadi"
  "ng when the last viewer has disconnected"
  " from their broadcast\022\315\001\n\023NotifySessionC"
  "losed\0222.proto.steam.CBroadcast_SessionCl"
  "osed_Notification\032\027.proto.steam.NoRespon"
  "se\"i\202\265\030eNotification from server to clie"
  "nt telling it a session has been closed "
  "unexpectedly by the directory\022\333\001\n\033Notify"
  "ViewerBroadcastInvite\022:.proto.steam.CBro"
  "adcast_ViewerBroadcastInvite_Notificatio"
  "n\032\027.proto.steam.NoResponse\"g\202\265\030cNotifica"
  "tion from server to client that a broadc"
  "aster is inviting a viewer to watch thei"
  "r broadcast\022\255\001\n\025NotifyBroadcastStatus\0224."
  "proto.steam.CBroadcast_BroadcastStatus_N"
  "otification\032\027.proto.steam.NoResponse\"E\202\265"
  "\030ANotification from server to client abo"
  "ut current broadcast status\022\210\001\n\024SendThum"
  "bnailToRelay\0229.proto.steam.CBroadcast_Se"
  "ndThumbnailToRelay_Notification\032\027.proto."
  "steam.NoResponse\"\034\202\265\030\030Send thumbnails to"
  " relay\022\277\001\n\032NotifyWebRTCNeedTURNServer\0229."
  "proto.steam.CBroadcast_WebRTCNeedTURNSer"
  "ver_Notification\032\027.proto.steam.NoRespons"
  "e\"M\202\265\030INotification from server to clien"
  "t that it needs the client\'s TURN server"
  "\022\254\001\n\021NotifyWebRTCStart\0220.proto.steam.CBr"
  "oadcast_WebRTCStart_Notification\032\027.proto"
  ".steam.NoResponse\"L\202\265\030HNotification from"
  " server to client that it should start a"
  " WebRTC session\022\267\001\n\025NotifyWebRTCSetAnswe"
  "r\0224.proto.steam.CBroadcast_WebRTCSetAnsw"
  "er_Notification\032\027.proto.steam.NoResponse"
  "\"O\202\265\030KNotification from server to client"
  " about the broadcast viewer WebRTC answe"
  "r\022\316\001\n\036NotifyWebRTCAddViewerCandidate\022=.p"
  "roto.steam.CBroadcast_WebRTCAddViewerCan"
  "didate_Notification\032\027.proto.steam.NoResp"
  "onse\"T\202\265\030PNotification from server to cl"
  "ient about a broadcast viewer WebRTC ICE"
  " candidate\032\004\300\265\030\002B\003\200\001\001"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto = {
  false, InitDefaults_steammessages_5fbroadcast_2esteamclient_2eproto, 
  descriptor_table_protodef_steammessages_5fbroadcast_2esteamclient_2eproto,
  "steammessages_broadcast.steamclient.proto", &assign_descriptors_table_steammessages_5fbroadcast_2esteamclient_2eproto, 17381,
};

void AddDescriptors_steammessages_5fbroadcast_2esteamclient_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_steammessages_5funified_5fbase_2esteamclient_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_steammessages_5fbroadcast_2esteamclient_2eproto = []() { AddDescriptors_steammessages_5fbroadcast_2esteamclient_2eproto(); return true; }();
namespace proto {
namespace steam {
const ::google::protobuf::EnumDescriptor* CBroadcast_WatchBroadcast_Response_EWatchResponse_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return file_level_enum_descriptors_steammessages_5fbroadcast_2esteamclient_2eproto[0];
}
bool CBroadcast_WatchBroadcast_Response_EWatchResponse_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CBroadcast_WatchBroadcast_Response_EWatchResponse CBroadcast_WatchBroadcast_Response::k_EWatchResponseReady;
const CBroadcast_WatchBroadcast_Response_EWatchResponse CBroadcast_WatchBroadcast_Response::k_EWatchResponseNotAvailable;
const CBroadcast_WatchBroadcast_Response_EWatchResponse CBroadcast_WatchBroadcast_Response::k_EWatchResponseWaitingForApproval;
const CBroadcast_WatchBroadcast_Response_EWatchResponse CBroadcast_WatchBroadcast_Response::k_EWatchResponseWaitingForStart;
const CBroadcast_WatchBroadcast_Response_EWatchResponse CBroadcast_WatchBroadcast_Response::k_EWatchResponseInvalidSession;
const CBroadcast_WatchBroadcast_Response_EWatchResponse CBroadcast_WatchBroadcast_Response::k_EWatchResponseTooManyBroadcasts;
const CBroadcast_WatchBroadcast_Response_EWatchResponse CBroadcast_WatchBroadcast_Response::k_EWatchResponseWaitingForReconnect;
const CBroadcast_WatchBroadcast_Response_EWatchResponse CBroadcast_WatchBroadcast_Response::k_EWatchResponseSystemNotSupported;
const CBroadcast_WatchBroadcast_Response_EWatchResponse CBroadcast_WatchBroadcast_Response::k_EWatchResponseUserRestricted;
const CBroadcast_WatchBroadcast_Response_EWatchResponse CBroadcast_WatchBroadcast_Response::k_EWatchResponseClientOutOfDate;
const CBroadcast_WatchBroadcast_Response_EWatchResponse CBroadcast_WatchBroadcast_Response::k_EWatchResponsePoorUploadQuality;
const CBroadcast_WatchBroadcast_Response_EWatchResponse CBroadcast_WatchBroadcast_Response::k_EWatchResponseMissingSubscription;
const CBroadcast_WatchBroadcast_Response_EWatchResponse CBroadcast_WatchBroadcast_Response::EWatchResponse_MIN;
const CBroadcast_WatchBroadcast_Response_EWatchResponse CBroadcast_WatchBroadcast_Response::EWatchResponse_MAX;
const int CBroadcast_WatchBroadcast_Response::EWatchResponse_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CBroadcast_BroadcastViewerState_Notification_EViewerState_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return file_level_enum_descriptors_steammessages_5fbroadcast_2esteamclient_2eproto[1];
}
bool CBroadcast_BroadcastViewerState_Notification_EViewerState_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CBroadcast_BroadcastViewerState_Notification_EViewerState CBroadcast_BroadcastViewerState_Notification::k_EViewerNeedsApproval;
const CBroadcast_BroadcastViewerState_Notification_EViewerState CBroadcast_BroadcastViewerState_Notification::k_EViewerWatching;
const CBroadcast_BroadcastViewerState_Notification_EViewerState CBroadcast_BroadcastViewerState_Notification::k_EViewerLeft;
const CBroadcast_BroadcastViewerState_Notification_EViewerState CBroadcast_BroadcastViewerState_Notification::EViewerState_MIN;
const CBroadcast_BroadcastViewerState_Notification_EViewerState CBroadcast_BroadcastViewerState_Notification::EViewerState_MAX;
const int CBroadcast_BroadcastViewerState_Notification::EViewerState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* EBroadcastWatchLocation_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return file_level_enum_descriptors_steammessages_5fbroadcast_2esteamclient_2eproto[2];
}
bool EBroadcastWatchLocation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EBroadcastChatPermission_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return file_level_enum_descriptors_steammessages_5fbroadcast_2esteamclient_2eproto[3];
}
bool EBroadcastChatPermission_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CBroadcast_BeginBroadcastSession_Request::InitAsDefaultInstance() {
}
class CBroadcast_BeginBroadcastSession_Request::HasBitSetters {
 public:
  static void set_has_permission(CBroadcast_BeginBroadcastSession_Request* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_gameid(CBroadcast_BeginBroadcastSession_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_client_instance_id(CBroadcast_BeginBroadcastSession_Request* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_title(CBroadcast_BeginBroadcastSession_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_cellid(CBroadcast_BeginBroadcastSession_Request* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_rtmp_token(CBroadcast_BeginBroadcastSession_Request* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_thumbnail_upload(CBroadcast_BeginBroadcastSession_Request* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_BeginBroadcastSession_Request::kPermissionFieldNumber;
const int CBroadcast_BeginBroadcastSession_Request::kGameidFieldNumber;
const int CBroadcast_BeginBroadcastSession_Request::kClientInstanceIdFieldNumber;
const int CBroadcast_BeginBroadcastSession_Request::kTitleFieldNumber;
const int CBroadcast_BeginBroadcastSession_Request::kCellidFieldNumber;
const int CBroadcast_BeginBroadcastSession_Request::kRtmpTokenFieldNumber;
const int CBroadcast_BeginBroadcastSession_Request::kThumbnailUploadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_BeginBroadcastSession_Request::CBroadcast_BeginBroadcastSession_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_BeginBroadcastSession_Request)
}
CBroadcast_BeginBroadcastSession_Request::CBroadcast_BeginBroadcastSession_Request(const CBroadcast_BeginBroadcastSession_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&thumbnail_upload_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(thumbnail_upload_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_BeginBroadcastSession_Request)
}

void CBroadcast_BeginBroadcastSession_Request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CBroadcast_BeginBroadcastSession_Request_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&thumbnail_upload_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(thumbnail_upload_));
}

CBroadcast_BeginBroadcastSession_Request::~CBroadcast_BeginBroadcastSession_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_BeginBroadcastSession_Request)
  SharedDtor();
}

void CBroadcast_BeginBroadcastSession_Request::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_BeginBroadcastSession_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBroadcast_BeginBroadcastSession_Request& CBroadcast_BeginBroadcastSession_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CBroadcast_BeginBroadcastSession_Request_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CBroadcast_BeginBroadcastSession_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_BeginBroadcastSession_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    title_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&thumbnail_upload_) -
        reinterpret_cast<char*>(&gameid_)) + sizeof(thumbnail_upload_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CBroadcast_BeginBroadcastSession_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CBroadcast_BeginBroadcastSession_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 permission = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_permission(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 gameid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_gameid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 client_instance_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_client_instance_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string title = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CBroadcast_BeginBroadcastSession_Request.title");
        object = msg->mutable_title();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 cellid = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_cellid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 rtmp_token = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_rtmp_token(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool thumbnail_upload = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_thumbnail_upload(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CBroadcast_BeginBroadcastSession_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_BeginBroadcastSession_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 permission = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_permission(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &permission_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 gameid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_gameid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 client_instance_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_client_instance_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &client_instance_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string title = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CBroadcast_BeginBroadcastSession_Request.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cellid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_cellid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cellid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 rtmp_token = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_rtmp_token(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rtmp_token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool thumbnail_upload = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_thumbnail_upload(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &thumbnail_upload_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_BeginBroadcastSession_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_BeginBroadcastSession_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CBroadcast_BeginBroadcastSession_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_BeginBroadcastSession_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 permission = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->permission(), output);
  }

  // optional uint64 gameid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->gameid(), output);
  }

  // optional uint64 client_instance_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->client_instance_id(), output);
  }

  // optional string title = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_BeginBroadcastSession_Request.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->title(), output);
  }

  // optional uint32 cellid = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->cellid(), output);
  }

  // optional uint64 rtmp_token = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->rtmp_token(), output);
  }

  // optional bool thumbnail_upload = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->thumbnail_upload(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_BeginBroadcastSession_Request)
}

::google::protobuf::uint8* CBroadcast_BeginBroadcastSession_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_BeginBroadcastSession_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 permission = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->permission(), target);
  }

  // optional uint64 gameid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->gameid(), target);
  }

  // optional uint64 client_instance_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->client_instance_id(), target);
  }

  // optional string title = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_BeginBroadcastSession_Request.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->title(), target);
  }

  // optional uint32 cellid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->cellid(), target);
  }

  // optional uint64 rtmp_token = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->rtmp_token(), target);
  }

  // optional bool thumbnail_upload = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->thumbnail_upload(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_BeginBroadcastSession_Request)
  return target;
}

size_t CBroadcast_BeginBroadcastSession_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_BeginBroadcastSession_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string title = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional uint64 gameid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gameid());
    }

    // optional uint64 client_instance_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->client_instance_id());
    }

    // optional int32 permission = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->permission());
    }

    // optional uint32 cellid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cellid());
    }

    // optional uint64 rtmp_token = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rtmp_token());
    }

    // optional bool thumbnail_upload = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_BeginBroadcastSession_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_BeginBroadcastSession_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_BeginBroadcastSession_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CBroadcast_BeginBroadcastSession_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_BeginBroadcastSession_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_BeginBroadcastSession_Request)
    MergeFrom(*source);
  }
}

void CBroadcast_BeginBroadcastSession_Request::MergeFrom(const CBroadcast_BeginBroadcastSession_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_BeginBroadcastSession_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000002u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000004u) {
      client_instance_id_ = from.client_instance_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      permission_ = from.permission_;
    }
    if (cached_has_bits & 0x00000010u) {
      cellid_ = from.cellid_;
    }
    if (cached_has_bits & 0x00000020u) {
      rtmp_token_ = from.rtmp_token_;
    }
    if (cached_has_bits & 0x00000040u) {
      thumbnail_upload_ = from.thumbnail_upload_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_BeginBroadcastSession_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_BeginBroadcastSession_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_BeginBroadcastSession_Request::CopyFrom(const CBroadcast_BeginBroadcastSession_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_BeginBroadcastSession_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_BeginBroadcastSession_Request::IsInitialized() const {
  return true;
}

void CBroadcast_BeginBroadcastSession_Request::Swap(CBroadcast_BeginBroadcastSession_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_BeginBroadcastSession_Request::InternalSwap(CBroadcast_BeginBroadcastSession_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  title_.Swap(&other->title_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(gameid_, other->gameid_);
  swap(client_instance_id_, other->client_instance_id_);
  swap(permission_, other->permission_);
  swap(cellid_, other->cellid_);
  swap(rtmp_token_, other->rtmp_token_);
  swap(thumbnail_upload_, other->thumbnail_upload_);
}

::google::protobuf::Metadata CBroadcast_BeginBroadcastSession_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_BeginBroadcastSession_Response::InitAsDefaultInstance() {
}
class CBroadcast_BeginBroadcastSession_Response::HasBitSetters {
 public:
  static void set_has_broadcast_id(CBroadcast_BeginBroadcastSession_Response* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_thumbnail_upload_address(CBroadcast_BeginBroadcastSession_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_thumbnail_upload_token(CBroadcast_BeginBroadcastSession_Response* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_thumbnail_interval_seconds(CBroadcast_BeginBroadcastSession_Response* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_heartbeat_interval_seconds(CBroadcast_BeginBroadcastSession_Response* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_BeginBroadcastSession_Response::kBroadcastIdFieldNumber;
const int CBroadcast_BeginBroadcastSession_Response::kThumbnailUploadAddressFieldNumber;
const int CBroadcast_BeginBroadcastSession_Response::kThumbnailUploadTokenFieldNumber;
const int CBroadcast_BeginBroadcastSession_Response::kThumbnailIntervalSecondsFieldNumber;
const int CBroadcast_BeginBroadcastSession_Response::kHeartbeatIntervalSecondsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_BeginBroadcastSession_Response::CBroadcast_BeginBroadcastSession_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_BeginBroadcastSession_Response)
}
CBroadcast_BeginBroadcastSession_Response::CBroadcast_BeginBroadcastSession_Response(const CBroadcast_BeginBroadcastSession_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  thumbnail_upload_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_thumbnail_upload_address()) {
    thumbnail_upload_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.thumbnail_upload_address_);
  }
  thumbnail_upload_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_thumbnail_upload_token()) {
    thumbnail_upload_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.thumbnail_upload_token_);
  }
  ::memcpy(&broadcast_id_, &from.broadcast_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&heartbeat_interval_seconds_) -
    reinterpret_cast<char*>(&broadcast_id_)) + sizeof(heartbeat_interval_seconds_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_BeginBroadcastSession_Response)
}

void CBroadcast_BeginBroadcastSession_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CBroadcast_BeginBroadcastSession_Response_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  thumbnail_upload_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thumbnail_upload_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&broadcast_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heartbeat_interval_seconds_) -
      reinterpret_cast<char*>(&broadcast_id_)) + sizeof(heartbeat_interval_seconds_));
}

CBroadcast_BeginBroadcastSession_Response::~CBroadcast_BeginBroadcastSession_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_BeginBroadcastSession_Response)
  SharedDtor();
}

void CBroadcast_BeginBroadcastSession_Response::SharedDtor() {
  thumbnail_upload_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thumbnail_upload_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_BeginBroadcastSession_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBroadcast_BeginBroadcastSession_Response& CBroadcast_BeginBroadcastSession_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CBroadcast_BeginBroadcastSession_Response_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CBroadcast_BeginBroadcastSession_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_BeginBroadcastSession_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      thumbnail_upload_address_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      thumbnail_upload_token_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&broadcast_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&heartbeat_interval_seconds_) -
        reinterpret_cast<char*>(&broadcast_id_)) + sizeof(heartbeat_interval_seconds_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CBroadcast_BeginBroadcastSession_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CBroadcast_BeginBroadcastSession_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 broadcast_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_broadcast_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional string thumbnail_upload_address = 2 [(.proto.steam.description) = "Http address to upload the thumbnail data."];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CBroadcast_BeginBroadcastSession_Response.thumbnail_upload_address");
        object = msg->mutable_thumbnail_upload_address();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string thumbnail_upload_token = 3 [(.proto.steam.description) = "token to authorize as broadcaster to upload content to the relay."];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CBroadcast_BeginBroadcastSession_Response.thumbnail_upload_token");
        object = msg->mutable_thumbnail_upload_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 thumbnail_interval_seconds = 4 [(.proto.steam.description) = "how many seconds between thumbnails"];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_thumbnail_interval_seconds(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 heartbeat_interval_seconds = 5 [(.proto.steam.description) = "how many seconds between session heartbeats"];
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_heartbeat_interval_seconds(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CBroadcast_BeginBroadcastSession_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_BeginBroadcastSession_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 broadcast_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_broadcast_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &broadcast_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string thumbnail_upload_address = 2 [(.proto.steam.description) = "Http address to upload the thumbnail data."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_thumbnail_upload_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->thumbnail_upload_address().data(), static_cast<int>(this->thumbnail_upload_address().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CBroadcast_BeginBroadcastSession_Response.thumbnail_upload_address");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string thumbnail_upload_token = 3 [(.proto.steam.description) = "token to authorize as broadcaster to upload content to the relay."];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_thumbnail_upload_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->thumbnail_upload_token().data(), static_cast<int>(this->thumbnail_upload_token().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CBroadcast_BeginBroadcastSession_Response.thumbnail_upload_token");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 thumbnail_interval_seconds = 4 [(.proto.steam.description) = "how many seconds between thumbnails"];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_thumbnail_interval_seconds(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thumbnail_interval_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 heartbeat_interval_seconds = 5 [(.proto.steam.description) = "how many seconds between session heartbeats"];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_heartbeat_interval_seconds(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heartbeat_interval_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_BeginBroadcastSession_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_BeginBroadcastSession_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CBroadcast_BeginBroadcastSession_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_BeginBroadcastSession_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->broadcast_id(), output);
  }

  // optional string thumbnail_upload_address = 2 [(.proto.steam.description) = "Http address to upload the thumbnail data."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->thumbnail_upload_address().data(), static_cast<int>(this->thumbnail_upload_address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_BeginBroadcastSession_Response.thumbnail_upload_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->thumbnail_upload_address(), output);
  }

  // optional string thumbnail_upload_token = 3 [(.proto.steam.description) = "token to authorize as broadcaster to upload content to the relay."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->thumbnail_upload_token().data(), static_cast<int>(this->thumbnail_upload_token().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_BeginBroadcastSession_Response.thumbnail_upload_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->thumbnail_upload_token(), output);
  }

  // optional uint32 thumbnail_interval_seconds = 4 [(.proto.steam.description) = "how many seconds between thumbnails"];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->thumbnail_interval_seconds(), output);
  }

  // optional uint32 heartbeat_interval_seconds = 5 [(.proto.steam.description) = "how many seconds between session heartbeats"];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->heartbeat_interval_seconds(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_BeginBroadcastSession_Response)
}

::google::protobuf::uint8* CBroadcast_BeginBroadcastSession_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_BeginBroadcastSession_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->broadcast_id(), target);
  }

  // optional string thumbnail_upload_address = 2 [(.proto.steam.description) = "Http address to upload the thumbnail data."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->thumbnail_upload_address().data(), static_cast<int>(this->thumbnail_upload_address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_BeginBroadcastSession_Response.thumbnail_upload_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->thumbnail_upload_address(), target);
  }

  // optional string thumbnail_upload_token = 3 [(.proto.steam.description) = "token to authorize as broadcaster to upload content to the relay."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->thumbnail_upload_token().data(), static_cast<int>(this->thumbnail_upload_token().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_BeginBroadcastSession_Response.thumbnail_upload_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->thumbnail_upload_token(), target);
  }

  // optional uint32 thumbnail_interval_seconds = 4 [(.proto.steam.description) = "how many seconds between thumbnails"];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->thumbnail_interval_seconds(), target);
  }

  // optional uint32 heartbeat_interval_seconds = 5 [(.proto.steam.description) = "how many seconds between session heartbeats"];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->heartbeat_interval_seconds(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_BeginBroadcastSession_Response)
  return target;
}

size_t CBroadcast_BeginBroadcastSession_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_BeginBroadcastSession_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string thumbnail_upload_address = 2 [(.proto.steam.description) = "Http address to upload the thumbnail data."];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->thumbnail_upload_address());
    }

    // optional string thumbnail_upload_token = 3 [(.proto.steam.description) = "token to authorize as broadcaster to upload content to the relay."];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->thumbnail_upload_token());
    }

    // optional fixed64 broadcast_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 thumbnail_interval_seconds = 4 [(.proto.steam.description) = "how many seconds between thumbnails"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->thumbnail_interval_seconds());
    }

    // optional uint32 heartbeat_interval_seconds = 5 [(.proto.steam.description) = "how many seconds between session heartbeats"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heartbeat_interval_seconds());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_BeginBroadcastSession_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_BeginBroadcastSession_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_BeginBroadcastSession_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CBroadcast_BeginBroadcastSession_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_BeginBroadcastSession_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_BeginBroadcastSession_Response)
    MergeFrom(*source);
  }
}

void CBroadcast_BeginBroadcastSession_Response::MergeFrom(const CBroadcast_BeginBroadcastSession_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_BeginBroadcastSession_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      thumbnail_upload_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.thumbnail_upload_address_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      thumbnail_upload_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.thumbnail_upload_token_);
    }
    if (cached_has_bits & 0x00000004u) {
      broadcast_id_ = from.broadcast_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      thumbnail_interval_seconds_ = from.thumbnail_interval_seconds_;
    }
    if (cached_has_bits & 0x00000010u) {
      heartbeat_interval_seconds_ = from.heartbeat_interval_seconds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_BeginBroadcastSession_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_BeginBroadcastSession_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_BeginBroadcastSession_Response::CopyFrom(const CBroadcast_BeginBroadcastSession_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_BeginBroadcastSession_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_BeginBroadcastSession_Response::IsInitialized() const {
  return true;
}

void CBroadcast_BeginBroadcastSession_Response::Swap(CBroadcast_BeginBroadcastSession_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_BeginBroadcastSession_Response::InternalSwap(CBroadcast_BeginBroadcastSession_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  thumbnail_upload_address_.Swap(&other->thumbnail_upload_address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  thumbnail_upload_token_.Swap(&other->thumbnail_upload_token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(broadcast_id_, other->broadcast_id_);
  swap(thumbnail_interval_seconds_, other->thumbnail_interval_seconds_);
  swap(heartbeat_interval_seconds_, other->heartbeat_interval_seconds_);
}

::google::protobuf::Metadata CBroadcast_BeginBroadcastSession_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_EndBroadcastSession_Request::InitAsDefaultInstance() {
}
class CBroadcast_EndBroadcastSession_Request::HasBitSetters {
 public:
  static void set_has_broadcast_id(CBroadcast_EndBroadcastSession_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_EndBroadcastSession_Request::kBroadcastIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_EndBroadcastSession_Request::CBroadcast_EndBroadcastSession_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_EndBroadcastSession_Request)
}
CBroadcast_EndBroadcastSession_Request::CBroadcast_EndBroadcastSession_Request(const CBroadcast_EndBroadcastSession_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  broadcast_id_ = from.broadcast_id_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_EndBroadcastSession_Request)
}

void CBroadcast_EndBroadcastSession_Request::SharedCtor() {
  broadcast_id_ = PROTOBUF_ULONGLONG(0);
}

CBroadcast_EndBroadcastSession_Request::~CBroadcast_EndBroadcastSession_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_EndBroadcastSession_Request)
  SharedDtor();
}

void CBroadcast_EndBroadcastSession_Request::SharedDtor() {
}

void CBroadcast_EndBroadcastSession_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBroadcast_EndBroadcastSession_Request& CBroadcast_EndBroadcastSession_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CBroadcast_EndBroadcastSession_Request_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CBroadcast_EndBroadcastSession_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_EndBroadcastSession_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  broadcast_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CBroadcast_EndBroadcastSession_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CBroadcast_EndBroadcastSession_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 broadcast_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_broadcast_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CBroadcast_EndBroadcastSession_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_EndBroadcastSession_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 broadcast_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_broadcast_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &broadcast_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_EndBroadcastSession_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_EndBroadcastSession_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CBroadcast_EndBroadcastSession_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_EndBroadcastSession_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->broadcast_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_EndBroadcastSession_Request)
}

::google::protobuf::uint8* CBroadcast_EndBroadcastSession_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_EndBroadcastSession_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->broadcast_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_EndBroadcastSession_Request)
  return target;
}

size_t CBroadcast_EndBroadcastSession_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_EndBroadcastSession_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 broadcast_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_EndBroadcastSession_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_EndBroadcastSession_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_EndBroadcastSession_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CBroadcast_EndBroadcastSession_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_EndBroadcastSession_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_EndBroadcastSession_Request)
    MergeFrom(*source);
  }
}

void CBroadcast_EndBroadcastSession_Request::MergeFrom(const CBroadcast_EndBroadcastSession_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_EndBroadcastSession_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_broadcast_id()) {
    set_broadcast_id(from.broadcast_id());
  }
}

void CBroadcast_EndBroadcastSession_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_EndBroadcastSession_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_EndBroadcastSession_Request::CopyFrom(const CBroadcast_EndBroadcastSession_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_EndBroadcastSession_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_EndBroadcastSession_Request::IsInitialized() const {
  return true;
}

void CBroadcast_EndBroadcastSession_Request::Swap(CBroadcast_EndBroadcastSession_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_EndBroadcastSession_Request::InternalSwap(CBroadcast_EndBroadcastSession_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(broadcast_id_, other->broadcast_id_);
}

::google::protobuf::Metadata CBroadcast_EndBroadcastSession_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_EndBroadcastSession_Response::InitAsDefaultInstance() {
}
class CBroadcast_EndBroadcastSession_Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_EndBroadcastSession_Response::CBroadcast_EndBroadcastSession_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_EndBroadcastSession_Response)
}
CBroadcast_EndBroadcastSession_Response::CBroadcast_EndBroadcastSession_Response(const CBroadcast_EndBroadcastSession_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_EndBroadcastSession_Response)
}

void CBroadcast_EndBroadcastSession_Response::SharedCtor() {
}

CBroadcast_EndBroadcastSession_Response::~CBroadcast_EndBroadcastSession_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_EndBroadcastSession_Response)
  SharedDtor();
}

void CBroadcast_EndBroadcastSession_Response::SharedDtor() {
}

void CBroadcast_EndBroadcastSession_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBroadcast_EndBroadcastSession_Response& CBroadcast_EndBroadcastSession_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CBroadcast_EndBroadcastSession_Response_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CBroadcast_EndBroadcastSession_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_EndBroadcastSession_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CBroadcast_EndBroadcastSession_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CBroadcast_EndBroadcastSession_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CBroadcast_EndBroadcastSession_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_EndBroadcastSession_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_EndBroadcastSession_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_EndBroadcastSession_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CBroadcast_EndBroadcastSession_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_EndBroadcastSession_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_EndBroadcastSession_Response)
}

::google::protobuf::uint8* CBroadcast_EndBroadcastSession_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_EndBroadcastSession_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_EndBroadcastSession_Response)
  return target;
}

size_t CBroadcast_EndBroadcastSession_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_EndBroadcastSession_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_EndBroadcastSession_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_EndBroadcastSession_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_EndBroadcastSession_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CBroadcast_EndBroadcastSession_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_EndBroadcastSession_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_EndBroadcastSession_Response)
    MergeFrom(*source);
  }
}

void CBroadcast_EndBroadcastSession_Response::MergeFrom(const CBroadcast_EndBroadcastSession_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_EndBroadcastSession_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CBroadcast_EndBroadcastSession_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_EndBroadcastSession_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_EndBroadcastSession_Response::CopyFrom(const CBroadcast_EndBroadcastSession_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_EndBroadcastSession_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_EndBroadcastSession_Response::IsInitialized() const {
  return true;
}

void CBroadcast_EndBroadcastSession_Response::Swap(CBroadcast_EndBroadcastSession_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_EndBroadcastSession_Response::InternalSwap(CBroadcast_EndBroadcastSession_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CBroadcast_EndBroadcastSession_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_StartBroadcastUpload_Request::InitAsDefaultInstance() {
}
class CBroadcast_StartBroadcastUpload_Request::HasBitSetters {
 public:
  static void set_has_broadcast_id(CBroadcast_StartBroadcastUpload_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_cellid(CBroadcast_StartBroadcastUpload_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_as_rtmp(CBroadcast_StartBroadcastUpload_Request* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_delay_seconds(CBroadcast_StartBroadcastUpload_Request* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_rtmp_token(CBroadcast_StartBroadcastUpload_Request* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_upload_ip_address(CBroadcast_StartBroadcastUpload_Request* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_StartBroadcastUpload_Request::kBroadcastIdFieldNumber;
const int CBroadcast_StartBroadcastUpload_Request::kCellidFieldNumber;
const int CBroadcast_StartBroadcastUpload_Request::kAsRtmpFieldNumber;
const int CBroadcast_StartBroadcastUpload_Request::kDelaySecondsFieldNumber;
const int CBroadcast_StartBroadcastUpload_Request::kRtmpTokenFieldNumber;
const int CBroadcast_StartBroadcastUpload_Request::kUploadIpAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_StartBroadcastUpload_Request::CBroadcast_StartBroadcastUpload_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_StartBroadcastUpload_Request)
}
CBroadcast_StartBroadcastUpload_Request::CBroadcast_StartBroadcastUpload_Request(const CBroadcast_StartBroadcastUpload_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&broadcast_id_, &from.broadcast_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&upload_ip_address_) -
    reinterpret_cast<char*>(&broadcast_id_)) + sizeof(upload_ip_address_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_StartBroadcastUpload_Request)
}

void CBroadcast_StartBroadcastUpload_Request::SharedCtor() {
  ::memset(&broadcast_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&upload_ip_address_) -
      reinterpret_cast<char*>(&broadcast_id_)) + sizeof(upload_ip_address_));
}

CBroadcast_StartBroadcastUpload_Request::~CBroadcast_StartBroadcastUpload_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_StartBroadcastUpload_Request)
  SharedDtor();
}

void CBroadcast_StartBroadcastUpload_Request::SharedDtor() {
}

void CBroadcast_StartBroadcastUpload_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBroadcast_StartBroadcastUpload_Request& CBroadcast_StartBroadcastUpload_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CBroadcast_StartBroadcastUpload_Request_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CBroadcast_StartBroadcastUpload_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_StartBroadcastUpload_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&broadcast_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&upload_ip_address_) -
        reinterpret_cast<char*>(&broadcast_id_)) + sizeof(upload_ip_address_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CBroadcast_StartBroadcastUpload_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CBroadcast_StartBroadcastUpload_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 broadcast_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_broadcast_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 cellid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_cellid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool as_rtmp = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_as_rtmp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 delay_seconds = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_delay_seconds(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 rtmp_token = 5 [default = 0, (.proto.steam.description) = "Only set during RTMP uploads; secret key from the user."];
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_rtmp_token(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 upload_ip_address = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_upload_ip_address(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CBroadcast_StartBroadcastUpload_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_StartBroadcastUpload_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 broadcast_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_broadcast_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &broadcast_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cellid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_cellid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cellid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool as_rtmp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_as_rtmp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &as_rtmp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 delay_seconds = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_delay_seconds(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delay_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 rtmp_token = 5 [default = 0, (.proto.steam.description) = "Only set during RTMP uploads; secret key from the user."];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_rtmp_token(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rtmp_token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 upload_ip_address = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_upload_ip_address(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &upload_ip_address_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_StartBroadcastUpload_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_StartBroadcastUpload_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CBroadcast_StartBroadcastUpload_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_StartBroadcastUpload_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->broadcast_id(), output);
  }

  // optional uint32 cellid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cellid(), output);
  }

  // optional bool as_rtmp = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->as_rtmp(), output);
  }

  // optional uint32 delay_seconds = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->delay_seconds(), output);
  }

  // optional uint64 rtmp_token = 5 [default = 0, (.proto.steam.description) = "Only set during RTMP uploads; secret key from the user."];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->rtmp_token(), output);
  }

  // optional uint32 upload_ip_address = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->upload_ip_address(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_StartBroadcastUpload_Request)
}

::google::protobuf::uint8* CBroadcast_StartBroadcastUpload_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_StartBroadcastUpload_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->broadcast_id(), target);
  }

  // optional uint32 cellid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cellid(), target);
  }

  // optional bool as_rtmp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->as_rtmp(), target);
  }

  // optional uint32 delay_seconds = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->delay_seconds(), target);
  }

  // optional uint64 rtmp_token = 5 [default = 0, (.proto.steam.description) = "Only set during RTMP uploads; secret key from the user."];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->rtmp_token(), target);
  }

  // optional uint32 upload_ip_address = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->upload_ip_address(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_StartBroadcastUpload_Request)
  return target;
}

size_t CBroadcast_StartBroadcastUpload_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_StartBroadcastUpload_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional fixed64 broadcast_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 cellid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cellid());
    }

    // optional bool as_rtmp = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional uint64 rtmp_token = 5 [default = 0, (.proto.steam.description) = "Only set during RTMP uploads; secret key from the user."];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rtmp_token());
    }

    // optional uint32 delay_seconds = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delay_seconds());
    }

    // optional uint32 upload_ip_address = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->upload_ip_address());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_StartBroadcastUpload_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_StartBroadcastUpload_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_StartBroadcastUpload_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CBroadcast_StartBroadcastUpload_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_StartBroadcastUpload_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_StartBroadcastUpload_Request)
    MergeFrom(*source);
  }
}

void CBroadcast_StartBroadcastUpload_Request::MergeFrom(const CBroadcast_StartBroadcastUpload_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_StartBroadcastUpload_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      broadcast_id_ = from.broadcast_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      cellid_ = from.cellid_;
    }
    if (cached_has_bits & 0x00000004u) {
      as_rtmp_ = from.as_rtmp_;
    }
    if (cached_has_bits & 0x00000008u) {
      rtmp_token_ = from.rtmp_token_;
    }
    if (cached_has_bits & 0x00000010u) {
      delay_seconds_ = from.delay_seconds_;
    }
    if (cached_has_bits & 0x00000020u) {
      upload_ip_address_ = from.upload_ip_address_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_StartBroadcastUpload_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_StartBroadcastUpload_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_StartBroadcastUpload_Request::CopyFrom(const CBroadcast_StartBroadcastUpload_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_StartBroadcastUpload_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_StartBroadcastUpload_Request::IsInitialized() const {
  return true;
}

void CBroadcast_StartBroadcastUpload_Request::Swap(CBroadcast_StartBroadcastUpload_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_StartBroadcastUpload_Request::InternalSwap(CBroadcast_StartBroadcastUpload_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(broadcast_id_, other->broadcast_id_);
  swap(cellid_, other->cellid_);
  swap(as_rtmp_, other->as_rtmp_);
  swap(rtmp_token_, other->rtmp_token_);
  swap(delay_seconds_, other->delay_seconds_);
  swap(upload_ip_address_, other->upload_ip_address_);
}

::google::protobuf::Metadata CBroadcast_StartBroadcastUpload_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_StartBroadcastUpload_Response::InitAsDefaultInstance() {
}
class CBroadcast_StartBroadcastUpload_Response::HasBitSetters {
 public:
  static void set_has_upload_token(CBroadcast_StartBroadcastUpload_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_upload_address(CBroadcast_StartBroadcastUpload_Response* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_upload_relay_id(CBroadcast_StartBroadcastUpload_Response* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_thumbnail_upload_address(CBroadcast_StartBroadcastUpload_Response* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_thumbnail_interval_seconds(CBroadcast_StartBroadcastUpload_Response* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_StartBroadcastUpload_Response::kUploadTokenFieldNumber;
const int CBroadcast_StartBroadcastUpload_Response::kUploadAddressFieldNumber;
const int CBroadcast_StartBroadcastUpload_Response::kUploadRelayIdFieldNumber;
const int CBroadcast_StartBroadcastUpload_Response::kThumbnailUploadAddressFieldNumber;
const int CBroadcast_StartBroadcastUpload_Response::kThumbnailIntervalSecondsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_StartBroadcastUpload_Response::CBroadcast_StartBroadcastUpload_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_StartBroadcastUpload_Response)
}
CBroadcast_StartBroadcastUpload_Response::CBroadcast_StartBroadcastUpload_Response(const CBroadcast_StartBroadcastUpload_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  upload_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_upload_token()) {
    upload_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.upload_token_);
  }
  upload_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_upload_address()) {
    upload_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.upload_address_);
  }
  thumbnail_upload_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_thumbnail_upload_address()) {
    thumbnail_upload_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.thumbnail_upload_address_);
  }
  ::memcpy(&upload_relay_id_, &from.upload_relay_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&thumbnail_interval_seconds_) -
    reinterpret_cast<char*>(&upload_relay_id_)) + sizeof(thumbnail_interval_seconds_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_StartBroadcastUpload_Response)
}

void CBroadcast_StartBroadcastUpload_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CBroadcast_StartBroadcastUpload_Response_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  upload_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  upload_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thumbnail_upload_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&upload_relay_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&thumbnail_interval_seconds_) -
      reinterpret_cast<char*>(&upload_relay_id_)) + sizeof(thumbnail_interval_seconds_));
}

CBroadcast_StartBroadcastUpload_Response::~CBroadcast_StartBroadcastUpload_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_StartBroadcastUpload_Response)
  SharedDtor();
}

void CBroadcast_StartBroadcastUpload_Response::SharedDtor() {
  upload_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  upload_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thumbnail_upload_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_StartBroadcastUpload_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBroadcast_StartBroadcastUpload_Response& CBroadcast_StartBroadcastUpload_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CBroadcast_StartBroadcastUpload_Response_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CBroadcast_StartBroadcastUpload_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_StartBroadcastUpload_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      upload_token_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      upload_address_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      thumbnail_upload_address_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&upload_relay_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&thumbnail_interval_seconds_) -
        reinterpret_cast<char*>(&upload_relay_id_)) + sizeof(thumbnail_interval_seconds_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CBroadcast_StartBroadcastUpload_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CBroadcast_StartBroadcastUpload_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string upload_token = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CBroadcast_StartBroadcastUpload_Response.upload_token");
        object = msg->mutable_upload_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string upload_address = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CBroadcast_StartBroadcastUpload_Response.upload_address");
        object = msg->mutable_upload_address();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional fixed64 upload_relay_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_upload_relay_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional string thumbnail_upload_address = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CBroadcast_StartBroadcastUpload_Response.thumbnail_upload_address");
        object = msg->mutable_thumbnail_upload_address();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 thumbnail_interval_seconds = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_thumbnail_interval_seconds(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CBroadcast_StartBroadcastUpload_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_StartBroadcastUpload_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string upload_token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_upload_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->upload_token().data(), static_cast<int>(this->upload_token().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CBroadcast_StartBroadcastUpload_Response.upload_token");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string upload_address = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_upload_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->upload_address().data(), static_cast<int>(this->upload_address().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CBroadcast_StartBroadcastUpload_Response.upload_address");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 upload_relay_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          HasBitSetters::set_has_upload_relay_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &upload_relay_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string thumbnail_upload_address = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_thumbnail_upload_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->thumbnail_upload_address().data(), static_cast<int>(this->thumbnail_upload_address().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CBroadcast_StartBroadcastUpload_Response.thumbnail_upload_address");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 thumbnail_interval_seconds = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_thumbnail_interval_seconds(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thumbnail_interval_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_StartBroadcastUpload_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_StartBroadcastUpload_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CBroadcast_StartBroadcastUpload_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_StartBroadcastUpload_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string upload_token = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->upload_token().data(), static_cast<int>(this->upload_token().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_StartBroadcastUpload_Response.upload_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->upload_token(), output);
  }

  // optional string upload_address = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->upload_address().data(), static_cast<int>(this->upload_address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_StartBroadcastUpload_Response.upload_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->upload_address(), output);
  }

  // optional fixed64 upload_relay_id = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->upload_relay_id(), output);
  }

  // optional string thumbnail_upload_address = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->thumbnail_upload_address().data(), static_cast<int>(this->thumbnail_upload_address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_StartBroadcastUpload_Response.thumbnail_upload_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->thumbnail_upload_address(), output);
  }

  // optional uint32 thumbnail_interval_seconds = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->thumbnail_interval_seconds(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_StartBroadcastUpload_Response)
}

::google::protobuf::uint8* CBroadcast_StartBroadcastUpload_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_StartBroadcastUpload_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string upload_token = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->upload_token().data(), static_cast<int>(this->upload_token().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_StartBroadcastUpload_Response.upload_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->upload_token(), target);
  }

  // optional string upload_address = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->upload_address().data(), static_cast<int>(this->upload_address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_StartBroadcastUpload_Response.upload_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->upload_address(), target);
  }

  // optional fixed64 upload_relay_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->upload_relay_id(), target);
  }

  // optional string thumbnail_upload_address = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->thumbnail_upload_address().data(), static_cast<int>(this->thumbnail_upload_address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_StartBroadcastUpload_Response.thumbnail_upload_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->thumbnail_upload_address(), target);
  }

  // optional uint32 thumbnail_interval_seconds = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->thumbnail_interval_seconds(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_StartBroadcastUpload_Response)
  return target;
}

size_t CBroadcast_StartBroadcastUpload_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_StartBroadcastUpload_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string upload_token = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->upload_token());
    }

    // optional string upload_address = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->upload_address());
    }

    // optional string thumbnail_upload_address = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->thumbnail_upload_address());
    }

    // optional fixed64 upload_relay_id = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional uint32 thumbnail_interval_seconds = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->thumbnail_interval_seconds());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_StartBroadcastUpload_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_StartBroadcastUpload_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_StartBroadcastUpload_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CBroadcast_StartBroadcastUpload_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_StartBroadcastUpload_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_StartBroadcastUpload_Response)
    MergeFrom(*source);
  }
}

void CBroadcast_StartBroadcastUpload_Response::MergeFrom(const CBroadcast_StartBroadcastUpload_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_StartBroadcastUpload_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      upload_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.upload_token_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      upload_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.upload_address_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      thumbnail_upload_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.thumbnail_upload_address_);
    }
    if (cached_has_bits & 0x00000008u) {
      upload_relay_id_ = from.upload_relay_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      thumbnail_interval_seconds_ = from.thumbnail_interval_seconds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_StartBroadcastUpload_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_StartBroadcastUpload_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_StartBroadcastUpload_Response::CopyFrom(const CBroadcast_StartBroadcastUpload_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_StartBroadcastUpload_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_StartBroadcastUpload_Response::IsInitialized() const {
  return true;
}

void CBroadcast_StartBroadcastUpload_Response::Swap(CBroadcast_StartBroadcastUpload_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_StartBroadcastUpload_Response::InternalSwap(CBroadcast_StartBroadcastUpload_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  upload_token_.Swap(&other->upload_token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  upload_address_.Swap(&other->upload_address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  thumbnail_upload_address_.Swap(&other->thumbnail_upload_address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(upload_relay_id_, other->upload_relay_id_);
  swap(thumbnail_interval_seconds_, other->thumbnail_interval_seconds_);
}

::google::protobuf::Metadata CBroadcast_StartBroadcastUpload_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_NotifyBroadcastUploadStop_Notification::InitAsDefaultInstance() {
}
class CBroadcast_NotifyBroadcastUploadStop_Notification::HasBitSetters {
 public:
  static void set_has_broadcast_upload_id(CBroadcast_NotifyBroadcastUploadStop_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_upload_result(CBroadcast_NotifyBroadcastUploadStop_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_NotifyBroadcastUploadStop_Notification::kBroadcastUploadIdFieldNumber;
const int CBroadcast_NotifyBroadcastUploadStop_Notification::kUploadResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_NotifyBroadcastUploadStop_Notification::CBroadcast_NotifyBroadcastUploadStop_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_NotifyBroadcastUploadStop_Notification)
}
CBroadcast_NotifyBroadcastUploadStop_Notification::CBroadcast_NotifyBroadcastUploadStop_Notification(const CBroadcast_NotifyBroadcastUploadStop_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&broadcast_upload_id_, &from.broadcast_upload_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&upload_result_) -
    reinterpret_cast<char*>(&broadcast_upload_id_)) + sizeof(upload_result_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_NotifyBroadcastUploadStop_Notification)
}

void CBroadcast_NotifyBroadcastUploadStop_Notification::SharedCtor() {
  ::memset(&broadcast_upload_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&upload_result_) -
      reinterpret_cast<char*>(&broadcast_upload_id_)) + sizeof(upload_result_));
}

CBroadcast_NotifyBroadcastUploadStop_Notification::~CBroadcast_NotifyBroadcastUploadStop_Notification() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_NotifyBroadcastUploadStop_Notification)
  SharedDtor();
}

void CBroadcast_NotifyBroadcastUploadStop_Notification::SharedDtor() {
}

void CBroadcast_NotifyBroadcastUploadStop_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBroadcast_NotifyBroadcastUploadStop_Notification& CBroadcast_NotifyBroadcastUploadStop_Notification::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CBroadcast_NotifyBroadcastUploadStop_Notification_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CBroadcast_NotifyBroadcastUploadStop_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_NotifyBroadcastUploadStop_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&broadcast_upload_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&upload_result_) -
        reinterpret_cast<char*>(&broadcast_upload_id_)) + sizeof(upload_result_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CBroadcast_NotifyBroadcastUploadStop_Notification::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CBroadcast_NotifyBroadcastUploadStop_Notification*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 broadcast_upload_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_broadcast_upload_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 upload_result = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_upload_result(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CBroadcast_NotifyBroadcastUploadStop_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_NotifyBroadcastUploadStop_Notification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 broadcast_upload_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_broadcast_upload_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &broadcast_upload_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 upload_result = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_upload_result(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &upload_result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_NotifyBroadcastUploadStop_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_NotifyBroadcastUploadStop_Notification)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CBroadcast_NotifyBroadcastUploadStop_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_NotifyBroadcastUploadStop_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_upload_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->broadcast_upload_id(), output);
  }

  // optional uint32 upload_result = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->upload_result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_NotifyBroadcastUploadStop_Notification)
}

::google::protobuf::uint8* CBroadcast_NotifyBroadcastUploadStop_Notification::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_NotifyBroadcastUploadStop_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_upload_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->broadcast_upload_id(), target);
  }

  // optional uint32 upload_result = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->upload_result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_NotifyBroadcastUploadStop_Notification)
  return target;
}

size_t CBroadcast_NotifyBroadcastUploadStop_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_NotifyBroadcastUploadStop_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 broadcast_upload_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 upload_result = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->upload_result());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_NotifyBroadcastUploadStop_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_NotifyBroadcastUploadStop_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_NotifyBroadcastUploadStop_Notification* source =
      ::google::protobuf::DynamicCastToGenerated<CBroadcast_NotifyBroadcastUploadStop_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_NotifyBroadcastUploadStop_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_NotifyBroadcastUploadStop_Notification)
    MergeFrom(*source);
  }
}

void CBroadcast_NotifyBroadcastUploadStop_Notification::MergeFrom(const CBroadcast_NotifyBroadcastUploadStop_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_NotifyBroadcastUploadStop_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      broadcast_upload_id_ = from.broadcast_upload_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      upload_result_ = from.upload_result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_NotifyBroadcastUploadStop_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_NotifyBroadcastUploadStop_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_NotifyBroadcastUploadStop_Notification::CopyFrom(const CBroadcast_NotifyBroadcastUploadStop_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_NotifyBroadcastUploadStop_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_NotifyBroadcastUploadStop_Notification::IsInitialized() const {
  return true;
}

void CBroadcast_NotifyBroadcastUploadStop_Notification::Swap(CBroadcast_NotifyBroadcastUploadStop_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_NotifyBroadcastUploadStop_Notification::InternalSwap(CBroadcast_NotifyBroadcastUploadStop_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(broadcast_upload_id_, other->broadcast_upload_id_);
  swap(upload_result_, other->upload_result_);
}

::google::protobuf::Metadata CBroadcast_NotifyBroadcastUploadStop_Notification::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_WatchBroadcast_Request::InitAsDefaultInstance() {
}
class CBroadcast_WatchBroadcast_Request::HasBitSetters {
 public:
  static void set_has_steamid(CBroadcast_WatchBroadcast_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_existing_broadcast_id(CBroadcast_WatchBroadcast_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_viewer_token(CBroadcast_WatchBroadcast_Request* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_client_ip(CBroadcast_WatchBroadcast_Request* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_client_cell(CBroadcast_WatchBroadcast_Request* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_watch_location(CBroadcast_WatchBroadcast_Request* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_is_webrtc(CBroadcast_WatchBroadcast_Request* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_WatchBroadcast_Request::kSteamidFieldNumber;
const int CBroadcast_WatchBroadcast_Request::kExistingBroadcastIdFieldNumber;
const int CBroadcast_WatchBroadcast_Request::kViewerTokenFieldNumber;
const int CBroadcast_WatchBroadcast_Request::kClientIpFieldNumber;
const int CBroadcast_WatchBroadcast_Request::kClientCellFieldNumber;
const int CBroadcast_WatchBroadcast_Request::kWatchLocationFieldNumber;
const int CBroadcast_WatchBroadcast_Request::kIsWebrtcFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_WatchBroadcast_Request::CBroadcast_WatchBroadcast_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_WatchBroadcast_Request)
}
CBroadcast_WatchBroadcast_Request::CBroadcast_WatchBroadcast_Request(const CBroadcast_WatchBroadcast_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_webrtc_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(is_webrtc_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_WatchBroadcast_Request)
}

void CBroadcast_WatchBroadcast_Request::SharedCtor() {
  ::memset(&steamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_webrtc_) -
      reinterpret_cast<char*>(&steamid_)) + sizeof(is_webrtc_));
}

CBroadcast_WatchBroadcast_Request::~CBroadcast_WatchBroadcast_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_WatchBroadcast_Request)
  SharedDtor();
}

void CBroadcast_WatchBroadcast_Request::SharedDtor() {
}

void CBroadcast_WatchBroadcast_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBroadcast_WatchBroadcast_Request& CBroadcast_WatchBroadcast_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CBroadcast_WatchBroadcast_Request_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CBroadcast_WatchBroadcast_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_WatchBroadcast_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_webrtc_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(is_webrtc_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CBroadcast_WatchBroadcast_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CBroadcast_WatchBroadcast_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1 [(.proto.steam.description) = "broadcaster steamID."];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed64 existing_broadcast_id = 2 [(.proto.steam.description) = "broadcast session ID (optional, rejoin if specified)."];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_existing_broadcast_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed64 viewer_token = 3 [(.proto.steam.description) = "viewer token received from last WatchRequest call, from browser storage."];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_viewer_token(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 client_ip = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_client_ip(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 client_cell = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_client_cell(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.steam.EBroadcastWatchLocation watch_location = 6 [default = k_EBroadcastWatchLocation_Invalid];
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::steam::EBroadcastWatchLocation_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(6, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_watch_location(static_cast<::proto::steam::EBroadcastWatchLocation>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool is_webrtc = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_is_webrtc(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CBroadcast_WatchBroadcast_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_WatchBroadcast_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1 [(.proto.steam.description) = "broadcaster steamID."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 existing_broadcast_id = 2 [(.proto.steam.description) = "broadcast session ID (optional, rejoin if specified)."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_existing_broadcast_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &existing_broadcast_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 viewer_token = 3 [(.proto.steam.description) = "viewer token received from last WatchRequest call, from browser storage."];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          HasBitSetters::set_has_viewer_token(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &viewer_token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_ip = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_client_ip(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_cell = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_client_cell(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_cell_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.EBroadcastWatchLocation watch_location = 6 [default = k_EBroadcastWatchLocation_Invalid];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::steam::EBroadcastWatchLocation_IsValid(value)) {
            set_watch_location(static_cast< ::proto::steam::EBroadcastWatchLocation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_webrtc = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_is_webrtc(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_webrtc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_WatchBroadcast_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_WatchBroadcast_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CBroadcast_WatchBroadcast_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_WatchBroadcast_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.proto.steam.description) = "broadcaster steamID."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional fixed64 existing_broadcast_id = 2 [(.proto.steam.description) = "broadcast session ID (optional, rejoin if specified)."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->existing_broadcast_id(), output);
  }

  // optional fixed64 viewer_token = 3 [(.proto.steam.description) = "viewer token received from last WatchRequest call, from browser storage."];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->viewer_token(), output);
  }

  // optional uint32 client_ip = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->client_ip(), output);
  }

  // optional uint32 client_cell = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->client_cell(), output);
  }

  // optional .proto.steam.EBroadcastWatchLocation watch_location = 6 [default = k_EBroadcastWatchLocation_Invalid];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->watch_location(), output);
  }

  // optional bool is_webrtc = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_webrtc(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_WatchBroadcast_Request)
}

::google::protobuf::uint8* CBroadcast_WatchBroadcast_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_WatchBroadcast_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.proto.steam.description) = "broadcaster steamID."];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional fixed64 existing_broadcast_id = 2 [(.proto.steam.description) = "broadcast session ID (optional, rejoin if specified)."];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->existing_broadcast_id(), target);
  }

  // optional fixed64 viewer_token = 3 [(.proto.steam.description) = "viewer token received from last WatchRequest call, from browser storage."];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->viewer_token(), target);
  }

  // optional uint32 client_ip = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->client_ip(), target);
  }

  // optional uint32 client_cell = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->client_cell(), target);
  }

  // optional .proto.steam.EBroadcastWatchLocation watch_location = 6 [default = k_EBroadcastWatchLocation_Invalid];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->watch_location(), target);
  }

  // optional bool is_webrtc = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_webrtc(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_WatchBroadcast_Request)
  return target;
}

size_t CBroadcast_WatchBroadcast_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_WatchBroadcast_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional fixed64 steamid = 1 [(.proto.steam.description) = "broadcaster steamID."];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 existing_broadcast_id = 2 [(.proto.steam.description) = "broadcast session ID (optional, rejoin if specified)."];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 viewer_token = 3 [(.proto.steam.description) = "viewer token received from last WatchRequest call, from browser storage."];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 client_ip = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_ip());
    }

    // optional uint32 client_cell = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_cell());
    }

    // optional .proto.steam.EBroadcastWatchLocation watch_location = 6 [default = k_EBroadcastWatchLocation_Invalid];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->watch_location());
    }

    // optional bool is_webrtc = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_WatchBroadcast_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_WatchBroadcast_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_WatchBroadcast_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CBroadcast_WatchBroadcast_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_WatchBroadcast_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_WatchBroadcast_Request)
    MergeFrom(*source);
  }
}

void CBroadcast_WatchBroadcast_Request::MergeFrom(const CBroadcast_WatchBroadcast_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_WatchBroadcast_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      existing_broadcast_id_ = from.existing_broadcast_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      viewer_token_ = from.viewer_token_;
    }
    if (cached_has_bits & 0x00000008u) {
      client_ip_ = from.client_ip_;
    }
    if (cached_has_bits & 0x00000010u) {
      client_cell_ = from.client_cell_;
    }
    if (cached_has_bits & 0x00000020u) {
      watch_location_ = from.watch_location_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_webrtc_ = from.is_webrtc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_WatchBroadcast_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_WatchBroadcast_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_WatchBroadcast_Request::CopyFrom(const CBroadcast_WatchBroadcast_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_WatchBroadcast_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_WatchBroadcast_Request::IsInitialized() const {
  return true;
}

void CBroadcast_WatchBroadcast_Request::Swap(CBroadcast_WatchBroadcast_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_WatchBroadcast_Request::InternalSwap(CBroadcast_WatchBroadcast_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
  swap(existing_broadcast_id_, other->existing_broadcast_id_);
  swap(viewer_token_, other->viewer_token_);
  swap(client_ip_, other->client_ip_);
  swap(client_cell_, other->client_cell_);
  swap(watch_location_, other->watch_location_);
  swap(is_webrtc_, other->is_webrtc_);
}

::google::protobuf::Metadata CBroadcast_WatchBroadcast_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_WatchBroadcast_Response::InitAsDefaultInstance() {
}
class CBroadcast_WatchBroadcast_Response::HasBitSetters {
 public:
  static void set_has_response(CBroadcast_WatchBroadcast_Response* msg) {
    msg->_has_bits_[0] |= 0x00010000u;
  }
  static void set_has_mpd_url(CBroadcast_WatchBroadcast_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_broadcast_id(CBroadcast_WatchBroadcast_Response* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_gameid(CBroadcast_WatchBroadcast_Response* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_title(CBroadcast_WatchBroadcast_Response* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_num_viewers(CBroadcast_WatchBroadcast_Response* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_permission(CBroadcast_WatchBroadcast_Response* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_is_rtmp(CBroadcast_WatchBroadcast_Response* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_seconds_delay(CBroadcast_WatchBroadcast_Response* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_viewer_token(CBroadcast_WatchBroadcast_Response* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_hls_m3u8_master_url(CBroadcast_WatchBroadcast_Response* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_heartbeat_interval(CBroadcast_WatchBroadcast_Response* msg) {
    msg->_has_bits_[0] |= 0x00008000u;
  }
  static void set_has_thumbnail_url(CBroadcast_WatchBroadcast_Response* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_is_webrtc(CBroadcast_WatchBroadcast_Response* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static void set_has_webrtc_session_id(CBroadcast_WatchBroadcast_Response* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
  static void set_has_webrtc_offer_sdp(CBroadcast_WatchBroadcast_Response* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_webrtc_turn_server(CBroadcast_WatchBroadcast_Response* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_WatchBroadcast_Response::kResponseFieldNumber;
const int CBroadcast_WatchBroadcast_Response::kMpdUrlFieldNumber;
const int CBroadcast_WatchBroadcast_Response::kBroadcastIdFieldNumber;
const int CBroadcast_WatchBroadcast_Response::kGameidFieldNumber;
const int CBroadcast_WatchBroadcast_Response::kTitleFieldNumber;
const int CBroadcast_WatchBroadcast_Response::kNumViewersFieldNumber;
const int CBroadcast_WatchBroadcast_Response::kPermissionFieldNumber;
const int CBroadcast_WatchBroadcast_Response::kIsRtmpFieldNumber;
const int CBroadcast_WatchBroadcast_Response::kSecondsDelayFieldNumber;
const int CBroadcast_WatchBroadcast_Response::kViewerTokenFieldNumber;
const int CBroadcast_WatchBroadcast_Response::kHlsM3U8MasterUrlFieldNumber;
const int CBroadcast_WatchBroadcast_Response::kHeartbeatIntervalFieldNumber;
const int CBroadcast_WatchBroadcast_Response::kThumbnailUrlFieldNumber;
const int CBroadcast_WatchBroadcast_Response::kIsWebrtcFieldNumber;
const int CBroadcast_WatchBroadcast_Response::kWebrtcSessionIdFieldNumber;
const int CBroadcast_WatchBroadcast_Response::kWebrtcOfferSdpFieldNumber;
const int CBroadcast_WatchBroadcast_Response::kWebrtcTurnServerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_WatchBroadcast_Response::CBroadcast_WatchBroadcast_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_WatchBroadcast_Response)
}
CBroadcast_WatchBroadcast_Response::CBroadcast_WatchBroadcast_Response(const CBroadcast_WatchBroadcast_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mpd_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mpd_url()) {
    mpd_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mpd_url_);
  }
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  hls_m3u8_master_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hls_m3u8_master_url()) {
    hls_m3u8_master_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hls_m3u8_master_url_);
  }
  thumbnail_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_thumbnail_url()) {
    thumbnail_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.thumbnail_url_);
  }
  webrtc_offer_sdp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_webrtc_offer_sdp()) {
    webrtc_offer_sdp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.webrtc_offer_sdp_);
  }
  webrtc_turn_server_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_webrtc_turn_server()) {
    webrtc_turn_server_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.webrtc_turn_server_);
  }
  ::memcpy(&broadcast_id_, &from.broadcast_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&response_) -
    reinterpret_cast<char*>(&broadcast_id_)) + sizeof(response_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_WatchBroadcast_Response)
}

void CBroadcast_WatchBroadcast_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CBroadcast_WatchBroadcast_Response_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  mpd_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hls_m3u8_master_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thumbnail_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  webrtc_offer_sdp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  webrtc_turn_server_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&broadcast_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heartbeat_interval_) -
      reinterpret_cast<char*>(&broadcast_id_)) + sizeof(heartbeat_interval_));
  response_ = 1;
}

CBroadcast_WatchBroadcast_Response::~CBroadcast_WatchBroadcast_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_WatchBroadcast_Response)
  SharedDtor();
}

void CBroadcast_WatchBroadcast_Response::SharedDtor() {
  mpd_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hls_m3u8_master_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thumbnail_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  webrtc_offer_sdp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  webrtc_turn_server_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_WatchBroadcast_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBroadcast_WatchBroadcast_Response& CBroadcast_WatchBroadcast_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CBroadcast_WatchBroadcast_Response_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CBroadcast_WatchBroadcast_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_WatchBroadcast_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      mpd_url_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      title_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      hls_m3u8_master_url_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      thumbnail_url_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      webrtc_offer_sdp_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      webrtc_turn_server_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&broadcast_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gameid_) -
        reinterpret_cast<char*>(&broadcast_id_)) + sizeof(gameid_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&num_viewers_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&heartbeat_interval_) -
        reinterpret_cast<char*>(&num_viewers_)) + sizeof(heartbeat_interval_));
  }
  response_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CBroadcast_WatchBroadcast_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CBroadcast_WatchBroadcast_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.steam.CBroadcast_WatchBroadcast_Response.EWatchResponse response = 1 [default = k_EWatchResponseReady];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::steam::CBroadcast_WatchBroadcast_Response_EWatchResponse_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_response(static_cast<::proto::steam::CBroadcast_WatchBroadcast_Response_EWatchResponse>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string mpd_url = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CBroadcast_WatchBroadcast_Response.mpd_url");
        object = msg->mutable_mpd_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional fixed64 broadcast_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_broadcast_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint64 gameid = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_gameid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string title = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CBroadcast_WatchBroadcast_Response.title");
        object = msg->mutable_title();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 num_viewers = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_num_viewers(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 permission = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_permission(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool is_rtmp = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_is_rtmp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 seconds_delay = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_seconds_delay(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 viewer_token = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 81) goto handle_unusual;
        msg->set_viewer_token(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional string hls_m3u8_master_url = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CBroadcast_WatchBroadcast_Response.hls_m3u8_master_url");
        object = msg->mutable_hls_m3u8_master_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional int32 heartbeat_interval = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_heartbeat_interval(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string thumbnail_url = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 106) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CBroadcast_WatchBroadcast_Response.thumbnail_url");
        object = msg->mutable_thumbnail_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool is_webrtc = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_is_webrtc(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 webrtc_session_id = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 121) goto handle_unusual;
        msg->set_webrtc_session_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional string webrtc_offer_sdp = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 130) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CBroadcast_WatchBroadcast_Response.webrtc_offer_sdp");
        object = msg->mutable_webrtc_offer_sdp();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string webrtc_turn_server = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 138) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CBroadcast_WatchBroadcast_Response.webrtc_turn_server");
        object = msg->mutable_webrtc_turn_server();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CBroadcast_WatchBroadcast_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_WatchBroadcast_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.steam.CBroadcast_WatchBroadcast_Response.EWatchResponse response = 1 [default = k_EWatchResponseReady];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::steam::CBroadcast_WatchBroadcast_Response_EWatchResponse_IsValid(value)) {
            set_response(static_cast< ::proto::steam::CBroadcast_WatchBroadcast_Response_EWatchResponse >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string mpd_url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mpd_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mpd_url().data(), static_cast<int>(this->mpd_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CBroadcast_WatchBroadcast_Response.mpd_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 broadcast_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          HasBitSetters::set_has_broadcast_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &broadcast_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 gameid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_gameid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string title = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CBroadcast_WatchBroadcast_Response.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_viewers = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_num_viewers(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_viewers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 permission = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_permission(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &permission_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_rtmp = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_is_rtmp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_rtmp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 seconds_delay = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_seconds_delay(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seconds_delay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 viewer_token = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (81 & 0xFF)) {
          HasBitSetters::set_has_viewer_token(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &viewer_token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string hls_m3u8_master_url = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hls_m3u8_master_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hls_m3u8_master_url().data(), static_cast<int>(this->hls_m3u8_master_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CBroadcast_WatchBroadcast_Response.hls_m3u8_master_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 heartbeat_interval = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_heartbeat_interval(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &heartbeat_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string thumbnail_url = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (106 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_thumbnail_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->thumbnail_url().data(), static_cast<int>(this->thumbnail_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CBroadcast_WatchBroadcast_Response.thumbnail_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_webrtc = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {
          HasBitSetters::set_has_is_webrtc(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_webrtc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 webrtc_session_id = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (121 & 0xFF)) {
          HasBitSetters::set_has_webrtc_session_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &webrtc_session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string webrtc_offer_sdp = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (130 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_webrtc_offer_sdp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->webrtc_offer_sdp().data(), static_cast<int>(this->webrtc_offer_sdp().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CBroadcast_WatchBroadcast_Response.webrtc_offer_sdp");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string webrtc_turn_server = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (138 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_webrtc_turn_server()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->webrtc_turn_server().data(), static_cast<int>(this->webrtc_turn_server().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CBroadcast_WatchBroadcast_Response.webrtc_turn_server");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_WatchBroadcast_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_WatchBroadcast_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CBroadcast_WatchBroadcast_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_WatchBroadcast_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.CBroadcast_WatchBroadcast_Response.EWatchResponse response = 1 [default = k_EWatchResponseReady];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->response(), output);
  }

  // optional string mpd_url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mpd_url().data(), static_cast<int>(this->mpd_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_WatchBroadcast_Response.mpd_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mpd_url(), output);
  }

  // optional fixed64 broadcast_id = 3;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->broadcast_id(), output);
  }

  // optional uint64 gameid = 4;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->gameid(), output);
  }

  // optional string title = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_WatchBroadcast_Response.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->title(), output);
  }

  // optional uint32 num_viewers = 6;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->num_viewers(), output);
  }

  // optional int32 permission = 7;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->permission(), output);
  }

  // optional bool is_rtmp = 8;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_rtmp(), output);
  }

  // optional int32 seconds_delay = 9;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->seconds_delay(), output);
  }

  // optional fixed64 viewer_token = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(10, this->viewer_token(), output);
  }

  // optional string hls_m3u8_master_url = 11;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hls_m3u8_master_url().data(), static_cast<int>(this->hls_m3u8_master_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_WatchBroadcast_Response.hls_m3u8_master_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->hls_m3u8_master_url(), output);
  }

  // optional int32 heartbeat_interval = 12;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->heartbeat_interval(), output);
  }

  // optional string thumbnail_url = 13;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->thumbnail_url().data(), static_cast<int>(this->thumbnail_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_WatchBroadcast_Response.thumbnail_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->thumbnail_url(), output);
  }

  // optional bool is_webrtc = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->is_webrtc(), output);
  }

  // optional fixed64 webrtc_session_id = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(15, this->webrtc_session_id(), output);
  }

  // optional string webrtc_offer_sdp = 16;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->webrtc_offer_sdp().data(), static_cast<int>(this->webrtc_offer_sdp().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_WatchBroadcast_Response.webrtc_offer_sdp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->webrtc_offer_sdp(), output);
  }

  // optional string webrtc_turn_server = 17;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->webrtc_turn_server().data(), static_cast<int>(this->webrtc_turn_server().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_WatchBroadcast_Response.webrtc_turn_server");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->webrtc_turn_server(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_WatchBroadcast_Response)
}

::google::protobuf::uint8* CBroadcast_WatchBroadcast_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_WatchBroadcast_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.CBroadcast_WatchBroadcast_Response.EWatchResponse response = 1 [default = k_EWatchResponseReady];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->response(), target);
  }

  // optional string mpd_url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mpd_url().data(), static_cast<int>(this->mpd_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_WatchBroadcast_Response.mpd_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mpd_url(), target);
  }

  // optional fixed64 broadcast_id = 3;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->broadcast_id(), target);
  }

  // optional uint64 gameid = 4;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->gameid(), target);
  }

  // optional string title = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_WatchBroadcast_Response.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->title(), target);
  }

  // optional uint32 num_viewers = 6;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->num_viewers(), target);
  }

  // optional int32 permission = 7;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->permission(), target);
  }

  // optional bool is_rtmp = 8;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_rtmp(), target);
  }

  // optional int32 seconds_delay = 9;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->seconds_delay(), target);
  }

  // optional fixed64 viewer_token = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(10, this->viewer_token(), target);
  }

  // optional string hls_m3u8_master_url = 11;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hls_m3u8_master_url().data(), static_cast<int>(this->hls_m3u8_master_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_WatchBroadcast_Response.hls_m3u8_master_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->hls_m3u8_master_url(), target);
  }

  // optional int32 heartbeat_interval = 12;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->heartbeat_interval(), target);
  }

  // optional string thumbnail_url = 13;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->thumbnail_url().data(), static_cast<int>(this->thumbnail_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_WatchBroadcast_Response.thumbnail_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->thumbnail_url(), target);
  }

  // optional bool is_webrtc = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->is_webrtc(), target);
  }

  // optional fixed64 webrtc_session_id = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(15, this->webrtc_session_id(), target);
  }

  // optional string webrtc_offer_sdp = 16;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->webrtc_offer_sdp().data(), static_cast<int>(this->webrtc_offer_sdp().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_WatchBroadcast_Response.webrtc_offer_sdp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->webrtc_offer_sdp(), target);
  }

  // optional string webrtc_turn_server = 17;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->webrtc_turn_server().data(), static_cast<int>(this->webrtc_turn_server().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_WatchBroadcast_Response.webrtc_turn_server");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->webrtc_turn_server(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_WatchBroadcast_Response)
  return target;
}

size_t CBroadcast_WatchBroadcast_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_WatchBroadcast_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string mpd_url = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mpd_url());
    }

    // optional string title = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string hls_m3u8_master_url = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hls_m3u8_master_url());
    }

    // optional string thumbnail_url = 13;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->thumbnail_url());
    }

    // optional string webrtc_offer_sdp = 16;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->webrtc_offer_sdp());
    }

    // optional string webrtc_turn_server = 17;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->webrtc_turn_server());
    }

    // optional fixed64 broadcast_id = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional uint64 gameid = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gameid());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 num_viewers = 6;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_viewers());
    }

    // optional int32 permission = 7;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->permission());
    }

    // optional fixed64 viewer_token = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional int32 seconds_delay = 9;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seconds_delay());
    }

    // optional bool is_rtmp = 8;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool is_webrtc = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional fixed64 webrtc_session_id = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

    // optional int32 heartbeat_interval = 12;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->heartbeat_interval());
    }

  }
  // optional .proto.steam.CBroadcast_WatchBroadcast_Response.EWatchResponse response = 1 [default = k_EWatchResponseReady];
  if (cached_has_bits & 0x00010000u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->response());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_WatchBroadcast_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_WatchBroadcast_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_WatchBroadcast_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CBroadcast_WatchBroadcast_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_WatchBroadcast_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_WatchBroadcast_Response)
    MergeFrom(*source);
  }
}

void CBroadcast_WatchBroadcast_Response::MergeFrom(const CBroadcast_WatchBroadcast_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_WatchBroadcast_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      mpd_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mpd_url_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      hls_m3u8_master_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hls_m3u8_master_url_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      thumbnail_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.thumbnail_url_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      webrtc_offer_sdp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.webrtc_offer_sdp_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      webrtc_turn_server_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.webrtc_turn_server_);
    }
    if (cached_has_bits & 0x00000040u) {
      broadcast_id_ = from.broadcast_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      gameid_ = from.gameid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      num_viewers_ = from.num_viewers_;
    }
    if (cached_has_bits & 0x00000200u) {
      permission_ = from.permission_;
    }
    if (cached_has_bits & 0x00000400u) {
      viewer_token_ = from.viewer_token_;
    }
    if (cached_has_bits & 0x00000800u) {
      seconds_delay_ = from.seconds_delay_;
    }
    if (cached_has_bits & 0x00001000u) {
      is_rtmp_ = from.is_rtmp_;
    }
    if (cached_has_bits & 0x00002000u) {
      is_webrtc_ = from.is_webrtc_;
    }
    if (cached_has_bits & 0x00004000u) {
      webrtc_session_id_ = from.webrtc_session_id_;
    }
    if (cached_has_bits & 0x00008000u) {
      heartbeat_interval_ = from.heartbeat_interval_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    set_response(from.response());
  }
}

void CBroadcast_WatchBroadcast_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_WatchBroadcast_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_WatchBroadcast_Response::CopyFrom(const CBroadcast_WatchBroadcast_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_WatchBroadcast_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_WatchBroadcast_Response::IsInitialized() const {
  return true;
}

void CBroadcast_WatchBroadcast_Response::Swap(CBroadcast_WatchBroadcast_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_WatchBroadcast_Response::InternalSwap(CBroadcast_WatchBroadcast_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mpd_url_.Swap(&other->mpd_url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  title_.Swap(&other->title_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hls_m3u8_master_url_.Swap(&other->hls_m3u8_master_url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  thumbnail_url_.Swap(&other->thumbnail_url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  webrtc_offer_sdp_.Swap(&other->webrtc_offer_sdp_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  webrtc_turn_server_.Swap(&other->webrtc_turn_server_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(broadcast_id_, other->broadcast_id_);
  swap(gameid_, other->gameid_);
  swap(num_viewers_, other->num_viewers_);
  swap(permission_, other->permission_);
  swap(viewer_token_, other->viewer_token_);
  swap(seconds_delay_, other->seconds_delay_);
  swap(is_rtmp_, other->is_rtmp_);
  swap(is_webrtc_, other->is_webrtc_);
  swap(webrtc_session_id_, other->webrtc_session_id_);
  swap(heartbeat_interval_, other->heartbeat_interval_);
  swap(response_, other->response_);
}

::google::protobuf::Metadata CBroadcast_WatchBroadcast_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_HeartbeatBroadcast_Notification::InitAsDefaultInstance() {
}
class CBroadcast_HeartbeatBroadcast_Notification::HasBitSetters {
 public:
  static void set_has_steamid(CBroadcast_HeartbeatBroadcast_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_broadcast_id(CBroadcast_HeartbeatBroadcast_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_viewer_token(CBroadcast_HeartbeatBroadcast_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_representation(CBroadcast_HeartbeatBroadcast_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_HeartbeatBroadcast_Notification::kSteamidFieldNumber;
const int CBroadcast_HeartbeatBroadcast_Notification::kBroadcastIdFieldNumber;
const int CBroadcast_HeartbeatBroadcast_Notification::kViewerTokenFieldNumber;
const int CBroadcast_HeartbeatBroadcast_Notification::kRepresentationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_HeartbeatBroadcast_Notification::CBroadcast_HeartbeatBroadcast_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_HeartbeatBroadcast_Notification)
}
CBroadcast_HeartbeatBroadcast_Notification::CBroadcast_HeartbeatBroadcast_Notification(const CBroadcast_HeartbeatBroadcast_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&representation_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(representation_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_HeartbeatBroadcast_Notification)
}

void CBroadcast_HeartbeatBroadcast_Notification::SharedCtor() {
  ::memset(&steamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&representation_) -
      reinterpret_cast<char*>(&steamid_)) + sizeof(representation_));
}

CBroadcast_HeartbeatBroadcast_Notification::~CBroadcast_HeartbeatBroadcast_Notification() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_HeartbeatBroadcast_Notification)
  SharedDtor();
}

void CBroadcast_HeartbeatBroadcast_Notification::SharedDtor() {
}

void CBroadcast_HeartbeatBroadcast_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBroadcast_HeartbeatBroadcast_Notification& CBroadcast_HeartbeatBroadcast_Notification::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CBroadcast_HeartbeatBroadcast_Notification_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CBroadcast_HeartbeatBroadcast_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_HeartbeatBroadcast_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&representation_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(representation_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CBroadcast_HeartbeatBroadcast_Notification::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CBroadcast_HeartbeatBroadcast_Notification*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1 [(.proto.steam.description) = "broadcaster steamID."];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed64 broadcast_id = 2 [(.proto.steam.description) = "broadcast session ID."];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_broadcast_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed64 viewer_token = 3 [(.proto.steam.description) = "viewer token received from last WatchRequest call, from browser storage."];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_viewer_token(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 representation = 4 [(.proto.steam.description) = "video stream representation watching"];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_representation(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CBroadcast_HeartbeatBroadcast_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_HeartbeatBroadcast_Notification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1 [(.proto.steam.description) = "broadcaster steamID."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 broadcast_id = 2 [(.proto.steam.description) = "broadcast session ID."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_broadcast_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &broadcast_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 viewer_token = 3 [(.proto.steam.description) = "viewer token received from last WatchRequest call, from browser storage."];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          HasBitSetters::set_has_viewer_token(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &viewer_token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 representation = 4 [(.proto.steam.description) = "video stream representation watching"];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_representation(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &representation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_HeartbeatBroadcast_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_HeartbeatBroadcast_Notification)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CBroadcast_HeartbeatBroadcast_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_HeartbeatBroadcast_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.proto.steam.description) = "broadcaster steamID."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional fixed64 broadcast_id = 2 [(.proto.steam.description) = "broadcast session ID."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->broadcast_id(), output);
  }

  // optional fixed64 viewer_token = 3 [(.proto.steam.description) = "viewer token received from last WatchRequest call, from browser storage."];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->viewer_token(), output);
  }

  // optional uint32 representation = 4 [(.proto.steam.description) = "video stream representation watching"];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->representation(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_HeartbeatBroadcast_Notification)
}

::google::protobuf::uint8* CBroadcast_HeartbeatBroadcast_Notification::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_HeartbeatBroadcast_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.proto.steam.description) = "broadcaster steamID."];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional fixed64 broadcast_id = 2 [(.proto.steam.description) = "broadcast session ID."];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->broadcast_id(), target);
  }

  // optional fixed64 viewer_token = 3 [(.proto.steam.description) = "viewer token received from last WatchRequest call, from browser storage."];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->viewer_token(), target);
  }

  // optional uint32 representation = 4 [(.proto.steam.description) = "video stream representation watching"];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->representation(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_HeartbeatBroadcast_Notification)
  return target;
}

size_t CBroadcast_HeartbeatBroadcast_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_HeartbeatBroadcast_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional fixed64 steamid = 1 [(.proto.steam.description) = "broadcaster steamID."];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 broadcast_id = 2 [(.proto.steam.description) = "broadcast session ID."];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 viewer_token = 3 [(.proto.steam.description) = "viewer token received from last WatchRequest call, from browser storage."];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 representation = 4 [(.proto.steam.description) = "video stream representation watching"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->representation());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_HeartbeatBroadcast_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_HeartbeatBroadcast_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_HeartbeatBroadcast_Notification* source =
      ::google::protobuf::DynamicCastToGenerated<CBroadcast_HeartbeatBroadcast_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_HeartbeatBroadcast_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_HeartbeatBroadcast_Notification)
    MergeFrom(*source);
  }
}

void CBroadcast_HeartbeatBroadcast_Notification::MergeFrom(const CBroadcast_HeartbeatBroadcast_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_HeartbeatBroadcast_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      broadcast_id_ = from.broadcast_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      viewer_token_ = from.viewer_token_;
    }
    if (cached_has_bits & 0x00000008u) {
      representation_ = from.representation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_HeartbeatBroadcast_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_HeartbeatBroadcast_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_HeartbeatBroadcast_Notification::CopyFrom(const CBroadcast_HeartbeatBroadcast_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_HeartbeatBroadcast_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_HeartbeatBroadcast_Notification::IsInitialized() const {
  return true;
}

void CBroadcast_HeartbeatBroadcast_Notification::Swap(CBroadcast_HeartbeatBroadcast_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_HeartbeatBroadcast_Notification::InternalSwap(CBroadcast_HeartbeatBroadcast_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
  swap(broadcast_id_, other->broadcast_id_);
  swap(viewer_token_, other->viewer_token_);
  swap(representation_, other->representation_);
}

::google::protobuf::Metadata CBroadcast_HeartbeatBroadcast_Notification::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_StopWatchingBroadcast_Notification::InitAsDefaultInstance() {
}
class CBroadcast_StopWatchingBroadcast_Notification::HasBitSetters {
 public:
  static void set_has_steamid(CBroadcast_StopWatchingBroadcast_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_broadcast_id(CBroadcast_StopWatchingBroadcast_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_viewer_token(CBroadcast_StopWatchingBroadcast_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_StopWatchingBroadcast_Notification::kSteamidFieldNumber;
const int CBroadcast_StopWatchingBroadcast_Notification::kBroadcastIdFieldNumber;
const int CBroadcast_StopWatchingBroadcast_Notification::kViewerTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_StopWatchingBroadcast_Notification::CBroadcast_StopWatchingBroadcast_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_StopWatchingBroadcast_Notification)
}
CBroadcast_StopWatchingBroadcast_Notification::CBroadcast_StopWatchingBroadcast_Notification(const CBroadcast_StopWatchingBroadcast_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&viewer_token_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(viewer_token_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_StopWatchingBroadcast_Notification)
}

void CBroadcast_StopWatchingBroadcast_Notification::SharedCtor() {
  ::memset(&steamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&viewer_token_) -
      reinterpret_cast<char*>(&steamid_)) + sizeof(viewer_token_));
}

CBroadcast_StopWatchingBroadcast_Notification::~CBroadcast_StopWatchingBroadcast_Notification() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_StopWatchingBroadcast_Notification)
  SharedDtor();
}

void CBroadcast_StopWatchingBroadcast_Notification::SharedDtor() {
}

void CBroadcast_StopWatchingBroadcast_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBroadcast_StopWatchingBroadcast_Notification& CBroadcast_StopWatchingBroadcast_Notification::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CBroadcast_StopWatchingBroadcast_Notification_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CBroadcast_StopWatchingBroadcast_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_StopWatchingBroadcast_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&viewer_token_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(viewer_token_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CBroadcast_StopWatchingBroadcast_Notification::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CBroadcast_StopWatchingBroadcast_Notification*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1 [(.proto.steam.description) = "broadcaster steamID."];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed64 broadcast_id = 2 [(.proto.steam.description) = "broadcast session ID."];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_broadcast_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed64 viewer_token = 3 [(.proto.steam.description) = "viewer token received from last WatchRequest call, from browser storage."];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_viewer_token(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CBroadcast_StopWatchingBroadcast_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_StopWatchingBroadcast_Notification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1 [(.proto.steam.description) = "broadcaster steamID."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 broadcast_id = 2 [(.proto.steam.description) = "broadcast session ID."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_broadcast_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &broadcast_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 viewer_token = 3 [(.proto.steam.description) = "viewer token received from last WatchRequest call, from browser storage."];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          HasBitSetters::set_has_viewer_token(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &viewer_token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_StopWatchingBroadcast_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_StopWatchingBroadcast_Notification)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CBroadcast_StopWatchingBroadcast_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_StopWatchingBroadcast_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.proto.steam.description) = "broadcaster steamID."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional fixed64 broadcast_id = 2 [(.proto.steam.description) = "broadcast session ID."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->broadcast_id(), output);
  }

  // optional fixed64 viewer_token = 3 [(.proto.steam.description) = "viewer token received from last WatchRequest call, from browser storage."];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->viewer_token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_StopWatchingBroadcast_Notification)
}

::google::protobuf::uint8* CBroadcast_StopWatchingBroadcast_Notification::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_StopWatchingBroadcast_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.proto.steam.description) = "broadcaster steamID."];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional fixed64 broadcast_id = 2 [(.proto.steam.description) = "broadcast session ID."];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->broadcast_id(), target);
  }

  // optional fixed64 viewer_token = 3 [(.proto.steam.description) = "viewer token received from last WatchRequest call, from browser storage."];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->viewer_token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_StopWatchingBroadcast_Notification)
  return target;
}

size_t CBroadcast_StopWatchingBroadcast_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_StopWatchingBroadcast_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 steamid = 1 [(.proto.steam.description) = "broadcaster steamID."];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 broadcast_id = 2 [(.proto.steam.description) = "broadcast session ID."];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 viewer_token = 3 [(.proto.steam.description) = "viewer token received from last WatchRequest call, from browser storage."];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_StopWatchingBroadcast_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_StopWatchingBroadcast_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_StopWatchingBroadcast_Notification* source =
      ::google::protobuf::DynamicCastToGenerated<CBroadcast_StopWatchingBroadcast_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_StopWatchingBroadcast_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_StopWatchingBroadcast_Notification)
    MergeFrom(*source);
  }
}

void CBroadcast_StopWatchingBroadcast_Notification::MergeFrom(const CBroadcast_StopWatchingBroadcast_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_StopWatchingBroadcast_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      broadcast_id_ = from.broadcast_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      viewer_token_ = from.viewer_token_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_StopWatchingBroadcast_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_StopWatchingBroadcast_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_StopWatchingBroadcast_Notification::CopyFrom(const CBroadcast_StopWatchingBroadcast_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_StopWatchingBroadcast_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_StopWatchingBroadcast_Notification::IsInitialized() const {
  return true;
}

void CBroadcast_StopWatchingBroadcast_Notification::Swap(CBroadcast_StopWatchingBroadcast_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_StopWatchingBroadcast_Notification::InternalSwap(CBroadcast_StopWatchingBroadcast_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
  swap(broadcast_id_, other->broadcast_id_);
  swap(viewer_token_, other->viewer_token_);
}

::google::protobuf::Metadata CBroadcast_StopWatchingBroadcast_Notification::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_GetBroadcastStatus_Request::InitAsDefaultInstance() {
}
class CBroadcast_GetBroadcastStatus_Request::HasBitSetters {
 public:
  static void set_has_steamid(CBroadcast_GetBroadcastStatus_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_broadcast_id(CBroadcast_GetBroadcastStatus_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_GetBroadcastStatus_Request::kSteamidFieldNumber;
const int CBroadcast_GetBroadcastStatus_Request::kBroadcastIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_GetBroadcastStatus_Request::CBroadcast_GetBroadcastStatus_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_GetBroadcastStatus_Request)
}
CBroadcast_GetBroadcastStatus_Request::CBroadcast_GetBroadcastStatus_Request(const CBroadcast_GetBroadcastStatus_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&broadcast_id_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(broadcast_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_GetBroadcastStatus_Request)
}

void CBroadcast_GetBroadcastStatus_Request::SharedCtor() {
  ::memset(&steamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&broadcast_id_) -
      reinterpret_cast<char*>(&steamid_)) + sizeof(broadcast_id_));
}

CBroadcast_GetBroadcastStatus_Request::~CBroadcast_GetBroadcastStatus_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_GetBroadcastStatus_Request)
  SharedDtor();
}

void CBroadcast_GetBroadcastStatus_Request::SharedDtor() {
}

void CBroadcast_GetBroadcastStatus_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBroadcast_GetBroadcastStatus_Request& CBroadcast_GetBroadcastStatus_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CBroadcast_GetBroadcastStatus_Request_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CBroadcast_GetBroadcastStatus_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_GetBroadcastStatus_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&broadcast_id_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(broadcast_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CBroadcast_GetBroadcastStatus_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CBroadcast_GetBroadcastStatus_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1 [(.proto.steam.description) = "broadcaster steamID."];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed64 broadcast_id = 2 [(.proto.steam.description) = "broadcast session ID to proof that user is allowed to see details."];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_broadcast_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CBroadcast_GetBroadcastStatus_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_GetBroadcastStatus_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1 [(.proto.steam.description) = "broadcaster steamID."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 broadcast_id = 2 [(.proto.steam.description) = "broadcast session ID to proof that user is allowed to see details."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_broadcast_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &broadcast_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_GetBroadcastStatus_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_GetBroadcastStatus_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CBroadcast_GetBroadcastStatus_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_GetBroadcastStatus_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.proto.steam.description) = "broadcaster steamID."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional fixed64 broadcast_id = 2 [(.proto.steam.description) = "broadcast session ID to proof that user is allowed to see details."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->broadcast_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_GetBroadcastStatus_Request)
}

::google::protobuf::uint8* CBroadcast_GetBroadcastStatus_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_GetBroadcastStatus_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.proto.steam.description) = "broadcaster steamID."];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional fixed64 broadcast_id = 2 [(.proto.steam.description) = "broadcast session ID to proof that user is allowed to see details."];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->broadcast_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_GetBroadcastStatus_Request)
  return target;
}

size_t CBroadcast_GetBroadcastStatus_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_GetBroadcastStatus_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steamid = 1 [(.proto.steam.description) = "broadcaster steamID."];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 broadcast_id = 2 [(.proto.steam.description) = "broadcast session ID to proof that user is allowed to see details."];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_GetBroadcastStatus_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_GetBroadcastStatus_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_GetBroadcastStatus_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CBroadcast_GetBroadcastStatus_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_GetBroadcastStatus_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_GetBroadcastStatus_Request)
    MergeFrom(*source);
  }
}

void CBroadcast_GetBroadcastStatus_Request::MergeFrom(const CBroadcast_GetBroadcastStatus_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_GetBroadcastStatus_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      broadcast_id_ = from.broadcast_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_GetBroadcastStatus_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_GetBroadcastStatus_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_GetBroadcastStatus_Request::CopyFrom(const CBroadcast_GetBroadcastStatus_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_GetBroadcastStatus_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_GetBroadcastStatus_Request::IsInitialized() const {
  return true;
}

void CBroadcast_GetBroadcastStatus_Request::Swap(CBroadcast_GetBroadcastStatus_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_GetBroadcastStatus_Request::InternalSwap(CBroadcast_GetBroadcastStatus_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
  swap(broadcast_id_, other->broadcast_id_);
}

::google::protobuf::Metadata CBroadcast_GetBroadcastStatus_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_GetBroadcastStatus_Response::InitAsDefaultInstance() {
}
class CBroadcast_GetBroadcastStatus_Response::HasBitSetters {
 public:
  static void set_has_gameid(CBroadcast_GetBroadcastStatus_Response* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_title(CBroadcast_GetBroadcastStatus_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_num_viewers(CBroadcast_GetBroadcastStatus_Response* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_permission(CBroadcast_GetBroadcastStatus_Response* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_is_rtmp(CBroadcast_GetBroadcastStatus_Response* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_seconds_delay(CBroadcast_GetBroadcastStatus_Response* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_is_publisher(CBroadcast_GetBroadcastStatus_Response* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_thumbnail_url(CBroadcast_GetBroadcastStatus_Response* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_update_interval(CBroadcast_GetBroadcastStatus_Response* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_is_uploading(CBroadcast_GetBroadcastStatus_Response* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_duration(CBroadcast_GetBroadcastStatus_Response* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_GetBroadcastStatus_Response::kGameidFieldNumber;
const int CBroadcast_GetBroadcastStatus_Response::kTitleFieldNumber;
const int CBroadcast_GetBroadcastStatus_Response::kNumViewersFieldNumber;
const int CBroadcast_GetBroadcastStatus_Response::kPermissionFieldNumber;
const int CBroadcast_GetBroadcastStatus_Response::kIsRtmpFieldNumber;
const int CBroadcast_GetBroadcastStatus_Response::kSecondsDelayFieldNumber;
const int CBroadcast_GetBroadcastStatus_Response::kIsPublisherFieldNumber;
const int CBroadcast_GetBroadcastStatus_Response::kThumbnailUrlFieldNumber;
const int CBroadcast_GetBroadcastStatus_Response::kUpdateIntervalFieldNumber;
const int CBroadcast_GetBroadcastStatus_Response::kIsUploadingFieldNumber;
const int CBroadcast_GetBroadcastStatus_Response::kDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_GetBroadcastStatus_Response::CBroadcast_GetBroadcastStatus_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_GetBroadcastStatus_Response)
}
CBroadcast_GetBroadcastStatus_Response::CBroadcast_GetBroadcastStatus_Response(const CBroadcast_GetBroadcastStatus_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  thumbnail_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_thumbnail_url()) {
    thumbnail_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.thumbnail_url_);
  }
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_GetBroadcastStatus_Response)
}

void CBroadcast_GetBroadcastStatus_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CBroadcast_GetBroadcastStatus_Response_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thumbnail_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(duration_));
}

CBroadcast_GetBroadcastStatus_Response::~CBroadcast_GetBroadcastStatus_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_GetBroadcastStatus_Response)
  SharedDtor();
}

void CBroadcast_GetBroadcastStatus_Response::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thumbnail_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_GetBroadcastStatus_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBroadcast_GetBroadcastStatus_Response& CBroadcast_GetBroadcastStatus_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CBroadcast_GetBroadcastStatus_Response_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CBroadcast_GetBroadcastStatus_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_GetBroadcastStatus_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      title_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      thumbnail_url_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_publisher_) -
        reinterpret_cast<char*>(&gameid_)) + sizeof(is_publisher_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&is_uploading_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&duration_) -
        reinterpret_cast<char*>(&is_uploading_)) + sizeof(duration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CBroadcast_GetBroadcastStatus_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CBroadcast_GetBroadcastStatus_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 gameid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_gameid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string title = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CBroadcast_GetBroadcastStatus_Response.title");
        object = msg->mutable_title();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 num_viewers = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_num_viewers(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 permission = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_permission(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool is_rtmp = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_is_rtmp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 seconds_delay = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_seconds_delay(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool is_publisher = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_is_publisher(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string thumbnail_url = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CBroadcast_GetBroadcastStatus_Response.thumbnail_url");
        object = msg->mutable_thumbnail_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional int32 update_interval = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_update_interval(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool is_uploading = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_is_uploading(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 duration = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_duration(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CBroadcast_GetBroadcastStatus_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_GetBroadcastStatus_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 gameid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_gameid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string title = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CBroadcast_GetBroadcastStatus_Response.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_viewers = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_num_viewers(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_viewers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 permission = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_permission(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &permission_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_rtmp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_is_rtmp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_rtmp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 seconds_delay = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_seconds_delay(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seconds_delay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_publisher = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_is_publisher(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_publisher_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string thumbnail_url = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_thumbnail_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->thumbnail_url().data(), static_cast<int>(this->thumbnail_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CBroadcast_GetBroadcastStatus_Response.thumbnail_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 update_interval = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_update_interval(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &update_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_uploading = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_is_uploading(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_uploading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 duration = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_duration(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_GetBroadcastStatus_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_GetBroadcastStatus_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CBroadcast_GetBroadcastStatus_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_GetBroadcastStatus_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 gameid = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->gameid(), output);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_GetBroadcastStatus_Response.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // optional uint32 num_viewers = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num_viewers(), output);
  }

  // optional int32 permission = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->permission(), output);
  }

  // optional bool is_rtmp = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_rtmp(), output);
  }

  // optional int32 seconds_delay = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->seconds_delay(), output);
  }

  // optional bool is_publisher = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_publisher(), output);
  }

  // optional string thumbnail_url = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->thumbnail_url().data(), static_cast<int>(this->thumbnail_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_GetBroadcastStatus_Response.thumbnail_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->thumbnail_url(), output);
  }

  // optional int32 update_interval = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->update_interval(), output);
  }

  // optional bool is_uploading = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_uploading(), output);
  }

  // optional uint32 duration = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->duration(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_GetBroadcastStatus_Response)
}

::google::protobuf::uint8* CBroadcast_GetBroadcastStatus_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_GetBroadcastStatus_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 gameid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->gameid(), target);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_GetBroadcastStatus_Response.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // optional uint32 num_viewers = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num_viewers(), target);
  }

  // optional int32 permission = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->permission(), target);
  }

  // optional bool is_rtmp = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_rtmp(), target);
  }

  // optional int32 seconds_delay = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->seconds_delay(), target);
  }

  // optional bool is_publisher = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_publisher(), target);
  }

  // optional string thumbnail_url = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->thumbnail_url().data(), static_cast<int>(this->thumbnail_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_GetBroadcastStatus_Response.thumbnail_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->thumbnail_url(), target);
  }

  // optional int32 update_interval = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->update_interval(), target);
  }

  // optional bool is_uploading = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_uploading(), target);
  }

  // optional uint32 duration = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->duration(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_GetBroadcastStatus_Response)
  return target;
}

size_t CBroadcast_GetBroadcastStatus_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_GetBroadcastStatus_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string title = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string thumbnail_url = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->thumbnail_url());
    }

    // optional uint64 gameid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gameid());
    }

    // optional uint32 num_viewers = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_viewers());
    }

    // optional int32 permission = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->permission());
    }

    // optional int32 seconds_delay = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seconds_delay());
    }

    // optional bool is_rtmp = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool is_publisher = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional bool is_uploading = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional int32 update_interval = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->update_interval());
    }

    // optional uint32 duration = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duration());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_GetBroadcastStatus_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_GetBroadcastStatus_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_GetBroadcastStatus_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CBroadcast_GetBroadcastStatus_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_GetBroadcastStatus_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_GetBroadcastStatus_Response)
    MergeFrom(*source);
  }
}

void CBroadcast_GetBroadcastStatus_Response::MergeFrom(const CBroadcast_GetBroadcastStatus_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_GetBroadcastStatus_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      thumbnail_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.thumbnail_url_);
    }
    if (cached_has_bits & 0x00000004u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000008u) {
      num_viewers_ = from.num_viewers_;
    }
    if (cached_has_bits & 0x00000010u) {
      permission_ = from.permission_;
    }
    if (cached_has_bits & 0x00000020u) {
      seconds_delay_ = from.seconds_delay_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_rtmp_ = from.is_rtmp_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_publisher_ = from.is_publisher_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      is_uploading_ = from.is_uploading_;
    }
    if (cached_has_bits & 0x00000200u) {
      update_interval_ = from.update_interval_;
    }
    if (cached_has_bits & 0x00000400u) {
      duration_ = from.duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_GetBroadcastStatus_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_GetBroadcastStatus_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_GetBroadcastStatus_Response::CopyFrom(const CBroadcast_GetBroadcastStatus_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_GetBroadcastStatus_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_GetBroadcastStatus_Response::IsInitialized() const {
  return true;
}

void CBroadcast_GetBroadcastStatus_Response::Swap(CBroadcast_GetBroadcastStatus_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_GetBroadcastStatus_Response::InternalSwap(CBroadcast_GetBroadcastStatus_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  title_.Swap(&other->title_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  thumbnail_url_.Swap(&other->thumbnail_url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(gameid_, other->gameid_);
  swap(num_viewers_, other->num_viewers_);
  swap(permission_, other->permission_);
  swap(seconds_delay_, other->seconds_delay_);
  swap(is_rtmp_, other->is_rtmp_);
  swap(is_publisher_, other->is_publisher_);
  swap(is_uploading_, other->is_uploading_);
  swap(update_interval_, other->update_interval_);
  swap(duration_, other->duration_);
}

::google::protobuf::Metadata CBroadcast_GetBroadcastStatus_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_GetBroadcastThumbnail_Request::InitAsDefaultInstance() {
}
class CBroadcast_GetBroadcastThumbnail_Request::HasBitSetters {
 public:
  static void set_has_steamid(CBroadcast_GetBroadcastThumbnail_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_broadcast_id(CBroadcast_GetBroadcastThumbnail_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_GetBroadcastThumbnail_Request::kSteamidFieldNumber;
const int CBroadcast_GetBroadcastThumbnail_Request::kBroadcastIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_GetBroadcastThumbnail_Request::CBroadcast_GetBroadcastThumbnail_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_GetBroadcastThumbnail_Request)
}
CBroadcast_GetBroadcastThumbnail_Request::CBroadcast_GetBroadcastThumbnail_Request(const CBroadcast_GetBroadcastThumbnail_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&broadcast_id_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(broadcast_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_GetBroadcastThumbnail_Request)
}

void CBroadcast_GetBroadcastThumbnail_Request::SharedCtor() {
  ::memset(&steamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&broadcast_id_) -
      reinterpret_cast<char*>(&steamid_)) + sizeof(broadcast_id_));
}

CBroadcast_GetBroadcastThumbnail_Request::~CBroadcast_GetBroadcastThumbnail_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_GetBroadcastThumbnail_Request)
  SharedDtor();
}

void CBroadcast_GetBroadcastThumbnail_Request::SharedDtor() {
}

void CBroadcast_GetBroadcastThumbnail_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBroadcast_GetBroadcastThumbnail_Request& CBroadcast_GetBroadcastThumbnail_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CBroadcast_GetBroadcastThumbnail_Request_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CBroadcast_GetBroadcastThumbnail_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_GetBroadcastThumbnail_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&broadcast_id_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(broadcast_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CBroadcast_GetBroadcastThumbnail_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CBroadcast_GetBroadcastThumbnail_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed64 broadcast_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_broadcast_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CBroadcast_GetBroadcastThumbnail_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_GetBroadcastThumbnail_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 broadcast_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_broadcast_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &broadcast_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_GetBroadcastThumbnail_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_GetBroadcastThumbnail_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CBroadcast_GetBroadcastThumbnail_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_GetBroadcastThumbnail_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional fixed64 broadcast_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->broadcast_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_GetBroadcastThumbnail_Request)
}

::google::protobuf::uint8* CBroadcast_GetBroadcastThumbnail_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_GetBroadcastThumbnail_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional fixed64 broadcast_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->broadcast_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_GetBroadcastThumbnail_Request)
  return target;
}

size_t CBroadcast_GetBroadcastThumbnail_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_GetBroadcastThumbnail_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 broadcast_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_GetBroadcastThumbnail_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_GetBroadcastThumbnail_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_GetBroadcastThumbnail_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CBroadcast_GetBroadcastThumbnail_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_GetBroadcastThumbnail_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_GetBroadcastThumbnail_Request)
    MergeFrom(*source);
  }
}

void CBroadcast_GetBroadcastThumbnail_Request::MergeFrom(const CBroadcast_GetBroadcastThumbnail_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_GetBroadcastThumbnail_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      broadcast_id_ = from.broadcast_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_GetBroadcastThumbnail_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_GetBroadcastThumbnail_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_GetBroadcastThumbnail_Request::CopyFrom(const CBroadcast_GetBroadcastThumbnail_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_GetBroadcastThumbnail_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_GetBroadcastThumbnail_Request::IsInitialized() const {
  return true;
}

void CBroadcast_GetBroadcastThumbnail_Request::Swap(CBroadcast_GetBroadcastThumbnail_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_GetBroadcastThumbnail_Request::InternalSwap(CBroadcast_GetBroadcastThumbnail_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
  swap(broadcast_id_, other->broadcast_id_);
}

::google::protobuf::Metadata CBroadcast_GetBroadcastThumbnail_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_GetBroadcastThumbnail_Response::InitAsDefaultInstance() {
}
class CBroadcast_GetBroadcastThumbnail_Response::HasBitSetters {
 public:
  static void set_has_thumbnail_url(CBroadcast_GetBroadcastThumbnail_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_update_interval(CBroadcast_GetBroadcastThumbnail_Response* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_num_viewers(CBroadcast_GetBroadcastThumbnail_Response* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_GetBroadcastThumbnail_Response::kThumbnailUrlFieldNumber;
const int CBroadcast_GetBroadcastThumbnail_Response::kUpdateIntervalFieldNumber;
const int CBroadcast_GetBroadcastThumbnail_Response::kNumViewersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_GetBroadcastThumbnail_Response::CBroadcast_GetBroadcastThumbnail_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_GetBroadcastThumbnail_Response)
}
CBroadcast_GetBroadcastThumbnail_Response::CBroadcast_GetBroadcastThumbnail_Response(const CBroadcast_GetBroadcastThumbnail_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  thumbnail_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_thumbnail_url()) {
    thumbnail_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.thumbnail_url_);
  }
  ::memcpy(&update_interval_, &from.update_interval_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_viewers_) -
    reinterpret_cast<char*>(&update_interval_)) + sizeof(num_viewers_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_GetBroadcastThumbnail_Response)
}

void CBroadcast_GetBroadcastThumbnail_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CBroadcast_GetBroadcastThumbnail_Response_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  thumbnail_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&update_interval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_viewers_) -
      reinterpret_cast<char*>(&update_interval_)) + sizeof(num_viewers_));
}

CBroadcast_GetBroadcastThumbnail_Response::~CBroadcast_GetBroadcastThumbnail_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_GetBroadcastThumbnail_Response)
  SharedDtor();
}

void CBroadcast_GetBroadcastThumbnail_Response::SharedDtor() {
  thumbnail_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_GetBroadcastThumbnail_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBroadcast_GetBroadcastThumbnail_Response& CBroadcast_GetBroadcastThumbnail_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CBroadcast_GetBroadcastThumbnail_Response_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CBroadcast_GetBroadcastThumbnail_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_GetBroadcastThumbnail_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    thumbnail_url_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&update_interval_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_viewers_) -
        reinterpret_cast<char*>(&update_interval_)) + sizeof(num_viewers_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CBroadcast_GetBroadcastThumbnail_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CBroadcast_GetBroadcastThumbnail_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string thumbnail_url = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CBroadcast_GetBroadcastThumbnail_Response.thumbnail_url");
        object = msg->mutable_thumbnail_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional int32 update_interval = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_update_interval(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 num_viewers = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_num_viewers(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CBroadcast_GetBroadcastThumbnail_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_GetBroadcastThumbnail_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string thumbnail_url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_thumbnail_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->thumbnail_url().data(), static_cast<int>(this->thumbnail_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CBroadcast_GetBroadcastThumbnail_Response.thumbnail_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 update_interval = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_update_interval(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &update_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_viewers = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_num_viewers(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_viewers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_GetBroadcastThumbnail_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_GetBroadcastThumbnail_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CBroadcast_GetBroadcastThumbnail_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_GetBroadcastThumbnail_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string thumbnail_url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->thumbnail_url().data(), static_cast<int>(this->thumbnail_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_GetBroadcastThumbnail_Response.thumbnail_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->thumbnail_url(), output);
  }

  // optional int32 update_interval = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->update_interval(), output);
  }

  // optional int32 num_viewers = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_viewers(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_GetBroadcastThumbnail_Response)
}

::google::protobuf::uint8* CBroadcast_GetBroadcastThumbnail_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_GetBroadcastThumbnail_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string thumbnail_url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->thumbnail_url().data(), static_cast<int>(this->thumbnail_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_GetBroadcastThumbnail_Response.thumbnail_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->thumbnail_url(), target);
  }

  // optional int32 update_interval = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->update_interval(), target);
  }

  // optional int32 num_viewers = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num_viewers(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_GetBroadcastThumbnail_Response)
  return target;
}

size_t CBroadcast_GetBroadcastThumbnail_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_GetBroadcastThumbnail_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string thumbnail_url = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->thumbnail_url());
    }

    // optional int32 update_interval = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->update_interval());
    }

    // optional int32 num_viewers = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_viewers());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_GetBroadcastThumbnail_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_GetBroadcastThumbnail_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_GetBroadcastThumbnail_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CBroadcast_GetBroadcastThumbnail_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_GetBroadcastThumbnail_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_GetBroadcastThumbnail_Response)
    MergeFrom(*source);
  }
}

void CBroadcast_GetBroadcastThumbnail_Response::MergeFrom(const CBroadcast_GetBroadcastThumbnail_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_GetBroadcastThumbnail_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      thumbnail_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.thumbnail_url_);
    }
    if (cached_has_bits & 0x00000002u) {
      update_interval_ = from.update_interval_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_viewers_ = from.num_viewers_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_GetBroadcastThumbnail_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_GetBroadcastThumbnail_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_GetBroadcastThumbnail_Response::CopyFrom(const CBroadcast_GetBroadcastThumbnail_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_GetBroadcastThumbnail_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_GetBroadcastThumbnail_Response::IsInitialized() const {
  return true;
}

void CBroadcast_GetBroadcastThumbnail_Response::Swap(CBroadcast_GetBroadcastThumbnail_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_GetBroadcastThumbnail_Response::InternalSwap(CBroadcast_GetBroadcastThumbnail_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  thumbnail_url_.Swap(&other->thumbnail_url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(update_interval_, other->update_interval_);
  swap(num_viewers_, other->num_viewers_);
}

::google::protobuf::Metadata CBroadcast_GetBroadcastThumbnail_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_InviteToBroadcast_Request::InitAsDefaultInstance() {
}
class CBroadcast_InviteToBroadcast_Request::HasBitSetters {
 public:
  static void set_has_steamid(CBroadcast_InviteToBroadcast_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_approval_response(CBroadcast_InviteToBroadcast_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_InviteToBroadcast_Request::kSteamidFieldNumber;
const int CBroadcast_InviteToBroadcast_Request::kApprovalResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_InviteToBroadcast_Request::CBroadcast_InviteToBroadcast_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_InviteToBroadcast_Request)
}
CBroadcast_InviteToBroadcast_Request::CBroadcast_InviteToBroadcast_Request(const CBroadcast_InviteToBroadcast_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&approval_response_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(approval_response_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_InviteToBroadcast_Request)
}

void CBroadcast_InviteToBroadcast_Request::SharedCtor() {
  ::memset(&steamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&approval_response_) -
      reinterpret_cast<char*>(&steamid_)) + sizeof(approval_response_));
}

CBroadcast_InviteToBroadcast_Request::~CBroadcast_InviteToBroadcast_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_InviteToBroadcast_Request)
  SharedDtor();
}

void CBroadcast_InviteToBroadcast_Request::SharedDtor() {
}

void CBroadcast_InviteToBroadcast_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBroadcast_InviteToBroadcast_Request& CBroadcast_InviteToBroadcast_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CBroadcast_InviteToBroadcast_Request_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CBroadcast_InviteToBroadcast_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_InviteToBroadcast_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&approval_response_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(approval_response_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CBroadcast_InviteToBroadcast_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CBroadcast_InviteToBroadcast_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional bool approval_response = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_approval_response(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CBroadcast_InviteToBroadcast_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_InviteToBroadcast_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool approval_response = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_approval_response(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &approval_response_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_InviteToBroadcast_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_InviteToBroadcast_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CBroadcast_InviteToBroadcast_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_InviteToBroadcast_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional bool approval_response = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->approval_response(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_InviteToBroadcast_Request)
}

::google::protobuf::uint8* CBroadcast_InviteToBroadcast_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_InviteToBroadcast_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional bool approval_response = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->approval_response(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_InviteToBroadcast_Request)
  return target;
}

size_t CBroadcast_InviteToBroadcast_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_InviteToBroadcast_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional bool approval_response = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_InviteToBroadcast_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_InviteToBroadcast_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_InviteToBroadcast_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CBroadcast_InviteToBroadcast_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_InviteToBroadcast_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_InviteToBroadcast_Request)
    MergeFrom(*source);
  }
}

void CBroadcast_InviteToBroadcast_Request::MergeFrom(const CBroadcast_InviteToBroadcast_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_InviteToBroadcast_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      approval_response_ = from.approval_response_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_InviteToBroadcast_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_InviteToBroadcast_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_InviteToBroadcast_Request::CopyFrom(const CBroadcast_InviteToBroadcast_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_InviteToBroadcast_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_InviteToBroadcast_Request::IsInitialized() const {
  return true;
}

void CBroadcast_InviteToBroadcast_Request::Swap(CBroadcast_InviteToBroadcast_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_InviteToBroadcast_Request::InternalSwap(CBroadcast_InviteToBroadcast_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
  swap(approval_response_, other->approval_response_);
}

::google::protobuf::Metadata CBroadcast_InviteToBroadcast_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_InviteToBroadcast_Response::InitAsDefaultInstance() {
}
class CBroadcast_InviteToBroadcast_Response::HasBitSetters {
 public:
  static void set_has_success(CBroadcast_InviteToBroadcast_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_InviteToBroadcast_Response::kSuccessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_InviteToBroadcast_Response::CBroadcast_InviteToBroadcast_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_InviteToBroadcast_Response)
}
CBroadcast_InviteToBroadcast_Response::CBroadcast_InviteToBroadcast_Response(const CBroadcast_InviteToBroadcast_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_InviteToBroadcast_Response)
}

void CBroadcast_InviteToBroadcast_Response::SharedCtor() {
  success_ = false;
}

CBroadcast_InviteToBroadcast_Response::~CBroadcast_InviteToBroadcast_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_InviteToBroadcast_Response)
  SharedDtor();
}

void CBroadcast_InviteToBroadcast_Response::SharedDtor() {
}

void CBroadcast_InviteToBroadcast_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBroadcast_InviteToBroadcast_Response& CBroadcast_InviteToBroadcast_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CBroadcast_InviteToBroadcast_Response_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CBroadcast_InviteToBroadcast_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_InviteToBroadcast_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CBroadcast_InviteToBroadcast_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CBroadcast_InviteToBroadcast_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool success = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_success(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CBroadcast_InviteToBroadcast_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_InviteToBroadcast_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool success = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_success(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_InviteToBroadcast_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_InviteToBroadcast_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CBroadcast_InviteToBroadcast_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_InviteToBroadcast_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool success = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_InviteToBroadcast_Response)
}

::google::protobuf::uint8* CBroadcast_InviteToBroadcast_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_InviteToBroadcast_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool success = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_InviteToBroadcast_Response)
  return target;
}

size_t CBroadcast_InviteToBroadcast_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_InviteToBroadcast_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool success = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_InviteToBroadcast_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_InviteToBroadcast_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_InviteToBroadcast_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CBroadcast_InviteToBroadcast_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_InviteToBroadcast_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_InviteToBroadcast_Response)
    MergeFrom(*source);
  }
}

void CBroadcast_InviteToBroadcast_Response::MergeFrom(const CBroadcast_InviteToBroadcast_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_InviteToBroadcast_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_success()) {
    set_success(from.success());
  }
}

void CBroadcast_InviteToBroadcast_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_InviteToBroadcast_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_InviteToBroadcast_Response::CopyFrom(const CBroadcast_InviteToBroadcast_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_InviteToBroadcast_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_InviteToBroadcast_Response::IsInitialized() const {
  return true;
}

void CBroadcast_InviteToBroadcast_Response::Swap(CBroadcast_InviteToBroadcast_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_InviteToBroadcast_Response::InternalSwap(CBroadcast_InviteToBroadcast_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(success_, other->success_);
}

::google::protobuf::Metadata CBroadcast_InviteToBroadcast_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_SendBroadcastStateToServer_Request::InitAsDefaultInstance() {
}
class CBroadcast_SendBroadcastStateToServer_Request::HasBitSetters {
 public:
  static void set_has_permission(CBroadcast_SendBroadcastStateToServer_Request* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_gameid(CBroadcast_SendBroadcastStateToServer_Request* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_title(CBroadcast_SendBroadcastStateToServer_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_game_data_config(CBroadcast_SendBroadcastStateToServer_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_SendBroadcastStateToServer_Request::kPermissionFieldNumber;
const int CBroadcast_SendBroadcastStateToServer_Request::kGameidFieldNumber;
const int CBroadcast_SendBroadcastStateToServer_Request::kTitleFieldNumber;
const int CBroadcast_SendBroadcastStateToServer_Request::kGameDataConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_SendBroadcastStateToServer_Request::CBroadcast_SendBroadcastStateToServer_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_SendBroadcastStateToServer_Request)
}
CBroadcast_SendBroadcastStateToServer_Request::CBroadcast_SendBroadcastStateToServer_Request(const CBroadcast_SendBroadcastStateToServer_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  game_data_config_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_game_data_config()) {
    game_data_config_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_data_config_);
  }
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&permission_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(permission_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_SendBroadcastStateToServer_Request)
}

void CBroadcast_SendBroadcastStateToServer_Request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CBroadcast_SendBroadcastStateToServer_Request_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_data_config_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&permission_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(permission_));
}

CBroadcast_SendBroadcastStateToServer_Request::~CBroadcast_SendBroadcastStateToServer_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_SendBroadcastStateToServer_Request)
  SharedDtor();
}

void CBroadcast_SendBroadcastStateToServer_Request::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_data_config_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_SendBroadcastStateToServer_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBroadcast_SendBroadcastStateToServer_Request& CBroadcast_SendBroadcastStateToServer_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CBroadcast_SendBroadcastStateToServer_Request_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CBroadcast_SendBroadcastStateToServer_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_SendBroadcastStateToServer_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      title_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      game_data_config_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&permission_) -
        reinterpret_cast<char*>(&gameid_)) + sizeof(permission_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CBroadcast_SendBroadcastStateToServer_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CBroadcast_SendBroadcastStateToServer_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 permission = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_permission(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 gameid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_gameid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string title = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CBroadcast_SendBroadcastStateToServer_Request.title");
        object = msg->mutable_title();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string game_data_config = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CBroadcast_SendBroadcastStateToServer_Request.game_data_config");
        object = msg->mutable_game_data_config();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CBroadcast_SendBroadcastStateToServer_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_SendBroadcastStateToServer_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 permission = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_permission(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &permission_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 gameid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_gameid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string title = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CBroadcast_SendBroadcastStateToServer_Request.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string game_data_config = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_data_config()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_data_config().data(), static_cast<int>(this->game_data_config().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CBroadcast_SendBroadcastStateToServer_Request.game_data_config");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_SendBroadcastStateToServer_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_SendBroadcastStateToServer_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CBroadcast_SendBroadcastStateToServer_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_SendBroadcastStateToServer_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 permission = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->permission(), output);
  }

  // optional uint64 gameid = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->gameid(), output);
  }

  // optional string title = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_SendBroadcastStateToServer_Request.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->title(), output);
  }

  // optional string game_data_config = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_data_config().data(), static_cast<int>(this->game_data_config().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_SendBroadcastStateToServer_Request.game_data_config");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->game_data_config(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_SendBroadcastStateToServer_Request)
}

::google::protobuf::uint8* CBroadcast_SendBroadcastStateToServer_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_SendBroadcastStateToServer_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 permission = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->permission(), target);
  }

  // optional uint64 gameid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->gameid(), target);
  }

  // optional string title = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_SendBroadcastStateToServer_Request.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->title(), target);
  }

  // optional string game_data_config = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_data_config().data(), static_cast<int>(this->game_data_config().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_SendBroadcastStateToServer_Request.game_data_config");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->game_data_config(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_SendBroadcastStateToServer_Request)
  return target;
}

size_t CBroadcast_SendBroadcastStateToServer_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_SendBroadcastStateToServer_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string title = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string game_data_config = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_data_config());
    }

    // optional uint64 gameid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gameid());
    }

    // optional int32 permission = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->permission());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_SendBroadcastStateToServer_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_SendBroadcastStateToServer_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_SendBroadcastStateToServer_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CBroadcast_SendBroadcastStateToServer_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_SendBroadcastStateToServer_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_SendBroadcastStateToServer_Request)
    MergeFrom(*source);
  }
}

void CBroadcast_SendBroadcastStateToServer_Request::MergeFrom(const CBroadcast_SendBroadcastStateToServer_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_SendBroadcastStateToServer_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      game_data_config_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_data_config_);
    }
    if (cached_has_bits & 0x00000004u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000008u) {
      permission_ = from.permission_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_SendBroadcastStateToServer_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_SendBroadcastStateToServer_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_SendBroadcastStateToServer_Request::CopyFrom(const CBroadcast_SendBroadcastStateToServer_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_SendBroadcastStateToServer_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_SendBroadcastStateToServer_Request::IsInitialized() const {
  return true;
}

void CBroadcast_SendBroadcastStateToServer_Request::Swap(CBroadcast_SendBroadcastStateToServer_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_SendBroadcastStateToServer_Request::InternalSwap(CBroadcast_SendBroadcastStateToServer_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  title_.Swap(&other->title_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  game_data_config_.Swap(&other->game_data_config_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(gameid_, other->gameid_);
  swap(permission_, other->permission_);
}

::google::protobuf::Metadata CBroadcast_SendBroadcastStateToServer_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_SendBroadcastStateToServer_Response::InitAsDefaultInstance() {
}
class CBroadcast_SendBroadcastStateToServer_Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_SendBroadcastStateToServer_Response::CBroadcast_SendBroadcastStateToServer_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_SendBroadcastStateToServer_Response)
}
CBroadcast_SendBroadcastStateToServer_Response::CBroadcast_SendBroadcastStateToServer_Response(const CBroadcast_SendBroadcastStateToServer_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_SendBroadcastStateToServer_Response)
}

void CBroadcast_SendBroadcastStateToServer_Response::SharedCtor() {
}

CBroadcast_SendBroadcastStateToServer_Response::~CBroadcast_SendBroadcastStateToServer_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_SendBroadcastStateToServer_Response)
  SharedDtor();
}

void CBroadcast_SendBroadcastStateToServer_Response::SharedDtor() {
}

void CBroadcast_SendBroadcastStateToServer_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBroadcast_SendBroadcastStateToServer_Response& CBroadcast_SendBroadcastStateToServer_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CBroadcast_SendBroadcastStateToServer_Response_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CBroadcast_SendBroadcastStateToServer_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_SendBroadcastStateToServer_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CBroadcast_SendBroadcastStateToServer_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CBroadcast_SendBroadcastStateToServer_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CBroadcast_SendBroadcastStateToServer_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_SendBroadcastStateToServer_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_SendBroadcastStateToServer_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_SendBroadcastStateToServer_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CBroadcast_SendBroadcastStateToServer_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_SendBroadcastStateToServer_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_SendBroadcastStateToServer_Response)
}

::google::protobuf::uint8* CBroadcast_SendBroadcastStateToServer_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_SendBroadcastStateToServer_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_SendBroadcastStateToServer_Response)
  return target;
}

size_t CBroadcast_SendBroadcastStateToServer_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_SendBroadcastStateToServer_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_SendBroadcastStateToServer_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_SendBroadcastStateToServer_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_SendBroadcastStateToServer_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CBroadcast_SendBroadcastStateToServer_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_SendBroadcastStateToServer_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_SendBroadcastStateToServer_Response)
    MergeFrom(*source);
  }
}

void CBroadcast_SendBroadcastStateToServer_Response::MergeFrom(const CBroadcast_SendBroadcastStateToServer_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_SendBroadcastStateToServer_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CBroadcast_SendBroadcastStateToServer_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_SendBroadcastStateToServer_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_SendBroadcastStateToServer_Response::CopyFrom(const CBroadcast_SendBroadcastStateToServer_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_SendBroadcastStateToServer_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_SendBroadcastStateToServer_Response::IsInitialized() const {
  return true;
}

void CBroadcast_SendBroadcastStateToServer_Response::Swap(CBroadcast_SendBroadcastStateToServer_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_SendBroadcastStateToServer_Response::InternalSwap(CBroadcast_SendBroadcastStateToServer_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CBroadcast_SendBroadcastStateToServer_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::InitAsDefaultInstance() {
}
class CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::HasBitSetters {
 public:
  static void set_has_broadcast_id(CBroadcast_NotifyBroadcastSessionHeartbeat_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::kBroadcastIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::CBroadcast_NotifyBroadcastSessionHeartbeat_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)
}
CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::CBroadcast_NotifyBroadcastSessionHeartbeat_Notification(const CBroadcast_NotifyBroadcastSessionHeartbeat_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  broadcast_id_ = from.broadcast_id_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)
}

void CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::SharedCtor() {
  broadcast_id_ = PROTOBUF_ULONGLONG(0);
}

CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::~CBroadcast_NotifyBroadcastSessionHeartbeat_Notification() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)
  SharedDtor();
}

void CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::SharedDtor() {
}

void CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBroadcast_NotifyBroadcastSessionHeartbeat_Notification& CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CBroadcast_NotifyBroadcastSessionHeartbeat_Notification_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  broadcast_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CBroadcast_NotifyBroadcastSessionHeartbeat_Notification*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 broadcast_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_broadcast_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 broadcast_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_broadcast_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &broadcast_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->broadcast_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)
}

::google::protobuf::uint8* CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->broadcast_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)
  return target;
}

size_t CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 broadcast_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_NotifyBroadcastSessionHeartbeat_Notification* source =
      ::google::protobuf::DynamicCastToGenerated<CBroadcast_NotifyBroadcastSessionHeartbeat_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)
    MergeFrom(*source);
  }
}

void CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::MergeFrom(const CBroadcast_NotifyBroadcastSessionHeartbeat_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_broadcast_id()) {
    set_broadcast_id(from.broadcast_id());
  }
}

void CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::CopyFrom(const CBroadcast_NotifyBroadcastSessionHeartbeat_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::IsInitialized() const {
  return true;
}

void CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::Swap(CBroadcast_NotifyBroadcastSessionHeartbeat_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::InternalSwap(CBroadcast_NotifyBroadcastSessionHeartbeat_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(broadcast_id_, other->broadcast_id_);
}

::google::protobuf::Metadata CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_GetBroadcastChatInfo_Request::InitAsDefaultInstance() {
}
class CBroadcast_GetBroadcastChatInfo_Request::HasBitSetters {
 public:
  static void set_has_steamid(CBroadcast_GetBroadcastChatInfo_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_broadcast_id(CBroadcast_GetBroadcastChatInfo_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_client_ip(CBroadcast_GetBroadcastChatInfo_Request* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_client_cell(CBroadcast_GetBroadcastChatInfo_Request* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_GetBroadcastChatInfo_Request::kSteamidFieldNumber;
const int CBroadcast_GetBroadcastChatInfo_Request::kBroadcastIdFieldNumber;
const int CBroadcast_GetBroadcastChatInfo_Request::kClientIpFieldNumber;
const int CBroadcast_GetBroadcastChatInfo_Request::kClientCellFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_GetBroadcastChatInfo_Request::CBroadcast_GetBroadcastChatInfo_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_GetBroadcastChatInfo_Request)
}
CBroadcast_GetBroadcastChatInfo_Request::CBroadcast_GetBroadcastChatInfo_Request(const CBroadcast_GetBroadcastChatInfo_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_cell_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(client_cell_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_GetBroadcastChatInfo_Request)
}

void CBroadcast_GetBroadcastChatInfo_Request::SharedCtor() {
  ::memset(&steamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_cell_) -
      reinterpret_cast<char*>(&steamid_)) + sizeof(client_cell_));
}

CBroadcast_GetBroadcastChatInfo_Request::~CBroadcast_GetBroadcastChatInfo_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_GetBroadcastChatInfo_Request)
  SharedDtor();
}

void CBroadcast_GetBroadcastChatInfo_Request::SharedDtor() {
}

void CBroadcast_GetBroadcastChatInfo_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBroadcast_GetBroadcastChatInfo_Request& CBroadcast_GetBroadcastChatInfo_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CBroadcast_GetBroadcastChatInfo_Request_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CBroadcast_GetBroadcastChatInfo_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_GetBroadcastChatInfo_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&client_cell_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(client_cell_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CBroadcast_GetBroadcastChatInfo_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CBroadcast_GetBroadcastChatInfo_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed64 broadcast_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_broadcast_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 client_ip = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_client_ip(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 client_cell = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_client_cell(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CBroadcast_GetBroadcastChatInfo_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_GetBroadcastChatInfo_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 broadcast_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_broadcast_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &broadcast_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_ip = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_client_ip(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_cell = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_client_cell(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_cell_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_GetBroadcastChatInfo_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_GetBroadcastChatInfo_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CBroadcast_GetBroadcastChatInfo_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_GetBroadcastChatInfo_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional fixed64 broadcast_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->broadcast_id(), output);
  }

  // optional uint32 client_ip = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->client_ip(), output);
  }

  // optional uint32 client_cell = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->client_cell(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_GetBroadcastChatInfo_Request)
}

::google::protobuf::uint8* CBroadcast_GetBroadcastChatInfo_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_GetBroadcastChatInfo_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional fixed64 broadcast_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->broadcast_id(), target);
  }

  // optional uint32 client_ip = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->client_ip(), target);
  }

  // optional uint32 client_cell = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->client_cell(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_GetBroadcastChatInfo_Request)
  return target;
}

size_t CBroadcast_GetBroadcastChatInfo_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_GetBroadcastChatInfo_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 broadcast_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 client_ip = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_ip());
    }

    // optional uint32 client_cell = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_cell());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_GetBroadcastChatInfo_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_GetBroadcastChatInfo_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_GetBroadcastChatInfo_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CBroadcast_GetBroadcastChatInfo_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_GetBroadcastChatInfo_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_GetBroadcastChatInfo_Request)
    MergeFrom(*source);
  }
}

void CBroadcast_GetBroadcastChatInfo_Request::MergeFrom(const CBroadcast_GetBroadcastChatInfo_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_GetBroadcastChatInfo_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      broadcast_id_ = from.broadcast_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      client_ip_ = from.client_ip_;
    }
    if (cached_has_bits & 0x00000008u) {
      client_cell_ = from.client_cell_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_GetBroadcastChatInfo_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_GetBroadcastChatInfo_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_GetBroadcastChatInfo_Request::CopyFrom(const CBroadcast_GetBroadcastChatInfo_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_GetBroadcastChatInfo_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_GetBroadcastChatInfo_Request::IsInitialized() const {
  return true;
}

void CBroadcast_GetBroadcastChatInfo_Request::Swap(CBroadcast_GetBroadcastChatInfo_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_GetBroadcastChatInfo_Request::InternalSwap(CBroadcast_GetBroadcastChatInfo_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
  swap(broadcast_id_, other->broadcast_id_);
  swap(client_ip_, other->client_ip_);
  swap(client_cell_, other->client_cell_);
}

::google::protobuf::Metadata CBroadcast_GetBroadcastChatInfo_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_GetBroadcastChatInfo_Response::InitAsDefaultInstance() {
}
class CBroadcast_GetBroadcastChatInfo_Response::HasBitSetters {
 public:
  static void set_has_chat_id(CBroadcast_GetBroadcastChatInfo_Response* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_view_url(CBroadcast_GetBroadcastChatInfo_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_view_url_template(CBroadcast_GetBroadcastChatInfo_Response* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_GetBroadcastChatInfo_Response::kChatIdFieldNumber;
const int CBroadcast_GetBroadcastChatInfo_Response::kViewUrlFieldNumber;
const int CBroadcast_GetBroadcastChatInfo_Response::kViewUrlTemplateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_GetBroadcastChatInfo_Response::CBroadcast_GetBroadcastChatInfo_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_GetBroadcastChatInfo_Response)
}
CBroadcast_GetBroadcastChatInfo_Response::CBroadcast_GetBroadcastChatInfo_Response(const CBroadcast_GetBroadcastChatInfo_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  view_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_view_url()) {
    view_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.view_url_);
  }
  view_url_template_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_view_url_template()) {
    view_url_template_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.view_url_template_);
  }
  chat_id_ = from.chat_id_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_GetBroadcastChatInfo_Response)
}

void CBroadcast_GetBroadcastChatInfo_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CBroadcast_GetBroadcastChatInfo_Response_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  view_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  view_url_template_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chat_id_ = PROTOBUF_ULONGLONG(0);
}

CBroadcast_GetBroadcastChatInfo_Response::~CBroadcast_GetBroadcastChatInfo_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_GetBroadcastChatInfo_Response)
  SharedDtor();
}

void CBroadcast_GetBroadcastChatInfo_Response::SharedDtor() {
  view_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  view_url_template_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_GetBroadcastChatInfo_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBroadcast_GetBroadcastChatInfo_Response& CBroadcast_GetBroadcastChatInfo_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CBroadcast_GetBroadcastChatInfo_Response_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CBroadcast_GetBroadcastChatInfo_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_GetBroadcastChatInfo_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      view_url_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      view_url_template_.ClearNonDefaultToEmptyNoArena();
    }
  }
  chat_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CBroadcast_GetBroadcastChatInfo_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CBroadcast_GetBroadcastChatInfo_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 chat_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_chat_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional string view_url = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CBroadcast_GetBroadcastChatInfo_Response.view_url");
        object = msg->mutable_view_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string view_url_template = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CBroadcast_GetBroadcastChatInfo_Response.view_url_template");
        object = msg->mutable_view_url_template();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CBroadcast_GetBroadcastChatInfo_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_GetBroadcastChatInfo_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 chat_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_chat_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &chat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string view_url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_view_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->view_url().data(), static_cast<int>(this->view_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CBroadcast_GetBroadcastChatInfo_Response.view_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string view_url_template = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_view_url_template()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->view_url_template().data(), static_cast<int>(this->view_url_template().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CBroadcast_GetBroadcastChatInfo_Response.view_url_template");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_GetBroadcastChatInfo_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_GetBroadcastChatInfo_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CBroadcast_GetBroadcastChatInfo_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_GetBroadcastChatInfo_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 chat_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->chat_id(), output);
  }

  // optional string view_url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->view_url().data(), static_cast<int>(this->view_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_GetBroadcastChatInfo_Response.view_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->view_url(), output);
  }

  // optional string view_url_template = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->view_url_template().data(), static_cast<int>(this->view_url_template().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_GetBroadcastChatInfo_Response.view_url_template");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->view_url_template(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_GetBroadcastChatInfo_Response)
}

::google::protobuf::uint8* CBroadcast_GetBroadcastChatInfo_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_GetBroadcastChatInfo_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 chat_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->chat_id(), target);
  }

  // optional string view_url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->view_url().data(), static_cast<int>(this->view_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_GetBroadcastChatInfo_Response.view_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->view_url(), target);
  }

  // optional string view_url_template = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->view_url_template().data(), static_cast<int>(this->view_url_template().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_GetBroadcastChatInfo_Response.view_url_template");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->view_url_template(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_GetBroadcastChatInfo_Response)
  return target;
}

size_t CBroadcast_GetBroadcastChatInfo_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_GetBroadcastChatInfo_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string view_url = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->view_url());
    }

    // optional string view_url_template = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->view_url_template());
    }

    // optional fixed64 chat_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_GetBroadcastChatInfo_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_GetBroadcastChatInfo_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_GetBroadcastChatInfo_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CBroadcast_GetBroadcastChatInfo_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_GetBroadcastChatInfo_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_GetBroadcastChatInfo_Response)
    MergeFrom(*source);
  }
}

void CBroadcast_GetBroadcastChatInfo_Response::MergeFrom(const CBroadcast_GetBroadcastChatInfo_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_GetBroadcastChatInfo_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      view_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.view_url_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      view_url_template_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.view_url_template_);
    }
    if (cached_has_bits & 0x00000004u) {
      chat_id_ = from.chat_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_GetBroadcastChatInfo_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_GetBroadcastChatInfo_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_GetBroadcastChatInfo_Response::CopyFrom(const CBroadcast_GetBroadcastChatInfo_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_GetBroadcastChatInfo_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_GetBroadcastChatInfo_Response::IsInitialized() const {
  return true;
}

void CBroadcast_GetBroadcastChatInfo_Response::Swap(CBroadcast_GetBroadcastChatInfo_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_GetBroadcastChatInfo_Response::InternalSwap(CBroadcast_GetBroadcastChatInfo_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  view_url_.Swap(&other->view_url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  view_url_template_.Swap(&other->view_url_template_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(chat_id_, other->chat_id_);
}

::google::protobuf::Metadata CBroadcast_GetBroadcastChatInfo_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_PostChatMessage_Request::InitAsDefaultInstance() {
}
class CBroadcast_PostChatMessage_Request::HasBitSetters {
 public:
  static void set_has_chat_id(CBroadcast_PostChatMessage_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_message(CBroadcast_PostChatMessage_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_instance_id(CBroadcast_PostChatMessage_Request* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_PostChatMessage_Request::kChatIdFieldNumber;
const int CBroadcast_PostChatMessage_Request::kMessageFieldNumber;
const int CBroadcast_PostChatMessage_Request::kInstanceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_PostChatMessage_Request::CBroadcast_PostChatMessage_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_PostChatMessage_Request)
}
CBroadcast_PostChatMessage_Request::CBroadcast_PostChatMessage_Request(const CBroadcast_PostChatMessage_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  ::memcpy(&chat_id_, &from.chat_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&instance_id_) -
    reinterpret_cast<char*>(&chat_id_)) + sizeof(instance_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_PostChatMessage_Request)
}

void CBroadcast_PostChatMessage_Request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CBroadcast_PostChatMessage_Request_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&chat_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&instance_id_) -
      reinterpret_cast<char*>(&chat_id_)) + sizeof(instance_id_));
}

CBroadcast_PostChatMessage_Request::~CBroadcast_PostChatMessage_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_PostChatMessage_Request)
  SharedDtor();
}

void CBroadcast_PostChatMessage_Request::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_PostChatMessage_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBroadcast_PostChatMessage_Request& CBroadcast_PostChatMessage_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CBroadcast_PostChatMessage_Request_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CBroadcast_PostChatMessage_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_PostChatMessage_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&chat_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&instance_id_) -
        reinterpret_cast<char*>(&chat_id_)) + sizeof(instance_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CBroadcast_PostChatMessage_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CBroadcast_PostChatMessage_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 chat_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_chat_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional string message = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CBroadcast_PostChatMessage_Request.message");
        object = msg->mutable_message();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 instance_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_instance_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CBroadcast_PostChatMessage_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_PostChatMessage_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 chat_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_chat_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &chat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CBroadcast_PostChatMessage_Request.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 instance_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_instance_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &instance_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_PostChatMessage_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_PostChatMessage_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CBroadcast_PostChatMessage_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_PostChatMessage_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 chat_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->chat_id(), output);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_PostChatMessage_Request.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  // optional uint32 instance_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->instance_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_PostChatMessage_Request)
}

::google::protobuf::uint8* CBroadcast_PostChatMessage_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_PostChatMessage_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 chat_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->chat_id(), target);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_PostChatMessage_Request.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // optional uint32 instance_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->instance_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_PostChatMessage_Request)
  return target;
}

size_t CBroadcast_PostChatMessage_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_PostChatMessage_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string message = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional fixed64 chat_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 instance_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->instance_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_PostChatMessage_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_PostChatMessage_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_PostChatMessage_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CBroadcast_PostChatMessage_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_PostChatMessage_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_PostChatMessage_Request)
    MergeFrom(*source);
  }
}

void CBroadcast_PostChatMessage_Request::MergeFrom(const CBroadcast_PostChatMessage_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_PostChatMessage_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      chat_id_ = from.chat_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      instance_id_ = from.instance_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_PostChatMessage_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_PostChatMessage_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_PostChatMessage_Request::CopyFrom(const CBroadcast_PostChatMessage_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_PostChatMessage_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_PostChatMessage_Request::IsInitialized() const {
  return true;
}

void CBroadcast_PostChatMessage_Request::Swap(CBroadcast_PostChatMessage_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_PostChatMessage_Request::InternalSwap(CBroadcast_PostChatMessage_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(chat_id_, other->chat_id_);
  swap(instance_id_, other->instance_id_);
}

::google::protobuf::Metadata CBroadcast_PostChatMessage_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_PostChatMessage_Response::InitAsDefaultInstance() {
}
class CBroadcast_PostChatMessage_Response::HasBitSetters {
 public:
  static void set_has_persona_name(CBroadcast_PostChatMessage_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_in_game(CBroadcast_PostChatMessage_Response* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_result(CBroadcast_PostChatMessage_Response* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_cooldown_time_seconds(CBroadcast_PostChatMessage_Response* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_PostChatMessage_Response::kPersonaNameFieldNumber;
const int CBroadcast_PostChatMessage_Response::kInGameFieldNumber;
const int CBroadcast_PostChatMessage_Response::kResultFieldNumber;
const int CBroadcast_PostChatMessage_Response::kCooldownTimeSecondsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_PostChatMessage_Response::CBroadcast_PostChatMessage_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_PostChatMessage_Response)
}
CBroadcast_PostChatMessage_Response::CBroadcast_PostChatMessage_Response(const CBroadcast_PostChatMessage_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  persona_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_persona_name()) {
    persona_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_);
  }
  ::memcpy(&in_game_, &from.in_game_,
    static_cast<size_t>(reinterpret_cast<char*>(&cooldown_time_seconds_) -
    reinterpret_cast<char*>(&in_game_)) + sizeof(cooldown_time_seconds_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_PostChatMessage_Response)
}

void CBroadcast_PostChatMessage_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CBroadcast_PostChatMessage_Response_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  persona_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&in_game_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cooldown_time_seconds_) -
      reinterpret_cast<char*>(&in_game_)) + sizeof(cooldown_time_seconds_));
}

CBroadcast_PostChatMessage_Response::~CBroadcast_PostChatMessage_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_PostChatMessage_Response)
  SharedDtor();
}

void CBroadcast_PostChatMessage_Response::SharedDtor() {
  persona_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_PostChatMessage_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBroadcast_PostChatMessage_Response& CBroadcast_PostChatMessage_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CBroadcast_PostChatMessage_Response_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CBroadcast_PostChatMessage_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_PostChatMessage_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    persona_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&in_game_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cooldown_time_seconds_) -
        reinterpret_cast<char*>(&in_game_)) + sizeof(cooldown_time_seconds_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CBroadcast_PostChatMessage_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CBroadcast_PostChatMessage_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string persona_name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CBroadcast_PostChatMessage_Response.persona_name");
        object = msg->mutable_persona_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool in_game = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_in_game(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 result = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_result(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 cooldown_time_seconds = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_cooldown_time_seconds(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CBroadcast_PostChatMessage_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_PostChatMessage_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string persona_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_persona_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->persona_name().data(), static_cast<int>(this->persona_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CBroadcast_PostChatMessage_Response.persona_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool in_game = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_in_game(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_game_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 result = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_result(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cooldown_time_seconds = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_cooldown_time_seconds(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cooldown_time_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_PostChatMessage_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_PostChatMessage_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CBroadcast_PostChatMessage_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_PostChatMessage_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string persona_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), static_cast<int>(this->persona_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_PostChatMessage_Response.persona_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->persona_name(), output);
  }

  // optional bool in_game = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->in_game(), output);
  }

  // optional int32 result = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  // optional int32 cooldown_time_seconds = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cooldown_time_seconds(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_PostChatMessage_Response)
}

::google::protobuf::uint8* CBroadcast_PostChatMessage_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_PostChatMessage_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string persona_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), static_cast<int>(this->persona_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_PostChatMessage_Response.persona_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->persona_name(), target);
  }

  // optional bool in_game = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->in_game(), target);
  }

  // optional int32 result = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  // optional int32 cooldown_time_seconds = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cooldown_time_seconds(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_PostChatMessage_Response)
  return target;
}

size_t CBroadcast_PostChatMessage_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_PostChatMessage_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string persona_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->persona_name());
    }

    // optional bool in_game = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional int32 result = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 cooldown_time_seconds = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cooldown_time_seconds());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_PostChatMessage_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_PostChatMessage_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_PostChatMessage_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CBroadcast_PostChatMessage_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_PostChatMessage_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_PostChatMessage_Response)
    MergeFrom(*source);
  }
}

void CBroadcast_PostChatMessage_Response::MergeFrom(const CBroadcast_PostChatMessage_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_PostChatMessage_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      persona_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      in_game_ = from.in_game_;
    }
    if (cached_has_bits & 0x00000004u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000008u) {
      cooldown_time_seconds_ = from.cooldown_time_seconds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_PostChatMessage_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_PostChatMessage_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_PostChatMessage_Response::CopyFrom(const CBroadcast_PostChatMessage_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_PostChatMessage_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_PostChatMessage_Response::IsInitialized() const {
  return true;
}

void CBroadcast_PostChatMessage_Response::Swap(CBroadcast_PostChatMessage_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_PostChatMessage_Response::InternalSwap(CBroadcast_PostChatMessage_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  persona_name_.Swap(&other->persona_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(in_game_, other->in_game_);
  swap(result_, other->result_);
  swap(cooldown_time_seconds_, other->cooldown_time_seconds_);
}

::google::protobuf::Metadata CBroadcast_PostChatMessage_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_MuteBroadcastChatUser_Request::InitAsDefaultInstance() {
}
class CBroadcast_MuteBroadcastChatUser_Request::HasBitSetters {
 public:
  static void set_has_chat_id(CBroadcast_MuteBroadcastChatUser_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_user_steamid(CBroadcast_MuteBroadcastChatUser_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_muted(CBroadcast_MuteBroadcastChatUser_Request* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_MuteBroadcastChatUser_Request::kChatIdFieldNumber;
const int CBroadcast_MuteBroadcastChatUser_Request::kUserSteamidFieldNumber;
const int CBroadcast_MuteBroadcastChatUser_Request::kMutedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_MuteBroadcastChatUser_Request::CBroadcast_MuteBroadcastChatUser_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_MuteBroadcastChatUser_Request)
}
CBroadcast_MuteBroadcastChatUser_Request::CBroadcast_MuteBroadcastChatUser_Request(const CBroadcast_MuteBroadcastChatUser_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chat_id_, &from.chat_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&muted_) -
    reinterpret_cast<char*>(&chat_id_)) + sizeof(muted_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_MuteBroadcastChatUser_Request)
}

void CBroadcast_MuteBroadcastChatUser_Request::SharedCtor() {
  ::memset(&chat_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&muted_) -
      reinterpret_cast<char*>(&chat_id_)) + sizeof(muted_));
}

CBroadcast_MuteBroadcastChatUser_Request::~CBroadcast_MuteBroadcastChatUser_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_MuteBroadcastChatUser_Request)
  SharedDtor();
}

void CBroadcast_MuteBroadcastChatUser_Request::SharedDtor() {
}

void CBroadcast_MuteBroadcastChatUser_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBroadcast_MuteBroadcastChatUser_Request& CBroadcast_MuteBroadcastChatUser_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CBroadcast_MuteBroadcastChatUser_Request_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CBroadcast_MuteBroadcastChatUser_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_MuteBroadcastChatUser_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&chat_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&muted_) -
        reinterpret_cast<char*>(&chat_id_)) + sizeof(muted_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CBroadcast_MuteBroadcastChatUser_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CBroadcast_MuteBroadcastChatUser_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 chat_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_chat_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed64 user_steamid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_user_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional bool muted = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_muted(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CBroadcast_MuteBroadcastChatUser_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_MuteBroadcastChatUser_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 chat_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_chat_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &chat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 user_steamid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_user_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &user_steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool muted = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_muted(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &muted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_MuteBroadcastChatUser_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_MuteBroadcastChatUser_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CBroadcast_MuteBroadcastChatUser_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_MuteBroadcastChatUser_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 chat_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->chat_id(), output);
  }

  // optional fixed64 user_steamid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->user_steamid(), output);
  }

  // optional bool muted = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->muted(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_MuteBroadcastChatUser_Request)
}

::google::protobuf::uint8* CBroadcast_MuteBroadcastChatUser_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_MuteBroadcastChatUser_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 chat_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->chat_id(), target);
  }

  // optional fixed64 user_steamid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->user_steamid(), target);
  }

  // optional bool muted = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->muted(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_MuteBroadcastChatUser_Request)
  return target;
}

size_t CBroadcast_MuteBroadcastChatUser_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_MuteBroadcastChatUser_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 chat_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 user_steamid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional bool muted = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_MuteBroadcastChatUser_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_MuteBroadcastChatUser_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_MuteBroadcastChatUser_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CBroadcast_MuteBroadcastChatUser_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_MuteBroadcastChatUser_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_MuteBroadcastChatUser_Request)
    MergeFrom(*source);
  }
}

void CBroadcast_MuteBroadcastChatUser_Request::MergeFrom(const CBroadcast_MuteBroadcastChatUser_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_MuteBroadcastChatUser_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      chat_id_ = from.chat_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      user_steamid_ = from.user_steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      muted_ = from.muted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_MuteBroadcastChatUser_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_MuteBroadcastChatUser_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_MuteBroadcastChatUser_Request::CopyFrom(const CBroadcast_MuteBroadcastChatUser_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_MuteBroadcastChatUser_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_MuteBroadcastChatUser_Request::IsInitialized() const {
  return true;
}

void CBroadcast_MuteBroadcastChatUser_Request::Swap(CBroadcast_MuteBroadcastChatUser_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_MuteBroadcastChatUser_Request::InternalSwap(CBroadcast_MuteBroadcastChatUser_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(chat_id_, other->chat_id_);
  swap(user_steamid_, other->user_steamid_);
  swap(muted_, other->muted_);
}

::google::protobuf::Metadata CBroadcast_MuteBroadcastChatUser_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_MuteBroadcastChatUser_Response::InitAsDefaultInstance() {
}
class CBroadcast_MuteBroadcastChatUser_Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_MuteBroadcastChatUser_Response::CBroadcast_MuteBroadcastChatUser_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_MuteBroadcastChatUser_Response)
}
CBroadcast_MuteBroadcastChatUser_Response::CBroadcast_MuteBroadcastChatUser_Response(const CBroadcast_MuteBroadcastChatUser_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_MuteBroadcastChatUser_Response)
}

void CBroadcast_MuteBroadcastChatUser_Response::SharedCtor() {
}

CBroadcast_MuteBroadcastChatUser_Response::~CBroadcast_MuteBroadcastChatUser_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_MuteBroadcastChatUser_Response)
  SharedDtor();
}

void CBroadcast_MuteBroadcastChatUser_Response::SharedDtor() {
}

void CBroadcast_MuteBroadcastChatUser_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBroadcast_MuteBroadcastChatUser_Response& CBroadcast_MuteBroadcastChatUser_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CBroadcast_MuteBroadcastChatUser_Response_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CBroadcast_MuteBroadcastChatUser_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_MuteBroadcastChatUser_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CBroadcast_MuteBroadcastChatUser_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CBroadcast_MuteBroadcastChatUser_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CBroadcast_MuteBroadcastChatUser_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_MuteBroadcastChatUser_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_MuteBroadcastChatUser_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_MuteBroadcastChatUser_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CBroadcast_MuteBroadcastChatUser_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_MuteBroadcastChatUser_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_MuteBroadcastChatUser_Response)
}

::google::protobuf::uint8* CBroadcast_MuteBroadcastChatUser_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_MuteBroadcastChatUser_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_MuteBroadcastChatUser_Response)
  return target;
}

size_t CBroadcast_MuteBroadcastChatUser_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_MuteBroadcastChatUser_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_MuteBroadcastChatUser_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_MuteBroadcastChatUser_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_MuteBroadcastChatUser_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CBroadcast_MuteBroadcastChatUser_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_MuteBroadcastChatUser_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_MuteBroadcastChatUser_Response)
    MergeFrom(*source);
  }
}

void CBroadcast_MuteBroadcastChatUser_Response::MergeFrom(const CBroadcast_MuteBroadcastChatUser_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_MuteBroadcastChatUser_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CBroadcast_MuteBroadcastChatUser_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_MuteBroadcastChatUser_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_MuteBroadcastChatUser_Response::CopyFrom(const CBroadcast_MuteBroadcastChatUser_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_MuteBroadcastChatUser_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_MuteBroadcastChatUser_Response::IsInitialized() const {
  return true;
}

void CBroadcast_MuteBroadcastChatUser_Response::Swap(CBroadcast_MuteBroadcastChatUser_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_MuteBroadcastChatUser_Response::InternalSwap(CBroadcast_MuteBroadcastChatUser_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CBroadcast_MuteBroadcastChatUser_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_RemoveUserChatText_Request::InitAsDefaultInstance() {
}
class CBroadcast_RemoveUserChatText_Request::HasBitSetters {
 public:
  static void set_has_chat_id(CBroadcast_RemoveUserChatText_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_user_steamid(CBroadcast_RemoveUserChatText_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_RemoveUserChatText_Request::kChatIdFieldNumber;
const int CBroadcast_RemoveUserChatText_Request::kUserSteamidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_RemoveUserChatText_Request::CBroadcast_RemoveUserChatText_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_RemoveUserChatText_Request)
}
CBroadcast_RemoveUserChatText_Request::CBroadcast_RemoveUserChatText_Request(const CBroadcast_RemoveUserChatText_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chat_id_, &from.chat_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_steamid_) -
    reinterpret_cast<char*>(&chat_id_)) + sizeof(user_steamid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_RemoveUserChatText_Request)
}

void CBroadcast_RemoveUserChatText_Request::SharedCtor() {
  ::memset(&chat_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_steamid_) -
      reinterpret_cast<char*>(&chat_id_)) + sizeof(user_steamid_));
}

CBroadcast_RemoveUserChatText_Request::~CBroadcast_RemoveUserChatText_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_RemoveUserChatText_Request)
  SharedDtor();
}

void CBroadcast_RemoveUserChatText_Request::SharedDtor() {
}

void CBroadcast_RemoveUserChatText_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBroadcast_RemoveUserChatText_Request& CBroadcast_RemoveUserChatText_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CBroadcast_RemoveUserChatText_Request_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CBroadcast_RemoveUserChatText_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_RemoveUserChatText_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&chat_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&user_steamid_) -
        reinterpret_cast<char*>(&chat_id_)) + sizeof(user_steamid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CBroadcast_RemoveUserChatText_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CBroadcast_RemoveUserChatText_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 chat_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_chat_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed64 user_steamid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_user_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CBroadcast_RemoveUserChatText_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_RemoveUserChatText_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 chat_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_chat_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &chat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 user_steamid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_user_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &user_steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_RemoveUserChatText_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_RemoveUserChatText_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CBroadcast_RemoveUserChatText_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_RemoveUserChatText_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 chat_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->chat_id(), output);
  }

  // optional fixed64 user_steamid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->user_steamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_RemoveUserChatText_Request)
}

::google::protobuf::uint8* CBroadcast_RemoveUserChatText_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_RemoveUserChatText_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 chat_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->chat_id(), target);
  }

  // optional fixed64 user_steamid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->user_steamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_RemoveUserChatText_Request)
  return target;
}

size_t CBroadcast_RemoveUserChatText_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_RemoveUserChatText_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 chat_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 user_steamid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_RemoveUserChatText_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_RemoveUserChatText_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_RemoveUserChatText_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CBroadcast_RemoveUserChatText_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_RemoveUserChatText_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_RemoveUserChatText_Request)
    MergeFrom(*source);
  }
}

void CBroadcast_RemoveUserChatText_Request::MergeFrom(const CBroadcast_RemoveUserChatText_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_RemoveUserChatText_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      chat_id_ = from.chat_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      user_steamid_ = from.user_steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_RemoveUserChatText_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_RemoveUserChatText_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_RemoveUserChatText_Request::CopyFrom(const CBroadcast_RemoveUserChatText_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_RemoveUserChatText_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_RemoveUserChatText_Request::IsInitialized() const {
  return true;
}

void CBroadcast_RemoveUserChatText_Request::Swap(CBroadcast_RemoveUserChatText_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_RemoveUserChatText_Request::InternalSwap(CBroadcast_RemoveUserChatText_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(chat_id_, other->chat_id_);
  swap(user_steamid_, other->user_steamid_);
}

::google::protobuf::Metadata CBroadcast_RemoveUserChatText_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_RemoveUserChatText_Response::InitAsDefaultInstance() {
}
class CBroadcast_RemoveUserChatText_Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_RemoveUserChatText_Response::CBroadcast_RemoveUserChatText_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_RemoveUserChatText_Response)
}
CBroadcast_RemoveUserChatText_Response::CBroadcast_RemoveUserChatText_Response(const CBroadcast_RemoveUserChatText_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_RemoveUserChatText_Response)
}

void CBroadcast_RemoveUserChatText_Response::SharedCtor() {
}

CBroadcast_RemoveUserChatText_Response::~CBroadcast_RemoveUserChatText_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_RemoveUserChatText_Response)
  SharedDtor();
}

void CBroadcast_RemoveUserChatText_Response::SharedDtor() {
}

void CBroadcast_RemoveUserChatText_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBroadcast_RemoveUserChatText_Response& CBroadcast_RemoveUserChatText_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CBroadcast_RemoveUserChatText_Response_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CBroadcast_RemoveUserChatText_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_RemoveUserChatText_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CBroadcast_RemoveUserChatText_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CBroadcast_RemoveUserChatText_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CBroadcast_RemoveUserChatText_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_RemoveUserChatText_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_RemoveUserChatText_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_RemoveUserChatText_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CBroadcast_RemoveUserChatText_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_RemoveUserChatText_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_RemoveUserChatText_Response)
}

::google::protobuf::uint8* CBroadcast_RemoveUserChatText_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_RemoveUserChatText_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_RemoveUserChatText_Response)
  return target;
}

size_t CBroadcast_RemoveUserChatText_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_RemoveUserChatText_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_RemoveUserChatText_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_RemoveUserChatText_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_RemoveUserChatText_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CBroadcast_RemoveUserChatText_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_RemoveUserChatText_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_RemoveUserChatText_Response)
    MergeFrom(*source);
  }
}

void CBroadcast_RemoveUserChatText_Response::MergeFrom(const CBroadcast_RemoveUserChatText_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_RemoveUserChatText_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CBroadcast_RemoveUserChatText_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_RemoveUserChatText_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_RemoveUserChatText_Response::CopyFrom(const CBroadcast_RemoveUserChatText_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_RemoveUserChatText_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_RemoveUserChatText_Response::IsInitialized() const {
  return true;
}

void CBroadcast_RemoveUserChatText_Response::Swap(CBroadcast_RemoveUserChatText_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_RemoveUserChatText_Response::InternalSwap(CBroadcast_RemoveUserChatText_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CBroadcast_RemoveUserChatText_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_GetBroadcastChatUserNames_Request::InitAsDefaultInstance() {
}
class CBroadcast_GetBroadcastChatUserNames_Request::HasBitSetters {
 public:
  static void set_has_chat_id(CBroadcast_GetBroadcastChatUserNames_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_GetBroadcastChatUserNames_Request::kChatIdFieldNumber;
const int CBroadcast_GetBroadcastChatUserNames_Request::kUserSteamidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_GetBroadcastChatUserNames_Request::CBroadcast_GetBroadcastChatUserNames_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_GetBroadcastChatUserNames_Request)
}
CBroadcast_GetBroadcastChatUserNames_Request::CBroadcast_GetBroadcastChatUserNames_Request(const CBroadcast_GetBroadcastChatUserNames_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      user_steamid_(from.user_steamid_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chat_id_ = from.chat_id_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_GetBroadcastChatUserNames_Request)
}

void CBroadcast_GetBroadcastChatUserNames_Request::SharedCtor() {
  chat_id_ = PROTOBUF_ULONGLONG(0);
}

CBroadcast_GetBroadcastChatUserNames_Request::~CBroadcast_GetBroadcastChatUserNames_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_GetBroadcastChatUserNames_Request)
  SharedDtor();
}

void CBroadcast_GetBroadcastChatUserNames_Request::SharedDtor() {
}

void CBroadcast_GetBroadcastChatUserNames_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBroadcast_GetBroadcastChatUserNames_Request& CBroadcast_GetBroadcastChatUserNames_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CBroadcast_GetBroadcastChatUserNames_Request_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CBroadcast_GetBroadcastChatUserNames_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_GetBroadcastChatUserNames_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_steamid_.Clear();
  chat_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CBroadcast_GetBroadcastChatUserNames_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CBroadcast_GetBroadcastChatUserNames_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 chat_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_chat_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // repeated fixed64 user_steamid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 17) {
          do {
            msg->add_user_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
            ptr += sizeof(::google::protobuf::uint64);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 17 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedFixed64Parser;
        object = msg->mutable_user_steamid();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CBroadcast_GetBroadcastChatUserNames_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_GetBroadcastChatUserNames_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 chat_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_chat_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &chat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed64 user_steamid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 17u, input, this->mutable_user_steamid())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_user_steamid())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_GetBroadcastChatUserNames_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_GetBroadcastChatUserNames_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CBroadcast_GetBroadcastChatUserNames_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_GetBroadcastChatUserNames_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 chat_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->chat_id(), output);
  }

  // repeated fixed64 user_steamid = 2;
  for (int i = 0, n = this->user_steamid_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      2, this->user_steamid(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_GetBroadcastChatUserNames_Request)
}

::google::protobuf::uint8* CBroadcast_GetBroadcastChatUserNames_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_GetBroadcastChatUserNames_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 chat_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->chat_id(), target);
  }

  // repeated fixed64 user_steamid = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed64ToArray(2, this->user_steamid_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_GetBroadcastChatUserNames_Request)
  return target;
}

size_t CBroadcast_GetBroadcastChatUserNames_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_GetBroadcastChatUserNames_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 user_steamid = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->user_steamid_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->user_steamid_size());
    total_size += data_size;
  }

  // optional fixed64 chat_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_GetBroadcastChatUserNames_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_GetBroadcastChatUserNames_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_GetBroadcastChatUserNames_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CBroadcast_GetBroadcastChatUserNames_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_GetBroadcastChatUserNames_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_GetBroadcastChatUserNames_Request)
    MergeFrom(*source);
  }
}

void CBroadcast_GetBroadcastChatUserNames_Request::MergeFrom(const CBroadcast_GetBroadcastChatUserNames_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_GetBroadcastChatUserNames_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_steamid_.MergeFrom(from.user_steamid_);
  if (from.has_chat_id()) {
    set_chat_id(from.chat_id());
  }
}

void CBroadcast_GetBroadcastChatUserNames_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_GetBroadcastChatUserNames_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_GetBroadcastChatUserNames_Request::CopyFrom(const CBroadcast_GetBroadcastChatUserNames_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_GetBroadcastChatUserNames_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_GetBroadcastChatUserNames_Request::IsInitialized() const {
  return true;
}

void CBroadcast_GetBroadcastChatUserNames_Request::Swap(CBroadcast_GetBroadcastChatUserNames_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_GetBroadcastChatUserNames_Request::InternalSwap(CBroadcast_GetBroadcastChatUserNames_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  user_steamid_.InternalSwap(&other->user_steamid_);
  swap(chat_id_, other->chat_id_);
}

::google::protobuf::Metadata CBroadcast_GetBroadcastChatUserNames_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::InitAsDefaultInstance() {
}
class CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::HasBitSetters {
 public:
  static void set_has_steam_id(CBroadcast_GetBroadcastChatUserNames_Response_PersonaName* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_persona(CBroadcast_GetBroadcastChatUserNames_Response_PersonaName* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::kSteamIdFieldNumber;
const int CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::kPersonaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName)
}
CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName(const CBroadcast_GetBroadcastChatUserNames_Response_PersonaName& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  persona_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_persona()) {
    persona_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_);
  }
  steam_id_ = from.steam_id_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName)
}

void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CBroadcast_GetBroadcastChatUserNames_Response_PersonaName_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  persona_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  steam_id_ = PROTOBUF_ULONGLONG(0);
}

CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::~CBroadcast_GetBroadcastChatUserNames_Response_PersonaName() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName)
  SharedDtor();
}

void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::SharedDtor() {
  persona_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBroadcast_GetBroadcastChatUserNames_Response_PersonaName& CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CBroadcast_GetBroadcastChatUserNames_Response_PersonaName_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    persona_.ClearNonDefaultToEmptyNoArena();
  }
  steam_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CBroadcast_GetBroadcastChatUserNames_Response_PersonaName*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steam_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional string persona = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName.persona");
        object = msg->mutable_persona();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string persona = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_persona()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->persona().data(), static_cast<int>(this->persona().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName.persona");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional string persona = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona().data(), static_cast<int>(this->persona().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName.persona");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->persona(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName)
}

::google::protobuf::uint8* CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional string persona = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona().data(), static_cast<int>(this->persona().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName.persona");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->persona(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName)
  return target;
}

size_t CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string persona = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->persona());
    }

    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_GetBroadcastChatUserNames_Response_PersonaName* source =
      ::google::protobuf::DynamicCastToGenerated<CBroadcast_GetBroadcastChatUserNames_Response_PersonaName>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName)
    MergeFrom(*source);
  }
}

void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::MergeFrom(const CBroadcast_GetBroadcastChatUserNames_Response_PersonaName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      persona_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_);
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_ = from.steam_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::CopyFrom(const CBroadcast_GetBroadcastChatUserNames_Response_PersonaName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::IsInitialized() const {
  return true;
}

void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::Swap(CBroadcast_GetBroadcastChatUserNames_Response_PersonaName* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::InternalSwap(CBroadcast_GetBroadcastChatUserNames_Response_PersonaName* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  persona_.Swap(&other->persona_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(steam_id_, other->steam_id_);
}

::google::protobuf::Metadata CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_GetBroadcastChatUserNames_Response::InitAsDefaultInstance() {
}
class CBroadcast_GetBroadcastChatUserNames_Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_GetBroadcastChatUserNames_Response::kPersonaNamesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_GetBroadcastChatUserNames_Response::CBroadcast_GetBroadcastChatUserNames_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response)
}
CBroadcast_GetBroadcastChatUserNames_Response::CBroadcast_GetBroadcastChatUserNames_Response(const CBroadcast_GetBroadcastChatUserNames_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      persona_names_(from.persona_names_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response)
}

void CBroadcast_GetBroadcastChatUserNames_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CBroadcast_GetBroadcastChatUserNames_Response_steammessages_5fbroadcast_2esteamclient_2eproto.base);
}

CBroadcast_GetBroadcastChatUserNames_Response::~CBroadcast_GetBroadcastChatUserNames_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response)
  SharedDtor();
}

void CBroadcast_GetBroadcastChatUserNames_Response::SharedDtor() {
}

void CBroadcast_GetBroadcastChatUserNames_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBroadcast_GetBroadcastChatUserNames_Response& CBroadcast_GetBroadcastChatUserNames_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CBroadcast_GetBroadcastChatUserNames_Response_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CBroadcast_GetBroadcastChatUserNames_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  persona_names_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CBroadcast_GetBroadcastChatUserNames_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CBroadcast_GetBroadcastChatUserNames_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName persona_names = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::_InternalParse;
          object = msg->add_persona_names();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CBroadcast_GetBroadcastChatUserNames_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName persona_names = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_persona_names()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CBroadcast_GetBroadcastChatUserNames_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName persona_names = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->persona_names_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->persona_names(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response)
}

::google::protobuf::uint8* CBroadcast_GetBroadcastChatUserNames_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName persona_names = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->persona_names_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->persona_names(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response)
  return target;
}

size_t CBroadcast_GetBroadcastChatUserNames_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName persona_names = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->persona_names_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->persona_names(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_GetBroadcastChatUserNames_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_GetBroadcastChatUserNames_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CBroadcast_GetBroadcastChatUserNames_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response)
    MergeFrom(*source);
  }
}

void CBroadcast_GetBroadcastChatUserNames_Response::MergeFrom(const CBroadcast_GetBroadcastChatUserNames_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  persona_names_.MergeFrom(from.persona_names_);
}

void CBroadcast_GetBroadcastChatUserNames_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_GetBroadcastChatUserNames_Response::CopyFrom(const CBroadcast_GetBroadcastChatUserNames_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_GetBroadcastChatUserNames_Response::IsInitialized() const {
  return true;
}

void CBroadcast_GetBroadcastChatUserNames_Response::Swap(CBroadcast_GetBroadcastChatUserNames_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_GetBroadcastChatUserNames_Response::InternalSwap(CBroadcast_GetBroadcastChatUserNames_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&persona_names_)->InternalSwap(CastToBase(&other->persona_names_));
}

::google::protobuf::Metadata CBroadcast_GetBroadcastChatUserNames_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_SetRTMPInfo_Request::InitAsDefaultInstance() {
}
class CBroadcast_SetRTMPInfo_Request::HasBitSetters {
 public:
  static void set_has_broadcast_permission(CBroadcast_SetRTMPInfo_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_update_token(CBroadcast_SetRTMPInfo_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_broadcast_delay(CBroadcast_SetRTMPInfo_Request* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_app_id(CBroadcast_SetRTMPInfo_Request* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_required_app_id(CBroadcast_SetRTMPInfo_Request* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_broadcast_chat_permission(CBroadcast_SetRTMPInfo_Request* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_broadcast_buffer(CBroadcast_SetRTMPInfo_Request* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_steamid(CBroadcast_SetRTMPInfo_Request* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_chat_rate_limit(CBroadcast_SetRTMPInfo_Request* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_SetRTMPInfo_Request::kBroadcastPermissionFieldNumber;
const int CBroadcast_SetRTMPInfo_Request::kUpdateTokenFieldNumber;
const int CBroadcast_SetRTMPInfo_Request::kBroadcastDelayFieldNumber;
const int CBroadcast_SetRTMPInfo_Request::kAppIdFieldNumber;
const int CBroadcast_SetRTMPInfo_Request::kRequiredAppIdFieldNumber;
const int CBroadcast_SetRTMPInfo_Request::kBroadcastChatPermissionFieldNumber;
const int CBroadcast_SetRTMPInfo_Request::kBroadcastBufferFieldNumber;
const int CBroadcast_SetRTMPInfo_Request::kSteamidFieldNumber;
const int CBroadcast_SetRTMPInfo_Request::kChatRateLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_SetRTMPInfo_Request::CBroadcast_SetRTMPInfo_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_SetRTMPInfo_Request)
}
CBroadcast_SetRTMPInfo_Request::CBroadcast_SetRTMPInfo_Request(const CBroadcast_SetRTMPInfo_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&broadcast_permission_, &from.broadcast_permission_,
    static_cast<size_t>(reinterpret_cast<char*>(&chat_rate_limit_) -
    reinterpret_cast<char*>(&broadcast_permission_)) + sizeof(chat_rate_limit_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_SetRTMPInfo_Request)
}

void CBroadcast_SetRTMPInfo_Request::SharedCtor() {
  ::memset(&broadcast_permission_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chat_rate_limit_) -
      reinterpret_cast<char*>(&broadcast_permission_)) + sizeof(chat_rate_limit_));
}

CBroadcast_SetRTMPInfo_Request::~CBroadcast_SetRTMPInfo_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_SetRTMPInfo_Request)
  SharedDtor();
}

void CBroadcast_SetRTMPInfo_Request::SharedDtor() {
}

void CBroadcast_SetRTMPInfo_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBroadcast_SetRTMPInfo_Request& CBroadcast_SetRTMPInfo_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CBroadcast_SetRTMPInfo_Request_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CBroadcast_SetRTMPInfo_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_SetRTMPInfo_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&broadcast_permission_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&broadcast_buffer_) -
        reinterpret_cast<char*>(&broadcast_permission_)) + sizeof(broadcast_buffer_));
  }
  chat_rate_limit_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CBroadcast_SetRTMPInfo_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CBroadcast_SetRTMPInfo_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 broadcast_permission = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_broadcast_permission(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool update_token = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_update_token(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 broadcast_delay = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_broadcast_delay(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 app_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 required_app_id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_required_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.steam.EBroadcastChatPermission broadcast_chat_permission = 6 [default = k_EBroadcastChatPermissionPublic, (.proto.steam.description) = "Who is permitted to send a chat message during broadcast"];
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::steam::EBroadcastChatPermission_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(6, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_broadcast_chat_permission(static_cast<::proto::steam::EBroadcastChatPermission>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 broadcast_buffer = 7 [(.proto.steam.description) = "Previous seconds we keep of the stream available"];
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_broadcast_buffer(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 steamid = 8 [(.proto.steam.description) = "broadcaster steamID if not logged-in user"];
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 65) goto handle_unusual;
        msg->set_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 chat_rate_limit = 9 [(.proto.steam.description) = "Seconds required between chat messages"];
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_chat_rate_limit(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CBroadcast_SetRTMPInfo_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_SetRTMPInfo_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 broadcast_permission = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_broadcast_permission(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &broadcast_permission_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool update_token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_update_token(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &update_token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 broadcast_delay = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_broadcast_delay(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &broadcast_delay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 app_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 required_app_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_required_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &required_app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.EBroadcastChatPermission broadcast_chat_permission = 6 [default = k_EBroadcastChatPermissionPublic, (.proto.steam.description) = "Who is permitted to send a chat message during broadcast"];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::steam::EBroadcastChatPermission_IsValid(value)) {
            set_broadcast_chat_permission(static_cast< ::proto::steam::EBroadcastChatPermission >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 broadcast_buffer = 7 [(.proto.steam.description) = "Previous seconds we keep of the stream available"];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_broadcast_buffer(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &broadcast_buffer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steamid = 8 [(.proto.steam.description) = "broadcaster steamID if not logged-in user"];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (65 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 chat_rate_limit = 9 [(.proto.steam.description) = "Seconds required between chat messages"];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_chat_rate_limit(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chat_rate_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_SetRTMPInfo_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_SetRTMPInfo_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CBroadcast_SetRTMPInfo_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_SetRTMPInfo_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 broadcast_permission = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->broadcast_permission(), output);
  }

  // optional bool update_token = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->update_token(), output);
  }

  // optional int32 broadcast_delay = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->broadcast_delay(), output);
  }

  // optional uint32 app_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->app_id(), output);
  }

  // optional uint32 required_app_id = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->required_app_id(), output);
  }

  // optional .proto.steam.EBroadcastChatPermission broadcast_chat_permission = 6 [default = k_EBroadcastChatPermissionPublic, (.proto.steam.description) = "Who is permitted to send a chat message during broadcast"];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->broadcast_chat_permission(), output);
  }

  // optional int32 broadcast_buffer = 7 [(.proto.steam.description) = "Previous seconds we keep of the stream available"];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->broadcast_buffer(), output);
  }

  // optional fixed64 steamid = 8 [(.proto.steam.description) = "broadcaster steamID if not logged-in user"];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(8, this->steamid(), output);
  }

  // optional uint32 chat_rate_limit = 9 [(.proto.steam.description) = "Seconds required between chat messages"];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->chat_rate_limit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_SetRTMPInfo_Request)
}

::google::protobuf::uint8* CBroadcast_SetRTMPInfo_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_SetRTMPInfo_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 broadcast_permission = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->broadcast_permission(), target);
  }

  // optional bool update_token = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->update_token(), target);
  }

  // optional int32 broadcast_delay = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->broadcast_delay(), target);
  }

  // optional uint32 app_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->app_id(), target);
  }

  // optional uint32 required_app_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->required_app_id(), target);
  }

  // optional .proto.steam.EBroadcastChatPermission broadcast_chat_permission = 6 [default = k_EBroadcastChatPermissionPublic, (.proto.steam.description) = "Who is permitted to send a chat message during broadcast"];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->broadcast_chat_permission(), target);
  }

  // optional int32 broadcast_buffer = 7 [(.proto.steam.description) = "Previous seconds we keep of the stream available"];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->broadcast_buffer(), target);
  }

  // optional fixed64 steamid = 8 [(.proto.steam.description) = "broadcaster steamID if not logged-in user"];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(8, this->steamid(), target);
  }

  // optional uint32 chat_rate_limit = 9 [(.proto.steam.description) = "Seconds required between chat messages"];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->chat_rate_limit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_SetRTMPInfo_Request)
  return target;
}

size_t CBroadcast_SetRTMPInfo_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_SetRTMPInfo_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 broadcast_permission = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->broadcast_permission());
    }

    // optional bool update_token = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional int32 broadcast_delay = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->broadcast_delay());
    }

    // optional uint32 app_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional uint32 required_app_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->required_app_id());
    }

    // optional .proto.steam.EBroadcastChatPermission broadcast_chat_permission = 6 [default = k_EBroadcastChatPermissionPublic, (.proto.steam.description) = "Who is permitted to send a chat message during broadcast"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->broadcast_chat_permission());
    }

    // optional fixed64 steamid = 8 [(.proto.steam.description) = "broadcaster steamID if not logged-in user"];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional int32 broadcast_buffer = 7 [(.proto.steam.description) = "Previous seconds we keep of the stream available"];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->broadcast_buffer());
    }

  }
  // optional uint32 chat_rate_limit = 9 [(.proto.steam.description) = "Seconds required between chat messages"];
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->chat_rate_limit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_SetRTMPInfo_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_SetRTMPInfo_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_SetRTMPInfo_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CBroadcast_SetRTMPInfo_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_SetRTMPInfo_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_SetRTMPInfo_Request)
    MergeFrom(*source);
  }
}

void CBroadcast_SetRTMPInfo_Request::MergeFrom(const CBroadcast_SetRTMPInfo_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_SetRTMPInfo_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      broadcast_permission_ = from.broadcast_permission_;
    }
    if (cached_has_bits & 0x00000002u) {
      update_token_ = from.update_token_;
    }
    if (cached_has_bits & 0x00000004u) {
      broadcast_delay_ = from.broadcast_delay_;
    }
    if (cached_has_bits & 0x00000008u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      required_app_id_ = from.required_app_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      broadcast_chat_permission_ = from.broadcast_chat_permission_;
    }
    if (cached_has_bits & 0x00000040u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000080u) {
      broadcast_buffer_ = from.broadcast_buffer_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_chat_rate_limit(from.chat_rate_limit());
  }
}

void CBroadcast_SetRTMPInfo_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_SetRTMPInfo_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_SetRTMPInfo_Request::CopyFrom(const CBroadcast_SetRTMPInfo_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_SetRTMPInfo_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_SetRTMPInfo_Request::IsInitialized() const {
  return true;
}

void CBroadcast_SetRTMPInfo_Request::Swap(CBroadcast_SetRTMPInfo_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_SetRTMPInfo_Request::InternalSwap(CBroadcast_SetRTMPInfo_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(broadcast_permission_, other->broadcast_permission_);
  swap(update_token_, other->update_token_);
  swap(broadcast_delay_, other->broadcast_delay_);
  swap(app_id_, other->app_id_);
  swap(required_app_id_, other->required_app_id_);
  swap(broadcast_chat_permission_, other->broadcast_chat_permission_);
  swap(steamid_, other->steamid_);
  swap(broadcast_buffer_, other->broadcast_buffer_);
  swap(chat_rate_limit_, other->chat_rate_limit_);
}

::google::protobuf::Metadata CBroadcast_SetRTMPInfo_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_SetRTMPInfo_Response::InitAsDefaultInstance() {
}
class CBroadcast_SetRTMPInfo_Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_SetRTMPInfo_Response::CBroadcast_SetRTMPInfo_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_SetRTMPInfo_Response)
}
CBroadcast_SetRTMPInfo_Response::CBroadcast_SetRTMPInfo_Response(const CBroadcast_SetRTMPInfo_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_SetRTMPInfo_Response)
}

void CBroadcast_SetRTMPInfo_Response::SharedCtor() {
}

CBroadcast_SetRTMPInfo_Response::~CBroadcast_SetRTMPInfo_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_SetRTMPInfo_Response)
  SharedDtor();
}

void CBroadcast_SetRTMPInfo_Response::SharedDtor() {
}

void CBroadcast_SetRTMPInfo_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBroadcast_SetRTMPInfo_Response& CBroadcast_SetRTMPInfo_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CBroadcast_SetRTMPInfo_Response_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CBroadcast_SetRTMPInfo_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_SetRTMPInfo_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CBroadcast_SetRTMPInfo_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CBroadcast_SetRTMPInfo_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CBroadcast_SetRTMPInfo_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_SetRTMPInfo_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_SetRTMPInfo_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_SetRTMPInfo_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CBroadcast_SetRTMPInfo_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_SetRTMPInfo_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_SetRTMPInfo_Response)
}

::google::protobuf::uint8* CBroadcast_SetRTMPInfo_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_SetRTMPInfo_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_SetRTMPInfo_Response)
  return target;
}

size_t CBroadcast_SetRTMPInfo_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_SetRTMPInfo_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_SetRTMPInfo_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_SetRTMPInfo_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_SetRTMPInfo_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CBroadcast_SetRTMPInfo_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_SetRTMPInfo_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_SetRTMPInfo_Response)
    MergeFrom(*source);
  }
}

void CBroadcast_SetRTMPInfo_Response::MergeFrom(const CBroadcast_SetRTMPInfo_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_SetRTMPInfo_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CBroadcast_SetRTMPInfo_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_SetRTMPInfo_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_SetRTMPInfo_Response::CopyFrom(const CBroadcast_SetRTMPInfo_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_SetRTMPInfo_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_SetRTMPInfo_Response::IsInitialized() const {
  return true;
}

void CBroadcast_SetRTMPInfo_Response::Swap(CBroadcast_SetRTMPInfo_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_SetRTMPInfo_Response::InternalSwap(CBroadcast_SetRTMPInfo_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CBroadcast_SetRTMPInfo_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_GetRTMPInfo_Request::InitAsDefaultInstance() {
}
class CBroadcast_GetRTMPInfo_Request::HasBitSetters {
 public:
  static void set_has_ip(CBroadcast_GetRTMPInfo_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_steamid(CBroadcast_GetRTMPInfo_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_GetRTMPInfo_Request::kIpFieldNumber;
const int CBroadcast_GetRTMPInfo_Request::kSteamidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_GetRTMPInfo_Request::CBroadcast_GetRTMPInfo_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_GetRTMPInfo_Request)
}
CBroadcast_GetRTMPInfo_Request::CBroadcast_GetRTMPInfo_Request(const CBroadcast_GetRTMPInfo_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&ip_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(ip_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_GetRTMPInfo_Request)
}

void CBroadcast_GetRTMPInfo_Request::SharedCtor() {
  ::memset(&steamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ip_) -
      reinterpret_cast<char*>(&steamid_)) + sizeof(ip_));
}

CBroadcast_GetRTMPInfo_Request::~CBroadcast_GetRTMPInfo_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_GetRTMPInfo_Request)
  SharedDtor();
}

void CBroadcast_GetRTMPInfo_Request::SharedDtor() {
}

void CBroadcast_GetRTMPInfo_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBroadcast_GetRTMPInfo_Request& CBroadcast_GetRTMPInfo_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CBroadcast_GetRTMPInfo_Request_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CBroadcast_GetRTMPInfo_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_GetRTMPInfo_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ip_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(ip_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CBroadcast_GetRTMPInfo_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CBroadcast_GetRTMPInfo_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 ip = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_ip(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 steamid = 2 [(.proto.steam.description) = "broadcaster steamID if not logged-in user"];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CBroadcast_GetRTMPInfo_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_GetRTMPInfo_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_ip(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steamid = 2 [(.proto.steam.description) = "broadcaster steamID if not logged-in user"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_GetRTMPInfo_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_GetRTMPInfo_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CBroadcast_GetRTMPInfo_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_GetRTMPInfo_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ip = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ip(), output);
  }

  // optional fixed64 steamid = 2 [(.proto.steam.description) = "broadcaster steamID if not logged-in user"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_GetRTMPInfo_Request)
}

::google::protobuf::uint8* CBroadcast_GetRTMPInfo_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_GetRTMPInfo_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ip = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ip(), target);
  }

  // optional fixed64 steamid = 2 [(.proto.steam.description) = "broadcaster steamID if not logged-in user"];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_GetRTMPInfo_Request)
  return target;
}

size_t CBroadcast_GetRTMPInfo_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_GetRTMPInfo_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steamid = 2 [(.proto.steam.description) = "broadcaster steamID if not logged-in user"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 ip = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ip());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_GetRTMPInfo_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_GetRTMPInfo_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_GetRTMPInfo_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CBroadcast_GetRTMPInfo_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_GetRTMPInfo_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_GetRTMPInfo_Request)
    MergeFrom(*source);
  }
}

void CBroadcast_GetRTMPInfo_Request::MergeFrom(const CBroadcast_GetRTMPInfo_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_GetRTMPInfo_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      ip_ = from.ip_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_GetRTMPInfo_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_GetRTMPInfo_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_GetRTMPInfo_Request::CopyFrom(const CBroadcast_GetRTMPInfo_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_GetRTMPInfo_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_GetRTMPInfo_Request::IsInitialized() const {
  return true;
}

void CBroadcast_GetRTMPInfo_Request::Swap(CBroadcast_GetRTMPInfo_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_GetRTMPInfo_Request::InternalSwap(CBroadcast_GetRTMPInfo_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
  swap(ip_, other->ip_);
}

::google::protobuf::Metadata CBroadcast_GetRTMPInfo_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_GetRTMPInfo_Response::InitAsDefaultInstance() {
}
class CBroadcast_GetRTMPInfo_Response::HasBitSetters {
 public:
  static void set_has_broadcast_permission(CBroadcast_GetRTMPInfo_Response* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_rtmp_host(CBroadcast_GetRTMPInfo_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_rtmp_token(CBroadcast_GetRTMPInfo_Response* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_broadcast_delay(CBroadcast_GetRTMPInfo_Response* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_app_id(CBroadcast_GetRTMPInfo_Response* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_required_app_id(CBroadcast_GetRTMPInfo_Response* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_broadcast_chat_permission(CBroadcast_GetRTMPInfo_Response* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_broadcast_buffer(CBroadcast_GetRTMPInfo_Response* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_steamid(CBroadcast_GetRTMPInfo_Response* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_chat_rate_limit(CBroadcast_GetRTMPInfo_Response* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_GetRTMPInfo_Response::kBroadcastPermissionFieldNumber;
const int CBroadcast_GetRTMPInfo_Response::kRtmpHostFieldNumber;
const int CBroadcast_GetRTMPInfo_Response::kRtmpTokenFieldNumber;
const int CBroadcast_GetRTMPInfo_Response::kBroadcastDelayFieldNumber;
const int CBroadcast_GetRTMPInfo_Response::kAppIdFieldNumber;
const int CBroadcast_GetRTMPInfo_Response::kRequiredAppIdFieldNumber;
const int CBroadcast_GetRTMPInfo_Response::kBroadcastChatPermissionFieldNumber;
const int CBroadcast_GetRTMPInfo_Response::kBroadcastBufferFieldNumber;
const int CBroadcast_GetRTMPInfo_Response::kSteamidFieldNumber;
const int CBroadcast_GetRTMPInfo_Response::kChatRateLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_GetRTMPInfo_Response::CBroadcast_GetRTMPInfo_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_GetRTMPInfo_Response)
}
CBroadcast_GetRTMPInfo_Response::CBroadcast_GetRTMPInfo_Response(const CBroadcast_GetRTMPInfo_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rtmp_host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rtmp_host()) {
    rtmp_host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rtmp_host_);
  }
  rtmp_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rtmp_token()) {
    rtmp_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rtmp_token_);
  }
  ::memcpy(&broadcast_permission_, &from.broadcast_permission_,
    static_cast<size_t>(reinterpret_cast<char*>(&chat_rate_limit_) -
    reinterpret_cast<char*>(&broadcast_permission_)) + sizeof(chat_rate_limit_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_GetRTMPInfo_Response)
}

void CBroadcast_GetRTMPInfo_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CBroadcast_GetRTMPInfo_Response_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  rtmp_host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rtmp_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&broadcast_permission_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chat_rate_limit_) -
      reinterpret_cast<char*>(&broadcast_permission_)) + sizeof(chat_rate_limit_));
}

CBroadcast_GetRTMPInfo_Response::~CBroadcast_GetRTMPInfo_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_GetRTMPInfo_Response)
  SharedDtor();
}

void CBroadcast_GetRTMPInfo_Response::SharedDtor() {
  rtmp_host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rtmp_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_GetRTMPInfo_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBroadcast_GetRTMPInfo_Response& CBroadcast_GetRTMPInfo_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CBroadcast_GetRTMPInfo_Response_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CBroadcast_GetRTMPInfo_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_GetRTMPInfo_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      rtmp_host_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      rtmp_token_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&broadcast_permission_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&broadcast_buffer_) -
        reinterpret_cast<char*>(&broadcast_permission_)) + sizeof(broadcast_buffer_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chat_rate_limit_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(chat_rate_limit_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CBroadcast_GetRTMPInfo_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CBroadcast_GetRTMPInfo_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 broadcast_permission = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_broadcast_permission(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string rtmp_host = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CBroadcast_GetRTMPInfo_Response.rtmp_host");
        object = msg->mutable_rtmp_host();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string rtmp_token = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CBroadcast_GetRTMPInfo_Response.rtmp_token");
        object = msg->mutable_rtmp_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional int32 broadcast_delay = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_broadcast_delay(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 app_id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 required_app_id = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_required_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.steam.EBroadcastChatPermission broadcast_chat_permission = 7 [default = k_EBroadcastChatPermissionPublic, (.proto.steam.description) = "Who is permitted to send a chat message during broadcast"];
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::steam::EBroadcastChatPermission_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(7, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_broadcast_chat_permission(static_cast<::proto::steam::EBroadcastChatPermission>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 broadcast_buffer = 8 [(.proto.steam.description) = "Seconds we keep streams available"];
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_broadcast_buffer(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 steamid = 9 [(.proto.steam.description) = "broadcaster steamID"];
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 73) goto handle_unusual;
        msg->set_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 chat_rate_limit = 10 [(.proto.steam.description) = "Seconds required between chat messages"];
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_chat_rate_limit(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CBroadcast_GetRTMPInfo_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_GetRTMPInfo_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 broadcast_permission = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_broadcast_permission(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &broadcast_permission_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string rtmp_host = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rtmp_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rtmp_host().data(), static_cast<int>(this->rtmp_host().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CBroadcast_GetRTMPInfo_Response.rtmp_host");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string rtmp_token = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rtmp_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rtmp_token().data(), static_cast<int>(this->rtmp_token().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CBroadcast_GetRTMPInfo_Response.rtmp_token");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 broadcast_delay = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_broadcast_delay(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &broadcast_delay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 app_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 required_app_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_required_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &required_app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.EBroadcastChatPermission broadcast_chat_permission = 7 [default = k_EBroadcastChatPermissionPublic, (.proto.steam.description) = "Who is permitted to send a chat message during broadcast"];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::steam::EBroadcastChatPermission_IsValid(value)) {
            set_broadcast_chat_permission(static_cast< ::proto::steam::EBroadcastChatPermission >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                7, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 broadcast_buffer = 8 [(.proto.steam.description) = "Seconds we keep streams available"];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_broadcast_buffer(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &broadcast_buffer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steamid = 9 [(.proto.steam.description) = "broadcaster steamID"];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (73 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 chat_rate_limit = 10 [(.proto.steam.description) = "Seconds required between chat messages"];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_chat_rate_limit(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chat_rate_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_GetRTMPInfo_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_GetRTMPInfo_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CBroadcast_GetRTMPInfo_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_GetRTMPInfo_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 broadcast_permission = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->broadcast_permission(), output);
  }

  // optional string rtmp_host = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rtmp_host().data(), static_cast<int>(this->rtmp_host().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_GetRTMPInfo_Response.rtmp_host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->rtmp_host(), output);
  }

  // optional string rtmp_token = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rtmp_token().data(), static_cast<int>(this->rtmp_token().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_GetRTMPInfo_Response.rtmp_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->rtmp_token(), output);
  }

  // optional int32 broadcast_delay = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->broadcast_delay(), output);
  }

  // optional uint32 app_id = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->app_id(), output);
  }

  // optional uint32 required_app_id = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->required_app_id(), output);
  }

  // optional .proto.steam.EBroadcastChatPermission broadcast_chat_permission = 7 [default = k_EBroadcastChatPermissionPublic, (.proto.steam.description) = "Who is permitted to send a chat message during broadcast"];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->broadcast_chat_permission(), output);
  }

  // optional int32 broadcast_buffer = 8 [(.proto.steam.description) = "Seconds we keep streams available"];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->broadcast_buffer(), output);
  }

  // optional fixed64 steamid = 9 [(.proto.steam.description) = "broadcaster steamID"];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(9, this->steamid(), output);
  }

  // optional uint32 chat_rate_limit = 10 [(.proto.steam.description) = "Seconds required between chat messages"];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->chat_rate_limit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_GetRTMPInfo_Response)
}

::google::protobuf::uint8* CBroadcast_GetRTMPInfo_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_GetRTMPInfo_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 broadcast_permission = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->broadcast_permission(), target);
  }

  // optional string rtmp_host = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rtmp_host().data(), static_cast<int>(this->rtmp_host().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_GetRTMPInfo_Response.rtmp_host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rtmp_host(), target);
  }

  // optional string rtmp_token = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rtmp_token().data(), static_cast<int>(this->rtmp_token().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_GetRTMPInfo_Response.rtmp_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->rtmp_token(), target);
  }

  // optional int32 broadcast_delay = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->broadcast_delay(), target);
  }

  // optional uint32 app_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->app_id(), target);
  }

  // optional uint32 required_app_id = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->required_app_id(), target);
  }

  // optional .proto.steam.EBroadcastChatPermission broadcast_chat_permission = 7 [default = k_EBroadcastChatPermissionPublic, (.proto.steam.description) = "Who is permitted to send a chat message during broadcast"];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->broadcast_chat_permission(), target);
  }

  // optional int32 broadcast_buffer = 8 [(.proto.steam.description) = "Seconds we keep streams available"];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->broadcast_buffer(), target);
  }

  // optional fixed64 steamid = 9 [(.proto.steam.description) = "broadcaster steamID"];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(9, this->steamid(), target);
  }

  // optional uint32 chat_rate_limit = 10 [(.proto.steam.description) = "Seconds required between chat messages"];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->chat_rate_limit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_GetRTMPInfo_Response)
  return target;
}

size_t CBroadcast_GetRTMPInfo_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_GetRTMPInfo_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string rtmp_host = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rtmp_host());
    }

    // optional string rtmp_token = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rtmp_token());
    }

    // optional int32 broadcast_permission = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->broadcast_permission());
    }

    // optional int32 broadcast_delay = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->broadcast_delay());
    }

    // optional uint32 app_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional uint32 required_app_id = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->required_app_id());
    }

    // optional .proto.steam.EBroadcastChatPermission broadcast_chat_permission = 7 [default = k_EBroadcastChatPermissionPublic, (.proto.steam.description) = "Who is permitted to send a chat message during broadcast"];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->broadcast_chat_permission());
    }

    // optional int32 broadcast_buffer = 8 [(.proto.steam.description) = "Seconds we keep streams available"];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->broadcast_buffer());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional fixed64 steamid = 9 [(.proto.steam.description) = "broadcaster steamID"];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional uint32 chat_rate_limit = 10 [(.proto.steam.description) = "Seconds required between chat messages"];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chat_rate_limit());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_GetRTMPInfo_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_GetRTMPInfo_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_GetRTMPInfo_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CBroadcast_GetRTMPInfo_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_GetRTMPInfo_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_GetRTMPInfo_Response)
    MergeFrom(*source);
  }
}

void CBroadcast_GetRTMPInfo_Response::MergeFrom(const CBroadcast_GetRTMPInfo_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_GetRTMPInfo_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      rtmp_host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rtmp_host_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      rtmp_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rtmp_token_);
    }
    if (cached_has_bits & 0x00000004u) {
      broadcast_permission_ = from.broadcast_permission_;
    }
    if (cached_has_bits & 0x00000008u) {
      broadcast_delay_ = from.broadcast_delay_;
    }
    if (cached_has_bits & 0x00000010u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      required_app_id_ = from.required_app_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      broadcast_chat_permission_ = from.broadcast_chat_permission_;
    }
    if (cached_has_bits & 0x00000080u) {
      broadcast_buffer_ = from.broadcast_buffer_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000200u) {
      chat_rate_limit_ = from.chat_rate_limit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_GetRTMPInfo_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_GetRTMPInfo_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_GetRTMPInfo_Response::CopyFrom(const CBroadcast_GetRTMPInfo_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_GetRTMPInfo_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_GetRTMPInfo_Response::IsInitialized() const {
  return true;
}

void CBroadcast_GetRTMPInfo_Response::Swap(CBroadcast_GetRTMPInfo_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_GetRTMPInfo_Response::InternalSwap(CBroadcast_GetRTMPInfo_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  rtmp_host_.Swap(&other->rtmp_host_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  rtmp_token_.Swap(&other->rtmp_token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(broadcast_permission_, other->broadcast_permission_);
  swap(broadcast_delay_, other->broadcast_delay_);
  swap(app_id_, other->app_id_);
  swap(required_app_id_, other->required_app_id_);
  swap(broadcast_chat_permission_, other->broadcast_chat_permission_);
  swap(broadcast_buffer_, other->broadcast_buffer_);
  swap(steamid_, other->steamid_);
  swap(chat_rate_limit_, other->chat_rate_limit_);
}

::google::protobuf::Metadata CBroadcast_GetRTMPInfo_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_WebRTCHaveTURNServer_Notification::InitAsDefaultInstance() {
}
class CBroadcast_WebRTCHaveTURNServer_Notification::HasBitSetters {
 public:
  static void set_has_broadcast_session_id(CBroadcast_WebRTCHaveTURNServer_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_turn_server(CBroadcast_WebRTCHaveTURNServer_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_WebRTCHaveTURNServer_Notification::kBroadcastSessionIdFieldNumber;
const int CBroadcast_WebRTCHaveTURNServer_Notification::kTurnServerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_WebRTCHaveTURNServer_Notification::CBroadcast_WebRTCHaveTURNServer_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_WebRTCHaveTURNServer_Notification)
}
CBroadcast_WebRTCHaveTURNServer_Notification::CBroadcast_WebRTCHaveTURNServer_Notification(const CBroadcast_WebRTCHaveTURNServer_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  turn_server_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_turn_server()) {
    turn_server_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.turn_server_);
  }
  broadcast_session_id_ = from.broadcast_session_id_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_WebRTCHaveTURNServer_Notification)
}

void CBroadcast_WebRTCHaveTURNServer_Notification::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CBroadcast_WebRTCHaveTURNServer_Notification_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  turn_server_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  broadcast_session_id_ = PROTOBUF_ULONGLONG(0);
}

CBroadcast_WebRTCHaveTURNServer_Notification::~CBroadcast_WebRTCHaveTURNServer_Notification() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_WebRTCHaveTURNServer_Notification)
  SharedDtor();
}

void CBroadcast_WebRTCHaveTURNServer_Notification::SharedDtor() {
  turn_server_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_WebRTCHaveTURNServer_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBroadcast_WebRTCHaveTURNServer_Notification& CBroadcast_WebRTCHaveTURNServer_Notification::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CBroadcast_WebRTCHaveTURNServer_Notification_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CBroadcast_WebRTCHaveTURNServer_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_WebRTCHaveTURNServer_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    turn_server_.ClearNonDefaultToEmptyNoArena();
  }
  broadcast_session_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CBroadcast_WebRTCHaveTURNServer_Notification::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CBroadcast_WebRTCHaveTURNServer_Notification*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 broadcast_session_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_broadcast_session_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional string turn_server = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CBroadcast_WebRTCHaveTURNServer_Notification.turn_server");
        object = msg->mutable_turn_server();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CBroadcast_WebRTCHaveTURNServer_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_WebRTCHaveTURNServer_Notification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 broadcast_session_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_broadcast_session_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &broadcast_session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string turn_server = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_turn_server()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->turn_server().data(), static_cast<int>(this->turn_server().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CBroadcast_WebRTCHaveTURNServer_Notification.turn_server");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_WebRTCHaveTURNServer_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_WebRTCHaveTURNServer_Notification)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CBroadcast_WebRTCHaveTURNServer_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_WebRTCHaveTURNServer_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_session_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->broadcast_session_id(), output);
  }

  // optional string turn_server = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->turn_server().data(), static_cast<int>(this->turn_server().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_WebRTCHaveTURNServer_Notification.turn_server");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->turn_server(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_WebRTCHaveTURNServer_Notification)
}

::google::protobuf::uint8* CBroadcast_WebRTCHaveTURNServer_Notification::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_WebRTCHaveTURNServer_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_session_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->broadcast_session_id(), target);
  }

  // optional string turn_server = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->turn_server().data(), static_cast<int>(this->turn_server().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_WebRTCHaveTURNServer_Notification.turn_server");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->turn_server(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_WebRTCHaveTURNServer_Notification)
  return target;
}

size_t CBroadcast_WebRTCHaveTURNServer_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_WebRTCHaveTURNServer_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string turn_server = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->turn_server());
    }

    // optional fixed64 broadcast_session_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_WebRTCHaveTURNServer_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_WebRTCHaveTURNServer_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_WebRTCHaveTURNServer_Notification* source =
      ::google::protobuf::DynamicCastToGenerated<CBroadcast_WebRTCHaveTURNServer_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_WebRTCHaveTURNServer_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_WebRTCHaveTURNServer_Notification)
    MergeFrom(*source);
  }
}

void CBroadcast_WebRTCHaveTURNServer_Notification::MergeFrom(const CBroadcast_WebRTCHaveTURNServer_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_WebRTCHaveTURNServer_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      turn_server_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.turn_server_);
    }
    if (cached_has_bits & 0x00000002u) {
      broadcast_session_id_ = from.broadcast_session_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_WebRTCHaveTURNServer_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_WebRTCHaveTURNServer_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_WebRTCHaveTURNServer_Notification::CopyFrom(const CBroadcast_WebRTCHaveTURNServer_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_WebRTCHaveTURNServer_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_WebRTCHaveTURNServer_Notification::IsInitialized() const {
  return true;
}

void CBroadcast_WebRTCHaveTURNServer_Notification::Swap(CBroadcast_WebRTCHaveTURNServer_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_WebRTCHaveTURNServer_Notification::InternalSwap(CBroadcast_WebRTCHaveTURNServer_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  turn_server_.Swap(&other->turn_server_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(broadcast_session_id_, other->broadcast_session_id_);
}

::google::protobuf::Metadata CBroadcast_WebRTCHaveTURNServer_Notification::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_WebRTCStartResult_Request::InitAsDefaultInstance() {
}
class CBroadcast_WebRTCStartResult_Request::HasBitSetters {
 public:
  static void set_has_webrtc_session_id(CBroadcast_WebRTCStartResult_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_started(CBroadcast_WebRTCStartResult_Request* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_offer(CBroadcast_WebRTCStartResult_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_resolution_x(CBroadcast_WebRTCStartResult_Request* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_resolution_y(CBroadcast_WebRTCStartResult_Request* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_fps(CBroadcast_WebRTCStartResult_Request* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_WebRTCStartResult_Request::kWebrtcSessionIdFieldNumber;
const int CBroadcast_WebRTCStartResult_Request::kStartedFieldNumber;
const int CBroadcast_WebRTCStartResult_Request::kOfferFieldNumber;
const int CBroadcast_WebRTCStartResult_Request::kResolutionXFieldNumber;
const int CBroadcast_WebRTCStartResult_Request::kResolutionYFieldNumber;
const int CBroadcast_WebRTCStartResult_Request::kFpsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_WebRTCStartResult_Request::CBroadcast_WebRTCStartResult_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_WebRTCStartResult_Request)
}
CBroadcast_WebRTCStartResult_Request::CBroadcast_WebRTCStartResult_Request(const CBroadcast_WebRTCStartResult_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  offer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_offer()) {
    offer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.offer_);
  }
  ::memcpy(&webrtc_session_id_, &from.webrtc_session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&fps_) -
    reinterpret_cast<char*>(&webrtc_session_id_)) + sizeof(fps_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_WebRTCStartResult_Request)
}

void CBroadcast_WebRTCStartResult_Request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CBroadcast_WebRTCStartResult_Request_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  offer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&webrtc_session_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fps_) -
      reinterpret_cast<char*>(&webrtc_session_id_)) + sizeof(fps_));
}

CBroadcast_WebRTCStartResult_Request::~CBroadcast_WebRTCStartResult_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_WebRTCStartResult_Request)
  SharedDtor();
}

void CBroadcast_WebRTCStartResult_Request::SharedDtor() {
  offer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_WebRTCStartResult_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBroadcast_WebRTCStartResult_Request& CBroadcast_WebRTCStartResult_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CBroadcast_WebRTCStartResult_Request_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CBroadcast_WebRTCStartResult_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_WebRTCStartResult_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    offer_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&webrtc_session_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fps_) -
        reinterpret_cast<char*>(&webrtc_session_id_)) + sizeof(fps_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CBroadcast_WebRTCStartResult_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CBroadcast_WebRTCStartResult_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 webrtc_session_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_webrtc_session_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional bool started = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_started(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string offer = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CBroadcast_WebRTCStartResult_Request.offer");
        object = msg->mutable_offer();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 resolution_x = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_resolution_x(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 resolution_y = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_resolution_y(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 fps = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_fps(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CBroadcast_WebRTCStartResult_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_WebRTCStartResult_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 webrtc_session_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_webrtc_session_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &webrtc_session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool started = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_started(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &started_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string offer = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_offer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->offer().data(), static_cast<int>(this->offer().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CBroadcast_WebRTCStartResult_Request.offer");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 resolution_x = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_resolution_x(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resolution_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 resolution_y = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_resolution_y(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resolution_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 fps = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_fps(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_WebRTCStartResult_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_WebRTCStartResult_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CBroadcast_WebRTCStartResult_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_WebRTCStartResult_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 webrtc_session_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->webrtc_session_id(), output);
  }

  // optional bool started = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->started(), output);
  }

  // optional string offer = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->offer().data(), static_cast<int>(this->offer().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_WebRTCStartResult_Request.offer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->offer(), output);
  }

  // optional uint32 resolution_x = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->resolution_x(), output);
  }

  // optional uint32 resolution_y = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->resolution_y(), output);
  }

  // optional uint32 fps = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->fps(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_WebRTCStartResult_Request)
}

::google::protobuf::uint8* CBroadcast_WebRTCStartResult_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_WebRTCStartResult_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 webrtc_session_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->webrtc_session_id(), target);
  }

  // optional bool started = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->started(), target);
  }

  // optional string offer = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->offer().data(), static_cast<int>(this->offer().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_WebRTCStartResult_Request.offer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->offer(), target);
  }

  // optional uint32 resolution_x = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->resolution_x(), target);
  }

  // optional uint32 resolution_y = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->resolution_y(), target);
  }

  // optional uint32 fps = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->fps(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_WebRTCStartResult_Request)
  return target;
}

size_t CBroadcast_WebRTCStartResult_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_WebRTCStartResult_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string offer = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->offer());
    }

    // optional fixed64 webrtc_session_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional bool started = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional uint32 resolution_x = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resolution_x());
    }

    // optional uint32 resolution_y = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resolution_y());
    }

    // optional uint32 fps = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fps());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_WebRTCStartResult_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_WebRTCStartResult_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_WebRTCStartResult_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CBroadcast_WebRTCStartResult_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_WebRTCStartResult_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_WebRTCStartResult_Request)
    MergeFrom(*source);
  }
}

void CBroadcast_WebRTCStartResult_Request::MergeFrom(const CBroadcast_WebRTCStartResult_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_WebRTCStartResult_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      offer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.offer_);
    }
    if (cached_has_bits & 0x00000002u) {
      webrtc_session_id_ = from.webrtc_session_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      started_ = from.started_;
    }
    if (cached_has_bits & 0x00000008u) {
      resolution_x_ = from.resolution_x_;
    }
    if (cached_has_bits & 0x00000010u) {
      resolution_y_ = from.resolution_y_;
    }
    if (cached_has_bits & 0x00000020u) {
      fps_ = from.fps_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_WebRTCStartResult_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_WebRTCStartResult_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_WebRTCStartResult_Request::CopyFrom(const CBroadcast_WebRTCStartResult_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_WebRTCStartResult_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_WebRTCStartResult_Request::IsInitialized() const {
  return true;
}

void CBroadcast_WebRTCStartResult_Request::Swap(CBroadcast_WebRTCStartResult_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_WebRTCStartResult_Request::InternalSwap(CBroadcast_WebRTCStartResult_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  offer_.Swap(&other->offer_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(webrtc_session_id_, other->webrtc_session_id_);
  swap(started_, other->started_);
  swap(resolution_x_, other->resolution_x_);
  swap(resolution_y_, other->resolution_y_);
  swap(fps_, other->fps_);
}

::google::protobuf::Metadata CBroadcast_WebRTCStartResult_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_WebRTCStartResult_Response::InitAsDefaultInstance() {
}
class CBroadcast_WebRTCStartResult_Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_WebRTCStartResult_Response::CBroadcast_WebRTCStartResult_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_WebRTCStartResult_Response)
}
CBroadcast_WebRTCStartResult_Response::CBroadcast_WebRTCStartResult_Response(const CBroadcast_WebRTCStartResult_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_WebRTCStartResult_Response)
}

void CBroadcast_WebRTCStartResult_Response::SharedCtor() {
}

CBroadcast_WebRTCStartResult_Response::~CBroadcast_WebRTCStartResult_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_WebRTCStartResult_Response)
  SharedDtor();
}

void CBroadcast_WebRTCStartResult_Response::SharedDtor() {
}

void CBroadcast_WebRTCStartResult_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBroadcast_WebRTCStartResult_Response& CBroadcast_WebRTCStartResult_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CBroadcast_WebRTCStartResult_Response_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CBroadcast_WebRTCStartResult_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_WebRTCStartResult_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CBroadcast_WebRTCStartResult_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CBroadcast_WebRTCStartResult_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CBroadcast_WebRTCStartResult_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_WebRTCStartResult_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_WebRTCStartResult_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_WebRTCStartResult_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CBroadcast_WebRTCStartResult_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_WebRTCStartResult_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_WebRTCStartResult_Response)
}

::google::protobuf::uint8* CBroadcast_WebRTCStartResult_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_WebRTCStartResult_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_WebRTCStartResult_Response)
  return target;
}

size_t CBroadcast_WebRTCStartResult_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_WebRTCStartResult_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_WebRTCStartResult_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_WebRTCStartResult_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_WebRTCStartResult_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CBroadcast_WebRTCStartResult_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_WebRTCStartResult_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_WebRTCStartResult_Response)
    MergeFrom(*source);
  }
}

void CBroadcast_WebRTCStartResult_Response::MergeFrom(const CBroadcast_WebRTCStartResult_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_WebRTCStartResult_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CBroadcast_WebRTCStartResult_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_WebRTCStartResult_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_WebRTCStartResult_Response::CopyFrom(const CBroadcast_WebRTCStartResult_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_WebRTCStartResult_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_WebRTCStartResult_Response::IsInitialized() const {
  return true;
}

void CBroadcast_WebRTCStartResult_Response::Swap(CBroadcast_WebRTCStartResult_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_WebRTCStartResult_Response::InternalSwap(CBroadcast_WebRTCStartResult_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CBroadcast_WebRTCStartResult_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_WebRTCStopped_Request::InitAsDefaultInstance() {
}
class CBroadcast_WebRTCStopped_Request::HasBitSetters {
 public:
  static void set_has_webrtc_session_id(CBroadcast_WebRTCStopped_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_WebRTCStopped_Request::kWebrtcSessionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_WebRTCStopped_Request::CBroadcast_WebRTCStopped_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_WebRTCStopped_Request)
}
CBroadcast_WebRTCStopped_Request::CBroadcast_WebRTCStopped_Request(const CBroadcast_WebRTCStopped_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  webrtc_session_id_ = from.webrtc_session_id_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_WebRTCStopped_Request)
}

void CBroadcast_WebRTCStopped_Request::SharedCtor() {
  webrtc_session_id_ = PROTOBUF_ULONGLONG(0);
}

CBroadcast_WebRTCStopped_Request::~CBroadcast_WebRTCStopped_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_WebRTCStopped_Request)
  SharedDtor();
}

void CBroadcast_WebRTCStopped_Request::SharedDtor() {
}

void CBroadcast_WebRTCStopped_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBroadcast_WebRTCStopped_Request& CBroadcast_WebRTCStopped_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CBroadcast_WebRTCStopped_Request_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CBroadcast_WebRTCStopped_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_WebRTCStopped_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  webrtc_session_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CBroadcast_WebRTCStopped_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CBroadcast_WebRTCStopped_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 webrtc_session_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_webrtc_session_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CBroadcast_WebRTCStopped_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_WebRTCStopped_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 webrtc_session_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_webrtc_session_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &webrtc_session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_WebRTCStopped_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_WebRTCStopped_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CBroadcast_WebRTCStopped_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_WebRTCStopped_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 webrtc_session_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->webrtc_session_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_WebRTCStopped_Request)
}

::google::protobuf::uint8* CBroadcast_WebRTCStopped_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_WebRTCStopped_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 webrtc_session_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->webrtc_session_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_WebRTCStopped_Request)
  return target;
}

size_t CBroadcast_WebRTCStopped_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_WebRTCStopped_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 webrtc_session_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_WebRTCStopped_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_WebRTCStopped_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_WebRTCStopped_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CBroadcast_WebRTCStopped_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_WebRTCStopped_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_WebRTCStopped_Request)
    MergeFrom(*source);
  }
}

void CBroadcast_WebRTCStopped_Request::MergeFrom(const CBroadcast_WebRTCStopped_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_WebRTCStopped_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_webrtc_session_id()) {
    set_webrtc_session_id(from.webrtc_session_id());
  }
}

void CBroadcast_WebRTCStopped_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_WebRTCStopped_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_WebRTCStopped_Request::CopyFrom(const CBroadcast_WebRTCStopped_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_WebRTCStopped_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_WebRTCStopped_Request::IsInitialized() const {
  return true;
}

void CBroadcast_WebRTCStopped_Request::Swap(CBroadcast_WebRTCStopped_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_WebRTCStopped_Request::InternalSwap(CBroadcast_WebRTCStopped_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(webrtc_session_id_, other->webrtc_session_id_);
}

::google::protobuf::Metadata CBroadcast_WebRTCStopped_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_WebRTCStopped_Response::InitAsDefaultInstance() {
}
class CBroadcast_WebRTCStopped_Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_WebRTCStopped_Response::CBroadcast_WebRTCStopped_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_WebRTCStopped_Response)
}
CBroadcast_WebRTCStopped_Response::CBroadcast_WebRTCStopped_Response(const CBroadcast_WebRTCStopped_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_WebRTCStopped_Response)
}

void CBroadcast_WebRTCStopped_Response::SharedCtor() {
}

CBroadcast_WebRTCStopped_Response::~CBroadcast_WebRTCStopped_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_WebRTCStopped_Response)
  SharedDtor();
}

void CBroadcast_WebRTCStopped_Response::SharedDtor() {
}

void CBroadcast_WebRTCStopped_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBroadcast_WebRTCStopped_Response& CBroadcast_WebRTCStopped_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CBroadcast_WebRTCStopped_Response_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CBroadcast_WebRTCStopped_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_WebRTCStopped_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CBroadcast_WebRTCStopped_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CBroadcast_WebRTCStopped_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CBroadcast_WebRTCStopped_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_WebRTCStopped_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_WebRTCStopped_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_WebRTCStopped_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CBroadcast_WebRTCStopped_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_WebRTCStopped_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_WebRTCStopped_Response)
}

::google::protobuf::uint8* CBroadcast_WebRTCStopped_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_WebRTCStopped_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_WebRTCStopped_Response)
  return target;
}

size_t CBroadcast_WebRTCStopped_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_WebRTCStopped_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_WebRTCStopped_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_WebRTCStopped_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_WebRTCStopped_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CBroadcast_WebRTCStopped_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_WebRTCStopped_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_WebRTCStopped_Response)
    MergeFrom(*source);
  }
}

void CBroadcast_WebRTCStopped_Response::MergeFrom(const CBroadcast_WebRTCStopped_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_WebRTCStopped_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CBroadcast_WebRTCStopped_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_WebRTCStopped_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_WebRTCStopped_Response::CopyFrom(const CBroadcast_WebRTCStopped_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_WebRTCStopped_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_WebRTCStopped_Response::IsInitialized() const {
  return true;
}

void CBroadcast_WebRTCStopped_Response::Swap(CBroadcast_WebRTCStopped_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_WebRTCStopped_Response::InternalSwap(CBroadcast_WebRTCStopped_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CBroadcast_WebRTCStopped_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_WebRTCSetAnswer_Request::InitAsDefaultInstance() {
}
class CBroadcast_WebRTCSetAnswer_Request::HasBitSetters {
 public:
  static void set_has_broadcaster_steamid(CBroadcast_WebRTCSetAnswer_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_webrtc_session_id(CBroadcast_WebRTCSetAnswer_Request* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_answer(CBroadcast_WebRTCSetAnswer_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_WebRTCSetAnswer_Request::kBroadcasterSteamidFieldNumber;
const int CBroadcast_WebRTCSetAnswer_Request::kWebrtcSessionIdFieldNumber;
const int CBroadcast_WebRTCSetAnswer_Request::kAnswerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_WebRTCSetAnswer_Request::CBroadcast_WebRTCSetAnswer_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_WebRTCSetAnswer_Request)
}
CBroadcast_WebRTCSetAnswer_Request::CBroadcast_WebRTCSetAnswer_Request(const CBroadcast_WebRTCSetAnswer_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  answer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_answer()) {
    answer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.answer_);
  }
  ::memcpy(&broadcaster_steamid_, &from.broadcaster_steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&webrtc_session_id_) -
    reinterpret_cast<char*>(&broadcaster_steamid_)) + sizeof(webrtc_session_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_WebRTCSetAnswer_Request)
}

void CBroadcast_WebRTCSetAnswer_Request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CBroadcast_WebRTCSetAnswer_Request_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  answer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&broadcaster_steamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&webrtc_session_id_) -
      reinterpret_cast<char*>(&broadcaster_steamid_)) + sizeof(webrtc_session_id_));
}

CBroadcast_WebRTCSetAnswer_Request::~CBroadcast_WebRTCSetAnswer_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_WebRTCSetAnswer_Request)
  SharedDtor();
}

void CBroadcast_WebRTCSetAnswer_Request::SharedDtor() {
  answer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_WebRTCSetAnswer_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBroadcast_WebRTCSetAnswer_Request& CBroadcast_WebRTCSetAnswer_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CBroadcast_WebRTCSetAnswer_Request_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CBroadcast_WebRTCSetAnswer_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_WebRTCSetAnswer_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    answer_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&broadcaster_steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&webrtc_session_id_) -
        reinterpret_cast<char*>(&broadcaster_steamid_)) + sizeof(webrtc_session_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CBroadcast_WebRTCSetAnswer_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CBroadcast_WebRTCSetAnswer_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 broadcaster_steamid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_broadcaster_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed64 webrtc_session_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_webrtc_session_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional string answer = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CBroadcast_WebRTCSetAnswer_Request.answer");
        object = msg->mutable_answer();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CBroadcast_WebRTCSetAnswer_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_WebRTCSetAnswer_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 broadcaster_steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_broadcaster_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &broadcaster_steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 webrtc_session_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_webrtc_session_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &webrtc_session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string answer = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_answer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->answer().data(), static_cast<int>(this->answer().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CBroadcast_WebRTCSetAnswer_Request.answer");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_WebRTCSetAnswer_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_WebRTCSetAnswer_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CBroadcast_WebRTCSetAnswer_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_WebRTCSetAnswer_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcaster_steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->broadcaster_steamid(), output);
  }

  // optional fixed64 webrtc_session_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->webrtc_session_id(), output);
  }

  // optional string answer = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->answer().data(), static_cast<int>(this->answer().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_WebRTCSetAnswer_Request.answer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->answer(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_WebRTCSetAnswer_Request)
}

::google::protobuf::uint8* CBroadcast_WebRTCSetAnswer_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_WebRTCSetAnswer_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcaster_steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->broadcaster_steamid(), target);
  }

  // optional fixed64 webrtc_session_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->webrtc_session_id(), target);
  }

  // optional string answer = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->answer().data(), static_cast<int>(this->answer().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_WebRTCSetAnswer_Request.answer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->answer(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_WebRTCSetAnswer_Request)
  return target;
}

size_t CBroadcast_WebRTCSetAnswer_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_WebRTCSetAnswer_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string answer = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->answer());
    }

    // optional fixed64 broadcaster_steamid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 webrtc_session_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_WebRTCSetAnswer_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_WebRTCSetAnswer_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_WebRTCSetAnswer_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CBroadcast_WebRTCSetAnswer_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_WebRTCSetAnswer_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_WebRTCSetAnswer_Request)
    MergeFrom(*source);
  }
}

void CBroadcast_WebRTCSetAnswer_Request::MergeFrom(const CBroadcast_WebRTCSetAnswer_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_WebRTCSetAnswer_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      answer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.answer_);
    }
    if (cached_has_bits & 0x00000002u) {
      broadcaster_steamid_ = from.broadcaster_steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      webrtc_session_id_ = from.webrtc_session_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_WebRTCSetAnswer_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_WebRTCSetAnswer_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_WebRTCSetAnswer_Request::CopyFrom(const CBroadcast_WebRTCSetAnswer_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_WebRTCSetAnswer_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_WebRTCSetAnswer_Request::IsInitialized() const {
  return true;
}

void CBroadcast_WebRTCSetAnswer_Request::Swap(CBroadcast_WebRTCSetAnswer_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_WebRTCSetAnswer_Request::InternalSwap(CBroadcast_WebRTCSetAnswer_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  answer_.Swap(&other->answer_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(broadcaster_steamid_, other->broadcaster_steamid_);
  swap(webrtc_session_id_, other->webrtc_session_id_);
}

::google::protobuf::Metadata CBroadcast_WebRTCSetAnswer_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_WebRTCSetAnswer_Response::InitAsDefaultInstance() {
}
class CBroadcast_WebRTCSetAnswer_Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_WebRTCSetAnswer_Response::CBroadcast_WebRTCSetAnswer_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_WebRTCSetAnswer_Response)
}
CBroadcast_WebRTCSetAnswer_Response::CBroadcast_WebRTCSetAnswer_Response(const CBroadcast_WebRTCSetAnswer_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_WebRTCSetAnswer_Response)
}

void CBroadcast_WebRTCSetAnswer_Response::SharedCtor() {
}

CBroadcast_WebRTCSetAnswer_Response::~CBroadcast_WebRTCSetAnswer_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_WebRTCSetAnswer_Response)
  SharedDtor();
}

void CBroadcast_WebRTCSetAnswer_Response::SharedDtor() {
}

void CBroadcast_WebRTCSetAnswer_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBroadcast_WebRTCSetAnswer_Response& CBroadcast_WebRTCSetAnswer_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CBroadcast_WebRTCSetAnswer_Response_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CBroadcast_WebRTCSetAnswer_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_WebRTCSetAnswer_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CBroadcast_WebRTCSetAnswer_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CBroadcast_WebRTCSetAnswer_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CBroadcast_WebRTCSetAnswer_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_WebRTCSetAnswer_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_WebRTCSetAnswer_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_WebRTCSetAnswer_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CBroadcast_WebRTCSetAnswer_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_WebRTCSetAnswer_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_WebRTCSetAnswer_Response)
}

::google::protobuf::uint8* CBroadcast_WebRTCSetAnswer_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_WebRTCSetAnswer_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_WebRTCSetAnswer_Response)
  return target;
}

size_t CBroadcast_WebRTCSetAnswer_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_WebRTCSetAnswer_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_WebRTCSetAnswer_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_WebRTCSetAnswer_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_WebRTCSetAnswer_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CBroadcast_WebRTCSetAnswer_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_WebRTCSetAnswer_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_WebRTCSetAnswer_Response)
    MergeFrom(*source);
  }
}

void CBroadcast_WebRTCSetAnswer_Response::MergeFrom(const CBroadcast_WebRTCSetAnswer_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_WebRTCSetAnswer_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CBroadcast_WebRTCSetAnswer_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_WebRTCSetAnswer_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_WebRTCSetAnswer_Response::CopyFrom(const CBroadcast_WebRTCSetAnswer_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_WebRTCSetAnswer_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_WebRTCSetAnswer_Response::IsInitialized() const {
  return true;
}

void CBroadcast_WebRTCSetAnswer_Response::Swap(CBroadcast_WebRTCSetAnswer_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_WebRTCSetAnswer_Response::InternalSwap(CBroadcast_WebRTCSetAnswer_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CBroadcast_WebRTCSetAnswer_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_WebRTCLookupTURNServer_Request::InitAsDefaultInstance() {
}
class CBroadcast_WebRTCLookupTURNServer_Request::HasBitSetters {
 public:
  static void set_has_cellid(CBroadcast_WebRTCLookupTURNServer_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_WebRTCLookupTURNServer_Request::kCellidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_WebRTCLookupTURNServer_Request::CBroadcast_WebRTCLookupTURNServer_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_WebRTCLookupTURNServer_Request)
}
CBroadcast_WebRTCLookupTURNServer_Request::CBroadcast_WebRTCLookupTURNServer_Request(const CBroadcast_WebRTCLookupTURNServer_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cellid_ = from.cellid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_WebRTCLookupTURNServer_Request)
}

void CBroadcast_WebRTCLookupTURNServer_Request::SharedCtor() {
  cellid_ = 0u;
}

CBroadcast_WebRTCLookupTURNServer_Request::~CBroadcast_WebRTCLookupTURNServer_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_WebRTCLookupTURNServer_Request)
  SharedDtor();
}

void CBroadcast_WebRTCLookupTURNServer_Request::SharedDtor() {
}

void CBroadcast_WebRTCLookupTURNServer_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBroadcast_WebRTCLookupTURNServer_Request& CBroadcast_WebRTCLookupTURNServer_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CBroadcast_WebRTCLookupTURNServer_Request_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CBroadcast_WebRTCLookupTURNServer_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_WebRTCLookupTURNServer_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cellid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CBroadcast_WebRTCLookupTURNServer_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CBroadcast_WebRTCLookupTURNServer_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 cellid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_cellid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CBroadcast_WebRTCLookupTURNServer_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_WebRTCLookupTURNServer_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cellid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_cellid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cellid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_WebRTCLookupTURNServer_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_WebRTCLookupTURNServer_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CBroadcast_WebRTCLookupTURNServer_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_WebRTCLookupTURNServer_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 cellid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cellid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_WebRTCLookupTURNServer_Request)
}

::google::protobuf::uint8* CBroadcast_WebRTCLookupTURNServer_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_WebRTCLookupTURNServer_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 cellid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cellid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_WebRTCLookupTURNServer_Request)
  return target;
}

size_t CBroadcast_WebRTCLookupTURNServer_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_WebRTCLookupTURNServer_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 cellid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cellid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_WebRTCLookupTURNServer_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_WebRTCLookupTURNServer_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_WebRTCLookupTURNServer_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CBroadcast_WebRTCLookupTURNServer_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_WebRTCLookupTURNServer_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_WebRTCLookupTURNServer_Request)
    MergeFrom(*source);
  }
}

void CBroadcast_WebRTCLookupTURNServer_Request::MergeFrom(const CBroadcast_WebRTCLookupTURNServer_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_WebRTCLookupTURNServer_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_cellid()) {
    set_cellid(from.cellid());
  }
}

void CBroadcast_WebRTCLookupTURNServer_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_WebRTCLookupTURNServer_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_WebRTCLookupTURNServer_Request::CopyFrom(const CBroadcast_WebRTCLookupTURNServer_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_WebRTCLookupTURNServer_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_WebRTCLookupTURNServer_Request::IsInitialized() const {
  return true;
}

void CBroadcast_WebRTCLookupTURNServer_Request::Swap(CBroadcast_WebRTCLookupTURNServer_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_WebRTCLookupTURNServer_Request::InternalSwap(CBroadcast_WebRTCLookupTURNServer_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(cellid_, other->cellid_);
}

::google::protobuf::Metadata CBroadcast_WebRTCLookupTURNServer_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_WebRTCLookupTURNServer_Response::InitAsDefaultInstance() {
}
class CBroadcast_WebRTCLookupTURNServer_Response::HasBitSetters {
 public:
  static void set_has_turn_server(CBroadcast_WebRTCLookupTURNServer_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_WebRTCLookupTURNServer_Response::kTurnServerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_WebRTCLookupTURNServer_Response::CBroadcast_WebRTCLookupTURNServer_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_WebRTCLookupTURNServer_Response)
}
CBroadcast_WebRTCLookupTURNServer_Response::CBroadcast_WebRTCLookupTURNServer_Response(const CBroadcast_WebRTCLookupTURNServer_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  turn_server_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_turn_server()) {
    turn_server_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.turn_server_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_WebRTCLookupTURNServer_Response)
}

void CBroadcast_WebRTCLookupTURNServer_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CBroadcast_WebRTCLookupTURNServer_Response_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  turn_server_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CBroadcast_WebRTCLookupTURNServer_Response::~CBroadcast_WebRTCLookupTURNServer_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_WebRTCLookupTURNServer_Response)
  SharedDtor();
}

void CBroadcast_WebRTCLookupTURNServer_Response::SharedDtor() {
  turn_server_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_WebRTCLookupTURNServer_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBroadcast_WebRTCLookupTURNServer_Response& CBroadcast_WebRTCLookupTURNServer_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CBroadcast_WebRTCLookupTURNServer_Response_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CBroadcast_WebRTCLookupTURNServer_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_WebRTCLookupTURNServer_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    turn_server_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CBroadcast_WebRTCLookupTURNServer_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CBroadcast_WebRTCLookupTURNServer_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string turn_server = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CBroadcast_WebRTCLookupTURNServer_Response.turn_server");
        object = msg->mutable_turn_server();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CBroadcast_WebRTCLookupTURNServer_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_WebRTCLookupTURNServer_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string turn_server = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_turn_server()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->turn_server().data(), static_cast<int>(this->turn_server().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CBroadcast_WebRTCLookupTURNServer_Response.turn_server");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_WebRTCLookupTURNServer_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_WebRTCLookupTURNServer_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CBroadcast_WebRTCLookupTURNServer_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_WebRTCLookupTURNServer_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string turn_server = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->turn_server().data(), static_cast<int>(this->turn_server().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_WebRTCLookupTURNServer_Response.turn_server");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->turn_server(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_WebRTCLookupTURNServer_Response)
}

::google::protobuf::uint8* CBroadcast_WebRTCLookupTURNServer_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_WebRTCLookupTURNServer_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string turn_server = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->turn_server().data(), static_cast<int>(this->turn_server().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_WebRTCLookupTURNServer_Response.turn_server");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->turn_server(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_WebRTCLookupTURNServer_Response)
  return target;
}

size_t CBroadcast_WebRTCLookupTURNServer_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_WebRTCLookupTURNServer_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string turn_server = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->turn_server());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_WebRTCLookupTURNServer_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_WebRTCLookupTURNServer_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_WebRTCLookupTURNServer_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CBroadcast_WebRTCLookupTURNServer_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_WebRTCLookupTURNServer_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_WebRTCLookupTURNServer_Response)
    MergeFrom(*source);
  }
}

void CBroadcast_WebRTCLookupTURNServer_Response::MergeFrom(const CBroadcast_WebRTCLookupTURNServer_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_WebRTCLookupTURNServer_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_turn_server()) {
    _has_bits_[0] |= 0x00000001u;
    turn_server_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.turn_server_);
  }
}

void CBroadcast_WebRTCLookupTURNServer_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_WebRTCLookupTURNServer_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_WebRTCLookupTURNServer_Response::CopyFrom(const CBroadcast_WebRTCLookupTURNServer_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_WebRTCLookupTURNServer_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_WebRTCLookupTURNServer_Response::IsInitialized() const {
  return true;
}

void CBroadcast_WebRTCLookupTURNServer_Response::Swap(CBroadcast_WebRTCLookupTURNServer_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_WebRTCLookupTURNServer_Response::InternalSwap(CBroadcast_WebRTCLookupTURNServer_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  turn_server_.Swap(&other->turn_server_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CBroadcast_WebRTCLookupTURNServer_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_WebRTC_Candidate::InitAsDefaultInstance() {
}
class CBroadcast_WebRTC_Candidate::HasBitSetters {
 public:
  static void set_has_sdp_mid(CBroadcast_WebRTC_Candidate* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_sdp_mline_index(CBroadcast_WebRTC_Candidate* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_candidate(CBroadcast_WebRTC_Candidate* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_WebRTC_Candidate::kSdpMidFieldNumber;
const int CBroadcast_WebRTC_Candidate::kSdpMlineIndexFieldNumber;
const int CBroadcast_WebRTC_Candidate::kCandidateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_WebRTC_Candidate::CBroadcast_WebRTC_Candidate()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_WebRTC_Candidate)
}
CBroadcast_WebRTC_Candidate::CBroadcast_WebRTC_Candidate(const CBroadcast_WebRTC_Candidate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sdp_mid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sdp_mid()) {
    sdp_mid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sdp_mid_);
  }
  candidate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_candidate()) {
    candidate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.candidate_);
  }
  sdp_mline_index_ = from.sdp_mline_index_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_WebRTC_Candidate)
}

void CBroadcast_WebRTC_Candidate::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CBroadcast_WebRTC_Candidate_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  sdp_mid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  candidate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sdp_mline_index_ = 0;
}

CBroadcast_WebRTC_Candidate::~CBroadcast_WebRTC_Candidate() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_WebRTC_Candidate)
  SharedDtor();
}

void CBroadcast_WebRTC_Candidate::SharedDtor() {
  sdp_mid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  candidate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_WebRTC_Candidate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBroadcast_WebRTC_Candidate& CBroadcast_WebRTC_Candidate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CBroadcast_WebRTC_Candidate_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CBroadcast_WebRTC_Candidate::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_WebRTC_Candidate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      sdp_mid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      candidate_.ClearNonDefaultToEmptyNoArena();
    }
  }
  sdp_mline_index_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CBroadcast_WebRTC_Candidate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CBroadcast_WebRTC_Candidate*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string sdp_mid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CBroadcast_WebRTC_Candidate.sdp_mid");
        object = msg->mutable_sdp_mid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional int32 sdp_mline_index = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_sdp_mline_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string candidate = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CBroadcast_WebRTC_Candidate.candidate");
        object = msg->mutable_candidate();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CBroadcast_WebRTC_Candidate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_WebRTC_Candidate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sdp_mid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sdp_mid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sdp_mid().data(), static_cast<int>(this->sdp_mid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CBroadcast_WebRTC_Candidate.sdp_mid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sdp_mline_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_sdp_mline_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sdp_mline_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string candidate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_candidate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->candidate().data(), static_cast<int>(this->candidate().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CBroadcast_WebRTC_Candidate.candidate");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_WebRTC_Candidate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_WebRTC_Candidate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CBroadcast_WebRTC_Candidate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_WebRTC_Candidate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string sdp_mid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sdp_mid().data(), static_cast<int>(this->sdp_mid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_WebRTC_Candidate.sdp_mid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sdp_mid(), output);
  }

  // optional int32 sdp_mline_index = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sdp_mline_index(), output);
  }

  // optional string candidate = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->candidate().data(), static_cast<int>(this->candidate().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_WebRTC_Candidate.candidate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->candidate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_WebRTC_Candidate)
}

::google::protobuf::uint8* CBroadcast_WebRTC_Candidate::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_WebRTC_Candidate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string sdp_mid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sdp_mid().data(), static_cast<int>(this->sdp_mid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_WebRTC_Candidate.sdp_mid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sdp_mid(), target);
  }

  // optional int32 sdp_mline_index = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sdp_mline_index(), target);
  }

  // optional string candidate = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->candidate().data(), static_cast<int>(this->candidate().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_WebRTC_Candidate.candidate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->candidate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_WebRTC_Candidate)
  return target;
}

size_t CBroadcast_WebRTC_Candidate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_WebRTC_Candidate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string sdp_mid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sdp_mid());
    }

    // optional string candidate = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->candidate());
    }

    // optional int32 sdp_mline_index = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sdp_mline_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_WebRTC_Candidate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_WebRTC_Candidate)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_WebRTC_Candidate* source =
      ::google::protobuf::DynamicCastToGenerated<CBroadcast_WebRTC_Candidate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_WebRTC_Candidate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_WebRTC_Candidate)
    MergeFrom(*source);
  }
}

void CBroadcast_WebRTC_Candidate::MergeFrom(const CBroadcast_WebRTC_Candidate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_WebRTC_Candidate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      sdp_mid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sdp_mid_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      candidate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.candidate_);
    }
    if (cached_has_bits & 0x00000004u) {
      sdp_mline_index_ = from.sdp_mline_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_WebRTC_Candidate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_WebRTC_Candidate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_WebRTC_Candidate::CopyFrom(const CBroadcast_WebRTC_Candidate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_WebRTC_Candidate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_WebRTC_Candidate::IsInitialized() const {
  return true;
}

void CBroadcast_WebRTC_Candidate::Swap(CBroadcast_WebRTC_Candidate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_WebRTC_Candidate::InternalSwap(CBroadcast_WebRTC_Candidate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sdp_mid_.Swap(&other->sdp_mid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  candidate_.Swap(&other->candidate_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sdp_mline_index_, other->sdp_mline_index_);
}

::google::protobuf::Metadata CBroadcast_WebRTC_Candidate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_WebRTCAddHostCandidate_Request::InitAsDefaultInstance() {
  ::proto::steam::_CBroadcast_WebRTCAddHostCandidate_Request_default_instance_._instance.get_mutable()->candidate_ = const_cast< ::proto::steam::CBroadcast_WebRTC_Candidate*>(
      ::proto::steam::CBroadcast_WebRTC_Candidate::internal_default_instance());
}
class CBroadcast_WebRTCAddHostCandidate_Request::HasBitSetters {
 public:
  static void set_has_webrtc_session_id(CBroadcast_WebRTCAddHostCandidate_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::proto::steam::CBroadcast_WebRTC_Candidate& candidate(const CBroadcast_WebRTCAddHostCandidate_Request* msg);
  static void set_has_candidate(CBroadcast_WebRTCAddHostCandidate_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::proto::steam::CBroadcast_WebRTC_Candidate&
CBroadcast_WebRTCAddHostCandidate_Request::HasBitSetters::candidate(const CBroadcast_WebRTCAddHostCandidate_Request* msg) {
  return *msg->candidate_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_WebRTCAddHostCandidate_Request::kWebrtcSessionIdFieldNumber;
const int CBroadcast_WebRTCAddHostCandidate_Request::kCandidateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_WebRTCAddHostCandidate_Request::CBroadcast_WebRTCAddHostCandidate_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_WebRTCAddHostCandidate_Request)
}
CBroadcast_WebRTCAddHostCandidate_Request::CBroadcast_WebRTCAddHostCandidate_Request(const CBroadcast_WebRTCAddHostCandidate_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_candidate()) {
    candidate_ = new ::proto::steam::CBroadcast_WebRTC_Candidate(*from.candidate_);
  } else {
    candidate_ = nullptr;
  }
  webrtc_session_id_ = from.webrtc_session_id_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_WebRTCAddHostCandidate_Request)
}

void CBroadcast_WebRTCAddHostCandidate_Request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CBroadcast_WebRTCAddHostCandidate_Request_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  ::memset(&candidate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&webrtc_session_id_) -
      reinterpret_cast<char*>(&candidate_)) + sizeof(webrtc_session_id_));
}

CBroadcast_WebRTCAddHostCandidate_Request::~CBroadcast_WebRTCAddHostCandidate_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_WebRTCAddHostCandidate_Request)
  SharedDtor();
}

void CBroadcast_WebRTCAddHostCandidate_Request::SharedDtor() {
  if (this != internal_default_instance()) delete candidate_;
}

void CBroadcast_WebRTCAddHostCandidate_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBroadcast_WebRTCAddHostCandidate_Request& CBroadcast_WebRTCAddHostCandidate_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CBroadcast_WebRTCAddHostCandidate_Request_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CBroadcast_WebRTCAddHostCandidate_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_WebRTCAddHostCandidate_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(candidate_ != nullptr);
    candidate_->Clear();
  }
  webrtc_session_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CBroadcast_WebRTCAddHostCandidate_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CBroadcast_WebRTCAddHostCandidate_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 webrtc_session_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_webrtc_session_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional .proto.steam.CBroadcast_WebRTC_Candidate candidate = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::steam::CBroadcast_WebRTC_Candidate::_InternalParse;
        object = msg->mutable_candidate();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CBroadcast_WebRTCAddHostCandidate_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_WebRTCAddHostCandidate_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 webrtc_session_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_webrtc_session_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &webrtc_session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CBroadcast_WebRTC_Candidate candidate = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_candidate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_WebRTCAddHostCandidate_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_WebRTCAddHostCandidate_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CBroadcast_WebRTCAddHostCandidate_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_WebRTCAddHostCandidate_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 webrtc_session_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->webrtc_session_id(), output);
  }

  // optional .proto.steam.CBroadcast_WebRTC_Candidate candidate = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::candidate(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_WebRTCAddHostCandidate_Request)
}

::google::protobuf::uint8* CBroadcast_WebRTCAddHostCandidate_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_WebRTCAddHostCandidate_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 webrtc_session_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->webrtc_session_id(), target);
  }

  // optional .proto.steam.CBroadcast_WebRTC_Candidate candidate = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::candidate(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_WebRTCAddHostCandidate_Request)
  return target;
}

size_t CBroadcast_WebRTCAddHostCandidate_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_WebRTCAddHostCandidate_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .proto.steam.CBroadcast_WebRTC_Candidate candidate = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *candidate_);
    }

    // optional fixed64 webrtc_session_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_WebRTCAddHostCandidate_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_WebRTCAddHostCandidate_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_WebRTCAddHostCandidate_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CBroadcast_WebRTCAddHostCandidate_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_WebRTCAddHostCandidate_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_WebRTCAddHostCandidate_Request)
    MergeFrom(*source);
  }
}

void CBroadcast_WebRTCAddHostCandidate_Request::MergeFrom(const CBroadcast_WebRTCAddHostCandidate_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_WebRTCAddHostCandidate_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_candidate()->::proto::steam::CBroadcast_WebRTC_Candidate::MergeFrom(from.candidate());
    }
    if (cached_has_bits & 0x00000002u) {
      webrtc_session_id_ = from.webrtc_session_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_WebRTCAddHostCandidate_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_WebRTCAddHostCandidate_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_WebRTCAddHostCandidate_Request::CopyFrom(const CBroadcast_WebRTCAddHostCandidate_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_WebRTCAddHostCandidate_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_WebRTCAddHostCandidate_Request::IsInitialized() const {
  return true;
}

void CBroadcast_WebRTCAddHostCandidate_Request::Swap(CBroadcast_WebRTCAddHostCandidate_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_WebRTCAddHostCandidate_Request::InternalSwap(CBroadcast_WebRTCAddHostCandidate_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(candidate_, other->candidate_);
  swap(webrtc_session_id_, other->webrtc_session_id_);
}

::google::protobuf::Metadata CBroadcast_WebRTCAddHostCandidate_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_WebRTCAddHostCandidate_Response::InitAsDefaultInstance() {
}
class CBroadcast_WebRTCAddHostCandidate_Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_WebRTCAddHostCandidate_Response::CBroadcast_WebRTCAddHostCandidate_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_WebRTCAddHostCandidate_Response)
}
CBroadcast_WebRTCAddHostCandidate_Response::CBroadcast_WebRTCAddHostCandidate_Response(const CBroadcast_WebRTCAddHostCandidate_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_WebRTCAddHostCandidate_Response)
}

void CBroadcast_WebRTCAddHostCandidate_Response::SharedCtor() {
}

CBroadcast_WebRTCAddHostCandidate_Response::~CBroadcast_WebRTCAddHostCandidate_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_WebRTCAddHostCandidate_Response)
  SharedDtor();
}

void CBroadcast_WebRTCAddHostCandidate_Response::SharedDtor() {
}

void CBroadcast_WebRTCAddHostCandidate_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBroadcast_WebRTCAddHostCandidate_Response& CBroadcast_WebRTCAddHostCandidate_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CBroadcast_WebRTCAddHostCandidate_Response_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CBroadcast_WebRTCAddHostCandidate_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_WebRTCAddHostCandidate_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CBroadcast_WebRTCAddHostCandidate_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CBroadcast_WebRTCAddHostCandidate_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CBroadcast_WebRTCAddHostCandidate_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_WebRTCAddHostCandidate_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_WebRTCAddHostCandidate_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_WebRTCAddHostCandidate_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CBroadcast_WebRTCAddHostCandidate_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_WebRTCAddHostCandidate_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_WebRTCAddHostCandidate_Response)
}

::google::protobuf::uint8* CBroadcast_WebRTCAddHostCandidate_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_WebRTCAddHostCandidate_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_WebRTCAddHostCandidate_Response)
  return target;
}

size_t CBroadcast_WebRTCAddHostCandidate_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_WebRTCAddHostCandidate_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_WebRTCAddHostCandidate_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_WebRTCAddHostCandidate_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_WebRTCAddHostCandidate_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CBroadcast_WebRTCAddHostCandidate_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_WebRTCAddHostCandidate_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_WebRTCAddHostCandidate_Response)
    MergeFrom(*source);
  }
}

void CBroadcast_WebRTCAddHostCandidate_Response::MergeFrom(const CBroadcast_WebRTCAddHostCandidate_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_WebRTCAddHostCandidate_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CBroadcast_WebRTCAddHostCandidate_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_WebRTCAddHostCandidate_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_WebRTCAddHostCandidate_Response::CopyFrom(const CBroadcast_WebRTCAddHostCandidate_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_WebRTCAddHostCandidate_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_WebRTCAddHostCandidate_Response::IsInitialized() const {
  return true;
}

void CBroadcast_WebRTCAddHostCandidate_Response::Swap(CBroadcast_WebRTCAddHostCandidate_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_WebRTCAddHostCandidate_Response::InternalSwap(CBroadcast_WebRTCAddHostCandidate_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CBroadcast_WebRTCAddHostCandidate_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_WebRTCAddViewerCandidate_Request::InitAsDefaultInstance() {
  ::proto::steam::_CBroadcast_WebRTCAddViewerCandidate_Request_default_instance_._instance.get_mutable()->candidate_ = const_cast< ::proto::steam::CBroadcast_WebRTC_Candidate*>(
      ::proto::steam::CBroadcast_WebRTC_Candidate::internal_default_instance());
}
class CBroadcast_WebRTCAddViewerCandidate_Request::HasBitSetters {
 public:
  static void set_has_broadcaster_steamid(CBroadcast_WebRTCAddViewerCandidate_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_webrtc_session_id(CBroadcast_WebRTCAddViewerCandidate_Request* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static const ::proto::steam::CBroadcast_WebRTC_Candidate& candidate(const CBroadcast_WebRTCAddViewerCandidate_Request* msg);
  static void set_has_candidate(CBroadcast_WebRTCAddViewerCandidate_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::proto::steam::CBroadcast_WebRTC_Candidate&
CBroadcast_WebRTCAddViewerCandidate_Request::HasBitSetters::candidate(const CBroadcast_WebRTCAddViewerCandidate_Request* msg) {
  return *msg->candidate_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_WebRTCAddViewerCandidate_Request::kBroadcasterSteamidFieldNumber;
const int CBroadcast_WebRTCAddViewerCandidate_Request::kWebrtcSessionIdFieldNumber;
const int CBroadcast_WebRTCAddViewerCandidate_Request::kCandidateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_WebRTCAddViewerCandidate_Request::CBroadcast_WebRTCAddViewerCandidate_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Request)
}
CBroadcast_WebRTCAddViewerCandidate_Request::CBroadcast_WebRTCAddViewerCandidate_Request(const CBroadcast_WebRTCAddViewerCandidate_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_candidate()) {
    candidate_ = new ::proto::steam::CBroadcast_WebRTC_Candidate(*from.candidate_);
  } else {
    candidate_ = nullptr;
  }
  ::memcpy(&broadcaster_steamid_, &from.broadcaster_steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&webrtc_session_id_) -
    reinterpret_cast<char*>(&broadcaster_steamid_)) + sizeof(webrtc_session_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Request)
}

void CBroadcast_WebRTCAddViewerCandidate_Request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CBroadcast_WebRTCAddViewerCandidate_Request_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  ::memset(&candidate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&webrtc_session_id_) -
      reinterpret_cast<char*>(&candidate_)) + sizeof(webrtc_session_id_));
}

CBroadcast_WebRTCAddViewerCandidate_Request::~CBroadcast_WebRTCAddViewerCandidate_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Request)
  SharedDtor();
}

void CBroadcast_WebRTCAddViewerCandidate_Request::SharedDtor() {
  if (this != internal_default_instance()) delete candidate_;
}

void CBroadcast_WebRTCAddViewerCandidate_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBroadcast_WebRTCAddViewerCandidate_Request& CBroadcast_WebRTCAddViewerCandidate_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CBroadcast_WebRTCAddViewerCandidate_Request_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CBroadcast_WebRTCAddViewerCandidate_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(candidate_ != nullptr);
    candidate_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&broadcaster_steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&webrtc_session_id_) -
        reinterpret_cast<char*>(&broadcaster_steamid_)) + sizeof(webrtc_session_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CBroadcast_WebRTCAddViewerCandidate_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CBroadcast_WebRTCAddViewerCandidate_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 broadcaster_steamid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_broadcaster_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed64 webrtc_session_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_webrtc_session_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional .proto.steam.CBroadcast_WebRTC_Candidate candidate = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::steam::CBroadcast_WebRTC_Candidate::_InternalParse;
        object = msg->mutable_candidate();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CBroadcast_WebRTCAddViewerCandidate_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 broadcaster_steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_broadcaster_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &broadcaster_steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 webrtc_session_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_webrtc_session_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &webrtc_session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CBroadcast_WebRTC_Candidate candidate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_candidate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CBroadcast_WebRTCAddViewerCandidate_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcaster_steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->broadcaster_steamid(), output);
  }

  // optional fixed64 webrtc_session_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->webrtc_session_id(), output);
  }

  // optional .proto.steam.CBroadcast_WebRTC_Candidate candidate = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::candidate(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Request)
}

::google::protobuf::uint8* CBroadcast_WebRTCAddViewerCandidate_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcaster_steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->broadcaster_steamid(), target);
  }

  // optional fixed64 webrtc_session_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->webrtc_session_id(), target);
  }

  // optional .proto.steam.CBroadcast_WebRTC_Candidate candidate = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::candidate(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Request)
  return target;
}

size_t CBroadcast_WebRTCAddViewerCandidate_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .proto.steam.CBroadcast_WebRTC_Candidate candidate = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *candidate_);
    }

    // optional fixed64 broadcaster_steamid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 webrtc_session_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_WebRTCAddViewerCandidate_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_WebRTCAddViewerCandidate_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CBroadcast_WebRTCAddViewerCandidate_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Request)
    MergeFrom(*source);
  }
}

void CBroadcast_WebRTCAddViewerCandidate_Request::MergeFrom(const CBroadcast_WebRTCAddViewerCandidate_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_candidate()->::proto::steam::CBroadcast_WebRTC_Candidate::MergeFrom(from.candidate());
    }
    if (cached_has_bits & 0x00000002u) {
      broadcaster_steamid_ = from.broadcaster_steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      webrtc_session_id_ = from.webrtc_session_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_WebRTCAddViewerCandidate_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_WebRTCAddViewerCandidate_Request::CopyFrom(const CBroadcast_WebRTCAddViewerCandidate_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_WebRTCAddViewerCandidate_Request::IsInitialized() const {
  return true;
}

void CBroadcast_WebRTCAddViewerCandidate_Request::Swap(CBroadcast_WebRTCAddViewerCandidate_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_WebRTCAddViewerCandidate_Request::InternalSwap(CBroadcast_WebRTCAddViewerCandidate_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(candidate_, other->candidate_);
  swap(broadcaster_steamid_, other->broadcaster_steamid_);
  swap(webrtc_session_id_, other->webrtc_session_id_);
}

::google::protobuf::Metadata CBroadcast_WebRTCAddViewerCandidate_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_WebRTCAddViewerCandidate_Response::InitAsDefaultInstance() {
}
class CBroadcast_WebRTCAddViewerCandidate_Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_WebRTCAddViewerCandidate_Response::CBroadcast_WebRTCAddViewerCandidate_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Response)
}
CBroadcast_WebRTCAddViewerCandidate_Response::CBroadcast_WebRTCAddViewerCandidate_Response(const CBroadcast_WebRTCAddViewerCandidate_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Response)
}

void CBroadcast_WebRTCAddViewerCandidate_Response::SharedCtor() {
}

CBroadcast_WebRTCAddViewerCandidate_Response::~CBroadcast_WebRTCAddViewerCandidate_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Response)
  SharedDtor();
}

void CBroadcast_WebRTCAddViewerCandidate_Response::SharedDtor() {
}

void CBroadcast_WebRTCAddViewerCandidate_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBroadcast_WebRTCAddViewerCandidate_Response& CBroadcast_WebRTCAddViewerCandidate_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CBroadcast_WebRTCAddViewerCandidate_Response_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CBroadcast_WebRTCAddViewerCandidate_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CBroadcast_WebRTCAddViewerCandidate_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CBroadcast_WebRTCAddViewerCandidate_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CBroadcast_WebRTCAddViewerCandidate_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CBroadcast_WebRTCAddViewerCandidate_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Response)
}

::google::protobuf::uint8* CBroadcast_WebRTCAddViewerCandidate_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Response)
  return target;
}

size_t CBroadcast_WebRTCAddViewerCandidate_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_WebRTCAddViewerCandidate_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_WebRTCAddViewerCandidate_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CBroadcast_WebRTCAddViewerCandidate_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Response)
    MergeFrom(*source);
  }
}

void CBroadcast_WebRTCAddViewerCandidate_Response::MergeFrom(const CBroadcast_WebRTCAddViewerCandidate_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CBroadcast_WebRTCAddViewerCandidate_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_WebRTCAddViewerCandidate_Response::CopyFrom(const CBroadcast_WebRTCAddViewerCandidate_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_WebRTCAddViewerCandidate_Response::IsInitialized() const {
  return true;
}

void CBroadcast_WebRTCAddViewerCandidate_Response::Swap(CBroadcast_WebRTCAddViewerCandidate_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_WebRTCAddViewerCandidate_Response::InternalSwap(CBroadcast_WebRTCAddViewerCandidate_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CBroadcast_WebRTCAddViewerCandidate_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_WebRTCGetHostCandidates_Request::InitAsDefaultInstance() {
}
class CBroadcast_WebRTCGetHostCandidates_Request::HasBitSetters {
 public:
  static void set_has_broadcaster_steamid(CBroadcast_WebRTCGetHostCandidates_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_webrtc_session_id(CBroadcast_WebRTCGetHostCandidates_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_candidate_generation(CBroadcast_WebRTCGetHostCandidates_Request* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_WebRTCGetHostCandidates_Request::kBroadcasterSteamidFieldNumber;
const int CBroadcast_WebRTCGetHostCandidates_Request::kWebrtcSessionIdFieldNumber;
const int CBroadcast_WebRTCGetHostCandidates_Request::kCandidateGenerationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_WebRTCGetHostCandidates_Request::CBroadcast_WebRTCGetHostCandidates_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_WebRTCGetHostCandidates_Request)
}
CBroadcast_WebRTCGetHostCandidates_Request::CBroadcast_WebRTCGetHostCandidates_Request(const CBroadcast_WebRTCGetHostCandidates_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&broadcaster_steamid_, &from.broadcaster_steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&candidate_generation_) -
    reinterpret_cast<char*>(&broadcaster_steamid_)) + sizeof(candidate_generation_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_WebRTCGetHostCandidates_Request)
}

void CBroadcast_WebRTCGetHostCandidates_Request::SharedCtor() {
  ::memset(&broadcaster_steamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&candidate_generation_) -
      reinterpret_cast<char*>(&broadcaster_steamid_)) + sizeof(candidate_generation_));
}

CBroadcast_WebRTCGetHostCandidates_Request::~CBroadcast_WebRTCGetHostCandidates_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_WebRTCGetHostCandidates_Request)
  SharedDtor();
}

void CBroadcast_WebRTCGetHostCandidates_Request::SharedDtor() {
}

void CBroadcast_WebRTCGetHostCandidates_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBroadcast_WebRTCGetHostCandidates_Request& CBroadcast_WebRTCGetHostCandidates_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CBroadcast_WebRTCGetHostCandidates_Request_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CBroadcast_WebRTCGetHostCandidates_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_WebRTCGetHostCandidates_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&broadcaster_steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&candidate_generation_) -
        reinterpret_cast<char*>(&broadcaster_steamid_)) + sizeof(candidate_generation_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CBroadcast_WebRTCGetHostCandidates_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CBroadcast_WebRTCGetHostCandidates_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 broadcaster_steamid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_broadcaster_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed64 webrtc_session_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_webrtc_session_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 candidate_generation = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_candidate_generation(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CBroadcast_WebRTCGetHostCandidates_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_WebRTCGetHostCandidates_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 broadcaster_steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_broadcaster_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &broadcaster_steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 webrtc_session_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_webrtc_session_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &webrtc_session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 candidate_generation = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_candidate_generation(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &candidate_generation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_WebRTCGetHostCandidates_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_WebRTCGetHostCandidates_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CBroadcast_WebRTCGetHostCandidates_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_WebRTCGetHostCandidates_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcaster_steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->broadcaster_steamid(), output);
  }

  // optional fixed64 webrtc_session_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->webrtc_session_id(), output);
  }

  // optional uint32 candidate_generation = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->candidate_generation(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_WebRTCGetHostCandidates_Request)
}

::google::protobuf::uint8* CBroadcast_WebRTCGetHostCandidates_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_WebRTCGetHostCandidates_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcaster_steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->broadcaster_steamid(), target);
  }

  // optional fixed64 webrtc_session_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->webrtc_session_id(), target);
  }

  // optional uint32 candidate_generation = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->candidate_generation(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_WebRTCGetHostCandidates_Request)
  return target;
}

size_t CBroadcast_WebRTCGetHostCandidates_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_WebRTCGetHostCandidates_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 broadcaster_steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 webrtc_session_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 candidate_generation = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->candidate_generation());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_WebRTCGetHostCandidates_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_WebRTCGetHostCandidates_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_WebRTCGetHostCandidates_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CBroadcast_WebRTCGetHostCandidates_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_WebRTCGetHostCandidates_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_WebRTCGetHostCandidates_Request)
    MergeFrom(*source);
  }
}

void CBroadcast_WebRTCGetHostCandidates_Request::MergeFrom(const CBroadcast_WebRTCGetHostCandidates_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_WebRTCGetHostCandidates_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      broadcaster_steamid_ = from.broadcaster_steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      webrtc_session_id_ = from.webrtc_session_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      candidate_generation_ = from.candidate_generation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_WebRTCGetHostCandidates_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_WebRTCGetHostCandidates_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_WebRTCGetHostCandidates_Request::CopyFrom(const CBroadcast_WebRTCGetHostCandidates_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_WebRTCGetHostCandidates_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_WebRTCGetHostCandidates_Request::IsInitialized() const {
  return true;
}

void CBroadcast_WebRTCGetHostCandidates_Request::Swap(CBroadcast_WebRTCGetHostCandidates_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_WebRTCGetHostCandidates_Request::InternalSwap(CBroadcast_WebRTCGetHostCandidates_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(broadcaster_steamid_, other->broadcaster_steamid_);
  swap(webrtc_session_id_, other->webrtc_session_id_);
  swap(candidate_generation_, other->candidate_generation_);
}

::google::protobuf::Metadata CBroadcast_WebRTCGetHostCandidates_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_WebRTCGetHostCandidates_Response::InitAsDefaultInstance() {
}
class CBroadcast_WebRTCGetHostCandidates_Response::HasBitSetters {
 public:
  static void set_has_candidate_generation(CBroadcast_WebRTCGetHostCandidates_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_WebRTCGetHostCandidates_Response::kCandidateGenerationFieldNumber;
const int CBroadcast_WebRTCGetHostCandidates_Response::kCandidatesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_WebRTCGetHostCandidates_Response::CBroadcast_WebRTCGetHostCandidates_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_WebRTCGetHostCandidates_Response)
}
CBroadcast_WebRTCGetHostCandidates_Response::CBroadcast_WebRTCGetHostCandidates_Response(const CBroadcast_WebRTCGetHostCandidates_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      candidates_(from.candidates_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  candidate_generation_ = from.candidate_generation_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_WebRTCGetHostCandidates_Response)
}

void CBroadcast_WebRTCGetHostCandidates_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CBroadcast_WebRTCGetHostCandidates_Response_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  candidate_generation_ = 0u;
}

CBroadcast_WebRTCGetHostCandidates_Response::~CBroadcast_WebRTCGetHostCandidates_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_WebRTCGetHostCandidates_Response)
  SharedDtor();
}

void CBroadcast_WebRTCGetHostCandidates_Response::SharedDtor() {
}

void CBroadcast_WebRTCGetHostCandidates_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBroadcast_WebRTCGetHostCandidates_Response& CBroadcast_WebRTCGetHostCandidates_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CBroadcast_WebRTCGetHostCandidates_Response_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CBroadcast_WebRTCGetHostCandidates_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_WebRTCGetHostCandidates_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  candidates_.Clear();
  candidate_generation_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CBroadcast_WebRTCGetHostCandidates_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CBroadcast_WebRTCGetHostCandidates_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 candidate_generation = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_candidate_generation(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.steam.CBroadcast_WebRTC_Candidate candidates = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CBroadcast_WebRTC_Candidate::_InternalParse;
          object = msg->add_candidates();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CBroadcast_WebRTCGetHostCandidates_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_WebRTCGetHostCandidates_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 candidate_generation = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_candidate_generation(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &candidate_generation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CBroadcast_WebRTC_Candidate candidates = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_candidates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_WebRTCGetHostCandidates_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_WebRTCGetHostCandidates_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CBroadcast_WebRTCGetHostCandidates_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_WebRTCGetHostCandidates_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 candidate_generation = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->candidate_generation(), output);
  }

  // repeated .proto.steam.CBroadcast_WebRTC_Candidate candidates = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->candidates_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->candidates(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_WebRTCGetHostCandidates_Response)
}

::google::protobuf::uint8* CBroadcast_WebRTCGetHostCandidates_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_WebRTCGetHostCandidates_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 candidate_generation = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->candidate_generation(), target);
  }

  // repeated .proto.steam.CBroadcast_WebRTC_Candidate candidates = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->candidates_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->candidates(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_WebRTCGetHostCandidates_Response)
  return target;
}

size_t CBroadcast_WebRTCGetHostCandidates_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_WebRTCGetHostCandidates_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CBroadcast_WebRTC_Candidate candidates = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->candidates_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->candidates(static_cast<int>(i)));
    }
  }

  // optional uint32 candidate_generation = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->candidate_generation());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_WebRTCGetHostCandidates_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_WebRTCGetHostCandidates_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_WebRTCGetHostCandidates_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CBroadcast_WebRTCGetHostCandidates_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_WebRTCGetHostCandidates_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_WebRTCGetHostCandidates_Response)
    MergeFrom(*source);
  }
}

void CBroadcast_WebRTCGetHostCandidates_Response::MergeFrom(const CBroadcast_WebRTCGetHostCandidates_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_WebRTCGetHostCandidates_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  candidates_.MergeFrom(from.candidates_);
  if (from.has_candidate_generation()) {
    set_candidate_generation(from.candidate_generation());
  }
}

void CBroadcast_WebRTCGetHostCandidates_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_WebRTCGetHostCandidates_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_WebRTCGetHostCandidates_Response::CopyFrom(const CBroadcast_WebRTCGetHostCandidates_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_WebRTCGetHostCandidates_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_WebRTCGetHostCandidates_Response::IsInitialized() const {
  return true;
}

void CBroadcast_WebRTCGetHostCandidates_Response::Swap(CBroadcast_WebRTCGetHostCandidates_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_WebRTCGetHostCandidates_Response::InternalSwap(CBroadcast_WebRTCGetHostCandidates_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&candidates_)->InternalSwap(CastToBase(&other->candidates_));
  swap(candidate_generation_, other->candidate_generation_);
}

::google::protobuf::Metadata CBroadcast_WebRTCGetHostCandidates_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_BroadcastViewerState_Notification::InitAsDefaultInstance() {
}
class CBroadcast_BroadcastViewerState_Notification::HasBitSetters {
 public:
  static void set_has_steamid(CBroadcast_BroadcastViewerState_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_state(CBroadcast_BroadcastViewerState_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_BroadcastViewerState_Notification::kSteamidFieldNumber;
const int CBroadcast_BroadcastViewerState_Notification::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_BroadcastViewerState_Notification::CBroadcast_BroadcastViewerState_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_BroadcastViewerState_Notification)
}
CBroadcast_BroadcastViewerState_Notification::CBroadcast_BroadcastViewerState_Notification(const CBroadcast_BroadcastViewerState_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_BroadcastViewerState_Notification)
}

void CBroadcast_BroadcastViewerState_Notification::SharedCtor() {
  steamid_ = PROTOBUF_ULONGLONG(0);
  state_ = 1;
}

CBroadcast_BroadcastViewerState_Notification::~CBroadcast_BroadcastViewerState_Notification() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_BroadcastViewerState_Notification)
  SharedDtor();
}

void CBroadcast_BroadcastViewerState_Notification::SharedDtor() {
}

void CBroadcast_BroadcastViewerState_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBroadcast_BroadcastViewerState_Notification& CBroadcast_BroadcastViewerState_Notification::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CBroadcast_BroadcastViewerState_Notification_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CBroadcast_BroadcastViewerState_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_BroadcastViewerState_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    steamid_ = PROTOBUF_ULONGLONG(0);
    state_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CBroadcast_BroadcastViewerState_Notification::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CBroadcast_BroadcastViewerState_Notification*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional .proto.steam.CBroadcast_BroadcastViewerState_Notification.EViewerState state = 2 [default = k_EViewerNeedsApproval];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::steam::CBroadcast_BroadcastViewerState_Notification_EViewerState_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_state(static_cast<::proto::steam::CBroadcast_BroadcastViewerState_Notification_EViewerState>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CBroadcast_BroadcastViewerState_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_BroadcastViewerState_Notification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CBroadcast_BroadcastViewerState_Notification.EViewerState state = 2 [default = k_EViewerNeedsApproval];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::steam::CBroadcast_BroadcastViewerState_Notification_EViewerState_IsValid(value)) {
            set_state(static_cast< ::proto::steam::CBroadcast_BroadcastViewerState_Notification_EViewerState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_BroadcastViewerState_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_BroadcastViewerState_Notification)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CBroadcast_BroadcastViewerState_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_BroadcastViewerState_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional .proto.steam.CBroadcast_BroadcastViewerState_Notification.EViewerState state = 2 [default = k_EViewerNeedsApproval];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_BroadcastViewerState_Notification)
}

::google::protobuf::uint8* CBroadcast_BroadcastViewerState_Notification::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_BroadcastViewerState_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional .proto.steam.CBroadcast_BroadcastViewerState_Notification.EViewerState state = 2 [default = k_EViewerNeedsApproval];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_BroadcastViewerState_Notification)
  return target;
}

size_t CBroadcast_BroadcastViewerState_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_BroadcastViewerState_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional .proto.steam.CBroadcast_BroadcastViewerState_Notification.EViewerState state = 2 [default = k_EViewerNeedsApproval];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_BroadcastViewerState_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_BroadcastViewerState_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_BroadcastViewerState_Notification* source =
      ::google::protobuf::DynamicCastToGenerated<CBroadcast_BroadcastViewerState_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_BroadcastViewerState_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_BroadcastViewerState_Notification)
    MergeFrom(*source);
  }
}

void CBroadcast_BroadcastViewerState_Notification::MergeFrom(const CBroadcast_BroadcastViewerState_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_BroadcastViewerState_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_BroadcastViewerState_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_BroadcastViewerState_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_BroadcastViewerState_Notification::CopyFrom(const CBroadcast_BroadcastViewerState_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_BroadcastViewerState_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_BroadcastViewerState_Notification::IsInitialized() const {
  return true;
}

void CBroadcast_BroadcastViewerState_Notification::Swap(CBroadcast_BroadcastViewerState_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_BroadcastViewerState_Notification::InternalSwap(CBroadcast_BroadcastViewerState_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
  swap(state_, other->state_);
}

::google::protobuf::Metadata CBroadcast_BroadcastViewerState_Notification::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_WaitingBroadcastViewer_Notification::InitAsDefaultInstance() {
}
class CBroadcast_WaitingBroadcastViewer_Notification::HasBitSetters {
 public:
  static void set_has_broadcast_id(CBroadcast_WaitingBroadcastViewer_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_WaitingBroadcastViewer_Notification::kBroadcastIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_WaitingBroadcastViewer_Notification::CBroadcast_WaitingBroadcastViewer_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_WaitingBroadcastViewer_Notification)
}
CBroadcast_WaitingBroadcastViewer_Notification::CBroadcast_WaitingBroadcastViewer_Notification(const CBroadcast_WaitingBroadcastViewer_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  broadcast_id_ = from.broadcast_id_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_WaitingBroadcastViewer_Notification)
}

void CBroadcast_WaitingBroadcastViewer_Notification::SharedCtor() {
  broadcast_id_ = PROTOBUF_ULONGLONG(0);
}

CBroadcast_WaitingBroadcastViewer_Notification::~CBroadcast_WaitingBroadcastViewer_Notification() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_WaitingBroadcastViewer_Notification)
  SharedDtor();
}

void CBroadcast_WaitingBroadcastViewer_Notification::SharedDtor() {
}

void CBroadcast_WaitingBroadcastViewer_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBroadcast_WaitingBroadcastViewer_Notification& CBroadcast_WaitingBroadcastViewer_Notification::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CBroadcast_WaitingBroadcastViewer_Notification_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CBroadcast_WaitingBroadcastViewer_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_WaitingBroadcastViewer_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  broadcast_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CBroadcast_WaitingBroadcastViewer_Notification::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CBroadcast_WaitingBroadcastViewer_Notification*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 broadcast_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_broadcast_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CBroadcast_WaitingBroadcastViewer_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_WaitingBroadcastViewer_Notification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 broadcast_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_broadcast_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &broadcast_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_WaitingBroadcastViewer_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_WaitingBroadcastViewer_Notification)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CBroadcast_WaitingBroadcastViewer_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_WaitingBroadcastViewer_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->broadcast_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_WaitingBroadcastViewer_Notification)
}

::google::protobuf::uint8* CBroadcast_WaitingBroadcastViewer_Notification::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_WaitingBroadcastViewer_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->broadcast_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_WaitingBroadcastViewer_Notification)
  return target;
}

size_t CBroadcast_WaitingBroadcastViewer_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_WaitingBroadcastViewer_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 broadcast_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_WaitingBroadcastViewer_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_WaitingBroadcastViewer_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_WaitingBroadcastViewer_Notification* source =
      ::google::protobuf::DynamicCastToGenerated<CBroadcast_WaitingBroadcastViewer_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_WaitingBroadcastViewer_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_WaitingBroadcastViewer_Notification)
    MergeFrom(*source);
  }
}

void CBroadcast_WaitingBroadcastViewer_Notification::MergeFrom(const CBroadcast_WaitingBroadcastViewer_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_WaitingBroadcastViewer_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_broadcast_id()) {
    set_broadcast_id(from.broadcast_id());
  }
}

void CBroadcast_WaitingBroadcastViewer_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_WaitingBroadcastViewer_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_WaitingBroadcastViewer_Notification::CopyFrom(const CBroadcast_WaitingBroadcastViewer_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_WaitingBroadcastViewer_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_WaitingBroadcastViewer_Notification::IsInitialized() const {
  return true;
}

void CBroadcast_WaitingBroadcastViewer_Notification::Swap(CBroadcast_WaitingBroadcastViewer_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_WaitingBroadcastViewer_Notification::InternalSwap(CBroadcast_WaitingBroadcastViewer_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(broadcast_id_, other->broadcast_id_);
}

::google::protobuf::Metadata CBroadcast_WaitingBroadcastViewer_Notification::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_StopBroadcastUpload_Notification::InitAsDefaultInstance() {
}
class CBroadcast_StopBroadcastUpload_Notification::HasBitSetters {
 public:
  static void set_has_broadcast_id(CBroadcast_StopBroadcastUpload_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_broadcast_relay_id(CBroadcast_StopBroadcastUpload_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_upload_result(CBroadcast_StopBroadcastUpload_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_too_many_poor_uploads(CBroadcast_StopBroadcastUpload_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_StopBroadcastUpload_Notification::kBroadcastIdFieldNumber;
const int CBroadcast_StopBroadcastUpload_Notification::kBroadcastRelayIdFieldNumber;
const int CBroadcast_StopBroadcastUpload_Notification::kUploadResultFieldNumber;
const int CBroadcast_StopBroadcastUpload_Notification::kTooManyPoorUploadsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_StopBroadcastUpload_Notification::CBroadcast_StopBroadcastUpload_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_StopBroadcastUpload_Notification)
}
CBroadcast_StopBroadcastUpload_Notification::CBroadcast_StopBroadcastUpload_Notification(const CBroadcast_StopBroadcastUpload_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&broadcast_id_, &from.broadcast_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&too_many_poor_uploads_) -
    reinterpret_cast<char*>(&broadcast_id_)) + sizeof(too_many_poor_uploads_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_StopBroadcastUpload_Notification)
}

void CBroadcast_StopBroadcastUpload_Notification::SharedCtor() {
  ::memset(&broadcast_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&too_many_poor_uploads_) -
      reinterpret_cast<char*>(&broadcast_id_)) + sizeof(too_many_poor_uploads_));
}

CBroadcast_StopBroadcastUpload_Notification::~CBroadcast_StopBroadcastUpload_Notification() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_StopBroadcastUpload_Notification)
  SharedDtor();
}

void CBroadcast_StopBroadcastUpload_Notification::SharedDtor() {
}

void CBroadcast_StopBroadcastUpload_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBroadcast_StopBroadcastUpload_Notification& CBroadcast_StopBroadcastUpload_Notification::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CBroadcast_StopBroadcastUpload_Notification_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CBroadcast_StopBroadcastUpload_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_StopBroadcastUpload_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&broadcast_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&too_many_poor_uploads_) -
        reinterpret_cast<char*>(&broadcast_id_)) + sizeof(too_many_poor_uploads_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CBroadcast_StopBroadcastUpload_Notification::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CBroadcast_StopBroadcastUpload_Notification*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 broadcast_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_broadcast_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed64 broadcast_relay_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_broadcast_relay_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 upload_result = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_upload_result(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool too_many_poor_uploads = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_too_many_poor_uploads(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CBroadcast_StopBroadcastUpload_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_StopBroadcastUpload_Notification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 broadcast_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_broadcast_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &broadcast_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 broadcast_relay_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_broadcast_relay_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &broadcast_relay_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 upload_result = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_upload_result(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &upload_result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool too_many_poor_uploads = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_too_many_poor_uploads(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &too_many_poor_uploads_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_StopBroadcastUpload_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_StopBroadcastUpload_Notification)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CBroadcast_StopBroadcastUpload_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_StopBroadcastUpload_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->broadcast_id(), output);
  }

  // optional fixed64 broadcast_relay_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->broadcast_relay_id(), output);
  }

  // optional uint32 upload_result = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->upload_result(), output);
  }

  // optional bool too_many_poor_uploads = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->too_many_poor_uploads(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_StopBroadcastUpload_Notification)
}

::google::protobuf::uint8* CBroadcast_StopBroadcastUpload_Notification::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_StopBroadcastUpload_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->broadcast_id(), target);
  }

  // optional fixed64 broadcast_relay_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->broadcast_relay_id(), target);
  }

  // optional uint32 upload_result = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->upload_result(), target);
  }

  // optional bool too_many_poor_uploads = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->too_many_poor_uploads(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_StopBroadcastUpload_Notification)
  return target;
}

size_t CBroadcast_StopBroadcastUpload_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_StopBroadcastUpload_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional fixed64 broadcast_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 broadcast_relay_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 upload_result = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->upload_result());
    }

    // optional bool too_many_poor_uploads = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_StopBroadcastUpload_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_StopBroadcastUpload_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_StopBroadcastUpload_Notification* source =
      ::google::protobuf::DynamicCastToGenerated<CBroadcast_StopBroadcastUpload_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_StopBroadcastUpload_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_StopBroadcastUpload_Notification)
    MergeFrom(*source);
  }
}

void CBroadcast_StopBroadcastUpload_Notification::MergeFrom(const CBroadcast_StopBroadcastUpload_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_StopBroadcastUpload_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      broadcast_id_ = from.broadcast_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      broadcast_relay_id_ = from.broadcast_relay_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      upload_result_ = from.upload_result_;
    }
    if (cached_has_bits & 0x00000008u) {
      too_many_poor_uploads_ = from.too_many_poor_uploads_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_StopBroadcastUpload_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_StopBroadcastUpload_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_StopBroadcastUpload_Notification::CopyFrom(const CBroadcast_StopBroadcastUpload_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_StopBroadcastUpload_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_StopBroadcastUpload_Notification::IsInitialized() const {
  return true;
}

void CBroadcast_StopBroadcastUpload_Notification::Swap(CBroadcast_StopBroadcastUpload_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_StopBroadcastUpload_Notification::InternalSwap(CBroadcast_StopBroadcastUpload_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(broadcast_id_, other->broadcast_id_);
  swap(broadcast_relay_id_, other->broadcast_relay_id_);
  swap(upload_result_, other->upload_result_);
  swap(too_many_poor_uploads_, other->too_many_poor_uploads_);
}

::google::protobuf::Metadata CBroadcast_StopBroadcastUpload_Notification::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_SessionClosed_Notification::InitAsDefaultInstance() {
}
class CBroadcast_SessionClosed_Notification::HasBitSetters {
 public:
  static void set_has_broadcast_id(CBroadcast_SessionClosed_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_SessionClosed_Notification::kBroadcastIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_SessionClosed_Notification::CBroadcast_SessionClosed_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_SessionClosed_Notification)
}
CBroadcast_SessionClosed_Notification::CBroadcast_SessionClosed_Notification(const CBroadcast_SessionClosed_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  broadcast_id_ = from.broadcast_id_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_SessionClosed_Notification)
}

void CBroadcast_SessionClosed_Notification::SharedCtor() {
  broadcast_id_ = PROTOBUF_ULONGLONG(0);
}

CBroadcast_SessionClosed_Notification::~CBroadcast_SessionClosed_Notification() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_SessionClosed_Notification)
  SharedDtor();
}

void CBroadcast_SessionClosed_Notification::SharedDtor() {
}

void CBroadcast_SessionClosed_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBroadcast_SessionClosed_Notification& CBroadcast_SessionClosed_Notification::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CBroadcast_SessionClosed_Notification_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CBroadcast_SessionClosed_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_SessionClosed_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  broadcast_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CBroadcast_SessionClosed_Notification::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CBroadcast_SessionClosed_Notification*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 broadcast_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_broadcast_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CBroadcast_SessionClosed_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_SessionClosed_Notification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 broadcast_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_broadcast_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &broadcast_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_SessionClosed_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_SessionClosed_Notification)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CBroadcast_SessionClosed_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_SessionClosed_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->broadcast_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_SessionClosed_Notification)
}

::google::protobuf::uint8* CBroadcast_SessionClosed_Notification::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_SessionClosed_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->broadcast_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_SessionClosed_Notification)
  return target;
}

size_t CBroadcast_SessionClosed_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_SessionClosed_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 broadcast_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_SessionClosed_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_SessionClosed_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_SessionClosed_Notification* source =
      ::google::protobuf::DynamicCastToGenerated<CBroadcast_SessionClosed_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_SessionClosed_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_SessionClosed_Notification)
    MergeFrom(*source);
  }
}

void CBroadcast_SessionClosed_Notification::MergeFrom(const CBroadcast_SessionClosed_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_SessionClosed_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_broadcast_id()) {
    set_broadcast_id(from.broadcast_id());
  }
}

void CBroadcast_SessionClosed_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_SessionClosed_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_SessionClosed_Notification::CopyFrom(const CBroadcast_SessionClosed_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_SessionClosed_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_SessionClosed_Notification::IsInitialized() const {
  return true;
}

void CBroadcast_SessionClosed_Notification::Swap(CBroadcast_SessionClosed_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_SessionClosed_Notification::InternalSwap(CBroadcast_SessionClosed_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(broadcast_id_, other->broadcast_id_);
}

::google::protobuf::Metadata CBroadcast_SessionClosed_Notification::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_ViewerBroadcastInvite_Notification::InitAsDefaultInstance() {
}
class CBroadcast_ViewerBroadcastInvite_Notification::HasBitSetters {
 public:
  static void set_has_broadcaster_steamid(CBroadcast_ViewerBroadcastInvite_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_ViewerBroadcastInvite_Notification::kBroadcasterSteamidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_ViewerBroadcastInvite_Notification::CBroadcast_ViewerBroadcastInvite_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_ViewerBroadcastInvite_Notification)
}
CBroadcast_ViewerBroadcastInvite_Notification::CBroadcast_ViewerBroadcastInvite_Notification(const CBroadcast_ViewerBroadcastInvite_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  broadcaster_steamid_ = from.broadcaster_steamid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_ViewerBroadcastInvite_Notification)
}

void CBroadcast_ViewerBroadcastInvite_Notification::SharedCtor() {
  broadcaster_steamid_ = PROTOBUF_ULONGLONG(0);
}

CBroadcast_ViewerBroadcastInvite_Notification::~CBroadcast_ViewerBroadcastInvite_Notification() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_ViewerBroadcastInvite_Notification)
  SharedDtor();
}

void CBroadcast_ViewerBroadcastInvite_Notification::SharedDtor() {
}

void CBroadcast_ViewerBroadcastInvite_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBroadcast_ViewerBroadcastInvite_Notification& CBroadcast_ViewerBroadcastInvite_Notification::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CBroadcast_ViewerBroadcastInvite_Notification_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CBroadcast_ViewerBroadcastInvite_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_ViewerBroadcastInvite_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  broadcaster_steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CBroadcast_ViewerBroadcastInvite_Notification::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CBroadcast_ViewerBroadcastInvite_Notification*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 broadcaster_steamid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_broadcaster_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CBroadcast_ViewerBroadcastInvite_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_ViewerBroadcastInvite_Notification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 broadcaster_steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_broadcaster_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &broadcaster_steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_ViewerBroadcastInvite_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_ViewerBroadcastInvite_Notification)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CBroadcast_ViewerBroadcastInvite_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_ViewerBroadcastInvite_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcaster_steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->broadcaster_steamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_ViewerBroadcastInvite_Notification)
}

::google::protobuf::uint8* CBroadcast_ViewerBroadcastInvite_Notification::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_ViewerBroadcastInvite_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcaster_steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->broadcaster_steamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_ViewerBroadcastInvite_Notification)
  return target;
}

size_t CBroadcast_ViewerBroadcastInvite_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_ViewerBroadcastInvite_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 broadcaster_steamid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_ViewerBroadcastInvite_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_ViewerBroadcastInvite_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_ViewerBroadcastInvite_Notification* source =
      ::google::protobuf::DynamicCastToGenerated<CBroadcast_ViewerBroadcastInvite_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_ViewerBroadcastInvite_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_ViewerBroadcastInvite_Notification)
    MergeFrom(*source);
  }
}

void CBroadcast_ViewerBroadcastInvite_Notification::MergeFrom(const CBroadcast_ViewerBroadcastInvite_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_ViewerBroadcastInvite_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_broadcaster_steamid()) {
    set_broadcaster_steamid(from.broadcaster_steamid());
  }
}

void CBroadcast_ViewerBroadcastInvite_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_ViewerBroadcastInvite_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_ViewerBroadcastInvite_Notification::CopyFrom(const CBroadcast_ViewerBroadcastInvite_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_ViewerBroadcastInvite_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_ViewerBroadcastInvite_Notification::IsInitialized() const {
  return true;
}

void CBroadcast_ViewerBroadcastInvite_Notification::Swap(CBroadcast_ViewerBroadcastInvite_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_ViewerBroadcastInvite_Notification::InternalSwap(CBroadcast_ViewerBroadcastInvite_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(broadcaster_steamid_, other->broadcaster_steamid_);
}

::google::protobuf::Metadata CBroadcast_ViewerBroadcastInvite_Notification::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_BroadcastStatus_Notification::InitAsDefaultInstance() {
}
class CBroadcast_BroadcastStatus_Notification::HasBitSetters {
 public:
  static void set_has_broadcast_id(CBroadcast_BroadcastStatus_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_num_viewers(CBroadcast_BroadcastStatus_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_BroadcastStatus_Notification::kBroadcastIdFieldNumber;
const int CBroadcast_BroadcastStatus_Notification::kNumViewersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_BroadcastStatus_Notification::CBroadcast_BroadcastStatus_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_BroadcastStatus_Notification)
}
CBroadcast_BroadcastStatus_Notification::CBroadcast_BroadcastStatus_Notification(const CBroadcast_BroadcastStatus_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&broadcast_id_, &from.broadcast_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_viewers_) -
    reinterpret_cast<char*>(&broadcast_id_)) + sizeof(num_viewers_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_BroadcastStatus_Notification)
}

void CBroadcast_BroadcastStatus_Notification::SharedCtor() {
  ::memset(&broadcast_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_viewers_) -
      reinterpret_cast<char*>(&broadcast_id_)) + sizeof(num_viewers_));
}

CBroadcast_BroadcastStatus_Notification::~CBroadcast_BroadcastStatus_Notification() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_BroadcastStatus_Notification)
  SharedDtor();
}

void CBroadcast_BroadcastStatus_Notification::SharedDtor() {
}

void CBroadcast_BroadcastStatus_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBroadcast_BroadcastStatus_Notification& CBroadcast_BroadcastStatus_Notification::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CBroadcast_BroadcastStatus_Notification_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CBroadcast_BroadcastStatus_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_BroadcastStatus_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&broadcast_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_viewers_) -
        reinterpret_cast<char*>(&broadcast_id_)) + sizeof(num_viewers_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CBroadcast_BroadcastStatus_Notification::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CBroadcast_BroadcastStatus_Notification*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 broadcast_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_broadcast_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional int32 num_viewers = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_num_viewers(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CBroadcast_BroadcastStatus_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_BroadcastStatus_Notification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 broadcast_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_broadcast_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &broadcast_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_viewers = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_num_viewers(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_viewers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_BroadcastStatus_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_BroadcastStatus_Notification)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CBroadcast_BroadcastStatus_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_BroadcastStatus_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->broadcast_id(), output);
  }

  // optional int32 num_viewers = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_viewers(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_BroadcastStatus_Notification)
}

::google::protobuf::uint8* CBroadcast_BroadcastStatus_Notification::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_BroadcastStatus_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->broadcast_id(), target);
  }

  // optional int32 num_viewers = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_viewers(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_BroadcastStatus_Notification)
  return target;
}

size_t CBroadcast_BroadcastStatus_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_BroadcastStatus_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 broadcast_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional int32 num_viewers = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_viewers());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_BroadcastStatus_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_BroadcastStatus_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_BroadcastStatus_Notification* source =
      ::google::protobuf::DynamicCastToGenerated<CBroadcast_BroadcastStatus_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_BroadcastStatus_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_BroadcastStatus_Notification)
    MergeFrom(*source);
  }
}

void CBroadcast_BroadcastStatus_Notification::MergeFrom(const CBroadcast_BroadcastStatus_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_BroadcastStatus_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      broadcast_id_ = from.broadcast_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_viewers_ = from.num_viewers_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_BroadcastStatus_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_BroadcastStatus_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_BroadcastStatus_Notification::CopyFrom(const CBroadcast_BroadcastStatus_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_BroadcastStatus_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_BroadcastStatus_Notification::IsInitialized() const {
  return true;
}

void CBroadcast_BroadcastStatus_Notification::Swap(CBroadcast_BroadcastStatus_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_BroadcastStatus_Notification::InternalSwap(CBroadcast_BroadcastStatus_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(broadcast_id_, other->broadcast_id_);
  swap(num_viewers_, other->num_viewers_);
}

::google::protobuf::Metadata CBroadcast_BroadcastStatus_Notification::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_SendThumbnailToRelay_Notification::InitAsDefaultInstance() {
}
class CBroadcast_SendThumbnailToRelay_Notification::HasBitSetters {
 public:
  static void set_has_thumbnail_upload_token(CBroadcast_SendThumbnailToRelay_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_thumbnail_broadcast_session_id(CBroadcast_SendThumbnailToRelay_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_thumbnail_data(CBroadcast_SendThumbnailToRelay_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_thumbnail_width(CBroadcast_SendThumbnailToRelay_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_thumbnail_height(CBroadcast_SendThumbnailToRelay_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_SendThumbnailToRelay_Notification::kThumbnailUploadTokenFieldNumber;
const int CBroadcast_SendThumbnailToRelay_Notification::kThumbnailBroadcastSessionIdFieldNumber;
const int CBroadcast_SendThumbnailToRelay_Notification::kThumbnailDataFieldNumber;
const int CBroadcast_SendThumbnailToRelay_Notification::kThumbnailWidthFieldNumber;
const int CBroadcast_SendThumbnailToRelay_Notification::kThumbnailHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_SendThumbnailToRelay_Notification::CBroadcast_SendThumbnailToRelay_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_SendThumbnailToRelay_Notification)
}
CBroadcast_SendThumbnailToRelay_Notification::CBroadcast_SendThumbnailToRelay_Notification(const CBroadcast_SendThumbnailToRelay_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  thumbnail_upload_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_thumbnail_upload_token()) {
    thumbnail_upload_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.thumbnail_upload_token_);
  }
  thumbnail_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_thumbnail_data()) {
    thumbnail_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.thumbnail_data_);
  }
  ::memcpy(&thumbnail_broadcast_session_id_, &from.thumbnail_broadcast_session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&thumbnail_height_) -
    reinterpret_cast<char*>(&thumbnail_broadcast_session_id_)) + sizeof(thumbnail_height_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_SendThumbnailToRelay_Notification)
}

void CBroadcast_SendThumbnailToRelay_Notification::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CBroadcast_SendThumbnailToRelay_Notification_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  thumbnail_upload_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thumbnail_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&thumbnail_broadcast_session_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&thumbnail_height_) -
      reinterpret_cast<char*>(&thumbnail_broadcast_session_id_)) + sizeof(thumbnail_height_));
}

CBroadcast_SendThumbnailToRelay_Notification::~CBroadcast_SendThumbnailToRelay_Notification() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_SendThumbnailToRelay_Notification)
  SharedDtor();
}

void CBroadcast_SendThumbnailToRelay_Notification::SharedDtor() {
  thumbnail_upload_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thumbnail_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_SendThumbnailToRelay_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBroadcast_SendThumbnailToRelay_Notification& CBroadcast_SendThumbnailToRelay_Notification::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CBroadcast_SendThumbnailToRelay_Notification_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CBroadcast_SendThumbnailToRelay_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_SendThumbnailToRelay_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      thumbnail_upload_token_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      thumbnail_data_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&thumbnail_broadcast_session_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&thumbnail_height_) -
        reinterpret_cast<char*>(&thumbnail_broadcast_session_id_)) + sizeof(thumbnail_height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CBroadcast_SendThumbnailToRelay_Notification::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CBroadcast_SendThumbnailToRelay_Notification*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string thumbnail_upload_token = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CBroadcast_SendThumbnailToRelay_Notification.thumbnail_upload_token");
        object = msg->mutable_thumbnail_upload_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional fixed64 thumbnail_broadcast_session_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_thumbnail_broadcast_session_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional bytes thumbnail_data = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_thumbnail_data();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 thumbnail_width = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_thumbnail_width(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 thumbnail_height = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_thumbnail_height(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CBroadcast_SendThumbnailToRelay_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_SendThumbnailToRelay_Notification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string thumbnail_upload_token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_thumbnail_upload_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->thumbnail_upload_token().data(), static_cast<int>(this->thumbnail_upload_token().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CBroadcast_SendThumbnailToRelay_Notification.thumbnail_upload_token");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 thumbnail_broadcast_session_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_thumbnail_broadcast_session_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &thumbnail_broadcast_session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes thumbnail_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_thumbnail_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 thumbnail_width = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_thumbnail_width(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thumbnail_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 thumbnail_height = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_thumbnail_height(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thumbnail_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_SendThumbnailToRelay_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_SendThumbnailToRelay_Notification)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CBroadcast_SendThumbnailToRelay_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_SendThumbnailToRelay_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string thumbnail_upload_token = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->thumbnail_upload_token().data(), static_cast<int>(this->thumbnail_upload_token().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_SendThumbnailToRelay_Notification.thumbnail_upload_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->thumbnail_upload_token(), output);
  }

  // optional fixed64 thumbnail_broadcast_session_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->thumbnail_broadcast_session_id(), output);
  }

  // optional bytes thumbnail_data = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->thumbnail_data(), output);
  }

  // optional uint32 thumbnail_width = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->thumbnail_width(), output);
  }

  // optional uint32 thumbnail_height = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->thumbnail_height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_SendThumbnailToRelay_Notification)
}

::google::protobuf::uint8* CBroadcast_SendThumbnailToRelay_Notification::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_SendThumbnailToRelay_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string thumbnail_upload_token = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->thumbnail_upload_token().data(), static_cast<int>(this->thumbnail_upload_token().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_SendThumbnailToRelay_Notification.thumbnail_upload_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->thumbnail_upload_token(), target);
  }

  // optional fixed64 thumbnail_broadcast_session_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->thumbnail_broadcast_session_id(), target);
  }

  // optional bytes thumbnail_data = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->thumbnail_data(), target);
  }

  // optional uint32 thumbnail_width = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->thumbnail_width(), target);
  }

  // optional uint32 thumbnail_height = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->thumbnail_height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_SendThumbnailToRelay_Notification)
  return target;
}

size_t CBroadcast_SendThumbnailToRelay_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_SendThumbnailToRelay_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string thumbnail_upload_token = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->thumbnail_upload_token());
    }

    // optional bytes thumbnail_data = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->thumbnail_data());
    }

    // optional fixed64 thumbnail_broadcast_session_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 thumbnail_width = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->thumbnail_width());
    }

    // optional uint32 thumbnail_height = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->thumbnail_height());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_SendThumbnailToRelay_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_SendThumbnailToRelay_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_SendThumbnailToRelay_Notification* source =
      ::google::protobuf::DynamicCastToGenerated<CBroadcast_SendThumbnailToRelay_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_SendThumbnailToRelay_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_SendThumbnailToRelay_Notification)
    MergeFrom(*source);
  }
}

void CBroadcast_SendThumbnailToRelay_Notification::MergeFrom(const CBroadcast_SendThumbnailToRelay_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_SendThumbnailToRelay_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      thumbnail_upload_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.thumbnail_upload_token_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      thumbnail_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.thumbnail_data_);
    }
    if (cached_has_bits & 0x00000004u) {
      thumbnail_broadcast_session_id_ = from.thumbnail_broadcast_session_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      thumbnail_width_ = from.thumbnail_width_;
    }
    if (cached_has_bits & 0x00000010u) {
      thumbnail_height_ = from.thumbnail_height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_SendThumbnailToRelay_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_SendThumbnailToRelay_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_SendThumbnailToRelay_Notification::CopyFrom(const CBroadcast_SendThumbnailToRelay_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_SendThumbnailToRelay_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_SendThumbnailToRelay_Notification::IsInitialized() const {
  return true;
}

void CBroadcast_SendThumbnailToRelay_Notification::Swap(CBroadcast_SendThumbnailToRelay_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_SendThumbnailToRelay_Notification::InternalSwap(CBroadcast_SendThumbnailToRelay_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  thumbnail_upload_token_.Swap(&other->thumbnail_upload_token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  thumbnail_data_.Swap(&other->thumbnail_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(thumbnail_broadcast_session_id_, other->thumbnail_broadcast_session_id_);
  swap(thumbnail_width_, other->thumbnail_width_);
  swap(thumbnail_height_, other->thumbnail_height_);
}

::google::protobuf::Metadata CBroadcast_SendThumbnailToRelay_Notification::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_WebRTCNeedTURNServer_Notification::InitAsDefaultInstance() {
}
class CBroadcast_WebRTCNeedTURNServer_Notification::HasBitSetters {
 public:
  static void set_has_broadcast_session_id(CBroadcast_WebRTCNeedTURNServer_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_WebRTCNeedTURNServer_Notification::kBroadcastSessionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_WebRTCNeedTURNServer_Notification::CBroadcast_WebRTCNeedTURNServer_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_WebRTCNeedTURNServer_Notification)
}
CBroadcast_WebRTCNeedTURNServer_Notification::CBroadcast_WebRTCNeedTURNServer_Notification(const CBroadcast_WebRTCNeedTURNServer_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  broadcast_session_id_ = from.broadcast_session_id_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_WebRTCNeedTURNServer_Notification)
}

void CBroadcast_WebRTCNeedTURNServer_Notification::SharedCtor() {
  broadcast_session_id_ = PROTOBUF_ULONGLONG(0);
}

CBroadcast_WebRTCNeedTURNServer_Notification::~CBroadcast_WebRTCNeedTURNServer_Notification() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_WebRTCNeedTURNServer_Notification)
  SharedDtor();
}

void CBroadcast_WebRTCNeedTURNServer_Notification::SharedDtor() {
}

void CBroadcast_WebRTCNeedTURNServer_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBroadcast_WebRTCNeedTURNServer_Notification& CBroadcast_WebRTCNeedTURNServer_Notification::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CBroadcast_WebRTCNeedTURNServer_Notification_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CBroadcast_WebRTCNeedTURNServer_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_WebRTCNeedTURNServer_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  broadcast_session_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CBroadcast_WebRTCNeedTURNServer_Notification::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CBroadcast_WebRTCNeedTURNServer_Notification*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 broadcast_session_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_broadcast_session_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CBroadcast_WebRTCNeedTURNServer_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_WebRTCNeedTURNServer_Notification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 broadcast_session_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_broadcast_session_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &broadcast_session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_WebRTCNeedTURNServer_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_WebRTCNeedTURNServer_Notification)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CBroadcast_WebRTCNeedTURNServer_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_WebRTCNeedTURNServer_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_session_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->broadcast_session_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_WebRTCNeedTURNServer_Notification)
}

::google::protobuf::uint8* CBroadcast_WebRTCNeedTURNServer_Notification::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_WebRTCNeedTURNServer_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_session_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->broadcast_session_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_WebRTCNeedTURNServer_Notification)
  return target;
}

size_t CBroadcast_WebRTCNeedTURNServer_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_WebRTCNeedTURNServer_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 broadcast_session_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_WebRTCNeedTURNServer_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_WebRTCNeedTURNServer_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_WebRTCNeedTURNServer_Notification* source =
      ::google::protobuf::DynamicCastToGenerated<CBroadcast_WebRTCNeedTURNServer_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_WebRTCNeedTURNServer_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_WebRTCNeedTURNServer_Notification)
    MergeFrom(*source);
  }
}

void CBroadcast_WebRTCNeedTURNServer_Notification::MergeFrom(const CBroadcast_WebRTCNeedTURNServer_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_WebRTCNeedTURNServer_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_broadcast_session_id()) {
    set_broadcast_session_id(from.broadcast_session_id());
  }
}

void CBroadcast_WebRTCNeedTURNServer_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_WebRTCNeedTURNServer_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_WebRTCNeedTURNServer_Notification::CopyFrom(const CBroadcast_WebRTCNeedTURNServer_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_WebRTCNeedTURNServer_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_WebRTCNeedTURNServer_Notification::IsInitialized() const {
  return true;
}

void CBroadcast_WebRTCNeedTURNServer_Notification::Swap(CBroadcast_WebRTCNeedTURNServer_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_WebRTCNeedTURNServer_Notification::InternalSwap(CBroadcast_WebRTCNeedTURNServer_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(broadcast_session_id_, other->broadcast_session_id_);
}

::google::protobuf::Metadata CBroadcast_WebRTCNeedTURNServer_Notification::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_WebRTCStart_Notification::InitAsDefaultInstance() {
}
class CBroadcast_WebRTCStart_Notification::HasBitSetters {
 public:
  static void set_has_broadcast_session_id(CBroadcast_WebRTCStart_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_webrtc_session_id(CBroadcast_WebRTCStart_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_viewer_steamid(CBroadcast_WebRTCStart_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_viewer_token(CBroadcast_WebRTCStart_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_WebRTCStart_Notification::kBroadcastSessionIdFieldNumber;
const int CBroadcast_WebRTCStart_Notification::kWebrtcSessionIdFieldNumber;
const int CBroadcast_WebRTCStart_Notification::kViewerSteamidFieldNumber;
const int CBroadcast_WebRTCStart_Notification::kViewerTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_WebRTCStart_Notification::CBroadcast_WebRTCStart_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_WebRTCStart_Notification)
}
CBroadcast_WebRTCStart_Notification::CBroadcast_WebRTCStart_Notification(const CBroadcast_WebRTCStart_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&broadcast_session_id_, &from.broadcast_session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&viewer_token_) -
    reinterpret_cast<char*>(&broadcast_session_id_)) + sizeof(viewer_token_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_WebRTCStart_Notification)
}

void CBroadcast_WebRTCStart_Notification::SharedCtor() {
  ::memset(&broadcast_session_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&viewer_token_) -
      reinterpret_cast<char*>(&broadcast_session_id_)) + sizeof(viewer_token_));
}

CBroadcast_WebRTCStart_Notification::~CBroadcast_WebRTCStart_Notification() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_WebRTCStart_Notification)
  SharedDtor();
}

void CBroadcast_WebRTCStart_Notification::SharedDtor() {
}

void CBroadcast_WebRTCStart_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBroadcast_WebRTCStart_Notification& CBroadcast_WebRTCStart_Notification::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CBroadcast_WebRTCStart_Notification_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CBroadcast_WebRTCStart_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_WebRTCStart_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&broadcast_session_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&viewer_token_) -
        reinterpret_cast<char*>(&broadcast_session_id_)) + sizeof(viewer_token_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CBroadcast_WebRTCStart_Notification::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CBroadcast_WebRTCStart_Notification*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 broadcast_session_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_broadcast_session_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed64 webrtc_session_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_webrtc_session_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed64 viewer_steamid = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_viewer_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed64 viewer_token = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_viewer_token(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CBroadcast_WebRTCStart_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_WebRTCStart_Notification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 broadcast_session_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_broadcast_session_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &broadcast_session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 webrtc_session_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_webrtc_session_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &webrtc_session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 viewer_steamid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          HasBitSetters::set_has_viewer_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &viewer_steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 viewer_token = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {
          HasBitSetters::set_has_viewer_token(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &viewer_token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_WebRTCStart_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_WebRTCStart_Notification)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CBroadcast_WebRTCStart_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_WebRTCStart_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_session_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->broadcast_session_id(), output);
  }

  // optional fixed64 webrtc_session_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->webrtc_session_id(), output);
  }

  // optional fixed64 viewer_steamid = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->viewer_steamid(), output);
  }

  // optional fixed64 viewer_token = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->viewer_token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_WebRTCStart_Notification)
}

::google::protobuf::uint8* CBroadcast_WebRTCStart_Notification::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_WebRTCStart_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_session_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->broadcast_session_id(), target);
  }

  // optional fixed64 webrtc_session_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->webrtc_session_id(), target);
  }

  // optional fixed64 viewer_steamid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->viewer_steamid(), target);
  }

  // optional fixed64 viewer_token = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->viewer_token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_WebRTCStart_Notification)
  return target;
}

size_t CBroadcast_WebRTCStart_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_WebRTCStart_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional fixed64 broadcast_session_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 webrtc_session_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 viewer_steamid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional fixed64 viewer_token = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_WebRTCStart_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_WebRTCStart_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_WebRTCStart_Notification* source =
      ::google::protobuf::DynamicCastToGenerated<CBroadcast_WebRTCStart_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_WebRTCStart_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_WebRTCStart_Notification)
    MergeFrom(*source);
  }
}

void CBroadcast_WebRTCStart_Notification::MergeFrom(const CBroadcast_WebRTCStart_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_WebRTCStart_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      broadcast_session_id_ = from.broadcast_session_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      webrtc_session_id_ = from.webrtc_session_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      viewer_steamid_ = from.viewer_steamid_;
    }
    if (cached_has_bits & 0x00000008u) {
      viewer_token_ = from.viewer_token_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_WebRTCStart_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_WebRTCStart_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_WebRTCStart_Notification::CopyFrom(const CBroadcast_WebRTCStart_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_WebRTCStart_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_WebRTCStart_Notification::IsInitialized() const {
  return true;
}

void CBroadcast_WebRTCStart_Notification::Swap(CBroadcast_WebRTCStart_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_WebRTCStart_Notification::InternalSwap(CBroadcast_WebRTCStart_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(broadcast_session_id_, other->broadcast_session_id_);
  swap(webrtc_session_id_, other->webrtc_session_id_);
  swap(viewer_steamid_, other->viewer_steamid_);
  swap(viewer_token_, other->viewer_token_);
}

::google::protobuf::Metadata CBroadcast_WebRTCStart_Notification::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_WebRTCSetAnswer_Notification::InitAsDefaultInstance() {
}
class CBroadcast_WebRTCSetAnswer_Notification::HasBitSetters {
 public:
  static void set_has_broadcast_session_id(CBroadcast_WebRTCSetAnswer_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_webrtc_session_id(CBroadcast_WebRTCSetAnswer_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_answer(CBroadcast_WebRTCSetAnswer_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_WebRTCSetAnswer_Notification::kBroadcastSessionIdFieldNumber;
const int CBroadcast_WebRTCSetAnswer_Notification::kWebrtcSessionIdFieldNumber;
const int CBroadcast_WebRTCSetAnswer_Notification::kAnswerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_WebRTCSetAnswer_Notification::CBroadcast_WebRTCSetAnswer_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_WebRTCSetAnswer_Notification)
}
CBroadcast_WebRTCSetAnswer_Notification::CBroadcast_WebRTCSetAnswer_Notification(const CBroadcast_WebRTCSetAnswer_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  answer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_answer()) {
    answer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.answer_);
  }
  ::memcpy(&broadcast_session_id_, &from.broadcast_session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&webrtc_session_id_) -
    reinterpret_cast<char*>(&broadcast_session_id_)) + sizeof(webrtc_session_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_WebRTCSetAnswer_Notification)
}

void CBroadcast_WebRTCSetAnswer_Notification::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CBroadcast_WebRTCSetAnswer_Notification_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  answer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&broadcast_session_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&webrtc_session_id_) -
      reinterpret_cast<char*>(&broadcast_session_id_)) + sizeof(webrtc_session_id_));
}

CBroadcast_WebRTCSetAnswer_Notification::~CBroadcast_WebRTCSetAnswer_Notification() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_WebRTCSetAnswer_Notification)
  SharedDtor();
}

void CBroadcast_WebRTCSetAnswer_Notification::SharedDtor() {
  answer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_WebRTCSetAnswer_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBroadcast_WebRTCSetAnswer_Notification& CBroadcast_WebRTCSetAnswer_Notification::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CBroadcast_WebRTCSetAnswer_Notification_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CBroadcast_WebRTCSetAnswer_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_WebRTCSetAnswer_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    answer_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&broadcast_session_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&webrtc_session_id_) -
        reinterpret_cast<char*>(&broadcast_session_id_)) + sizeof(webrtc_session_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CBroadcast_WebRTCSetAnswer_Notification::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CBroadcast_WebRTCSetAnswer_Notification*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 broadcast_session_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_broadcast_session_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed64 webrtc_session_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_webrtc_session_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional string answer = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CBroadcast_WebRTCSetAnswer_Notification.answer");
        object = msg->mutable_answer();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CBroadcast_WebRTCSetAnswer_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_WebRTCSetAnswer_Notification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 broadcast_session_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_broadcast_session_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &broadcast_session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 webrtc_session_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_webrtc_session_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &webrtc_session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string answer = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_answer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->answer().data(), static_cast<int>(this->answer().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CBroadcast_WebRTCSetAnswer_Notification.answer");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_WebRTCSetAnswer_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_WebRTCSetAnswer_Notification)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CBroadcast_WebRTCSetAnswer_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_WebRTCSetAnswer_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_session_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->broadcast_session_id(), output);
  }

  // optional fixed64 webrtc_session_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->webrtc_session_id(), output);
  }

  // optional string answer = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->answer().data(), static_cast<int>(this->answer().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_WebRTCSetAnswer_Notification.answer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->answer(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_WebRTCSetAnswer_Notification)
}

::google::protobuf::uint8* CBroadcast_WebRTCSetAnswer_Notification::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_WebRTCSetAnswer_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_session_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->broadcast_session_id(), target);
  }

  // optional fixed64 webrtc_session_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->webrtc_session_id(), target);
  }

  // optional string answer = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->answer().data(), static_cast<int>(this->answer().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_WebRTCSetAnswer_Notification.answer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->answer(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_WebRTCSetAnswer_Notification)
  return target;
}

size_t CBroadcast_WebRTCSetAnswer_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_WebRTCSetAnswer_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string answer = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->answer());
    }

    // optional fixed64 broadcast_session_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 webrtc_session_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_WebRTCSetAnswer_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_WebRTCSetAnswer_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_WebRTCSetAnswer_Notification* source =
      ::google::protobuf::DynamicCastToGenerated<CBroadcast_WebRTCSetAnswer_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_WebRTCSetAnswer_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_WebRTCSetAnswer_Notification)
    MergeFrom(*source);
  }
}

void CBroadcast_WebRTCSetAnswer_Notification::MergeFrom(const CBroadcast_WebRTCSetAnswer_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_WebRTCSetAnswer_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      answer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.answer_);
    }
    if (cached_has_bits & 0x00000002u) {
      broadcast_session_id_ = from.broadcast_session_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      webrtc_session_id_ = from.webrtc_session_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_WebRTCSetAnswer_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_WebRTCSetAnswer_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_WebRTCSetAnswer_Notification::CopyFrom(const CBroadcast_WebRTCSetAnswer_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_WebRTCSetAnswer_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_WebRTCSetAnswer_Notification::IsInitialized() const {
  return true;
}

void CBroadcast_WebRTCSetAnswer_Notification::Swap(CBroadcast_WebRTCSetAnswer_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_WebRTCSetAnswer_Notification::InternalSwap(CBroadcast_WebRTCSetAnswer_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  answer_.Swap(&other->answer_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(broadcast_session_id_, other->broadcast_session_id_);
  swap(webrtc_session_id_, other->webrtc_session_id_);
}

::google::protobuf::Metadata CBroadcast_WebRTCSetAnswer_Notification::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_WebRTCAddViewerCandidate_Notification::InitAsDefaultInstance() {
  ::proto::steam::_CBroadcast_WebRTCAddViewerCandidate_Notification_default_instance_._instance.get_mutable()->candidate_ = const_cast< ::proto::steam::CBroadcast_WebRTC_Candidate*>(
      ::proto::steam::CBroadcast_WebRTC_Candidate::internal_default_instance());
}
class CBroadcast_WebRTCAddViewerCandidate_Notification::HasBitSetters {
 public:
  static void set_has_broadcast_session_id(CBroadcast_WebRTCAddViewerCandidate_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_webrtc_session_id(CBroadcast_WebRTCAddViewerCandidate_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static const ::proto::steam::CBroadcast_WebRTC_Candidate& candidate(const CBroadcast_WebRTCAddViewerCandidate_Notification* msg);
  static void set_has_candidate(CBroadcast_WebRTCAddViewerCandidate_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::proto::steam::CBroadcast_WebRTC_Candidate&
CBroadcast_WebRTCAddViewerCandidate_Notification::HasBitSetters::candidate(const CBroadcast_WebRTCAddViewerCandidate_Notification* msg) {
  return *msg->candidate_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_WebRTCAddViewerCandidate_Notification::kBroadcastSessionIdFieldNumber;
const int CBroadcast_WebRTCAddViewerCandidate_Notification::kWebrtcSessionIdFieldNumber;
const int CBroadcast_WebRTCAddViewerCandidate_Notification::kCandidateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_WebRTCAddViewerCandidate_Notification::CBroadcast_WebRTCAddViewerCandidate_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Notification)
}
CBroadcast_WebRTCAddViewerCandidate_Notification::CBroadcast_WebRTCAddViewerCandidate_Notification(const CBroadcast_WebRTCAddViewerCandidate_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_candidate()) {
    candidate_ = new ::proto::steam::CBroadcast_WebRTC_Candidate(*from.candidate_);
  } else {
    candidate_ = nullptr;
  }
  ::memcpy(&broadcast_session_id_, &from.broadcast_session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&webrtc_session_id_) -
    reinterpret_cast<char*>(&broadcast_session_id_)) + sizeof(webrtc_session_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Notification)
}

void CBroadcast_WebRTCAddViewerCandidate_Notification::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CBroadcast_WebRTCAddViewerCandidate_Notification_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  ::memset(&candidate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&webrtc_session_id_) -
      reinterpret_cast<char*>(&candidate_)) + sizeof(webrtc_session_id_));
}

CBroadcast_WebRTCAddViewerCandidate_Notification::~CBroadcast_WebRTCAddViewerCandidate_Notification() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Notification)
  SharedDtor();
}

void CBroadcast_WebRTCAddViewerCandidate_Notification::SharedDtor() {
  if (this != internal_default_instance()) delete candidate_;
}

void CBroadcast_WebRTCAddViewerCandidate_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBroadcast_WebRTCAddViewerCandidate_Notification& CBroadcast_WebRTCAddViewerCandidate_Notification::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CBroadcast_WebRTCAddViewerCandidate_Notification_steammessages_5fbroadcast_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CBroadcast_WebRTCAddViewerCandidate_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(candidate_ != nullptr);
    candidate_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&broadcast_session_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&webrtc_session_id_) -
        reinterpret_cast<char*>(&broadcast_session_id_)) + sizeof(webrtc_session_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CBroadcast_WebRTCAddViewerCandidate_Notification::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CBroadcast_WebRTCAddViewerCandidate_Notification*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 broadcast_session_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_broadcast_session_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed64 webrtc_session_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_webrtc_session_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional .proto.steam.CBroadcast_WebRTC_Candidate candidate = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::steam::CBroadcast_WebRTC_Candidate::_InternalParse;
        object = msg->mutable_candidate();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CBroadcast_WebRTCAddViewerCandidate_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Notification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 broadcast_session_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_broadcast_session_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &broadcast_session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 webrtc_session_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_webrtc_session_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &webrtc_session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CBroadcast_WebRTC_Candidate candidate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_candidate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Notification)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CBroadcast_WebRTCAddViewerCandidate_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_session_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->broadcast_session_id(), output);
  }

  // optional fixed64 webrtc_session_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->webrtc_session_id(), output);
  }

  // optional .proto.steam.CBroadcast_WebRTC_Candidate candidate = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::candidate(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Notification)
}

::google::protobuf::uint8* CBroadcast_WebRTCAddViewerCandidate_Notification::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_session_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->broadcast_session_id(), target);
  }

  // optional fixed64 webrtc_session_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->webrtc_session_id(), target);
  }

  // optional .proto.steam.CBroadcast_WebRTC_Candidate candidate = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::candidate(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Notification)
  return target;
}

size_t CBroadcast_WebRTCAddViewerCandidate_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .proto.steam.CBroadcast_WebRTC_Candidate candidate = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *candidate_);
    }

    // optional fixed64 broadcast_session_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 webrtc_session_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_WebRTCAddViewerCandidate_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_WebRTCAddViewerCandidate_Notification* source =
      ::google::protobuf::DynamicCastToGenerated<CBroadcast_WebRTCAddViewerCandidate_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Notification)
    MergeFrom(*source);
  }
}

void CBroadcast_WebRTCAddViewerCandidate_Notification::MergeFrom(const CBroadcast_WebRTCAddViewerCandidate_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_candidate()->::proto::steam::CBroadcast_WebRTC_Candidate::MergeFrom(from.candidate());
    }
    if (cached_has_bits & 0x00000002u) {
      broadcast_session_id_ = from.broadcast_session_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      webrtc_session_id_ = from.webrtc_session_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_WebRTCAddViewerCandidate_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_WebRTCAddViewerCandidate_Notification::CopyFrom(const CBroadcast_WebRTCAddViewerCandidate_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_WebRTCAddViewerCandidate_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_WebRTCAddViewerCandidate_Notification::IsInitialized() const {
  return true;
}

void CBroadcast_WebRTCAddViewerCandidate_Notification::Swap(CBroadcast_WebRTCAddViewerCandidate_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_WebRTCAddViewerCandidate_Notification::InternalSwap(CBroadcast_WebRTCAddViewerCandidate_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(candidate_, other->candidate_);
  swap(broadcast_session_id_, other->broadcast_session_id_);
  swap(webrtc_session_id_, other->webrtc_session_id_);
}

::google::protobuf::Metadata CBroadcast_WebRTCAddViewerCandidate_Notification::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

Broadcast::~Broadcast() {}

const ::google::protobuf::ServiceDescriptor* Broadcast::descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5fbroadcast_2esteamclient_2eproto[0];
}

const ::google::protobuf::ServiceDescriptor* Broadcast::GetDescriptor() {
  return descriptor();
}

void Broadcast::BeginBroadcastSession(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CBroadcast_BeginBroadcastSession_Request*,
                         ::proto::steam::CBroadcast_BeginBroadcastSession_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method BeginBroadcastSession() not implemented.");
  done->Run();
}

void Broadcast::EndBroadcastSession(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CBroadcast_EndBroadcastSession_Request*,
                         ::proto::steam::CBroadcast_EndBroadcastSession_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method EndBroadcastSession() not implemented.");
  done->Run();
}

void Broadcast::StartBroadcastUpload(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CBroadcast_StartBroadcastUpload_Request*,
                         ::proto::steam::CBroadcast_StartBroadcastUpload_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method StartBroadcastUpload() not implemented.");
  done->Run();
}

void Broadcast::NotifyBroadcastUploadStop(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CBroadcast_NotifyBroadcastUploadStop_Notification*,
                         ::proto::steam::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyBroadcastUploadStop() not implemented.");
  done->Run();
}

void Broadcast::WatchBroadcast(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CBroadcast_WatchBroadcast_Request*,
                         ::proto::steam::CBroadcast_WatchBroadcast_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method WatchBroadcast() not implemented.");
  done->Run();
}

void Broadcast::HeartbeatBroadcast(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CBroadcast_HeartbeatBroadcast_Notification*,
                         ::proto::steam::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method HeartbeatBroadcast() not implemented.");
  done->Run();
}

void Broadcast::StopWatchingBroadcast(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CBroadcast_StopWatchingBroadcast_Notification*,
                         ::proto::steam::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method StopWatchingBroadcast() not implemented.");
  done->Run();
}

void Broadcast::GetBroadcastStatus(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CBroadcast_GetBroadcastStatus_Request*,
                         ::proto::steam::CBroadcast_GetBroadcastStatus_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetBroadcastStatus() not implemented.");
  done->Run();
}

void Broadcast::GetBroadcastThumbnail(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CBroadcast_GetBroadcastThumbnail_Request*,
                         ::proto::steam::CBroadcast_GetBroadcastThumbnail_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetBroadcastThumbnail() not implemented.");
  done->Run();
}

void Broadcast::InviteToBroadcast(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CBroadcast_InviteToBroadcast_Request*,
                         ::proto::steam::CBroadcast_InviteToBroadcast_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method InviteToBroadcast() not implemented.");
  done->Run();
}

void Broadcast::SendBroadcastStateToServer(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CBroadcast_SendBroadcastStateToServer_Request*,
                         ::proto::steam::CBroadcast_SendBroadcastStateToServer_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SendBroadcastStateToServer() not implemented.");
  done->Run();
}

void Broadcast::NotifyBroadcastSessionHeartbeat(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CBroadcast_NotifyBroadcastSessionHeartbeat_Notification*,
                         ::proto::steam::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyBroadcastSessionHeartbeat() not implemented.");
  done->Run();
}

void Broadcast::GetBroadcastChatInfo(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CBroadcast_GetBroadcastChatInfo_Request*,
                         ::proto::steam::CBroadcast_GetBroadcastChatInfo_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetBroadcastChatInfo() not implemented.");
  done->Run();
}

void Broadcast::PostChatMessage(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CBroadcast_PostChatMessage_Request*,
                         ::proto::steam::CBroadcast_PostChatMessage_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method PostChatMessage() not implemented.");
  done->Run();
}

void Broadcast::MuteBroadcastChatUser(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CBroadcast_MuteBroadcastChatUser_Request*,
                         ::proto::steam::CBroadcast_MuteBroadcastChatUser_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method MuteBroadcastChatUser() not implemented.");
  done->Run();
}

void Broadcast::RemoveUserChatText(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CBroadcast_RemoveUserChatText_Request*,
                         ::proto::steam::CBroadcast_RemoveUserChatText_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RemoveUserChatText() not implemented.");
  done->Run();
}

void Broadcast::GetBroadcastChatUserNames(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CBroadcast_GetBroadcastChatUserNames_Request*,
                         ::proto::steam::CBroadcast_GetBroadcastChatUserNames_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetBroadcastChatUserNames() not implemented.");
  done->Run();
}

void Broadcast::SetRTMPInfo(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CBroadcast_SetRTMPInfo_Request*,
                         ::proto::steam::CBroadcast_SetRTMPInfo_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetRTMPInfo() not implemented.");
  done->Run();
}

void Broadcast::GetRTMPInfo(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CBroadcast_GetRTMPInfo_Request*,
                         ::proto::steam::CBroadcast_GetRTMPInfo_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetRTMPInfo() not implemented.");
  done->Run();
}

void Broadcast::NotifyWebRTCHaveTURNServer(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CBroadcast_WebRTCHaveTURNServer_Notification*,
                         ::proto::steam::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyWebRTCHaveTURNServer() not implemented.");
  done->Run();
}

void Broadcast::WebRTCStartResult(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CBroadcast_WebRTCStartResult_Request*,
                         ::proto::steam::CBroadcast_WebRTCStartResult_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method WebRTCStartResult() not implemented.");
  done->Run();
}

void Broadcast::WebRTCStopped(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CBroadcast_WebRTCStopped_Request*,
                         ::proto::steam::CBroadcast_WebRTCStopped_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method WebRTCStopped() not implemented.");
  done->Run();
}

void Broadcast::WebRTCSetAnswer(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CBroadcast_WebRTCSetAnswer_Request*,
                         ::proto::steam::CBroadcast_WebRTCSetAnswer_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method WebRTCSetAnswer() not implemented.");
  done->Run();
}

void Broadcast::WebRTCLookupTURNServer(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CBroadcast_WebRTCLookupTURNServer_Request*,
                         ::proto::steam::CBroadcast_WebRTCLookupTURNServer_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method WebRTCLookupTURNServer() not implemented.");
  done->Run();
}

void Broadcast::WebRTCAddHostCandidate(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CBroadcast_WebRTCAddHostCandidate_Request*,
                         ::proto::steam::CBroadcast_WebRTCAddHostCandidate_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method WebRTCAddHostCandidate() not implemented.");
  done->Run();
}

void Broadcast::WebRTCAddViewerCandidate(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CBroadcast_WebRTCAddViewerCandidate_Request*,
                         ::proto::steam::CBroadcast_WebRTCAddViewerCandidate_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method WebRTCAddViewerCandidate() not implemented.");
  done->Run();
}

void Broadcast::WebRTCGetHostCandidates(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CBroadcast_WebRTCGetHostCandidates_Request*,
                         ::proto::steam::CBroadcast_WebRTCGetHostCandidates_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method WebRTCGetHostCandidates() not implemented.");
  done->Run();
}

void Broadcast::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5fbroadcast_2esteamclient_2eproto[0]);
  switch(method->index()) {
    case 0:
      BeginBroadcastSession(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CBroadcast_BeginBroadcastSession_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CBroadcast_BeginBroadcastSession_Response*>(response),
             done);
      break;
    case 1:
      EndBroadcastSession(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CBroadcast_EndBroadcastSession_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CBroadcast_EndBroadcastSession_Response*>(response),
             done);
      break;
    case 2:
      StartBroadcastUpload(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CBroadcast_StartBroadcastUpload_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CBroadcast_StartBroadcastUpload_Response*>(response),
             done);
      break;
    case 3:
      NotifyBroadcastUploadStop(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CBroadcast_NotifyBroadcastUploadStop_Notification*>(request),
             ::google::protobuf::down_cast< ::proto::steam::NoResponse*>(response),
             done);
      break;
    case 4:
      WatchBroadcast(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CBroadcast_WatchBroadcast_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CBroadcast_WatchBroadcast_Response*>(response),
             done);
      break;
    case 5:
      HeartbeatBroadcast(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CBroadcast_HeartbeatBroadcast_Notification*>(request),
             ::google::protobuf::down_cast< ::proto::steam::NoResponse*>(response),
             done);
      break;
    case 6:
      StopWatchingBroadcast(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CBroadcast_StopWatchingBroadcast_Notification*>(request),
             ::google::protobuf::down_cast< ::proto::steam::NoResponse*>(response),
             done);
      break;
    case 7:
      GetBroadcastStatus(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CBroadcast_GetBroadcastStatus_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CBroadcast_GetBroadcastStatus_Response*>(response),
             done);
      break;
    case 8:
      GetBroadcastThumbnail(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CBroadcast_GetBroadcastThumbnail_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CBroadcast_GetBroadcastThumbnail_Response*>(response),
             done);
      break;
    case 9:
      InviteToBroadcast(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CBroadcast_InviteToBroadcast_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CBroadcast_InviteToBroadcast_Response*>(response),
             done);
      break;
    case 10:
      SendBroadcastStateToServer(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CBroadcast_SendBroadcastStateToServer_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CBroadcast_SendBroadcastStateToServer_Response*>(response),
             done);
      break;
    case 11:
      NotifyBroadcastSessionHeartbeat(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CBroadcast_NotifyBroadcastSessionHeartbeat_Notification*>(request),
             ::google::protobuf::down_cast< ::proto::steam::NoResponse*>(response),
             done);
      break;
    case 12:
      GetBroadcastChatInfo(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CBroadcast_GetBroadcastChatInfo_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CBroadcast_GetBroadcastChatInfo_Response*>(response),
             done);
      break;
    case 13:
      PostChatMessage(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CBroadcast_PostChatMessage_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CBroadcast_PostChatMessage_Response*>(response),
             done);
      break;
    case 14:
      MuteBroadcastChatUser(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CBroadcast_MuteBroadcastChatUser_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CBroadcast_MuteBroadcastChatUser_Response*>(response),
             done);
      break;
    case 15:
      RemoveUserChatText(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CBroadcast_RemoveUserChatText_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CBroadcast_RemoveUserChatText_Response*>(response),
             done);
      break;
    case 16:
      GetBroadcastChatUserNames(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CBroadcast_GetBroadcastChatUserNames_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CBroadcast_GetBroadcastChatUserNames_Response*>(response),
             done);
      break;
    case 17:
      SetRTMPInfo(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CBroadcast_SetRTMPInfo_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CBroadcast_SetRTMPInfo_Response*>(response),
             done);
      break;
    case 18:
      GetRTMPInfo(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CBroadcast_GetRTMPInfo_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CBroadcast_GetRTMPInfo_Response*>(response),
             done);
      break;
    case 19:
      NotifyWebRTCHaveTURNServer(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CBroadcast_WebRTCHaveTURNServer_Notification*>(request),
             ::google::protobuf::down_cast< ::proto::steam::NoResponse*>(response),
             done);
      break;
    case 20:
      WebRTCStartResult(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CBroadcast_WebRTCStartResult_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CBroadcast_WebRTCStartResult_Response*>(response),
             done);
      break;
    case 21:
      WebRTCStopped(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CBroadcast_WebRTCStopped_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CBroadcast_WebRTCStopped_Response*>(response),
             done);
      break;
    case 22:
      WebRTCSetAnswer(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CBroadcast_WebRTCSetAnswer_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CBroadcast_WebRTCSetAnswer_Response*>(response),
             done);
      break;
    case 23:
      WebRTCLookupTURNServer(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CBroadcast_WebRTCLookupTURNServer_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CBroadcast_WebRTCLookupTURNServer_Response*>(response),
             done);
      break;
    case 24:
      WebRTCAddHostCandidate(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CBroadcast_WebRTCAddHostCandidate_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CBroadcast_WebRTCAddHostCandidate_Response*>(response),
             done);
      break;
    case 25:
      WebRTCAddViewerCandidate(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CBroadcast_WebRTCAddViewerCandidate_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CBroadcast_WebRTCAddViewerCandidate_Response*>(response),
             done);
      break;
    case 26:
      WebRTCGetHostCandidates(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CBroadcast_WebRTCGetHostCandidates_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CBroadcast_WebRTCGetHostCandidates_Response*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& Broadcast::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CBroadcast_BeginBroadcastSession_Request::default_instance();
    case 1:
      return ::proto::steam::CBroadcast_EndBroadcastSession_Request::default_instance();
    case 2:
      return ::proto::steam::CBroadcast_StartBroadcastUpload_Request::default_instance();
    case 3:
      return ::proto::steam::CBroadcast_NotifyBroadcastUploadStop_Notification::default_instance();
    case 4:
      return ::proto::steam::CBroadcast_WatchBroadcast_Request::default_instance();
    case 5:
      return ::proto::steam::CBroadcast_HeartbeatBroadcast_Notification::default_instance();
    case 6:
      return ::proto::steam::CBroadcast_StopWatchingBroadcast_Notification::default_instance();
    case 7:
      return ::proto::steam::CBroadcast_GetBroadcastStatus_Request::default_instance();
    case 8:
      return ::proto::steam::CBroadcast_GetBroadcastThumbnail_Request::default_instance();
    case 9:
      return ::proto::steam::CBroadcast_InviteToBroadcast_Request::default_instance();
    case 10:
      return ::proto::steam::CBroadcast_SendBroadcastStateToServer_Request::default_instance();
    case 11:
      return ::proto::steam::CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::default_instance();
    case 12:
      return ::proto::steam::CBroadcast_GetBroadcastChatInfo_Request::default_instance();
    case 13:
      return ::proto::steam::CBroadcast_PostChatMessage_Request::default_instance();
    case 14:
      return ::proto::steam::CBroadcast_MuteBroadcastChatUser_Request::default_instance();
    case 15:
      return ::proto::steam::CBroadcast_RemoveUserChatText_Request::default_instance();
    case 16:
      return ::proto::steam::CBroadcast_GetBroadcastChatUserNames_Request::default_instance();
    case 17:
      return ::proto::steam::CBroadcast_SetRTMPInfo_Request::default_instance();
    case 18:
      return ::proto::steam::CBroadcast_GetRTMPInfo_Request::default_instance();
    case 19:
      return ::proto::steam::CBroadcast_WebRTCHaveTURNServer_Notification::default_instance();
    case 20:
      return ::proto::steam::CBroadcast_WebRTCStartResult_Request::default_instance();
    case 21:
      return ::proto::steam::CBroadcast_WebRTCStopped_Request::default_instance();
    case 22:
      return ::proto::steam::CBroadcast_WebRTCSetAnswer_Request::default_instance();
    case 23:
      return ::proto::steam::CBroadcast_WebRTCLookupTURNServer_Request::default_instance();
    case 24:
      return ::proto::steam::CBroadcast_WebRTCAddHostCandidate_Request::default_instance();
    case 25:
      return ::proto::steam::CBroadcast_WebRTCAddViewerCandidate_Request::default_instance();
    case 26:
      return ::proto::steam::CBroadcast_WebRTCGetHostCandidates_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& Broadcast::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CBroadcast_BeginBroadcastSession_Response::default_instance();
    case 1:
      return ::proto::steam::CBroadcast_EndBroadcastSession_Response::default_instance();
    case 2:
      return ::proto::steam::CBroadcast_StartBroadcastUpload_Response::default_instance();
    case 3:
      return ::proto::steam::NoResponse::default_instance();
    case 4:
      return ::proto::steam::CBroadcast_WatchBroadcast_Response::default_instance();
    case 5:
      return ::proto::steam::NoResponse::default_instance();
    case 6:
      return ::proto::steam::NoResponse::default_instance();
    case 7:
      return ::proto::steam::CBroadcast_GetBroadcastStatus_Response::default_instance();
    case 8:
      return ::proto::steam::CBroadcast_GetBroadcastThumbnail_Response::default_instance();
    case 9:
      return ::proto::steam::CBroadcast_InviteToBroadcast_Response::default_instance();
    case 10:
      return ::proto::steam::CBroadcast_SendBroadcastStateToServer_Response::default_instance();
    case 11:
      return ::proto::steam::NoResponse::default_instance();
    case 12:
      return ::proto::steam::CBroadcast_GetBroadcastChatInfo_Response::default_instance();
    case 13:
      return ::proto::steam::CBroadcast_PostChatMessage_Response::default_instance();
    case 14:
      return ::proto::steam::CBroadcast_MuteBroadcastChatUser_Response::default_instance();
    case 15:
      return ::proto::steam::CBroadcast_RemoveUserChatText_Response::default_instance();
    case 16:
      return ::proto::steam::CBroadcast_GetBroadcastChatUserNames_Response::default_instance();
    case 17:
      return ::proto::steam::CBroadcast_SetRTMPInfo_Response::default_instance();
    case 18:
      return ::proto::steam::CBroadcast_GetRTMPInfo_Response::default_instance();
    case 19:
      return ::proto::steam::NoResponse::default_instance();
    case 20:
      return ::proto::steam::CBroadcast_WebRTCStartResult_Response::default_instance();
    case 21:
      return ::proto::steam::CBroadcast_WebRTCStopped_Response::default_instance();
    case 22:
      return ::proto::steam::CBroadcast_WebRTCSetAnswer_Response::default_instance();
    case 23:
      return ::proto::steam::CBroadcast_WebRTCLookupTURNServer_Response::default_instance();
    case 24:
      return ::proto::steam::CBroadcast_WebRTCAddHostCandidate_Response::default_instance();
    case 25:
      return ::proto::steam::CBroadcast_WebRTCAddViewerCandidate_Response::default_instance();
    case 26:
      return ::proto::steam::CBroadcast_WebRTCGetHostCandidates_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

Broadcast_Stub::Broadcast_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
Broadcast_Stub::Broadcast_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
Broadcast_Stub::~Broadcast_Stub() {
  if (owns_channel_) delete channel_;
}

void Broadcast_Stub::BeginBroadcastSession(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CBroadcast_BeginBroadcastSession_Request* request,
                              ::proto::steam::CBroadcast_BeginBroadcastSession_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void Broadcast_Stub::EndBroadcastSession(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CBroadcast_EndBroadcastSession_Request* request,
                              ::proto::steam::CBroadcast_EndBroadcastSession_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void Broadcast_Stub::StartBroadcastUpload(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CBroadcast_StartBroadcastUpload_Request* request,
                              ::proto::steam::CBroadcast_StartBroadcastUpload_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void Broadcast_Stub::NotifyBroadcastUploadStop(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CBroadcast_NotifyBroadcastUploadStop_Notification* request,
                              ::proto::steam::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void Broadcast_Stub::WatchBroadcast(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CBroadcast_WatchBroadcast_Request* request,
                              ::proto::steam::CBroadcast_WatchBroadcast_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void Broadcast_Stub::HeartbeatBroadcast(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CBroadcast_HeartbeatBroadcast_Notification* request,
                              ::proto::steam::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void Broadcast_Stub::StopWatchingBroadcast(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CBroadcast_StopWatchingBroadcast_Notification* request,
                              ::proto::steam::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void Broadcast_Stub::GetBroadcastStatus(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CBroadcast_GetBroadcastStatus_Request* request,
                              ::proto::steam::CBroadcast_GetBroadcastStatus_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}
void Broadcast_Stub::GetBroadcastThumbnail(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CBroadcast_GetBroadcastThumbnail_Request* request,
                              ::proto::steam::CBroadcast_GetBroadcastThumbnail_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(8),
                       controller, request, response, done);
}
void Broadcast_Stub::InviteToBroadcast(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CBroadcast_InviteToBroadcast_Request* request,
                              ::proto::steam::CBroadcast_InviteToBroadcast_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(9),
                       controller, request, response, done);
}
void Broadcast_Stub::SendBroadcastStateToServer(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CBroadcast_SendBroadcastStateToServer_Request* request,
                              ::proto::steam::CBroadcast_SendBroadcastStateToServer_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(10),
                       controller, request, response, done);
}
void Broadcast_Stub::NotifyBroadcastSessionHeartbeat(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CBroadcast_NotifyBroadcastSessionHeartbeat_Notification* request,
                              ::proto::steam::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(11),
                       controller, request, response, done);
}
void Broadcast_Stub::GetBroadcastChatInfo(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CBroadcast_GetBroadcastChatInfo_Request* request,
                              ::proto::steam::CBroadcast_GetBroadcastChatInfo_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(12),
                       controller, request, response, done);
}
void Broadcast_Stub::PostChatMessage(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CBroadcast_PostChatMessage_Request* request,
                              ::proto::steam::CBroadcast_PostChatMessage_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(13),
                       controller, request, response, done);
}
void Broadcast_Stub::MuteBroadcastChatUser(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CBroadcast_MuteBroadcastChatUser_Request* request,
                              ::proto::steam::CBroadcast_MuteBroadcastChatUser_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(14),
                       controller, request, response, done);
}
void Broadcast_Stub::RemoveUserChatText(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CBroadcast_RemoveUserChatText_Request* request,
                              ::proto::steam::CBroadcast_RemoveUserChatText_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(15),
                       controller, request, response, done);
}
void Broadcast_Stub::GetBroadcastChatUserNames(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CBroadcast_GetBroadcastChatUserNames_Request* request,
                              ::proto::steam::CBroadcast_GetBroadcastChatUserNames_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(16),
                       controller, request, response, done);
}
void Broadcast_Stub::SetRTMPInfo(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CBroadcast_SetRTMPInfo_Request* request,
                              ::proto::steam::CBroadcast_SetRTMPInfo_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(17),
                       controller, request, response, done);
}
void Broadcast_Stub::GetRTMPInfo(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CBroadcast_GetRTMPInfo_Request* request,
                              ::proto::steam::CBroadcast_GetRTMPInfo_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(18),
                       controller, request, response, done);
}
void Broadcast_Stub::NotifyWebRTCHaveTURNServer(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CBroadcast_WebRTCHaveTURNServer_Notification* request,
                              ::proto::steam::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(19),
                       controller, request, response, done);
}
void Broadcast_Stub::WebRTCStartResult(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CBroadcast_WebRTCStartResult_Request* request,
                              ::proto::steam::CBroadcast_WebRTCStartResult_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(20),
                       controller, request, response, done);
}
void Broadcast_Stub::WebRTCStopped(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CBroadcast_WebRTCStopped_Request* request,
                              ::proto::steam::CBroadcast_WebRTCStopped_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(21),
                       controller, request, response, done);
}
void Broadcast_Stub::WebRTCSetAnswer(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CBroadcast_WebRTCSetAnswer_Request* request,
                              ::proto::steam::CBroadcast_WebRTCSetAnswer_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(22),
                       controller, request, response, done);
}
void Broadcast_Stub::WebRTCLookupTURNServer(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CBroadcast_WebRTCLookupTURNServer_Request* request,
                              ::proto::steam::CBroadcast_WebRTCLookupTURNServer_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(23),
                       controller, request, response, done);
}
void Broadcast_Stub::WebRTCAddHostCandidate(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CBroadcast_WebRTCAddHostCandidate_Request* request,
                              ::proto::steam::CBroadcast_WebRTCAddHostCandidate_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(24),
                       controller, request, response, done);
}
void Broadcast_Stub::WebRTCAddViewerCandidate(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CBroadcast_WebRTCAddViewerCandidate_Request* request,
                              ::proto::steam::CBroadcast_WebRTCAddViewerCandidate_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(25),
                       controller, request, response, done);
}
void Broadcast_Stub::WebRTCGetHostCandidates(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CBroadcast_WebRTCGetHostCandidates_Request* request,
                              ::proto::steam::CBroadcast_WebRTCGetHostCandidates_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(26),
                       controller, request, response, done);
}
// ===================================================================

BroadcastClient::~BroadcastClient() {}

const ::google::protobuf::ServiceDescriptor* BroadcastClient::descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5fbroadcast_2esteamclient_2eproto[1];
}

const ::google::protobuf::ServiceDescriptor* BroadcastClient::GetDescriptor() {
  return descriptor();
}

void BroadcastClient::NotifyBroadcastViewerState(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CBroadcast_BroadcastViewerState_Notification*,
                         ::proto::steam::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyBroadcastViewerState() not implemented.");
  done->Run();
}

void BroadcastClient::NotifyWaitingBroadcastViewer(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CBroadcast_WaitingBroadcastViewer_Notification*,
                         ::proto::steam::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyWaitingBroadcastViewer() not implemented.");
  done->Run();
}

void BroadcastClient::NotifyStopBroadcastUpload(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CBroadcast_StopBroadcastUpload_Notification*,
                         ::proto::steam::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyStopBroadcastUpload() not implemented.");
  done->Run();
}

void BroadcastClient::NotifySessionClosed(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CBroadcast_SessionClosed_Notification*,
                         ::proto::steam::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifySessionClosed() not implemented.");
  done->Run();
}

void BroadcastClient::NotifyViewerBroadcastInvite(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CBroadcast_ViewerBroadcastInvite_Notification*,
                         ::proto::steam::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyViewerBroadcastInvite() not implemented.");
  done->Run();
}

void BroadcastClient::NotifyBroadcastStatus(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CBroadcast_BroadcastStatus_Notification*,
                         ::proto::steam::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyBroadcastStatus() not implemented.");
  done->Run();
}

void BroadcastClient::SendThumbnailToRelay(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CBroadcast_SendThumbnailToRelay_Notification*,
                         ::proto::steam::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SendThumbnailToRelay() not implemented.");
  done->Run();
}

void BroadcastClient::NotifyWebRTCNeedTURNServer(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CBroadcast_WebRTCNeedTURNServer_Notification*,
                         ::proto::steam::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyWebRTCNeedTURNServer() not implemented.");
  done->Run();
}

void BroadcastClient::NotifyWebRTCStart(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CBroadcast_WebRTCStart_Notification*,
                         ::proto::steam::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyWebRTCStart() not implemented.");
  done->Run();
}

void BroadcastClient::NotifyWebRTCSetAnswer(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CBroadcast_WebRTCSetAnswer_Notification*,
                         ::proto::steam::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyWebRTCSetAnswer() not implemented.");
  done->Run();
}

void BroadcastClient::NotifyWebRTCAddViewerCandidate(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CBroadcast_WebRTCAddViewerCandidate_Notification*,
                         ::proto::steam::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyWebRTCAddViewerCandidate() not implemented.");
  done->Run();
}

void BroadcastClient::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5fbroadcast_2esteamclient_2eproto[1]);
  switch(method->index()) {
    case 0:
      NotifyBroadcastViewerState(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CBroadcast_BroadcastViewerState_Notification*>(request),
             ::google::protobuf::down_cast< ::proto::steam::NoResponse*>(response),
             done);
      break;
    case 1:
      NotifyWaitingBroadcastViewer(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CBroadcast_WaitingBroadcastViewer_Notification*>(request),
             ::google::protobuf::down_cast< ::proto::steam::NoResponse*>(response),
             done);
      break;
    case 2:
      NotifyStopBroadcastUpload(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CBroadcast_StopBroadcastUpload_Notification*>(request),
             ::google::protobuf::down_cast< ::proto::steam::NoResponse*>(response),
             done);
      break;
    case 3:
      NotifySessionClosed(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CBroadcast_SessionClosed_Notification*>(request),
             ::google::protobuf::down_cast< ::proto::steam::NoResponse*>(response),
             done);
      break;
    case 4:
      NotifyViewerBroadcastInvite(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CBroadcast_ViewerBroadcastInvite_Notification*>(request),
             ::google::protobuf::down_cast< ::proto::steam::NoResponse*>(response),
             done);
      break;
    case 5:
      NotifyBroadcastStatus(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CBroadcast_BroadcastStatus_Notification*>(request),
             ::google::protobuf::down_cast< ::proto::steam::NoResponse*>(response),
             done);
      break;
    case 6:
      SendThumbnailToRelay(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CBroadcast_SendThumbnailToRelay_Notification*>(request),
             ::google::protobuf::down_cast< ::proto::steam::NoResponse*>(response),
             done);
      break;
    case 7:
      NotifyWebRTCNeedTURNServer(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CBroadcast_WebRTCNeedTURNServer_Notification*>(request),
             ::google::protobuf::down_cast< ::proto::steam::NoResponse*>(response),
             done);
      break;
    case 8:
      NotifyWebRTCStart(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CBroadcast_WebRTCStart_Notification*>(request),
             ::google::protobuf::down_cast< ::proto::steam::NoResponse*>(response),
             done);
      break;
    case 9:
      NotifyWebRTCSetAnswer(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CBroadcast_WebRTCSetAnswer_Notification*>(request),
             ::google::protobuf::down_cast< ::proto::steam::NoResponse*>(response),
             done);
      break;
    case 10:
      NotifyWebRTCAddViewerCandidate(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CBroadcast_WebRTCAddViewerCandidate_Notification*>(request),
             ::google::protobuf::down_cast< ::proto::steam::NoResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& BroadcastClient::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CBroadcast_BroadcastViewerState_Notification::default_instance();
    case 1:
      return ::proto::steam::CBroadcast_WaitingBroadcastViewer_Notification::default_instance();
    case 2:
      return ::proto::steam::CBroadcast_StopBroadcastUpload_Notification::default_instance();
    case 3:
      return ::proto::steam::CBroadcast_SessionClosed_Notification::default_instance();
    case 4:
      return ::proto::steam::CBroadcast_ViewerBroadcastInvite_Notification::default_instance();
    case 5:
      return ::proto::steam::CBroadcast_BroadcastStatus_Notification::default_instance();
    case 6:
      return ::proto::steam::CBroadcast_SendThumbnailToRelay_Notification::default_instance();
    case 7:
      return ::proto::steam::CBroadcast_WebRTCNeedTURNServer_Notification::default_instance();
    case 8:
      return ::proto::steam::CBroadcast_WebRTCStart_Notification::default_instance();
    case 9:
      return ::proto::steam::CBroadcast_WebRTCSetAnswer_Notification::default_instance();
    case 10:
      return ::proto::steam::CBroadcast_WebRTCAddViewerCandidate_Notification::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& BroadcastClient::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::NoResponse::default_instance();
    case 1:
      return ::proto::steam::NoResponse::default_instance();
    case 2:
      return ::proto::steam::NoResponse::default_instance();
    case 3:
      return ::proto::steam::NoResponse::default_instance();
    case 4:
      return ::proto::steam::NoResponse::default_instance();
    case 5:
      return ::proto::steam::NoResponse::default_instance();
    case 6:
      return ::proto::steam::NoResponse::default_instance();
    case 7:
      return ::proto::steam::NoResponse::default_instance();
    case 8:
      return ::proto::steam::NoResponse::default_instance();
    case 9:
      return ::proto::steam::NoResponse::default_instance();
    case 10:
      return ::proto::steam::NoResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

BroadcastClient_Stub::BroadcastClient_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
BroadcastClient_Stub::BroadcastClient_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
BroadcastClient_Stub::~BroadcastClient_Stub() {
  if (owns_channel_) delete channel_;
}

void BroadcastClient_Stub::NotifyBroadcastViewerState(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CBroadcast_BroadcastViewerState_Notification* request,
                              ::proto::steam::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void BroadcastClient_Stub::NotifyWaitingBroadcastViewer(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CBroadcast_WaitingBroadcastViewer_Notification* request,
                              ::proto::steam::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void BroadcastClient_Stub::NotifyStopBroadcastUpload(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CBroadcast_StopBroadcastUpload_Notification* request,
                              ::proto::steam::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void BroadcastClient_Stub::NotifySessionClosed(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CBroadcast_SessionClosed_Notification* request,
                              ::proto::steam::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void BroadcastClient_Stub::NotifyViewerBroadcastInvite(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CBroadcast_ViewerBroadcastInvite_Notification* request,
                              ::proto::steam::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void BroadcastClient_Stub::NotifyBroadcastStatus(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CBroadcast_BroadcastStatus_Notification* request,
                              ::proto::steam::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void BroadcastClient_Stub::SendThumbnailToRelay(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CBroadcast_SendThumbnailToRelay_Notification* request,
                              ::proto::steam::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void BroadcastClient_Stub::NotifyWebRTCNeedTURNServer(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CBroadcast_WebRTCNeedTURNServer_Notification* request,
                              ::proto::steam::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}
void BroadcastClient_Stub::NotifyWebRTCStart(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CBroadcast_WebRTCStart_Notification* request,
                              ::proto::steam::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(8),
                       controller, request, response, done);
}
void BroadcastClient_Stub::NotifyWebRTCSetAnswer(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CBroadcast_WebRTCSetAnswer_Notification* request,
                              ::proto::steam::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(9),
                       controller, request, response, done);
}
void BroadcastClient_Stub::NotifyWebRTCAddViewerCandidate(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CBroadcast_WebRTCAddViewerCandidate_Notification* request,
                              ::proto::steam::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(10),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace steam
}  // namespace proto
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::proto::steam::CBroadcast_BeginBroadcastSession_Request* Arena::CreateMaybeMessage< ::proto::steam::CBroadcast_BeginBroadcastSession_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CBroadcast_BeginBroadcastSession_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CBroadcast_BeginBroadcastSession_Response* Arena::CreateMaybeMessage< ::proto::steam::CBroadcast_BeginBroadcastSession_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CBroadcast_BeginBroadcastSession_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CBroadcast_EndBroadcastSession_Request* Arena::CreateMaybeMessage< ::proto::steam::CBroadcast_EndBroadcastSession_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CBroadcast_EndBroadcastSession_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CBroadcast_EndBroadcastSession_Response* Arena::CreateMaybeMessage< ::proto::steam::CBroadcast_EndBroadcastSession_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CBroadcast_EndBroadcastSession_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CBroadcast_StartBroadcastUpload_Request* Arena::CreateMaybeMessage< ::proto::steam::CBroadcast_StartBroadcastUpload_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CBroadcast_StartBroadcastUpload_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CBroadcast_StartBroadcastUpload_Response* Arena::CreateMaybeMessage< ::proto::steam::CBroadcast_StartBroadcastUpload_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CBroadcast_StartBroadcastUpload_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CBroadcast_NotifyBroadcastUploadStop_Notification* Arena::CreateMaybeMessage< ::proto::steam::CBroadcast_NotifyBroadcastUploadStop_Notification >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CBroadcast_NotifyBroadcastUploadStop_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CBroadcast_WatchBroadcast_Request* Arena::CreateMaybeMessage< ::proto::steam::CBroadcast_WatchBroadcast_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CBroadcast_WatchBroadcast_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CBroadcast_WatchBroadcast_Response* Arena::CreateMaybeMessage< ::proto::steam::CBroadcast_WatchBroadcast_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CBroadcast_WatchBroadcast_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CBroadcast_HeartbeatBroadcast_Notification* Arena::CreateMaybeMessage< ::proto::steam::CBroadcast_HeartbeatBroadcast_Notification >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CBroadcast_HeartbeatBroadcast_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CBroadcast_StopWatchingBroadcast_Notification* Arena::CreateMaybeMessage< ::proto::steam::CBroadcast_StopWatchingBroadcast_Notification >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CBroadcast_StopWatchingBroadcast_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CBroadcast_GetBroadcastStatus_Request* Arena::CreateMaybeMessage< ::proto::steam::CBroadcast_GetBroadcastStatus_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CBroadcast_GetBroadcastStatus_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CBroadcast_GetBroadcastStatus_Response* Arena::CreateMaybeMessage< ::proto::steam::CBroadcast_GetBroadcastStatus_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CBroadcast_GetBroadcastStatus_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CBroadcast_GetBroadcastThumbnail_Request* Arena::CreateMaybeMessage< ::proto::steam::CBroadcast_GetBroadcastThumbnail_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CBroadcast_GetBroadcastThumbnail_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CBroadcast_GetBroadcastThumbnail_Response* Arena::CreateMaybeMessage< ::proto::steam::CBroadcast_GetBroadcastThumbnail_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CBroadcast_GetBroadcastThumbnail_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CBroadcast_InviteToBroadcast_Request* Arena::CreateMaybeMessage< ::proto::steam::CBroadcast_InviteToBroadcast_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CBroadcast_InviteToBroadcast_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CBroadcast_InviteToBroadcast_Response* Arena::CreateMaybeMessage< ::proto::steam::CBroadcast_InviteToBroadcast_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CBroadcast_InviteToBroadcast_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CBroadcast_SendBroadcastStateToServer_Request* Arena::CreateMaybeMessage< ::proto::steam::CBroadcast_SendBroadcastStateToServer_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CBroadcast_SendBroadcastStateToServer_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CBroadcast_SendBroadcastStateToServer_Response* Arena::CreateMaybeMessage< ::proto::steam::CBroadcast_SendBroadcastStateToServer_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CBroadcast_SendBroadcastStateToServer_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CBroadcast_NotifyBroadcastSessionHeartbeat_Notification* Arena::CreateMaybeMessage< ::proto::steam::CBroadcast_NotifyBroadcastSessionHeartbeat_Notification >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CBroadcast_NotifyBroadcastSessionHeartbeat_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CBroadcast_GetBroadcastChatInfo_Request* Arena::CreateMaybeMessage< ::proto::steam::CBroadcast_GetBroadcastChatInfo_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CBroadcast_GetBroadcastChatInfo_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CBroadcast_GetBroadcastChatInfo_Response* Arena::CreateMaybeMessage< ::proto::steam::CBroadcast_GetBroadcastChatInfo_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CBroadcast_GetBroadcastChatInfo_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CBroadcast_PostChatMessage_Request* Arena::CreateMaybeMessage< ::proto::steam::CBroadcast_PostChatMessage_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CBroadcast_PostChatMessage_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CBroadcast_PostChatMessage_Response* Arena::CreateMaybeMessage< ::proto::steam::CBroadcast_PostChatMessage_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CBroadcast_PostChatMessage_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CBroadcast_MuteBroadcastChatUser_Request* Arena::CreateMaybeMessage< ::proto::steam::CBroadcast_MuteBroadcastChatUser_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CBroadcast_MuteBroadcastChatUser_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CBroadcast_MuteBroadcastChatUser_Response* Arena::CreateMaybeMessage< ::proto::steam::CBroadcast_MuteBroadcastChatUser_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CBroadcast_MuteBroadcastChatUser_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CBroadcast_RemoveUserChatText_Request* Arena::CreateMaybeMessage< ::proto::steam::CBroadcast_RemoveUserChatText_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CBroadcast_RemoveUserChatText_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CBroadcast_RemoveUserChatText_Response* Arena::CreateMaybeMessage< ::proto::steam::CBroadcast_RemoveUserChatText_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CBroadcast_RemoveUserChatText_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CBroadcast_GetBroadcastChatUserNames_Request* Arena::CreateMaybeMessage< ::proto::steam::CBroadcast_GetBroadcastChatUserNames_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CBroadcast_GetBroadcastChatUserNames_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName* Arena::CreateMaybeMessage< ::proto::steam::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CBroadcast_GetBroadcastChatUserNames_Response* Arena::CreateMaybeMessage< ::proto::steam::CBroadcast_GetBroadcastChatUserNames_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CBroadcast_GetBroadcastChatUserNames_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CBroadcast_SetRTMPInfo_Request* Arena::CreateMaybeMessage< ::proto::steam::CBroadcast_SetRTMPInfo_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CBroadcast_SetRTMPInfo_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CBroadcast_SetRTMPInfo_Response* Arena::CreateMaybeMessage< ::proto::steam::CBroadcast_SetRTMPInfo_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CBroadcast_SetRTMPInfo_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CBroadcast_GetRTMPInfo_Request* Arena::CreateMaybeMessage< ::proto::steam::CBroadcast_GetRTMPInfo_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CBroadcast_GetRTMPInfo_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CBroadcast_GetRTMPInfo_Response* Arena::CreateMaybeMessage< ::proto::steam::CBroadcast_GetRTMPInfo_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CBroadcast_GetRTMPInfo_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CBroadcast_WebRTCHaveTURNServer_Notification* Arena::CreateMaybeMessage< ::proto::steam::CBroadcast_WebRTCHaveTURNServer_Notification >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CBroadcast_WebRTCHaveTURNServer_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CBroadcast_WebRTCStartResult_Request* Arena::CreateMaybeMessage< ::proto::steam::CBroadcast_WebRTCStartResult_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CBroadcast_WebRTCStartResult_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CBroadcast_WebRTCStartResult_Response* Arena::CreateMaybeMessage< ::proto::steam::CBroadcast_WebRTCStartResult_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CBroadcast_WebRTCStartResult_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CBroadcast_WebRTCStopped_Request* Arena::CreateMaybeMessage< ::proto::steam::CBroadcast_WebRTCStopped_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CBroadcast_WebRTCStopped_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CBroadcast_WebRTCStopped_Response* Arena::CreateMaybeMessage< ::proto::steam::CBroadcast_WebRTCStopped_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CBroadcast_WebRTCStopped_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CBroadcast_WebRTCSetAnswer_Request* Arena::CreateMaybeMessage< ::proto::steam::CBroadcast_WebRTCSetAnswer_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CBroadcast_WebRTCSetAnswer_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CBroadcast_WebRTCSetAnswer_Response* Arena::CreateMaybeMessage< ::proto::steam::CBroadcast_WebRTCSetAnswer_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CBroadcast_WebRTCSetAnswer_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CBroadcast_WebRTCLookupTURNServer_Request* Arena::CreateMaybeMessage< ::proto::steam::CBroadcast_WebRTCLookupTURNServer_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CBroadcast_WebRTCLookupTURNServer_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CBroadcast_WebRTCLookupTURNServer_Response* Arena::CreateMaybeMessage< ::proto::steam::CBroadcast_WebRTCLookupTURNServer_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CBroadcast_WebRTCLookupTURNServer_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CBroadcast_WebRTC_Candidate* Arena::CreateMaybeMessage< ::proto::steam::CBroadcast_WebRTC_Candidate >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CBroadcast_WebRTC_Candidate >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CBroadcast_WebRTCAddHostCandidate_Request* Arena::CreateMaybeMessage< ::proto::steam::CBroadcast_WebRTCAddHostCandidate_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CBroadcast_WebRTCAddHostCandidate_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CBroadcast_WebRTCAddHostCandidate_Response* Arena::CreateMaybeMessage< ::proto::steam::CBroadcast_WebRTCAddHostCandidate_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CBroadcast_WebRTCAddHostCandidate_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CBroadcast_WebRTCAddViewerCandidate_Request* Arena::CreateMaybeMessage< ::proto::steam::CBroadcast_WebRTCAddViewerCandidate_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CBroadcast_WebRTCAddViewerCandidate_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CBroadcast_WebRTCAddViewerCandidate_Response* Arena::CreateMaybeMessage< ::proto::steam::CBroadcast_WebRTCAddViewerCandidate_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CBroadcast_WebRTCAddViewerCandidate_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CBroadcast_WebRTCGetHostCandidates_Request* Arena::CreateMaybeMessage< ::proto::steam::CBroadcast_WebRTCGetHostCandidates_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CBroadcast_WebRTCGetHostCandidates_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CBroadcast_WebRTCGetHostCandidates_Response* Arena::CreateMaybeMessage< ::proto::steam::CBroadcast_WebRTCGetHostCandidates_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CBroadcast_WebRTCGetHostCandidates_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CBroadcast_BroadcastViewerState_Notification* Arena::CreateMaybeMessage< ::proto::steam::CBroadcast_BroadcastViewerState_Notification >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CBroadcast_BroadcastViewerState_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CBroadcast_WaitingBroadcastViewer_Notification* Arena::CreateMaybeMessage< ::proto::steam::CBroadcast_WaitingBroadcastViewer_Notification >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CBroadcast_WaitingBroadcastViewer_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CBroadcast_StopBroadcastUpload_Notification* Arena::CreateMaybeMessage< ::proto::steam::CBroadcast_StopBroadcastUpload_Notification >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CBroadcast_StopBroadcastUpload_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CBroadcast_SessionClosed_Notification* Arena::CreateMaybeMessage< ::proto::steam::CBroadcast_SessionClosed_Notification >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CBroadcast_SessionClosed_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CBroadcast_ViewerBroadcastInvite_Notification* Arena::CreateMaybeMessage< ::proto::steam::CBroadcast_ViewerBroadcastInvite_Notification >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CBroadcast_ViewerBroadcastInvite_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CBroadcast_BroadcastStatus_Notification* Arena::CreateMaybeMessage< ::proto::steam::CBroadcast_BroadcastStatus_Notification >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CBroadcast_BroadcastStatus_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CBroadcast_SendThumbnailToRelay_Notification* Arena::CreateMaybeMessage< ::proto::steam::CBroadcast_SendThumbnailToRelay_Notification >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CBroadcast_SendThumbnailToRelay_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CBroadcast_WebRTCNeedTURNServer_Notification* Arena::CreateMaybeMessage< ::proto::steam::CBroadcast_WebRTCNeedTURNServer_Notification >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CBroadcast_WebRTCNeedTURNServer_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CBroadcast_WebRTCStart_Notification* Arena::CreateMaybeMessage< ::proto::steam::CBroadcast_WebRTCStart_Notification >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CBroadcast_WebRTCStart_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CBroadcast_WebRTCSetAnswer_Notification* Arena::CreateMaybeMessage< ::proto::steam::CBroadcast_WebRTCSetAnswer_Notification >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CBroadcast_WebRTCSetAnswer_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CBroadcast_WebRTCAddViewerCandidate_Notification* Arena::CreateMaybeMessage< ::proto::steam::CBroadcast_WebRTCAddViewerCandidate_Notification >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CBroadcast_WebRTCAddViewerCandidate_Notification >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
