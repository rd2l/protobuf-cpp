// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_deviceauth.steamclient.proto

#include "steammessages_deviceauth.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fdeviceauth_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender_steammessages_5fdeviceauth_2esteamclient_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fdeviceauth_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower_steammessages_5fdeviceauth_2esteamclient_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fdeviceauth_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory_steammessages_5fdeviceauth_2esteamclient_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fdeviceauth_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame_steammessages_5fdeviceauth_2esteamclient_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fdeviceauth_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CDeviceAuth_GetOwnAuthorizedDevices_Response_Device_steammessages_5fdeviceauth_2esteamclient_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fdeviceauth_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CDeviceAuth_GetUsedAuthorizedDevices_Response_Device_steammessages_5fdeviceauth_2esteamclient_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fdeviceauth_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory_steammessages_5fdeviceauth_2esteamclient_2eproto;
namespace proto {
namespace steam {
class CDeviceAuth_GetOwnAuthorizedDevices_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDeviceAuth_GetOwnAuthorizedDevices_Request> _instance;
} _CDeviceAuth_GetOwnAuthorizedDevices_Request_default_instance_;
class CDeviceAuth_GetOwnAuthorizedDevices_Response_DeviceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDeviceAuth_GetOwnAuthorizedDevices_Response_Device> _instance;
} _CDeviceAuth_GetOwnAuthorizedDevices_Response_Device_default_instance_;
class CDeviceAuth_GetOwnAuthorizedDevices_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDeviceAuth_GetOwnAuthorizedDevices_Response> _instance;
} _CDeviceAuth_GetOwnAuthorizedDevices_Response_default_instance_;
class CDeviceAuth_AcceptAuthorizationRequest_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDeviceAuth_AcceptAuthorizationRequest_Request> _instance;
} _CDeviceAuth_AcceptAuthorizationRequest_Request_default_instance_;
class CDeviceAuth_AcceptAuthorizationRequest_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDeviceAuth_AcceptAuthorizationRequest_Response> _instance;
} _CDeviceAuth_AcceptAuthorizationRequest_Response_default_instance_;
class CDeviceAuth_AuthorizeRemoteDevice_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDeviceAuth_AuthorizeRemoteDevice_Request> _instance;
} _CDeviceAuth_AuthorizeRemoteDevice_Request_default_instance_;
class CDeviceAuth_AuthorizeRemoteDevice_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDeviceAuth_AuthorizeRemoteDevice_Response> _instance;
} _CDeviceAuth_AuthorizeRemoteDevice_Response_default_instance_;
class CDeviceAuth_DeauthorizeRemoteDevice_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDeviceAuth_DeauthorizeRemoteDevice_Request> _instance;
} _CDeviceAuth_DeauthorizeRemoteDevice_Request_default_instance_;
class CDeviceAuth_DeauthorizeRemoteDevice_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDeviceAuth_DeauthorizeRemoteDevice_Response> _instance;
} _CDeviceAuth_DeauthorizeRemoteDevice_Response_default_instance_;
class CDeviceAuth_GetUsedAuthorizedDevices_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDeviceAuth_GetUsedAuthorizedDevices_Request> _instance;
} _CDeviceAuth_GetUsedAuthorizedDevices_Request_default_instance_;
class CDeviceAuth_GetUsedAuthorizedDevices_Response_DeviceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDeviceAuth_GetUsedAuthorizedDevices_Response_Device> _instance;
} _CDeviceAuth_GetUsedAuthorizedDevices_Response_Device_default_instance_;
class CDeviceAuth_GetUsedAuthorizedDevices_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDeviceAuth_GetUsedAuthorizedDevices_Response> _instance;
} _CDeviceAuth_GetUsedAuthorizedDevices_Response_default_instance_;
class CDeviceAuth_GetAuthorizedBorrowers_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDeviceAuth_GetAuthorizedBorrowers_Request> _instance;
} _CDeviceAuth_GetAuthorizedBorrowers_Request_default_instance_;
class CDeviceAuth_GetAuthorizedBorrowers_Response_BorrowerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower> _instance;
} _CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower_default_instance_;
class CDeviceAuth_GetAuthorizedBorrowers_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDeviceAuth_GetAuthorizedBorrowers_Response> _instance;
} _CDeviceAuth_GetAuthorizedBorrowers_Response_default_instance_;
class CDeviceAuth_AddAuthorizedBorrowers_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDeviceAuth_AddAuthorizedBorrowers_Request> _instance;
} _CDeviceAuth_AddAuthorizedBorrowers_Request_default_instance_;
class CDeviceAuth_AddAuthorizedBorrowers_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDeviceAuth_AddAuthorizedBorrowers_Response> _instance;
} _CDeviceAuth_AddAuthorizedBorrowers_Response_default_instance_;
class CDeviceAuth_RemoveAuthorizedBorrowers_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDeviceAuth_RemoveAuthorizedBorrowers_Request> _instance;
} _CDeviceAuth_RemoveAuthorizedBorrowers_Request_default_instance_;
class CDeviceAuth_RemoveAuthorizedBorrowers_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDeviceAuth_RemoveAuthorizedBorrowers_Response> _instance;
} _CDeviceAuth_RemoveAuthorizedBorrowers_Response_default_instance_;
class CDeviceAuth_GetAuthorizedAsBorrower_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDeviceAuth_GetAuthorizedAsBorrower_Request> _instance;
} _CDeviceAuth_GetAuthorizedAsBorrower_Request_default_instance_;
class CDeviceAuth_GetAuthorizedAsBorrower_Response_LenderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender> _instance;
} _CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender_default_instance_;
class CDeviceAuth_GetAuthorizedAsBorrower_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDeviceAuth_GetAuthorizedAsBorrower_Response> _instance;
} _CDeviceAuth_GetAuthorizedAsBorrower_Response_default_instance_;
class CDeviceAuth_GetExcludedGamesInLibrary_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDeviceAuth_GetExcludedGamesInLibrary_Request> _instance;
} _CDeviceAuth_GetExcludedGamesInLibrary_Request_default_instance_;
class CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame> _instance;
} _CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame_default_instance_;
class CDeviceAuth_GetExcludedGamesInLibrary_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDeviceAuth_GetExcludedGamesInLibrary_Response> _instance;
} _CDeviceAuth_GetExcludedGamesInLibrary_Response_default_instance_;
class CDeviceAuth_GetBorrowerPlayHistory_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDeviceAuth_GetBorrowerPlayHistory_Request> _instance;
} _CDeviceAuth_GetBorrowerPlayHistory_Request_default_instance_;
class CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistoryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory> _instance;
} _CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory_default_instance_;
class CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistoryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory> _instance;
} _CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory_default_instance_;
class CDeviceAuth_GetBorrowerPlayHistory_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDeviceAuth_GetBorrowerPlayHistory_Response> _instance;
} _CDeviceAuth_GetBorrowerPlayHistory_Response_default_instance_;
}  // namespace steam
}  // namespace proto
static void InitDefaultsCDeviceAuth_GetOwnAuthorizedDevices_Request_steammessages_5fdeviceauth_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CDeviceAuth_GetOwnAuthorizedDevices_Request_default_instance_;
    new (ptr) ::proto::steam::CDeviceAuth_GetOwnAuthorizedDevices_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CDeviceAuth_GetOwnAuthorizedDevices_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDeviceAuth_GetOwnAuthorizedDevices_Request_steammessages_5fdeviceauth_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDeviceAuth_GetOwnAuthorizedDevices_Request_steammessages_5fdeviceauth_2esteamclient_2eproto}, {}};

static void InitDefaultsCDeviceAuth_GetOwnAuthorizedDevices_Response_Device_steammessages_5fdeviceauth_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CDeviceAuth_GetOwnAuthorizedDevices_Response_Device_default_instance_;
    new (ptr) ::proto::steam::CDeviceAuth_GetOwnAuthorizedDevices_Response_Device();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDeviceAuth_GetOwnAuthorizedDevices_Response_Device_steammessages_5fdeviceauth_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDeviceAuth_GetOwnAuthorizedDevices_Response_Device_steammessages_5fdeviceauth_2esteamclient_2eproto}, {}};

static void InitDefaultsCDeviceAuth_GetOwnAuthorizedDevices_Response_steammessages_5fdeviceauth_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CDeviceAuth_GetOwnAuthorizedDevices_Response_default_instance_;
    new (ptr) ::proto::steam::CDeviceAuth_GetOwnAuthorizedDevices_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CDeviceAuth_GetOwnAuthorizedDevices_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CDeviceAuth_GetOwnAuthorizedDevices_Response_steammessages_5fdeviceauth_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCDeviceAuth_GetOwnAuthorizedDevices_Response_steammessages_5fdeviceauth_2esteamclient_2eproto}, {
      &scc_info_CDeviceAuth_GetOwnAuthorizedDevices_Response_Device_steammessages_5fdeviceauth_2esteamclient_2eproto.base,}};

static void InitDefaultsCDeviceAuth_AcceptAuthorizationRequest_Request_steammessages_5fdeviceauth_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CDeviceAuth_AcceptAuthorizationRequest_Request_default_instance_;
    new (ptr) ::proto::steam::CDeviceAuth_AcceptAuthorizationRequest_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CDeviceAuth_AcceptAuthorizationRequest_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDeviceAuth_AcceptAuthorizationRequest_Request_steammessages_5fdeviceauth_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDeviceAuth_AcceptAuthorizationRequest_Request_steammessages_5fdeviceauth_2esteamclient_2eproto}, {}};

static void InitDefaultsCDeviceAuth_AcceptAuthorizationRequest_Response_steammessages_5fdeviceauth_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CDeviceAuth_AcceptAuthorizationRequest_Response_default_instance_;
    new (ptr) ::proto::steam::CDeviceAuth_AcceptAuthorizationRequest_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CDeviceAuth_AcceptAuthorizationRequest_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDeviceAuth_AcceptAuthorizationRequest_Response_steammessages_5fdeviceauth_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDeviceAuth_AcceptAuthorizationRequest_Response_steammessages_5fdeviceauth_2esteamclient_2eproto}, {}};

static void InitDefaultsCDeviceAuth_AuthorizeRemoteDevice_Request_steammessages_5fdeviceauth_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CDeviceAuth_AuthorizeRemoteDevice_Request_default_instance_;
    new (ptr) ::proto::steam::CDeviceAuth_AuthorizeRemoteDevice_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CDeviceAuth_AuthorizeRemoteDevice_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDeviceAuth_AuthorizeRemoteDevice_Request_steammessages_5fdeviceauth_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDeviceAuth_AuthorizeRemoteDevice_Request_steammessages_5fdeviceauth_2esteamclient_2eproto}, {}};

static void InitDefaultsCDeviceAuth_AuthorizeRemoteDevice_Response_steammessages_5fdeviceauth_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CDeviceAuth_AuthorizeRemoteDevice_Response_default_instance_;
    new (ptr) ::proto::steam::CDeviceAuth_AuthorizeRemoteDevice_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CDeviceAuth_AuthorizeRemoteDevice_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDeviceAuth_AuthorizeRemoteDevice_Response_steammessages_5fdeviceauth_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDeviceAuth_AuthorizeRemoteDevice_Response_steammessages_5fdeviceauth_2esteamclient_2eproto}, {}};

static void InitDefaultsCDeviceAuth_DeauthorizeRemoteDevice_Request_steammessages_5fdeviceauth_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CDeviceAuth_DeauthorizeRemoteDevice_Request_default_instance_;
    new (ptr) ::proto::steam::CDeviceAuth_DeauthorizeRemoteDevice_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CDeviceAuth_DeauthorizeRemoteDevice_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDeviceAuth_DeauthorizeRemoteDevice_Request_steammessages_5fdeviceauth_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDeviceAuth_DeauthorizeRemoteDevice_Request_steammessages_5fdeviceauth_2esteamclient_2eproto}, {}};

static void InitDefaultsCDeviceAuth_DeauthorizeRemoteDevice_Response_steammessages_5fdeviceauth_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CDeviceAuth_DeauthorizeRemoteDevice_Response_default_instance_;
    new (ptr) ::proto::steam::CDeviceAuth_DeauthorizeRemoteDevice_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CDeviceAuth_DeauthorizeRemoteDevice_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDeviceAuth_DeauthorizeRemoteDevice_Response_steammessages_5fdeviceauth_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDeviceAuth_DeauthorizeRemoteDevice_Response_steammessages_5fdeviceauth_2esteamclient_2eproto}, {}};

static void InitDefaultsCDeviceAuth_GetUsedAuthorizedDevices_Request_steammessages_5fdeviceauth_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CDeviceAuth_GetUsedAuthorizedDevices_Request_default_instance_;
    new (ptr) ::proto::steam::CDeviceAuth_GetUsedAuthorizedDevices_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CDeviceAuth_GetUsedAuthorizedDevices_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDeviceAuth_GetUsedAuthorizedDevices_Request_steammessages_5fdeviceauth_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDeviceAuth_GetUsedAuthorizedDevices_Request_steammessages_5fdeviceauth_2esteamclient_2eproto}, {}};

static void InitDefaultsCDeviceAuth_GetUsedAuthorizedDevices_Response_Device_steammessages_5fdeviceauth_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CDeviceAuth_GetUsedAuthorizedDevices_Response_Device_default_instance_;
    new (ptr) ::proto::steam::CDeviceAuth_GetUsedAuthorizedDevices_Response_Device();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDeviceAuth_GetUsedAuthorizedDevices_Response_Device_steammessages_5fdeviceauth_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDeviceAuth_GetUsedAuthorizedDevices_Response_Device_steammessages_5fdeviceauth_2esteamclient_2eproto}, {}};

static void InitDefaultsCDeviceAuth_GetUsedAuthorizedDevices_Response_steammessages_5fdeviceauth_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CDeviceAuth_GetUsedAuthorizedDevices_Response_default_instance_;
    new (ptr) ::proto::steam::CDeviceAuth_GetUsedAuthorizedDevices_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CDeviceAuth_GetUsedAuthorizedDevices_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CDeviceAuth_GetUsedAuthorizedDevices_Response_steammessages_5fdeviceauth_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCDeviceAuth_GetUsedAuthorizedDevices_Response_steammessages_5fdeviceauth_2esteamclient_2eproto}, {
      &scc_info_CDeviceAuth_GetUsedAuthorizedDevices_Response_Device_steammessages_5fdeviceauth_2esteamclient_2eproto.base,}};

static void InitDefaultsCDeviceAuth_GetAuthorizedBorrowers_Request_steammessages_5fdeviceauth_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CDeviceAuth_GetAuthorizedBorrowers_Request_default_instance_;
    new (ptr) ::proto::steam::CDeviceAuth_GetAuthorizedBorrowers_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CDeviceAuth_GetAuthorizedBorrowers_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDeviceAuth_GetAuthorizedBorrowers_Request_steammessages_5fdeviceauth_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDeviceAuth_GetAuthorizedBorrowers_Request_steammessages_5fdeviceauth_2esteamclient_2eproto}, {}};

static void InitDefaultsCDeviceAuth_GetAuthorizedBorrowers_Response_Borrower_steammessages_5fdeviceauth_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower_default_instance_;
    new (ptr) ::proto::steam::CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower_steammessages_5fdeviceauth_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDeviceAuth_GetAuthorizedBorrowers_Response_Borrower_steammessages_5fdeviceauth_2esteamclient_2eproto}, {}};

static void InitDefaultsCDeviceAuth_GetAuthorizedBorrowers_Response_steammessages_5fdeviceauth_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CDeviceAuth_GetAuthorizedBorrowers_Response_default_instance_;
    new (ptr) ::proto::steam::CDeviceAuth_GetAuthorizedBorrowers_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CDeviceAuth_GetAuthorizedBorrowers_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CDeviceAuth_GetAuthorizedBorrowers_Response_steammessages_5fdeviceauth_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCDeviceAuth_GetAuthorizedBorrowers_Response_steammessages_5fdeviceauth_2esteamclient_2eproto}, {
      &scc_info_CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower_steammessages_5fdeviceauth_2esteamclient_2eproto.base,}};

static void InitDefaultsCDeviceAuth_AddAuthorizedBorrowers_Request_steammessages_5fdeviceauth_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CDeviceAuth_AddAuthorizedBorrowers_Request_default_instance_;
    new (ptr) ::proto::steam::CDeviceAuth_AddAuthorizedBorrowers_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CDeviceAuth_AddAuthorizedBorrowers_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDeviceAuth_AddAuthorizedBorrowers_Request_steammessages_5fdeviceauth_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDeviceAuth_AddAuthorizedBorrowers_Request_steammessages_5fdeviceauth_2esteamclient_2eproto}, {}};

static void InitDefaultsCDeviceAuth_AddAuthorizedBorrowers_Response_steammessages_5fdeviceauth_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CDeviceAuth_AddAuthorizedBorrowers_Response_default_instance_;
    new (ptr) ::proto::steam::CDeviceAuth_AddAuthorizedBorrowers_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CDeviceAuth_AddAuthorizedBorrowers_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDeviceAuth_AddAuthorizedBorrowers_Response_steammessages_5fdeviceauth_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDeviceAuth_AddAuthorizedBorrowers_Response_steammessages_5fdeviceauth_2esteamclient_2eproto}, {}};

static void InitDefaultsCDeviceAuth_RemoveAuthorizedBorrowers_Request_steammessages_5fdeviceauth_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CDeviceAuth_RemoveAuthorizedBorrowers_Request_default_instance_;
    new (ptr) ::proto::steam::CDeviceAuth_RemoveAuthorizedBorrowers_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CDeviceAuth_RemoveAuthorizedBorrowers_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDeviceAuth_RemoveAuthorizedBorrowers_Request_steammessages_5fdeviceauth_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDeviceAuth_RemoveAuthorizedBorrowers_Request_steammessages_5fdeviceauth_2esteamclient_2eproto}, {}};

static void InitDefaultsCDeviceAuth_RemoveAuthorizedBorrowers_Response_steammessages_5fdeviceauth_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CDeviceAuth_RemoveAuthorizedBorrowers_Response_default_instance_;
    new (ptr) ::proto::steam::CDeviceAuth_RemoveAuthorizedBorrowers_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CDeviceAuth_RemoveAuthorizedBorrowers_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDeviceAuth_RemoveAuthorizedBorrowers_Response_steammessages_5fdeviceauth_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDeviceAuth_RemoveAuthorizedBorrowers_Response_steammessages_5fdeviceauth_2esteamclient_2eproto}, {}};

static void InitDefaultsCDeviceAuth_GetAuthorizedAsBorrower_Request_steammessages_5fdeviceauth_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CDeviceAuth_GetAuthorizedAsBorrower_Request_default_instance_;
    new (ptr) ::proto::steam::CDeviceAuth_GetAuthorizedAsBorrower_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CDeviceAuth_GetAuthorizedAsBorrower_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDeviceAuth_GetAuthorizedAsBorrower_Request_steammessages_5fdeviceauth_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDeviceAuth_GetAuthorizedAsBorrower_Request_steammessages_5fdeviceauth_2esteamclient_2eproto}, {}};

static void InitDefaultsCDeviceAuth_GetAuthorizedAsBorrower_Response_Lender_steammessages_5fdeviceauth_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender_default_instance_;
    new (ptr) ::proto::steam::CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender_steammessages_5fdeviceauth_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDeviceAuth_GetAuthorizedAsBorrower_Response_Lender_steammessages_5fdeviceauth_2esteamclient_2eproto}, {}};

static void InitDefaultsCDeviceAuth_GetAuthorizedAsBorrower_Response_steammessages_5fdeviceauth_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CDeviceAuth_GetAuthorizedAsBorrower_Response_default_instance_;
    new (ptr) ::proto::steam::CDeviceAuth_GetAuthorizedAsBorrower_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CDeviceAuth_GetAuthorizedAsBorrower_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CDeviceAuth_GetAuthorizedAsBorrower_Response_steammessages_5fdeviceauth_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCDeviceAuth_GetAuthorizedAsBorrower_Response_steammessages_5fdeviceauth_2esteamclient_2eproto}, {
      &scc_info_CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender_steammessages_5fdeviceauth_2esteamclient_2eproto.base,}};

static void InitDefaultsCDeviceAuth_GetExcludedGamesInLibrary_Request_steammessages_5fdeviceauth_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CDeviceAuth_GetExcludedGamesInLibrary_Request_default_instance_;
    new (ptr) ::proto::steam::CDeviceAuth_GetExcludedGamesInLibrary_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CDeviceAuth_GetExcludedGamesInLibrary_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDeviceAuth_GetExcludedGamesInLibrary_Request_steammessages_5fdeviceauth_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDeviceAuth_GetExcludedGamesInLibrary_Request_steammessages_5fdeviceauth_2esteamclient_2eproto}, {}};

static void InitDefaultsCDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame_steammessages_5fdeviceauth_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame_default_instance_;
    new (ptr) ::proto::steam::CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame_steammessages_5fdeviceauth_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame_steammessages_5fdeviceauth_2esteamclient_2eproto}, {}};

static void InitDefaultsCDeviceAuth_GetExcludedGamesInLibrary_Response_steammessages_5fdeviceauth_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CDeviceAuth_GetExcludedGamesInLibrary_Response_default_instance_;
    new (ptr) ::proto::steam::CDeviceAuth_GetExcludedGamesInLibrary_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CDeviceAuth_GetExcludedGamesInLibrary_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CDeviceAuth_GetExcludedGamesInLibrary_Response_steammessages_5fdeviceauth_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCDeviceAuth_GetExcludedGamesInLibrary_Response_steammessages_5fdeviceauth_2esteamclient_2eproto}, {
      &scc_info_CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame_steammessages_5fdeviceauth_2esteamclient_2eproto.base,}};

static void InitDefaultsCDeviceAuth_GetBorrowerPlayHistory_Request_steammessages_5fdeviceauth_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CDeviceAuth_GetBorrowerPlayHistory_Request_default_instance_;
    new (ptr) ::proto::steam::CDeviceAuth_GetBorrowerPlayHistory_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CDeviceAuth_GetBorrowerPlayHistory_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDeviceAuth_GetBorrowerPlayHistory_Request_steammessages_5fdeviceauth_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDeviceAuth_GetBorrowerPlayHistory_Request_steammessages_5fdeviceauth_2esteamclient_2eproto}, {}};

static void InitDefaultsCDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory_steammessages_5fdeviceauth_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory_default_instance_;
    new (ptr) ::proto::steam::CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory_steammessages_5fdeviceauth_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory_steammessages_5fdeviceauth_2esteamclient_2eproto}, {}};

static void InitDefaultsCDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory_steammessages_5fdeviceauth_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory_default_instance_;
    new (ptr) ::proto::steam::CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory_steammessages_5fdeviceauth_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory_steammessages_5fdeviceauth_2esteamclient_2eproto}, {
      &scc_info_CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory_steammessages_5fdeviceauth_2esteamclient_2eproto.base,}};

static void InitDefaultsCDeviceAuth_GetBorrowerPlayHistory_Response_steammessages_5fdeviceauth_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CDeviceAuth_GetBorrowerPlayHistory_Response_default_instance_;
    new (ptr) ::proto::steam::CDeviceAuth_GetBorrowerPlayHistory_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CDeviceAuth_GetBorrowerPlayHistory_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CDeviceAuth_GetBorrowerPlayHistory_Response_steammessages_5fdeviceauth_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCDeviceAuth_GetBorrowerPlayHistory_Response_steammessages_5fdeviceauth_2esteamclient_2eproto}, {
      &scc_info_CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory_steammessages_5fdeviceauth_2esteamclient_2eproto.base,}};

void InitDefaults_steammessages_5fdeviceauth_2esteamclient_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_CDeviceAuth_GetOwnAuthorizedDevices_Request_steammessages_5fdeviceauth_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDeviceAuth_GetOwnAuthorizedDevices_Response_Device_steammessages_5fdeviceauth_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDeviceAuth_GetOwnAuthorizedDevices_Response_steammessages_5fdeviceauth_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDeviceAuth_AcceptAuthorizationRequest_Request_steammessages_5fdeviceauth_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDeviceAuth_AcceptAuthorizationRequest_Response_steammessages_5fdeviceauth_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDeviceAuth_AuthorizeRemoteDevice_Request_steammessages_5fdeviceauth_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDeviceAuth_AuthorizeRemoteDevice_Response_steammessages_5fdeviceauth_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDeviceAuth_DeauthorizeRemoteDevice_Request_steammessages_5fdeviceauth_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDeviceAuth_DeauthorizeRemoteDevice_Response_steammessages_5fdeviceauth_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDeviceAuth_GetUsedAuthorizedDevices_Request_steammessages_5fdeviceauth_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDeviceAuth_GetUsedAuthorizedDevices_Response_Device_steammessages_5fdeviceauth_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDeviceAuth_GetUsedAuthorizedDevices_Response_steammessages_5fdeviceauth_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDeviceAuth_GetAuthorizedBorrowers_Request_steammessages_5fdeviceauth_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower_steammessages_5fdeviceauth_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDeviceAuth_GetAuthorizedBorrowers_Response_steammessages_5fdeviceauth_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDeviceAuth_AddAuthorizedBorrowers_Request_steammessages_5fdeviceauth_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDeviceAuth_AddAuthorizedBorrowers_Response_steammessages_5fdeviceauth_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDeviceAuth_RemoveAuthorizedBorrowers_Request_steammessages_5fdeviceauth_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDeviceAuth_RemoveAuthorizedBorrowers_Response_steammessages_5fdeviceauth_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDeviceAuth_GetAuthorizedAsBorrower_Request_steammessages_5fdeviceauth_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender_steammessages_5fdeviceauth_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDeviceAuth_GetAuthorizedAsBorrower_Response_steammessages_5fdeviceauth_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDeviceAuth_GetExcludedGamesInLibrary_Request_steammessages_5fdeviceauth_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame_steammessages_5fdeviceauth_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDeviceAuth_GetExcludedGamesInLibrary_Response_steammessages_5fdeviceauth_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDeviceAuth_GetBorrowerPlayHistory_Request_steammessages_5fdeviceauth_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory_steammessages_5fdeviceauth_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory_steammessages_5fdeviceauth_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDeviceAuth_GetBorrowerPlayHistory_Response_steammessages_5fdeviceauth_2esteamclient_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_steammessages_5fdeviceauth_2esteamclient_2eproto[29];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_steammessages_5fdeviceauth_2esteamclient_2eproto = nullptr;
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors_steammessages_5fdeviceauth_2esteamclient_2eproto[1];

const ::google::protobuf::uint32 TableStruct_steammessages_5fdeviceauth_2esteamclient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetOwnAuthorizedDevices_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetOwnAuthorizedDevices_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetOwnAuthorizedDevices_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetOwnAuthorizedDevices_Request, include_canceled_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetOwnAuthorizedDevices_Response_Device, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetOwnAuthorizedDevices_Response_Device, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetOwnAuthorizedDevices_Response_Device, auth_device_token_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetOwnAuthorizedDevices_Response_Device, device_name_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetOwnAuthorizedDevices_Response_Device, is_pending_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetOwnAuthorizedDevices_Response_Device, is_canceled_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetOwnAuthorizedDevices_Response_Device, last_time_used_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetOwnAuthorizedDevices_Response_Device, last_borrower_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetOwnAuthorizedDevices_Response_Device, last_app_played_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetOwnAuthorizedDevices_Response_Device, is_limited_),
  1,
  0,
  3,
  4,
  2,
  6,
  7,
  5,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetOwnAuthorizedDevices_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetOwnAuthorizedDevices_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetOwnAuthorizedDevices_Response, devices_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_AcceptAuthorizationRequest_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_AcceptAuthorizationRequest_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_AcceptAuthorizationRequest_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_AcceptAuthorizationRequest_Request, auth_device_token_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_AcceptAuthorizationRequest_Request, auth_code_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_AcceptAuthorizationRequest_Request, from_steamid_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_AcceptAuthorizationRequest_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_AcceptAuthorizationRequest_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_AuthorizeRemoteDevice_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_AuthorizeRemoteDevice_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_AuthorizeRemoteDevice_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_AuthorizeRemoteDevice_Request, auth_device_token_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_AuthorizeRemoteDevice_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_AuthorizeRemoteDevice_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_DeauthorizeRemoteDevice_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_DeauthorizeRemoteDevice_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_DeauthorizeRemoteDevice_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_DeauthorizeRemoteDevice_Request, auth_device_token_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_DeauthorizeRemoteDevice_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_DeauthorizeRemoteDevice_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetUsedAuthorizedDevices_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetUsedAuthorizedDevices_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetUsedAuthorizedDevices_Request, steamid_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetUsedAuthorizedDevices_Response_Device, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetUsedAuthorizedDevices_Response_Device, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetUsedAuthorizedDevices_Response_Device, auth_device_token_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetUsedAuthorizedDevices_Response_Device, device_name_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetUsedAuthorizedDevices_Response_Device, owner_steamid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetUsedAuthorizedDevices_Response_Device, last_time_used_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetUsedAuthorizedDevices_Response_Device, last_app_played_),
  1,
  0,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetUsedAuthorizedDevices_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetUsedAuthorizedDevices_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetUsedAuthorizedDevices_Response, devices_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetAuthorizedBorrowers_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetAuthorizedBorrowers_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetAuthorizedBorrowers_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetAuthorizedBorrowers_Request, include_canceled_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetAuthorizedBorrowers_Request, include_pending_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower, steamid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower, is_pending_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower, is_canceled_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower, time_created_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetAuthorizedBorrowers_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetAuthorizedBorrowers_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetAuthorizedBorrowers_Response, borrowers_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_AddAuthorizedBorrowers_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_AddAuthorizedBorrowers_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_AddAuthorizedBorrowers_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_AddAuthorizedBorrowers_Request, steamid_borrower_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_AddAuthorizedBorrowers_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_AddAuthorizedBorrowers_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_AddAuthorizedBorrowers_Response, seconds_to_wait_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_RemoveAuthorizedBorrowers_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_RemoveAuthorizedBorrowers_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_RemoveAuthorizedBorrowers_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_RemoveAuthorizedBorrowers_Request, steamid_borrower_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_RemoveAuthorizedBorrowers_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_RemoveAuthorizedBorrowers_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetAuthorizedAsBorrower_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetAuthorizedAsBorrower_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetAuthorizedAsBorrower_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetAuthorizedAsBorrower_Request, include_canceled_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetAuthorizedAsBorrower_Request, include_pending_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender, steamid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender, time_created_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender, is_pending_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender, is_canceled_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender, is_used_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetAuthorizedAsBorrower_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetAuthorizedAsBorrower_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetAuthorizedAsBorrower_Response, lenders_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetExcludedGamesInLibrary_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetExcludedGamesInLibrary_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetExcludedGamesInLibrary_Request, steamid_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame, appid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame, game_name_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame, vac_banned_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame, package_excluded_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetExcludedGamesInLibrary_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetExcludedGamesInLibrary_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetExcludedGamesInLibrary_Response, excluded_games_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetBorrowerPlayHistory_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetBorrowerPlayHistory_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetBorrowerPlayHistory_Request, steamid_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory, appid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory, time_last_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory, time_total_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory, steamid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory, game_history_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetBorrowerPlayHistory_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetBorrowerPlayHistory_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CDeviceAuth_GetBorrowerPlayHistory_Response, lender_history_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::proto::steam::CDeviceAuth_GetOwnAuthorizedDevices_Request)},
  { 9, 22, sizeof(::proto::steam::CDeviceAuth_GetOwnAuthorizedDevices_Response_Device)},
  { 30, 36, sizeof(::proto::steam::CDeviceAuth_GetOwnAuthorizedDevices_Response)},
  { 37, 46, sizeof(::proto::steam::CDeviceAuth_AcceptAuthorizationRequest_Request)},
  { 50, 55, sizeof(::proto::steam::CDeviceAuth_AcceptAuthorizationRequest_Response)},
  { 55, 62, sizeof(::proto::steam::CDeviceAuth_AuthorizeRemoteDevice_Request)},
  { 64, 69, sizeof(::proto::steam::CDeviceAuth_AuthorizeRemoteDevice_Response)},
  { 69, 76, sizeof(::proto::steam::CDeviceAuth_DeauthorizeRemoteDevice_Request)},
  { 78, 83, sizeof(::proto::steam::CDeviceAuth_DeauthorizeRemoteDevice_Response)},
  { 83, 89, sizeof(::proto::steam::CDeviceAuth_GetUsedAuthorizedDevices_Request)},
  { 90, 100, sizeof(::proto::steam::CDeviceAuth_GetUsedAuthorizedDevices_Response_Device)},
  { 105, 111, sizeof(::proto::steam::CDeviceAuth_GetUsedAuthorizedDevices_Response)},
  { 112, 120, sizeof(::proto::steam::CDeviceAuth_GetAuthorizedBorrowers_Request)},
  { 123, 132, sizeof(::proto::steam::CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower)},
  { 136, 142, sizeof(::proto::steam::CDeviceAuth_GetAuthorizedBorrowers_Response)},
  { 143, 150, sizeof(::proto::steam::CDeviceAuth_AddAuthorizedBorrowers_Request)},
  { 152, 158, sizeof(::proto::steam::CDeviceAuth_AddAuthorizedBorrowers_Response)},
  { 159, 166, sizeof(::proto::steam::CDeviceAuth_RemoveAuthorizedBorrowers_Request)},
  { 168, 173, sizeof(::proto::steam::CDeviceAuth_RemoveAuthorizedBorrowers_Response)},
  { 173, 181, sizeof(::proto::steam::CDeviceAuth_GetAuthorizedAsBorrower_Request)},
  { 184, 194, sizeof(::proto::steam::CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender)},
  { 199, 205, sizeof(::proto::steam::CDeviceAuth_GetAuthorizedAsBorrower_Response)},
  { 206, 212, sizeof(::proto::steam::CDeviceAuth_GetExcludedGamesInLibrary_Request)},
  { 213, 222, sizeof(::proto::steam::CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame)},
  { 226, 232, sizeof(::proto::steam::CDeviceAuth_GetExcludedGamesInLibrary_Response)},
  { 233, 239, sizeof(::proto::steam::CDeviceAuth_GetBorrowerPlayHistory_Request)},
  { 240, 248, sizeof(::proto::steam::CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory)},
  { 251, 258, sizeof(::proto::steam::CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory)},
  { 260, 266, sizeof(::proto::steam::CDeviceAuth_GetBorrowerPlayHistory_Response)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CDeviceAuth_GetOwnAuthorizedDevices_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CDeviceAuth_GetOwnAuthorizedDevices_Response_Device_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CDeviceAuth_GetOwnAuthorizedDevices_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CDeviceAuth_AcceptAuthorizationRequest_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CDeviceAuth_AcceptAuthorizationRequest_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CDeviceAuth_AuthorizeRemoteDevice_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CDeviceAuth_AuthorizeRemoteDevice_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CDeviceAuth_DeauthorizeRemoteDevice_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CDeviceAuth_DeauthorizeRemoteDevice_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CDeviceAuth_GetUsedAuthorizedDevices_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CDeviceAuth_GetUsedAuthorizedDevices_Response_Device_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CDeviceAuth_GetUsedAuthorizedDevices_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CDeviceAuth_GetAuthorizedBorrowers_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CDeviceAuth_GetAuthorizedBorrowers_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CDeviceAuth_AddAuthorizedBorrowers_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CDeviceAuth_AddAuthorizedBorrowers_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CDeviceAuth_RemoveAuthorizedBorrowers_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CDeviceAuth_RemoveAuthorizedBorrowers_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CDeviceAuth_GetAuthorizedAsBorrower_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CDeviceAuth_GetAuthorizedAsBorrower_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CDeviceAuth_GetExcludedGamesInLibrary_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CDeviceAuth_GetExcludedGamesInLibrary_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CDeviceAuth_GetBorrowerPlayHistory_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CDeviceAuth_GetBorrowerPlayHistory_Response_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_steammessages_5fdeviceauth_2esteamclient_2eproto = {
  {}, AddDescriptors_steammessages_5fdeviceauth_2esteamclient_2eproto, "steammessages_deviceauth.steamclient.proto", schemas,
  file_default_instances, TableStruct_steammessages_5fdeviceauth_2esteamclient_2eproto::offsets,
  file_level_metadata_steammessages_5fdeviceauth_2esteamclient_2eproto, 29, file_level_enum_descriptors_steammessages_5fdeviceauth_2esteamclient_2eproto, file_level_service_descriptors_steammessages_5fdeviceauth_2esteamclient_2eproto,
};

const char descriptor_table_protodef_steammessages_5fdeviceauth_2esteamclient_2eproto[] =
  "\n*steammessages_deviceauth.steamclient.p"
  "roto\022\013proto.steam\032,steammessages_unified"
  "_base.steamclient.proto\"X\n+CDeviceAuth_G"
  "etOwnAuthorizedDevices_Request\022\017\n\007steami"
  "d\030\001 \001(\006\022\030\n\020include_canceled\030\002 \001(\010\"\304\002\n,CD"
  "eviceAuth_GetOwnAuthorizedDevices_Respon"
  "se\022Q\n\007devices\030\001 \003(\0132@.proto.steam.CDevic"
  "eAuth_GetOwnAuthorizedDevices_Response.D"
  "evice\032\300\001\n\006Device\022\031\n\021auth_device_token\030\001 "
  "\001(\006\022\023\n\013device_name\030\002 \001(\t\022\022\n\nis_pending\030\003"
  " \001(\010\022\023\n\013is_canceled\030\004 \001(\010\022\026\n\016last_time_u"
  "sed\030\005 \001(\r\022\030\n\020last_borrower_id\030\006 \001(\006\022\027\n\017l"
  "ast_app_played\030\007 \001(\r\022\022\n\nis_limited\030\010 \001(\010"
  "\"\205\001\n.CDeviceAuth_AcceptAuthorizationRequ"
  "est_Request\022\017\n\007steamid\030\001 \001(\006\022\031\n\021auth_dev"
  "ice_token\030\002 \001(\006\022\021\n\tauth_code\030\003 \001(\006\022\024\n\014fr"
  "om_steamid\030\004 \001(\006\"1\n/CDeviceAuth_AcceptAu"
  "thorizationRequest_Response\"W\n)CDeviceAu"
  "th_AuthorizeRemoteDevice_Request\022\017\n\007stea"
  "mid\030\001 \001(\006\022\031\n\021auth_device_token\030\002 \001(\006\",\n*"
  "CDeviceAuth_AuthorizeRemoteDevice_Respon"
  "se\"Y\n+CDeviceAuth_DeauthorizeRemoteDevic"
  "e_Request\022\017\n\007steamid\030\001 \001(\006\022\031\n\021auth_devic"
  "e_token\030\002 \001(\006\".\n,CDeviceAuth_Deauthorize"
  "RemoteDevice_Response\"\?\n,CDeviceAuth_Get"
  "UsedAuthorizedDevices_Request\022\017\n\007steamid"
  "\030\001 \001(\006\"\206\002\n-CDeviceAuth_GetUsedAuthorized"
  "Devices_Response\022R\n\007devices\030\001 \003(\0132A.prot"
  "o.steam.CDeviceAuth_GetUsedAuthorizedDev"
  "ices_Response.Device\032\200\001\n\006Device\022\031\n\021auth_"
  "device_token\030\001 \001(\006\022\023\n\013device_name\030\002 \001(\t\022"
  "\025\n\rowner_steamid\030\003 \001(\006\022\026\n\016last_time_used"
  "\030\004 \001(\r\022\027\n\017last_app_played\030\005 \001(\r\"p\n*CDevi"
  "ceAuth_GetAuthorizedBorrowers_Request\022\017\n"
  "\007steamid\030\001 \001(\006\022\030\n\020include_canceled\030\002 \001(\010"
  "\022\027\n\017include_pending\030\003 \001(\010\"\337\001\n+CDeviceAut"
  "h_GetAuthorizedBorrowers_Response\022T\n\tbor"
  "rowers\030\001 \003(\0132A.proto.steam.CDeviceAuth_G"
  "etAuthorizedBorrowers_Response.Borrower\032"
  "Z\n\010Borrower\022\017\n\007steamid\030\001 \001(\006\022\022\n\nis_pendi"
  "ng\030\002 \001(\010\022\023\n\013is_canceled\030\003 \001(\010\022\024\n\014time_cr"
  "eated\030\004 \001(\r\"W\n*CDeviceAuth_AddAuthorized"
  "Borrowers_Request\022\017\n\007steamid\030\001 \001(\006\022\030\n\020st"
  "eamid_borrower\030\002 \003(\006\"F\n+CDeviceAuth_AddA"
  "uthorizedBorrowers_Response\022\027\n\017seconds_t"
  "o_wait\030\001 \001(\005\"Z\n-CDeviceAuth_RemoveAuthor"
  "izedBorrowers_Request\022\017\n\007steamid\030\001 \001(\006\022\030"
  "\n\020steamid_borrower\030\002 \003(\006\"0\n.CDeviceAuth_"
  "RemoveAuthorizedBorrowers_Response\"q\n+CD"
  "eviceAuth_GetAuthorizedAsBorrower_Reques"
  "t\022\017\n\007steamid\030\001 \001(\006\022\030\n\020include_canceled\030\002"
  " \001(\010\022\027\n\017include_pending\030\003 \001(\010\"\354\001\n,CDevic"
  "eAuth_GetAuthorizedAsBorrower_Response\022Q"
  "\n\007lenders\030\001 \003(\0132@.proto.steam.CDeviceAut"
  "h_GetAuthorizedAsBorrower_Response.Lende"
  "r\032i\n\006Lender\022\017\n\007steamid\030\001 \001(\006\022\024\n\014time_cre"
  "ated\030\002 \001(\r\022\022\n\nis_pending\030\003 \001(\010\022\023\n\013is_can"
  "celed\030\004 \001(\010\022\017\n\007is_used\030\005 \001(\010\"@\n-CDeviceA"
  "uth_GetExcludedGamesInLibrary_Request\022\017\n"
  "\007steamid\030\001 \001(\006\"\362\001\n.CDeviceAuth_GetExclud"
  "edGamesInLibrary_Response\022`\n\016excluded_ga"
  "mes\030\001 \003(\0132H.proto.steam.CDeviceAuth_GetE"
  "xcludedGamesInLibrary_Response.ExcludedG"
  "ame\032^\n\014ExcludedGame\022\r\n\005appid\030\001 \001(\r\022\021\n\tga"
  "me_name\030\002 \001(\t\022\022\n\nvac_banned\030\003 \001(\010\022\030\n\020pac"
  "kage_excluded\030\004 \001(\010\"=\n*CDeviceAuth_GetBo"
  "rrowerPlayHistory_Request\022\017\n\007steamid\030\001 \001"
  "(\006\"\320\002\n+CDeviceAuth_GetBorrowerPlayHistor"
  "y_Response\022^\n\016lender_history\030\001 \003(\0132F.pro"
  "to.steam.CDeviceAuth_GetBorrowerPlayHist"
  "ory_Response.LenderHistory\032C\n\013GameHistor"
  "y\022\r\n\005appid\030\001 \001(\r\022\021\n\ttime_last\030\002 \001(\r\022\022\n\nt"
  "ime_total\030\003 \001(\r\032|\n\rLenderHistory\022\017\n\007stea"
  "mid\030\001 \001(\006\022Z\n\014game_history\030\002 \003(\0132D.proto."
  "steam.CDeviceAuth_GetBorrowerPlayHistory"
  "_Response.GameHistory2\312\021\n\nDeviceAuth\022\262\001\n"
  "\027GetOwnAuthorizedDevices\0228.proto.steam.C"
  "DeviceAuth_GetOwnAuthorizedDevices_Reque"
  "st\0329.proto.steam.CDeviceAuth_GetOwnAutho"
  "rizedDevices_Response\"\"\202\265\030\036Get list of a"
  "uthorized devices\022\315\001\n\032AcceptAuthorizatio"
  "nRequest\022;.proto.steam.CDeviceAuth_Accep"
  "tAuthorizationRequest_Request\032<.proto.st"
  "eam.CDeviceAuth_AcceptAuthorizationReque"
  "st_Response\"4\202\265\0300Accept an authorization"
  " request by another users\022\302\001\n\025AuthorizeR"
  "emoteDevice\0226.proto.steam.CDeviceAuth_Au"
  "thorizeRemoteDevice_Request\0327.proto.stea"
  "m.CDeviceAuth_AuthorizeRemoteDevice_Resp"
  "onse\"8\202\265\0304Authorize own remote device th"
  "at has pending request\022\263\001\n\027DeauthorizeRe"
  "moteDevice\0228.proto.steam.CDeviceAuth_Dea"
  "uthorizeRemoteDevice_Request\0329.proto.ste"
  "am.CDeviceAuth_DeauthorizeRemoteDevice_R"
  "esponse\"#\202\265\030\037Revoke own device authoriza"
  "tion\022\323\001\n\030GetUsedAuthorizedDevices\0229.prot"
  "o.steam.CDeviceAuth_GetUsedAuthorizedDev"
  "ices_Request\032:.proto.steam.CDeviceAuth_G"
  "etUsedAuthorizedDevices_Response\"@\202\265\030<Ge"
  "t list of authorized devices user played"
  " borrowed games on\022\312\001\n\026GetAuthorizedBorr"
  "owers\0227.proto.steam.CDeviceAuth_GetAutho"
  "rizedBorrowers_Request\0328.proto.steam.CDe"
  "viceAuth_GetAuthorizedBorrowers_Response"
  "\"=\202\265\0309Get list of users that can borrow "
  "on an authorized device\022\310\001\n\026AddAuthorize"
  "dBorrowers\0227.proto.steam.CDeviceAuth_Add"
  "AuthorizedBorrowers_Request\0328.proto.stea"
  "m.CDeviceAuth_AddAuthorizedBorrowers_Res"
  "ponse\";\202\265\0307Add users that can borrow on "
  "limited authorized devices\022\324\001\n\031RemoveAut"
  "horizedBorrowers\022:.proto.steam.CDeviceAu"
  "th_RemoveAuthorizedBorrowers_Request\032;.p"
  "roto.steam.CDeviceAuth_RemoveAuthorizedB"
  "orrowers_Response\">\202\265\030:Remove users that"
  " can borrow on limited authorized device"
  "s\022\321\001\n\027GetAuthorizedAsBorrower\0228.proto.st"
  "eam.CDeviceAuth_GetAuthorizedAsBorrower_"
  "Request\0329.proto.steam.CDeviceAuth_GetAut"
  "horizedAsBorrower_Response\"A\202\265\030=Get list"
  " of lenders that authorized given accoun"
  "t as borrower\022\307\001\n\031GetExcludedGamesInLibr"
  "ary\022:.proto.steam.CDeviceAuth_GetExclude"
  "dGamesInLibrary_Request\032;.proto.steam.CD"
  "eviceAuth_GetExcludedGamesInLibrary_Resp"
  "onse\"1\202\265\030-Get list of excluded games in "
  "lenders library\022\262\001\n\026GetBorrowerPlayHisto"
  "ry\0227.proto.steam.CDeviceAuth_GetBorrower"
  "PlayHistory_Request\0328.proto.steam.CDevic"
  "eAuth_GetBorrowerPlayHistory_Response\"%\202"
  "\265\030!Get list played games as borrower\032$\202\265"
  "\030 Library Sharing settings serviceB\003\200\001\001"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_steammessages_5fdeviceauth_2esteamclient_2eproto = {
  false, InitDefaults_steammessages_5fdeviceauth_2esteamclient_2eproto, 
  descriptor_table_protodef_steammessages_5fdeviceauth_2esteamclient_2eproto,
  "steammessages_deviceauth.steamclient.proto", &assign_descriptors_table_steammessages_5fdeviceauth_2esteamclient_2eproto, 5279,
};

void AddDescriptors_steammessages_5fdeviceauth_2esteamclient_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_steammessages_5funified_5fbase_2esteamclient_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_steammessages_5fdeviceauth_2esteamclient_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_steammessages_5fdeviceauth_2esteamclient_2eproto = []() { AddDescriptors_steammessages_5fdeviceauth_2esteamclient_2eproto(); return true; }();
namespace proto {
namespace steam {

// ===================================================================

void CDeviceAuth_GetOwnAuthorizedDevices_Request::InitAsDefaultInstance() {
}
class CDeviceAuth_GetOwnAuthorizedDevices_Request::HasBitSetters {
 public:
  static void set_has_steamid(CDeviceAuth_GetOwnAuthorizedDevices_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_include_canceled(CDeviceAuth_GetOwnAuthorizedDevices_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDeviceAuth_GetOwnAuthorizedDevices_Request::kSteamidFieldNumber;
const int CDeviceAuth_GetOwnAuthorizedDevices_Request::kIncludeCanceledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDeviceAuth_GetOwnAuthorizedDevices_Request::CDeviceAuth_GetOwnAuthorizedDevices_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Request)
}
CDeviceAuth_GetOwnAuthorizedDevices_Request::CDeviceAuth_GetOwnAuthorizedDevices_Request(const CDeviceAuth_GetOwnAuthorizedDevices_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&include_canceled_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(include_canceled_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Request)
}

void CDeviceAuth_GetOwnAuthorizedDevices_Request::SharedCtor() {
  ::memset(&steamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&include_canceled_) -
      reinterpret_cast<char*>(&steamid_)) + sizeof(include_canceled_));
}

CDeviceAuth_GetOwnAuthorizedDevices_Request::~CDeviceAuth_GetOwnAuthorizedDevices_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Request)
  SharedDtor();
}

void CDeviceAuth_GetOwnAuthorizedDevices_Request::SharedDtor() {
}

void CDeviceAuth_GetOwnAuthorizedDevices_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDeviceAuth_GetOwnAuthorizedDevices_Request& CDeviceAuth_GetOwnAuthorizedDevices_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDeviceAuth_GetOwnAuthorizedDevices_Request_steammessages_5fdeviceauth_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CDeviceAuth_GetOwnAuthorizedDevices_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&include_canceled_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(include_canceled_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDeviceAuth_GetOwnAuthorizedDevices_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDeviceAuth_GetOwnAuthorizedDevices_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional bool include_canceled = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_include_canceled(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDeviceAuth_GetOwnAuthorizedDevices_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool include_canceled = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_include_canceled(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &include_canceled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDeviceAuth_GetOwnAuthorizedDevices_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional bool include_canceled = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->include_canceled(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Request)
}

::google::protobuf::uint8* CDeviceAuth_GetOwnAuthorizedDevices_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional bool include_canceled = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->include_canceled(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Request)
  return target;
}

size_t CDeviceAuth_GetOwnAuthorizedDevices_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional bool include_canceled = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDeviceAuth_GetOwnAuthorizedDevices_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_GetOwnAuthorizedDevices_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CDeviceAuth_GetOwnAuthorizedDevices_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Request)
    MergeFrom(*source);
  }
}

void CDeviceAuth_GetOwnAuthorizedDevices_Request::MergeFrom(const CDeviceAuth_GetOwnAuthorizedDevices_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      include_canceled_ = from.include_canceled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDeviceAuth_GetOwnAuthorizedDevices_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_GetOwnAuthorizedDevices_Request::CopyFrom(const CDeviceAuth_GetOwnAuthorizedDevices_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_GetOwnAuthorizedDevices_Request::IsInitialized() const {
  return true;
}

void CDeviceAuth_GetOwnAuthorizedDevices_Request::Swap(CDeviceAuth_GetOwnAuthorizedDevices_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDeviceAuth_GetOwnAuthorizedDevices_Request::InternalSwap(CDeviceAuth_GetOwnAuthorizedDevices_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
  swap(include_canceled_, other->include_canceled_);
}

::google::protobuf::Metadata CDeviceAuth_GetOwnAuthorizedDevices_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fdeviceauth_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fdeviceauth_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::InitAsDefaultInstance() {
}
class CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::HasBitSetters {
 public:
  static void set_has_auth_device_token(CDeviceAuth_GetOwnAuthorizedDevices_Response_Device* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_device_name(CDeviceAuth_GetOwnAuthorizedDevices_Response_Device* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_is_pending(CDeviceAuth_GetOwnAuthorizedDevices_Response_Device* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_is_canceled(CDeviceAuth_GetOwnAuthorizedDevices_Response_Device* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_last_time_used(CDeviceAuth_GetOwnAuthorizedDevices_Response_Device* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_last_borrower_id(CDeviceAuth_GetOwnAuthorizedDevices_Response_Device* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_last_app_played(CDeviceAuth_GetOwnAuthorizedDevices_Response_Device* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_is_limited(CDeviceAuth_GetOwnAuthorizedDevices_Response_Device* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::kAuthDeviceTokenFieldNumber;
const int CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::kDeviceNameFieldNumber;
const int CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::kIsPendingFieldNumber;
const int CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::kIsCanceledFieldNumber;
const int CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::kLastTimeUsedFieldNumber;
const int CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::kLastBorrowerIdFieldNumber;
const int CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::kLastAppPlayedFieldNumber;
const int CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::kIsLimitedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::CDeviceAuth_GetOwnAuthorizedDevices_Response_Device()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device)
}
CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::CDeviceAuth_GetOwnAuthorizedDevices_Response_Device(const CDeviceAuth_GetOwnAuthorizedDevices_Response_Device& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_device_name()) {
    device_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_name_);
  }
  ::memcpy(&auth_device_token_, &from.auth_device_token_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_app_played_) -
    reinterpret_cast<char*>(&auth_device_token_)) + sizeof(last_app_played_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device)
}

void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CDeviceAuth_GetOwnAuthorizedDevices_Response_Device_steammessages_5fdeviceauth_2esteamclient_2eproto.base);
  device_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&auth_device_token_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_app_played_) -
      reinterpret_cast<char*>(&auth_device_token_)) + sizeof(last_app_played_));
}

CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::~CDeviceAuth_GetOwnAuthorizedDevices_Response_Device() {
  // @@protoc_insertion_point(destructor:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device)
  SharedDtor();
}

void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::SharedDtor() {
  device_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDeviceAuth_GetOwnAuthorizedDevices_Response_Device& CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDeviceAuth_GetOwnAuthorizedDevices_Response_Device_steammessages_5fdeviceauth_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    device_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&auth_device_token_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_app_played_) -
        reinterpret_cast<char*>(&auth_device_token_)) + sizeof(last_app_played_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDeviceAuth_GetOwnAuthorizedDevices_Response_Device*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 auth_device_token = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_auth_device_token(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional string device_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device.device_name");
        object = msg->mutable_device_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool is_pending = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_is_pending(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool is_canceled = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_is_canceled(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 last_time_used = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_last_time_used(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 last_borrower_id = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 49) goto handle_unusual;
        msg->set_last_borrower_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 last_app_played = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_last_app_played(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool is_limited = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_is_limited(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 auth_device_token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_auth_device_token(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &auth_device_token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string device_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device_name().data(), static_cast<int>(this->device_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device.device_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_pending = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_is_pending(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_pending_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_canceled = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_is_canceled(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_canceled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 last_time_used = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_last_time_used(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_time_used_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 last_borrower_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (49 & 0xFF)) {
          HasBitSetters::set_has_last_borrower_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &last_borrower_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 last_app_played = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_last_app_played(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_app_played_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_limited = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_is_limited(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_limited_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 auth_device_token = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->auth_device_token(), output);
  }

  // optional string device_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_name().data(), static_cast<int>(this->device_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device.device_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->device_name(), output);
  }

  // optional bool is_pending = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_pending(), output);
  }

  // optional bool is_canceled = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_canceled(), output);
  }

  // optional uint32 last_time_used = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->last_time_used(), output);
  }

  // optional fixed64 last_borrower_id = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->last_borrower_id(), output);
  }

  // optional uint32 last_app_played = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->last_app_played(), output);
  }

  // optional bool is_limited = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_limited(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device)
}

::google::protobuf::uint8* CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 auth_device_token = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->auth_device_token(), target);
  }

  // optional string device_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_name().data(), static_cast<int>(this->device_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device.device_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->device_name(), target);
  }

  // optional bool is_pending = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_pending(), target);
  }

  // optional bool is_canceled = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_canceled(), target);
  }

  // optional uint32 last_time_used = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->last_time_used(), target);
  }

  // optional fixed64 last_borrower_id = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->last_borrower_id(), target);
  }

  // optional uint32 last_app_played = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->last_app_played(), target);
  }

  // optional bool is_limited = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_limited(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device)
  return target;
}

size_t CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string device_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_name());
    }

    // optional fixed64 auth_device_token = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 last_time_used = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_time_used());
    }

    // optional bool is_pending = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool is_canceled = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool is_limited = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional fixed64 last_borrower_id = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional uint32 last_app_played = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_app_played());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_GetOwnAuthorizedDevices_Response_Device* source =
      ::google::protobuf::DynamicCastToGenerated<CDeviceAuth_GetOwnAuthorizedDevices_Response_Device>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device)
    MergeFrom(*source);
  }
}

void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::MergeFrom(const CDeviceAuth_GetOwnAuthorizedDevices_Response_Device& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      device_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      auth_device_token_ = from.auth_device_token_;
    }
    if (cached_has_bits & 0x00000004u) {
      last_time_used_ = from.last_time_used_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_pending_ = from.is_pending_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_canceled_ = from.is_canceled_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_limited_ = from.is_limited_;
    }
    if (cached_has_bits & 0x00000040u) {
      last_borrower_id_ = from.last_borrower_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      last_app_played_ = from.last_app_played_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::CopyFrom(const CDeviceAuth_GetOwnAuthorizedDevices_Response_Device& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::IsInitialized() const {
  return true;
}

void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::Swap(CDeviceAuth_GetOwnAuthorizedDevices_Response_Device* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::InternalSwap(CDeviceAuth_GetOwnAuthorizedDevices_Response_Device* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  device_name_.Swap(&other->device_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(auth_device_token_, other->auth_device_token_);
  swap(last_time_used_, other->last_time_used_);
  swap(is_pending_, other->is_pending_);
  swap(is_canceled_, other->is_canceled_);
  swap(is_limited_, other->is_limited_);
  swap(last_borrower_id_, other->last_borrower_id_);
  swap(last_app_played_, other->last_app_played_);
}

::google::protobuf::Metadata CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fdeviceauth_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fdeviceauth_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDeviceAuth_GetOwnAuthorizedDevices_Response::InitAsDefaultInstance() {
}
class CDeviceAuth_GetOwnAuthorizedDevices_Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDeviceAuth_GetOwnAuthorizedDevices_Response::kDevicesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDeviceAuth_GetOwnAuthorizedDevices_Response::CDeviceAuth_GetOwnAuthorizedDevices_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response)
}
CDeviceAuth_GetOwnAuthorizedDevices_Response::CDeviceAuth_GetOwnAuthorizedDevices_Response(const CDeviceAuth_GetOwnAuthorizedDevices_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      devices_(from.devices_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response)
}

void CDeviceAuth_GetOwnAuthorizedDevices_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CDeviceAuth_GetOwnAuthorizedDevices_Response_steammessages_5fdeviceauth_2esteamclient_2eproto.base);
}

CDeviceAuth_GetOwnAuthorizedDevices_Response::~CDeviceAuth_GetOwnAuthorizedDevices_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response)
  SharedDtor();
}

void CDeviceAuth_GetOwnAuthorizedDevices_Response::SharedDtor() {
}

void CDeviceAuth_GetOwnAuthorizedDevices_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDeviceAuth_GetOwnAuthorizedDevices_Response& CDeviceAuth_GetOwnAuthorizedDevices_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDeviceAuth_GetOwnAuthorizedDevices_Response_steammessages_5fdeviceauth_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CDeviceAuth_GetOwnAuthorizedDevices_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devices_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDeviceAuth_GetOwnAuthorizedDevices_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDeviceAuth_GetOwnAuthorizedDevices_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device devices = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::_InternalParse;
          object = msg->add_devices();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDeviceAuth_GetOwnAuthorizedDevices_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device devices = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_devices()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDeviceAuth_GetOwnAuthorizedDevices_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device devices = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->devices_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->devices(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response)
}

::google::protobuf::uint8* CDeviceAuth_GetOwnAuthorizedDevices_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device devices = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->devices_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->devices(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response)
  return target;
}

size_t CDeviceAuth_GetOwnAuthorizedDevices_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device devices = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->devices_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->devices(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDeviceAuth_GetOwnAuthorizedDevices_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_GetOwnAuthorizedDevices_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CDeviceAuth_GetOwnAuthorizedDevices_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response)
    MergeFrom(*source);
  }
}

void CDeviceAuth_GetOwnAuthorizedDevices_Response::MergeFrom(const CDeviceAuth_GetOwnAuthorizedDevices_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  devices_.MergeFrom(from.devices_);
}

void CDeviceAuth_GetOwnAuthorizedDevices_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_GetOwnAuthorizedDevices_Response::CopyFrom(const CDeviceAuth_GetOwnAuthorizedDevices_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_GetOwnAuthorizedDevices_Response::IsInitialized() const {
  return true;
}

void CDeviceAuth_GetOwnAuthorizedDevices_Response::Swap(CDeviceAuth_GetOwnAuthorizedDevices_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDeviceAuth_GetOwnAuthorizedDevices_Response::InternalSwap(CDeviceAuth_GetOwnAuthorizedDevices_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&devices_)->InternalSwap(CastToBase(&other->devices_));
}

::google::protobuf::Metadata CDeviceAuth_GetOwnAuthorizedDevices_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fdeviceauth_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fdeviceauth_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDeviceAuth_AcceptAuthorizationRequest_Request::InitAsDefaultInstance() {
}
class CDeviceAuth_AcceptAuthorizationRequest_Request::HasBitSetters {
 public:
  static void set_has_steamid(CDeviceAuth_AcceptAuthorizationRequest_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_auth_device_token(CDeviceAuth_AcceptAuthorizationRequest_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_auth_code(CDeviceAuth_AcceptAuthorizationRequest_Request* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_from_steamid(CDeviceAuth_AcceptAuthorizationRequest_Request* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDeviceAuth_AcceptAuthorizationRequest_Request::kSteamidFieldNumber;
const int CDeviceAuth_AcceptAuthorizationRequest_Request::kAuthDeviceTokenFieldNumber;
const int CDeviceAuth_AcceptAuthorizationRequest_Request::kAuthCodeFieldNumber;
const int CDeviceAuth_AcceptAuthorizationRequest_Request::kFromSteamidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDeviceAuth_AcceptAuthorizationRequest_Request::CDeviceAuth_AcceptAuthorizationRequest_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Request)
}
CDeviceAuth_AcceptAuthorizationRequest_Request::CDeviceAuth_AcceptAuthorizationRequest_Request(const CDeviceAuth_AcceptAuthorizationRequest_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&from_steamid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(from_steamid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Request)
}

void CDeviceAuth_AcceptAuthorizationRequest_Request::SharedCtor() {
  ::memset(&steamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&from_steamid_) -
      reinterpret_cast<char*>(&steamid_)) + sizeof(from_steamid_));
}

CDeviceAuth_AcceptAuthorizationRequest_Request::~CDeviceAuth_AcceptAuthorizationRequest_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Request)
  SharedDtor();
}

void CDeviceAuth_AcceptAuthorizationRequest_Request::SharedDtor() {
}

void CDeviceAuth_AcceptAuthorizationRequest_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDeviceAuth_AcceptAuthorizationRequest_Request& CDeviceAuth_AcceptAuthorizationRequest_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDeviceAuth_AcceptAuthorizationRequest_Request_steammessages_5fdeviceauth_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CDeviceAuth_AcceptAuthorizationRequest_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&from_steamid_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(from_steamid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDeviceAuth_AcceptAuthorizationRequest_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDeviceAuth_AcceptAuthorizationRequest_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed64 auth_device_token = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_auth_device_token(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed64 auth_code = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_auth_code(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed64 from_steamid = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_from_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDeviceAuth_AcceptAuthorizationRequest_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 auth_device_token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_auth_device_token(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &auth_device_token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 auth_code = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          HasBitSetters::set_has_auth_code(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &auth_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 from_steamid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {
          HasBitSetters::set_has_from_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &from_steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDeviceAuth_AcceptAuthorizationRequest_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional fixed64 auth_device_token = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->auth_device_token(), output);
  }

  // optional fixed64 auth_code = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->auth_code(), output);
  }

  // optional fixed64 from_steamid = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->from_steamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Request)
}

::google::protobuf::uint8* CDeviceAuth_AcceptAuthorizationRequest_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional fixed64 auth_device_token = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->auth_device_token(), target);
  }

  // optional fixed64 auth_code = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->auth_code(), target);
  }

  // optional fixed64 from_steamid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->from_steamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Request)
  return target;
}

size_t CDeviceAuth_AcceptAuthorizationRequest_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 auth_device_token = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 auth_code = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional fixed64 from_steamid = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDeviceAuth_AcceptAuthorizationRequest_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_AcceptAuthorizationRequest_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CDeviceAuth_AcceptAuthorizationRequest_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Request)
    MergeFrom(*source);
  }
}

void CDeviceAuth_AcceptAuthorizationRequest_Request::MergeFrom(const CDeviceAuth_AcceptAuthorizationRequest_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      auth_device_token_ = from.auth_device_token_;
    }
    if (cached_has_bits & 0x00000004u) {
      auth_code_ = from.auth_code_;
    }
    if (cached_has_bits & 0x00000008u) {
      from_steamid_ = from.from_steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDeviceAuth_AcceptAuthorizationRequest_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_AcceptAuthorizationRequest_Request::CopyFrom(const CDeviceAuth_AcceptAuthorizationRequest_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_AcceptAuthorizationRequest_Request::IsInitialized() const {
  return true;
}

void CDeviceAuth_AcceptAuthorizationRequest_Request::Swap(CDeviceAuth_AcceptAuthorizationRequest_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDeviceAuth_AcceptAuthorizationRequest_Request::InternalSwap(CDeviceAuth_AcceptAuthorizationRequest_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
  swap(auth_device_token_, other->auth_device_token_);
  swap(auth_code_, other->auth_code_);
  swap(from_steamid_, other->from_steamid_);
}

::google::protobuf::Metadata CDeviceAuth_AcceptAuthorizationRequest_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fdeviceauth_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fdeviceauth_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDeviceAuth_AcceptAuthorizationRequest_Response::InitAsDefaultInstance() {
}
class CDeviceAuth_AcceptAuthorizationRequest_Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDeviceAuth_AcceptAuthorizationRequest_Response::CDeviceAuth_AcceptAuthorizationRequest_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Response)
}
CDeviceAuth_AcceptAuthorizationRequest_Response::CDeviceAuth_AcceptAuthorizationRequest_Response(const CDeviceAuth_AcceptAuthorizationRequest_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Response)
}

void CDeviceAuth_AcceptAuthorizationRequest_Response::SharedCtor() {
}

CDeviceAuth_AcceptAuthorizationRequest_Response::~CDeviceAuth_AcceptAuthorizationRequest_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Response)
  SharedDtor();
}

void CDeviceAuth_AcceptAuthorizationRequest_Response::SharedDtor() {
}

void CDeviceAuth_AcceptAuthorizationRequest_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDeviceAuth_AcceptAuthorizationRequest_Response& CDeviceAuth_AcceptAuthorizationRequest_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDeviceAuth_AcceptAuthorizationRequest_Response_steammessages_5fdeviceauth_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CDeviceAuth_AcceptAuthorizationRequest_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDeviceAuth_AcceptAuthorizationRequest_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDeviceAuth_AcceptAuthorizationRequest_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDeviceAuth_AcceptAuthorizationRequest_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDeviceAuth_AcceptAuthorizationRequest_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Response)
}

::google::protobuf::uint8* CDeviceAuth_AcceptAuthorizationRequest_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Response)
  return target;
}

size_t CDeviceAuth_AcceptAuthorizationRequest_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDeviceAuth_AcceptAuthorizationRequest_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_AcceptAuthorizationRequest_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CDeviceAuth_AcceptAuthorizationRequest_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Response)
    MergeFrom(*source);
  }
}

void CDeviceAuth_AcceptAuthorizationRequest_Response::MergeFrom(const CDeviceAuth_AcceptAuthorizationRequest_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CDeviceAuth_AcceptAuthorizationRequest_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_AcceptAuthorizationRequest_Response::CopyFrom(const CDeviceAuth_AcceptAuthorizationRequest_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_AcceptAuthorizationRequest_Response::IsInitialized() const {
  return true;
}

void CDeviceAuth_AcceptAuthorizationRequest_Response::Swap(CDeviceAuth_AcceptAuthorizationRequest_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDeviceAuth_AcceptAuthorizationRequest_Response::InternalSwap(CDeviceAuth_AcceptAuthorizationRequest_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CDeviceAuth_AcceptAuthorizationRequest_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fdeviceauth_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fdeviceauth_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDeviceAuth_AuthorizeRemoteDevice_Request::InitAsDefaultInstance() {
}
class CDeviceAuth_AuthorizeRemoteDevice_Request::HasBitSetters {
 public:
  static void set_has_steamid(CDeviceAuth_AuthorizeRemoteDevice_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_auth_device_token(CDeviceAuth_AuthorizeRemoteDevice_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDeviceAuth_AuthorizeRemoteDevice_Request::kSteamidFieldNumber;
const int CDeviceAuth_AuthorizeRemoteDevice_Request::kAuthDeviceTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDeviceAuth_AuthorizeRemoteDevice_Request::CDeviceAuth_AuthorizeRemoteDevice_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Request)
}
CDeviceAuth_AuthorizeRemoteDevice_Request::CDeviceAuth_AuthorizeRemoteDevice_Request(const CDeviceAuth_AuthorizeRemoteDevice_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&auth_device_token_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(auth_device_token_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Request)
}

void CDeviceAuth_AuthorizeRemoteDevice_Request::SharedCtor() {
  ::memset(&steamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&auth_device_token_) -
      reinterpret_cast<char*>(&steamid_)) + sizeof(auth_device_token_));
}

CDeviceAuth_AuthorizeRemoteDevice_Request::~CDeviceAuth_AuthorizeRemoteDevice_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Request)
  SharedDtor();
}

void CDeviceAuth_AuthorizeRemoteDevice_Request::SharedDtor() {
}

void CDeviceAuth_AuthorizeRemoteDevice_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDeviceAuth_AuthorizeRemoteDevice_Request& CDeviceAuth_AuthorizeRemoteDevice_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDeviceAuth_AuthorizeRemoteDevice_Request_steammessages_5fdeviceauth_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CDeviceAuth_AuthorizeRemoteDevice_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&auth_device_token_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(auth_device_token_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDeviceAuth_AuthorizeRemoteDevice_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDeviceAuth_AuthorizeRemoteDevice_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed64 auth_device_token = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_auth_device_token(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDeviceAuth_AuthorizeRemoteDevice_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 auth_device_token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_auth_device_token(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &auth_device_token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDeviceAuth_AuthorizeRemoteDevice_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional fixed64 auth_device_token = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->auth_device_token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Request)
}

::google::protobuf::uint8* CDeviceAuth_AuthorizeRemoteDevice_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional fixed64 auth_device_token = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->auth_device_token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Request)
  return target;
}

size_t CDeviceAuth_AuthorizeRemoteDevice_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 auth_device_token = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDeviceAuth_AuthorizeRemoteDevice_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_AuthorizeRemoteDevice_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CDeviceAuth_AuthorizeRemoteDevice_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Request)
    MergeFrom(*source);
  }
}

void CDeviceAuth_AuthorizeRemoteDevice_Request::MergeFrom(const CDeviceAuth_AuthorizeRemoteDevice_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      auth_device_token_ = from.auth_device_token_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDeviceAuth_AuthorizeRemoteDevice_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_AuthorizeRemoteDevice_Request::CopyFrom(const CDeviceAuth_AuthorizeRemoteDevice_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_AuthorizeRemoteDevice_Request::IsInitialized() const {
  return true;
}

void CDeviceAuth_AuthorizeRemoteDevice_Request::Swap(CDeviceAuth_AuthorizeRemoteDevice_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDeviceAuth_AuthorizeRemoteDevice_Request::InternalSwap(CDeviceAuth_AuthorizeRemoteDevice_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
  swap(auth_device_token_, other->auth_device_token_);
}

::google::protobuf::Metadata CDeviceAuth_AuthorizeRemoteDevice_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fdeviceauth_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fdeviceauth_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDeviceAuth_AuthorizeRemoteDevice_Response::InitAsDefaultInstance() {
}
class CDeviceAuth_AuthorizeRemoteDevice_Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDeviceAuth_AuthorizeRemoteDevice_Response::CDeviceAuth_AuthorizeRemoteDevice_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Response)
}
CDeviceAuth_AuthorizeRemoteDevice_Response::CDeviceAuth_AuthorizeRemoteDevice_Response(const CDeviceAuth_AuthorizeRemoteDevice_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Response)
}

void CDeviceAuth_AuthorizeRemoteDevice_Response::SharedCtor() {
}

CDeviceAuth_AuthorizeRemoteDevice_Response::~CDeviceAuth_AuthorizeRemoteDevice_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Response)
  SharedDtor();
}

void CDeviceAuth_AuthorizeRemoteDevice_Response::SharedDtor() {
}

void CDeviceAuth_AuthorizeRemoteDevice_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDeviceAuth_AuthorizeRemoteDevice_Response& CDeviceAuth_AuthorizeRemoteDevice_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDeviceAuth_AuthorizeRemoteDevice_Response_steammessages_5fdeviceauth_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CDeviceAuth_AuthorizeRemoteDevice_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDeviceAuth_AuthorizeRemoteDevice_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDeviceAuth_AuthorizeRemoteDevice_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDeviceAuth_AuthorizeRemoteDevice_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDeviceAuth_AuthorizeRemoteDevice_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Response)
}

::google::protobuf::uint8* CDeviceAuth_AuthorizeRemoteDevice_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Response)
  return target;
}

size_t CDeviceAuth_AuthorizeRemoteDevice_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDeviceAuth_AuthorizeRemoteDevice_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_AuthorizeRemoteDevice_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CDeviceAuth_AuthorizeRemoteDevice_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Response)
    MergeFrom(*source);
  }
}

void CDeviceAuth_AuthorizeRemoteDevice_Response::MergeFrom(const CDeviceAuth_AuthorizeRemoteDevice_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CDeviceAuth_AuthorizeRemoteDevice_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_AuthorizeRemoteDevice_Response::CopyFrom(const CDeviceAuth_AuthorizeRemoteDevice_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_AuthorizeRemoteDevice_Response::IsInitialized() const {
  return true;
}

void CDeviceAuth_AuthorizeRemoteDevice_Response::Swap(CDeviceAuth_AuthorizeRemoteDevice_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDeviceAuth_AuthorizeRemoteDevice_Response::InternalSwap(CDeviceAuth_AuthorizeRemoteDevice_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CDeviceAuth_AuthorizeRemoteDevice_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fdeviceauth_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fdeviceauth_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDeviceAuth_DeauthorizeRemoteDevice_Request::InitAsDefaultInstance() {
}
class CDeviceAuth_DeauthorizeRemoteDevice_Request::HasBitSetters {
 public:
  static void set_has_steamid(CDeviceAuth_DeauthorizeRemoteDevice_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_auth_device_token(CDeviceAuth_DeauthorizeRemoteDevice_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDeviceAuth_DeauthorizeRemoteDevice_Request::kSteamidFieldNumber;
const int CDeviceAuth_DeauthorizeRemoteDevice_Request::kAuthDeviceTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDeviceAuth_DeauthorizeRemoteDevice_Request::CDeviceAuth_DeauthorizeRemoteDevice_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Request)
}
CDeviceAuth_DeauthorizeRemoteDevice_Request::CDeviceAuth_DeauthorizeRemoteDevice_Request(const CDeviceAuth_DeauthorizeRemoteDevice_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&auth_device_token_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(auth_device_token_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Request)
}

void CDeviceAuth_DeauthorizeRemoteDevice_Request::SharedCtor() {
  ::memset(&steamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&auth_device_token_) -
      reinterpret_cast<char*>(&steamid_)) + sizeof(auth_device_token_));
}

CDeviceAuth_DeauthorizeRemoteDevice_Request::~CDeviceAuth_DeauthorizeRemoteDevice_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Request)
  SharedDtor();
}

void CDeviceAuth_DeauthorizeRemoteDevice_Request::SharedDtor() {
}

void CDeviceAuth_DeauthorizeRemoteDevice_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDeviceAuth_DeauthorizeRemoteDevice_Request& CDeviceAuth_DeauthorizeRemoteDevice_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDeviceAuth_DeauthorizeRemoteDevice_Request_steammessages_5fdeviceauth_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CDeviceAuth_DeauthorizeRemoteDevice_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&auth_device_token_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(auth_device_token_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDeviceAuth_DeauthorizeRemoteDevice_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDeviceAuth_DeauthorizeRemoteDevice_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed64 auth_device_token = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_auth_device_token(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDeviceAuth_DeauthorizeRemoteDevice_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 auth_device_token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_auth_device_token(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &auth_device_token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDeviceAuth_DeauthorizeRemoteDevice_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional fixed64 auth_device_token = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->auth_device_token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Request)
}

::google::protobuf::uint8* CDeviceAuth_DeauthorizeRemoteDevice_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional fixed64 auth_device_token = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->auth_device_token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Request)
  return target;
}

size_t CDeviceAuth_DeauthorizeRemoteDevice_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 auth_device_token = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDeviceAuth_DeauthorizeRemoteDevice_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_DeauthorizeRemoteDevice_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CDeviceAuth_DeauthorizeRemoteDevice_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Request)
    MergeFrom(*source);
  }
}

void CDeviceAuth_DeauthorizeRemoteDevice_Request::MergeFrom(const CDeviceAuth_DeauthorizeRemoteDevice_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      auth_device_token_ = from.auth_device_token_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDeviceAuth_DeauthorizeRemoteDevice_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_DeauthorizeRemoteDevice_Request::CopyFrom(const CDeviceAuth_DeauthorizeRemoteDevice_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_DeauthorizeRemoteDevice_Request::IsInitialized() const {
  return true;
}

void CDeviceAuth_DeauthorizeRemoteDevice_Request::Swap(CDeviceAuth_DeauthorizeRemoteDevice_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDeviceAuth_DeauthorizeRemoteDevice_Request::InternalSwap(CDeviceAuth_DeauthorizeRemoteDevice_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
  swap(auth_device_token_, other->auth_device_token_);
}

::google::protobuf::Metadata CDeviceAuth_DeauthorizeRemoteDevice_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fdeviceauth_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fdeviceauth_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDeviceAuth_DeauthorizeRemoteDevice_Response::InitAsDefaultInstance() {
}
class CDeviceAuth_DeauthorizeRemoteDevice_Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDeviceAuth_DeauthorizeRemoteDevice_Response::CDeviceAuth_DeauthorizeRemoteDevice_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Response)
}
CDeviceAuth_DeauthorizeRemoteDevice_Response::CDeviceAuth_DeauthorizeRemoteDevice_Response(const CDeviceAuth_DeauthorizeRemoteDevice_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Response)
}

void CDeviceAuth_DeauthorizeRemoteDevice_Response::SharedCtor() {
}

CDeviceAuth_DeauthorizeRemoteDevice_Response::~CDeviceAuth_DeauthorizeRemoteDevice_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Response)
  SharedDtor();
}

void CDeviceAuth_DeauthorizeRemoteDevice_Response::SharedDtor() {
}

void CDeviceAuth_DeauthorizeRemoteDevice_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDeviceAuth_DeauthorizeRemoteDevice_Response& CDeviceAuth_DeauthorizeRemoteDevice_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDeviceAuth_DeauthorizeRemoteDevice_Response_steammessages_5fdeviceauth_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CDeviceAuth_DeauthorizeRemoteDevice_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDeviceAuth_DeauthorizeRemoteDevice_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDeviceAuth_DeauthorizeRemoteDevice_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDeviceAuth_DeauthorizeRemoteDevice_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDeviceAuth_DeauthorizeRemoteDevice_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Response)
}

::google::protobuf::uint8* CDeviceAuth_DeauthorizeRemoteDevice_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Response)
  return target;
}

size_t CDeviceAuth_DeauthorizeRemoteDevice_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDeviceAuth_DeauthorizeRemoteDevice_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_DeauthorizeRemoteDevice_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CDeviceAuth_DeauthorizeRemoteDevice_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Response)
    MergeFrom(*source);
  }
}

void CDeviceAuth_DeauthorizeRemoteDevice_Response::MergeFrom(const CDeviceAuth_DeauthorizeRemoteDevice_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CDeviceAuth_DeauthorizeRemoteDevice_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_DeauthorizeRemoteDevice_Response::CopyFrom(const CDeviceAuth_DeauthorizeRemoteDevice_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_DeauthorizeRemoteDevice_Response::IsInitialized() const {
  return true;
}

void CDeviceAuth_DeauthorizeRemoteDevice_Response::Swap(CDeviceAuth_DeauthorizeRemoteDevice_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDeviceAuth_DeauthorizeRemoteDevice_Response::InternalSwap(CDeviceAuth_DeauthorizeRemoteDevice_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CDeviceAuth_DeauthorizeRemoteDevice_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fdeviceauth_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fdeviceauth_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDeviceAuth_GetUsedAuthorizedDevices_Request::InitAsDefaultInstance() {
}
class CDeviceAuth_GetUsedAuthorizedDevices_Request::HasBitSetters {
 public:
  static void set_has_steamid(CDeviceAuth_GetUsedAuthorizedDevices_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDeviceAuth_GetUsedAuthorizedDevices_Request::kSteamidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDeviceAuth_GetUsedAuthorizedDevices_Request::CDeviceAuth_GetUsedAuthorizedDevices_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Request)
}
CDeviceAuth_GetUsedAuthorizedDevices_Request::CDeviceAuth_GetUsedAuthorizedDevices_Request(const CDeviceAuth_GetUsedAuthorizedDevices_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Request)
}

void CDeviceAuth_GetUsedAuthorizedDevices_Request::SharedCtor() {
  steamid_ = PROTOBUF_ULONGLONG(0);
}

CDeviceAuth_GetUsedAuthorizedDevices_Request::~CDeviceAuth_GetUsedAuthorizedDevices_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Request)
  SharedDtor();
}

void CDeviceAuth_GetUsedAuthorizedDevices_Request::SharedDtor() {
}

void CDeviceAuth_GetUsedAuthorizedDevices_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDeviceAuth_GetUsedAuthorizedDevices_Request& CDeviceAuth_GetUsedAuthorizedDevices_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDeviceAuth_GetUsedAuthorizedDevices_Request_steammessages_5fdeviceauth_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CDeviceAuth_GetUsedAuthorizedDevices_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDeviceAuth_GetUsedAuthorizedDevices_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDeviceAuth_GetUsedAuthorizedDevices_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDeviceAuth_GetUsedAuthorizedDevices_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDeviceAuth_GetUsedAuthorizedDevices_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Request)
}

::google::protobuf::uint8* CDeviceAuth_GetUsedAuthorizedDevices_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Request)
  return target;
}

size_t CDeviceAuth_GetUsedAuthorizedDevices_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 steamid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDeviceAuth_GetUsedAuthorizedDevices_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_GetUsedAuthorizedDevices_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CDeviceAuth_GetUsedAuthorizedDevices_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Request)
    MergeFrom(*source);
  }
}

void CDeviceAuth_GetUsedAuthorizedDevices_Request::MergeFrom(const CDeviceAuth_GetUsedAuthorizedDevices_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_steamid()) {
    set_steamid(from.steamid());
  }
}

void CDeviceAuth_GetUsedAuthorizedDevices_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_GetUsedAuthorizedDevices_Request::CopyFrom(const CDeviceAuth_GetUsedAuthorizedDevices_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_GetUsedAuthorizedDevices_Request::IsInitialized() const {
  return true;
}

void CDeviceAuth_GetUsedAuthorizedDevices_Request::Swap(CDeviceAuth_GetUsedAuthorizedDevices_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDeviceAuth_GetUsedAuthorizedDevices_Request::InternalSwap(CDeviceAuth_GetUsedAuthorizedDevices_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
}

::google::protobuf::Metadata CDeviceAuth_GetUsedAuthorizedDevices_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fdeviceauth_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fdeviceauth_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::InitAsDefaultInstance() {
}
class CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::HasBitSetters {
 public:
  static void set_has_auth_device_token(CDeviceAuth_GetUsedAuthorizedDevices_Response_Device* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_device_name(CDeviceAuth_GetUsedAuthorizedDevices_Response_Device* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_owner_steamid(CDeviceAuth_GetUsedAuthorizedDevices_Response_Device* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_last_time_used(CDeviceAuth_GetUsedAuthorizedDevices_Response_Device* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_last_app_played(CDeviceAuth_GetUsedAuthorizedDevices_Response_Device* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::kAuthDeviceTokenFieldNumber;
const int CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::kDeviceNameFieldNumber;
const int CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::kOwnerSteamidFieldNumber;
const int CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::kLastTimeUsedFieldNumber;
const int CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::kLastAppPlayedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::CDeviceAuth_GetUsedAuthorizedDevices_Response_Device()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.Device)
}
CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::CDeviceAuth_GetUsedAuthorizedDevices_Response_Device(const CDeviceAuth_GetUsedAuthorizedDevices_Response_Device& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_device_name()) {
    device_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_name_);
  }
  ::memcpy(&auth_device_token_, &from.auth_device_token_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_app_played_) -
    reinterpret_cast<char*>(&auth_device_token_)) + sizeof(last_app_played_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.Device)
}

void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CDeviceAuth_GetUsedAuthorizedDevices_Response_Device_steammessages_5fdeviceauth_2esteamclient_2eproto.base);
  device_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&auth_device_token_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_app_played_) -
      reinterpret_cast<char*>(&auth_device_token_)) + sizeof(last_app_played_));
}

CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::~CDeviceAuth_GetUsedAuthorizedDevices_Response_Device() {
  // @@protoc_insertion_point(destructor:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.Device)
  SharedDtor();
}

void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::SharedDtor() {
  device_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDeviceAuth_GetUsedAuthorizedDevices_Response_Device& CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDeviceAuth_GetUsedAuthorizedDevices_Response_Device_steammessages_5fdeviceauth_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.Device)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    device_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&auth_device_token_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_app_played_) -
        reinterpret_cast<char*>(&auth_device_token_)) + sizeof(last_app_played_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDeviceAuth_GetUsedAuthorizedDevices_Response_Device*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 auth_device_token = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_auth_device_token(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional string device_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.Device.device_name");
        object = msg->mutable_device_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional fixed64 owner_steamid = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_owner_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 last_time_used = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_last_time_used(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 last_app_played = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_last_app_played(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.Device)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 auth_device_token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_auth_device_token(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &auth_device_token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string device_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device_name().data(), static_cast<int>(this->device_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.Device.device_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 owner_steamid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          HasBitSetters::set_has_owner_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &owner_steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 last_time_used = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_last_time_used(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_time_used_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 last_app_played = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_last_app_played(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_app_played_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.Device)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.Device)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.Device)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 auth_device_token = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->auth_device_token(), output);
  }

  // optional string device_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_name().data(), static_cast<int>(this->device_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.Device.device_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->device_name(), output);
  }

  // optional fixed64 owner_steamid = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->owner_steamid(), output);
  }

  // optional uint32 last_time_used = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->last_time_used(), output);
  }

  // optional uint32 last_app_played = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->last_app_played(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.Device)
}

::google::protobuf::uint8* CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.Device)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 auth_device_token = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->auth_device_token(), target);
  }

  // optional string device_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_name().data(), static_cast<int>(this->device_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.Device.device_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->device_name(), target);
  }

  // optional fixed64 owner_steamid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->owner_steamid(), target);
  }

  // optional uint32 last_time_used = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->last_time_used(), target);
  }

  // optional uint32 last_app_played = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->last_app_played(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.Device)
  return target;
}

size_t CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.Device)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string device_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_name());
    }

    // optional fixed64 auth_device_token = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 owner_steamid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 last_time_used = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_time_used());
    }

    // optional uint32 last_app_played = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_app_played());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.Device)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_GetUsedAuthorizedDevices_Response_Device* source =
      ::google::protobuf::DynamicCastToGenerated<CDeviceAuth_GetUsedAuthorizedDevices_Response_Device>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.Device)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.Device)
    MergeFrom(*source);
  }
}

void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::MergeFrom(const CDeviceAuth_GetUsedAuthorizedDevices_Response_Device& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.Device)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      device_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      auth_device_token_ = from.auth_device_token_;
    }
    if (cached_has_bits & 0x00000004u) {
      owner_steamid_ = from.owner_steamid_;
    }
    if (cached_has_bits & 0x00000008u) {
      last_time_used_ = from.last_time_used_;
    }
    if (cached_has_bits & 0x00000010u) {
      last_app_played_ = from.last_app_played_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.Device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::CopyFrom(const CDeviceAuth_GetUsedAuthorizedDevices_Response_Device& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.Device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::IsInitialized() const {
  return true;
}

void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::Swap(CDeviceAuth_GetUsedAuthorizedDevices_Response_Device* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::InternalSwap(CDeviceAuth_GetUsedAuthorizedDevices_Response_Device* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  device_name_.Swap(&other->device_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(auth_device_token_, other->auth_device_token_);
  swap(owner_steamid_, other->owner_steamid_);
  swap(last_time_used_, other->last_time_used_);
  swap(last_app_played_, other->last_app_played_);
}

::google::protobuf::Metadata CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fdeviceauth_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fdeviceauth_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDeviceAuth_GetUsedAuthorizedDevices_Response::InitAsDefaultInstance() {
}
class CDeviceAuth_GetUsedAuthorizedDevices_Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDeviceAuth_GetUsedAuthorizedDevices_Response::kDevicesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDeviceAuth_GetUsedAuthorizedDevices_Response::CDeviceAuth_GetUsedAuthorizedDevices_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response)
}
CDeviceAuth_GetUsedAuthorizedDevices_Response::CDeviceAuth_GetUsedAuthorizedDevices_Response(const CDeviceAuth_GetUsedAuthorizedDevices_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      devices_(from.devices_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response)
}

void CDeviceAuth_GetUsedAuthorizedDevices_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CDeviceAuth_GetUsedAuthorizedDevices_Response_steammessages_5fdeviceauth_2esteamclient_2eproto.base);
}

CDeviceAuth_GetUsedAuthorizedDevices_Response::~CDeviceAuth_GetUsedAuthorizedDevices_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response)
  SharedDtor();
}

void CDeviceAuth_GetUsedAuthorizedDevices_Response::SharedDtor() {
}

void CDeviceAuth_GetUsedAuthorizedDevices_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDeviceAuth_GetUsedAuthorizedDevices_Response& CDeviceAuth_GetUsedAuthorizedDevices_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDeviceAuth_GetUsedAuthorizedDevices_Response_steammessages_5fdeviceauth_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CDeviceAuth_GetUsedAuthorizedDevices_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devices_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDeviceAuth_GetUsedAuthorizedDevices_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDeviceAuth_GetUsedAuthorizedDevices_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.Device devices = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::_InternalParse;
          object = msg->add_devices();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDeviceAuth_GetUsedAuthorizedDevices_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.Device devices = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_devices()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDeviceAuth_GetUsedAuthorizedDevices_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.Device devices = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->devices_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->devices(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response)
}

::google::protobuf::uint8* CDeviceAuth_GetUsedAuthorizedDevices_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.Device devices = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->devices_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->devices(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response)
  return target;
}

size_t CDeviceAuth_GetUsedAuthorizedDevices_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.Device devices = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->devices_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->devices(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDeviceAuth_GetUsedAuthorizedDevices_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_GetUsedAuthorizedDevices_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CDeviceAuth_GetUsedAuthorizedDevices_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response)
    MergeFrom(*source);
  }
}

void CDeviceAuth_GetUsedAuthorizedDevices_Response::MergeFrom(const CDeviceAuth_GetUsedAuthorizedDevices_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  devices_.MergeFrom(from.devices_);
}

void CDeviceAuth_GetUsedAuthorizedDevices_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_GetUsedAuthorizedDevices_Response::CopyFrom(const CDeviceAuth_GetUsedAuthorizedDevices_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_GetUsedAuthorizedDevices_Response::IsInitialized() const {
  return true;
}

void CDeviceAuth_GetUsedAuthorizedDevices_Response::Swap(CDeviceAuth_GetUsedAuthorizedDevices_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDeviceAuth_GetUsedAuthorizedDevices_Response::InternalSwap(CDeviceAuth_GetUsedAuthorizedDevices_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&devices_)->InternalSwap(CastToBase(&other->devices_));
}

::google::protobuf::Metadata CDeviceAuth_GetUsedAuthorizedDevices_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fdeviceauth_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fdeviceauth_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDeviceAuth_GetAuthorizedBorrowers_Request::InitAsDefaultInstance() {
}
class CDeviceAuth_GetAuthorizedBorrowers_Request::HasBitSetters {
 public:
  static void set_has_steamid(CDeviceAuth_GetAuthorizedBorrowers_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_include_canceled(CDeviceAuth_GetAuthorizedBorrowers_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_include_pending(CDeviceAuth_GetAuthorizedBorrowers_Request* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDeviceAuth_GetAuthorizedBorrowers_Request::kSteamidFieldNumber;
const int CDeviceAuth_GetAuthorizedBorrowers_Request::kIncludeCanceledFieldNumber;
const int CDeviceAuth_GetAuthorizedBorrowers_Request::kIncludePendingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDeviceAuth_GetAuthorizedBorrowers_Request::CDeviceAuth_GetAuthorizedBorrowers_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Request)
}
CDeviceAuth_GetAuthorizedBorrowers_Request::CDeviceAuth_GetAuthorizedBorrowers_Request(const CDeviceAuth_GetAuthorizedBorrowers_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&include_pending_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(include_pending_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Request)
}

void CDeviceAuth_GetAuthorizedBorrowers_Request::SharedCtor() {
  ::memset(&steamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&include_pending_) -
      reinterpret_cast<char*>(&steamid_)) + sizeof(include_pending_));
}

CDeviceAuth_GetAuthorizedBorrowers_Request::~CDeviceAuth_GetAuthorizedBorrowers_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Request)
  SharedDtor();
}

void CDeviceAuth_GetAuthorizedBorrowers_Request::SharedDtor() {
}

void CDeviceAuth_GetAuthorizedBorrowers_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDeviceAuth_GetAuthorizedBorrowers_Request& CDeviceAuth_GetAuthorizedBorrowers_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDeviceAuth_GetAuthorizedBorrowers_Request_steammessages_5fdeviceauth_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CDeviceAuth_GetAuthorizedBorrowers_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&include_pending_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(include_pending_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDeviceAuth_GetAuthorizedBorrowers_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDeviceAuth_GetAuthorizedBorrowers_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional bool include_canceled = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_include_canceled(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool include_pending = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_include_pending(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDeviceAuth_GetAuthorizedBorrowers_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool include_canceled = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_include_canceled(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &include_canceled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool include_pending = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_include_pending(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &include_pending_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDeviceAuth_GetAuthorizedBorrowers_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional bool include_canceled = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->include_canceled(), output);
  }

  // optional bool include_pending = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->include_pending(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Request)
}

::google::protobuf::uint8* CDeviceAuth_GetAuthorizedBorrowers_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional bool include_canceled = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->include_canceled(), target);
  }

  // optional bool include_pending = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->include_pending(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Request)
  return target;
}

size_t CDeviceAuth_GetAuthorizedBorrowers_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional bool include_canceled = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool include_pending = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDeviceAuth_GetAuthorizedBorrowers_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_GetAuthorizedBorrowers_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CDeviceAuth_GetAuthorizedBorrowers_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Request)
    MergeFrom(*source);
  }
}

void CDeviceAuth_GetAuthorizedBorrowers_Request::MergeFrom(const CDeviceAuth_GetAuthorizedBorrowers_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      include_canceled_ = from.include_canceled_;
    }
    if (cached_has_bits & 0x00000004u) {
      include_pending_ = from.include_pending_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDeviceAuth_GetAuthorizedBorrowers_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_GetAuthorizedBorrowers_Request::CopyFrom(const CDeviceAuth_GetAuthorizedBorrowers_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_GetAuthorizedBorrowers_Request::IsInitialized() const {
  return true;
}

void CDeviceAuth_GetAuthorizedBorrowers_Request::Swap(CDeviceAuth_GetAuthorizedBorrowers_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDeviceAuth_GetAuthorizedBorrowers_Request::InternalSwap(CDeviceAuth_GetAuthorizedBorrowers_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
  swap(include_canceled_, other->include_canceled_);
  swap(include_pending_, other->include_pending_);
}

::google::protobuf::Metadata CDeviceAuth_GetAuthorizedBorrowers_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fdeviceauth_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fdeviceauth_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::InitAsDefaultInstance() {
}
class CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::HasBitSetters {
 public:
  static void set_has_steamid(CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_is_pending(CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_is_canceled(CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_time_created(CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::kSteamidFieldNumber;
const int CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::kIsPendingFieldNumber;
const int CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::kIsCanceledFieldNumber;
const int CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::kTimeCreatedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower)
}
CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower(const CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_created_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(time_created_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower)
}

void CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::SharedCtor() {
  ::memset(&steamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_created_) -
      reinterpret_cast<char*>(&steamid_)) + sizeof(time_created_));
}

CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::~CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower() {
  // @@protoc_insertion_point(destructor:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower)
  SharedDtor();
}

void CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::SharedDtor() {
}

void CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower& CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower_steammessages_5fdeviceauth_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_created_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(time_created_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional bool is_pending = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_is_pending(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool is_canceled = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_is_canceled(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 time_created = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_time_created(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_pending = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_is_pending(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_pending_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_canceled = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_is_canceled(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_canceled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_created = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_time_created(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_created_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional bool is_pending = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_pending(), output);
  }

  // optional bool is_canceled = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_canceled(), output);
  }

  // optional uint32 time_created = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time_created(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower)
}

::google::protobuf::uint8* CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional bool is_pending = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_pending(), target);
  }

  // optional bool is_canceled = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_canceled(), target);
  }

  // optional uint32 time_created = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time_created(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower)
  return target;
}

size_t CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional bool is_pending = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool is_canceled = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional uint32 time_created = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_created());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower* source =
      ::google::protobuf::DynamicCastToGenerated<CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower)
    MergeFrom(*source);
  }
}

void CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::MergeFrom(const CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_pending_ = from.is_pending_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_canceled_ = from.is_canceled_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_created_ = from.time_created_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::CopyFrom(const CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::IsInitialized() const {
  return true;
}

void CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::Swap(CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::InternalSwap(CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
  swap(is_pending_, other->is_pending_);
  swap(is_canceled_, other->is_canceled_);
  swap(time_created_, other->time_created_);
}

::google::protobuf::Metadata CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fdeviceauth_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fdeviceauth_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDeviceAuth_GetAuthorizedBorrowers_Response::InitAsDefaultInstance() {
}
class CDeviceAuth_GetAuthorizedBorrowers_Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDeviceAuth_GetAuthorizedBorrowers_Response::kBorrowersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDeviceAuth_GetAuthorizedBorrowers_Response::CDeviceAuth_GetAuthorizedBorrowers_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response)
}
CDeviceAuth_GetAuthorizedBorrowers_Response::CDeviceAuth_GetAuthorizedBorrowers_Response(const CDeviceAuth_GetAuthorizedBorrowers_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      borrowers_(from.borrowers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response)
}

void CDeviceAuth_GetAuthorizedBorrowers_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CDeviceAuth_GetAuthorizedBorrowers_Response_steammessages_5fdeviceauth_2esteamclient_2eproto.base);
}

CDeviceAuth_GetAuthorizedBorrowers_Response::~CDeviceAuth_GetAuthorizedBorrowers_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response)
  SharedDtor();
}

void CDeviceAuth_GetAuthorizedBorrowers_Response::SharedDtor() {
}

void CDeviceAuth_GetAuthorizedBorrowers_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDeviceAuth_GetAuthorizedBorrowers_Response& CDeviceAuth_GetAuthorizedBorrowers_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDeviceAuth_GetAuthorizedBorrowers_Response_steammessages_5fdeviceauth_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CDeviceAuth_GetAuthorizedBorrowers_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  borrowers_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDeviceAuth_GetAuthorizedBorrowers_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDeviceAuth_GetAuthorizedBorrowers_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower borrowers = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::_InternalParse;
          object = msg->add_borrowers();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDeviceAuth_GetAuthorizedBorrowers_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower borrowers = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_borrowers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDeviceAuth_GetAuthorizedBorrowers_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower borrowers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->borrowers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->borrowers(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response)
}

::google::protobuf::uint8* CDeviceAuth_GetAuthorizedBorrowers_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower borrowers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->borrowers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->borrowers(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response)
  return target;
}

size_t CDeviceAuth_GetAuthorizedBorrowers_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower borrowers = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->borrowers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->borrowers(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDeviceAuth_GetAuthorizedBorrowers_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_GetAuthorizedBorrowers_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CDeviceAuth_GetAuthorizedBorrowers_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response)
    MergeFrom(*source);
  }
}

void CDeviceAuth_GetAuthorizedBorrowers_Response::MergeFrom(const CDeviceAuth_GetAuthorizedBorrowers_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  borrowers_.MergeFrom(from.borrowers_);
}

void CDeviceAuth_GetAuthorizedBorrowers_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_GetAuthorizedBorrowers_Response::CopyFrom(const CDeviceAuth_GetAuthorizedBorrowers_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_GetAuthorizedBorrowers_Response::IsInitialized() const {
  return true;
}

void CDeviceAuth_GetAuthorizedBorrowers_Response::Swap(CDeviceAuth_GetAuthorizedBorrowers_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDeviceAuth_GetAuthorizedBorrowers_Response::InternalSwap(CDeviceAuth_GetAuthorizedBorrowers_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&borrowers_)->InternalSwap(CastToBase(&other->borrowers_));
}

::google::protobuf::Metadata CDeviceAuth_GetAuthorizedBorrowers_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fdeviceauth_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fdeviceauth_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDeviceAuth_AddAuthorizedBorrowers_Request::InitAsDefaultInstance() {
}
class CDeviceAuth_AddAuthorizedBorrowers_Request::HasBitSetters {
 public:
  static void set_has_steamid(CDeviceAuth_AddAuthorizedBorrowers_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDeviceAuth_AddAuthorizedBorrowers_Request::kSteamidFieldNumber;
const int CDeviceAuth_AddAuthorizedBorrowers_Request::kSteamidBorrowerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDeviceAuth_AddAuthorizedBorrowers_Request::CDeviceAuth_AddAuthorizedBorrowers_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Request)
}
CDeviceAuth_AddAuthorizedBorrowers_Request::CDeviceAuth_AddAuthorizedBorrowers_Request(const CDeviceAuth_AddAuthorizedBorrowers_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      steamid_borrower_(from.steamid_borrower_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Request)
}

void CDeviceAuth_AddAuthorizedBorrowers_Request::SharedCtor() {
  steamid_ = PROTOBUF_ULONGLONG(0);
}

CDeviceAuth_AddAuthorizedBorrowers_Request::~CDeviceAuth_AddAuthorizedBorrowers_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Request)
  SharedDtor();
}

void CDeviceAuth_AddAuthorizedBorrowers_Request::SharedDtor() {
}

void CDeviceAuth_AddAuthorizedBorrowers_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDeviceAuth_AddAuthorizedBorrowers_Request& CDeviceAuth_AddAuthorizedBorrowers_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDeviceAuth_AddAuthorizedBorrowers_Request_steammessages_5fdeviceauth_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CDeviceAuth_AddAuthorizedBorrowers_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steamid_borrower_.Clear();
  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDeviceAuth_AddAuthorizedBorrowers_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDeviceAuth_AddAuthorizedBorrowers_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // repeated fixed64 steamid_borrower = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 17) {
          do {
            msg->add_steamid_borrower(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
            ptr += sizeof(::google::protobuf::uint64);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 17 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedFixed64Parser;
        object = msg->mutable_steamid_borrower();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDeviceAuth_AddAuthorizedBorrowers_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed64 steamid_borrower = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 17u, input, this->mutable_steamid_borrower())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_steamid_borrower())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDeviceAuth_AddAuthorizedBorrowers_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // repeated fixed64 steamid_borrower = 2;
  for (int i = 0, n = this->steamid_borrower_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      2, this->steamid_borrower(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Request)
}

::google::protobuf::uint8* CDeviceAuth_AddAuthorizedBorrowers_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // repeated fixed64 steamid_borrower = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed64ToArray(2, this->steamid_borrower_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Request)
  return target;
}

size_t CDeviceAuth_AddAuthorizedBorrowers_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 steamid_borrower = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->steamid_borrower_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->steamid_borrower_size());
    total_size += data_size;
  }

  // optional fixed64 steamid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDeviceAuth_AddAuthorizedBorrowers_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_AddAuthorizedBorrowers_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CDeviceAuth_AddAuthorizedBorrowers_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Request)
    MergeFrom(*source);
  }
}

void CDeviceAuth_AddAuthorizedBorrowers_Request::MergeFrom(const CDeviceAuth_AddAuthorizedBorrowers_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  steamid_borrower_.MergeFrom(from.steamid_borrower_);
  if (from.has_steamid()) {
    set_steamid(from.steamid());
  }
}

void CDeviceAuth_AddAuthorizedBorrowers_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_AddAuthorizedBorrowers_Request::CopyFrom(const CDeviceAuth_AddAuthorizedBorrowers_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_AddAuthorizedBorrowers_Request::IsInitialized() const {
  return true;
}

void CDeviceAuth_AddAuthorizedBorrowers_Request::Swap(CDeviceAuth_AddAuthorizedBorrowers_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDeviceAuth_AddAuthorizedBorrowers_Request::InternalSwap(CDeviceAuth_AddAuthorizedBorrowers_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  steamid_borrower_.InternalSwap(&other->steamid_borrower_);
  swap(steamid_, other->steamid_);
}

::google::protobuf::Metadata CDeviceAuth_AddAuthorizedBorrowers_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fdeviceauth_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fdeviceauth_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDeviceAuth_AddAuthorizedBorrowers_Response::InitAsDefaultInstance() {
}
class CDeviceAuth_AddAuthorizedBorrowers_Response::HasBitSetters {
 public:
  static void set_has_seconds_to_wait(CDeviceAuth_AddAuthorizedBorrowers_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDeviceAuth_AddAuthorizedBorrowers_Response::kSecondsToWaitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDeviceAuth_AddAuthorizedBorrowers_Response::CDeviceAuth_AddAuthorizedBorrowers_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Response)
}
CDeviceAuth_AddAuthorizedBorrowers_Response::CDeviceAuth_AddAuthorizedBorrowers_Response(const CDeviceAuth_AddAuthorizedBorrowers_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  seconds_to_wait_ = from.seconds_to_wait_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Response)
}

void CDeviceAuth_AddAuthorizedBorrowers_Response::SharedCtor() {
  seconds_to_wait_ = 0;
}

CDeviceAuth_AddAuthorizedBorrowers_Response::~CDeviceAuth_AddAuthorizedBorrowers_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Response)
  SharedDtor();
}

void CDeviceAuth_AddAuthorizedBorrowers_Response::SharedDtor() {
}

void CDeviceAuth_AddAuthorizedBorrowers_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDeviceAuth_AddAuthorizedBorrowers_Response& CDeviceAuth_AddAuthorizedBorrowers_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDeviceAuth_AddAuthorizedBorrowers_Response_steammessages_5fdeviceauth_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CDeviceAuth_AddAuthorizedBorrowers_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  seconds_to_wait_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDeviceAuth_AddAuthorizedBorrowers_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDeviceAuth_AddAuthorizedBorrowers_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 seconds_to_wait = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_seconds_to_wait(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDeviceAuth_AddAuthorizedBorrowers_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seconds_to_wait = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_seconds_to_wait(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seconds_to_wait_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDeviceAuth_AddAuthorizedBorrowers_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 seconds_to_wait = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seconds_to_wait(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Response)
}

::google::protobuf::uint8* CDeviceAuth_AddAuthorizedBorrowers_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 seconds_to_wait = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seconds_to_wait(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Response)
  return target;
}

size_t CDeviceAuth_AddAuthorizedBorrowers_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 seconds_to_wait = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seconds_to_wait());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDeviceAuth_AddAuthorizedBorrowers_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_AddAuthorizedBorrowers_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CDeviceAuth_AddAuthorizedBorrowers_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Response)
    MergeFrom(*source);
  }
}

void CDeviceAuth_AddAuthorizedBorrowers_Response::MergeFrom(const CDeviceAuth_AddAuthorizedBorrowers_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_seconds_to_wait()) {
    set_seconds_to_wait(from.seconds_to_wait());
  }
}

void CDeviceAuth_AddAuthorizedBorrowers_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_AddAuthorizedBorrowers_Response::CopyFrom(const CDeviceAuth_AddAuthorizedBorrowers_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_AddAuthorizedBorrowers_Response::IsInitialized() const {
  return true;
}

void CDeviceAuth_AddAuthorizedBorrowers_Response::Swap(CDeviceAuth_AddAuthorizedBorrowers_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDeviceAuth_AddAuthorizedBorrowers_Response::InternalSwap(CDeviceAuth_AddAuthorizedBorrowers_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(seconds_to_wait_, other->seconds_to_wait_);
}

::google::protobuf::Metadata CDeviceAuth_AddAuthorizedBorrowers_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fdeviceauth_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fdeviceauth_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDeviceAuth_RemoveAuthorizedBorrowers_Request::InitAsDefaultInstance() {
}
class CDeviceAuth_RemoveAuthorizedBorrowers_Request::HasBitSetters {
 public:
  static void set_has_steamid(CDeviceAuth_RemoveAuthorizedBorrowers_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDeviceAuth_RemoveAuthorizedBorrowers_Request::kSteamidFieldNumber;
const int CDeviceAuth_RemoveAuthorizedBorrowers_Request::kSteamidBorrowerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDeviceAuth_RemoveAuthorizedBorrowers_Request::CDeviceAuth_RemoveAuthorizedBorrowers_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Request)
}
CDeviceAuth_RemoveAuthorizedBorrowers_Request::CDeviceAuth_RemoveAuthorizedBorrowers_Request(const CDeviceAuth_RemoveAuthorizedBorrowers_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      steamid_borrower_(from.steamid_borrower_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Request)
}

void CDeviceAuth_RemoveAuthorizedBorrowers_Request::SharedCtor() {
  steamid_ = PROTOBUF_ULONGLONG(0);
}

CDeviceAuth_RemoveAuthorizedBorrowers_Request::~CDeviceAuth_RemoveAuthorizedBorrowers_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Request)
  SharedDtor();
}

void CDeviceAuth_RemoveAuthorizedBorrowers_Request::SharedDtor() {
}

void CDeviceAuth_RemoveAuthorizedBorrowers_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDeviceAuth_RemoveAuthorizedBorrowers_Request& CDeviceAuth_RemoveAuthorizedBorrowers_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDeviceAuth_RemoveAuthorizedBorrowers_Request_steammessages_5fdeviceauth_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CDeviceAuth_RemoveAuthorizedBorrowers_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steamid_borrower_.Clear();
  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDeviceAuth_RemoveAuthorizedBorrowers_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDeviceAuth_RemoveAuthorizedBorrowers_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // repeated fixed64 steamid_borrower = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 17) {
          do {
            msg->add_steamid_borrower(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
            ptr += sizeof(::google::protobuf::uint64);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 17 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedFixed64Parser;
        object = msg->mutable_steamid_borrower();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDeviceAuth_RemoveAuthorizedBorrowers_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed64 steamid_borrower = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 17u, input, this->mutable_steamid_borrower())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_steamid_borrower())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDeviceAuth_RemoveAuthorizedBorrowers_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // repeated fixed64 steamid_borrower = 2;
  for (int i = 0, n = this->steamid_borrower_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      2, this->steamid_borrower(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Request)
}

::google::protobuf::uint8* CDeviceAuth_RemoveAuthorizedBorrowers_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // repeated fixed64 steamid_borrower = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed64ToArray(2, this->steamid_borrower_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Request)
  return target;
}

size_t CDeviceAuth_RemoveAuthorizedBorrowers_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 steamid_borrower = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->steamid_borrower_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->steamid_borrower_size());
    total_size += data_size;
  }

  // optional fixed64 steamid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDeviceAuth_RemoveAuthorizedBorrowers_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_RemoveAuthorizedBorrowers_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CDeviceAuth_RemoveAuthorizedBorrowers_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Request)
    MergeFrom(*source);
  }
}

void CDeviceAuth_RemoveAuthorizedBorrowers_Request::MergeFrom(const CDeviceAuth_RemoveAuthorizedBorrowers_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  steamid_borrower_.MergeFrom(from.steamid_borrower_);
  if (from.has_steamid()) {
    set_steamid(from.steamid());
  }
}

void CDeviceAuth_RemoveAuthorizedBorrowers_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_RemoveAuthorizedBorrowers_Request::CopyFrom(const CDeviceAuth_RemoveAuthorizedBorrowers_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_RemoveAuthorizedBorrowers_Request::IsInitialized() const {
  return true;
}

void CDeviceAuth_RemoveAuthorizedBorrowers_Request::Swap(CDeviceAuth_RemoveAuthorizedBorrowers_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDeviceAuth_RemoveAuthorizedBorrowers_Request::InternalSwap(CDeviceAuth_RemoveAuthorizedBorrowers_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  steamid_borrower_.InternalSwap(&other->steamid_borrower_);
  swap(steamid_, other->steamid_);
}

::google::protobuf::Metadata CDeviceAuth_RemoveAuthorizedBorrowers_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fdeviceauth_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fdeviceauth_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDeviceAuth_RemoveAuthorizedBorrowers_Response::InitAsDefaultInstance() {
}
class CDeviceAuth_RemoveAuthorizedBorrowers_Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDeviceAuth_RemoveAuthorizedBorrowers_Response::CDeviceAuth_RemoveAuthorizedBorrowers_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Response)
}
CDeviceAuth_RemoveAuthorizedBorrowers_Response::CDeviceAuth_RemoveAuthorizedBorrowers_Response(const CDeviceAuth_RemoveAuthorizedBorrowers_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Response)
}

void CDeviceAuth_RemoveAuthorizedBorrowers_Response::SharedCtor() {
}

CDeviceAuth_RemoveAuthorizedBorrowers_Response::~CDeviceAuth_RemoveAuthorizedBorrowers_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Response)
  SharedDtor();
}

void CDeviceAuth_RemoveAuthorizedBorrowers_Response::SharedDtor() {
}

void CDeviceAuth_RemoveAuthorizedBorrowers_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDeviceAuth_RemoveAuthorizedBorrowers_Response& CDeviceAuth_RemoveAuthorizedBorrowers_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDeviceAuth_RemoveAuthorizedBorrowers_Response_steammessages_5fdeviceauth_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CDeviceAuth_RemoveAuthorizedBorrowers_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDeviceAuth_RemoveAuthorizedBorrowers_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDeviceAuth_RemoveAuthorizedBorrowers_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDeviceAuth_RemoveAuthorizedBorrowers_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDeviceAuth_RemoveAuthorizedBorrowers_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Response)
}

::google::protobuf::uint8* CDeviceAuth_RemoveAuthorizedBorrowers_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Response)
  return target;
}

size_t CDeviceAuth_RemoveAuthorizedBorrowers_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDeviceAuth_RemoveAuthorizedBorrowers_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_RemoveAuthorizedBorrowers_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CDeviceAuth_RemoveAuthorizedBorrowers_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Response)
    MergeFrom(*source);
  }
}

void CDeviceAuth_RemoveAuthorizedBorrowers_Response::MergeFrom(const CDeviceAuth_RemoveAuthorizedBorrowers_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CDeviceAuth_RemoveAuthorizedBorrowers_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_RemoveAuthorizedBorrowers_Response::CopyFrom(const CDeviceAuth_RemoveAuthorizedBorrowers_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_RemoveAuthorizedBorrowers_Response::IsInitialized() const {
  return true;
}

void CDeviceAuth_RemoveAuthorizedBorrowers_Response::Swap(CDeviceAuth_RemoveAuthorizedBorrowers_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDeviceAuth_RemoveAuthorizedBorrowers_Response::InternalSwap(CDeviceAuth_RemoveAuthorizedBorrowers_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CDeviceAuth_RemoveAuthorizedBorrowers_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fdeviceauth_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fdeviceauth_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDeviceAuth_GetAuthorizedAsBorrower_Request::InitAsDefaultInstance() {
}
class CDeviceAuth_GetAuthorizedAsBorrower_Request::HasBitSetters {
 public:
  static void set_has_steamid(CDeviceAuth_GetAuthorizedAsBorrower_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_include_canceled(CDeviceAuth_GetAuthorizedAsBorrower_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_include_pending(CDeviceAuth_GetAuthorizedAsBorrower_Request* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDeviceAuth_GetAuthorizedAsBorrower_Request::kSteamidFieldNumber;
const int CDeviceAuth_GetAuthorizedAsBorrower_Request::kIncludeCanceledFieldNumber;
const int CDeviceAuth_GetAuthorizedAsBorrower_Request::kIncludePendingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDeviceAuth_GetAuthorizedAsBorrower_Request::CDeviceAuth_GetAuthorizedAsBorrower_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Request)
}
CDeviceAuth_GetAuthorizedAsBorrower_Request::CDeviceAuth_GetAuthorizedAsBorrower_Request(const CDeviceAuth_GetAuthorizedAsBorrower_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&include_pending_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(include_pending_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Request)
}

void CDeviceAuth_GetAuthorizedAsBorrower_Request::SharedCtor() {
  ::memset(&steamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&include_pending_) -
      reinterpret_cast<char*>(&steamid_)) + sizeof(include_pending_));
}

CDeviceAuth_GetAuthorizedAsBorrower_Request::~CDeviceAuth_GetAuthorizedAsBorrower_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Request)
  SharedDtor();
}

void CDeviceAuth_GetAuthorizedAsBorrower_Request::SharedDtor() {
}

void CDeviceAuth_GetAuthorizedAsBorrower_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDeviceAuth_GetAuthorizedAsBorrower_Request& CDeviceAuth_GetAuthorizedAsBorrower_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDeviceAuth_GetAuthorizedAsBorrower_Request_steammessages_5fdeviceauth_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CDeviceAuth_GetAuthorizedAsBorrower_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&include_pending_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(include_pending_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDeviceAuth_GetAuthorizedAsBorrower_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDeviceAuth_GetAuthorizedAsBorrower_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional bool include_canceled = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_include_canceled(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool include_pending = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_include_pending(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDeviceAuth_GetAuthorizedAsBorrower_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool include_canceled = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_include_canceled(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &include_canceled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool include_pending = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_include_pending(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &include_pending_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDeviceAuth_GetAuthorizedAsBorrower_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional bool include_canceled = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->include_canceled(), output);
  }

  // optional bool include_pending = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->include_pending(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Request)
}

::google::protobuf::uint8* CDeviceAuth_GetAuthorizedAsBorrower_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional bool include_canceled = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->include_canceled(), target);
  }

  // optional bool include_pending = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->include_pending(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Request)
  return target;
}

size_t CDeviceAuth_GetAuthorizedAsBorrower_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional bool include_canceled = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool include_pending = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDeviceAuth_GetAuthorizedAsBorrower_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_GetAuthorizedAsBorrower_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CDeviceAuth_GetAuthorizedAsBorrower_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Request)
    MergeFrom(*source);
  }
}

void CDeviceAuth_GetAuthorizedAsBorrower_Request::MergeFrom(const CDeviceAuth_GetAuthorizedAsBorrower_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      include_canceled_ = from.include_canceled_;
    }
    if (cached_has_bits & 0x00000004u) {
      include_pending_ = from.include_pending_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDeviceAuth_GetAuthorizedAsBorrower_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_GetAuthorizedAsBorrower_Request::CopyFrom(const CDeviceAuth_GetAuthorizedAsBorrower_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_GetAuthorizedAsBorrower_Request::IsInitialized() const {
  return true;
}

void CDeviceAuth_GetAuthorizedAsBorrower_Request::Swap(CDeviceAuth_GetAuthorizedAsBorrower_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDeviceAuth_GetAuthorizedAsBorrower_Request::InternalSwap(CDeviceAuth_GetAuthorizedAsBorrower_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
  swap(include_canceled_, other->include_canceled_);
  swap(include_pending_, other->include_pending_);
}

::google::protobuf::Metadata CDeviceAuth_GetAuthorizedAsBorrower_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fdeviceauth_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fdeviceauth_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::InitAsDefaultInstance() {
}
class CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::HasBitSetters {
 public:
  static void set_has_steamid(CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_time_created(CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_is_pending(CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_is_canceled(CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_is_used(CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::kSteamidFieldNumber;
const int CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::kTimeCreatedFieldNumber;
const int CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::kIsPendingFieldNumber;
const int CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::kIsCanceledFieldNumber;
const int CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::kIsUsedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender)
}
CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender(const CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_used_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(is_used_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender)
}

void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::SharedCtor() {
  ::memset(&steamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_used_) -
      reinterpret_cast<char*>(&steamid_)) + sizeof(is_used_));
}

CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::~CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender() {
  // @@protoc_insertion_point(destructor:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender)
  SharedDtor();
}

void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::SharedDtor() {
}

void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender& CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender_steammessages_5fdeviceauth_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_used_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(is_used_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 time_created = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_time_created(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool is_pending = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_is_pending(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool is_canceled = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_is_canceled(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool is_used = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_is_used(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_created = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_time_created(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_created_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_pending = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_is_pending(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_pending_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_canceled = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_is_canceled(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_canceled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_used = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_is_used(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_used_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional uint32 time_created = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time_created(), output);
  }

  // optional bool is_pending = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_pending(), output);
  }

  // optional bool is_canceled = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_canceled(), output);
  }

  // optional bool is_used = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_used(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender)
}

::google::protobuf::uint8* CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional uint32 time_created = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time_created(), target);
  }

  // optional bool is_pending = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_pending(), target);
  }

  // optional bool is_canceled = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_canceled(), target);
  }

  // optional bool is_used = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_used(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender)
  return target;
}

size_t CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 time_created = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_created());
    }

    // optional bool is_pending = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool is_canceled = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool is_used = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender* source =
      ::google::protobuf::DynamicCastToGenerated<CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender)
    MergeFrom(*source);
  }
}

void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::MergeFrom(const CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      time_created_ = from.time_created_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_pending_ = from.is_pending_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_canceled_ = from.is_canceled_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_used_ = from.is_used_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::CopyFrom(const CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::IsInitialized() const {
  return true;
}

void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::Swap(CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::InternalSwap(CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
  swap(time_created_, other->time_created_);
  swap(is_pending_, other->is_pending_);
  swap(is_canceled_, other->is_canceled_);
  swap(is_used_, other->is_used_);
}

::google::protobuf::Metadata CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fdeviceauth_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fdeviceauth_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDeviceAuth_GetAuthorizedAsBorrower_Response::InitAsDefaultInstance() {
}
class CDeviceAuth_GetAuthorizedAsBorrower_Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDeviceAuth_GetAuthorizedAsBorrower_Response::kLendersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDeviceAuth_GetAuthorizedAsBorrower_Response::CDeviceAuth_GetAuthorizedAsBorrower_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response)
}
CDeviceAuth_GetAuthorizedAsBorrower_Response::CDeviceAuth_GetAuthorizedAsBorrower_Response(const CDeviceAuth_GetAuthorizedAsBorrower_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      lenders_(from.lenders_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response)
}

void CDeviceAuth_GetAuthorizedAsBorrower_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CDeviceAuth_GetAuthorizedAsBorrower_Response_steammessages_5fdeviceauth_2esteamclient_2eproto.base);
}

CDeviceAuth_GetAuthorizedAsBorrower_Response::~CDeviceAuth_GetAuthorizedAsBorrower_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response)
  SharedDtor();
}

void CDeviceAuth_GetAuthorizedAsBorrower_Response::SharedDtor() {
}

void CDeviceAuth_GetAuthorizedAsBorrower_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDeviceAuth_GetAuthorizedAsBorrower_Response& CDeviceAuth_GetAuthorizedAsBorrower_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDeviceAuth_GetAuthorizedAsBorrower_Response_steammessages_5fdeviceauth_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CDeviceAuth_GetAuthorizedAsBorrower_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lenders_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDeviceAuth_GetAuthorizedAsBorrower_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDeviceAuth_GetAuthorizedAsBorrower_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender lenders = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::_InternalParse;
          object = msg->add_lenders();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDeviceAuth_GetAuthorizedAsBorrower_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender lenders = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_lenders()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDeviceAuth_GetAuthorizedAsBorrower_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender lenders = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lenders_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->lenders(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response)
}

::google::protobuf::uint8* CDeviceAuth_GetAuthorizedAsBorrower_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender lenders = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lenders_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->lenders(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response)
  return target;
}

size_t CDeviceAuth_GetAuthorizedAsBorrower_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender lenders = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->lenders_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lenders(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDeviceAuth_GetAuthorizedAsBorrower_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_GetAuthorizedAsBorrower_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CDeviceAuth_GetAuthorizedAsBorrower_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response)
    MergeFrom(*source);
  }
}

void CDeviceAuth_GetAuthorizedAsBorrower_Response::MergeFrom(const CDeviceAuth_GetAuthorizedAsBorrower_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lenders_.MergeFrom(from.lenders_);
}

void CDeviceAuth_GetAuthorizedAsBorrower_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_GetAuthorizedAsBorrower_Response::CopyFrom(const CDeviceAuth_GetAuthorizedAsBorrower_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_GetAuthorizedAsBorrower_Response::IsInitialized() const {
  return true;
}

void CDeviceAuth_GetAuthorizedAsBorrower_Response::Swap(CDeviceAuth_GetAuthorizedAsBorrower_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDeviceAuth_GetAuthorizedAsBorrower_Response::InternalSwap(CDeviceAuth_GetAuthorizedAsBorrower_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&lenders_)->InternalSwap(CastToBase(&other->lenders_));
}

::google::protobuf::Metadata CDeviceAuth_GetAuthorizedAsBorrower_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fdeviceauth_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fdeviceauth_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDeviceAuth_GetExcludedGamesInLibrary_Request::InitAsDefaultInstance() {
}
class CDeviceAuth_GetExcludedGamesInLibrary_Request::HasBitSetters {
 public:
  static void set_has_steamid(CDeviceAuth_GetExcludedGamesInLibrary_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDeviceAuth_GetExcludedGamesInLibrary_Request::kSteamidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDeviceAuth_GetExcludedGamesInLibrary_Request::CDeviceAuth_GetExcludedGamesInLibrary_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Request)
}
CDeviceAuth_GetExcludedGamesInLibrary_Request::CDeviceAuth_GetExcludedGamesInLibrary_Request(const CDeviceAuth_GetExcludedGamesInLibrary_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Request)
}

void CDeviceAuth_GetExcludedGamesInLibrary_Request::SharedCtor() {
  steamid_ = PROTOBUF_ULONGLONG(0);
}

CDeviceAuth_GetExcludedGamesInLibrary_Request::~CDeviceAuth_GetExcludedGamesInLibrary_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Request)
  SharedDtor();
}

void CDeviceAuth_GetExcludedGamesInLibrary_Request::SharedDtor() {
}

void CDeviceAuth_GetExcludedGamesInLibrary_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDeviceAuth_GetExcludedGamesInLibrary_Request& CDeviceAuth_GetExcludedGamesInLibrary_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDeviceAuth_GetExcludedGamesInLibrary_Request_steammessages_5fdeviceauth_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CDeviceAuth_GetExcludedGamesInLibrary_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDeviceAuth_GetExcludedGamesInLibrary_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDeviceAuth_GetExcludedGamesInLibrary_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDeviceAuth_GetExcludedGamesInLibrary_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDeviceAuth_GetExcludedGamesInLibrary_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Request)
}

::google::protobuf::uint8* CDeviceAuth_GetExcludedGamesInLibrary_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Request)
  return target;
}

size_t CDeviceAuth_GetExcludedGamesInLibrary_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 steamid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDeviceAuth_GetExcludedGamesInLibrary_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_GetExcludedGamesInLibrary_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CDeviceAuth_GetExcludedGamesInLibrary_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Request)
    MergeFrom(*source);
  }
}

void CDeviceAuth_GetExcludedGamesInLibrary_Request::MergeFrom(const CDeviceAuth_GetExcludedGamesInLibrary_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_steamid()) {
    set_steamid(from.steamid());
  }
}

void CDeviceAuth_GetExcludedGamesInLibrary_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_GetExcludedGamesInLibrary_Request::CopyFrom(const CDeviceAuth_GetExcludedGamesInLibrary_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_GetExcludedGamesInLibrary_Request::IsInitialized() const {
  return true;
}

void CDeviceAuth_GetExcludedGamesInLibrary_Request::Swap(CDeviceAuth_GetExcludedGamesInLibrary_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDeviceAuth_GetExcludedGamesInLibrary_Request::InternalSwap(CDeviceAuth_GetExcludedGamesInLibrary_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
}

::google::protobuf::Metadata CDeviceAuth_GetExcludedGamesInLibrary_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fdeviceauth_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fdeviceauth_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::InitAsDefaultInstance() {
}
class CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::HasBitSetters {
 public:
  static void set_has_appid(CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_game_name(CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_vac_banned(CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_package_excluded(CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::kAppidFieldNumber;
const int CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::kGameNameFieldNumber;
const int CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::kVacBannedFieldNumber;
const int CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::kPackageExcludedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame)
}
CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame(const CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  game_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_game_name()) {
    game_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_name_);
  }
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&package_excluded_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(package_excluded_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame)
}

void CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame_steammessages_5fdeviceauth_2esteamclient_2eproto.base);
  game_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&appid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&package_excluded_) -
      reinterpret_cast<char*>(&appid_)) + sizeof(package_excluded_));
}

CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::~CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame() {
  // @@protoc_insertion_point(destructor:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame)
  SharedDtor();
}

void CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::SharedDtor() {
  game_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame& CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame_steammessages_5fdeviceauth_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    game_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&package_excluded_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(package_excluded_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string game_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame.game_name");
        object = msg->mutable_game_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool vac_banned = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_vac_banned(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool package_excluded = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_package_excluded(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string game_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_name().data(), static_cast<int>(this->game_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame.game_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool vac_banned = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_vac_banned(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &vac_banned_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool package_excluded = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_package_excluded(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &package_excluded_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional string game_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_name().data(), static_cast<int>(this->game_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame.game_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->game_name(), output);
  }

  // optional bool vac_banned = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->vac_banned(), output);
  }

  // optional bool package_excluded = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->package_excluded(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame)
}

::google::protobuf::uint8* CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional string game_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_name().data(), static_cast<int>(this->game_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame.game_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->game_name(), target);
  }

  // optional bool vac_banned = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->vac_banned(), target);
  }

  // optional bool package_excluded = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->package_excluded(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame)
  return target;
}

size_t CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string game_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_name());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional bool vac_banned = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool package_excluded = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame* source =
      ::google::protobuf::DynamicCastToGenerated<CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame)
    MergeFrom(*source);
  }
}

void CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::MergeFrom(const CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      game_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000004u) {
      vac_banned_ = from.vac_banned_;
    }
    if (cached_has_bits & 0x00000008u) {
      package_excluded_ = from.package_excluded_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::CopyFrom(const CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::IsInitialized() const {
  return true;
}

void CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::Swap(CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::InternalSwap(CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  game_name_.Swap(&other->game_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(appid_, other->appid_);
  swap(vac_banned_, other->vac_banned_);
  swap(package_excluded_, other->package_excluded_);
}

::google::protobuf::Metadata CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fdeviceauth_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fdeviceauth_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDeviceAuth_GetExcludedGamesInLibrary_Response::InitAsDefaultInstance() {
}
class CDeviceAuth_GetExcludedGamesInLibrary_Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDeviceAuth_GetExcludedGamesInLibrary_Response::kExcludedGamesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDeviceAuth_GetExcludedGamesInLibrary_Response::CDeviceAuth_GetExcludedGamesInLibrary_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response)
}
CDeviceAuth_GetExcludedGamesInLibrary_Response::CDeviceAuth_GetExcludedGamesInLibrary_Response(const CDeviceAuth_GetExcludedGamesInLibrary_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      excluded_games_(from.excluded_games_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response)
}

void CDeviceAuth_GetExcludedGamesInLibrary_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CDeviceAuth_GetExcludedGamesInLibrary_Response_steammessages_5fdeviceauth_2esteamclient_2eproto.base);
}

CDeviceAuth_GetExcludedGamesInLibrary_Response::~CDeviceAuth_GetExcludedGamesInLibrary_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response)
  SharedDtor();
}

void CDeviceAuth_GetExcludedGamesInLibrary_Response::SharedDtor() {
}

void CDeviceAuth_GetExcludedGamesInLibrary_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDeviceAuth_GetExcludedGamesInLibrary_Response& CDeviceAuth_GetExcludedGamesInLibrary_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDeviceAuth_GetExcludedGamesInLibrary_Response_steammessages_5fdeviceauth_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CDeviceAuth_GetExcludedGamesInLibrary_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  excluded_games_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDeviceAuth_GetExcludedGamesInLibrary_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDeviceAuth_GetExcludedGamesInLibrary_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame excluded_games = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::_InternalParse;
          object = msg->add_excluded_games();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDeviceAuth_GetExcludedGamesInLibrary_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame excluded_games = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_excluded_games()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDeviceAuth_GetExcludedGamesInLibrary_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame excluded_games = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->excluded_games_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->excluded_games(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response)
}

::google::protobuf::uint8* CDeviceAuth_GetExcludedGamesInLibrary_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame excluded_games = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->excluded_games_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->excluded_games(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response)
  return target;
}

size_t CDeviceAuth_GetExcludedGamesInLibrary_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame excluded_games = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->excluded_games_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->excluded_games(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDeviceAuth_GetExcludedGamesInLibrary_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_GetExcludedGamesInLibrary_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CDeviceAuth_GetExcludedGamesInLibrary_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response)
    MergeFrom(*source);
  }
}

void CDeviceAuth_GetExcludedGamesInLibrary_Response::MergeFrom(const CDeviceAuth_GetExcludedGamesInLibrary_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  excluded_games_.MergeFrom(from.excluded_games_);
}

void CDeviceAuth_GetExcludedGamesInLibrary_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_GetExcludedGamesInLibrary_Response::CopyFrom(const CDeviceAuth_GetExcludedGamesInLibrary_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_GetExcludedGamesInLibrary_Response::IsInitialized() const {
  return true;
}

void CDeviceAuth_GetExcludedGamesInLibrary_Response::Swap(CDeviceAuth_GetExcludedGamesInLibrary_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDeviceAuth_GetExcludedGamesInLibrary_Response::InternalSwap(CDeviceAuth_GetExcludedGamesInLibrary_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&excluded_games_)->InternalSwap(CastToBase(&other->excluded_games_));
}

::google::protobuf::Metadata CDeviceAuth_GetExcludedGamesInLibrary_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fdeviceauth_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fdeviceauth_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDeviceAuth_GetBorrowerPlayHistory_Request::InitAsDefaultInstance() {
}
class CDeviceAuth_GetBorrowerPlayHistory_Request::HasBitSetters {
 public:
  static void set_has_steamid(CDeviceAuth_GetBorrowerPlayHistory_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDeviceAuth_GetBorrowerPlayHistory_Request::kSteamidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDeviceAuth_GetBorrowerPlayHistory_Request::CDeviceAuth_GetBorrowerPlayHistory_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Request)
}
CDeviceAuth_GetBorrowerPlayHistory_Request::CDeviceAuth_GetBorrowerPlayHistory_Request(const CDeviceAuth_GetBorrowerPlayHistory_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Request)
}

void CDeviceAuth_GetBorrowerPlayHistory_Request::SharedCtor() {
  steamid_ = PROTOBUF_ULONGLONG(0);
}

CDeviceAuth_GetBorrowerPlayHistory_Request::~CDeviceAuth_GetBorrowerPlayHistory_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Request)
  SharedDtor();
}

void CDeviceAuth_GetBorrowerPlayHistory_Request::SharedDtor() {
}

void CDeviceAuth_GetBorrowerPlayHistory_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDeviceAuth_GetBorrowerPlayHistory_Request& CDeviceAuth_GetBorrowerPlayHistory_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDeviceAuth_GetBorrowerPlayHistory_Request_steammessages_5fdeviceauth_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CDeviceAuth_GetBorrowerPlayHistory_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDeviceAuth_GetBorrowerPlayHistory_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDeviceAuth_GetBorrowerPlayHistory_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDeviceAuth_GetBorrowerPlayHistory_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDeviceAuth_GetBorrowerPlayHistory_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Request)
}

::google::protobuf::uint8* CDeviceAuth_GetBorrowerPlayHistory_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Request)
  return target;
}

size_t CDeviceAuth_GetBorrowerPlayHistory_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 steamid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDeviceAuth_GetBorrowerPlayHistory_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_GetBorrowerPlayHistory_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CDeviceAuth_GetBorrowerPlayHistory_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Request)
    MergeFrom(*source);
  }
}

void CDeviceAuth_GetBorrowerPlayHistory_Request::MergeFrom(const CDeviceAuth_GetBorrowerPlayHistory_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_steamid()) {
    set_steamid(from.steamid());
  }
}

void CDeviceAuth_GetBorrowerPlayHistory_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_GetBorrowerPlayHistory_Request::CopyFrom(const CDeviceAuth_GetBorrowerPlayHistory_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_GetBorrowerPlayHistory_Request::IsInitialized() const {
  return true;
}

void CDeviceAuth_GetBorrowerPlayHistory_Request::Swap(CDeviceAuth_GetBorrowerPlayHistory_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDeviceAuth_GetBorrowerPlayHistory_Request::InternalSwap(CDeviceAuth_GetBorrowerPlayHistory_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
}

::google::protobuf::Metadata CDeviceAuth_GetBorrowerPlayHistory_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fdeviceauth_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fdeviceauth_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory::InitAsDefaultInstance() {
}
class CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory::HasBitSetters {
 public:
  static void set_has_appid(CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_time_last(CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_time_total(CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory::kAppidFieldNumber;
const int CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory::kTimeLastFieldNumber;
const int CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory::kTimeTotalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory::CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Response.GameHistory)
}
CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory::CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory(const CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_total_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(time_total_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Response.GameHistory)
}

void CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory::SharedCtor() {
  ::memset(&appid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_total_) -
      reinterpret_cast<char*>(&appid_)) + sizeof(time_total_));
}

CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory::~CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory() {
  // @@protoc_insertion_point(destructor:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Response.GameHistory)
  SharedDtor();
}

void CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory::SharedDtor() {
}

void CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory& CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory_steammessages_5fdeviceauth_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Response.GameHistory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_total_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(time_total_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 time_last = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_time_last(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 time_total = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_time_total(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Response.GameHistory)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_last = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_time_last(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_last_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_total = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_time_total(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Response.GameHistory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Response.GameHistory)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Response.GameHistory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint32 time_last = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time_last(), output);
  }

  // optional uint32 time_total = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time_total(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Response.GameHistory)
}

::google::protobuf::uint8* CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Response.GameHistory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint32 time_last = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time_last(), target);
  }

  // optional uint32 time_total = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time_total(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Response.GameHistory)
  return target;
}

size_t CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Response.GameHistory)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional uint32 time_last = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_last());
    }

    // optional uint32 time_total = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_total());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Response.GameHistory)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory* source =
      ::google::protobuf::DynamicCastToGenerated<CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Response.GameHistory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Response.GameHistory)
    MergeFrom(*source);
  }
}

void CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory::MergeFrom(const CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Response.GameHistory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      time_last_ = from.time_last_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_total_ = from.time_total_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Response.GameHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory::CopyFrom(const CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Response.GameHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory::IsInitialized() const {
  return true;
}

void CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory::Swap(CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory::InternalSwap(CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(appid_, other->appid_);
  swap(time_last_, other->time_last_);
  swap(time_total_, other->time_total_);
}

::google::protobuf::Metadata CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fdeviceauth_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fdeviceauth_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory::InitAsDefaultInstance() {
}
class CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory::HasBitSetters {
 public:
  static void set_has_steamid(CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory::kSteamidFieldNumber;
const int CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory::kGameHistoryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory::CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Response.LenderHistory)
}
CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory::CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory(const CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      game_history_(from.game_history_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Response.LenderHistory)
}

void CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory_steammessages_5fdeviceauth_2esteamclient_2eproto.base);
  steamid_ = PROTOBUF_ULONGLONG(0);
}

CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory::~CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory() {
  // @@protoc_insertion_point(destructor:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Response.LenderHistory)
  SharedDtor();
}

void CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory::SharedDtor() {
}

void CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory& CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory_steammessages_5fdeviceauth_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Response.LenderHistory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  game_history_.Clear();
  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // repeated .proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Response.GameHistory game_history = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory::_InternalParse;
          object = msg->add_game_history();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Response.LenderHistory)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Response.GameHistory game_history = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_game_history()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Response.LenderHistory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Response.LenderHistory)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Response.LenderHistory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // repeated .proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Response.GameHistory game_history = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->game_history_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->game_history(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Response.LenderHistory)
}

::google::protobuf::uint8* CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Response.LenderHistory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // repeated .proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Response.GameHistory game_history = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->game_history_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->game_history(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Response.LenderHistory)
  return target;
}

size_t CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Response.LenderHistory)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Response.GameHistory game_history = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->game_history_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->game_history(static_cast<int>(i)));
    }
  }

  // optional fixed64 steamid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Response.LenderHistory)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory* source =
      ::google::protobuf::DynamicCastToGenerated<CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Response.LenderHistory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Response.LenderHistory)
    MergeFrom(*source);
  }
}

void CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory::MergeFrom(const CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Response.LenderHistory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  game_history_.MergeFrom(from.game_history_);
  if (from.has_steamid()) {
    set_steamid(from.steamid());
  }
}

void CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Response.LenderHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory::CopyFrom(const CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Response.LenderHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory::IsInitialized() const {
  return true;
}

void CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory::Swap(CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory::InternalSwap(CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&game_history_)->InternalSwap(CastToBase(&other->game_history_));
  swap(steamid_, other->steamid_);
}

::google::protobuf::Metadata CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fdeviceauth_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fdeviceauth_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDeviceAuth_GetBorrowerPlayHistory_Response::InitAsDefaultInstance() {
}
class CDeviceAuth_GetBorrowerPlayHistory_Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDeviceAuth_GetBorrowerPlayHistory_Response::kLenderHistoryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDeviceAuth_GetBorrowerPlayHistory_Response::CDeviceAuth_GetBorrowerPlayHistory_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Response)
}
CDeviceAuth_GetBorrowerPlayHistory_Response::CDeviceAuth_GetBorrowerPlayHistory_Response(const CDeviceAuth_GetBorrowerPlayHistory_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      lender_history_(from.lender_history_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Response)
}

void CDeviceAuth_GetBorrowerPlayHistory_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CDeviceAuth_GetBorrowerPlayHistory_Response_steammessages_5fdeviceauth_2esteamclient_2eproto.base);
}

CDeviceAuth_GetBorrowerPlayHistory_Response::~CDeviceAuth_GetBorrowerPlayHistory_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Response)
  SharedDtor();
}

void CDeviceAuth_GetBorrowerPlayHistory_Response::SharedDtor() {
}

void CDeviceAuth_GetBorrowerPlayHistory_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDeviceAuth_GetBorrowerPlayHistory_Response& CDeviceAuth_GetBorrowerPlayHistory_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDeviceAuth_GetBorrowerPlayHistory_Response_steammessages_5fdeviceauth_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CDeviceAuth_GetBorrowerPlayHistory_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lender_history_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDeviceAuth_GetBorrowerPlayHistory_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDeviceAuth_GetBorrowerPlayHistory_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Response.LenderHistory lender_history = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory::_InternalParse;
          object = msg->add_lender_history();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDeviceAuth_GetBorrowerPlayHistory_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Response.LenderHistory lender_history = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_lender_history()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDeviceAuth_GetBorrowerPlayHistory_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Response.LenderHistory lender_history = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lender_history_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->lender_history(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Response)
}

::google::protobuf::uint8* CDeviceAuth_GetBorrowerPlayHistory_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Response.LenderHistory lender_history = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lender_history_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->lender_history(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Response)
  return target;
}

size_t CDeviceAuth_GetBorrowerPlayHistory_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Response.LenderHistory lender_history = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->lender_history_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lender_history(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDeviceAuth_GetBorrowerPlayHistory_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_GetBorrowerPlayHistory_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CDeviceAuth_GetBorrowerPlayHistory_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Response)
    MergeFrom(*source);
  }
}

void CDeviceAuth_GetBorrowerPlayHistory_Response::MergeFrom(const CDeviceAuth_GetBorrowerPlayHistory_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lender_history_.MergeFrom(from.lender_history_);
}

void CDeviceAuth_GetBorrowerPlayHistory_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_GetBorrowerPlayHistory_Response::CopyFrom(const CDeviceAuth_GetBorrowerPlayHistory_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CDeviceAuth_GetBorrowerPlayHistory_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_GetBorrowerPlayHistory_Response::IsInitialized() const {
  return true;
}

void CDeviceAuth_GetBorrowerPlayHistory_Response::Swap(CDeviceAuth_GetBorrowerPlayHistory_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDeviceAuth_GetBorrowerPlayHistory_Response::InternalSwap(CDeviceAuth_GetBorrowerPlayHistory_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&lender_history_)->InternalSwap(CastToBase(&other->lender_history_));
}

::google::protobuf::Metadata CDeviceAuth_GetBorrowerPlayHistory_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fdeviceauth_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fdeviceauth_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

DeviceAuth::~DeviceAuth() {}

const ::google::protobuf::ServiceDescriptor* DeviceAuth::descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_steammessages_5fdeviceauth_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5fdeviceauth_2esteamclient_2eproto[0];
}

const ::google::protobuf::ServiceDescriptor* DeviceAuth::GetDescriptor() {
  return descriptor();
}

void DeviceAuth::GetOwnAuthorizedDevices(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CDeviceAuth_GetOwnAuthorizedDevices_Request*,
                         ::proto::steam::CDeviceAuth_GetOwnAuthorizedDevices_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetOwnAuthorizedDevices() not implemented.");
  done->Run();
}

void DeviceAuth::AcceptAuthorizationRequest(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CDeviceAuth_AcceptAuthorizationRequest_Request*,
                         ::proto::steam::CDeviceAuth_AcceptAuthorizationRequest_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AcceptAuthorizationRequest() not implemented.");
  done->Run();
}

void DeviceAuth::AuthorizeRemoteDevice(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CDeviceAuth_AuthorizeRemoteDevice_Request*,
                         ::proto::steam::CDeviceAuth_AuthorizeRemoteDevice_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AuthorizeRemoteDevice() not implemented.");
  done->Run();
}

void DeviceAuth::DeauthorizeRemoteDevice(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CDeviceAuth_DeauthorizeRemoteDevice_Request*,
                         ::proto::steam::CDeviceAuth_DeauthorizeRemoteDevice_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method DeauthorizeRemoteDevice() not implemented.");
  done->Run();
}

void DeviceAuth::GetUsedAuthorizedDevices(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CDeviceAuth_GetUsedAuthorizedDevices_Request*,
                         ::proto::steam::CDeviceAuth_GetUsedAuthorizedDevices_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetUsedAuthorizedDevices() not implemented.");
  done->Run();
}

void DeviceAuth::GetAuthorizedBorrowers(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CDeviceAuth_GetAuthorizedBorrowers_Request*,
                         ::proto::steam::CDeviceAuth_GetAuthorizedBorrowers_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetAuthorizedBorrowers() not implemented.");
  done->Run();
}

void DeviceAuth::AddAuthorizedBorrowers(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CDeviceAuth_AddAuthorizedBorrowers_Request*,
                         ::proto::steam::CDeviceAuth_AddAuthorizedBorrowers_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AddAuthorizedBorrowers() not implemented.");
  done->Run();
}

void DeviceAuth::RemoveAuthorizedBorrowers(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CDeviceAuth_RemoveAuthorizedBorrowers_Request*,
                         ::proto::steam::CDeviceAuth_RemoveAuthorizedBorrowers_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RemoveAuthorizedBorrowers() not implemented.");
  done->Run();
}

void DeviceAuth::GetAuthorizedAsBorrower(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CDeviceAuth_GetAuthorizedAsBorrower_Request*,
                         ::proto::steam::CDeviceAuth_GetAuthorizedAsBorrower_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetAuthorizedAsBorrower() not implemented.");
  done->Run();
}

void DeviceAuth::GetExcludedGamesInLibrary(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CDeviceAuth_GetExcludedGamesInLibrary_Request*,
                         ::proto::steam::CDeviceAuth_GetExcludedGamesInLibrary_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetExcludedGamesInLibrary() not implemented.");
  done->Run();
}

void DeviceAuth::GetBorrowerPlayHistory(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CDeviceAuth_GetBorrowerPlayHistory_Request*,
                         ::proto::steam::CDeviceAuth_GetBorrowerPlayHistory_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetBorrowerPlayHistory() not implemented.");
  done->Run();
}

void DeviceAuth::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5fdeviceauth_2esteamclient_2eproto[0]);
  switch(method->index()) {
    case 0:
      GetOwnAuthorizedDevices(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CDeviceAuth_GetOwnAuthorizedDevices_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CDeviceAuth_GetOwnAuthorizedDevices_Response*>(response),
             done);
      break;
    case 1:
      AcceptAuthorizationRequest(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CDeviceAuth_AcceptAuthorizationRequest_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CDeviceAuth_AcceptAuthorizationRequest_Response*>(response),
             done);
      break;
    case 2:
      AuthorizeRemoteDevice(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CDeviceAuth_AuthorizeRemoteDevice_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CDeviceAuth_AuthorizeRemoteDevice_Response*>(response),
             done);
      break;
    case 3:
      DeauthorizeRemoteDevice(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CDeviceAuth_DeauthorizeRemoteDevice_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CDeviceAuth_DeauthorizeRemoteDevice_Response*>(response),
             done);
      break;
    case 4:
      GetUsedAuthorizedDevices(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CDeviceAuth_GetUsedAuthorizedDevices_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CDeviceAuth_GetUsedAuthorizedDevices_Response*>(response),
             done);
      break;
    case 5:
      GetAuthorizedBorrowers(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CDeviceAuth_GetAuthorizedBorrowers_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CDeviceAuth_GetAuthorizedBorrowers_Response*>(response),
             done);
      break;
    case 6:
      AddAuthorizedBorrowers(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CDeviceAuth_AddAuthorizedBorrowers_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CDeviceAuth_AddAuthorizedBorrowers_Response*>(response),
             done);
      break;
    case 7:
      RemoveAuthorizedBorrowers(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CDeviceAuth_RemoveAuthorizedBorrowers_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CDeviceAuth_RemoveAuthorizedBorrowers_Response*>(response),
             done);
      break;
    case 8:
      GetAuthorizedAsBorrower(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CDeviceAuth_GetAuthorizedAsBorrower_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CDeviceAuth_GetAuthorizedAsBorrower_Response*>(response),
             done);
      break;
    case 9:
      GetExcludedGamesInLibrary(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CDeviceAuth_GetExcludedGamesInLibrary_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CDeviceAuth_GetExcludedGamesInLibrary_Response*>(response),
             done);
      break;
    case 10:
      GetBorrowerPlayHistory(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CDeviceAuth_GetBorrowerPlayHistory_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CDeviceAuth_GetBorrowerPlayHistory_Response*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& DeviceAuth::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CDeviceAuth_GetOwnAuthorizedDevices_Request::default_instance();
    case 1:
      return ::proto::steam::CDeviceAuth_AcceptAuthorizationRequest_Request::default_instance();
    case 2:
      return ::proto::steam::CDeviceAuth_AuthorizeRemoteDevice_Request::default_instance();
    case 3:
      return ::proto::steam::CDeviceAuth_DeauthorizeRemoteDevice_Request::default_instance();
    case 4:
      return ::proto::steam::CDeviceAuth_GetUsedAuthorizedDevices_Request::default_instance();
    case 5:
      return ::proto::steam::CDeviceAuth_GetAuthorizedBorrowers_Request::default_instance();
    case 6:
      return ::proto::steam::CDeviceAuth_AddAuthorizedBorrowers_Request::default_instance();
    case 7:
      return ::proto::steam::CDeviceAuth_RemoveAuthorizedBorrowers_Request::default_instance();
    case 8:
      return ::proto::steam::CDeviceAuth_GetAuthorizedAsBorrower_Request::default_instance();
    case 9:
      return ::proto::steam::CDeviceAuth_GetExcludedGamesInLibrary_Request::default_instance();
    case 10:
      return ::proto::steam::CDeviceAuth_GetBorrowerPlayHistory_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& DeviceAuth::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CDeviceAuth_GetOwnAuthorizedDevices_Response::default_instance();
    case 1:
      return ::proto::steam::CDeviceAuth_AcceptAuthorizationRequest_Response::default_instance();
    case 2:
      return ::proto::steam::CDeviceAuth_AuthorizeRemoteDevice_Response::default_instance();
    case 3:
      return ::proto::steam::CDeviceAuth_DeauthorizeRemoteDevice_Response::default_instance();
    case 4:
      return ::proto::steam::CDeviceAuth_GetUsedAuthorizedDevices_Response::default_instance();
    case 5:
      return ::proto::steam::CDeviceAuth_GetAuthorizedBorrowers_Response::default_instance();
    case 6:
      return ::proto::steam::CDeviceAuth_AddAuthorizedBorrowers_Response::default_instance();
    case 7:
      return ::proto::steam::CDeviceAuth_RemoveAuthorizedBorrowers_Response::default_instance();
    case 8:
      return ::proto::steam::CDeviceAuth_GetAuthorizedAsBorrower_Response::default_instance();
    case 9:
      return ::proto::steam::CDeviceAuth_GetExcludedGamesInLibrary_Response::default_instance();
    case 10:
      return ::proto::steam::CDeviceAuth_GetBorrowerPlayHistory_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

DeviceAuth_Stub::DeviceAuth_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
DeviceAuth_Stub::DeviceAuth_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
DeviceAuth_Stub::~DeviceAuth_Stub() {
  if (owns_channel_) delete channel_;
}

void DeviceAuth_Stub::GetOwnAuthorizedDevices(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CDeviceAuth_GetOwnAuthorizedDevices_Request* request,
                              ::proto::steam::CDeviceAuth_GetOwnAuthorizedDevices_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void DeviceAuth_Stub::AcceptAuthorizationRequest(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CDeviceAuth_AcceptAuthorizationRequest_Request* request,
                              ::proto::steam::CDeviceAuth_AcceptAuthorizationRequest_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void DeviceAuth_Stub::AuthorizeRemoteDevice(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CDeviceAuth_AuthorizeRemoteDevice_Request* request,
                              ::proto::steam::CDeviceAuth_AuthorizeRemoteDevice_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void DeviceAuth_Stub::DeauthorizeRemoteDevice(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CDeviceAuth_DeauthorizeRemoteDevice_Request* request,
                              ::proto::steam::CDeviceAuth_DeauthorizeRemoteDevice_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void DeviceAuth_Stub::GetUsedAuthorizedDevices(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CDeviceAuth_GetUsedAuthorizedDevices_Request* request,
                              ::proto::steam::CDeviceAuth_GetUsedAuthorizedDevices_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void DeviceAuth_Stub::GetAuthorizedBorrowers(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CDeviceAuth_GetAuthorizedBorrowers_Request* request,
                              ::proto::steam::CDeviceAuth_GetAuthorizedBorrowers_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void DeviceAuth_Stub::AddAuthorizedBorrowers(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CDeviceAuth_AddAuthorizedBorrowers_Request* request,
                              ::proto::steam::CDeviceAuth_AddAuthorizedBorrowers_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void DeviceAuth_Stub::RemoveAuthorizedBorrowers(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CDeviceAuth_RemoveAuthorizedBorrowers_Request* request,
                              ::proto::steam::CDeviceAuth_RemoveAuthorizedBorrowers_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}
void DeviceAuth_Stub::GetAuthorizedAsBorrower(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CDeviceAuth_GetAuthorizedAsBorrower_Request* request,
                              ::proto::steam::CDeviceAuth_GetAuthorizedAsBorrower_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(8),
                       controller, request, response, done);
}
void DeviceAuth_Stub::GetExcludedGamesInLibrary(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CDeviceAuth_GetExcludedGamesInLibrary_Request* request,
                              ::proto::steam::CDeviceAuth_GetExcludedGamesInLibrary_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(9),
                       controller, request, response, done);
}
void DeviceAuth_Stub::GetBorrowerPlayHistory(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CDeviceAuth_GetBorrowerPlayHistory_Request* request,
                              ::proto::steam::CDeviceAuth_GetBorrowerPlayHistory_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(10),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace steam
}  // namespace proto
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::proto::steam::CDeviceAuth_GetOwnAuthorizedDevices_Request* Arena::CreateMaybeMessage< ::proto::steam::CDeviceAuth_GetOwnAuthorizedDevices_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CDeviceAuth_GetOwnAuthorizedDevices_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CDeviceAuth_GetOwnAuthorizedDevices_Response_Device* Arena::CreateMaybeMessage< ::proto::steam::CDeviceAuth_GetOwnAuthorizedDevices_Response_Device >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CDeviceAuth_GetOwnAuthorizedDevices_Response_Device >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CDeviceAuth_GetOwnAuthorizedDevices_Response* Arena::CreateMaybeMessage< ::proto::steam::CDeviceAuth_GetOwnAuthorizedDevices_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CDeviceAuth_GetOwnAuthorizedDevices_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CDeviceAuth_AcceptAuthorizationRequest_Request* Arena::CreateMaybeMessage< ::proto::steam::CDeviceAuth_AcceptAuthorizationRequest_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CDeviceAuth_AcceptAuthorizationRequest_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CDeviceAuth_AcceptAuthorizationRequest_Response* Arena::CreateMaybeMessage< ::proto::steam::CDeviceAuth_AcceptAuthorizationRequest_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CDeviceAuth_AcceptAuthorizationRequest_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CDeviceAuth_AuthorizeRemoteDevice_Request* Arena::CreateMaybeMessage< ::proto::steam::CDeviceAuth_AuthorizeRemoteDevice_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CDeviceAuth_AuthorizeRemoteDevice_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CDeviceAuth_AuthorizeRemoteDevice_Response* Arena::CreateMaybeMessage< ::proto::steam::CDeviceAuth_AuthorizeRemoteDevice_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CDeviceAuth_AuthorizeRemoteDevice_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CDeviceAuth_DeauthorizeRemoteDevice_Request* Arena::CreateMaybeMessage< ::proto::steam::CDeviceAuth_DeauthorizeRemoteDevice_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CDeviceAuth_DeauthorizeRemoteDevice_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CDeviceAuth_DeauthorizeRemoteDevice_Response* Arena::CreateMaybeMessage< ::proto::steam::CDeviceAuth_DeauthorizeRemoteDevice_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CDeviceAuth_DeauthorizeRemoteDevice_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CDeviceAuth_GetUsedAuthorizedDevices_Request* Arena::CreateMaybeMessage< ::proto::steam::CDeviceAuth_GetUsedAuthorizedDevices_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CDeviceAuth_GetUsedAuthorizedDevices_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CDeviceAuth_GetUsedAuthorizedDevices_Response_Device* Arena::CreateMaybeMessage< ::proto::steam::CDeviceAuth_GetUsedAuthorizedDevices_Response_Device >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CDeviceAuth_GetUsedAuthorizedDevices_Response_Device >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CDeviceAuth_GetUsedAuthorizedDevices_Response* Arena::CreateMaybeMessage< ::proto::steam::CDeviceAuth_GetUsedAuthorizedDevices_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CDeviceAuth_GetUsedAuthorizedDevices_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CDeviceAuth_GetAuthorizedBorrowers_Request* Arena::CreateMaybeMessage< ::proto::steam::CDeviceAuth_GetAuthorizedBorrowers_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CDeviceAuth_GetAuthorizedBorrowers_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower* Arena::CreateMaybeMessage< ::proto::steam::CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CDeviceAuth_GetAuthorizedBorrowers_Response* Arena::CreateMaybeMessage< ::proto::steam::CDeviceAuth_GetAuthorizedBorrowers_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CDeviceAuth_GetAuthorizedBorrowers_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CDeviceAuth_AddAuthorizedBorrowers_Request* Arena::CreateMaybeMessage< ::proto::steam::CDeviceAuth_AddAuthorizedBorrowers_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CDeviceAuth_AddAuthorizedBorrowers_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CDeviceAuth_AddAuthorizedBorrowers_Response* Arena::CreateMaybeMessage< ::proto::steam::CDeviceAuth_AddAuthorizedBorrowers_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CDeviceAuth_AddAuthorizedBorrowers_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CDeviceAuth_RemoveAuthorizedBorrowers_Request* Arena::CreateMaybeMessage< ::proto::steam::CDeviceAuth_RemoveAuthorizedBorrowers_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CDeviceAuth_RemoveAuthorizedBorrowers_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CDeviceAuth_RemoveAuthorizedBorrowers_Response* Arena::CreateMaybeMessage< ::proto::steam::CDeviceAuth_RemoveAuthorizedBorrowers_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CDeviceAuth_RemoveAuthorizedBorrowers_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CDeviceAuth_GetAuthorizedAsBorrower_Request* Arena::CreateMaybeMessage< ::proto::steam::CDeviceAuth_GetAuthorizedAsBorrower_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CDeviceAuth_GetAuthorizedAsBorrower_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender* Arena::CreateMaybeMessage< ::proto::steam::CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CDeviceAuth_GetAuthorizedAsBorrower_Response* Arena::CreateMaybeMessage< ::proto::steam::CDeviceAuth_GetAuthorizedAsBorrower_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CDeviceAuth_GetAuthorizedAsBorrower_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CDeviceAuth_GetExcludedGamesInLibrary_Request* Arena::CreateMaybeMessage< ::proto::steam::CDeviceAuth_GetExcludedGamesInLibrary_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CDeviceAuth_GetExcludedGamesInLibrary_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame* Arena::CreateMaybeMessage< ::proto::steam::CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CDeviceAuth_GetExcludedGamesInLibrary_Response* Arena::CreateMaybeMessage< ::proto::steam::CDeviceAuth_GetExcludedGamesInLibrary_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CDeviceAuth_GetExcludedGamesInLibrary_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CDeviceAuth_GetBorrowerPlayHistory_Request* Arena::CreateMaybeMessage< ::proto::steam::CDeviceAuth_GetBorrowerPlayHistory_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CDeviceAuth_GetBorrowerPlayHistory_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory* Arena::CreateMaybeMessage< ::proto::steam::CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory* Arena::CreateMaybeMessage< ::proto::steam::CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CDeviceAuth_GetBorrowerPlayHistory_Response* Arena::CreateMaybeMessage< ::proto::steam::CDeviceAuth_GetBorrowerPlayHistory_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CDeviceAuth_GetBorrowerPlayHistory_Response >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
