// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steamnetworkingsockets_messages_certs.proto

#ifndef PROTOBUF_INCLUDED_steamnetworkingsockets_5fmessages_5fcerts_2eproto
#define PROTOBUF_INCLUDED_steamnetworkingsockets_5fmessages_5fcerts_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steamnetworkingsockets_5fmessages_5fcerts_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_steamnetworkingsockets_5fmessages_5fcerts_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_steamnetworkingsockets_5fmessages_5fcerts_2eproto();
namespace proto {
namespace steam {
class CMsgSteamDatagramCertificate;
class CMsgSteamDatagramCertificateDefaultTypeInternal;
extern CMsgSteamDatagramCertificateDefaultTypeInternal _CMsgSteamDatagramCertificate_default_instance_;
class CMsgSteamDatagramCertificateSigned;
class CMsgSteamDatagramCertificateSignedDefaultTypeInternal;
extern CMsgSteamDatagramCertificateSignedDefaultTypeInternal _CMsgSteamDatagramCertificateSigned_default_instance_;
class CMsgSteamNetworkingIdentity;
class CMsgSteamNetworkingIdentityDefaultTypeInternal;
extern CMsgSteamNetworkingIdentityDefaultTypeInternal _CMsgSteamNetworkingIdentity_default_instance_;
}  // namespace steam
}  // namespace proto
namespace google {
namespace protobuf {
template<> ::proto::steam::CMsgSteamDatagramCertificate* Arena::CreateMaybeMessage<::proto::steam::CMsgSteamDatagramCertificate>(Arena*);
template<> ::proto::steam::CMsgSteamDatagramCertificateSigned* Arena::CreateMaybeMessage<::proto::steam::CMsgSteamDatagramCertificateSigned>(Arena*);
template<> ::proto::steam::CMsgSteamNetworkingIdentity* Arena::CreateMaybeMessage<::proto::steam::CMsgSteamNetworkingIdentity>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace proto {
namespace steam {

enum CMsgSteamDatagramCertificate_EKeyType {
  CMsgSteamDatagramCertificate_EKeyType_INVALID = 0,
  CMsgSteamDatagramCertificate_EKeyType_ED25519 = 1
};
bool CMsgSteamDatagramCertificate_EKeyType_IsValid(int value);
const CMsgSteamDatagramCertificate_EKeyType CMsgSteamDatagramCertificate_EKeyType_EKeyType_MIN = CMsgSteamDatagramCertificate_EKeyType_INVALID;
const CMsgSteamDatagramCertificate_EKeyType CMsgSteamDatagramCertificate_EKeyType_EKeyType_MAX = CMsgSteamDatagramCertificate_EKeyType_ED25519;
const int CMsgSteamDatagramCertificate_EKeyType_EKeyType_ARRAYSIZE = CMsgSteamDatagramCertificate_EKeyType_EKeyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgSteamDatagramCertificate_EKeyType_descriptor();
inline const ::std::string& CMsgSteamDatagramCertificate_EKeyType_Name(CMsgSteamDatagramCertificate_EKeyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgSteamDatagramCertificate_EKeyType_descriptor(), value);
}
inline bool CMsgSteamDatagramCertificate_EKeyType_Parse(
    const ::std::string& name, CMsgSteamDatagramCertificate_EKeyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgSteamDatagramCertificate_EKeyType>(
    CMsgSteamDatagramCertificate_EKeyType_descriptor(), name, value);
}
// ===================================================================

class CMsgSteamNetworkingIdentity final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CMsgSteamNetworkingIdentity) */ {
 public:
  CMsgSteamNetworkingIdentity();
  virtual ~CMsgSteamNetworkingIdentity();

  CMsgSteamNetworkingIdentity(const CMsgSteamNetworkingIdentity& from);

  inline CMsgSteamNetworkingIdentity& operator=(const CMsgSteamNetworkingIdentity& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgSteamNetworkingIdentity(CMsgSteamNetworkingIdentity&& from) noexcept
    : CMsgSteamNetworkingIdentity() {
    *this = ::std::move(from);
  }

  inline CMsgSteamNetworkingIdentity& operator=(CMsgSteamNetworkingIdentity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgSteamNetworkingIdentity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSteamNetworkingIdentity* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamNetworkingIdentity*>(
               &_CMsgSteamNetworkingIdentity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CMsgSteamNetworkingIdentity* other);
  friend void swap(CMsgSteamNetworkingIdentity& a, CMsgSteamNetworkingIdentity& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSteamNetworkingIdentity* New() const final {
    return CreateMaybeMessage<CMsgSteamNetworkingIdentity>(nullptr);
  }

  CMsgSteamNetworkingIdentity* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSteamNetworkingIdentity>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgSteamNetworkingIdentity& from);
  void MergeFrom(const CMsgSteamNetworkingIdentity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamNetworkingIdentity* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes generic_bytes = 2;
  bool has_generic_bytes() const;
  void clear_generic_bytes();
  static const int kGenericBytesFieldNumber = 2;
  const ::std::string& generic_bytes() const;
  void set_generic_bytes(const ::std::string& value);
  #if LANG_CXX11
  void set_generic_bytes(::std::string&& value);
  #endif
  void set_generic_bytes(const char* value);
  void set_generic_bytes(const void* value, size_t size);
  ::std::string* mutable_generic_bytes();
  ::std::string* release_generic_bytes();
  void set_allocated_generic_bytes(::std::string* generic_bytes);

  // optional string generic_string = 3;
  bool has_generic_string() const;
  void clear_generic_string();
  static const int kGenericStringFieldNumber = 3;
  const ::std::string& generic_string() const;
  void set_generic_string(const ::std::string& value);
  #if LANG_CXX11
  void set_generic_string(::std::string&& value);
  #endif
  void set_generic_string(const char* value);
  void set_generic_string(const char* value, size_t size);
  ::std::string* mutable_generic_string();
  ::std::string* release_generic_string();
  void set_allocated_generic_string(::std::string* generic_string);

  // optional bytes ipv6_and_port = 4;
  bool has_ipv6_and_port() const;
  void clear_ipv6_and_port();
  static const int kIpv6AndPortFieldNumber = 4;
  const ::std::string& ipv6_and_port() const;
  void set_ipv6_and_port(const ::std::string& value);
  #if LANG_CXX11
  void set_ipv6_and_port(::std::string&& value);
  #endif
  void set_ipv6_and_port(const char* value);
  void set_ipv6_and_port(const void* value, size_t size);
  ::std::string* mutable_ipv6_and_port();
  ::std::string* release_ipv6_and_port();
  void set_allocated_ipv6_and_port(::std::string* ipv6_and_port);

  // optional string xbox_pairwise_id = 17;
  bool has_xbox_pairwise_id() const;
  void clear_xbox_pairwise_id();
  static const int kXboxPairwiseIdFieldNumber = 17;
  const ::std::string& xbox_pairwise_id() const;
  void set_xbox_pairwise_id(const ::std::string& value);
  #if LANG_CXX11
  void set_xbox_pairwise_id(::std::string&& value);
  #endif
  void set_xbox_pairwise_id(const char* value);
  void set_xbox_pairwise_id(const char* value, size_t size);
  ::std::string* mutable_xbox_pairwise_id();
  ::std::string* release_xbox_pairwise_id();
  void set_allocated_xbox_pairwise_id(::std::string* xbox_pairwise_id);

  // optional fixed64 steam_id = 16;
  bool has_steam_id() const;
  void clear_steam_id();
  static const int kSteamIdFieldNumber = 16;
  ::google::protobuf::uint64 steam_id() const;
  void set_steam_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CMsgSteamNetworkingIdentity)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr generic_bytes_;
  ::google::protobuf::internal::ArenaStringPtr generic_string_;
  ::google::protobuf::internal::ArenaStringPtr ipv6_and_port_;
  ::google::protobuf::internal::ArenaStringPtr xbox_pairwise_id_;
  ::google::protobuf::uint64 steam_id_;
  friend struct ::TableStruct_steamnetworkingsockets_5fmessages_5fcerts_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramCertificate final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CMsgSteamDatagramCertificate) */ {
 public:
  CMsgSteamDatagramCertificate();
  virtual ~CMsgSteamDatagramCertificate();

  CMsgSteamDatagramCertificate(const CMsgSteamDatagramCertificate& from);

  inline CMsgSteamDatagramCertificate& operator=(const CMsgSteamDatagramCertificate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgSteamDatagramCertificate(CMsgSteamDatagramCertificate&& from) noexcept
    : CMsgSteamDatagramCertificate() {
    *this = ::std::move(from);
  }

  inline CMsgSteamDatagramCertificate& operator=(CMsgSteamDatagramCertificate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgSteamDatagramCertificate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSteamDatagramCertificate* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamDatagramCertificate*>(
               &_CMsgSteamDatagramCertificate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CMsgSteamDatagramCertificate* other);
  friend void swap(CMsgSteamDatagramCertificate& a, CMsgSteamDatagramCertificate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSteamDatagramCertificate* New() const final {
    return CreateMaybeMessage<CMsgSteamDatagramCertificate>(nullptr);
  }

  CMsgSteamDatagramCertificate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSteamDatagramCertificate>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgSteamDatagramCertificate& from);
  void MergeFrom(const CMsgSteamDatagramCertificate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamDatagramCertificate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgSteamDatagramCertificate_EKeyType EKeyType;
  static const EKeyType INVALID =
    CMsgSteamDatagramCertificate_EKeyType_INVALID;
  static const EKeyType ED25519 =
    CMsgSteamDatagramCertificate_EKeyType_ED25519;
  static inline bool EKeyType_IsValid(int value) {
    return CMsgSteamDatagramCertificate_EKeyType_IsValid(value);
  }
  static const EKeyType EKeyType_MIN =
    CMsgSteamDatagramCertificate_EKeyType_EKeyType_MIN;
  static const EKeyType EKeyType_MAX =
    CMsgSteamDatagramCertificate_EKeyType_EKeyType_MAX;
  static const int EKeyType_ARRAYSIZE =
    CMsgSteamDatagramCertificate_EKeyType_EKeyType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EKeyType_descriptor() {
    return CMsgSteamDatagramCertificate_EKeyType_descriptor();
  }
  static inline const ::std::string& EKeyType_Name(EKeyType value) {
    return CMsgSteamDatagramCertificate_EKeyType_Name(value);
  }
  static inline bool EKeyType_Parse(const ::std::string& name,
      EKeyType* value) {
    return CMsgSteamDatagramCertificate_EKeyType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated fixed32 gameserver_datacenter_ids = 5;
  int gameserver_datacenter_ids_size() const;
  void clear_gameserver_datacenter_ids();
  static const int kGameserverDatacenterIdsFieldNumber = 5;
  ::google::protobuf::uint32 gameserver_datacenter_ids(int index) const;
  void set_gameserver_datacenter_ids(int index, ::google::protobuf::uint32 value);
  void add_gameserver_datacenter_ids(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      gameserver_datacenter_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_gameserver_datacenter_ids();

  // optional bytes key_data = 2;
  bool has_key_data() const;
  void clear_key_data();
  static const int kKeyDataFieldNumber = 2;
  const ::std::string& key_data() const;
  void set_key_data(const ::std::string& value);
  #if LANG_CXX11
  void set_key_data(::std::string&& value);
  #endif
  void set_key_data(const char* value);
  void set_key_data(const void* value, size_t size);
  ::std::string* mutable_key_data();
  ::std::string* release_key_data();
  void set_allocated_key_data(::std::string* key_data);

  // optional .proto.steam.CMsgSteamNetworkingIdentity identity = 11;
  bool has_identity() const;
  void clear_identity();
  static const int kIdentityFieldNumber = 11;
  const ::proto::steam::CMsgSteamNetworkingIdentity& identity() const;
  ::proto::steam::CMsgSteamNetworkingIdentity* release_identity();
  ::proto::steam::CMsgSteamNetworkingIdentity* mutable_identity();
  void set_allocated_identity(::proto::steam::CMsgSteamNetworkingIdentity* identity);

  // optional fixed64 legacy_steam_id = 4;
  bool has_legacy_steam_id() const;
  void clear_legacy_steam_id();
  static const int kLegacySteamIdFieldNumber = 4;
  ::google::protobuf::uint64 legacy_steam_id() const;
  void set_legacy_steam_id(::google::protobuf::uint64 value);

  // optional .proto.steam.CMsgSteamDatagramCertificate.EKeyType key_type = 1 [default = INVALID];
  bool has_key_type() const;
  void clear_key_type();
  static const int kKeyTypeFieldNumber = 1;
  ::proto::steam::CMsgSteamDatagramCertificate_EKeyType key_type() const;
  void set_key_type(::proto::steam::CMsgSteamDatagramCertificate_EKeyType value);

  // optional fixed32 time_created = 8;
  bool has_time_created() const;
  void clear_time_created();
  static const int kTimeCreatedFieldNumber = 8;
  ::google::protobuf::uint32 time_created() const;
  void set_time_created(::google::protobuf::uint32 value);

  // optional fixed32 time_expiry = 9;
  bool has_time_expiry() const;
  void clear_time_expiry();
  static const int kTimeExpiryFieldNumber = 9;
  ::google::protobuf::uint32 time_expiry() const;
  void set_time_expiry(::google::protobuf::uint32 value);

  // optional uint32 app_id = 10;
  bool has_app_id() const;
  void clear_app_id();
  static const int kAppIdFieldNumber = 10;
  ::google::protobuf::uint32 app_id() const;
  void set_app_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CMsgSteamDatagramCertificate)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > gameserver_datacenter_ids_;
  ::google::protobuf::internal::ArenaStringPtr key_data_;
  ::proto::steam::CMsgSteamNetworkingIdentity* identity_;
  ::google::protobuf::uint64 legacy_steam_id_;
  int key_type_;
  ::google::protobuf::uint32 time_created_;
  ::google::protobuf::uint32 time_expiry_;
  ::google::protobuf::uint32 app_id_;
  friend struct ::TableStruct_steamnetworkingsockets_5fmessages_5fcerts_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramCertificateSigned final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CMsgSteamDatagramCertificateSigned) */ {
 public:
  CMsgSteamDatagramCertificateSigned();
  virtual ~CMsgSteamDatagramCertificateSigned();

  CMsgSteamDatagramCertificateSigned(const CMsgSteamDatagramCertificateSigned& from);

  inline CMsgSteamDatagramCertificateSigned& operator=(const CMsgSteamDatagramCertificateSigned& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgSteamDatagramCertificateSigned(CMsgSteamDatagramCertificateSigned&& from) noexcept
    : CMsgSteamDatagramCertificateSigned() {
    *this = ::std::move(from);
  }

  inline CMsgSteamDatagramCertificateSigned& operator=(CMsgSteamDatagramCertificateSigned&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgSteamDatagramCertificateSigned& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSteamDatagramCertificateSigned* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamDatagramCertificateSigned*>(
               &_CMsgSteamDatagramCertificateSigned_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CMsgSteamDatagramCertificateSigned* other);
  friend void swap(CMsgSteamDatagramCertificateSigned& a, CMsgSteamDatagramCertificateSigned& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSteamDatagramCertificateSigned* New() const final {
    return CreateMaybeMessage<CMsgSteamDatagramCertificateSigned>(nullptr);
  }

  CMsgSteamDatagramCertificateSigned* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSteamDatagramCertificateSigned>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgSteamDatagramCertificateSigned& from);
  void MergeFrom(const CMsgSteamDatagramCertificateSigned& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamDatagramCertificateSigned* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes cert = 4;
  bool has_cert() const;
  void clear_cert();
  static const int kCertFieldNumber = 4;
  const ::std::string& cert() const;
  void set_cert(const ::std::string& value);
  #if LANG_CXX11
  void set_cert(::std::string&& value);
  #endif
  void set_cert(const char* value);
  void set_cert(const void* value, size_t size);
  ::std::string* mutable_cert();
  ::std::string* release_cert();
  void set_allocated_cert(::std::string* cert);

  // optional bytes ca_signature = 6;
  bool has_ca_signature() const;
  void clear_ca_signature();
  static const int kCaSignatureFieldNumber = 6;
  const ::std::string& ca_signature() const;
  void set_ca_signature(const ::std::string& value);
  #if LANG_CXX11
  void set_ca_signature(::std::string&& value);
  #endif
  void set_ca_signature(const char* value);
  void set_ca_signature(const void* value, size_t size);
  ::std::string* mutable_ca_signature();
  ::std::string* release_ca_signature();
  void set_allocated_ca_signature(::std::string* ca_signature);

  // optional fixed64 ca_key_id = 5;
  bool has_ca_key_id() const;
  void clear_ca_key_id();
  static const int kCaKeyIdFieldNumber = 5;
  ::google::protobuf::uint64 ca_key_id() const;
  void set_ca_key_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CMsgSteamDatagramCertificateSigned)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr cert_;
  ::google::protobuf::internal::ArenaStringPtr ca_signature_;
  ::google::protobuf::uint64 ca_key_id_;
  friend struct ::TableStruct_steamnetworkingsockets_5fmessages_5fcerts_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMsgSteamNetworkingIdentity

// optional fixed64 steam_id = 16;
inline bool CMsgSteamNetworkingIdentity::has_steam_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgSteamNetworkingIdentity::clear_steam_id() {
  steam_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint64 CMsgSteamNetworkingIdentity::steam_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamNetworkingIdentity.steam_id)
  return steam_id_;
}
inline void CMsgSteamNetworkingIdentity::set_steam_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamNetworkingIdentity.steam_id)
}

// optional string xbox_pairwise_id = 17;
inline bool CMsgSteamNetworkingIdentity::has_xbox_pairwise_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamNetworkingIdentity::clear_xbox_pairwise_id() {
  xbox_pairwise_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::std::string& CMsgSteamNetworkingIdentity::xbox_pairwise_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamNetworkingIdentity.xbox_pairwise_id)
  return xbox_pairwise_id_.GetNoArena();
}
inline void CMsgSteamNetworkingIdentity::set_xbox_pairwise_id(const ::std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  xbox_pairwise_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamNetworkingIdentity.xbox_pairwise_id)
}
#if LANG_CXX11
inline void CMsgSteamNetworkingIdentity::set_xbox_pairwise_id(::std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  xbox_pairwise_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgSteamNetworkingIdentity.xbox_pairwise_id)
}
#endif
inline void CMsgSteamNetworkingIdentity::set_xbox_pairwise_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  xbox_pairwise_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgSteamNetworkingIdentity.xbox_pairwise_id)
}
inline void CMsgSteamNetworkingIdentity::set_xbox_pairwise_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  xbox_pairwise_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgSteamNetworkingIdentity.xbox_pairwise_id)
}
inline ::std::string* CMsgSteamNetworkingIdentity::mutable_xbox_pairwise_id() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamNetworkingIdentity.xbox_pairwise_id)
  return xbox_pairwise_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgSteamNetworkingIdentity::release_xbox_pairwise_id() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSteamNetworkingIdentity.xbox_pairwise_id)
  if (!has_xbox_pairwise_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return xbox_pairwise_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgSteamNetworkingIdentity::set_allocated_xbox_pairwise_id(::std::string* xbox_pairwise_id) {
  if (xbox_pairwise_id != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  xbox_pairwise_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), xbox_pairwise_id);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSteamNetworkingIdentity.xbox_pairwise_id)
}

// optional bytes generic_bytes = 2;
inline bool CMsgSteamNetworkingIdentity::has_generic_bytes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamNetworkingIdentity::clear_generic_bytes() {
  generic_bytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgSteamNetworkingIdentity::generic_bytes() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamNetworkingIdentity.generic_bytes)
  return generic_bytes_.GetNoArena();
}
inline void CMsgSteamNetworkingIdentity::set_generic_bytes(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  generic_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamNetworkingIdentity.generic_bytes)
}
#if LANG_CXX11
inline void CMsgSteamNetworkingIdentity::set_generic_bytes(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  generic_bytes_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgSteamNetworkingIdentity.generic_bytes)
}
#endif
inline void CMsgSteamNetworkingIdentity::set_generic_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  generic_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgSteamNetworkingIdentity.generic_bytes)
}
inline void CMsgSteamNetworkingIdentity::set_generic_bytes(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  generic_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgSteamNetworkingIdentity.generic_bytes)
}
inline ::std::string* CMsgSteamNetworkingIdentity::mutable_generic_bytes() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamNetworkingIdentity.generic_bytes)
  return generic_bytes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgSteamNetworkingIdentity::release_generic_bytes() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSteamNetworkingIdentity.generic_bytes)
  if (!has_generic_bytes()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return generic_bytes_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgSteamNetworkingIdentity::set_allocated_generic_bytes(::std::string* generic_bytes) {
  if (generic_bytes != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  generic_bytes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), generic_bytes);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSteamNetworkingIdentity.generic_bytes)
}

// optional string generic_string = 3;
inline bool CMsgSteamNetworkingIdentity::has_generic_string() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamNetworkingIdentity::clear_generic_string() {
  generic_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CMsgSteamNetworkingIdentity::generic_string() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamNetworkingIdentity.generic_string)
  return generic_string_.GetNoArena();
}
inline void CMsgSteamNetworkingIdentity::set_generic_string(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  generic_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamNetworkingIdentity.generic_string)
}
#if LANG_CXX11
inline void CMsgSteamNetworkingIdentity::set_generic_string(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  generic_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgSteamNetworkingIdentity.generic_string)
}
#endif
inline void CMsgSteamNetworkingIdentity::set_generic_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  generic_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgSteamNetworkingIdentity.generic_string)
}
inline void CMsgSteamNetworkingIdentity::set_generic_string(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  generic_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgSteamNetworkingIdentity.generic_string)
}
inline ::std::string* CMsgSteamNetworkingIdentity::mutable_generic_string() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamNetworkingIdentity.generic_string)
  return generic_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgSteamNetworkingIdentity::release_generic_string() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSteamNetworkingIdentity.generic_string)
  if (!has_generic_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return generic_string_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgSteamNetworkingIdentity::set_allocated_generic_string(::std::string* generic_string) {
  if (generic_string != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  generic_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), generic_string);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSteamNetworkingIdentity.generic_string)
}

// optional bytes ipv6_and_port = 4;
inline bool CMsgSteamNetworkingIdentity::has_ipv6_and_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamNetworkingIdentity::clear_ipv6_and_port() {
  ipv6_and_port_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& CMsgSteamNetworkingIdentity::ipv6_and_port() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamNetworkingIdentity.ipv6_and_port)
  return ipv6_and_port_.GetNoArena();
}
inline void CMsgSteamNetworkingIdentity::set_ipv6_and_port(const ::std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  ipv6_and_port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamNetworkingIdentity.ipv6_and_port)
}
#if LANG_CXX11
inline void CMsgSteamNetworkingIdentity::set_ipv6_and_port(::std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  ipv6_and_port_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgSteamNetworkingIdentity.ipv6_and_port)
}
#endif
inline void CMsgSteamNetworkingIdentity::set_ipv6_and_port(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  ipv6_and_port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgSteamNetworkingIdentity.ipv6_and_port)
}
inline void CMsgSteamNetworkingIdentity::set_ipv6_and_port(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  ipv6_and_port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgSteamNetworkingIdentity.ipv6_and_port)
}
inline ::std::string* CMsgSteamNetworkingIdentity::mutable_ipv6_and_port() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamNetworkingIdentity.ipv6_and_port)
  return ipv6_and_port_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgSteamNetworkingIdentity::release_ipv6_and_port() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSteamNetworkingIdentity.ipv6_and_port)
  if (!has_ipv6_and_port()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return ipv6_and_port_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgSteamNetworkingIdentity::set_allocated_ipv6_and_port(::std::string* ipv6_and_port) {
  if (ipv6_and_port != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ipv6_and_port_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipv6_and_port);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSteamNetworkingIdentity.ipv6_and_port)
}

// -------------------------------------------------------------------

// CMsgSteamDatagramCertificate

// optional .proto.steam.CMsgSteamDatagramCertificate.EKeyType key_type = 1 [default = INVALID];
inline bool CMsgSteamDatagramCertificate::has_key_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamDatagramCertificate::clear_key_type() {
  key_type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::proto::steam::CMsgSteamDatagramCertificate_EKeyType CMsgSteamDatagramCertificate::key_type() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramCertificate.key_type)
  return static_cast< ::proto::steam::CMsgSteamDatagramCertificate_EKeyType >(key_type_);
}
inline void CMsgSteamDatagramCertificate::set_key_type(::proto::steam::CMsgSteamDatagramCertificate_EKeyType value) {
  assert(::proto::steam::CMsgSteamDatagramCertificate_EKeyType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  key_type_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramCertificate.key_type)
}

// optional bytes key_data = 2;
inline bool CMsgSteamDatagramCertificate::has_key_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramCertificate::clear_key_data() {
  key_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgSteamDatagramCertificate::key_data() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramCertificate.key_data)
  return key_data_.GetNoArena();
}
inline void CMsgSteamDatagramCertificate::set_key_data(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramCertificate.key_data)
}
#if LANG_CXX11
inline void CMsgSteamDatagramCertificate::set_key_data(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgSteamDatagramCertificate.key_data)
}
#endif
inline void CMsgSteamDatagramCertificate::set_key_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgSteamDatagramCertificate.key_data)
}
inline void CMsgSteamDatagramCertificate::set_key_data(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgSteamDatagramCertificate.key_data)
}
inline ::std::string* CMsgSteamDatagramCertificate::mutable_key_data() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamDatagramCertificate.key_data)
  return key_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgSteamDatagramCertificate::release_key_data() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSteamDatagramCertificate.key_data)
  if (!has_key_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgSteamDatagramCertificate::set_allocated_key_data(::std::string* key_data) {
  if (key_data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key_data);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSteamDatagramCertificate.key_data)
}

// optional fixed64 legacy_steam_id = 4;
inline bool CMsgSteamDatagramCertificate::has_legacy_steam_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramCertificate::clear_legacy_steam_id() {
  legacy_steam_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint64 CMsgSteamDatagramCertificate::legacy_steam_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramCertificate.legacy_steam_id)
  return legacy_steam_id_;
}
inline void CMsgSteamDatagramCertificate::set_legacy_steam_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  legacy_steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramCertificate.legacy_steam_id)
}

// optional .proto.steam.CMsgSteamNetworkingIdentity identity = 11;
inline bool CMsgSteamDatagramCertificate::has_identity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramCertificate::clear_identity() {
  if (identity_ != nullptr) identity_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::proto::steam::CMsgSteamNetworkingIdentity& CMsgSteamDatagramCertificate::identity() const {
  const ::proto::steam::CMsgSteamNetworkingIdentity* p = identity_;
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramCertificate.identity)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::steam::CMsgSteamNetworkingIdentity*>(
      &::proto::steam::_CMsgSteamNetworkingIdentity_default_instance_);
}
inline ::proto::steam::CMsgSteamNetworkingIdentity* CMsgSteamDatagramCertificate::release_identity() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSteamDatagramCertificate.identity)
  _has_bits_[0] &= ~0x00000002u;
  ::proto::steam::CMsgSteamNetworkingIdentity* temp = identity_;
  identity_ = nullptr;
  return temp;
}
inline ::proto::steam::CMsgSteamNetworkingIdentity* CMsgSteamDatagramCertificate::mutable_identity() {
  _has_bits_[0] |= 0x00000002u;
  if (identity_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::steam::CMsgSteamNetworkingIdentity>(GetArenaNoVirtual());
    identity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamDatagramCertificate.identity)
  return identity_;
}
inline void CMsgSteamDatagramCertificate::set_allocated_identity(::proto::steam::CMsgSteamNetworkingIdentity* identity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete identity_;
  }
  if (identity) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      identity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, identity, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  identity_ = identity;
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSteamDatagramCertificate.identity)
}

// repeated fixed32 gameserver_datacenter_ids = 5;
inline int CMsgSteamDatagramCertificate::gameserver_datacenter_ids_size() const {
  return gameserver_datacenter_ids_.size();
}
inline void CMsgSteamDatagramCertificate::clear_gameserver_datacenter_ids() {
  gameserver_datacenter_ids_.Clear();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramCertificate::gameserver_datacenter_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramCertificate.gameserver_datacenter_ids)
  return gameserver_datacenter_ids_.Get(index);
}
inline void CMsgSteamDatagramCertificate::set_gameserver_datacenter_ids(int index, ::google::protobuf::uint32 value) {
  gameserver_datacenter_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramCertificate.gameserver_datacenter_ids)
}
inline void CMsgSteamDatagramCertificate::add_gameserver_datacenter_ids(::google::protobuf::uint32 value) {
  gameserver_datacenter_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.steam.CMsgSteamDatagramCertificate.gameserver_datacenter_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgSteamDatagramCertificate::gameserver_datacenter_ids() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgSteamDatagramCertificate.gameserver_datacenter_ids)
  return gameserver_datacenter_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgSteamDatagramCertificate::mutable_gameserver_datacenter_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgSteamDatagramCertificate.gameserver_datacenter_ids)
  return &gameserver_datacenter_ids_;
}

// optional fixed32 time_created = 8;
inline bool CMsgSteamDatagramCertificate::has_time_created() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgSteamDatagramCertificate::clear_time_created() {
  time_created_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramCertificate::time_created() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramCertificate.time_created)
  return time_created_;
}
inline void CMsgSteamDatagramCertificate::set_time_created(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  time_created_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramCertificate.time_created)
}

// optional fixed32 time_expiry = 9;
inline bool CMsgSteamDatagramCertificate::has_time_expiry() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgSteamDatagramCertificate::clear_time_expiry() {
  time_expiry_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramCertificate::time_expiry() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramCertificate.time_expiry)
  return time_expiry_;
}
inline void CMsgSteamDatagramCertificate::set_time_expiry(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  time_expiry_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramCertificate.time_expiry)
}

// optional uint32 app_id = 10;
inline bool CMsgSteamDatagramCertificate::has_app_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgSteamDatagramCertificate::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramCertificate::app_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramCertificate.app_id)
  return app_id_;
}
inline void CMsgSteamDatagramCertificate::set_app_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramCertificate.app_id)
}

// -------------------------------------------------------------------

// CMsgSteamDatagramCertificateSigned

// optional bytes cert = 4;
inline bool CMsgSteamDatagramCertificateSigned::has_cert() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramCertificateSigned::clear_cert() {
  cert_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgSteamDatagramCertificateSigned::cert() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramCertificateSigned.cert)
  return cert_.GetNoArena();
}
inline void CMsgSteamDatagramCertificateSigned::set_cert(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  cert_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramCertificateSigned.cert)
}
#if LANG_CXX11
inline void CMsgSteamDatagramCertificateSigned::set_cert(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  cert_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgSteamDatagramCertificateSigned.cert)
}
#endif
inline void CMsgSteamDatagramCertificateSigned::set_cert(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  cert_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgSteamDatagramCertificateSigned.cert)
}
inline void CMsgSteamDatagramCertificateSigned::set_cert(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  cert_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgSteamDatagramCertificateSigned.cert)
}
inline ::std::string* CMsgSteamDatagramCertificateSigned::mutable_cert() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamDatagramCertificateSigned.cert)
  return cert_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgSteamDatagramCertificateSigned::release_cert() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSteamDatagramCertificateSigned.cert)
  if (!has_cert()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return cert_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgSteamDatagramCertificateSigned::set_allocated_cert(::std::string* cert) {
  if (cert != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cert_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cert);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSteamDatagramCertificateSigned.cert)
}

// optional fixed64 ca_key_id = 5;
inline bool CMsgSteamDatagramCertificateSigned::has_ca_key_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramCertificateSigned::clear_ca_key_id() {
  ca_key_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint64 CMsgSteamDatagramCertificateSigned::ca_key_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramCertificateSigned.ca_key_id)
  return ca_key_id_;
}
inline void CMsgSteamDatagramCertificateSigned::set_ca_key_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  ca_key_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramCertificateSigned.ca_key_id)
}

// optional bytes ca_signature = 6;
inline bool CMsgSteamDatagramCertificateSigned::has_ca_signature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramCertificateSigned::clear_ca_signature() {
  ca_signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CMsgSteamDatagramCertificateSigned::ca_signature() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramCertificateSigned.ca_signature)
  return ca_signature_.GetNoArena();
}
inline void CMsgSteamDatagramCertificateSigned::set_ca_signature(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  ca_signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramCertificateSigned.ca_signature)
}
#if LANG_CXX11
inline void CMsgSteamDatagramCertificateSigned::set_ca_signature(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  ca_signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgSteamDatagramCertificateSigned.ca_signature)
}
#endif
inline void CMsgSteamDatagramCertificateSigned::set_ca_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  ca_signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgSteamDatagramCertificateSigned.ca_signature)
}
inline void CMsgSteamDatagramCertificateSigned::set_ca_signature(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  ca_signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgSteamDatagramCertificateSigned.ca_signature)
}
inline ::std::string* CMsgSteamDatagramCertificateSigned::mutable_ca_signature() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamDatagramCertificateSigned.ca_signature)
  return ca_signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgSteamDatagramCertificateSigned::release_ca_signature() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSteamDatagramCertificateSigned.ca_signature)
  if (!has_ca_signature()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return ca_signature_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgSteamDatagramCertificateSigned::set_allocated_ca_signature(::std::string* ca_signature) {
  if (ca_signature != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ca_signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ca_signature);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSteamDatagramCertificateSigned.ca_signature)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace steam
}  // namespace proto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::proto::steam::CMsgSteamDatagramCertificate_EKeyType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::steam::CMsgSteamDatagramCertificate_EKeyType>() {
  return ::proto::steam::CMsgSteamDatagramCertificate_EKeyType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_steamnetworkingsockets_5fmessages_5fcerts_2eproto
