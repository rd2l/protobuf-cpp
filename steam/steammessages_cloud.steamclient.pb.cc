// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_cloud.steamclient.proto

#include "steammessages_cloud.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fcloud_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CCloud_BeginHTTPUpload_Response_HTTPHeaders_steammessages_5fcloud_2esteamclient_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fcloud_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CCloud_ClientFileDownload_Response_HTTPHeaders_steammessages_5fcloud_2esteamclient_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fcloud_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CCloud_EnumerateUserApps_Response_Apps_steammessages_5fcloud_2esteamclient_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fcloud_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CCloud_UserFile_steammessages_5fcloud_2esteamclient_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fcloud_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ClientCloudFileUploadBlockDetails_HTTPHeaders_steammessages_5fcloud_2esteamclient_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fcloud_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ClientCloudFileUploadBlockDetails_steammessages_5fcloud_2esteamclient_2eproto;
namespace proto {
namespace steam {
class CCloud_GetUploadServerInfo_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCloud_GetUploadServerInfo_Request> _instance;
} _CCloud_GetUploadServerInfo_Request_default_instance_;
class CCloud_GetUploadServerInfo_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCloud_GetUploadServerInfo_Response> _instance;
} _CCloud_GetUploadServerInfo_Response_default_instance_;
class CCloud_BeginHTTPUpload_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCloud_BeginHTTPUpload_Request> _instance;
} _CCloud_BeginHTTPUpload_Request_default_instance_;
class CCloud_BeginHTTPUpload_Response_HTTPHeadersDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCloud_BeginHTTPUpload_Response_HTTPHeaders> _instance;
} _CCloud_BeginHTTPUpload_Response_HTTPHeaders_default_instance_;
class CCloud_BeginHTTPUpload_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCloud_BeginHTTPUpload_Response> _instance;
} _CCloud_BeginHTTPUpload_Response_default_instance_;
class CCloud_CommitHTTPUpload_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCloud_CommitHTTPUpload_Request> _instance;
} _CCloud_CommitHTTPUpload_Request_default_instance_;
class CCloud_CommitHTTPUpload_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCloud_CommitHTTPUpload_Response> _instance;
} _CCloud_CommitHTTPUpload_Response_default_instance_;
class CCloud_GetFileDetails_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCloud_GetFileDetails_Request> _instance;
} _CCloud_GetFileDetails_Request_default_instance_;
class CCloud_UserFileDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCloud_UserFile> _instance;
} _CCloud_UserFile_default_instance_;
class CCloud_GetFileDetails_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCloud_GetFileDetails_Response> _instance;
} _CCloud_GetFileDetails_Response_default_instance_;
class CCloud_EnumerateUserFiles_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCloud_EnumerateUserFiles_Request> _instance;
} _CCloud_EnumerateUserFiles_Request_default_instance_;
class CCloud_EnumerateUserFiles_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCloud_EnumerateUserFiles_Response> _instance;
} _CCloud_EnumerateUserFiles_Response_default_instance_;
class CCloud_Delete_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCloud_Delete_Request> _instance;
} _CCloud_Delete_Request_default_instance_;
class CCloud_Delete_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCloud_Delete_Response> _instance;
} _CCloud_Delete_Response_default_instance_;
class CCloud_GetClientEncryptionKey_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCloud_GetClientEncryptionKey_Request> _instance;
} _CCloud_GetClientEncryptionKey_Request_default_instance_;
class CCloud_GetClientEncryptionKey_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCloud_GetClientEncryptionKey_Response> _instance;
} _CCloud_GetClientEncryptionKey_Response_default_instance_;
class CCloud_CDNReport_NotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCloud_CDNReport_Notification> _instance;
} _CCloud_CDNReport_Notification_default_instance_;
class CCloud_ExternalStorageTransferReport_NotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCloud_ExternalStorageTransferReport_Notification> _instance;
} _CCloud_ExternalStorageTransferReport_Notification_default_instance_;
class CCloud_ClientBeginFileUpload_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCloud_ClientBeginFileUpload_Request> _instance;
} _CCloud_ClientBeginFileUpload_Request_default_instance_;
class ClientCloudFileUploadBlockDetails_HTTPHeadersDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ClientCloudFileUploadBlockDetails_HTTPHeaders> _instance;
} _ClientCloudFileUploadBlockDetails_HTTPHeaders_default_instance_;
class ClientCloudFileUploadBlockDetailsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ClientCloudFileUploadBlockDetails> _instance;
} _ClientCloudFileUploadBlockDetails_default_instance_;
class CCloud_ClientBeginFileUpload_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCloud_ClientBeginFileUpload_Response> _instance;
} _CCloud_ClientBeginFileUpload_Response_default_instance_;
class CCloud_ClientCommitFileUpload_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCloud_ClientCommitFileUpload_Request> _instance;
} _CCloud_ClientCommitFileUpload_Request_default_instance_;
class CCloud_ClientCommitFileUpload_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCloud_ClientCommitFileUpload_Response> _instance;
} _CCloud_ClientCommitFileUpload_Response_default_instance_;
class CCloud_ClientFileDownload_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCloud_ClientFileDownload_Request> _instance;
} _CCloud_ClientFileDownload_Request_default_instance_;
class CCloud_ClientFileDownload_Response_HTTPHeadersDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCloud_ClientFileDownload_Response_HTTPHeaders> _instance;
} _CCloud_ClientFileDownload_Response_HTTPHeaders_default_instance_;
class CCloud_ClientFileDownload_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCloud_ClientFileDownload_Response> _instance;
} _CCloud_ClientFileDownload_Response_default_instance_;
class CCloud_ClientDeleteFile_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCloud_ClientDeleteFile_Request> _instance;
} _CCloud_ClientDeleteFile_Request_default_instance_;
class CCloud_ClientDeleteFile_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCloud_ClientDeleteFile_Response> _instance;
} _CCloud_ClientDeleteFile_Response_default_instance_;
class CCloud_ClientConflictResolution_NotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCloud_ClientConflictResolution_Notification> _instance;
} _CCloud_ClientConflictResolution_Notification_default_instance_;
class CCloud_EnumerateUserApps_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCloud_EnumerateUserApps_Request> _instance;
} _CCloud_EnumerateUserApps_Request_default_instance_;
class CCloud_EnumerateUserApps_Response_AppsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCloud_EnumerateUserApps_Response_Apps> _instance;
} _CCloud_EnumerateUserApps_Response_Apps_default_instance_;
class CCloud_EnumerateUserApps_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCloud_EnumerateUserApps_Response> _instance;
} _CCloud_EnumerateUserApps_Response_default_instance_;
}  // namespace steam
}  // namespace proto
static void InitDefaultsCCloud_GetUploadServerInfo_Request_steammessages_5fcloud_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CCloud_GetUploadServerInfo_Request_default_instance_;
    new (ptr) ::proto::steam::CCloud_GetUploadServerInfo_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CCloud_GetUploadServerInfo_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CCloud_GetUploadServerInfo_Request_steammessages_5fcloud_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCCloud_GetUploadServerInfo_Request_steammessages_5fcloud_2esteamclient_2eproto}, {}};

static void InitDefaultsCCloud_GetUploadServerInfo_Response_steammessages_5fcloud_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CCloud_GetUploadServerInfo_Response_default_instance_;
    new (ptr) ::proto::steam::CCloud_GetUploadServerInfo_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CCloud_GetUploadServerInfo_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CCloud_GetUploadServerInfo_Response_steammessages_5fcloud_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCCloud_GetUploadServerInfo_Response_steammessages_5fcloud_2esteamclient_2eproto}, {}};

static void InitDefaultsCCloud_BeginHTTPUpload_Request_steammessages_5fcloud_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CCloud_BeginHTTPUpload_Request_default_instance_;
    new (ptr) ::proto::steam::CCloud_BeginHTTPUpload_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CCloud_BeginHTTPUpload_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CCloud_BeginHTTPUpload_Request_steammessages_5fcloud_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCCloud_BeginHTTPUpload_Request_steammessages_5fcloud_2esteamclient_2eproto}, {}};

static void InitDefaultsCCloud_BeginHTTPUpload_Response_HTTPHeaders_steammessages_5fcloud_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CCloud_BeginHTTPUpload_Response_HTTPHeaders_default_instance_;
    new (ptr) ::proto::steam::CCloud_BeginHTTPUpload_Response_HTTPHeaders();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CCloud_BeginHTTPUpload_Response_HTTPHeaders::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CCloud_BeginHTTPUpload_Response_HTTPHeaders_steammessages_5fcloud_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCCloud_BeginHTTPUpload_Response_HTTPHeaders_steammessages_5fcloud_2esteamclient_2eproto}, {}};

static void InitDefaultsCCloud_BeginHTTPUpload_Response_steammessages_5fcloud_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CCloud_BeginHTTPUpload_Response_default_instance_;
    new (ptr) ::proto::steam::CCloud_BeginHTTPUpload_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CCloud_BeginHTTPUpload_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CCloud_BeginHTTPUpload_Response_steammessages_5fcloud_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCCloud_BeginHTTPUpload_Response_steammessages_5fcloud_2esteamclient_2eproto}, {
      &scc_info_CCloud_BeginHTTPUpload_Response_HTTPHeaders_steammessages_5fcloud_2esteamclient_2eproto.base,}};

static void InitDefaultsCCloud_CommitHTTPUpload_Request_steammessages_5fcloud_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CCloud_CommitHTTPUpload_Request_default_instance_;
    new (ptr) ::proto::steam::CCloud_CommitHTTPUpload_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CCloud_CommitHTTPUpload_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CCloud_CommitHTTPUpload_Request_steammessages_5fcloud_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCCloud_CommitHTTPUpload_Request_steammessages_5fcloud_2esteamclient_2eproto}, {}};

static void InitDefaultsCCloud_CommitHTTPUpload_Response_steammessages_5fcloud_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CCloud_CommitHTTPUpload_Response_default_instance_;
    new (ptr) ::proto::steam::CCloud_CommitHTTPUpload_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CCloud_CommitHTTPUpload_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CCloud_CommitHTTPUpload_Response_steammessages_5fcloud_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCCloud_CommitHTTPUpload_Response_steammessages_5fcloud_2esteamclient_2eproto}, {}};

static void InitDefaultsCCloud_GetFileDetails_Request_steammessages_5fcloud_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CCloud_GetFileDetails_Request_default_instance_;
    new (ptr) ::proto::steam::CCloud_GetFileDetails_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CCloud_GetFileDetails_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CCloud_GetFileDetails_Request_steammessages_5fcloud_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCCloud_GetFileDetails_Request_steammessages_5fcloud_2esteamclient_2eproto}, {}};

static void InitDefaultsCCloud_UserFile_steammessages_5fcloud_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CCloud_UserFile_default_instance_;
    new (ptr) ::proto::steam::CCloud_UserFile();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CCloud_UserFile::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CCloud_UserFile_steammessages_5fcloud_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCCloud_UserFile_steammessages_5fcloud_2esteamclient_2eproto}, {}};

static void InitDefaultsCCloud_GetFileDetails_Response_steammessages_5fcloud_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CCloud_GetFileDetails_Response_default_instance_;
    new (ptr) ::proto::steam::CCloud_GetFileDetails_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CCloud_GetFileDetails_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CCloud_GetFileDetails_Response_steammessages_5fcloud_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCCloud_GetFileDetails_Response_steammessages_5fcloud_2esteamclient_2eproto}, {
      &scc_info_CCloud_UserFile_steammessages_5fcloud_2esteamclient_2eproto.base,}};

static void InitDefaultsCCloud_EnumerateUserFiles_Request_steammessages_5fcloud_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CCloud_EnumerateUserFiles_Request_default_instance_;
    new (ptr) ::proto::steam::CCloud_EnumerateUserFiles_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CCloud_EnumerateUserFiles_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CCloud_EnumerateUserFiles_Request_steammessages_5fcloud_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCCloud_EnumerateUserFiles_Request_steammessages_5fcloud_2esteamclient_2eproto}, {}};

static void InitDefaultsCCloud_EnumerateUserFiles_Response_steammessages_5fcloud_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CCloud_EnumerateUserFiles_Response_default_instance_;
    new (ptr) ::proto::steam::CCloud_EnumerateUserFiles_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CCloud_EnumerateUserFiles_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CCloud_EnumerateUserFiles_Response_steammessages_5fcloud_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCCloud_EnumerateUserFiles_Response_steammessages_5fcloud_2esteamclient_2eproto}, {
      &scc_info_CCloud_UserFile_steammessages_5fcloud_2esteamclient_2eproto.base,}};

static void InitDefaultsCCloud_Delete_Request_steammessages_5fcloud_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CCloud_Delete_Request_default_instance_;
    new (ptr) ::proto::steam::CCloud_Delete_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CCloud_Delete_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CCloud_Delete_Request_steammessages_5fcloud_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCCloud_Delete_Request_steammessages_5fcloud_2esteamclient_2eproto}, {}};

static void InitDefaultsCCloud_Delete_Response_steammessages_5fcloud_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CCloud_Delete_Response_default_instance_;
    new (ptr) ::proto::steam::CCloud_Delete_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CCloud_Delete_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CCloud_Delete_Response_steammessages_5fcloud_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCCloud_Delete_Response_steammessages_5fcloud_2esteamclient_2eproto}, {}};

static void InitDefaultsCCloud_GetClientEncryptionKey_Request_steammessages_5fcloud_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CCloud_GetClientEncryptionKey_Request_default_instance_;
    new (ptr) ::proto::steam::CCloud_GetClientEncryptionKey_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CCloud_GetClientEncryptionKey_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CCloud_GetClientEncryptionKey_Request_steammessages_5fcloud_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCCloud_GetClientEncryptionKey_Request_steammessages_5fcloud_2esteamclient_2eproto}, {}};

static void InitDefaultsCCloud_GetClientEncryptionKey_Response_steammessages_5fcloud_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CCloud_GetClientEncryptionKey_Response_default_instance_;
    new (ptr) ::proto::steam::CCloud_GetClientEncryptionKey_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CCloud_GetClientEncryptionKey_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CCloud_GetClientEncryptionKey_Response_steammessages_5fcloud_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCCloud_GetClientEncryptionKey_Response_steammessages_5fcloud_2esteamclient_2eproto}, {}};

static void InitDefaultsCCloud_CDNReport_Notification_steammessages_5fcloud_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CCloud_CDNReport_Notification_default_instance_;
    new (ptr) ::proto::steam::CCloud_CDNReport_Notification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CCloud_CDNReport_Notification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CCloud_CDNReport_Notification_steammessages_5fcloud_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCCloud_CDNReport_Notification_steammessages_5fcloud_2esteamclient_2eproto}, {}};

static void InitDefaultsCCloud_ExternalStorageTransferReport_Notification_steammessages_5fcloud_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CCloud_ExternalStorageTransferReport_Notification_default_instance_;
    new (ptr) ::proto::steam::CCloud_ExternalStorageTransferReport_Notification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CCloud_ExternalStorageTransferReport_Notification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CCloud_ExternalStorageTransferReport_Notification_steammessages_5fcloud_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCCloud_ExternalStorageTransferReport_Notification_steammessages_5fcloud_2esteamclient_2eproto}, {}};

static void InitDefaultsCCloud_ClientBeginFileUpload_Request_steammessages_5fcloud_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CCloud_ClientBeginFileUpload_Request_default_instance_;
    new (ptr) ::proto::steam::CCloud_ClientBeginFileUpload_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CCloud_ClientBeginFileUpload_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CCloud_ClientBeginFileUpload_Request_steammessages_5fcloud_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCCloud_ClientBeginFileUpload_Request_steammessages_5fcloud_2esteamclient_2eproto}, {}};

static void InitDefaultsClientCloudFileUploadBlockDetails_HTTPHeaders_steammessages_5fcloud_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_ClientCloudFileUploadBlockDetails_HTTPHeaders_default_instance_;
    new (ptr) ::proto::steam::ClientCloudFileUploadBlockDetails_HTTPHeaders();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::ClientCloudFileUploadBlockDetails_HTTPHeaders::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ClientCloudFileUploadBlockDetails_HTTPHeaders_steammessages_5fcloud_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsClientCloudFileUploadBlockDetails_HTTPHeaders_steammessages_5fcloud_2esteamclient_2eproto}, {}};

static void InitDefaultsClientCloudFileUploadBlockDetails_steammessages_5fcloud_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_ClientCloudFileUploadBlockDetails_default_instance_;
    new (ptr) ::proto::steam::ClientCloudFileUploadBlockDetails();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::ClientCloudFileUploadBlockDetails::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ClientCloudFileUploadBlockDetails_steammessages_5fcloud_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsClientCloudFileUploadBlockDetails_steammessages_5fcloud_2esteamclient_2eproto}, {
      &scc_info_ClientCloudFileUploadBlockDetails_HTTPHeaders_steammessages_5fcloud_2esteamclient_2eproto.base,}};

static void InitDefaultsCCloud_ClientBeginFileUpload_Response_steammessages_5fcloud_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CCloud_ClientBeginFileUpload_Response_default_instance_;
    new (ptr) ::proto::steam::CCloud_ClientBeginFileUpload_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CCloud_ClientBeginFileUpload_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CCloud_ClientBeginFileUpload_Response_steammessages_5fcloud_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCCloud_ClientBeginFileUpload_Response_steammessages_5fcloud_2esteamclient_2eproto}, {
      &scc_info_ClientCloudFileUploadBlockDetails_steammessages_5fcloud_2esteamclient_2eproto.base,}};

static void InitDefaultsCCloud_ClientCommitFileUpload_Request_steammessages_5fcloud_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CCloud_ClientCommitFileUpload_Request_default_instance_;
    new (ptr) ::proto::steam::CCloud_ClientCommitFileUpload_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CCloud_ClientCommitFileUpload_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CCloud_ClientCommitFileUpload_Request_steammessages_5fcloud_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCCloud_ClientCommitFileUpload_Request_steammessages_5fcloud_2esteamclient_2eproto}, {}};

static void InitDefaultsCCloud_ClientCommitFileUpload_Response_steammessages_5fcloud_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CCloud_ClientCommitFileUpload_Response_default_instance_;
    new (ptr) ::proto::steam::CCloud_ClientCommitFileUpload_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CCloud_ClientCommitFileUpload_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CCloud_ClientCommitFileUpload_Response_steammessages_5fcloud_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCCloud_ClientCommitFileUpload_Response_steammessages_5fcloud_2esteamclient_2eproto}, {}};

static void InitDefaultsCCloud_ClientFileDownload_Request_steammessages_5fcloud_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CCloud_ClientFileDownload_Request_default_instance_;
    new (ptr) ::proto::steam::CCloud_ClientFileDownload_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CCloud_ClientFileDownload_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CCloud_ClientFileDownload_Request_steammessages_5fcloud_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCCloud_ClientFileDownload_Request_steammessages_5fcloud_2esteamclient_2eproto}, {}};

static void InitDefaultsCCloud_ClientFileDownload_Response_HTTPHeaders_steammessages_5fcloud_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CCloud_ClientFileDownload_Response_HTTPHeaders_default_instance_;
    new (ptr) ::proto::steam::CCloud_ClientFileDownload_Response_HTTPHeaders();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CCloud_ClientFileDownload_Response_HTTPHeaders::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CCloud_ClientFileDownload_Response_HTTPHeaders_steammessages_5fcloud_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCCloud_ClientFileDownload_Response_HTTPHeaders_steammessages_5fcloud_2esteamclient_2eproto}, {}};

static void InitDefaultsCCloud_ClientFileDownload_Response_steammessages_5fcloud_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CCloud_ClientFileDownload_Response_default_instance_;
    new (ptr) ::proto::steam::CCloud_ClientFileDownload_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CCloud_ClientFileDownload_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CCloud_ClientFileDownload_Response_steammessages_5fcloud_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCCloud_ClientFileDownload_Response_steammessages_5fcloud_2esteamclient_2eproto}, {
      &scc_info_CCloud_ClientFileDownload_Response_HTTPHeaders_steammessages_5fcloud_2esteamclient_2eproto.base,}};

static void InitDefaultsCCloud_ClientDeleteFile_Request_steammessages_5fcloud_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CCloud_ClientDeleteFile_Request_default_instance_;
    new (ptr) ::proto::steam::CCloud_ClientDeleteFile_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CCloud_ClientDeleteFile_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CCloud_ClientDeleteFile_Request_steammessages_5fcloud_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCCloud_ClientDeleteFile_Request_steammessages_5fcloud_2esteamclient_2eproto}, {}};

static void InitDefaultsCCloud_ClientDeleteFile_Response_steammessages_5fcloud_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CCloud_ClientDeleteFile_Response_default_instance_;
    new (ptr) ::proto::steam::CCloud_ClientDeleteFile_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CCloud_ClientDeleteFile_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CCloud_ClientDeleteFile_Response_steammessages_5fcloud_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCCloud_ClientDeleteFile_Response_steammessages_5fcloud_2esteamclient_2eproto}, {}};

static void InitDefaultsCCloud_ClientConflictResolution_Notification_steammessages_5fcloud_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CCloud_ClientConflictResolution_Notification_default_instance_;
    new (ptr) ::proto::steam::CCloud_ClientConflictResolution_Notification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CCloud_ClientConflictResolution_Notification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CCloud_ClientConflictResolution_Notification_steammessages_5fcloud_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCCloud_ClientConflictResolution_Notification_steammessages_5fcloud_2esteamclient_2eproto}, {}};

static void InitDefaultsCCloud_EnumerateUserApps_Request_steammessages_5fcloud_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CCloud_EnumerateUserApps_Request_default_instance_;
    new (ptr) ::proto::steam::CCloud_EnumerateUserApps_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CCloud_EnumerateUserApps_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CCloud_EnumerateUserApps_Request_steammessages_5fcloud_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCCloud_EnumerateUserApps_Request_steammessages_5fcloud_2esteamclient_2eproto}, {}};

static void InitDefaultsCCloud_EnumerateUserApps_Response_Apps_steammessages_5fcloud_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CCloud_EnumerateUserApps_Response_Apps_default_instance_;
    new (ptr) ::proto::steam::CCloud_EnumerateUserApps_Response_Apps();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CCloud_EnumerateUserApps_Response_Apps::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CCloud_EnumerateUserApps_Response_Apps_steammessages_5fcloud_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCCloud_EnumerateUserApps_Response_Apps_steammessages_5fcloud_2esteamclient_2eproto}, {}};

static void InitDefaultsCCloud_EnumerateUserApps_Response_steammessages_5fcloud_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CCloud_EnumerateUserApps_Response_default_instance_;
    new (ptr) ::proto::steam::CCloud_EnumerateUserApps_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CCloud_EnumerateUserApps_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CCloud_EnumerateUserApps_Response_steammessages_5fcloud_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCCloud_EnumerateUserApps_Response_steammessages_5fcloud_2esteamclient_2eproto}, {
      &scc_info_CCloud_EnumerateUserApps_Response_Apps_steammessages_5fcloud_2esteamclient_2eproto.base,}};

void InitDefaults_steammessages_5fcloud_2esteamclient_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_CCloud_GetUploadServerInfo_Request_steammessages_5fcloud_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CCloud_GetUploadServerInfo_Response_steammessages_5fcloud_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CCloud_BeginHTTPUpload_Request_steammessages_5fcloud_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CCloud_BeginHTTPUpload_Response_HTTPHeaders_steammessages_5fcloud_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CCloud_BeginHTTPUpload_Response_steammessages_5fcloud_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CCloud_CommitHTTPUpload_Request_steammessages_5fcloud_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CCloud_CommitHTTPUpload_Response_steammessages_5fcloud_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CCloud_GetFileDetails_Request_steammessages_5fcloud_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CCloud_UserFile_steammessages_5fcloud_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CCloud_GetFileDetails_Response_steammessages_5fcloud_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CCloud_EnumerateUserFiles_Request_steammessages_5fcloud_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CCloud_EnumerateUserFiles_Response_steammessages_5fcloud_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CCloud_Delete_Request_steammessages_5fcloud_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CCloud_Delete_Response_steammessages_5fcloud_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CCloud_GetClientEncryptionKey_Request_steammessages_5fcloud_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CCloud_GetClientEncryptionKey_Response_steammessages_5fcloud_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CCloud_CDNReport_Notification_steammessages_5fcloud_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CCloud_ExternalStorageTransferReport_Notification_steammessages_5fcloud_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CCloud_ClientBeginFileUpload_Request_steammessages_5fcloud_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ClientCloudFileUploadBlockDetails_HTTPHeaders_steammessages_5fcloud_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ClientCloudFileUploadBlockDetails_steammessages_5fcloud_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CCloud_ClientBeginFileUpload_Response_steammessages_5fcloud_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CCloud_ClientCommitFileUpload_Request_steammessages_5fcloud_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CCloud_ClientCommitFileUpload_Response_steammessages_5fcloud_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CCloud_ClientFileDownload_Request_steammessages_5fcloud_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CCloud_ClientFileDownload_Response_HTTPHeaders_steammessages_5fcloud_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CCloud_ClientFileDownload_Response_steammessages_5fcloud_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CCloud_ClientDeleteFile_Request_steammessages_5fcloud_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CCloud_ClientDeleteFile_Response_steammessages_5fcloud_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CCloud_ClientConflictResolution_Notification_steammessages_5fcloud_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CCloud_EnumerateUserApps_Request_steammessages_5fcloud_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CCloud_EnumerateUserApps_Response_Apps_steammessages_5fcloud_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CCloud_EnumerateUserApps_Response_steammessages_5fcloud_2esteamclient_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[33];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_steammessages_5fcloud_2esteamclient_2eproto = nullptr;
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors_steammessages_5fcloud_2esteamclient_2eproto[1];

const ::google::protobuf::uint32 TableStruct_steammessages_5fcloud_2esteamclient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_GetUploadServerInfo_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_GetUploadServerInfo_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_GetUploadServerInfo_Request, appid_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_GetUploadServerInfo_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_GetUploadServerInfo_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_GetUploadServerInfo_Response, server_url_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_BeginHTTPUpload_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_BeginHTTPUpload_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_BeginHTTPUpload_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_BeginHTTPUpload_Request, file_size_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_BeginHTTPUpload_Request, filename_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_BeginHTTPUpload_Request, file_sha_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_BeginHTTPUpload_Request, is_public_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_BeginHTTPUpload_Request, platforms_to_sync_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_BeginHTTPUpload_Request, request_headers_names_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_BeginHTTPUpload_Request, request_headers_values_),
  2,
  3,
  0,
  1,
  4,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_BeginHTTPUpload_Response_HTTPHeaders, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_BeginHTTPUpload_Response_HTTPHeaders, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_BeginHTTPUpload_Response_HTTPHeaders, name_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_BeginHTTPUpload_Response_HTTPHeaders, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_BeginHTTPUpload_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_BeginHTTPUpload_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_BeginHTTPUpload_Response, ugcid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_BeginHTTPUpload_Response, timestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_BeginHTTPUpload_Response, url_host_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_BeginHTTPUpload_Response, url_path_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_BeginHTTPUpload_Response, use_https_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_BeginHTTPUpload_Response, request_headers_),
  2,
  3,
  0,
  1,
  4,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_CommitHTTPUpload_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_CommitHTTPUpload_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_CommitHTTPUpload_Request, transfer_succeeded_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_CommitHTTPUpload_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_CommitHTTPUpload_Request, file_sha_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_CommitHTTPUpload_Request, filename_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_CommitHTTPUpload_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_CommitHTTPUpload_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_CommitHTTPUpload_Response, file_committed_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_GetFileDetails_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_GetFileDetails_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_GetFileDetails_Request, ugcid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_GetFileDetails_Request, appid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_UserFile, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_UserFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_UserFile, appid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_UserFile, ugcid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_UserFile, filename_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_UserFile, timestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_UserFile, file_size_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_UserFile, url_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_UserFile, steamid_creator_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_UserFile, flags_),
  3,
  2,
  0,
  5,
  4,
  1,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_GetFileDetails_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_GetFileDetails_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_GetFileDetails_Response, details_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_EnumerateUserFiles_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_EnumerateUserFiles_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_EnumerateUserFiles_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_EnumerateUserFiles_Request, extended_details_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_EnumerateUserFiles_Request, count_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_EnumerateUserFiles_Request, start_index_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_EnumerateUserFiles_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_EnumerateUserFiles_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_EnumerateUserFiles_Response, files_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_EnumerateUserFiles_Response, total_files_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_Delete_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_Delete_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_Delete_Request, filename_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_Delete_Request, appid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_Delete_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_Delete_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_GetClientEncryptionKey_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_GetClientEncryptionKey_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_GetClientEncryptionKey_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_GetClientEncryptionKey_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_GetClientEncryptionKey_Response, key_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_GetClientEncryptionKey_Response, crc_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_CDNReport_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_CDNReport_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_CDNReport_Notification, steamid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_CDNReport_Notification, url_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_CDNReport_Notification, success_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_CDNReport_Notification, http_status_code_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_CDNReport_Notification, expected_bytes_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_CDNReport_Notification, received_bytes_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_CDNReport_Notification, duration_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_ExternalStorageTransferReport_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_ExternalStorageTransferReport_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_ExternalStorageTransferReport_Notification, host_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_ExternalStorageTransferReport_Notification, path_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_ExternalStorageTransferReport_Notification, is_upload_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_ExternalStorageTransferReport_Notification, success_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_ExternalStorageTransferReport_Notification, http_status_code_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_ExternalStorageTransferReport_Notification, bytes_expected_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_ExternalStorageTransferReport_Notification, bytes_actual_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_ExternalStorageTransferReport_Notification, duration_ms_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_ExternalStorageTransferReport_Notification, cellid_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_ClientBeginFileUpload_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_ClientBeginFileUpload_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_ClientBeginFileUpload_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_ClientBeginFileUpload_Request, file_size_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_ClientBeginFileUpload_Request, raw_file_size_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_ClientBeginFileUpload_Request, file_sha_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_ClientBeginFileUpload_Request, time_stamp_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_ClientBeginFileUpload_Request, filename_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_ClientBeginFileUpload_Request, platforms_to_sync_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_ClientBeginFileUpload_Request, cell_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_ClientBeginFileUpload_Request, can_encrypt_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_ClientBeginFileUpload_Request, is_shared_file_),
  2,
  3,
  5,
  0,
  4,
  1,
  9,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::proto::steam::ClientCloudFileUploadBlockDetails_HTTPHeaders, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::ClientCloudFileUploadBlockDetails_HTTPHeaders, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::ClientCloudFileUploadBlockDetails_HTTPHeaders, name_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::ClientCloudFileUploadBlockDetails_HTTPHeaders, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::ClientCloudFileUploadBlockDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::ClientCloudFileUploadBlockDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::ClientCloudFileUploadBlockDetails, url_host_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::ClientCloudFileUploadBlockDetails, url_path_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::ClientCloudFileUploadBlockDetails, use_https_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::ClientCloudFileUploadBlockDetails, http_method_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::ClientCloudFileUploadBlockDetails, request_headers_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::ClientCloudFileUploadBlockDetails, block_offset_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::ClientCloudFileUploadBlockDetails, block_length_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::ClientCloudFileUploadBlockDetails, explicit_body_data_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::ClientCloudFileUploadBlockDetails, may_parallelize_),
  0,
  1,
  4,
  3,
  ~0u,
  6,
  7,
  2,
  5,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_ClientBeginFileUpload_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_ClientBeginFileUpload_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_ClientBeginFileUpload_Response, encrypt_file_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_ClientBeginFileUpload_Response, block_requests_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_ClientCommitFileUpload_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_ClientCommitFileUpload_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_ClientCommitFileUpload_Request, transfer_succeeded_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_ClientCommitFileUpload_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_ClientCommitFileUpload_Request, file_sha_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_ClientCommitFileUpload_Request, filename_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_ClientCommitFileUpload_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_ClientCommitFileUpload_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_ClientCommitFileUpload_Response, file_committed_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_ClientFileDownload_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_ClientFileDownload_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_ClientFileDownload_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_ClientFileDownload_Request, filename_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_ClientFileDownload_Response_HTTPHeaders, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_ClientFileDownload_Response_HTTPHeaders, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_ClientFileDownload_Response_HTTPHeaders, name_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_ClientFileDownload_Response_HTTPHeaders, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_ClientFileDownload_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_ClientFileDownload_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_ClientFileDownload_Response, appid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_ClientFileDownload_Response, file_size_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_ClientFileDownload_Response, raw_file_size_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_ClientFileDownload_Response, sha_file_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_ClientFileDownload_Response, time_stamp_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_ClientFileDownload_Response, is_explicit_delete_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_ClientFileDownload_Response, url_host_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_ClientFileDownload_Response, url_path_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_ClientFileDownload_Response, use_https_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_ClientFileDownload_Response, request_headers_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_ClientFileDownload_Response, encrypted_),
  3,
  4,
  6,
  0,
  5,
  7,
  1,
  2,
  8,
  ~0u,
  9,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_ClientDeleteFile_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_ClientDeleteFile_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_ClientDeleteFile_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_ClientDeleteFile_Request, filename_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_ClientDeleteFile_Request, is_explicit_delete_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_ClientDeleteFile_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_ClientDeleteFile_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_ClientConflictResolution_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_ClientConflictResolution_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_ClientConflictResolution_Notification, appid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_ClientConflictResolution_Notification, chose_local_files_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_EnumerateUserApps_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_EnumerateUserApps_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_EnumerateUserApps_Response_Apps, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_EnumerateUserApps_Response_Apps, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_EnumerateUserApps_Response_Apps, appid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_EnumerateUserApps_Response_Apps, totalcount_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_EnumerateUserApps_Response_Apps, totalsize_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_EnumerateUserApps_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_EnumerateUserApps_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCloud_EnumerateUserApps_Response, apps_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::proto::steam::CCloud_GetUploadServerInfo_Request)},
  { 7, 13, sizeof(::proto::steam::CCloud_GetUploadServerInfo_Response)},
  { 14, 27, sizeof(::proto::steam::CCloud_BeginHTTPUpload_Request)},
  { 35, 42, sizeof(::proto::steam::CCloud_BeginHTTPUpload_Response_HTTPHeaders)},
  { 44, 55, sizeof(::proto::steam::CCloud_BeginHTTPUpload_Response)},
  { 61, 70, sizeof(::proto::steam::CCloud_CommitHTTPUpload_Request)},
  { 74, 80, sizeof(::proto::steam::CCloud_CommitHTTPUpload_Response)},
  { 81, 88, sizeof(::proto::steam::CCloud_GetFileDetails_Request)},
  { 90, 103, sizeof(::proto::steam::CCloud_UserFile)},
  { 111, 117, sizeof(::proto::steam::CCloud_GetFileDetails_Response)},
  { 118, 127, sizeof(::proto::steam::CCloud_EnumerateUserFiles_Request)},
  { 131, 138, sizeof(::proto::steam::CCloud_EnumerateUserFiles_Response)},
  { 140, 147, sizeof(::proto::steam::CCloud_Delete_Request)},
  { 149, 154, sizeof(::proto::steam::CCloud_Delete_Response)},
  { 154, 159, sizeof(::proto::steam::CCloud_GetClientEncryptionKey_Request)},
  { 159, 166, sizeof(::proto::steam::CCloud_GetClientEncryptionKey_Response)},
  { 168, 180, sizeof(::proto::steam::CCloud_CDNReport_Notification)},
  { 187, 201, sizeof(::proto::steam::CCloud_ExternalStorageTransferReport_Notification)},
  { 210, 225, sizeof(::proto::steam::CCloud_ClientBeginFileUpload_Request)},
  { 235, 242, sizeof(::proto::steam::ClientCloudFileUploadBlockDetails_HTTPHeaders)},
  { 244, 258, sizeof(::proto::steam::ClientCloudFileUploadBlockDetails)},
  { 267, 274, sizeof(::proto::steam::CCloud_ClientBeginFileUpload_Response)},
  { 276, 285, sizeof(::proto::steam::CCloud_ClientCommitFileUpload_Request)},
  { 289, 295, sizeof(::proto::steam::CCloud_ClientCommitFileUpload_Response)},
  { 296, 303, sizeof(::proto::steam::CCloud_ClientFileDownload_Request)},
  { 305, 312, sizeof(::proto::steam::CCloud_ClientFileDownload_Response_HTTPHeaders)},
  { 314, 330, sizeof(::proto::steam::CCloud_ClientFileDownload_Response)},
  { 341, 349, sizeof(::proto::steam::CCloud_ClientDeleteFile_Request)},
  { 352, 357, sizeof(::proto::steam::CCloud_ClientDeleteFile_Response)},
  { 357, 364, sizeof(::proto::steam::CCloud_ClientConflictResolution_Notification)},
  { 366, 371, sizeof(::proto::steam::CCloud_EnumerateUserApps_Request)},
  { 371, 379, sizeof(::proto::steam::CCloud_EnumerateUserApps_Response_Apps)},
  { 382, 388, sizeof(::proto::steam::CCloud_EnumerateUserApps_Response)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CCloud_GetUploadServerInfo_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CCloud_GetUploadServerInfo_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CCloud_BeginHTTPUpload_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CCloud_BeginHTTPUpload_Response_HTTPHeaders_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CCloud_BeginHTTPUpload_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CCloud_CommitHTTPUpload_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CCloud_CommitHTTPUpload_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CCloud_GetFileDetails_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CCloud_UserFile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CCloud_GetFileDetails_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CCloud_EnumerateUserFiles_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CCloud_EnumerateUserFiles_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CCloud_Delete_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CCloud_Delete_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CCloud_GetClientEncryptionKey_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CCloud_GetClientEncryptionKey_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CCloud_CDNReport_Notification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CCloud_ExternalStorageTransferReport_Notification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CCloud_ClientBeginFileUpload_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_ClientCloudFileUploadBlockDetails_HTTPHeaders_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_ClientCloudFileUploadBlockDetails_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CCloud_ClientBeginFileUpload_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CCloud_ClientCommitFileUpload_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CCloud_ClientCommitFileUpload_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CCloud_ClientFileDownload_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CCloud_ClientFileDownload_Response_HTTPHeaders_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CCloud_ClientFileDownload_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CCloud_ClientDeleteFile_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CCloud_ClientDeleteFile_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CCloud_ClientConflictResolution_Notification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CCloud_EnumerateUserApps_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CCloud_EnumerateUserApps_Response_Apps_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CCloud_EnumerateUserApps_Response_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_steammessages_5fcloud_2esteamclient_2eproto = {
  {}, AddDescriptors_steammessages_5fcloud_2esteamclient_2eproto, "steammessages_cloud.steamclient.proto", schemas,
  file_default_instances, TableStruct_steammessages_5fcloud_2esteamclient_2eproto::offsets,
  file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto, 33, file_level_enum_descriptors_steammessages_5fcloud_2esteamclient_2eproto, file_level_service_descriptors_steammessages_5fcloud_2esteamclient_2eproto,
};

const char descriptor_table_protodef_steammessages_5fcloud_2esteamclient_2eproto[] =
  "\n%steammessages_cloud.steamclient.proto\022"
  "\013proto.steam\032,steammessages_unified_base"
  ".steamclient.proto\"d\n\"CCloud_GetUploadSe"
  "rverInfo_Request\022>\n\005appid\030\001 \001(\rB/\202\265\030+App"
  " ID to which a file will be uploaded to."
  "\"9\n#CCloud_GetUploadServerInfo_Response\022"
  "\022\n\nserver_url\030\001 \001(\t\"\224\006\n\036CCloud_BeginHTTP"
  "Upload_Request\022\?\n\005appid\030\001 \001(\rB0\202\265\030,App I"
  "D for which the file is being uploaded.\022"
  "3\n\tfile_size\030\002 \001(\rB \202\265\030\034Original file si"
  "ze in bytes.\022=\n\010filename\030\003 \001(\tB+\202\265\030\'Name"
  " of the file to store in the cloud.\022V\n\010f"
  "ile_sha\030\004 \001(\tBD\202\265\030@Hex string (40 digits"
  ") representing the SHA1 digest of the fi"
  "le.\022\\\n\tis_public\030\005 \001(\010BI\202\265\030ETrue if the "
  "file should be marked public on the UFS,"
  " false otherwise.\022z\n\021platforms_to_sync\030\006"
  " \003(\tB_\202\265\030[Array of string specifying whi"
  "ch platforms to sync; value values: all,"
  " windows, osx, linux.\022r\n\025request_headers"
  "_names\030\007 \003(\tBS\202\265\030ONames for headers you\'"
  "ll want to set on your upload request. M"
  "ay be left blank.\022\226\001\n\026request_headers_va"
  "lues\030\010 \003(\tBv\202\265\030rValues for headers you\'l"
  "l want to set on your upload request. Th"
  "e number of names must equal the number "
  "of values.\"\245\004\n\037CCloud_BeginHTTPUpload_Re"
  "sponse\022/\n\005ugcid\030\001 \001(\006B \202\265\030\034UGC ID of the"
  " uploaded file.\0220\n\ttimestamp\030\002 \001(\007B\035\202\265\030\031"
  "Server timestamp of file.\022X\n\010url_host\030\003 "
  "\001(\tBF\202\265\030BHost name of server to which fi"
  "le should be uploaded via HTTP PUT.\022O\n\010u"
  "rl_path\030\004 \001(\tB=\202\265\0309Relative path on serv"
  "er to which file should be uploaded.\022>\n\t"
  "use_https\030\005 \001(\010B+\202\265\030\'If true, use https,"
  " otherwise use http.\022\207\001\n\017request_headers"
  "\030\006 \003(\01328.proto.steam.CCloud_BeginHTTPUpl"
  "oad_Response.HTTPHeadersB4\202\265\0300Name-value"
  " pairs to be sent in HTTP PUT request.\032*"
  "\n\013HTTPHeaders\022\014\n\004name\030\001 \001(\t\022\r\n\005value\030\002 \001"
  "(\t\"\255\004\n\037CCloud_CommitHTTPUpload_Request\022\244"
  "\001\n\022transfer_succeeded\030\001 \001(\010B\207\001\202\265\030\202\001True "
  "if the HTTP PUT to the upload URL succee"
  "ded (URL provided in response to Cloud.B"
  "eginHTTPUpload), false if a failure occu"
  "rred.\022x\n\005appid\030\002 \001(\rBi\202\265\030eApp ID for whi"
  "ch the file is being uploaded. Must matc"
  "h the app ID provided to Cloud.BeginHTTP"
  "Upload.\022\225\001\n\010file_sha\030\003 \001(\tB\202\001\202\265\030~Hex str"
  "ing (40 digits) representing the SHA1 di"
  "gest of the file. Must match the SHA1 di"
  "gest provided to Cloud.BeginHTTPUpload.\022"
  "Q\n\010filename\030\004 \001(\tB\?\202\265\030;Filename as speci"
  "fied in the Cloud.BeginHTTPUpload reques"
  "t.\"}\n CCloud_CommitHTTPUpload_Response\022Y"
  "\n\016file_committed\030\001 \001(\010BA\202\265\030=True if the "
  "file was successfully committed, false o"
  "therwise.\"\214\001\n\035CCloud_GetFileDetails_Requ"
  "est\022;\n\005ugcid\030\001 \001(\004B,\202\265\030(ID of the Cloud "
  "file to get details for.\022.\n\005appid\030\002 \001(\rB"
  "\037\202\265\030\033App ID the file belongs to.\"\234\001\n\017CCl"
  "oud_UserFile\022\r\n\005appid\030\001 \001(\r\022\r\n\005ugcid\030\002 \001"
  "(\004\022\020\n\010filename\030\003 \001(\t\022\021\n\ttimestamp\030\004 \001(\004\022"
  "\021\n\tfile_size\030\005 \001(\r\022\013\n\003url\030\006 \001(\t\022\027\n\017steam"
  "id_creator\030\007 \001(\006\022\r\n\005flags\030\010 \001(\r\"O\n\036CClou"
  "d_GetFileDetails_Response\022-\n\007details\030\001 \001"
  "(\0132\034.proto.steam.CCloud_UserFile\"\351\003\n!CCl"
  "oud_EnumerateUserFiles_Request\0224\n\005appid\030"
  "\001 \001(\rB%\202\265\030!App ID to enumerate the files"
  " of.\022\233\001\n\020extended_details\030\002 \001(\010B\200\001\202\265\030|(O"
  "ptional) Get extended details back on th"
  "e files found. Defaults to only returned"
  " the app Id and UGC Id of the files foun"
  "d.\022|\n\005count\030\003 \001(\rBm\202\265\030i(Optional) Maximu"
  "m number of results to return on this ca"
  "ll. Defaults to a maximum of 500 files r"
  "eturned.\022r\n\013start_index\030\004 \001(\rB]\202\265\030Y(Opti"
  "onal) Starting index to begin enumeratio"
  "n at. Defaults to the beginning of the l"
  "ist.\"f\n\"CCloud_EnumerateUserFiles_Respon"
  "se\022+\n\005files\030\001 \003(\0132\034.proto.steam.CCloud_U"
  "serFile\022\023\n\013total_files\030\002 \001(\r\"Y\n\025CCloud_D"
  "elete_Request\022\020\n\010filename\030\001 \001(\t\022.\n\005appid"
  "\030\002 \001(\rB\037\202\265\030\033App ID the file belongs to.\""
  "\030\n\026CCloud_Delete_Response\"\'\n%CCloud_GetC"
  "lientEncryptionKey_Request\"n\n&CCloud_Get"
  "ClientEncryptionKey_Response\022\'\n\003key\030\001 \001("
  "\014B\032\202\265\030\026AES-256 encryption key\022\033\n\003crc\030\002 \001"
  "(\005B\016\202\265\030\nCRC of key\"\252\001\n\035CCloud_CDNReport_"
  "Notification\022\017\n\007steamid\030\001 \001(\006\022\013\n\003url\030\002 \001"
  "(\t\022\017\n\007success\030\003 \001(\010\022\030\n\020http_status_code\030"
  "\004 \001(\r\022\026\n\016expected_bytes\030\005 \001(\004\022\026\n\016receive"
  "d_bytes\030\006 \001(\004\022\020\n\010duration\030\007 \001(\r\"\340\001\n1CClo"
  "ud_ExternalStorageTransferReport_Notific"
  "ation\022\014\n\004host\030\001 \001(\t\022\014\n\004path\030\002 \001(\t\022\021\n\tis_"
  "upload\030\003 \001(\010\022\017\n\007success\030\004 \001(\010\022\030\n\020http_st"
  "atus_code\030\005 \001(\r\022\026\n\016bytes_expected\030\006 \001(\004\022"
  "\024\n\014bytes_actual\030\007 \001(\004\022\023\n\013duration_ms\030\010 \001"
  "(\r\022\016\n\006cellid\030\t \001(\r\"\274\005\n$CCloud_ClientBegi"
  "nFileUpload_Request\022\?\n\005appid\030\001 \001(\rB0\202\265\030,"
  "App ID for which the file is being uploa"
  "ded.\022D\n\tfile_size\030\002 \001(\rB1\202\265\030-file size a"
  "s transmitted and stored in Cloud.\022N\n\rra"
  "w_file_size\030\003 \001(\rB7\202\265\0303file size before "
  "any compression and/or encryption.\022(\n\010fi"
  "le_sha\030\004 \001(\014B\026\202\265\030\022SHA-1 of raw file.\022*\n\n"
  "time_stamp\030\005 \001(\004B\026\202\265\030\022Timestamp of file."
  "\022=\n\010filename\030\006 \001(\tB+\202\265\030\'Name of the file"
  " to store in the cloud.\022%\n\021platforms_to_"
  "sync\030\007 \001(\r:\n4294967295\022F\n\007cell_id\030\t \001(\rB"
  "5\202\265\0301Client\'s cell ID so we can pick sto"
  "rage location.\022Q\n\013can_encrypt\030\n \001(\010B<\202\265\030"
  "8if true, client can encrypt the file be"
  "fore uploading it\022f\n\016is_shared_file\030\013 \001("
  "\010BN\202\265\030Jif true, this is going to be UGC "
  "or a screenshot or some other shared fil"
  "e\"\376\006\n!ClientCloudFileUploadBlockDetails\022"
  "X\n\010url_host\030\001 \001(\tBF\202\265\030BHost name of serv"
  "er to which file should be uploaded via "
  "HTTP PUT.\022O\n\010url_path\030\002 \001(\tB=\202\265\0309Relativ"
  "e path on server to which file should be"
  " uploaded.\022>\n\tuse_https\030\003 \001(\010B+\202\265\030\'If tr"
  "ue, use https, otherwise use http.\022;\n\013ht"
  "tp_method\030\004 \001(\005B&\202\265\030\"EHTTPMethod to use "
  "for this block.\022\211\001\n\017request_headers\030\005 \003("
  "\0132:.proto.steam.ClientCloudFileUploadBlo"
  "ckDetails.HTTPHeadersB4\202\265\0300Name-value pa"
  "irs to be sent in HTTP PUT request.\0228\n\014b"
  "lock_offset\030\006 \001(\004B\"\202\265\030\036offset of file bl"
  "ock to upload\022m\n\014block_length\030\007 \001(\rBW\202\265\030"
  "Slength of file block to upload - if zer"
  "o, no part of the file is part of this b"
  "lock\022_\n\022explicit_body_data\030\010 \001(\014BC\202\265\030\?ex"
  "plicit body data to use, instead of file"
  " data, for this block\022o\n\017may_parallelize"
  "\030\t \001(\010BV\202\265\030Rif true, this request may be"
  " done in parallel with other similarly-m"
  "arked requests\032*\n\013HTTPHeaders\022\014\n\004name\030\001 "
  "\001(\t\022\r\n\005value\030\002 \001(\t\"\371\001\n%CCloud_ClientBegi"
  "nFileUpload_Response\022[\n\014encrypt_file\030\001 \001"
  "(\010BE\202\265\030AIf true, the file should be encr"
  "ypted by the client before upload\022s\n\016blo"
  "ck_requests\030\002 \003(\0132..proto.steam.ClientCl"
  "oudFileUploadBlockDetailsB+\202\265\030\'HTTP requ"
  "ests to make to perform upload\"\311\003\n%CClou"
  "d_ClientCommitFileUpload_Request\022a\n\022tran"
  "sfer_succeeded\030\001 \001(\010BE\202\265\030ATrue if all bl"
  "ock uploads succeeded, false if any of t"
  "hem failed.\022x\n\005appid\030\002 \001(\rBi\202\265\030eApp ID f"
  "or which the file is being uploaded. Mus"
  "t match the app ID provided to Cloud.Beg"
  "inFileUpload.\022p\n\010file_sha\030\003 \001(\014B^\202\265\030ZSHA"
  "1 digest of the raw file. Must match the"
  " SHA1 digest provided to Cloud.BeginFile"
  "Upload.\022Q\n\010filename\030\004 \001(\tB\?\202\265\030;Filename "
  "as specified in the Cloud.BeginFileUploa"
  "d request.\"\203\001\n&CCloud_ClientCommitFileUp"
  "load_Response\022Y\n\016file_committed\030\001 \001(\010BA\202"
  "\265\030=True if the file was successfully com"
  "mitted, false otherwise.\"\200\001\n!CCloud_Clie"
  "ntFileDownload_Request\022.\n\005appid\030\001 \001(\rB\037\202"
  "\265\030\033App ID the file is part of.\022+\n\010filena"
  "me\030\002 \001(\tB\031\202\265\030\025Filename of the file.\"\213\006\n\""
  "CCloud_ClientFileDownload_Response\0222\n\005ap"
  "pid\030\001 \001(\rB#\202\265\030\037Application the file belo"
  "ngs to\022G\n\tfile_size\030\002 \001(\rB4\202\265\0300file size"
  " as transmitted and stored in the Cloud\022"
  "G\n\rraw_file_size\030\003 \001(\rB0\202\265\030,file size wh"
  "en decompressed and/or decrypted\022!\n\010sha_"
  "file\030\004 \001(\014B\017\202\265\030\013SHA of file\022)\n\ntime_stam"
  "p\030\005 \001(\004B\025\202\265\030\021Timestamp of file\022J\n\022is_exp"
  "licit_delete\030\006 \001(\010B.\202\265\030*True if this is "
  "an explicitly deleted file\022/\n\010url_host\030\007"
  " \001(\tB\035\202\265\030\031Host to GET the file from\022O\n\010u"
  "rl_path\030\010 \001(\tB=\202\265\0309Path on that host to "
  "use, including URL parameters if any\0227\n\t"
  "use_https\030\t \001(\010B$\202\265\030 If set, use HTTPS, "
  "else use HTTP\022\212\001\n\017request_headers\030\n \003(\0132"
  ";.proto.steam.CCloud_ClientFileDownload_"
  "Response.HTTPHeadersB4\202\265\0300Name-value pai"
  "rs to be sent in HTTP GET request.\022\021\n\ten"
  "crypted\030\013 \001(\010\032*\n\013HTTPHeaders\022\014\n\004name\030\001 \001"
  "(\t\022\r\n\005value\030\002 \001(\t\"\343\001\n\037CCloud_ClientDelet"
  "eFile_Request\022>\n\005appid\030\001 \001(\rB/\202\265\030+App ID"
  " for which the file is being deleted.\022\'\n"
  "\010filename\030\002 \001(\tB\025\202\265\030\021Filename of file.\022W"
  "\n\022is_explicit_delete\030\003 \001(\010B;\202\265\0307If true,"
  " this is a \'delete\'; if false, it is a \'"
  "forget\'\"\"\n CCloud_ClientDeleteFile_Respo"
  "nse\"\340\001\n,CCloud_ClientConflictResolution_"
  "Notification\022>\n\005appid\030\001 \001(\rB/\202\265\030+App ID "
  "for which the conflict was resolved.\022p\n\021"
  "chose_local_files\030\002 \001(\010BU\202\265\030QDid the use"
  "r choose to keep the files local to the "
  "machine they are on right now\?\"\"\n CCloud"
  "_EnumerateUserApps_Request\"\244\001\n!CCloud_En"
  "umerateUserApps_Response\022A\n\004apps\030\001 \003(\01323"
  ".proto.steam.CCloud_EnumerateUserApps_Re"
  "sponse.Apps\032<\n\004Apps\022\r\n\005appid\030\001 \001(\r\022\022\n\nto"
  "talcount\030\002 \001(\005\022\021\n\ttotalsize\030\003 \001(\0032\226\025\n\005Cl"
  "oud\022\264\001\n\023GetUploadServerInfo\022/.proto.stea"
  "m.CCloud_GetUploadServerInfo_Request\0320.p"
  "roto.steam.CCloud_GetUploadServerInfo_Re"
  "sponse\":\202\265\0306Returns the URL of the prope"
  "r cloud server for a user.\022\300\002\n\017BeginHTTP"
  "Upload\022+.proto.steam.CCloud_BeginHTTPUpl"
  "oad_Request\032,.proto.steam.CCloud_BeginHT"
  "TPUpload_Response\"\321\001\202\265\030\314\001Begins the proc"
  "ess of uploading a file to Steam externa"
  "l storage services. File should be uploa"
  "ded via HTTP PUT to the returned URL, af"
  "ter which the upload must be finalized b"
  "y a call to CommitHTTPUpload.\022\305\001\n\020Commit"
  "HTTPUpload\022,.proto.steam.CCloud_CommitHT"
  "TPUpload_Request\032-.proto.steam.CCloud_Co"
  "mmitHTTPUpload_Response\"T\202\265\030PCommits a f"
  "ile upload initiated by BeginHTTPUpload "
  "and transferred via HTTP PUT.\022\217\001\n\016GetFil"
  "eDetails\022*.proto.steam.CCloud_GetFileDet"
  "ails_Request\032+.proto.steam.CCloud_GetFil"
  "eDetails_Response\"$\202\265\030 Returns details o"
  "n a Cloud file.\022\322\001\n\022EnumerateUserFiles\022."
  ".proto.steam.CCloud_EnumerateUserFiles_R"
  "equest\032/.proto.steam.CCloud_EnumerateUse"
  "rFiles_Response\"[\202\265\030WEnumerates Cloud fi"
  "les for a user of a given app ID. Return"
  "s up to 500 files at a time.\022|\n\006Delete\022\""
  ".proto.steam.CCloud_Delete_Request\032#.pro"
  "to.steam.CCloud_Delete_Response\")\202\265\030%Del"
  "etes a file from the user\'s cloud.\022\261\001\n\026G"
  "etClientEncryptionKey\0222.proto.steam.CClo"
  "ud_GetClientEncryptionKey_Request\0323.prot"
  "o.steam.CCloud_GetClientEncryptionKey_Re"
  "sponse\".\202\265\030*Gets the user\'s Cloud file e"
  "ncryption key.\022{\n\tCDNReport\022*.proto.stea"
  "m.CCloud_CDNReport_Notification\032\027.proto."
  "steam.NoResponse\")\202\265\030%Reports the result"
  " of a CDN transfer.\022\267\001\n\035ExternalStorageT"
  "ransferReport\022>.proto.steam.CCloud_Exter"
  "nalStorageTransferReport_Notification\032\027."
  "proto.steam.NoResponse\"=\202\265\0309Reports the "
  "result of an external Cloud storage tran"
  "sfer.\022\240\001\n\025ClientBeginFileUpload\0221.proto."
  "steam.CCloud_ClientBeginFileUpload_Reque"
  "st\0322.proto.steam.CCloud_ClientBeginFileU"
  "pload_Response\" \202\265\030\034Initiate an upload t"
  "o Cloud.\022\262\001\n\026ClientCommitFileUpload\0222.pr"
  "oto.steam.CCloud_ClientCommitFileUpload_"
  "Request\0323.proto.steam.CCloud_ClientCommi"
  "tFileUpload_Response\"/\202\265\030+Commit the fil"
  "e upload or indicate failure.\022\224\001\n\022Client"
  "FileDownload\022..proto.steam.CCloud_Client"
  "FileDownload_Request\032/.proto.steam.CClou"
  "d_ClientFileDownload_Response\"\035\202\265\030\031Initi"
  "ate a file download.\022\215\001\n\020ClientDeleteFil"
  "e\022,.proto.steam.CCloud_ClientDeleteFile_"
  "Request\032-.proto.steam.CCloud_ClientDelet"
  "eFile_Response\"\034\202\265\030\030Delete or forget a f"
  "ile.\022\246\001\n\030ClientConflictResolution\0229.prot"
  "o.steam.CCloud_ClientConflictResolution_"
  "Notification\032\027.proto.steam.NoResponse\"6\202"
  "\265\0302User has picked a resolution for a Cl"
  "oud conflict.\022\247\001\n\021EnumerateUserApps\022-.pr"
  "oto.steam.CCloud_EnumerateUserApps_Reque"
  "st\032..proto.steam.CCloud_EnumerateUserApp"
  "s_Response\"3\202\265\030/Enumerates apps stroing "
  "cloud files for a user.\032)\202\265\030%A service f"
  "or Steam Cloud operations.B\003\200\001\001"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_steammessages_5fcloud_2esteamclient_2eproto = {
  false, InitDefaults_steammessages_5fcloud_2esteamclient_2eproto, 
  descriptor_table_protodef_steammessages_5fcloud_2esteamclient_2eproto,
  "steammessages_cloud.steamclient.proto", &assign_descriptors_table_steammessages_5fcloud_2esteamclient_2eproto, 10711,
};

void AddDescriptors_steammessages_5fcloud_2esteamclient_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_steammessages_5funified_5fbase_2esteamclient_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_steammessages_5fcloud_2esteamclient_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_steammessages_5fcloud_2esteamclient_2eproto = []() { AddDescriptors_steammessages_5fcloud_2esteamclient_2eproto(); return true; }();
namespace proto {
namespace steam {

// ===================================================================

void CCloud_GetUploadServerInfo_Request::InitAsDefaultInstance() {
}
class CCloud_GetUploadServerInfo_Request::HasBitSetters {
 public:
  static void set_has_appid(CCloud_GetUploadServerInfo_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCloud_GetUploadServerInfo_Request::kAppidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_GetUploadServerInfo_Request::CCloud_GetUploadServerInfo_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCloud_GetUploadServerInfo_Request)
}
CCloud_GetUploadServerInfo_Request::CCloud_GetUploadServerInfo_Request(const CCloud_GetUploadServerInfo_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCloud_GetUploadServerInfo_Request)
}

void CCloud_GetUploadServerInfo_Request::SharedCtor() {
  appid_ = 0u;
}

CCloud_GetUploadServerInfo_Request::~CCloud_GetUploadServerInfo_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CCloud_GetUploadServerInfo_Request)
  SharedDtor();
}

void CCloud_GetUploadServerInfo_Request::SharedDtor() {
}

void CCloud_GetUploadServerInfo_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCloud_GetUploadServerInfo_Request& CCloud_GetUploadServerInfo_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CCloud_GetUploadServerInfo_Request_steammessages_5fcloud_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CCloud_GetUploadServerInfo_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCloud_GetUploadServerInfo_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CCloud_GetUploadServerInfo_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CCloud_GetUploadServerInfo_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1 [(.proto.steam.description) = "App ID to which a file will be uploaded to."];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CCloud_GetUploadServerInfo_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCloud_GetUploadServerInfo_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1 [(.proto.steam.description) = "App ID to which a file will be uploaded to."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCloud_GetUploadServerInfo_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCloud_GetUploadServerInfo_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CCloud_GetUploadServerInfo_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCloud_GetUploadServerInfo_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.proto.steam.description) = "App ID to which a file will be uploaded to."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCloud_GetUploadServerInfo_Request)
}

::google::protobuf::uint8* CCloud_GetUploadServerInfo_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCloud_GetUploadServerInfo_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.proto.steam.description) = "App ID to which a file will be uploaded to."];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCloud_GetUploadServerInfo_Request)
  return target;
}

size_t CCloud_GetUploadServerInfo_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCloud_GetUploadServerInfo_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 appid = 1 [(.proto.steam.description) = "App ID to which a file will be uploaded to."];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->appid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCloud_GetUploadServerInfo_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCloud_GetUploadServerInfo_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_GetUploadServerInfo_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CCloud_GetUploadServerInfo_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCloud_GetUploadServerInfo_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCloud_GetUploadServerInfo_Request)
    MergeFrom(*source);
  }
}

void CCloud_GetUploadServerInfo_Request::MergeFrom(const CCloud_GetUploadServerInfo_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCloud_GetUploadServerInfo_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_appid()) {
    set_appid(from.appid());
  }
}

void CCloud_GetUploadServerInfo_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCloud_GetUploadServerInfo_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_GetUploadServerInfo_Request::CopyFrom(const CCloud_GetUploadServerInfo_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCloud_GetUploadServerInfo_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_GetUploadServerInfo_Request::IsInitialized() const {
  return true;
}

void CCloud_GetUploadServerInfo_Request::Swap(CCloud_GetUploadServerInfo_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_GetUploadServerInfo_Request::InternalSwap(CCloud_GetUploadServerInfo_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(appid_, other->appid_);
}

::google::protobuf::Metadata CCloud_GetUploadServerInfo_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fcloud_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CCloud_GetUploadServerInfo_Response::InitAsDefaultInstance() {
}
class CCloud_GetUploadServerInfo_Response::HasBitSetters {
 public:
  static void set_has_server_url(CCloud_GetUploadServerInfo_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCloud_GetUploadServerInfo_Response::kServerUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_GetUploadServerInfo_Response::CCloud_GetUploadServerInfo_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCloud_GetUploadServerInfo_Response)
}
CCloud_GetUploadServerInfo_Response::CCloud_GetUploadServerInfo_Response(const CCloud_GetUploadServerInfo_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  server_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_server_url()) {
    server_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_url_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCloud_GetUploadServerInfo_Response)
}

void CCloud_GetUploadServerInfo_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CCloud_GetUploadServerInfo_Response_steammessages_5fcloud_2esteamclient_2eproto.base);
  server_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CCloud_GetUploadServerInfo_Response::~CCloud_GetUploadServerInfo_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CCloud_GetUploadServerInfo_Response)
  SharedDtor();
}

void CCloud_GetUploadServerInfo_Response::SharedDtor() {
  server_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CCloud_GetUploadServerInfo_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCloud_GetUploadServerInfo_Response& CCloud_GetUploadServerInfo_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CCloud_GetUploadServerInfo_Response_steammessages_5fcloud_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CCloud_GetUploadServerInfo_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCloud_GetUploadServerInfo_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    server_url_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CCloud_GetUploadServerInfo_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CCloud_GetUploadServerInfo_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string server_url = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CCloud_GetUploadServerInfo_Response.server_url");
        object = msg->mutable_server_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CCloud_GetUploadServerInfo_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCloud_GetUploadServerInfo_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string server_url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->server_url().data(), static_cast<int>(this->server_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCloud_GetUploadServerInfo_Response.server_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCloud_GetUploadServerInfo_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCloud_GetUploadServerInfo_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CCloud_GetUploadServerInfo_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCloud_GetUploadServerInfo_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string server_url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_url().data(), static_cast<int>(this->server_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_GetUploadServerInfo_Response.server_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->server_url(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCloud_GetUploadServerInfo_Response)
}

::google::protobuf::uint8* CCloud_GetUploadServerInfo_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCloud_GetUploadServerInfo_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string server_url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_url().data(), static_cast<int>(this->server_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_GetUploadServerInfo_Response.server_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->server_url(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCloud_GetUploadServerInfo_Response)
  return target;
}

size_t CCloud_GetUploadServerInfo_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCloud_GetUploadServerInfo_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string server_url = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->server_url());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCloud_GetUploadServerInfo_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCloud_GetUploadServerInfo_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_GetUploadServerInfo_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CCloud_GetUploadServerInfo_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCloud_GetUploadServerInfo_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCloud_GetUploadServerInfo_Response)
    MergeFrom(*source);
  }
}

void CCloud_GetUploadServerInfo_Response::MergeFrom(const CCloud_GetUploadServerInfo_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCloud_GetUploadServerInfo_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_server_url()) {
    _has_bits_[0] |= 0x00000001u;
    server_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_url_);
  }
}

void CCloud_GetUploadServerInfo_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCloud_GetUploadServerInfo_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_GetUploadServerInfo_Response::CopyFrom(const CCloud_GetUploadServerInfo_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCloud_GetUploadServerInfo_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_GetUploadServerInfo_Response::IsInitialized() const {
  return true;
}

void CCloud_GetUploadServerInfo_Response::Swap(CCloud_GetUploadServerInfo_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_GetUploadServerInfo_Response::InternalSwap(CCloud_GetUploadServerInfo_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  server_url_.Swap(&other->server_url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CCloud_GetUploadServerInfo_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fcloud_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CCloud_BeginHTTPUpload_Request::InitAsDefaultInstance() {
}
class CCloud_BeginHTTPUpload_Request::HasBitSetters {
 public:
  static void set_has_appid(CCloud_BeginHTTPUpload_Request* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_file_size(CCloud_BeginHTTPUpload_Request* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_filename(CCloud_BeginHTTPUpload_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_file_sha(CCloud_BeginHTTPUpload_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_is_public(CCloud_BeginHTTPUpload_Request* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCloud_BeginHTTPUpload_Request::kAppidFieldNumber;
const int CCloud_BeginHTTPUpload_Request::kFileSizeFieldNumber;
const int CCloud_BeginHTTPUpload_Request::kFilenameFieldNumber;
const int CCloud_BeginHTTPUpload_Request::kFileShaFieldNumber;
const int CCloud_BeginHTTPUpload_Request::kIsPublicFieldNumber;
const int CCloud_BeginHTTPUpload_Request::kPlatformsToSyncFieldNumber;
const int CCloud_BeginHTTPUpload_Request::kRequestHeadersNamesFieldNumber;
const int CCloud_BeginHTTPUpload_Request::kRequestHeadersValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_BeginHTTPUpload_Request::CCloud_BeginHTTPUpload_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCloud_BeginHTTPUpload_Request)
}
CCloud_BeginHTTPUpload_Request::CCloud_BeginHTTPUpload_Request(const CCloud_BeginHTTPUpload_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      platforms_to_sync_(from.platforms_to_sync_),
      request_headers_names_(from.request_headers_names_),
      request_headers_values_(from.request_headers_values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_filename()) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  file_sha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_sha()) {
    file_sha_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_sha_);
  }
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_public_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(is_public_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCloud_BeginHTTPUpload_Request)
}

void CCloud_BeginHTTPUpload_Request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CCloud_BeginHTTPUpload_Request_steammessages_5fcloud_2esteamclient_2eproto.base);
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_sha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&appid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_public_) -
      reinterpret_cast<char*>(&appid_)) + sizeof(is_public_));
}

CCloud_BeginHTTPUpload_Request::~CCloud_BeginHTTPUpload_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CCloud_BeginHTTPUpload_Request)
  SharedDtor();
}

void CCloud_BeginHTTPUpload_Request::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_sha_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CCloud_BeginHTTPUpload_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCloud_BeginHTTPUpload_Request& CCloud_BeginHTTPUpload_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CCloud_BeginHTTPUpload_Request_steammessages_5fcloud_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CCloud_BeginHTTPUpload_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCloud_BeginHTTPUpload_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  platforms_to_sync_.Clear();
  request_headers_names_.Clear();
  request_headers_values_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      filename_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      file_sha_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_public_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(is_public_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CCloud_BeginHTTPUpload_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CCloud_BeginHTTPUpload_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1 [(.proto.steam.description) = "App ID for which the file is being uploaded."];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 file_size = 2 [(.proto.steam.description) = "Original file size in bytes."];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_file_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string filename = 3 [(.proto.steam.description) = "Name of the file to store in the cloud."];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CCloud_BeginHTTPUpload_Request.filename");
        object = msg->mutable_filename();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string file_sha = 4 [(.proto.steam.description) = "Hex string (40 digits) representing the SHA1 digest of the file."];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CCloud_BeginHTTPUpload_Request.file_sha");
        object = msg->mutable_file_sha();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool is_public = 5 [(.proto.steam.description) = "True if the file should be marked public on the UFS, false otherwise."];
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_is_public(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated string platforms_to_sync = 6 [(.proto.steam.description) = "Array of string specifying which platforms to sync; value values: all, windows, osx, linux."];
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("proto.steam.CCloud_BeginHTTPUpload_Request.platforms_to_sync");
          object = msg->add_platforms_to_sync();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 50 && (ptr += 1));
        break;
      }
      // repeated string request_headers_names = 7 [(.proto.steam.description) = "Names for headers you\'ll want to set on your upload request. May be left blank."];
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("proto.steam.CCloud_BeginHTTPUpload_Request.request_headers_names");
          object = msg->add_request_headers_names();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 58 && (ptr += 1));
        break;
      }
      // repeated string request_headers_values = 8 [(.proto.steam.description) = "Values for headers you\'ll want to set on your upload request. The number of names must equal the number of values."];
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("proto.steam.CCloud_BeginHTTPUpload_Request.request_headers_values");
          object = msg->add_request_headers_values();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 66 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CCloud_BeginHTTPUpload_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCloud_BeginHTTPUpload_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1 [(.proto.steam.description) = "App ID for which the file is being uploaded."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 file_size = 2 [(.proto.steam.description) = "Original file size in bytes."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_file_size(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string filename = 3 [(.proto.steam.description) = "Name of the file to store in the cloud."];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), static_cast<int>(this->filename().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCloud_BeginHTTPUpload_Request.filename");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string file_sha = 4 [(.proto.steam.description) = "Hex string (40 digits) representing the SHA1 digest of the file."];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_sha()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_sha().data(), static_cast<int>(this->file_sha().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCloud_BeginHTTPUpload_Request.file_sha");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_public = 5 [(.proto.steam.description) = "True if the file should be marked public on the UFS, false otherwise."];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_is_public(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_public_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string platforms_to_sync = 6 [(.proto.steam.description) = "Array of string specifying which platforms to sync; value values: all, windows, osx, linux."];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_platforms_to_sync()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->platforms_to_sync(this->platforms_to_sync_size() - 1).data(),
            static_cast<int>(this->platforms_to_sync(this->platforms_to_sync_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCloud_BeginHTTPUpload_Request.platforms_to_sync");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string request_headers_names = 7 [(.proto.steam.description) = "Names for headers you\'ll want to set on your upload request. May be left blank."];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_request_headers_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_headers_names(this->request_headers_names_size() - 1).data(),
            static_cast<int>(this->request_headers_names(this->request_headers_names_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCloud_BeginHTTPUpload_Request.request_headers_names");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string request_headers_values = 8 [(.proto.steam.description) = "Values for headers you\'ll want to set on your upload request. The number of names must equal the number of values."];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_request_headers_values()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_headers_values(this->request_headers_values_size() - 1).data(),
            static_cast<int>(this->request_headers_values(this->request_headers_values_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCloud_BeginHTTPUpload_Request.request_headers_values");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCloud_BeginHTTPUpload_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCloud_BeginHTTPUpload_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CCloud_BeginHTTPUpload_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCloud_BeginHTTPUpload_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.proto.steam.description) = "App ID for which the file is being uploaded."];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint32 file_size = 2 [(.proto.steam.description) = "Original file size in bytes."];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->file_size(), output);
  }

  // optional string filename = 3 [(.proto.steam.description) = "Name of the file to store in the cloud."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_BeginHTTPUpload_Request.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->filename(), output);
  }

  // optional string file_sha = 4 [(.proto.steam.description) = "Hex string (40 digits) representing the SHA1 digest of the file."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_sha().data(), static_cast<int>(this->file_sha().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_BeginHTTPUpload_Request.file_sha");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->file_sha(), output);
  }

  // optional bool is_public = 5 [(.proto.steam.description) = "True if the file should be marked public on the UFS, false otherwise."];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_public(), output);
  }

  // repeated string platforms_to_sync = 6 [(.proto.steam.description) = "Array of string specifying which platforms to sync; value values: all, windows, osx, linux."];
  for (int i = 0, n = this->platforms_to_sync_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platforms_to_sync(i).data(), static_cast<int>(this->platforms_to_sync(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_BeginHTTPUpload_Request.platforms_to_sync");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->platforms_to_sync(i), output);
  }

  // repeated string request_headers_names = 7 [(.proto.steam.description) = "Names for headers you\'ll want to set on your upload request. May be left blank."];
  for (int i = 0, n = this->request_headers_names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_headers_names(i).data(), static_cast<int>(this->request_headers_names(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_BeginHTTPUpload_Request.request_headers_names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->request_headers_names(i), output);
  }

  // repeated string request_headers_values = 8 [(.proto.steam.description) = "Values for headers you\'ll want to set on your upload request. The number of names must equal the number of values."];
  for (int i = 0, n = this->request_headers_values_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_headers_values(i).data(), static_cast<int>(this->request_headers_values(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_BeginHTTPUpload_Request.request_headers_values");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->request_headers_values(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCloud_BeginHTTPUpload_Request)
}

::google::protobuf::uint8* CCloud_BeginHTTPUpload_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCloud_BeginHTTPUpload_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.proto.steam.description) = "App ID for which the file is being uploaded."];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint32 file_size = 2 [(.proto.steam.description) = "Original file size in bytes."];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->file_size(), target);
  }

  // optional string filename = 3 [(.proto.steam.description) = "Name of the file to store in the cloud."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_BeginHTTPUpload_Request.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->filename(), target);
  }

  // optional string file_sha = 4 [(.proto.steam.description) = "Hex string (40 digits) representing the SHA1 digest of the file."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_sha().data(), static_cast<int>(this->file_sha().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_BeginHTTPUpload_Request.file_sha");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->file_sha(), target);
  }

  // optional bool is_public = 5 [(.proto.steam.description) = "True if the file should be marked public on the UFS, false otherwise."];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_public(), target);
  }

  // repeated string platforms_to_sync = 6 [(.proto.steam.description) = "Array of string specifying which platforms to sync; value values: all, windows, osx, linux."];
  for (int i = 0, n = this->platforms_to_sync_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platforms_to_sync(i).data(), static_cast<int>(this->platforms_to_sync(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_BeginHTTPUpload_Request.platforms_to_sync");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->platforms_to_sync(i), target);
  }

  // repeated string request_headers_names = 7 [(.proto.steam.description) = "Names for headers you\'ll want to set on your upload request. May be left blank."];
  for (int i = 0, n = this->request_headers_names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_headers_names(i).data(), static_cast<int>(this->request_headers_names(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_BeginHTTPUpload_Request.request_headers_names");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->request_headers_names(i), target);
  }

  // repeated string request_headers_values = 8 [(.proto.steam.description) = "Values for headers you\'ll want to set on your upload request. The number of names must equal the number of values."];
  for (int i = 0, n = this->request_headers_values_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_headers_values(i).data(), static_cast<int>(this->request_headers_values(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_BeginHTTPUpload_Request.request_headers_values");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->request_headers_values(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCloud_BeginHTTPUpload_Request)
  return target;
}

size_t CCloud_BeginHTTPUpload_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCloud_BeginHTTPUpload_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string platforms_to_sync = 6 [(.proto.steam.description) = "Array of string specifying which platforms to sync; value values: all, windows, osx, linux."];
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->platforms_to_sync_size());
  for (int i = 0, n = this->platforms_to_sync_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->platforms_to_sync(i));
  }

  // repeated string request_headers_names = 7 [(.proto.steam.description) = "Names for headers you\'ll want to set on your upload request. May be left blank."];
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->request_headers_names_size());
  for (int i = 0, n = this->request_headers_names_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->request_headers_names(i));
  }

  // repeated string request_headers_values = 8 [(.proto.steam.description) = "Values for headers you\'ll want to set on your upload request. The number of names must equal the number of values."];
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->request_headers_values_size());
  for (int i = 0, n = this->request_headers_values_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->request_headers_values(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string filename = 3 [(.proto.steam.description) = "Name of the file to store in the cloud."];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional string file_sha = 4 [(.proto.steam.description) = "Hex string (40 digits) representing the SHA1 digest of the file."];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_sha());
    }

    // optional uint32 appid = 1 [(.proto.steam.description) = "App ID for which the file is being uploaded."];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional uint32 file_size = 2 [(.proto.steam.description) = "Original file size in bytes."];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->file_size());
    }

    // optional bool is_public = 5 [(.proto.steam.description) = "True if the file should be marked public on the UFS, false otherwise."];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCloud_BeginHTTPUpload_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCloud_BeginHTTPUpload_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_BeginHTTPUpload_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CCloud_BeginHTTPUpload_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCloud_BeginHTTPUpload_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCloud_BeginHTTPUpload_Request)
    MergeFrom(*source);
  }
}

void CCloud_BeginHTTPUpload_Request::MergeFrom(const CCloud_BeginHTTPUpload_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCloud_BeginHTTPUpload_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  platforms_to_sync_.MergeFrom(from.platforms_to_sync_);
  request_headers_names_.MergeFrom(from.request_headers_names_);
  request_headers_values_.MergeFrom(from.request_headers_values_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      file_sha_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_sha_);
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000008u) {
      file_size_ = from.file_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_public_ = from.is_public_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCloud_BeginHTTPUpload_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCloud_BeginHTTPUpload_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_BeginHTTPUpload_Request::CopyFrom(const CCloud_BeginHTTPUpload_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCloud_BeginHTTPUpload_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_BeginHTTPUpload_Request::IsInitialized() const {
  return true;
}

void CCloud_BeginHTTPUpload_Request::Swap(CCloud_BeginHTTPUpload_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_BeginHTTPUpload_Request::InternalSwap(CCloud_BeginHTTPUpload_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  platforms_to_sync_.InternalSwap(CastToBase(&other->platforms_to_sync_));
  request_headers_names_.InternalSwap(CastToBase(&other->request_headers_names_));
  request_headers_values_.InternalSwap(CastToBase(&other->request_headers_values_));
  filename_.Swap(&other->filename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  file_sha_.Swap(&other->file_sha_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(appid_, other->appid_);
  swap(file_size_, other->file_size_);
  swap(is_public_, other->is_public_);
}

::google::protobuf::Metadata CCloud_BeginHTTPUpload_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fcloud_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CCloud_BeginHTTPUpload_Response_HTTPHeaders::InitAsDefaultInstance() {
}
class CCloud_BeginHTTPUpload_Response_HTTPHeaders::HasBitSetters {
 public:
  static void set_has_name(CCloud_BeginHTTPUpload_Response_HTTPHeaders* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_value(CCloud_BeginHTTPUpload_Response_HTTPHeaders* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCloud_BeginHTTPUpload_Response_HTTPHeaders::kNameFieldNumber;
const int CCloud_BeginHTTPUpload_Response_HTTPHeaders::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_BeginHTTPUpload_Response_HTTPHeaders::CCloud_BeginHTTPUpload_Response_HTTPHeaders()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders)
}
CCloud_BeginHTTPUpload_Response_HTTPHeaders::CCloud_BeginHTTPUpload_Response_HTTPHeaders(const CCloud_BeginHTTPUpload_Response_HTTPHeaders& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders)
}

void CCloud_BeginHTTPUpload_Response_HTTPHeaders::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CCloud_BeginHTTPUpload_Response_HTTPHeaders_steammessages_5fcloud_2esteamclient_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CCloud_BeginHTTPUpload_Response_HTTPHeaders::~CCloud_BeginHTTPUpload_Response_HTTPHeaders() {
  // @@protoc_insertion_point(destructor:proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders)
  SharedDtor();
}

void CCloud_BeginHTTPUpload_Response_HTTPHeaders::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CCloud_BeginHTTPUpload_Response_HTTPHeaders::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCloud_BeginHTTPUpload_Response_HTTPHeaders& CCloud_BeginHTTPUpload_Response_HTTPHeaders::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CCloud_BeginHTTPUpload_Response_HTTPHeaders_steammessages_5fcloud_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CCloud_BeginHTTPUpload_Response_HTTPHeaders::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CCloud_BeginHTTPUpload_Response_HTTPHeaders::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CCloud_BeginHTTPUpload_Response_HTTPHeaders*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders.value");
        object = msg->mutable_value();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CCloud_BeginHTTPUpload_Response_HTTPHeaders::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CCloud_BeginHTTPUpload_Response_HTTPHeaders::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders)
}

::google::protobuf::uint8* CCloud_BeginHTTPUpload_Response_HTTPHeaders::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders)
  return target;
}

size_t CCloud_BeginHTTPUpload_Response_HTTPHeaders::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCloud_BeginHTTPUpload_Response_HTTPHeaders::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_BeginHTTPUpload_Response_HTTPHeaders* source =
      ::google::protobuf::DynamicCastToGenerated<CCloud_BeginHTTPUpload_Response_HTTPHeaders>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders)
    MergeFrom(*source);
  }
}

void CCloud_BeginHTTPUpload_Response_HTTPHeaders::MergeFrom(const CCloud_BeginHTTPUpload_Response_HTTPHeaders& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
}

void CCloud_BeginHTTPUpload_Response_HTTPHeaders::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_BeginHTTPUpload_Response_HTTPHeaders::CopyFrom(const CCloud_BeginHTTPUpload_Response_HTTPHeaders& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_BeginHTTPUpload_Response_HTTPHeaders::IsInitialized() const {
  return true;
}

void CCloud_BeginHTTPUpload_Response_HTTPHeaders::Swap(CCloud_BeginHTTPUpload_Response_HTTPHeaders* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_BeginHTTPUpload_Response_HTTPHeaders::InternalSwap(CCloud_BeginHTTPUpload_Response_HTTPHeaders* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CCloud_BeginHTTPUpload_Response_HTTPHeaders::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fcloud_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CCloud_BeginHTTPUpload_Response::InitAsDefaultInstance() {
}
class CCloud_BeginHTTPUpload_Response::HasBitSetters {
 public:
  static void set_has_ugcid(CCloud_BeginHTTPUpload_Response* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_timestamp(CCloud_BeginHTTPUpload_Response* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_url_host(CCloud_BeginHTTPUpload_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_url_path(CCloud_BeginHTTPUpload_Response* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_use_https(CCloud_BeginHTTPUpload_Response* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCloud_BeginHTTPUpload_Response::kUgcidFieldNumber;
const int CCloud_BeginHTTPUpload_Response::kTimestampFieldNumber;
const int CCloud_BeginHTTPUpload_Response::kUrlHostFieldNumber;
const int CCloud_BeginHTTPUpload_Response::kUrlPathFieldNumber;
const int CCloud_BeginHTTPUpload_Response::kUseHttpsFieldNumber;
const int CCloud_BeginHTTPUpload_Response::kRequestHeadersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_BeginHTTPUpload_Response::CCloud_BeginHTTPUpload_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCloud_BeginHTTPUpload_Response)
}
CCloud_BeginHTTPUpload_Response::CCloud_BeginHTTPUpload_Response(const CCloud_BeginHTTPUpload_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      request_headers_(from.request_headers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url_host()) {
    url_host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_host_);
  }
  url_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url_path()) {
    url_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_path_);
  }
  ::memcpy(&ugcid_, &from.ugcid_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_https_) -
    reinterpret_cast<char*>(&ugcid_)) + sizeof(use_https_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCloud_BeginHTTPUpload_Response)
}

void CCloud_BeginHTTPUpload_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CCloud_BeginHTTPUpload_Response_steammessages_5fcloud_2esteamclient_2eproto.base);
  url_host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ugcid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_https_) -
      reinterpret_cast<char*>(&ugcid_)) + sizeof(use_https_));
}

CCloud_BeginHTTPUpload_Response::~CCloud_BeginHTTPUpload_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CCloud_BeginHTTPUpload_Response)
  SharedDtor();
}

void CCloud_BeginHTTPUpload_Response::SharedDtor() {
  url_host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CCloud_BeginHTTPUpload_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCloud_BeginHTTPUpload_Response& CCloud_BeginHTTPUpload_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CCloud_BeginHTTPUpload_Response_steammessages_5fcloud_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CCloud_BeginHTTPUpload_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCloud_BeginHTTPUpload_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_headers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      url_host_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      url_path_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&ugcid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&use_https_) -
        reinterpret_cast<char*>(&ugcid_)) + sizeof(use_https_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CCloud_BeginHTTPUpload_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CCloud_BeginHTTPUpload_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 ugcid = 1 [(.proto.steam.description) = "UGC ID of the uploaded file."];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_ugcid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed32 timestamp = 2 [(.proto.steam.description) = "Server timestamp of file."];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional string url_host = 3 [(.proto.steam.description) = "Host name of server to which file should be uploaded via HTTP PUT."];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CCloud_BeginHTTPUpload_Response.url_host");
        object = msg->mutable_url_host();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string url_path = 4 [(.proto.steam.description) = "Relative path on server to which file should be uploaded."];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CCloud_BeginHTTPUpload_Response.url_path");
        object = msg->mutable_url_path();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool use_https = 5 [(.proto.steam.description) = "If true, use https, otherwise use http."];
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_use_https(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders request_headers = 6 [(.proto.steam.description) = "Name-value pairs to be sent in HTTP PUT request."];
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CCloud_BeginHTTPUpload_Response_HTTPHeaders::_InternalParse;
          object = msg->add_request_headers();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 50 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CCloud_BeginHTTPUpload_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCloud_BeginHTTPUpload_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 ugcid = 1 [(.proto.steam.description) = "UGC ID of the uploaded file."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_ugcid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &ugcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 timestamp = 2 [(.proto.steam.description) = "Server timestamp of file."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_timestamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url_host = 3 [(.proto.steam.description) = "Host name of server to which file should be uploaded via HTTP PUT."];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url_host().data(), static_cast<int>(this->url_host().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCloud_BeginHTTPUpload_Response.url_host");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url_path = 4 [(.proto.steam.description) = "Relative path on server to which file should be uploaded."];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url_path().data(), static_cast<int>(this->url_path().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCloud_BeginHTTPUpload_Response.url_path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_https = 5 [(.proto.steam.description) = "If true, use https, otherwise use http."];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_use_https(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_https_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders request_headers = 6 [(.proto.steam.description) = "Name-value pairs to be sent in HTTP PUT request."];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_request_headers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCloud_BeginHTTPUpload_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCloud_BeginHTTPUpload_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CCloud_BeginHTTPUpload_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCloud_BeginHTTPUpload_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 ugcid = 1 [(.proto.steam.description) = "UGC ID of the uploaded file."];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->ugcid(), output);
  }

  // optional fixed32 timestamp = 2 [(.proto.steam.description) = "Server timestamp of file."];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->timestamp(), output);
  }

  // optional string url_host = 3 [(.proto.steam.description) = "Host name of server to which file should be uploaded via HTTP PUT."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url_host().data(), static_cast<int>(this->url_host().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_BeginHTTPUpload_Response.url_host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->url_host(), output);
  }

  // optional string url_path = 4 [(.proto.steam.description) = "Relative path on server to which file should be uploaded."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url_path().data(), static_cast<int>(this->url_path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_BeginHTTPUpload_Response.url_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->url_path(), output);
  }

  // optional bool use_https = 5 [(.proto.steam.description) = "If true, use https, otherwise use http."];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->use_https(), output);
  }

  // repeated .proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders request_headers = 6 [(.proto.steam.description) = "Name-value pairs to be sent in HTTP PUT request."];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->request_headers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->request_headers(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCloud_BeginHTTPUpload_Response)
}

::google::protobuf::uint8* CCloud_BeginHTTPUpload_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCloud_BeginHTTPUpload_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 ugcid = 1 [(.proto.steam.description) = "UGC ID of the uploaded file."];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->ugcid(), target);
  }

  // optional fixed32 timestamp = 2 [(.proto.steam.description) = "Server timestamp of file."];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->timestamp(), target);
  }

  // optional string url_host = 3 [(.proto.steam.description) = "Host name of server to which file should be uploaded via HTTP PUT."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url_host().data(), static_cast<int>(this->url_host().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_BeginHTTPUpload_Response.url_host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->url_host(), target);
  }

  // optional string url_path = 4 [(.proto.steam.description) = "Relative path on server to which file should be uploaded."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url_path().data(), static_cast<int>(this->url_path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_BeginHTTPUpload_Response.url_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->url_path(), target);
  }

  // optional bool use_https = 5 [(.proto.steam.description) = "If true, use https, otherwise use http."];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->use_https(), target);
  }

  // repeated .proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders request_headers = 6 [(.proto.steam.description) = "Name-value pairs to be sent in HTTP PUT request."];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->request_headers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->request_headers(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCloud_BeginHTTPUpload_Response)
  return target;
}

size_t CCloud_BeginHTTPUpload_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCloud_BeginHTTPUpload_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders request_headers = 6 [(.proto.steam.description) = "Name-value pairs to be sent in HTTP PUT request."];
  {
    unsigned int count = static_cast<unsigned int>(this->request_headers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->request_headers(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string url_host = 3 [(.proto.steam.description) = "Host name of server to which file should be uploaded via HTTP PUT."];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url_host());
    }

    // optional string url_path = 4 [(.proto.steam.description) = "Relative path on server to which file should be uploaded."];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url_path());
    }

    // optional fixed64 ugcid = 1 [(.proto.steam.description) = "UGC ID of the uploaded file."];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional fixed32 timestamp = 2 [(.proto.steam.description) = "Server timestamp of file."];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional bool use_https = 5 [(.proto.steam.description) = "If true, use https, otherwise use http."];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCloud_BeginHTTPUpload_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCloud_BeginHTTPUpload_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_BeginHTTPUpload_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CCloud_BeginHTTPUpload_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCloud_BeginHTTPUpload_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCloud_BeginHTTPUpload_Response)
    MergeFrom(*source);
  }
}

void CCloud_BeginHTTPUpload_Response::MergeFrom(const CCloud_BeginHTTPUpload_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCloud_BeginHTTPUpload_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  request_headers_.MergeFrom(from.request_headers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      url_host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_host_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      url_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_path_);
    }
    if (cached_has_bits & 0x00000004u) {
      ugcid_ = from.ugcid_;
    }
    if (cached_has_bits & 0x00000008u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      use_https_ = from.use_https_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCloud_BeginHTTPUpload_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCloud_BeginHTTPUpload_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_BeginHTTPUpload_Response::CopyFrom(const CCloud_BeginHTTPUpload_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCloud_BeginHTTPUpload_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_BeginHTTPUpload_Response::IsInitialized() const {
  return true;
}

void CCloud_BeginHTTPUpload_Response::Swap(CCloud_BeginHTTPUpload_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_BeginHTTPUpload_Response::InternalSwap(CCloud_BeginHTTPUpload_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&request_headers_)->InternalSwap(CastToBase(&other->request_headers_));
  url_host_.Swap(&other->url_host_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  url_path_.Swap(&other->url_path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ugcid_, other->ugcid_);
  swap(timestamp_, other->timestamp_);
  swap(use_https_, other->use_https_);
}

::google::protobuf::Metadata CCloud_BeginHTTPUpload_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fcloud_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CCloud_CommitHTTPUpload_Request::InitAsDefaultInstance() {
}
class CCloud_CommitHTTPUpload_Request::HasBitSetters {
 public:
  static void set_has_transfer_succeeded(CCloud_CommitHTTPUpload_Request* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_appid(CCloud_CommitHTTPUpload_Request* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_file_sha(CCloud_CommitHTTPUpload_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_filename(CCloud_CommitHTTPUpload_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCloud_CommitHTTPUpload_Request::kTransferSucceededFieldNumber;
const int CCloud_CommitHTTPUpload_Request::kAppidFieldNumber;
const int CCloud_CommitHTTPUpload_Request::kFileShaFieldNumber;
const int CCloud_CommitHTTPUpload_Request::kFilenameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_CommitHTTPUpload_Request::CCloud_CommitHTTPUpload_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCloud_CommitHTTPUpload_Request)
}
CCloud_CommitHTTPUpload_Request::CCloud_CommitHTTPUpload_Request(const CCloud_CommitHTTPUpload_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_sha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_sha()) {
    file_sha_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_sha_);
  }
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_filename()) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  ::memcpy(&transfer_succeeded_, &from.transfer_succeeded_,
    static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&transfer_succeeded_)) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCloud_CommitHTTPUpload_Request)
}

void CCloud_CommitHTTPUpload_Request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CCloud_CommitHTTPUpload_Request_steammessages_5fcloud_2esteamclient_2eproto.base);
  file_sha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&transfer_succeeded_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&appid_) -
      reinterpret_cast<char*>(&transfer_succeeded_)) + sizeof(appid_));
}

CCloud_CommitHTTPUpload_Request::~CCloud_CommitHTTPUpload_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CCloud_CommitHTTPUpload_Request)
  SharedDtor();
}

void CCloud_CommitHTTPUpload_Request::SharedDtor() {
  file_sha_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CCloud_CommitHTTPUpload_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCloud_CommitHTTPUpload_Request& CCloud_CommitHTTPUpload_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CCloud_CommitHTTPUpload_Request_steammessages_5fcloud_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CCloud_CommitHTTPUpload_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCloud_CommitHTTPUpload_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      file_sha_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      filename_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&transfer_succeeded_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&appid_) -
        reinterpret_cast<char*>(&transfer_succeeded_)) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CCloud_CommitHTTPUpload_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CCloud_CommitHTTPUpload_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool transfer_succeeded = 1 [(.proto.steam.description) = "True if the HTTP PUT to the upload URL succeeded (URL provided in response to Cloud.BeginHTTPUpload), false if a failure occurred."];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_transfer_succeeded(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 appid = 2 [(.proto.steam.description) = "App ID for which the file is being uploaded. Must match the app ID provided to Cloud.BeginHTTPUpload."];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string file_sha = 3 [(.proto.steam.description) = "Hex string (40 digits) representing the SHA1 digest of the file. Must match the SHA1 digest provided to Cloud.BeginHTTPUpload."];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CCloud_CommitHTTPUpload_Request.file_sha");
        object = msg->mutable_file_sha();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string filename = 4 [(.proto.steam.description) = "Filename as specified in the Cloud.BeginHTTPUpload request."];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CCloud_CommitHTTPUpload_Request.filename");
        object = msg->mutable_filename();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CCloud_CommitHTTPUpload_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCloud_CommitHTTPUpload_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool transfer_succeeded = 1 [(.proto.steam.description) = "True if the HTTP PUT to the upload URL succeeded (URL provided in response to Cloud.BeginHTTPUpload), false if a failure occurred."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_transfer_succeeded(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &transfer_succeeded_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 appid = 2 [(.proto.steam.description) = "App ID for which the file is being uploaded. Must match the app ID provided to Cloud.BeginHTTPUpload."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string file_sha = 3 [(.proto.steam.description) = "Hex string (40 digits) representing the SHA1 digest of the file. Must match the SHA1 digest provided to Cloud.BeginHTTPUpload."];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_sha()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_sha().data(), static_cast<int>(this->file_sha().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCloud_CommitHTTPUpload_Request.file_sha");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string filename = 4 [(.proto.steam.description) = "Filename as specified in the Cloud.BeginHTTPUpload request."];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), static_cast<int>(this->filename().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCloud_CommitHTTPUpload_Request.filename");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCloud_CommitHTTPUpload_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCloud_CommitHTTPUpload_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CCloud_CommitHTTPUpload_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCloud_CommitHTTPUpload_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool transfer_succeeded = 1 [(.proto.steam.description) = "True if the HTTP PUT to the upload URL succeeded (URL provided in response to Cloud.BeginHTTPUpload), false if a failure occurred."];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->transfer_succeeded(), output);
  }

  // optional uint32 appid = 2 [(.proto.steam.description) = "App ID for which the file is being uploaded. Must match the app ID provided to Cloud.BeginHTTPUpload."];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->appid(), output);
  }

  // optional string file_sha = 3 [(.proto.steam.description) = "Hex string (40 digits) representing the SHA1 digest of the file. Must match the SHA1 digest provided to Cloud.BeginHTTPUpload."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_sha().data(), static_cast<int>(this->file_sha().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_CommitHTTPUpload_Request.file_sha");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->file_sha(), output);
  }

  // optional string filename = 4 [(.proto.steam.description) = "Filename as specified in the Cloud.BeginHTTPUpload request."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_CommitHTTPUpload_Request.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->filename(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCloud_CommitHTTPUpload_Request)
}

::google::protobuf::uint8* CCloud_CommitHTTPUpload_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCloud_CommitHTTPUpload_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool transfer_succeeded = 1 [(.proto.steam.description) = "True if the HTTP PUT to the upload URL succeeded (URL provided in response to Cloud.BeginHTTPUpload), false if a failure occurred."];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->transfer_succeeded(), target);
  }

  // optional uint32 appid = 2 [(.proto.steam.description) = "App ID for which the file is being uploaded. Must match the app ID provided to Cloud.BeginHTTPUpload."];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->appid(), target);
  }

  // optional string file_sha = 3 [(.proto.steam.description) = "Hex string (40 digits) representing the SHA1 digest of the file. Must match the SHA1 digest provided to Cloud.BeginHTTPUpload."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_sha().data(), static_cast<int>(this->file_sha().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_CommitHTTPUpload_Request.file_sha");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->file_sha(), target);
  }

  // optional string filename = 4 [(.proto.steam.description) = "Filename as specified in the Cloud.BeginHTTPUpload request."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_CommitHTTPUpload_Request.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->filename(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCloud_CommitHTTPUpload_Request)
  return target;
}

size_t CCloud_CommitHTTPUpload_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCloud_CommitHTTPUpload_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string file_sha = 3 [(.proto.steam.description) = "Hex string (40 digits) representing the SHA1 digest of the file. Must match the SHA1 digest provided to Cloud.BeginHTTPUpload."];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_sha());
    }

    // optional string filename = 4 [(.proto.steam.description) = "Filename as specified in the Cloud.BeginHTTPUpload request."];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional bool transfer_succeeded = 1 [(.proto.steam.description) = "True if the HTTP PUT to the upload URL succeeded (URL provided in response to Cloud.BeginHTTPUpload), false if a failure occurred."];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional uint32 appid = 2 [(.proto.steam.description) = "App ID for which the file is being uploaded. Must match the app ID provided to Cloud.BeginHTTPUpload."];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCloud_CommitHTTPUpload_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCloud_CommitHTTPUpload_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_CommitHTTPUpload_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CCloud_CommitHTTPUpload_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCloud_CommitHTTPUpload_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCloud_CommitHTTPUpload_Request)
    MergeFrom(*source);
  }
}

void CCloud_CommitHTTPUpload_Request::MergeFrom(const CCloud_CommitHTTPUpload_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCloud_CommitHTTPUpload_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      file_sha_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_sha_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
    if (cached_has_bits & 0x00000004u) {
      transfer_succeeded_ = from.transfer_succeeded_;
    }
    if (cached_has_bits & 0x00000008u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCloud_CommitHTTPUpload_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCloud_CommitHTTPUpload_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_CommitHTTPUpload_Request::CopyFrom(const CCloud_CommitHTTPUpload_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCloud_CommitHTTPUpload_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_CommitHTTPUpload_Request::IsInitialized() const {
  return true;
}

void CCloud_CommitHTTPUpload_Request::Swap(CCloud_CommitHTTPUpload_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_CommitHTTPUpload_Request::InternalSwap(CCloud_CommitHTTPUpload_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  file_sha_.Swap(&other->file_sha_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  filename_.Swap(&other->filename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(transfer_succeeded_, other->transfer_succeeded_);
  swap(appid_, other->appid_);
}

::google::protobuf::Metadata CCloud_CommitHTTPUpload_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fcloud_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CCloud_CommitHTTPUpload_Response::InitAsDefaultInstance() {
}
class CCloud_CommitHTTPUpload_Response::HasBitSetters {
 public:
  static void set_has_file_committed(CCloud_CommitHTTPUpload_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCloud_CommitHTTPUpload_Response::kFileCommittedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_CommitHTTPUpload_Response::CCloud_CommitHTTPUpload_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCloud_CommitHTTPUpload_Response)
}
CCloud_CommitHTTPUpload_Response::CCloud_CommitHTTPUpload_Response(const CCloud_CommitHTTPUpload_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_committed_ = from.file_committed_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCloud_CommitHTTPUpload_Response)
}

void CCloud_CommitHTTPUpload_Response::SharedCtor() {
  file_committed_ = false;
}

CCloud_CommitHTTPUpload_Response::~CCloud_CommitHTTPUpload_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CCloud_CommitHTTPUpload_Response)
  SharedDtor();
}

void CCloud_CommitHTTPUpload_Response::SharedDtor() {
}

void CCloud_CommitHTTPUpload_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCloud_CommitHTTPUpload_Response& CCloud_CommitHTTPUpload_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CCloud_CommitHTTPUpload_Response_steammessages_5fcloud_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CCloud_CommitHTTPUpload_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCloud_CommitHTTPUpload_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_committed_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CCloud_CommitHTTPUpload_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CCloud_CommitHTTPUpload_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool file_committed = 1 [(.proto.steam.description) = "True if the file was successfully committed, false otherwise."];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_file_committed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CCloud_CommitHTTPUpload_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCloud_CommitHTTPUpload_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool file_committed = 1 [(.proto.steam.description) = "True if the file was successfully committed, false otherwise."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_file_committed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &file_committed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCloud_CommitHTTPUpload_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCloud_CommitHTTPUpload_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CCloud_CommitHTTPUpload_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCloud_CommitHTTPUpload_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool file_committed = 1 [(.proto.steam.description) = "True if the file was successfully committed, false otherwise."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->file_committed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCloud_CommitHTTPUpload_Response)
}

::google::protobuf::uint8* CCloud_CommitHTTPUpload_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCloud_CommitHTTPUpload_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool file_committed = 1 [(.proto.steam.description) = "True if the file was successfully committed, false otherwise."];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->file_committed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCloud_CommitHTTPUpload_Response)
  return target;
}

size_t CCloud_CommitHTTPUpload_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCloud_CommitHTTPUpload_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool file_committed = 1 [(.proto.steam.description) = "True if the file was successfully committed, false otherwise."];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCloud_CommitHTTPUpload_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCloud_CommitHTTPUpload_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_CommitHTTPUpload_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CCloud_CommitHTTPUpload_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCloud_CommitHTTPUpload_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCloud_CommitHTTPUpload_Response)
    MergeFrom(*source);
  }
}

void CCloud_CommitHTTPUpload_Response::MergeFrom(const CCloud_CommitHTTPUpload_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCloud_CommitHTTPUpload_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_file_committed()) {
    set_file_committed(from.file_committed());
  }
}

void CCloud_CommitHTTPUpload_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCloud_CommitHTTPUpload_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_CommitHTTPUpload_Response::CopyFrom(const CCloud_CommitHTTPUpload_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCloud_CommitHTTPUpload_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_CommitHTTPUpload_Response::IsInitialized() const {
  return true;
}

void CCloud_CommitHTTPUpload_Response::Swap(CCloud_CommitHTTPUpload_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_CommitHTTPUpload_Response::InternalSwap(CCloud_CommitHTTPUpload_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(file_committed_, other->file_committed_);
}

::google::protobuf::Metadata CCloud_CommitHTTPUpload_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fcloud_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CCloud_GetFileDetails_Request::InitAsDefaultInstance() {
}
class CCloud_GetFileDetails_Request::HasBitSetters {
 public:
  static void set_has_ugcid(CCloud_GetFileDetails_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_appid(CCloud_GetFileDetails_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCloud_GetFileDetails_Request::kUgcidFieldNumber;
const int CCloud_GetFileDetails_Request::kAppidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_GetFileDetails_Request::CCloud_GetFileDetails_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCloud_GetFileDetails_Request)
}
CCloud_GetFileDetails_Request::CCloud_GetFileDetails_Request(const CCloud_GetFileDetails_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ugcid_, &from.ugcid_,
    static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&ugcid_)) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCloud_GetFileDetails_Request)
}

void CCloud_GetFileDetails_Request::SharedCtor() {
  ::memset(&ugcid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&appid_) -
      reinterpret_cast<char*>(&ugcid_)) + sizeof(appid_));
}

CCloud_GetFileDetails_Request::~CCloud_GetFileDetails_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CCloud_GetFileDetails_Request)
  SharedDtor();
}

void CCloud_GetFileDetails_Request::SharedDtor() {
}

void CCloud_GetFileDetails_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCloud_GetFileDetails_Request& CCloud_GetFileDetails_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CCloud_GetFileDetails_Request_steammessages_5fcloud_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CCloud_GetFileDetails_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCloud_GetFileDetails_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&ugcid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&appid_) -
        reinterpret_cast<char*>(&ugcid_)) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CCloud_GetFileDetails_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CCloud_GetFileDetails_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 ugcid = 1 [(.proto.steam.description) = "ID of the Cloud file to get details for."];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_ugcid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 appid = 2 [(.proto.steam.description) = "App ID the file belongs to."];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CCloud_GetFileDetails_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCloud_GetFileDetails_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ugcid = 1 [(.proto.steam.description) = "ID of the Cloud file to get details for."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_ugcid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ugcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 appid = 2 [(.proto.steam.description) = "App ID the file belongs to."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCloud_GetFileDetails_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCloud_GetFileDetails_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CCloud_GetFileDetails_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCloud_GetFileDetails_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 ugcid = 1 [(.proto.steam.description) = "ID of the Cloud file to get details for."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->ugcid(), output);
  }

  // optional uint32 appid = 2 [(.proto.steam.description) = "App ID the file belongs to."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->appid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCloud_GetFileDetails_Request)
}

::google::protobuf::uint8* CCloud_GetFileDetails_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCloud_GetFileDetails_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 ugcid = 1 [(.proto.steam.description) = "ID of the Cloud file to get details for."];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->ugcid(), target);
  }

  // optional uint32 appid = 2 [(.proto.steam.description) = "App ID the file belongs to."];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->appid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCloud_GetFileDetails_Request)
  return target;
}

size_t CCloud_GetFileDetails_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCloud_GetFileDetails_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 ugcid = 1 [(.proto.steam.description) = "ID of the Cloud file to get details for."];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ugcid());
    }

    // optional uint32 appid = 2 [(.proto.steam.description) = "App ID the file belongs to."];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCloud_GetFileDetails_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCloud_GetFileDetails_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_GetFileDetails_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CCloud_GetFileDetails_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCloud_GetFileDetails_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCloud_GetFileDetails_Request)
    MergeFrom(*source);
  }
}

void CCloud_GetFileDetails_Request::MergeFrom(const CCloud_GetFileDetails_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCloud_GetFileDetails_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ugcid_ = from.ugcid_;
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCloud_GetFileDetails_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCloud_GetFileDetails_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_GetFileDetails_Request::CopyFrom(const CCloud_GetFileDetails_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCloud_GetFileDetails_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_GetFileDetails_Request::IsInitialized() const {
  return true;
}

void CCloud_GetFileDetails_Request::Swap(CCloud_GetFileDetails_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_GetFileDetails_Request::InternalSwap(CCloud_GetFileDetails_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ugcid_, other->ugcid_);
  swap(appid_, other->appid_);
}

::google::protobuf::Metadata CCloud_GetFileDetails_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fcloud_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CCloud_UserFile::InitAsDefaultInstance() {
}
class CCloud_UserFile::HasBitSetters {
 public:
  static void set_has_appid(CCloud_UserFile* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_ugcid(CCloud_UserFile* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_filename(CCloud_UserFile* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_timestamp(CCloud_UserFile* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_file_size(CCloud_UserFile* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_url(CCloud_UserFile* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_steamid_creator(CCloud_UserFile* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_flags(CCloud_UserFile* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCloud_UserFile::kAppidFieldNumber;
const int CCloud_UserFile::kUgcidFieldNumber;
const int CCloud_UserFile::kFilenameFieldNumber;
const int CCloud_UserFile::kTimestampFieldNumber;
const int CCloud_UserFile::kFileSizeFieldNumber;
const int CCloud_UserFile::kUrlFieldNumber;
const int CCloud_UserFile::kSteamidCreatorFieldNumber;
const int CCloud_UserFile::kFlagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_UserFile::CCloud_UserFile()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCloud_UserFile)
}
CCloud_UserFile::CCloud_UserFile(const CCloud_UserFile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_filename()) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  ::memcpy(&ugcid_, &from.ugcid_,
    static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&ugcid_)) + sizeof(flags_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCloud_UserFile)
}

void CCloud_UserFile::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CCloud_UserFile_steammessages_5fcloud_2esteamclient_2eproto.base);
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ugcid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&ugcid_)) + sizeof(flags_));
}

CCloud_UserFile::~CCloud_UserFile() {
  // @@protoc_insertion_point(destructor:proto.steam.CCloud_UserFile)
  SharedDtor();
}

void CCloud_UserFile::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CCloud_UserFile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCloud_UserFile& CCloud_UserFile::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CCloud_UserFile_steammessages_5fcloud_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CCloud_UserFile::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCloud_UserFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      filename_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      url_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&ugcid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&flags_) -
        reinterpret_cast<char*>(&ugcid_)) + sizeof(flags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CCloud_UserFile::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CCloud_UserFile*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 ugcid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_ugcid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string filename = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CCloud_UserFile.filename");
        object = msg->mutable_filename();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint64 timestamp = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 file_size = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_file_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string url = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CCloud_UserFile.url");
        object = msg->mutable_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional fixed64 steamid_creator = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 57) goto handle_unusual;
        msg->set_steamid_creator(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 flags = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_flags(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CCloud_UserFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCloud_UserFile)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 ugcid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_ugcid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ugcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string filename = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), static_cast<int>(this->filename().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCloud_UserFile.filename");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 timestamp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_timestamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 file_size = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_file_size(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCloud_UserFile.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steamid_creator = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (57 & 0xFF)) {
          HasBitSetters::set_has_steamid_creator(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_creator_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 flags = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_flags(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCloud_UserFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCloud_UserFile)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CCloud_UserFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCloud_UserFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint64 ugcid = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->ugcid(), output);
  }

  // optional string filename = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_UserFile.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->filename(), output);
  }

  // optional uint64 timestamp = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->timestamp(), output);
  }

  // optional uint32 file_size = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->file_size(), output);
  }

  // optional string url = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_UserFile.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->url(), output);
  }

  // optional fixed64 steamid_creator = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->steamid_creator(), output);
  }

  // optional uint32 flags = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->flags(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCloud_UserFile)
}

::google::protobuf::uint8* CCloud_UserFile::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCloud_UserFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint64 ugcid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->ugcid(), target);
  }

  // optional string filename = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_UserFile.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->filename(), target);
  }

  // optional uint64 timestamp = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->timestamp(), target);
  }

  // optional uint32 file_size = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->file_size(), target);
  }

  // optional string url = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_UserFile.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->url(), target);
  }

  // optional fixed64 steamid_creator = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(7, this->steamid_creator(), target);
  }

  // optional uint32 flags = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->flags(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCloud_UserFile)
  return target;
}

size_t CCloud_UserFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCloud_UserFile)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string filename = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional string url = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional uint64 ugcid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ugcid());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional uint32 file_size = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->file_size());
    }

    // optional uint64 timestamp = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // optional fixed64 steamid_creator = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional uint32 flags = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCloud_UserFile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCloud_UserFile)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_UserFile* source =
      ::google::protobuf::DynamicCastToGenerated<CCloud_UserFile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCloud_UserFile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCloud_UserFile)
    MergeFrom(*source);
  }
}

void CCloud_UserFile::MergeFrom(const CCloud_UserFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCloud_UserFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000004u) {
      ugcid_ = from.ugcid_;
    }
    if (cached_has_bits & 0x00000008u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000010u) {
      file_size_ = from.file_size_;
    }
    if (cached_has_bits & 0x00000020u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000040u) {
      steamid_creator_ = from.steamid_creator_;
    }
    if (cached_has_bits & 0x00000080u) {
      flags_ = from.flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCloud_UserFile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCloud_UserFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_UserFile::CopyFrom(const CCloud_UserFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCloud_UserFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_UserFile::IsInitialized() const {
  return true;
}

void CCloud_UserFile::Swap(CCloud_UserFile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_UserFile::InternalSwap(CCloud_UserFile* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  filename_.Swap(&other->filename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  url_.Swap(&other->url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ugcid_, other->ugcid_);
  swap(appid_, other->appid_);
  swap(file_size_, other->file_size_);
  swap(timestamp_, other->timestamp_);
  swap(steamid_creator_, other->steamid_creator_);
  swap(flags_, other->flags_);
}

::google::protobuf::Metadata CCloud_UserFile::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fcloud_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CCloud_GetFileDetails_Response::InitAsDefaultInstance() {
  ::proto::steam::_CCloud_GetFileDetails_Response_default_instance_._instance.get_mutable()->details_ = const_cast< ::proto::steam::CCloud_UserFile*>(
      ::proto::steam::CCloud_UserFile::internal_default_instance());
}
class CCloud_GetFileDetails_Response::HasBitSetters {
 public:
  static const ::proto::steam::CCloud_UserFile& details(const CCloud_GetFileDetails_Response* msg);
  static void set_has_details(CCloud_GetFileDetails_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::proto::steam::CCloud_UserFile&
CCloud_GetFileDetails_Response::HasBitSetters::details(const CCloud_GetFileDetails_Response* msg) {
  return *msg->details_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCloud_GetFileDetails_Response::kDetailsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_GetFileDetails_Response::CCloud_GetFileDetails_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCloud_GetFileDetails_Response)
}
CCloud_GetFileDetails_Response::CCloud_GetFileDetails_Response(const CCloud_GetFileDetails_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_details()) {
    details_ = new ::proto::steam::CCloud_UserFile(*from.details_);
  } else {
    details_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCloud_GetFileDetails_Response)
}

void CCloud_GetFileDetails_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CCloud_GetFileDetails_Response_steammessages_5fcloud_2esteamclient_2eproto.base);
  details_ = nullptr;
}

CCloud_GetFileDetails_Response::~CCloud_GetFileDetails_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CCloud_GetFileDetails_Response)
  SharedDtor();
}

void CCloud_GetFileDetails_Response::SharedDtor() {
  if (this != internal_default_instance()) delete details_;
}

void CCloud_GetFileDetails_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCloud_GetFileDetails_Response& CCloud_GetFileDetails_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CCloud_GetFileDetails_Response_steammessages_5fcloud_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CCloud_GetFileDetails_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCloud_GetFileDetails_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(details_ != nullptr);
    details_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CCloud_GetFileDetails_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CCloud_GetFileDetails_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.steam.CCloud_UserFile details = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::steam::CCloud_UserFile::_InternalParse;
        object = msg->mutable_details();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CCloud_GetFileDetails_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCloud_GetFileDetails_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.steam.CCloud_UserFile details = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_details()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCloud_GetFileDetails_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCloud_GetFileDetails_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CCloud_GetFileDetails_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCloud_GetFileDetails_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.CCloud_UserFile details = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::details(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCloud_GetFileDetails_Response)
}

::google::protobuf::uint8* CCloud_GetFileDetails_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCloud_GetFileDetails_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.CCloud_UserFile details = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::details(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCloud_GetFileDetails_Response)
  return target;
}

size_t CCloud_GetFileDetails_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCloud_GetFileDetails_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto.steam.CCloud_UserFile details = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *details_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCloud_GetFileDetails_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCloud_GetFileDetails_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_GetFileDetails_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CCloud_GetFileDetails_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCloud_GetFileDetails_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCloud_GetFileDetails_Response)
    MergeFrom(*source);
  }
}

void CCloud_GetFileDetails_Response::MergeFrom(const CCloud_GetFileDetails_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCloud_GetFileDetails_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_details()) {
    mutable_details()->::proto::steam::CCloud_UserFile::MergeFrom(from.details());
  }
}

void CCloud_GetFileDetails_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCloud_GetFileDetails_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_GetFileDetails_Response::CopyFrom(const CCloud_GetFileDetails_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCloud_GetFileDetails_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_GetFileDetails_Response::IsInitialized() const {
  return true;
}

void CCloud_GetFileDetails_Response::Swap(CCloud_GetFileDetails_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_GetFileDetails_Response::InternalSwap(CCloud_GetFileDetails_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(details_, other->details_);
}

::google::protobuf::Metadata CCloud_GetFileDetails_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fcloud_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CCloud_EnumerateUserFiles_Request::InitAsDefaultInstance() {
}
class CCloud_EnumerateUserFiles_Request::HasBitSetters {
 public:
  static void set_has_appid(CCloud_EnumerateUserFiles_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_extended_details(CCloud_EnumerateUserFiles_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_count(CCloud_EnumerateUserFiles_Request* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_start_index(CCloud_EnumerateUserFiles_Request* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCloud_EnumerateUserFiles_Request::kAppidFieldNumber;
const int CCloud_EnumerateUserFiles_Request::kExtendedDetailsFieldNumber;
const int CCloud_EnumerateUserFiles_Request::kCountFieldNumber;
const int CCloud_EnumerateUserFiles_Request::kStartIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_EnumerateUserFiles_Request::CCloud_EnumerateUserFiles_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCloud_EnumerateUserFiles_Request)
}
CCloud_EnumerateUserFiles_Request::CCloud_EnumerateUserFiles_Request(const CCloud_EnumerateUserFiles_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&start_index_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(start_index_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCloud_EnumerateUserFiles_Request)
}

void CCloud_EnumerateUserFiles_Request::SharedCtor() {
  ::memset(&appid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&start_index_) -
      reinterpret_cast<char*>(&appid_)) + sizeof(start_index_));
}

CCloud_EnumerateUserFiles_Request::~CCloud_EnumerateUserFiles_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CCloud_EnumerateUserFiles_Request)
  SharedDtor();
}

void CCloud_EnumerateUserFiles_Request::SharedDtor() {
}

void CCloud_EnumerateUserFiles_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCloud_EnumerateUserFiles_Request& CCloud_EnumerateUserFiles_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CCloud_EnumerateUserFiles_Request_steammessages_5fcloud_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CCloud_EnumerateUserFiles_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCloud_EnumerateUserFiles_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&start_index_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(start_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CCloud_EnumerateUserFiles_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CCloud_EnumerateUserFiles_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1 [(.proto.steam.description) = "App ID to enumerate the files of."];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool extended_details = 2 [(.proto.steam.description) = "(Optional) Get extended details back on the files found. Defaults to only returned the app Id and UGC Id of the files found."];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_extended_details(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 count = 3 [(.proto.steam.description) = "(Optional) Maximum number of results to return on this call. Defaults to a maximum of 500 files returned."];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 start_index = 4 [(.proto.steam.description) = "(Optional) Starting index to begin enumeration at. Defaults to the beginning of the list."];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_start_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CCloud_EnumerateUserFiles_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCloud_EnumerateUserFiles_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1 [(.proto.steam.description) = "App ID to enumerate the files of."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool extended_details = 2 [(.proto.steam.description) = "(Optional) Get extended details back on the files found. Defaults to only returned the app Id and UGC Id of the files found."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_extended_details(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &extended_details_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 count = 3 [(.proto.steam.description) = "(Optional) Maximum number of results to return on this call. Defaults to a maximum of 500 files returned."];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_count(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 start_index = 4 [(.proto.steam.description) = "(Optional) Starting index to begin enumeration at. Defaults to the beginning of the list."];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_start_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCloud_EnumerateUserFiles_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCloud_EnumerateUserFiles_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CCloud_EnumerateUserFiles_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCloud_EnumerateUserFiles_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.proto.steam.description) = "App ID to enumerate the files of."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional bool extended_details = 2 [(.proto.steam.description) = "(Optional) Get extended details back on the files found. Defaults to only returned the app Id and UGC Id of the files found."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->extended_details(), output);
  }

  // optional uint32 count = 3 [(.proto.steam.description) = "(Optional) Maximum number of results to return on this call. Defaults to a maximum of 500 files returned."];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }

  // optional uint32 start_index = 4 [(.proto.steam.description) = "(Optional) Starting index to begin enumeration at. Defaults to the beginning of the list."];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->start_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCloud_EnumerateUserFiles_Request)
}

::google::protobuf::uint8* CCloud_EnumerateUserFiles_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCloud_EnumerateUserFiles_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.proto.steam.description) = "App ID to enumerate the files of."];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional bool extended_details = 2 [(.proto.steam.description) = "(Optional) Get extended details back on the files found. Defaults to only returned the app Id and UGC Id of the files found."];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->extended_details(), target);
  }

  // optional uint32 count = 3 [(.proto.steam.description) = "(Optional) Maximum number of results to return on this call. Defaults to a maximum of 500 files returned."];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }

  // optional uint32 start_index = 4 [(.proto.steam.description) = "(Optional) Starting index to begin enumeration at. Defaults to the beginning of the list."];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->start_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCloud_EnumerateUserFiles_Request)
  return target;
}

size_t CCloud_EnumerateUserFiles_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCloud_EnumerateUserFiles_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 appid = 1 [(.proto.steam.description) = "App ID to enumerate the files of."];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional bool extended_details = 2 [(.proto.steam.description) = "(Optional) Get extended details back on the files found. Defaults to only returned the app Id and UGC Id of the files found."];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional uint32 count = 3 [(.proto.steam.description) = "(Optional) Maximum number of results to return on this call. Defaults to a maximum of 500 files returned."];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional uint32 start_index = 4 [(.proto.steam.description) = "(Optional) Starting index to begin enumeration at. Defaults to the beginning of the list."];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCloud_EnumerateUserFiles_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCloud_EnumerateUserFiles_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_EnumerateUserFiles_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CCloud_EnumerateUserFiles_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCloud_EnumerateUserFiles_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCloud_EnumerateUserFiles_Request)
    MergeFrom(*source);
  }
}

void CCloud_EnumerateUserFiles_Request::MergeFrom(const CCloud_EnumerateUserFiles_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCloud_EnumerateUserFiles_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      extended_details_ = from.extended_details_;
    }
    if (cached_has_bits & 0x00000004u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000008u) {
      start_index_ = from.start_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCloud_EnumerateUserFiles_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCloud_EnumerateUserFiles_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_EnumerateUserFiles_Request::CopyFrom(const CCloud_EnumerateUserFiles_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCloud_EnumerateUserFiles_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_EnumerateUserFiles_Request::IsInitialized() const {
  return true;
}

void CCloud_EnumerateUserFiles_Request::Swap(CCloud_EnumerateUserFiles_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_EnumerateUserFiles_Request::InternalSwap(CCloud_EnumerateUserFiles_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(appid_, other->appid_);
  swap(extended_details_, other->extended_details_);
  swap(count_, other->count_);
  swap(start_index_, other->start_index_);
}

::google::protobuf::Metadata CCloud_EnumerateUserFiles_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fcloud_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CCloud_EnumerateUserFiles_Response::InitAsDefaultInstance() {
}
class CCloud_EnumerateUserFiles_Response::HasBitSetters {
 public:
  static void set_has_total_files(CCloud_EnumerateUserFiles_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCloud_EnumerateUserFiles_Response::kFilesFieldNumber;
const int CCloud_EnumerateUserFiles_Response::kTotalFilesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_EnumerateUserFiles_Response::CCloud_EnumerateUserFiles_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCloud_EnumerateUserFiles_Response)
}
CCloud_EnumerateUserFiles_Response::CCloud_EnumerateUserFiles_Response(const CCloud_EnumerateUserFiles_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      files_(from.files_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  total_files_ = from.total_files_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCloud_EnumerateUserFiles_Response)
}

void CCloud_EnumerateUserFiles_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CCloud_EnumerateUserFiles_Response_steammessages_5fcloud_2esteamclient_2eproto.base);
  total_files_ = 0u;
}

CCloud_EnumerateUserFiles_Response::~CCloud_EnumerateUserFiles_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CCloud_EnumerateUserFiles_Response)
  SharedDtor();
}

void CCloud_EnumerateUserFiles_Response::SharedDtor() {
}

void CCloud_EnumerateUserFiles_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCloud_EnumerateUserFiles_Response& CCloud_EnumerateUserFiles_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CCloud_EnumerateUserFiles_Response_steammessages_5fcloud_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CCloud_EnumerateUserFiles_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCloud_EnumerateUserFiles_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  files_.Clear();
  total_files_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CCloud_EnumerateUserFiles_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CCloud_EnumerateUserFiles_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.steam.CCloud_UserFile files = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CCloud_UserFile::_InternalParse;
          object = msg->add_files();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // optional uint32 total_files = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_total_files(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CCloud_EnumerateUserFiles_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCloud_EnumerateUserFiles_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CCloud_UserFile files = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_files()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 total_files = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_total_files(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_files_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCloud_EnumerateUserFiles_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCloud_EnumerateUserFiles_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CCloud_EnumerateUserFiles_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCloud_EnumerateUserFiles_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CCloud_UserFile files = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->files_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->files(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 total_files = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->total_files(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCloud_EnumerateUserFiles_Response)
}

::google::protobuf::uint8* CCloud_EnumerateUserFiles_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCloud_EnumerateUserFiles_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CCloud_UserFile files = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->files_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->files(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 total_files = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->total_files(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCloud_EnumerateUserFiles_Response)
  return target;
}

size_t CCloud_EnumerateUserFiles_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCloud_EnumerateUserFiles_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CCloud_UserFile files = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->files_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->files(static_cast<int>(i)));
    }
  }

  // optional uint32 total_files = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->total_files());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCloud_EnumerateUserFiles_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCloud_EnumerateUserFiles_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_EnumerateUserFiles_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CCloud_EnumerateUserFiles_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCloud_EnumerateUserFiles_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCloud_EnumerateUserFiles_Response)
    MergeFrom(*source);
  }
}

void CCloud_EnumerateUserFiles_Response::MergeFrom(const CCloud_EnumerateUserFiles_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCloud_EnumerateUserFiles_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  files_.MergeFrom(from.files_);
  if (from.has_total_files()) {
    set_total_files(from.total_files());
  }
}

void CCloud_EnumerateUserFiles_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCloud_EnumerateUserFiles_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_EnumerateUserFiles_Response::CopyFrom(const CCloud_EnumerateUserFiles_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCloud_EnumerateUserFiles_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_EnumerateUserFiles_Response::IsInitialized() const {
  return true;
}

void CCloud_EnumerateUserFiles_Response::Swap(CCloud_EnumerateUserFiles_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_EnumerateUserFiles_Response::InternalSwap(CCloud_EnumerateUserFiles_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&files_)->InternalSwap(CastToBase(&other->files_));
  swap(total_files_, other->total_files_);
}

::google::protobuf::Metadata CCloud_EnumerateUserFiles_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fcloud_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CCloud_Delete_Request::InitAsDefaultInstance() {
}
class CCloud_Delete_Request::HasBitSetters {
 public:
  static void set_has_filename(CCloud_Delete_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_appid(CCloud_Delete_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCloud_Delete_Request::kFilenameFieldNumber;
const int CCloud_Delete_Request::kAppidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_Delete_Request::CCloud_Delete_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCloud_Delete_Request)
}
CCloud_Delete_Request::CCloud_Delete_Request(const CCloud_Delete_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_filename()) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCloud_Delete_Request)
}

void CCloud_Delete_Request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CCloud_Delete_Request_steammessages_5fcloud_2esteamclient_2eproto.base);
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appid_ = 0u;
}

CCloud_Delete_Request::~CCloud_Delete_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CCloud_Delete_Request)
  SharedDtor();
}

void CCloud_Delete_Request::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CCloud_Delete_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCloud_Delete_Request& CCloud_Delete_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CCloud_Delete_Request_steammessages_5fcloud_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CCloud_Delete_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCloud_Delete_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    filename_.ClearNonDefaultToEmptyNoArena();
  }
  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CCloud_Delete_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CCloud_Delete_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string filename = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CCloud_Delete_Request.filename");
        object = msg->mutable_filename();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 appid = 2 [(.proto.steam.description) = "App ID the file belongs to."];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CCloud_Delete_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCloud_Delete_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string filename = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), static_cast<int>(this->filename().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCloud_Delete_Request.filename");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 appid = 2 [(.proto.steam.description) = "App ID the file belongs to."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCloud_Delete_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCloud_Delete_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CCloud_Delete_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCloud_Delete_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string filename = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_Delete_Request.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filename(), output);
  }

  // optional uint32 appid = 2 [(.proto.steam.description) = "App ID the file belongs to."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->appid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCloud_Delete_Request)
}

::google::protobuf::uint8* CCloud_Delete_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCloud_Delete_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string filename = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_Delete_Request.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  // optional uint32 appid = 2 [(.proto.steam.description) = "App ID the file belongs to."];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->appid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCloud_Delete_Request)
  return target;
}

size_t CCloud_Delete_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCloud_Delete_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string filename = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional uint32 appid = 2 [(.proto.steam.description) = "App ID the file belongs to."];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCloud_Delete_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCloud_Delete_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_Delete_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CCloud_Delete_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCloud_Delete_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCloud_Delete_Request)
    MergeFrom(*source);
  }
}

void CCloud_Delete_Request::MergeFrom(const CCloud_Delete_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCloud_Delete_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCloud_Delete_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCloud_Delete_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_Delete_Request::CopyFrom(const CCloud_Delete_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCloud_Delete_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_Delete_Request::IsInitialized() const {
  return true;
}

void CCloud_Delete_Request::Swap(CCloud_Delete_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_Delete_Request::InternalSwap(CCloud_Delete_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  filename_.Swap(&other->filename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(appid_, other->appid_);
}

::google::protobuf::Metadata CCloud_Delete_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fcloud_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CCloud_Delete_Response::InitAsDefaultInstance() {
}
class CCloud_Delete_Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_Delete_Response::CCloud_Delete_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCloud_Delete_Response)
}
CCloud_Delete_Response::CCloud_Delete_Response(const CCloud_Delete_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCloud_Delete_Response)
}

void CCloud_Delete_Response::SharedCtor() {
}

CCloud_Delete_Response::~CCloud_Delete_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CCloud_Delete_Response)
  SharedDtor();
}

void CCloud_Delete_Response::SharedDtor() {
}

void CCloud_Delete_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCloud_Delete_Response& CCloud_Delete_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CCloud_Delete_Response_steammessages_5fcloud_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CCloud_Delete_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCloud_Delete_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CCloud_Delete_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CCloud_Delete_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CCloud_Delete_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCloud_Delete_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCloud_Delete_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCloud_Delete_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CCloud_Delete_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCloud_Delete_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCloud_Delete_Response)
}

::google::protobuf::uint8* CCloud_Delete_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCloud_Delete_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCloud_Delete_Response)
  return target;
}

size_t CCloud_Delete_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCloud_Delete_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCloud_Delete_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCloud_Delete_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_Delete_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CCloud_Delete_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCloud_Delete_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCloud_Delete_Response)
    MergeFrom(*source);
  }
}

void CCloud_Delete_Response::MergeFrom(const CCloud_Delete_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCloud_Delete_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CCloud_Delete_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCloud_Delete_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_Delete_Response::CopyFrom(const CCloud_Delete_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCloud_Delete_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_Delete_Response::IsInitialized() const {
  return true;
}

void CCloud_Delete_Response::Swap(CCloud_Delete_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_Delete_Response::InternalSwap(CCloud_Delete_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CCloud_Delete_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fcloud_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CCloud_GetClientEncryptionKey_Request::InitAsDefaultInstance() {
}
class CCloud_GetClientEncryptionKey_Request::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_GetClientEncryptionKey_Request::CCloud_GetClientEncryptionKey_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCloud_GetClientEncryptionKey_Request)
}
CCloud_GetClientEncryptionKey_Request::CCloud_GetClientEncryptionKey_Request(const CCloud_GetClientEncryptionKey_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCloud_GetClientEncryptionKey_Request)
}

void CCloud_GetClientEncryptionKey_Request::SharedCtor() {
}

CCloud_GetClientEncryptionKey_Request::~CCloud_GetClientEncryptionKey_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CCloud_GetClientEncryptionKey_Request)
  SharedDtor();
}

void CCloud_GetClientEncryptionKey_Request::SharedDtor() {
}

void CCloud_GetClientEncryptionKey_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCloud_GetClientEncryptionKey_Request& CCloud_GetClientEncryptionKey_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CCloud_GetClientEncryptionKey_Request_steammessages_5fcloud_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CCloud_GetClientEncryptionKey_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCloud_GetClientEncryptionKey_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CCloud_GetClientEncryptionKey_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CCloud_GetClientEncryptionKey_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CCloud_GetClientEncryptionKey_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCloud_GetClientEncryptionKey_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCloud_GetClientEncryptionKey_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCloud_GetClientEncryptionKey_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CCloud_GetClientEncryptionKey_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCloud_GetClientEncryptionKey_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCloud_GetClientEncryptionKey_Request)
}

::google::protobuf::uint8* CCloud_GetClientEncryptionKey_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCloud_GetClientEncryptionKey_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCloud_GetClientEncryptionKey_Request)
  return target;
}

size_t CCloud_GetClientEncryptionKey_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCloud_GetClientEncryptionKey_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCloud_GetClientEncryptionKey_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCloud_GetClientEncryptionKey_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_GetClientEncryptionKey_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CCloud_GetClientEncryptionKey_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCloud_GetClientEncryptionKey_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCloud_GetClientEncryptionKey_Request)
    MergeFrom(*source);
  }
}

void CCloud_GetClientEncryptionKey_Request::MergeFrom(const CCloud_GetClientEncryptionKey_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCloud_GetClientEncryptionKey_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CCloud_GetClientEncryptionKey_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCloud_GetClientEncryptionKey_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_GetClientEncryptionKey_Request::CopyFrom(const CCloud_GetClientEncryptionKey_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCloud_GetClientEncryptionKey_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_GetClientEncryptionKey_Request::IsInitialized() const {
  return true;
}

void CCloud_GetClientEncryptionKey_Request::Swap(CCloud_GetClientEncryptionKey_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_GetClientEncryptionKey_Request::InternalSwap(CCloud_GetClientEncryptionKey_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CCloud_GetClientEncryptionKey_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fcloud_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CCloud_GetClientEncryptionKey_Response::InitAsDefaultInstance() {
}
class CCloud_GetClientEncryptionKey_Response::HasBitSetters {
 public:
  static void set_has_key(CCloud_GetClientEncryptionKey_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_crc(CCloud_GetClientEncryptionKey_Response* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCloud_GetClientEncryptionKey_Response::kKeyFieldNumber;
const int CCloud_GetClientEncryptionKey_Response::kCrcFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_GetClientEncryptionKey_Response::CCloud_GetClientEncryptionKey_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCloud_GetClientEncryptionKey_Response)
}
CCloud_GetClientEncryptionKey_Response::CCloud_GetClientEncryptionKey_Response(const CCloud_GetClientEncryptionKey_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  crc_ = from.crc_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCloud_GetClientEncryptionKey_Response)
}

void CCloud_GetClientEncryptionKey_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CCloud_GetClientEncryptionKey_Response_steammessages_5fcloud_2esteamclient_2eproto.base);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  crc_ = 0;
}

CCloud_GetClientEncryptionKey_Response::~CCloud_GetClientEncryptionKey_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CCloud_GetClientEncryptionKey_Response)
  SharedDtor();
}

void CCloud_GetClientEncryptionKey_Response::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CCloud_GetClientEncryptionKey_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCloud_GetClientEncryptionKey_Response& CCloud_GetClientEncryptionKey_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CCloud_GetClientEncryptionKey_Response_steammessages_5fcloud_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CCloud_GetClientEncryptionKey_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCloud_GetClientEncryptionKey_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    key_.ClearNonDefaultToEmptyNoArena();
  }
  crc_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CCloud_GetClientEncryptionKey_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CCloud_GetClientEncryptionKey_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bytes key = 1 [(.proto.steam.description) = "AES-256 encryption key"];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional int32 crc = 2 [(.proto.steam.description) = "CRC of key"];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_crc(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CCloud_GetClientEncryptionKey_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCloud_GetClientEncryptionKey_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes key = 1 [(.proto.steam.description) = "AES-256 encryption key"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 crc = 2 [(.proto.steam.description) = "CRC of key"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_crc(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &crc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCloud_GetClientEncryptionKey_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCloud_GetClientEncryptionKey_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CCloud_GetClientEncryptionKey_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCloud_GetClientEncryptionKey_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes key = 1 [(.proto.steam.description) = "AES-256 encryption key"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // optional int32 crc = 2 [(.proto.steam.description) = "CRC of key"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->crc(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCloud_GetClientEncryptionKey_Response)
}

::google::protobuf::uint8* CCloud_GetClientEncryptionKey_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCloud_GetClientEncryptionKey_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes key = 1 [(.proto.steam.description) = "AES-256 encryption key"];
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // optional int32 crc = 2 [(.proto.steam.description) = "CRC of key"];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->crc(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCloud_GetClientEncryptionKey_Response)
  return target;
}

size_t CCloud_GetClientEncryptionKey_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCloud_GetClientEncryptionKey_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes key = 1 [(.proto.steam.description) = "AES-256 encryption key"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional int32 crc = 2 [(.proto.steam.description) = "CRC of key"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->crc());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCloud_GetClientEncryptionKey_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCloud_GetClientEncryptionKey_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_GetClientEncryptionKey_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CCloud_GetClientEncryptionKey_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCloud_GetClientEncryptionKey_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCloud_GetClientEncryptionKey_Response)
    MergeFrom(*source);
  }
}

void CCloud_GetClientEncryptionKey_Response::MergeFrom(const CCloud_GetClientEncryptionKey_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCloud_GetClientEncryptionKey_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      crc_ = from.crc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCloud_GetClientEncryptionKey_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCloud_GetClientEncryptionKey_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_GetClientEncryptionKey_Response::CopyFrom(const CCloud_GetClientEncryptionKey_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCloud_GetClientEncryptionKey_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_GetClientEncryptionKey_Response::IsInitialized() const {
  return true;
}

void CCloud_GetClientEncryptionKey_Response::Swap(CCloud_GetClientEncryptionKey_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_GetClientEncryptionKey_Response::InternalSwap(CCloud_GetClientEncryptionKey_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(crc_, other->crc_);
}

::google::protobuf::Metadata CCloud_GetClientEncryptionKey_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fcloud_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CCloud_CDNReport_Notification::InitAsDefaultInstance() {
}
class CCloud_CDNReport_Notification::HasBitSetters {
 public:
  static void set_has_steamid(CCloud_CDNReport_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_url(CCloud_CDNReport_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_success(CCloud_CDNReport_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_http_status_code(CCloud_CDNReport_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_expected_bytes(CCloud_CDNReport_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_received_bytes(CCloud_CDNReport_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_duration(CCloud_CDNReport_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCloud_CDNReport_Notification::kSteamidFieldNumber;
const int CCloud_CDNReport_Notification::kUrlFieldNumber;
const int CCloud_CDNReport_Notification::kSuccessFieldNumber;
const int CCloud_CDNReport_Notification::kHttpStatusCodeFieldNumber;
const int CCloud_CDNReport_Notification::kExpectedBytesFieldNumber;
const int CCloud_CDNReport_Notification::kReceivedBytesFieldNumber;
const int CCloud_CDNReport_Notification::kDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_CDNReport_Notification::CCloud_CDNReport_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCloud_CDNReport_Notification)
}
CCloud_CDNReport_Notification::CCloud_CDNReport_Notification(const CCloud_CDNReport_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCloud_CDNReport_Notification)
}

void CCloud_CDNReport_Notification::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CCloud_CDNReport_Notification_steammessages_5fcloud_2esteamclient_2eproto.base);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&steamid_)) + sizeof(duration_));
}

CCloud_CDNReport_Notification::~CCloud_CDNReport_Notification() {
  // @@protoc_insertion_point(destructor:proto.steam.CCloud_CDNReport_Notification)
  SharedDtor();
}

void CCloud_CDNReport_Notification::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CCloud_CDNReport_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCloud_CDNReport_Notification& CCloud_CDNReport_Notification::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CCloud_CDNReport_Notification_steammessages_5fcloud_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CCloud_CDNReport_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCloud_CDNReport_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    url_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&duration_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(duration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CCloud_CDNReport_Notification::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CCloud_CDNReport_Notification*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional string url = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CCloud_CDNReport_Notification.url");
        object = msg->mutable_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool success = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_success(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 http_status_code = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_http_status_code(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 expected_bytes = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_expected_bytes(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 received_bytes = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_received_bytes(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 duration = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_duration(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CCloud_CDNReport_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCloud_CDNReport_Notification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCloud_CDNReport_Notification.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool success = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_success(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 http_status_code = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_http_status_code(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &http_status_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 expected_bytes = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_expected_bytes(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &expected_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 received_bytes = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_received_bytes(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &received_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 duration = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_duration(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCloud_CDNReport_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCloud_CDNReport_Notification)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CCloud_CDNReport_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCloud_CDNReport_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_CDNReport_Notification.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  // optional bool success = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->success(), output);
  }

  // optional uint32 http_status_code = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->http_status_code(), output);
  }

  // optional uint64 expected_bytes = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->expected_bytes(), output);
  }

  // optional uint64 received_bytes = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->received_bytes(), output);
  }

  // optional uint32 duration = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->duration(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCloud_CDNReport_Notification)
}

::google::protobuf::uint8* CCloud_CDNReport_Notification::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCloud_CDNReport_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_CDNReport_Notification.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  // optional bool success = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->success(), target);
  }

  // optional uint32 http_status_code = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->http_status_code(), target);
  }

  // optional uint64 expected_bytes = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->expected_bytes(), target);
  }

  // optional uint64 received_bytes = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->received_bytes(), target);
  }

  // optional uint32 duration = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->duration(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCloud_CDNReport_Notification)
  return target;
}

size_t CCloud_CDNReport_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCloud_CDNReport_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string url = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional bool success = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional uint32 http_status_code = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->http_status_code());
    }

    // optional uint64 expected_bytes = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->expected_bytes());
    }

    // optional uint64 received_bytes = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->received_bytes());
    }

    // optional uint32 duration = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duration());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCloud_CDNReport_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCloud_CDNReport_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_CDNReport_Notification* source =
      ::google::protobuf::DynamicCastToGenerated<CCloud_CDNReport_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCloud_CDNReport_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCloud_CDNReport_Notification)
    MergeFrom(*source);
  }
}

void CCloud_CDNReport_Notification::MergeFrom(const CCloud_CDNReport_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCloud_CDNReport_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      success_ = from.success_;
    }
    if (cached_has_bits & 0x00000008u) {
      http_status_code_ = from.http_status_code_;
    }
    if (cached_has_bits & 0x00000010u) {
      expected_bytes_ = from.expected_bytes_;
    }
    if (cached_has_bits & 0x00000020u) {
      received_bytes_ = from.received_bytes_;
    }
    if (cached_has_bits & 0x00000040u) {
      duration_ = from.duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCloud_CDNReport_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCloud_CDNReport_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_CDNReport_Notification::CopyFrom(const CCloud_CDNReport_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCloud_CDNReport_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_CDNReport_Notification::IsInitialized() const {
  return true;
}

void CCloud_CDNReport_Notification::Swap(CCloud_CDNReport_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_CDNReport_Notification::InternalSwap(CCloud_CDNReport_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  url_.Swap(&other->url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(steamid_, other->steamid_);
  swap(success_, other->success_);
  swap(http_status_code_, other->http_status_code_);
  swap(expected_bytes_, other->expected_bytes_);
  swap(received_bytes_, other->received_bytes_);
  swap(duration_, other->duration_);
}

::google::protobuf::Metadata CCloud_CDNReport_Notification::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fcloud_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CCloud_ExternalStorageTransferReport_Notification::InitAsDefaultInstance() {
}
class CCloud_ExternalStorageTransferReport_Notification::HasBitSetters {
 public:
  static void set_has_host(CCloud_ExternalStorageTransferReport_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_path(CCloud_ExternalStorageTransferReport_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_is_upload(CCloud_ExternalStorageTransferReport_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_success(CCloud_ExternalStorageTransferReport_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_http_status_code(CCloud_ExternalStorageTransferReport_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_bytes_expected(CCloud_ExternalStorageTransferReport_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_bytes_actual(CCloud_ExternalStorageTransferReport_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_duration_ms(CCloud_ExternalStorageTransferReport_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_cellid(CCloud_ExternalStorageTransferReport_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCloud_ExternalStorageTransferReport_Notification::kHostFieldNumber;
const int CCloud_ExternalStorageTransferReport_Notification::kPathFieldNumber;
const int CCloud_ExternalStorageTransferReport_Notification::kIsUploadFieldNumber;
const int CCloud_ExternalStorageTransferReport_Notification::kSuccessFieldNumber;
const int CCloud_ExternalStorageTransferReport_Notification::kHttpStatusCodeFieldNumber;
const int CCloud_ExternalStorageTransferReport_Notification::kBytesExpectedFieldNumber;
const int CCloud_ExternalStorageTransferReport_Notification::kBytesActualFieldNumber;
const int CCloud_ExternalStorageTransferReport_Notification::kDurationMsFieldNumber;
const int CCloud_ExternalStorageTransferReport_Notification::kCellidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_ExternalStorageTransferReport_Notification::CCloud_ExternalStorageTransferReport_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCloud_ExternalStorageTransferReport_Notification)
}
CCloud_ExternalStorageTransferReport_Notification::CCloud_ExternalStorageTransferReport_Notification(const CCloud_ExternalStorageTransferReport_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_host()) {
    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_path()) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  ::memcpy(&is_upload_, &from.is_upload_,
    static_cast<size_t>(reinterpret_cast<char*>(&cellid_) -
    reinterpret_cast<char*>(&is_upload_)) + sizeof(cellid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCloud_ExternalStorageTransferReport_Notification)
}

void CCloud_ExternalStorageTransferReport_Notification::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CCloud_ExternalStorageTransferReport_Notification_steammessages_5fcloud_2esteamclient_2eproto.base);
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&is_upload_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cellid_) -
      reinterpret_cast<char*>(&is_upload_)) + sizeof(cellid_));
}

CCloud_ExternalStorageTransferReport_Notification::~CCloud_ExternalStorageTransferReport_Notification() {
  // @@protoc_insertion_point(destructor:proto.steam.CCloud_ExternalStorageTransferReport_Notification)
  SharedDtor();
}

void CCloud_ExternalStorageTransferReport_Notification::SharedDtor() {
  host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CCloud_ExternalStorageTransferReport_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCloud_ExternalStorageTransferReport_Notification& CCloud_ExternalStorageTransferReport_Notification::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CCloud_ExternalStorageTransferReport_Notification_steammessages_5fcloud_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CCloud_ExternalStorageTransferReport_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCloud_ExternalStorageTransferReport_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      host_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      path_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&is_upload_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&duration_ms_) -
        reinterpret_cast<char*>(&is_upload_)) + sizeof(duration_ms_));
  }
  cellid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CCloud_ExternalStorageTransferReport_Notification::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CCloud_ExternalStorageTransferReport_Notification*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string host = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CCloud_ExternalStorageTransferReport_Notification.host");
        object = msg->mutable_host();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string path = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CCloud_ExternalStorageTransferReport_Notification.path");
        object = msg->mutable_path();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool is_upload = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_is_upload(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool success = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_success(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 http_status_code = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_http_status_code(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 bytes_expected = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_bytes_expected(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 bytes_actual = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_bytes_actual(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 duration_ms = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_duration_ms(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 cellid = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_cellid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CCloud_ExternalStorageTransferReport_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCloud_ExternalStorageTransferReport_Notification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string host = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->host().data(), static_cast<int>(this->host().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCloud_ExternalStorageTransferReport_Notification.host");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCloud_ExternalStorageTransferReport_Notification.path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_upload = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_is_upload(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_upload_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool success = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_success(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 http_status_code = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_http_status_code(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &http_status_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 bytes_expected = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_bytes_expected(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_expected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 bytes_actual = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_bytes_actual(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_actual_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 duration_ms = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_duration_ms(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cellid = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_cellid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cellid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCloud_ExternalStorageTransferReport_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCloud_ExternalStorageTransferReport_Notification)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CCloud_ExternalStorageTransferReport_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCloud_ExternalStorageTransferReport_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string host = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), static_cast<int>(this->host().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_ExternalStorageTransferReport_Notification.host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->host(), output);
  }

  // optional string path = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_ExternalStorageTransferReport_Notification.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->path(), output);
  }

  // optional bool is_upload = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_upload(), output);
  }

  // optional bool success = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->success(), output);
  }

  // optional uint32 http_status_code = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->http_status_code(), output);
  }

  // optional uint64 bytes_expected = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->bytes_expected(), output);
  }

  // optional uint64 bytes_actual = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->bytes_actual(), output);
  }

  // optional uint32 duration_ms = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->duration_ms(), output);
  }

  // optional uint32 cellid = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->cellid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCloud_ExternalStorageTransferReport_Notification)
}

::google::protobuf::uint8* CCloud_ExternalStorageTransferReport_Notification::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCloud_ExternalStorageTransferReport_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string host = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), static_cast<int>(this->host().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_ExternalStorageTransferReport_Notification.host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host(), target);
  }

  // optional string path = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_ExternalStorageTransferReport_Notification.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  // optional bool is_upload = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_upload(), target);
  }

  // optional bool success = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->success(), target);
  }

  // optional uint32 http_status_code = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->http_status_code(), target);
  }

  // optional uint64 bytes_expected = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->bytes_expected(), target);
  }

  // optional uint64 bytes_actual = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->bytes_actual(), target);
  }

  // optional uint32 duration_ms = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->duration_ms(), target);
  }

  // optional uint32 cellid = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->cellid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCloud_ExternalStorageTransferReport_Notification)
  return target;
}

size_t CCloud_ExternalStorageTransferReport_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCloud_ExternalStorageTransferReport_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string host = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }

    // optional string path = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // optional bool is_upload = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool success = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional uint32 http_status_code = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->http_status_code());
    }

    // optional uint64 bytes_expected = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bytes_expected());
    }

    // optional uint64 bytes_actual = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bytes_actual());
    }

    // optional uint32 duration_ms = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duration_ms());
    }

  }
  // optional uint32 cellid = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cellid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCloud_ExternalStorageTransferReport_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCloud_ExternalStorageTransferReport_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_ExternalStorageTransferReport_Notification* source =
      ::google::protobuf::DynamicCastToGenerated<CCloud_ExternalStorageTransferReport_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCloud_ExternalStorageTransferReport_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCloud_ExternalStorageTransferReport_Notification)
    MergeFrom(*source);
  }
}

void CCloud_ExternalStorageTransferReport_Notification::MergeFrom(const CCloud_ExternalStorageTransferReport_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCloud_ExternalStorageTransferReport_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
    }
    if (cached_has_bits & 0x00000004u) {
      is_upload_ = from.is_upload_;
    }
    if (cached_has_bits & 0x00000008u) {
      success_ = from.success_;
    }
    if (cached_has_bits & 0x00000010u) {
      http_status_code_ = from.http_status_code_;
    }
    if (cached_has_bits & 0x00000020u) {
      bytes_expected_ = from.bytes_expected_;
    }
    if (cached_has_bits & 0x00000040u) {
      bytes_actual_ = from.bytes_actual_;
    }
    if (cached_has_bits & 0x00000080u) {
      duration_ms_ = from.duration_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_cellid(from.cellid());
  }
}

void CCloud_ExternalStorageTransferReport_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCloud_ExternalStorageTransferReport_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_ExternalStorageTransferReport_Notification::CopyFrom(const CCloud_ExternalStorageTransferReport_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCloud_ExternalStorageTransferReport_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_ExternalStorageTransferReport_Notification::IsInitialized() const {
  return true;
}

void CCloud_ExternalStorageTransferReport_Notification::Swap(CCloud_ExternalStorageTransferReport_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_ExternalStorageTransferReport_Notification::InternalSwap(CCloud_ExternalStorageTransferReport_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  host_.Swap(&other->host_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  path_.Swap(&other->path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(is_upload_, other->is_upload_);
  swap(success_, other->success_);
  swap(http_status_code_, other->http_status_code_);
  swap(bytes_expected_, other->bytes_expected_);
  swap(bytes_actual_, other->bytes_actual_);
  swap(duration_ms_, other->duration_ms_);
  swap(cellid_, other->cellid_);
}

::google::protobuf::Metadata CCloud_ExternalStorageTransferReport_Notification::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fcloud_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CCloud_ClientBeginFileUpload_Request::InitAsDefaultInstance() {
}
class CCloud_ClientBeginFileUpload_Request::HasBitSetters {
 public:
  static void set_has_appid(CCloud_ClientBeginFileUpload_Request* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_file_size(CCloud_ClientBeginFileUpload_Request* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_raw_file_size(CCloud_ClientBeginFileUpload_Request* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_file_sha(CCloud_ClientBeginFileUpload_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_time_stamp(CCloud_ClientBeginFileUpload_Request* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_filename(CCloud_ClientBeginFileUpload_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_platforms_to_sync(CCloud_ClientBeginFileUpload_Request* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_cell_id(CCloud_ClientBeginFileUpload_Request* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_can_encrypt(CCloud_ClientBeginFileUpload_Request* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_is_shared_file(CCloud_ClientBeginFileUpload_Request* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCloud_ClientBeginFileUpload_Request::kAppidFieldNumber;
const int CCloud_ClientBeginFileUpload_Request::kFileSizeFieldNumber;
const int CCloud_ClientBeginFileUpload_Request::kRawFileSizeFieldNumber;
const int CCloud_ClientBeginFileUpload_Request::kFileShaFieldNumber;
const int CCloud_ClientBeginFileUpload_Request::kTimeStampFieldNumber;
const int CCloud_ClientBeginFileUpload_Request::kFilenameFieldNumber;
const int CCloud_ClientBeginFileUpload_Request::kPlatformsToSyncFieldNumber;
const int CCloud_ClientBeginFileUpload_Request::kCellIdFieldNumber;
const int CCloud_ClientBeginFileUpload_Request::kCanEncryptFieldNumber;
const int CCloud_ClientBeginFileUpload_Request::kIsSharedFileFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_ClientBeginFileUpload_Request::CCloud_ClientBeginFileUpload_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCloud_ClientBeginFileUpload_Request)
}
CCloud_ClientBeginFileUpload_Request::CCloud_ClientBeginFileUpload_Request(const CCloud_ClientBeginFileUpload_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_sha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_sha()) {
    file_sha_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_sha_);
  }
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_filename()) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&platforms_to_sync_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(platforms_to_sync_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCloud_ClientBeginFileUpload_Request)
}

void CCloud_ClientBeginFileUpload_Request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CCloud_ClientBeginFileUpload_Request_steammessages_5fcloud_2esteamclient_2eproto.base);
  file_sha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&appid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_shared_file_) -
      reinterpret_cast<char*>(&appid_)) + sizeof(is_shared_file_));
  platforms_to_sync_ = 4294967295u;
}

CCloud_ClientBeginFileUpload_Request::~CCloud_ClientBeginFileUpload_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CCloud_ClientBeginFileUpload_Request)
  SharedDtor();
}

void CCloud_ClientBeginFileUpload_Request::SharedDtor() {
  file_sha_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CCloud_ClientBeginFileUpload_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCloud_ClientBeginFileUpload_Request& CCloud_ClientBeginFileUpload_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CCloud_ClientBeginFileUpload_Request_steammessages_5fcloud_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CCloud_ClientBeginFileUpload_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCloud_ClientBeginFileUpload_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      file_sha_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      filename_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&can_encrypt_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(can_encrypt_));
  }
  if (cached_has_bits & 0x00000300u) {
    is_shared_file_ = false;
    platforms_to_sync_ = 4294967295u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CCloud_ClientBeginFileUpload_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CCloud_ClientBeginFileUpload_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1 [(.proto.steam.description) = "App ID for which the file is being uploaded."];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 file_size = 2 [(.proto.steam.description) = "file size as transmitted and stored in Cloud."];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_file_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 raw_file_size = 3 [(.proto.steam.description) = "file size before any compression and/or encryption."];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_raw_file_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes file_sha = 4 [(.proto.steam.description) = "SHA-1 of raw file."];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_file_sha();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint64 time_stamp = 5 [(.proto.steam.description) = "Timestamp of file."];
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_time_stamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string filename = 6 [(.proto.steam.description) = "Name of the file to store in the cloud."];
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CCloud_ClientBeginFileUpload_Request.filename");
        object = msg->mutable_filename();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 platforms_to_sync = 7 [default = 4294967295];
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_platforms_to_sync(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 cell_id = 9 [(.proto.steam.description) = "Client\'s cell ID so we can pick storage location."];
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_cell_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool can_encrypt = 10 [(.proto.steam.description) = "if true, client can encrypt the file before uploading it"];
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_can_encrypt(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool is_shared_file = 11 [(.proto.steam.description) = "if true, this is going to be UGC or a screenshot or some other shared file"];
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_is_shared_file(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CCloud_ClientBeginFileUpload_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCloud_ClientBeginFileUpload_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1 [(.proto.steam.description) = "App ID for which the file is being uploaded."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 file_size = 2 [(.proto.steam.description) = "file size as transmitted and stored in Cloud."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_file_size(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 raw_file_size = 3 [(.proto.steam.description) = "file size before any compression and/or encryption."];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_raw_file_size(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raw_file_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes file_sha = 4 [(.proto.steam.description) = "SHA-1 of raw file."];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_file_sha()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 time_stamp = 5 [(.proto.steam.description) = "Timestamp of file."];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_time_stamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string filename = 6 [(.proto.steam.description) = "Name of the file to store in the cloud."];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), static_cast<int>(this->filename().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCloud_ClientBeginFileUpload_Request.filename");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 platforms_to_sync = 7 [default = 4294967295];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_platforms_to_sync(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &platforms_to_sync_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cell_id = 9 [(.proto.steam.description) = "Client\'s cell ID so we can pick storage location."];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_cell_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cell_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool can_encrypt = 10 [(.proto.steam.description) = "if true, client can encrypt the file before uploading it"];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_can_encrypt(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_encrypt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_shared_file = 11 [(.proto.steam.description) = "if true, this is going to be UGC or a screenshot or some other shared file"];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_is_shared_file(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_shared_file_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCloud_ClientBeginFileUpload_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCloud_ClientBeginFileUpload_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CCloud_ClientBeginFileUpload_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCloud_ClientBeginFileUpload_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.proto.steam.description) = "App ID for which the file is being uploaded."];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint32 file_size = 2 [(.proto.steam.description) = "file size as transmitted and stored in Cloud."];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->file_size(), output);
  }

  // optional uint32 raw_file_size = 3 [(.proto.steam.description) = "file size before any compression and/or encryption."];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->raw_file_size(), output);
  }

  // optional bytes file_sha = 4 [(.proto.steam.description) = "SHA-1 of raw file."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->file_sha(), output);
  }

  // optional uint64 time_stamp = 5 [(.proto.steam.description) = "Timestamp of file."];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->time_stamp(), output);
  }

  // optional string filename = 6 [(.proto.steam.description) = "Name of the file to store in the cloud."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_ClientBeginFileUpload_Request.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->filename(), output);
  }

  // optional uint32 platforms_to_sync = 7 [default = 4294967295];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->platforms_to_sync(), output);
  }

  // optional uint32 cell_id = 9 [(.proto.steam.description) = "Client\'s cell ID so we can pick storage location."];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->cell_id(), output);
  }

  // optional bool can_encrypt = 10 [(.proto.steam.description) = "if true, client can encrypt the file before uploading it"];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->can_encrypt(), output);
  }

  // optional bool is_shared_file = 11 [(.proto.steam.description) = "if true, this is going to be UGC or a screenshot or some other shared file"];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_shared_file(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCloud_ClientBeginFileUpload_Request)
}

::google::protobuf::uint8* CCloud_ClientBeginFileUpload_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCloud_ClientBeginFileUpload_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.proto.steam.description) = "App ID for which the file is being uploaded."];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint32 file_size = 2 [(.proto.steam.description) = "file size as transmitted and stored in Cloud."];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->file_size(), target);
  }

  // optional uint32 raw_file_size = 3 [(.proto.steam.description) = "file size before any compression and/or encryption."];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->raw_file_size(), target);
  }

  // optional bytes file_sha = 4 [(.proto.steam.description) = "SHA-1 of raw file."];
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->file_sha(), target);
  }

  // optional uint64 time_stamp = 5 [(.proto.steam.description) = "Timestamp of file."];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->time_stamp(), target);
  }

  // optional string filename = 6 [(.proto.steam.description) = "Name of the file to store in the cloud."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_ClientBeginFileUpload_Request.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->filename(), target);
  }

  // optional uint32 platforms_to_sync = 7 [default = 4294967295];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->platforms_to_sync(), target);
  }

  // optional uint32 cell_id = 9 [(.proto.steam.description) = "Client\'s cell ID so we can pick storage location."];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->cell_id(), target);
  }

  // optional bool can_encrypt = 10 [(.proto.steam.description) = "if true, client can encrypt the file before uploading it"];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->can_encrypt(), target);
  }

  // optional bool is_shared_file = 11 [(.proto.steam.description) = "if true, this is going to be UGC or a screenshot or some other shared file"];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_shared_file(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCloud_ClientBeginFileUpload_Request)
  return target;
}

size_t CCloud_ClientBeginFileUpload_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCloud_ClientBeginFileUpload_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes file_sha = 4 [(.proto.steam.description) = "SHA-1 of raw file."];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->file_sha());
    }

    // optional string filename = 6 [(.proto.steam.description) = "Name of the file to store in the cloud."];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional uint32 appid = 1 [(.proto.steam.description) = "App ID for which the file is being uploaded."];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional uint32 file_size = 2 [(.proto.steam.description) = "file size as transmitted and stored in Cloud."];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->file_size());
    }

    // optional uint64 time_stamp = 5 [(.proto.steam.description) = "Timestamp of file."];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time_stamp());
    }

    // optional uint32 raw_file_size = 3 [(.proto.steam.description) = "file size before any compression and/or encryption."];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raw_file_size());
    }

    // optional uint32 cell_id = 9 [(.proto.steam.description) = "Client\'s cell ID so we can pick storage location."];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cell_id());
    }

    // optional bool can_encrypt = 10 [(.proto.steam.description) = "if true, client can encrypt the file before uploading it"];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional bool is_shared_file = 11 [(.proto.steam.description) = "if true, this is going to be UGC or a screenshot or some other shared file"];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional uint32 platforms_to_sync = 7 [default = 4294967295];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->platforms_to_sync());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCloud_ClientBeginFileUpload_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCloud_ClientBeginFileUpload_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_ClientBeginFileUpload_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CCloud_ClientBeginFileUpload_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCloud_ClientBeginFileUpload_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCloud_ClientBeginFileUpload_Request)
    MergeFrom(*source);
  }
}

void CCloud_ClientBeginFileUpload_Request::MergeFrom(const CCloud_ClientBeginFileUpload_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCloud_ClientBeginFileUpload_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      file_sha_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_sha_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000008u) {
      file_size_ = from.file_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      time_stamp_ = from.time_stamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      raw_file_size_ = from.raw_file_size_;
    }
    if (cached_has_bits & 0x00000040u) {
      cell_id_ = from.cell_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      can_encrypt_ = from.can_encrypt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      is_shared_file_ = from.is_shared_file_;
    }
    if (cached_has_bits & 0x00000200u) {
      platforms_to_sync_ = from.platforms_to_sync_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCloud_ClientBeginFileUpload_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCloud_ClientBeginFileUpload_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_ClientBeginFileUpload_Request::CopyFrom(const CCloud_ClientBeginFileUpload_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCloud_ClientBeginFileUpload_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_ClientBeginFileUpload_Request::IsInitialized() const {
  return true;
}

void CCloud_ClientBeginFileUpload_Request::Swap(CCloud_ClientBeginFileUpload_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_ClientBeginFileUpload_Request::InternalSwap(CCloud_ClientBeginFileUpload_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  file_sha_.Swap(&other->file_sha_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  filename_.Swap(&other->filename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(appid_, other->appid_);
  swap(file_size_, other->file_size_);
  swap(time_stamp_, other->time_stamp_);
  swap(raw_file_size_, other->raw_file_size_);
  swap(cell_id_, other->cell_id_);
  swap(can_encrypt_, other->can_encrypt_);
  swap(is_shared_file_, other->is_shared_file_);
  swap(platforms_to_sync_, other->platforms_to_sync_);
}

::google::protobuf::Metadata CCloud_ClientBeginFileUpload_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fcloud_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ClientCloudFileUploadBlockDetails_HTTPHeaders::InitAsDefaultInstance() {
}
class ClientCloudFileUploadBlockDetails_HTTPHeaders::HasBitSetters {
 public:
  static void set_has_name(ClientCloudFileUploadBlockDetails_HTTPHeaders* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_value(ClientCloudFileUploadBlockDetails_HTTPHeaders* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientCloudFileUploadBlockDetails_HTTPHeaders::kNameFieldNumber;
const int ClientCloudFileUploadBlockDetails_HTTPHeaders::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientCloudFileUploadBlockDetails_HTTPHeaders::ClientCloudFileUploadBlockDetails_HTTPHeaders()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders)
}
ClientCloudFileUploadBlockDetails_HTTPHeaders::ClientCloudFileUploadBlockDetails_HTTPHeaders(const ClientCloudFileUploadBlockDetails_HTTPHeaders& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders)
}

void ClientCloudFileUploadBlockDetails_HTTPHeaders::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ClientCloudFileUploadBlockDetails_HTTPHeaders_steammessages_5fcloud_2esteamclient_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ClientCloudFileUploadBlockDetails_HTTPHeaders::~ClientCloudFileUploadBlockDetails_HTTPHeaders() {
  // @@protoc_insertion_point(destructor:proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders)
  SharedDtor();
}

void ClientCloudFileUploadBlockDetails_HTTPHeaders::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ClientCloudFileUploadBlockDetails_HTTPHeaders::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientCloudFileUploadBlockDetails_HTTPHeaders& ClientCloudFileUploadBlockDetails_HTTPHeaders::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ClientCloudFileUploadBlockDetails_HTTPHeaders_steammessages_5fcloud_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void ClientCloudFileUploadBlockDetails_HTTPHeaders::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ClientCloudFileUploadBlockDetails_HTTPHeaders::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ClientCloudFileUploadBlockDetails_HTTPHeaders*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders.value");
        object = msg->mutable_value();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ClientCloudFileUploadBlockDetails_HTTPHeaders::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ClientCloudFileUploadBlockDetails_HTTPHeaders::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders)
}

::google::protobuf::uint8* ClientCloudFileUploadBlockDetails_HTTPHeaders::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders)
  return target;
}

size_t ClientCloudFileUploadBlockDetails_HTTPHeaders::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientCloudFileUploadBlockDetails_HTTPHeaders::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientCloudFileUploadBlockDetails_HTTPHeaders* source =
      ::google::protobuf::DynamicCastToGenerated<ClientCloudFileUploadBlockDetails_HTTPHeaders>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders)
    MergeFrom(*source);
  }
}

void ClientCloudFileUploadBlockDetails_HTTPHeaders::MergeFrom(const ClientCloudFileUploadBlockDetails_HTTPHeaders& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
}

void ClientCloudFileUploadBlockDetails_HTTPHeaders::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientCloudFileUploadBlockDetails_HTTPHeaders::CopyFrom(const ClientCloudFileUploadBlockDetails_HTTPHeaders& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientCloudFileUploadBlockDetails_HTTPHeaders::IsInitialized() const {
  return true;
}

void ClientCloudFileUploadBlockDetails_HTTPHeaders::Swap(ClientCloudFileUploadBlockDetails_HTTPHeaders* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientCloudFileUploadBlockDetails_HTTPHeaders::InternalSwap(ClientCloudFileUploadBlockDetails_HTTPHeaders* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata ClientCloudFileUploadBlockDetails_HTTPHeaders::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fcloud_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ClientCloudFileUploadBlockDetails::InitAsDefaultInstance() {
}
class ClientCloudFileUploadBlockDetails::HasBitSetters {
 public:
  static void set_has_url_host(ClientCloudFileUploadBlockDetails* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_url_path(ClientCloudFileUploadBlockDetails* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_use_https(ClientCloudFileUploadBlockDetails* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_http_method(ClientCloudFileUploadBlockDetails* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_block_offset(ClientCloudFileUploadBlockDetails* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_block_length(ClientCloudFileUploadBlockDetails* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_explicit_body_data(ClientCloudFileUploadBlockDetails* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_may_parallelize(ClientCloudFileUploadBlockDetails* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientCloudFileUploadBlockDetails::kUrlHostFieldNumber;
const int ClientCloudFileUploadBlockDetails::kUrlPathFieldNumber;
const int ClientCloudFileUploadBlockDetails::kUseHttpsFieldNumber;
const int ClientCloudFileUploadBlockDetails::kHttpMethodFieldNumber;
const int ClientCloudFileUploadBlockDetails::kRequestHeadersFieldNumber;
const int ClientCloudFileUploadBlockDetails::kBlockOffsetFieldNumber;
const int ClientCloudFileUploadBlockDetails::kBlockLengthFieldNumber;
const int ClientCloudFileUploadBlockDetails::kExplicitBodyDataFieldNumber;
const int ClientCloudFileUploadBlockDetails::kMayParallelizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientCloudFileUploadBlockDetails::ClientCloudFileUploadBlockDetails()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.ClientCloudFileUploadBlockDetails)
}
ClientCloudFileUploadBlockDetails::ClientCloudFileUploadBlockDetails(const ClientCloudFileUploadBlockDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      request_headers_(from.request_headers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url_host()) {
    url_host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_host_);
  }
  url_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url_path()) {
    url_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_path_);
  }
  explicit_body_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_explicit_body_data()) {
    explicit_body_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.explicit_body_data_);
  }
  ::memcpy(&http_method_, &from.http_method_,
    static_cast<size_t>(reinterpret_cast<char*>(&block_length_) -
    reinterpret_cast<char*>(&http_method_)) + sizeof(block_length_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.ClientCloudFileUploadBlockDetails)
}

void ClientCloudFileUploadBlockDetails::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ClientCloudFileUploadBlockDetails_steammessages_5fcloud_2esteamclient_2eproto.base);
  url_host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  explicit_body_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&http_method_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&block_length_) -
      reinterpret_cast<char*>(&http_method_)) + sizeof(block_length_));
}

ClientCloudFileUploadBlockDetails::~ClientCloudFileUploadBlockDetails() {
  // @@protoc_insertion_point(destructor:proto.steam.ClientCloudFileUploadBlockDetails)
  SharedDtor();
}

void ClientCloudFileUploadBlockDetails::SharedDtor() {
  url_host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  explicit_body_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ClientCloudFileUploadBlockDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientCloudFileUploadBlockDetails& ClientCloudFileUploadBlockDetails::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ClientCloudFileUploadBlockDetails_steammessages_5fcloud_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void ClientCloudFileUploadBlockDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.ClientCloudFileUploadBlockDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_headers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      url_host_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      url_path_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      explicit_body_data_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&http_method_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&block_length_) -
        reinterpret_cast<char*>(&http_method_)) + sizeof(block_length_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ClientCloudFileUploadBlockDetails::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ClientCloudFileUploadBlockDetails*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string url_host = 1 [(.proto.steam.description) = "Host name of server to which file should be uploaded via HTTP PUT."];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.ClientCloudFileUploadBlockDetails.url_host");
        object = msg->mutable_url_host();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string url_path = 2 [(.proto.steam.description) = "Relative path on server to which file should be uploaded."];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.ClientCloudFileUploadBlockDetails.url_path");
        object = msg->mutable_url_path();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool use_https = 3 [(.proto.steam.description) = "If true, use https, otherwise use http."];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_use_https(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 http_method = 4 [(.proto.steam.description) = "EHTTPMethod to use for this block."];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_http_method(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders request_headers = 5 [(.proto.steam.description) = "Name-value pairs to be sent in HTTP PUT request."];
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::ClientCloudFileUploadBlockDetails_HTTPHeaders::_InternalParse;
          object = msg->add_request_headers();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      // optional uint64 block_offset = 6 [(.proto.steam.description) = "offset of file block to upload"];
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_block_offset(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 block_length = 7 [(.proto.steam.description) = "length of file block to upload - if zero, no part of the file is part of this block"];
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_block_length(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes explicit_body_data = 8 [(.proto.steam.description) = "explicit body data to use, instead of file data, for this block"];
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_explicit_body_data();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool may_parallelize = 9 [(.proto.steam.description) = "if true, this request may be done in parallel with other similarly-marked requests"];
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_may_parallelize(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ClientCloudFileUploadBlockDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.ClientCloudFileUploadBlockDetails)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string url_host = 1 [(.proto.steam.description) = "Host name of server to which file should be uploaded via HTTP PUT."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url_host().data(), static_cast<int>(this->url_host().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.ClientCloudFileUploadBlockDetails.url_host");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url_path = 2 [(.proto.steam.description) = "Relative path on server to which file should be uploaded."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url_path().data(), static_cast<int>(this->url_path().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.ClientCloudFileUploadBlockDetails.url_path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_https = 3 [(.proto.steam.description) = "If true, use https, otherwise use http."];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_use_https(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_https_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 http_method = 4 [(.proto.steam.description) = "EHTTPMethod to use for this block."];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_http_method(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &http_method_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders request_headers = 5 [(.proto.steam.description) = "Name-value pairs to be sent in HTTP PUT request."];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_request_headers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 block_offset = 6 [(.proto.steam.description) = "offset of file block to upload"];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_block_offset(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &block_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 block_length = 7 [(.proto.steam.description) = "length of file block to upload - if zero, no part of the file is part of this block"];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_block_length(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &block_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes explicit_body_data = 8 [(.proto.steam.description) = "explicit body data to use, instead of file data, for this block"];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_explicit_body_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool may_parallelize = 9 [(.proto.steam.description) = "if true, this request may be done in parallel with other similarly-marked requests"];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_may_parallelize(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &may_parallelize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.ClientCloudFileUploadBlockDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.ClientCloudFileUploadBlockDetails)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ClientCloudFileUploadBlockDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.ClientCloudFileUploadBlockDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string url_host = 1 [(.proto.steam.description) = "Host name of server to which file should be uploaded via HTTP PUT."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url_host().data(), static_cast<int>(this->url_host().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.ClientCloudFileUploadBlockDetails.url_host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url_host(), output);
  }

  // optional string url_path = 2 [(.proto.steam.description) = "Relative path on server to which file should be uploaded."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url_path().data(), static_cast<int>(this->url_path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.ClientCloudFileUploadBlockDetails.url_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url_path(), output);
  }

  // optional bool use_https = 3 [(.proto.steam.description) = "If true, use https, otherwise use http."];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->use_https(), output);
  }

  // optional int32 http_method = 4 [(.proto.steam.description) = "EHTTPMethod to use for this block."];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->http_method(), output);
  }

  // repeated .proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders request_headers = 5 [(.proto.steam.description) = "Name-value pairs to be sent in HTTP PUT request."];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->request_headers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->request_headers(static_cast<int>(i)),
      output);
  }

  // optional uint64 block_offset = 6 [(.proto.steam.description) = "offset of file block to upload"];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->block_offset(), output);
  }

  // optional uint32 block_length = 7 [(.proto.steam.description) = "length of file block to upload - if zero, no part of the file is part of this block"];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->block_length(), output);
  }

  // optional bytes explicit_body_data = 8 [(.proto.steam.description) = "explicit body data to use, instead of file data, for this block"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->explicit_body_data(), output);
  }

  // optional bool may_parallelize = 9 [(.proto.steam.description) = "if true, this request may be done in parallel with other similarly-marked requests"];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->may_parallelize(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.ClientCloudFileUploadBlockDetails)
}

::google::protobuf::uint8* ClientCloudFileUploadBlockDetails::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.ClientCloudFileUploadBlockDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string url_host = 1 [(.proto.steam.description) = "Host name of server to which file should be uploaded via HTTP PUT."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url_host().data(), static_cast<int>(this->url_host().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.ClientCloudFileUploadBlockDetails.url_host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url_host(), target);
  }

  // optional string url_path = 2 [(.proto.steam.description) = "Relative path on server to which file should be uploaded."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url_path().data(), static_cast<int>(this->url_path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.ClientCloudFileUploadBlockDetails.url_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url_path(), target);
  }

  // optional bool use_https = 3 [(.proto.steam.description) = "If true, use https, otherwise use http."];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->use_https(), target);
  }

  // optional int32 http_method = 4 [(.proto.steam.description) = "EHTTPMethod to use for this block."];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->http_method(), target);
  }

  // repeated .proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders request_headers = 5 [(.proto.steam.description) = "Name-value pairs to be sent in HTTP PUT request."];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->request_headers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->request_headers(static_cast<int>(i)), target);
  }

  // optional uint64 block_offset = 6 [(.proto.steam.description) = "offset of file block to upload"];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->block_offset(), target);
  }

  // optional uint32 block_length = 7 [(.proto.steam.description) = "length of file block to upload - if zero, no part of the file is part of this block"];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->block_length(), target);
  }

  // optional bytes explicit_body_data = 8 [(.proto.steam.description) = "explicit body data to use, instead of file data, for this block"];
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->explicit_body_data(), target);
  }

  // optional bool may_parallelize = 9 [(.proto.steam.description) = "if true, this request may be done in parallel with other similarly-marked requests"];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->may_parallelize(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.ClientCloudFileUploadBlockDetails)
  return target;
}

size_t ClientCloudFileUploadBlockDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.ClientCloudFileUploadBlockDetails)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders request_headers = 5 [(.proto.steam.description) = "Name-value pairs to be sent in HTTP PUT request."];
  {
    unsigned int count = static_cast<unsigned int>(this->request_headers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->request_headers(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string url_host = 1 [(.proto.steam.description) = "Host name of server to which file should be uploaded via HTTP PUT."];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url_host());
    }

    // optional string url_path = 2 [(.proto.steam.description) = "Relative path on server to which file should be uploaded."];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url_path());
    }

    // optional bytes explicit_body_data = 8 [(.proto.steam.description) = "explicit body data to use, instead of file data, for this block"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->explicit_body_data());
    }

    // optional int32 http_method = 4 [(.proto.steam.description) = "EHTTPMethod to use for this block."];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->http_method());
    }

    // optional bool use_https = 3 [(.proto.steam.description) = "If true, use https, otherwise use http."];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool may_parallelize = 9 [(.proto.steam.description) = "if true, this request may be done in parallel with other similarly-marked requests"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional uint64 block_offset = 6 [(.proto.steam.description) = "offset of file block to upload"];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->block_offset());
    }

    // optional uint32 block_length = 7 [(.proto.steam.description) = "length of file block to upload - if zero, no part of the file is part of this block"];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->block_length());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientCloudFileUploadBlockDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.ClientCloudFileUploadBlockDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientCloudFileUploadBlockDetails* source =
      ::google::protobuf::DynamicCastToGenerated<ClientCloudFileUploadBlockDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.ClientCloudFileUploadBlockDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.ClientCloudFileUploadBlockDetails)
    MergeFrom(*source);
  }
}

void ClientCloudFileUploadBlockDetails::MergeFrom(const ClientCloudFileUploadBlockDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.ClientCloudFileUploadBlockDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  request_headers_.MergeFrom(from.request_headers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      url_host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_host_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      url_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_path_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      explicit_body_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.explicit_body_data_);
    }
    if (cached_has_bits & 0x00000008u) {
      http_method_ = from.http_method_;
    }
    if (cached_has_bits & 0x00000010u) {
      use_https_ = from.use_https_;
    }
    if (cached_has_bits & 0x00000020u) {
      may_parallelize_ = from.may_parallelize_;
    }
    if (cached_has_bits & 0x00000040u) {
      block_offset_ = from.block_offset_;
    }
    if (cached_has_bits & 0x00000080u) {
      block_length_ = from.block_length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ClientCloudFileUploadBlockDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.ClientCloudFileUploadBlockDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientCloudFileUploadBlockDetails::CopyFrom(const ClientCloudFileUploadBlockDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.ClientCloudFileUploadBlockDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientCloudFileUploadBlockDetails::IsInitialized() const {
  return true;
}

void ClientCloudFileUploadBlockDetails::Swap(ClientCloudFileUploadBlockDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientCloudFileUploadBlockDetails::InternalSwap(ClientCloudFileUploadBlockDetails* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&request_headers_)->InternalSwap(CastToBase(&other->request_headers_));
  url_host_.Swap(&other->url_host_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  url_path_.Swap(&other->url_path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  explicit_body_data_.Swap(&other->explicit_body_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(http_method_, other->http_method_);
  swap(use_https_, other->use_https_);
  swap(may_parallelize_, other->may_parallelize_);
  swap(block_offset_, other->block_offset_);
  swap(block_length_, other->block_length_);
}

::google::protobuf::Metadata ClientCloudFileUploadBlockDetails::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fcloud_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CCloud_ClientBeginFileUpload_Response::InitAsDefaultInstance() {
}
class CCloud_ClientBeginFileUpload_Response::HasBitSetters {
 public:
  static void set_has_encrypt_file(CCloud_ClientBeginFileUpload_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCloud_ClientBeginFileUpload_Response::kEncryptFileFieldNumber;
const int CCloud_ClientBeginFileUpload_Response::kBlockRequestsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_ClientBeginFileUpload_Response::CCloud_ClientBeginFileUpload_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCloud_ClientBeginFileUpload_Response)
}
CCloud_ClientBeginFileUpload_Response::CCloud_ClientBeginFileUpload_Response(const CCloud_ClientBeginFileUpload_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      block_requests_(from.block_requests_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  encrypt_file_ = from.encrypt_file_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCloud_ClientBeginFileUpload_Response)
}

void CCloud_ClientBeginFileUpload_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CCloud_ClientBeginFileUpload_Response_steammessages_5fcloud_2esteamclient_2eproto.base);
  encrypt_file_ = false;
}

CCloud_ClientBeginFileUpload_Response::~CCloud_ClientBeginFileUpload_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CCloud_ClientBeginFileUpload_Response)
  SharedDtor();
}

void CCloud_ClientBeginFileUpload_Response::SharedDtor() {
}

void CCloud_ClientBeginFileUpload_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCloud_ClientBeginFileUpload_Response& CCloud_ClientBeginFileUpload_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CCloud_ClientBeginFileUpload_Response_steammessages_5fcloud_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CCloud_ClientBeginFileUpload_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCloud_ClientBeginFileUpload_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  block_requests_.Clear();
  encrypt_file_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CCloud_ClientBeginFileUpload_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CCloud_ClientBeginFileUpload_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool encrypt_file = 1 [(.proto.steam.description) = "If true, the file should be encrypted by the client before upload"];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_encrypt_file(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.steam.ClientCloudFileUploadBlockDetails block_requests = 2 [(.proto.steam.description) = "HTTP requests to make to perform upload"];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::ClientCloudFileUploadBlockDetails::_InternalParse;
          object = msg->add_block_requests();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CCloud_ClientBeginFileUpload_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCloud_ClientBeginFileUpload_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool encrypt_file = 1 [(.proto.steam.description) = "If true, the file should be encrypted by the client before upload"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_encrypt_file(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_file_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.ClientCloudFileUploadBlockDetails block_requests = 2 [(.proto.steam.description) = "HTTP requests to make to perform upload"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_block_requests()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCloud_ClientBeginFileUpload_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCloud_ClientBeginFileUpload_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CCloud_ClientBeginFileUpload_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCloud_ClientBeginFileUpload_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool encrypt_file = 1 [(.proto.steam.description) = "If true, the file should be encrypted by the client before upload"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->encrypt_file(), output);
  }

  // repeated .proto.steam.ClientCloudFileUploadBlockDetails block_requests = 2 [(.proto.steam.description) = "HTTP requests to make to perform upload"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->block_requests_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->block_requests(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCloud_ClientBeginFileUpload_Response)
}

::google::protobuf::uint8* CCloud_ClientBeginFileUpload_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCloud_ClientBeginFileUpload_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool encrypt_file = 1 [(.proto.steam.description) = "If true, the file should be encrypted by the client before upload"];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->encrypt_file(), target);
  }

  // repeated .proto.steam.ClientCloudFileUploadBlockDetails block_requests = 2 [(.proto.steam.description) = "HTTP requests to make to perform upload"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->block_requests_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->block_requests(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCloud_ClientBeginFileUpload_Response)
  return target;
}

size_t CCloud_ClientBeginFileUpload_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCloud_ClientBeginFileUpload_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.ClientCloudFileUploadBlockDetails block_requests = 2 [(.proto.steam.description) = "HTTP requests to make to perform upload"];
  {
    unsigned int count = static_cast<unsigned int>(this->block_requests_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->block_requests(static_cast<int>(i)));
    }
  }

  // optional bool encrypt_file = 1 [(.proto.steam.description) = "If true, the file should be encrypted by the client before upload"];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCloud_ClientBeginFileUpload_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCloud_ClientBeginFileUpload_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_ClientBeginFileUpload_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CCloud_ClientBeginFileUpload_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCloud_ClientBeginFileUpload_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCloud_ClientBeginFileUpload_Response)
    MergeFrom(*source);
  }
}

void CCloud_ClientBeginFileUpload_Response::MergeFrom(const CCloud_ClientBeginFileUpload_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCloud_ClientBeginFileUpload_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  block_requests_.MergeFrom(from.block_requests_);
  if (from.has_encrypt_file()) {
    set_encrypt_file(from.encrypt_file());
  }
}

void CCloud_ClientBeginFileUpload_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCloud_ClientBeginFileUpload_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_ClientBeginFileUpload_Response::CopyFrom(const CCloud_ClientBeginFileUpload_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCloud_ClientBeginFileUpload_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_ClientBeginFileUpload_Response::IsInitialized() const {
  return true;
}

void CCloud_ClientBeginFileUpload_Response::Swap(CCloud_ClientBeginFileUpload_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_ClientBeginFileUpload_Response::InternalSwap(CCloud_ClientBeginFileUpload_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&block_requests_)->InternalSwap(CastToBase(&other->block_requests_));
  swap(encrypt_file_, other->encrypt_file_);
}

::google::protobuf::Metadata CCloud_ClientBeginFileUpload_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fcloud_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CCloud_ClientCommitFileUpload_Request::InitAsDefaultInstance() {
}
class CCloud_ClientCommitFileUpload_Request::HasBitSetters {
 public:
  static void set_has_transfer_succeeded(CCloud_ClientCommitFileUpload_Request* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_appid(CCloud_ClientCommitFileUpload_Request* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_file_sha(CCloud_ClientCommitFileUpload_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_filename(CCloud_ClientCommitFileUpload_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCloud_ClientCommitFileUpload_Request::kTransferSucceededFieldNumber;
const int CCloud_ClientCommitFileUpload_Request::kAppidFieldNumber;
const int CCloud_ClientCommitFileUpload_Request::kFileShaFieldNumber;
const int CCloud_ClientCommitFileUpload_Request::kFilenameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_ClientCommitFileUpload_Request::CCloud_ClientCommitFileUpload_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCloud_ClientCommitFileUpload_Request)
}
CCloud_ClientCommitFileUpload_Request::CCloud_ClientCommitFileUpload_Request(const CCloud_ClientCommitFileUpload_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_sha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_sha()) {
    file_sha_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_sha_);
  }
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_filename()) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  ::memcpy(&transfer_succeeded_, &from.transfer_succeeded_,
    static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&transfer_succeeded_)) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCloud_ClientCommitFileUpload_Request)
}

void CCloud_ClientCommitFileUpload_Request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CCloud_ClientCommitFileUpload_Request_steammessages_5fcloud_2esteamclient_2eproto.base);
  file_sha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&transfer_succeeded_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&appid_) -
      reinterpret_cast<char*>(&transfer_succeeded_)) + sizeof(appid_));
}

CCloud_ClientCommitFileUpload_Request::~CCloud_ClientCommitFileUpload_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CCloud_ClientCommitFileUpload_Request)
  SharedDtor();
}

void CCloud_ClientCommitFileUpload_Request::SharedDtor() {
  file_sha_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CCloud_ClientCommitFileUpload_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCloud_ClientCommitFileUpload_Request& CCloud_ClientCommitFileUpload_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CCloud_ClientCommitFileUpload_Request_steammessages_5fcloud_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CCloud_ClientCommitFileUpload_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCloud_ClientCommitFileUpload_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      file_sha_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      filename_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&transfer_succeeded_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&appid_) -
        reinterpret_cast<char*>(&transfer_succeeded_)) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CCloud_ClientCommitFileUpload_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CCloud_ClientCommitFileUpload_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool transfer_succeeded = 1 [(.proto.steam.description) = "True if all block uploads succeeded, false if any of them failed."];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_transfer_succeeded(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 appid = 2 [(.proto.steam.description) = "App ID for which the file is being uploaded. Must match the app ID provided to Cloud.BeginFileUpload."];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes file_sha = 3 [(.proto.steam.description) = "SHA1 digest of the raw file. Must match the SHA1 digest provided to Cloud.BeginFileUpload."];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_file_sha();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string filename = 4 [(.proto.steam.description) = "Filename as specified in the Cloud.BeginFileUpload request."];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CCloud_ClientCommitFileUpload_Request.filename");
        object = msg->mutable_filename();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CCloud_ClientCommitFileUpload_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCloud_ClientCommitFileUpload_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool transfer_succeeded = 1 [(.proto.steam.description) = "True if all block uploads succeeded, false if any of them failed."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_transfer_succeeded(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &transfer_succeeded_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 appid = 2 [(.proto.steam.description) = "App ID for which the file is being uploaded. Must match the app ID provided to Cloud.BeginFileUpload."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes file_sha = 3 [(.proto.steam.description) = "SHA1 digest of the raw file. Must match the SHA1 digest provided to Cloud.BeginFileUpload."];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_file_sha()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string filename = 4 [(.proto.steam.description) = "Filename as specified in the Cloud.BeginFileUpload request."];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), static_cast<int>(this->filename().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCloud_ClientCommitFileUpload_Request.filename");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCloud_ClientCommitFileUpload_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCloud_ClientCommitFileUpload_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CCloud_ClientCommitFileUpload_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCloud_ClientCommitFileUpload_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool transfer_succeeded = 1 [(.proto.steam.description) = "True if all block uploads succeeded, false if any of them failed."];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->transfer_succeeded(), output);
  }

  // optional uint32 appid = 2 [(.proto.steam.description) = "App ID for which the file is being uploaded. Must match the app ID provided to Cloud.BeginFileUpload."];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->appid(), output);
  }

  // optional bytes file_sha = 3 [(.proto.steam.description) = "SHA1 digest of the raw file. Must match the SHA1 digest provided to Cloud.BeginFileUpload."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->file_sha(), output);
  }

  // optional string filename = 4 [(.proto.steam.description) = "Filename as specified in the Cloud.BeginFileUpload request."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_ClientCommitFileUpload_Request.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->filename(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCloud_ClientCommitFileUpload_Request)
}

::google::protobuf::uint8* CCloud_ClientCommitFileUpload_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCloud_ClientCommitFileUpload_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool transfer_succeeded = 1 [(.proto.steam.description) = "True if all block uploads succeeded, false if any of them failed."];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->transfer_succeeded(), target);
  }

  // optional uint32 appid = 2 [(.proto.steam.description) = "App ID for which the file is being uploaded. Must match the app ID provided to Cloud.BeginFileUpload."];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->appid(), target);
  }

  // optional bytes file_sha = 3 [(.proto.steam.description) = "SHA1 digest of the raw file. Must match the SHA1 digest provided to Cloud.BeginFileUpload."];
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->file_sha(), target);
  }

  // optional string filename = 4 [(.proto.steam.description) = "Filename as specified in the Cloud.BeginFileUpload request."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_ClientCommitFileUpload_Request.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->filename(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCloud_ClientCommitFileUpload_Request)
  return target;
}

size_t CCloud_ClientCommitFileUpload_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCloud_ClientCommitFileUpload_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes file_sha = 3 [(.proto.steam.description) = "SHA1 digest of the raw file. Must match the SHA1 digest provided to Cloud.BeginFileUpload."];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->file_sha());
    }

    // optional string filename = 4 [(.proto.steam.description) = "Filename as specified in the Cloud.BeginFileUpload request."];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional bool transfer_succeeded = 1 [(.proto.steam.description) = "True if all block uploads succeeded, false if any of them failed."];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional uint32 appid = 2 [(.proto.steam.description) = "App ID for which the file is being uploaded. Must match the app ID provided to Cloud.BeginFileUpload."];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCloud_ClientCommitFileUpload_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCloud_ClientCommitFileUpload_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_ClientCommitFileUpload_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CCloud_ClientCommitFileUpload_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCloud_ClientCommitFileUpload_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCloud_ClientCommitFileUpload_Request)
    MergeFrom(*source);
  }
}

void CCloud_ClientCommitFileUpload_Request::MergeFrom(const CCloud_ClientCommitFileUpload_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCloud_ClientCommitFileUpload_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      file_sha_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_sha_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
    if (cached_has_bits & 0x00000004u) {
      transfer_succeeded_ = from.transfer_succeeded_;
    }
    if (cached_has_bits & 0x00000008u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCloud_ClientCommitFileUpload_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCloud_ClientCommitFileUpload_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_ClientCommitFileUpload_Request::CopyFrom(const CCloud_ClientCommitFileUpload_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCloud_ClientCommitFileUpload_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_ClientCommitFileUpload_Request::IsInitialized() const {
  return true;
}

void CCloud_ClientCommitFileUpload_Request::Swap(CCloud_ClientCommitFileUpload_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_ClientCommitFileUpload_Request::InternalSwap(CCloud_ClientCommitFileUpload_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  file_sha_.Swap(&other->file_sha_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  filename_.Swap(&other->filename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(transfer_succeeded_, other->transfer_succeeded_);
  swap(appid_, other->appid_);
}

::google::protobuf::Metadata CCloud_ClientCommitFileUpload_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fcloud_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CCloud_ClientCommitFileUpload_Response::InitAsDefaultInstance() {
}
class CCloud_ClientCommitFileUpload_Response::HasBitSetters {
 public:
  static void set_has_file_committed(CCloud_ClientCommitFileUpload_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCloud_ClientCommitFileUpload_Response::kFileCommittedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_ClientCommitFileUpload_Response::CCloud_ClientCommitFileUpload_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCloud_ClientCommitFileUpload_Response)
}
CCloud_ClientCommitFileUpload_Response::CCloud_ClientCommitFileUpload_Response(const CCloud_ClientCommitFileUpload_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_committed_ = from.file_committed_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCloud_ClientCommitFileUpload_Response)
}

void CCloud_ClientCommitFileUpload_Response::SharedCtor() {
  file_committed_ = false;
}

CCloud_ClientCommitFileUpload_Response::~CCloud_ClientCommitFileUpload_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CCloud_ClientCommitFileUpload_Response)
  SharedDtor();
}

void CCloud_ClientCommitFileUpload_Response::SharedDtor() {
}

void CCloud_ClientCommitFileUpload_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCloud_ClientCommitFileUpload_Response& CCloud_ClientCommitFileUpload_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CCloud_ClientCommitFileUpload_Response_steammessages_5fcloud_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CCloud_ClientCommitFileUpload_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCloud_ClientCommitFileUpload_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_committed_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CCloud_ClientCommitFileUpload_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CCloud_ClientCommitFileUpload_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool file_committed = 1 [(.proto.steam.description) = "True if the file was successfully committed, false otherwise."];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_file_committed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CCloud_ClientCommitFileUpload_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCloud_ClientCommitFileUpload_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool file_committed = 1 [(.proto.steam.description) = "True if the file was successfully committed, false otherwise."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_file_committed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &file_committed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCloud_ClientCommitFileUpload_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCloud_ClientCommitFileUpload_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CCloud_ClientCommitFileUpload_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCloud_ClientCommitFileUpload_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool file_committed = 1 [(.proto.steam.description) = "True if the file was successfully committed, false otherwise."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->file_committed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCloud_ClientCommitFileUpload_Response)
}

::google::protobuf::uint8* CCloud_ClientCommitFileUpload_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCloud_ClientCommitFileUpload_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool file_committed = 1 [(.proto.steam.description) = "True if the file was successfully committed, false otherwise."];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->file_committed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCloud_ClientCommitFileUpload_Response)
  return target;
}

size_t CCloud_ClientCommitFileUpload_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCloud_ClientCommitFileUpload_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool file_committed = 1 [(.proto.steam.description) = "True if the file was successfully committed, false otherwise."];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCloud_ClientCommitFileUpload_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCloud_ClientCommitFileUpload_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_ClientCommitFileUpload_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CCloud_ClientCommitFileUpload_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCloud_ClientCommitFileUpload_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCloud_ClientCommitFileUpload_Response)
    MergeFrom(*source);
  }
}

void CCloud_ClientCommitFileUpload_Response::MergeFrom(const CCloud_ClientCommitFileUpload_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCloud_ClientCommitFileUpload_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_file_committed()) {
    set_file_committed(from.file_committed());
  }
}

void CCloud_ClientCommitFileUpload_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCloud_ClientCommitFileUpload_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_ClientCommitFileUpload_Response::CopyFrom(const CCloud_ClientCommitFileUpload_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCloud_ClientCommitFileUpload_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_ClientCommitFileUpload_Response::IsInitialized() const {
  return true;
}

void CCloud_ClientCommitFileUpload_Response::Swap(CCloud_ClientCommitFileUpload_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_ClientCommitFileUpload_Response::InternalSwap(CCloud_ClientCommitFileUpload_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(file_committed_, other->file_committed_);
}

::google::protobuf::Metadata CCloud_ClientCommitFileUpload_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fcloud_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CCloud_ClientFileDownload_Request::InitAsDefaultInstance() {
}
class CCloud_ClientFileDownload_Request::HasBitSetters {
 public:
  static void set_has_appid(CCloud_ClientFileDownload_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_filename(CCloud_ClientFileDownload_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCloud_ClientFileDownload_Request::kAppidFieldNumber;
const int CCloud_ClientFileDownload_Request::kFilenameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_ClientFileDownload_Request::CCloud_ClientFileDownload_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCloud_ClientFileDownload_Request)
}
CCloud_ClientFileDownload_Request::CCloud_ClientFileDownload_Request(const CCloud_ClientFileDownload_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_filename()) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCloud_ClientFileDownload_Request)
}

void CCloud_ClientFileDownload_Request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CCloud_ClientFileDownload_Request_steammessages_5fcloud_2esteamclient_2eproto.base);
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appid_ = 0u;
}

CCloud_ClientFileDownload_Request::~CCloud_ClientFileDownload_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CCloud_ClientFileDownload_Request)
  SharedDtor();
}

void CCloud_ClientFileDownload_Request::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CCloud_ClientFileDownload_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCloud_ClientFileDownload_Request& CCloud_ClientFileDownload_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CCloud_ClientFileDownload_Request_steammessages_5fcloud_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CCloud_ClientFileDownload_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCloud_ClientFileDownload_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    filename_.ClearNonDefaultToEmptyNoArena();
  }
  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CCloud_ClientFileDownload_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CCloud_ClientFileDownload_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1 [(.proto.steam.description) = "App ID the file is part of."];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string filename = 2 [(.proto.steam.description) = "Filename of the file."];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CCloud_ClientFileDownload_Request.filename");
        object = msg->mutable_filename();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CCloud_ClientFileDownload_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCloud_ClientFileDownload_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1 [(.proto.steam.description) = "App ID the file is part of."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string filename = 2 [(.proto.steam.description) = "Filename of the file."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), static_cast<int>(this->filename().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCloud_ClientFileDownload_Request.filename");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCloud_ClientFileDownload_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCloud_ClientFileDownload_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CCloud_ClientFileDownload_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCloud_ClientFileDownload_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.proto.steam.description) = "App ID the file is part of."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional string filename = 2 [(.proto.steam.description) = "Filename of the file."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_ClientFileDownload_Request.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->filename(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCloud_ClientFileDownload_Request)
}

::google::protobuf::uint8* CCloud_ClientFileDownload_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCloud_ClientFileDownload_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.proto.steam.description) = "App ID the file is part of."];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional string filename = 2 [(.proto.steam.description) = "Filename of the file."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_ClientFileDownload_Request.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filename(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCloud_ClientFileDownload_Request)
  return target;
}

size_t CCloud_ClientFileDownload_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCloud_ClientFileDownload_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string filename = 2 [(.proto.steam.description) = "Filename of the file."];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional uint32 appid = 1 [(.proto.steam.description) = "App ID the file is part of."];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCloud_ClientFileDownload_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCloud_ClientFileDownload_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_ClientFileDownload_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CCloud_ClientFileDownload_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCloud_ClientFileDownload_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCloud_ClientFileDownload_Request)
    MergeFrom(*source);
  }
}

void CCloud_ClientFileDownload_Request::MergeFrom(const CCloud_ClientFileDownload_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCloud_ClientFileDownload_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCloud_ClientFileDownload_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCloud_ClientFileDownload_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_ClientFileDownload_Request::CopyFrom(const CCloud_ClientFileDownload_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCloud_ClientFileDownload_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_ClientFileDownload_Request::IsInitialized() const {
  return true;
}

void CCloud_ClientFileDownload_Request::Swap(CCloud_ClientFileDownload_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_ClientFileDownload_Request::InternalSwap(CCloud_ClientFileDownload_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  filename_.Swap(&other->filename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(appid_, other->appid_);
}

::google::protobuf::Metadata CCloud_ClientFileDownload_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fcloud_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CCloud_ClientFileDownload_Response_HTTPHeaders::InitAsDefaultInstance() {
}
class CCloud_ClientFileDownload_Response_HTTPHeaders::HasBitSetters {
 public:
  static void set_has_name(CCloud_ClientFileDownload_Response_HTTPHeaders* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_value(CCloud_ClientFileDownload_Response_HTTPHeaders* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCloud_ClientFileDownload_Response_HTTPHeaders::kNameFieldNumber;
const int CCloud_ClientFileDownload_Response_HTTPHeaders::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_ClientFileDownload_Response_HTTPHeaders::CCloud_ClientFileDownload_Response_HTTPHeaders()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders)
}
CCloud_ClientFileDownload_Response_HTTPHeaders::CCloud_ClientFileDownload_Response_HTTPHeaders(const CCloud_ClientFileDownload_Response_HTTPHeaders& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders)
}

void CCloud_ClientFileDownload_Response_HTTPHeaders::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CCloud_ClientFileDownload_Response_HTTPHeaders_steammessages_5fcloud_2esteamclient_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CCloud_ClientFileDownload_Response_HTTPHeaders::~CCloud_ClientFileDownload_Response_HTTPHeaders() {
  // @@protoc_insertion_point(destructor:proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders)
  SharedDtor();
}

void CCloud_ClientFileDownload_Response_HTTPHeaders::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CCloud_ClientFileDownload_Response_HTTPHeaders::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCloud_ClientFileDownload_Response_HTTPHeaders& CCloud_ClientFileDownload_Response_HTTPHeaders::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CCloud_ClientFileDownload_Response_HTTPHeaders_steammessages_5fcloud_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CCloud_ClientFileDownload_Response_HTTPHeaders::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CCloud_ClientFileDownload_Response_HTTPHeaders::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CCloud_ClientFileDownload_Response_HTTPHeaders*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders.value");
        object = msg->mutable_value();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CCloud_ClientFileDownload_Response_HTTPHeaders::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CCloud_ClientFileDownload_Response_HTTPHeaders::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders)
}

::google::protobuf::uint8* CCloud_ClientFileDownload_Response_HTTPHeaders::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders)
  return target;
}

size_t CCloud_ClientFileDownload_Response_HTTPHeaders::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCloud_ClientFileDownload_Response_HTTPHeaders::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_ClientFileDownload_Response_HTTPHeaders* source =
      ::google::protobuf::DynamicCastToGenerated<CCloud_ClientFileDownload_Response_HTTPHeaders>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders)
    MergeFrom(*source);
  }
}

void CCloud_ClientFileDownload_Response_HTTPHeaders::MergeFrom(const CCloud_ClientFileDownload_Response_HTTPHeaders& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
}

void CCloud_ClientFileDownload_Response_HTTPHeaders::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_ClientFileDownload_Response_HTTPHeaders::CopyFrom(const CCloud_ClientFileDownload_Response_HTTPHeaders& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_ClientFileDownload_Response_HTTPHeaders::IsInitialized() const {
  return true;
}

void CCloud_ClientFileDownload_Response_HTTPHeaders::Swap(CCloud_ClientFileDownload_Response_HTTPHeaders* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_ClientFileDownload_Response_HTTPHeaders::InternalSwap(CCloud_ClientFileDownload_Response_HTTPHeaders* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CCloud_ClientFileDownload_Response_HTTPHeaders::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fcloud_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CCloud_ClientFileDownload_Response::InitAsDefaultInstance() {
}
class CCloud_ClientFileDownload_Response::HasBitSetters {
 public:
  static void set_has_appid(CCloud_ClientFileDownload_Response* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_file_size(CCloud_ClientFileDownload_Response* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_raw_file_size(CCloud_ClientFileDownload_Response* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_sha_file(CCloud_ClientFileDownload_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_time_stamp(CCloud_ClientFileDownload_Response* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_is_explicit_delete(CCloud_ClientFileDownload_Response* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_url_host(CCloud_ClientFileDownload_Response* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_url_path(CCloud_ClientFileDownload_Response* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_use_https(CCloud_ClientFileDownload_Response* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_encrypted(CCloud_ClientFileDownload_Response* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCloud_ClientFileDownload_Response::kAppidFieldNumber;
const int CCloud_ClientFileDownload_Response::kFileSizeFieldNumber;
const int CCloud_ClientFileDownload_Response::kRawFileSizeFieldNumber;
const int CCloud_ClientFileDownload_Response::kShaFileFieldNumber;
const int CCloud_ClientFileDownload_Response::kTimeStampFieldNumber;
const int CCloud_ClientFileDownload_Response::kIsExplicitDeleteFieldNumber;
const int CCloud_ClientFileDownload_Response::kUrlHostFieldNumber;
const int CCloud_ClientFileDownload_Response::kUrlPathFieldNumber;
const int CCloud_ClientFileDownload_Response::kUseHttpsFieldNumber;
const int CCloud_ClientFileDownload_Response::kRequestHeadersFieldNumber;
const int CCloud_ClientFileDownload_Response::kEncryptedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_ClientFileDownload_Response::CCloud_ClientFileDownload_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCloud_ClientFileDownload_Response)
}
CCloud_ClientFileDownload_Response::CCloud_ClientFileDownload_Response(const CCloud_ClientFileDownload_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      request_headers_(from.request_headers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sha_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sha_file()) {
    sha_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_file_);
  }
  url_host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url_host()) {
    url_host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_host_);
  }
  url_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url_path()) {
    url_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_path_);
  }
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&encrypted_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(encrypted_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCloud_ClientFileDownload_Response)
}

void CCloud_ClientFileDownload_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CCloud_ClientFileDownload_Response_steammessages_5fcloud_2esteamclient_2eproto.base);
  sha_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&appid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&encrypted_) -
      reinterpret_cast<char*>(&appid_)) + sizeof(encrypted_));
}

CCloud_ClientFileDownload_Response::~CCloud_ClientFileDownload_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CCloud_ClientFileDownload_Response)
  SharedDtor();
}

void CCloud_ClientFileDownload_Response::SharedDtor() {
  sha_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CCloud_ClientFileDownload_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCloud_ClientFileDownload_Response& CCloud_ClientFileDownload_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CCloud_ClientFileDownload_Response_steammessages_5fcloud_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CCloud_ClientFileDownload_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCloud_ClientFileDownload_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_headers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      sha_file_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      url_host_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      url_path_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_explicit_delete_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(is_explicit_delete_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&use_https_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&encrypted_) -
        reinterpret_cast<char*>(&use_https_)) + sizeof(encrypted_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CCloud_ClientFileDownload_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CCloud_ClientFileDownload_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1 [(.proto.steam.description) = "Application the file belongs to"];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 file_size = 2 [(.proto.steam.description) = "file size as transmitted and stored in the Cloud"];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_file_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 raw_file_size = 3 [(.proto.steam.description) = "file size when decompressed and/or decrypted"];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_raw_file_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes sha_file = 4 [(.proto.steam.description) = "SHA of file"];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_sha_file();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint64 time_stamp = 5 [(.proto.steam.description) = "Timestamp of file"];
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_time_stamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool is_explicit_delete = 6 [(.proto.steam.description) = "True if this is an explicitly deleted file"];
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_is_explicit_delete(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string url_host = 7 [(.proto.steam.description) = "Host to GET the file from"];
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CCloud_ClientFileDownload_Response.url_host");
        object = msg->mutable_url_host();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string url_path = 8 [(.proto.steam.description) = "Path on that host to use, including URL parameters if any"];
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CCloud_ClientFileDownload_Response.url_path");
        object = msg->mutable_url_path();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool use_https = 9 [(.proto.steam.description) = "If set, use HTTPS, else use HTTP"];
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_use_https(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders request_headers = 10 [(.proto.steam.description) = "Name-value pairs to be sent in HTTP GET request."];
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CCloud_ClientFileDownload_Response_HTTPHeaders::_InternalParse;
          object = msg->add_request_headers();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 82 && (ptr += 1));
        break;
      }
      // optional bool encrypted = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_encrypted(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CCloud_ClientFileDownload_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCloud_ClientFileDownload_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1 [(.proto.steam.description) = "Application the file belongs to"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 file_size = 2 [(.proto.steam.description) = "file size as transmitted and stored in the Cloud"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_file_size(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 raw_file_size = 3 [(.proto.steam.description) = "file size when decompressed and/or decrypted"];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_raw_file_size(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raw_file_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sha_file = 4 [(.proto.steam.description) = "SHA of file"];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha_file()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 time_stamp = 5 [(.proto.steam.description) = "Timestamp of file"];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_time_stamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_explicit_delete = 6 [(.proto.steam.description) = "True if this is an explicitly deleted file"];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_is_explicit_delete(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_explicit_delete_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url_host = 7 [(.proto.steam.description) = "Host to GET the file from"];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url_host().data(), static_cast<int>(this->url_host().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCloud_ClientFileDownload_Response.url_host");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url_path = 8 [(.proto.steam.description) = "Path on that host to use, including URL parameters if any"];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url_path().data(), static_cast<int>(this->url_path().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCloud_ClientFileDownload_Response.url_path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_https = 9 [(.proto.steam.description) = "If set, use HTTPS, else use HTTP"];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_use_https(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_https_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders request_headers = 10 [(.proto.steam.description) = "Name-value pairs to be sent in HTTP GET request."];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_request_headers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool encrypted = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_encrypted(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCloud_ClientFileDownload_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCloud_ClientFileDownload_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CCloud_ClientFileDownload_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCloud_ClientFileDownload_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.proto.steam.description) = "Application the file belongs to"];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint32 file_size = 2 [(.proto.steam.description) = "file size as transmitted and stored in the Cloud"];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->file_size(), output);
  }

  // optional uint32 raw_file_size = 3 [(.proto.steam.description) = "file size when decompressed and/or decrypted"];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->raw_file_size(), output);
  }

  // optional bytes sha_file = 4 [(.proto.steam.description) = "SHA of file"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->sha_file(), output);
  }

  // optional uint64 time_stamp = 5 [(.proto.steam.description) = "Timestamp of file"];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->time_stamp(), output);
  }

  // optional bool is_explicit_delete = 6 [(.proto.steam.description) = "True if this is an explicitly deleted file"];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_explicit_delete(), output);
  }

  // optional string url_host = 7 [(.proto.steam.description) = "Host to GET the file from"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url_host().data(), static_cast<int>(this->url_host().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_ClientFileDownload_Response.url_host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->url_host(), output);
  }

  // optional string url_path = 8 [(.proto.steam.description) = "Path on that host to use, including URL parameters if any"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url_path().data(), static_cast<int>(this->url_path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_ClientFileDownload_Response.url_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->url_path(), output);
  }

  // optional bool use_https = 9 [(.proto.steam.description) = "If set, use HTTPS, else use HTTP"];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->use_https(), output);
  }

  // repeated .proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders request_headers = 10 [(.proto.steam.description) = "Name-value pairs to be sent in HTTP GET request."];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->request_headers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->request_headers(static_cast<int>(i)),
      output);
  }

  // optional bool encrypted = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->encrypted(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCloud_ClientFileDownload_Response)
}

::google::protobuf::uint8* CCloud_ClientFileDownload_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCloud_ClientFileDownload_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.proto.steam.description) = "Application the file belongs to"];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint32 file_size = 2 [(.proto.steam.description) = "file size as transmitted and stored in the Cloud"];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->file_size(), target);
  }

  // optional uint32 raw_file_size = 3 [(.proto.steam.description) = "file size when decompressed and/or decrypted"];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->raw_file_size(), target);
  }

  // optional bytes sha_file = 4 [(.proto.steam.description) = "SHA of file"];
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->sha_file(), target);
  }

  // optional uint64 time_stamp = 5 [(.proto.steam.description) = "Timestamp of file"];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->time_stamp(), target);
  }

  // optional bool is_explicit_delete = 6 [(.proto.steam.description) = "True if this is an explicitly deleted file"];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_explicit_delete(), target);
  }

  // optional string url_host = 7 [(.proto.steam.description) = "Host to GET the file from"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url_host().data(), static_cast<int>(this->url_host().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_ClientFileDownload_Response.url_host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->url_host(), target);
  }

  // optional string url_path = 8 [(.proto.steam.description) = "Path on that host to use, including URL parameters if any"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url_path().data(), static_cast<int>(this->url_path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_ClientFileDownload_Response.url_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->url_path(), target);
  }

  // optional bool use_https = 9 [(.proto.steam.description) = "If set, use HTTPS, else use HTTP"];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->use_https(), target);
  }

  // repeated .proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders request_headers = 10 [(.proto.steam.description) = "Name-value pairs to be sent in HTTP GET request."];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->request_headers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->request_headers(static_cast<int>(i)), target);
  }

  // optional bool encrypted = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->encrypted(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCloud_ClientFileDownload_Response)
  return target;
}

size_t CCloud_ClientFileDownload_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCloud_ClientFileDownload_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders request_headers = 10 [(.proto.steam.description) = "Name-value pairs to be sent in HTTP GET request."];
  {
    unsigned int count = static_cast<unsigned int>(this->request_headers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->request_headers(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes sha_file = 4 [(.proto.steam.description) = "SHA of file"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha_file());
    }

    // optional string url_host = 7 [(.proto.steam.description) = "Host to GET the file from"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url_host());
    }

    // optional string url_path = 8 [(.proto.steam.description) = "Path on that host to use, including URL parameters if any"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url_path());
    }

    // optional uint32 appid = 1 [(.proto.steam.description) = "Application the file belongs to"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional uint32 file_size = 2 [(.proto.steam.description) = "file size as transmitted and stored in the Cloud"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->file_size());
    }

    // optional uint64 time_stamp = 5 [(.proto.steam.description) = "Timestamp of file"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time_stamp());
    }

    // optional uint32 raw_file_size = 3 [(.proto.steam.description) = "file size when decompressed and/or decrypted"];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raw_file_size());
    }

    // optional bool is_explicit_delete = 6 [(.proto.steam.description) = "True if this is an explicitly deleted file"];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional bool use_https = 9 [(.proto.steam.description) = "If set, use HTTPS, else use HTTP"];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool encrypted = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCloud_ClientFileDownload_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCloud_ClientFileDownload_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_ClientFileDownload_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CCloud_ClientFileDownload_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCloud_ClientFileDownload_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCloud_ClientFileDownload_Response)
    MergeFrom(*source);
  }
}

void CCloud_ClientFileDownload_Response::MergeFrom(const CCloud_ClientFileDownload_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCloud_ClientFileDownload_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  request_headers_.MergeFrom(from.request_headers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      sha_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_file_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      url_host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_host_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      url_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_path_);
    }
    if (cached_has_bits & 0x00000008u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000010u) {
      file_size_ = from.file_size_;
    }
    if (cached_has_bits & 0x00000020u) {
      time_stamp_ = from.time_stamp_;
    }
    if (cached_has_bits & 0x00000040u) {
      raw_file_size_ = from.raw_file_size_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_explicit_delete_ = from.is_explicit_delete_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      use_https_ = from.use_https_;
    }
    if (cached_has_bits & 0x00000200u) {
      encrypted_ = from.encrypted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCloud_ClientFileDownload_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCloud_ClientFileDownload_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_ClientFileDownload_Response::CopyFrom(const CCloud_ClientFileDownload_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCloud_ClientFileDownload_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_ClientFileDownload_Response::IsInitialized() const {
  return true;
}

void CCloud_ClientFileDownload_Response::Swap(CCloud_ClientFileDownload_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_ClientFileDownload_Response::InternalSwap(CCloud_ClientFileDownload_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&request_headers_)->InternalSwap(CastToBase(&other->request_headers_));
  sha_file_.Swap(&other->sha_file_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  url_host_.Swap(&other->url_host_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  url_path_.Swap(&other->url_path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(appid_, other->appid_);
  swap(file_size_, other->file_size_);
  swap(time_stamp_, other->time_stamp_);
  swap(raw_file_size_, other->raw_file_size_);
  swap(is_explicit_delete_, other->is_explicit_delete_);
  swap(use_https_, other->use_https_);
  swap(encrypted_, other->encrypted_);
}

::google::protobuf::Metadata CCloud_ClientFileDownload_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fcloud_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CCloud_ClientDeleteFile_Request::InitAsDefaultInstance() {
}
class CCloud_ClientDeleteFile_Request::HasBitSetters {
 public:
  static void set_has_appid(CCloud_ClientDeleteFile_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_filename(CCloud_ClientDeleteFile_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_is_explicit_delete(CCloud_ClientDeleteFile_Request* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCloud_ClientDeleteFile_Request::kAppidFieldNumber;
const int CCloud_ClientDeleteFile_Request::kFilenameFieldNumber;
const int CCloud_ClientDeleteFile_Request::kIsExplicitDeleteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_ClientDeleteFile_Request::CCloud_ClientDeleteFile_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCloud_ClientDeleteFile_Request)
}
CCloud_ClientDeleteFile_Request::CCloud_ClientDeleteFile_Request(const CCloud_ClientDeleteFile_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_filename()) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_explicit_delete_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(is_explicit_delete_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCloud_ClientDeleteFile_Request)
}

void CCloud_ClientDeleteFile_Request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CCloud_ClientDeleteFile_Request_steammessages_5fcloud_2esteamclient_2eproto.base);
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&appid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_explicit_delete_) -
      reinterpret_cast<char*>(&appid_)) + sizeof(is_explicit_delete_));
}

CCloud_ClientDeleteFile_Request::~CCloud_ClientDeleteFile_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CCloud_ClientDeleteFile_Request)
  SharedDtor();
}

void CCloud_ClientDeleteFile_Request::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CCloud_ClientDeleteFile_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCloud_ClientDeleteFile_Request& CCloud_ClientDeleteFile_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CCloud_ClientDeleteFile_Request_steammessages_5fcloud_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CCloud_ClientDeleteFile_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCloud_ClientDeleteFile_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    filename_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_explicit_delete_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(is_explicit_delete_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CCloud_ClientDeleteFile_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CCloud_ClientDeleteFile_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1 [(.proto.steam.description) = "App ID for which the file is being deleted."];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string filename = 2 [(.proto.steam.description) = "Filename of file."];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CCloud_ClientDeleteFile_Request.filename");
        object = msg->mutable_filename();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool is_explicit_delete = 3 [(.proto.steam.description) = "If true, this is a \'delete\'; if false, it is a \'forget\'"];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_is_explicit_delete(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CCloud_ClientDeleteFile_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCloud_ClientDeleteFile_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1 [(.proto.steam.description) = "App ID for which the file is being deleted."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string filename = 2 [(.proto.steam.description) = "Filename of file."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), static_cast<int>(this->filename().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCloud_ClientDeleteFile_Request.filename");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_explicit_delete = 3 [(.proto.steam.description) = "If true, this is a \'delete\'; if false, it is a \'forget\'"];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_is_explicit_delete(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_explicit_delete_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCloud_ClientDeleteFile_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCloud_ClientDeleteFile_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CCloud_ClientDeleteFile_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCloud_ClientDeleteFile_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.proto.steam.description) = "App ID for which the file is being deleted."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional string filename = 2 [(.proto.steam.description) = "Filename of file."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_ClientDeleteFile_Request.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->filename(), output);
  }

  // optional bool is_explicit_delete = 3 [(.proto.steam.description) = "If true, this is a \'delete\'; if false, it is a \'forget\'"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_explicit_delete(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCloud_ClientDeleteFile_Request)
}

::google::protobuf::uint8* CCloud_ClientDeleteFile_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCloud_ClientDeleteFile_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.proto.steam.description) = "App ID for which the file is being deleted."];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional string filename = 2 [(.proto.steam.description) = "Filename of file."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_ClientDeleteFile_Request.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filename(), target);
  }

  // optional bool is_explicit_delete = 3 [(.proto.steam.description) = "If true, this is a \'delete\'; if false, it is a \'forget\'"];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_explicit_delete(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCloud_ClientDeleteFile_Request)
  return target;
}

size_t CCloud_ClientDeleteFile_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCloud_ClientDeleteFile_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string filename = 2 [(.proto.steam.description) = "Filename of file."];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional uint32 appid = 1 [(.proto.steam.description) = "App ID for which the file is being deleted."];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional bool is_explicit_delete = 3 [(.proto.steam.description) = "If true, this is a \'delete\'; if false, it is a \'forget\'"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCloud_ClientDeleteFile_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCloud_ClientDeleteFile_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_ClientDeleteFile_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CCloud_ClientDeleteFile_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCloud_ClientDeleteFile_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCloud_ClientDeleteFile_Request)
    MergeFrom(*source);
  }
}

void CCloud_ClientDeleteFile_Request::MergeFrom(const CCloud_ClientDeleteFile_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCloud_ClientDeleteFile_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_explicit_delete_ = from.is_explicit_delete_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCloud_ClientDeleteFile_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCloud_ClientDeleteFile_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_ClientDeleteFile_Request::CopyFrom(const CCloud_ClientDeleteFile_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCloud_ClientDeleteFile_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_ClientDeleteFile_Request::IsInitialized() const {
  return true;
}

void CCloud_ClientDeleteFile_Request::Swap(CCloud_ClientDeleteFile_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_ClientDeleteFile_Request::InternalSwap(CCloud_ClientDeleteFile_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  filename_.Swap(&other->filename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(appid_, other->appid_);
  swap(is_explicit_delete_, other->is_explicit_delete_);
}

::google::protobuf::Metadata CCloud_ClientDeleteFile_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fcloud_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CCloud_ClientDeleteFile_Response::InitAsDefaultInstance() {
}
class CCloud_ClientDeleteFile_Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_ClientDeleteFile_Response::CCloud_ClientDeleteFile_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCloud_ClientDeleteFile_Response)
}
CCloud_ClientDeleteFile_Response::CCloud_ClientDeleteFile_Response(const CCloud_ClientDeleteFile_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCloud_ClientDeleteFile_Response)
}

void CCloud_ClientDeleteFile_Response::SharedCtor() {
}

CCloud_ClientDeleteFile_Response::~CCloud_ClientDeleteFile_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CCloud_ClientDeleteFile_Response)
  SharedDtor();
}

void CCloud_ClientDeleteFile_Response::SharedDtor() {
}

void CCloud_ClientDeleteFile_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCloud_ClientDeleteFile_Response& CCloud_ClientDeleteFile_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CCloud_ClientDeleteFile_Response_steammessages_5fcloud_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CCloud_ClientDeleteFile_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCloud_ClientDeleteFile_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CCloud_ClientDeleteFile_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CCloud_ClientDeleteFile_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CCloud_ClientDeleteFile_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCloud_ClientDeleteFile_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCloud_ClientDeleteFile_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCloud_ClientDeleteFile_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CCloud_ClientDeleteFile_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCloud_ClientDeleteFile_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCloud_ClientDeleteFile_Response)
}

::google::protobuf::uint8* CCloud_ClientDeleteFile_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCloud_ClientDeleteFile_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCloud_ClientDeleteFile_Response)
  return target;
}

size_t CCloud_ClientDeleteFile_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCloud_ClientDeleteFile_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCloud_ClientDeleteFile_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCloud_ClientDeleteFile_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_ClientDeleteFile_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CCloud_ClientDeleteFile_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCloud_ClientDeleteFile_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCloud_ClientDeleteFile_Response)
    MergeFrom(*source);
  }
}

void CCloud_ClientDeleteFile_Response::MergeFrom(const CCloud_ClientDeleteFile_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCloud_ClientDeleteFile_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CCloud_ClientDeleteFile_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCloud_ClientDeleteFile_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_ClientDeleteFile_Response::CopyFrom(const CCloud_ClientDeleteFile_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCloud_ClientDeleteFile_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_ClientDeleteFile_Response::IsInitialized() const {
  return true;
}

void CCloud_ClientDeleteFile_Response::Swap(CCloud_ClientDeleteFile_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_ClientDeleteFile_Response::InternalSwap(CCloud_ClientDeleteFile_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CCloud_ClientDeleteFile_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fcloud_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CCloud_ClientConflictResolution_Notification::InitAsDefaultInstance() {
}
class CCloud_ClientConflictResolution_Notification::HasBitSetters {
 public:
  static void set_has_appid(CCloud_ClientConflictResolution_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_chose_local_files(CCloud_ClientConflictResolution_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCloud_ClientConflictResolution_Notification::kAppidFieldNumber;
const int CCloud_ClientConflictResolution_Notification::kChoseLocalFilesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_ClientConflictResolution_Notification::CCloud_ClientConflictResolution_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCloud_ClientConflictResolution_Notification)
}
CCloud_ClientConflictResolution_Notification::CCloud_ClientConflictResolution_Notification(const CCloud_ClientConflictResolution_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&chose_local_files_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(chose_local_files_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCloud_ClientConflictResolution_Notification)
}

void CCloud_ClientConflictResolution_Notification::SharedCtor() {
  ::memset(&appid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chose_local_files_) -
      reinterpret_cast<char*>(&appid_)) + sizeof(chose_local_files_));
}

CCloud_ClientConflictResolution_Notification::~CCloud_ClientConflictResolution_Notification() {
  // @@protoc_insertion_point(destructor:proto.steam.CCloud_ClientConflictResolution_Notification)
  SharedDtor();
}

void CCloud_ClientConflictResolution_Notification::SharedDtor() {
}

void CCloud_ClientConflictResolution_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCloud_ClientConflictResolution_Notification& CCloud_ClientConflictResolution_Notification::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CCloud_ClientConflictResolution_Notification_steammessages_5fcloud_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CCloud_ClientConflictResolution_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCloud_ClientConflictResolution_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chose_local_files_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(chose_local_files_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CCloud_ClientConflictResolution_Notification::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CCloud_ClientConflictResolution_Notification*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1 [(.proto.steam.description) = "App ID for which the conflict was resolved."];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool chose_local_files = 2 [(.proto.steam.description) = "Did the user choose to keep the files local to the machine they are on right now?"];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_chose_local_files(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CCloud_ClientConflictResolution_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCloud_ClientConflictResolution_Notification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1 [(.proto.steam.description) = "App ID for which the conflict was resolved."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool chose_local_files = 2 [(.proto.steam.description) = "Did the user choose to keep the files local to the machine they are on right now?"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_chose_local_files(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &chose_local_files_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCloud_ClientConflictResolution_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCloud_ClientConflictResolution_Notification)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CCloud_ClientConflictResolution_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCloud_ClientConflictResolution_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.proto.steam.description) = "App ID for which the conflict was resolved."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional bool chose_local_files = 2 [(.proto.steam.description) = "Did the user choose to keep the files local to the machine they are on right now?"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->chose_local_files(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCloud_ClientConflictResolution_Notification)
}

::google::protobuf::uint8* CCloud_ClientConflictResolution_Notification::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCloud_ClientConflictResolution_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.proto.steam.description) = "App ID for which the conflict was resolved."];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional bool chose_local_files = 2 [(.proto.steam.description) = "Did the user choose to keep the files local to the machine they are on right now?"];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->chose_local_files(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCloud_ClientConflictResolution_Notification)
  return target;
}

size_t CCloud_ClientConflictResolution_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCloud_ClientConflictResolution_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 appid = 1 [(.proto.steam.description) = "App ID for which the conflict was resolved."];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional bool chose_local_files = 2 [(.proto.steam.description) = "Did the user choose to keep the files local to the machine they are on right now?"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCloud_ClientConflictResolution_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCloud_ClientConflictResolution_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_ClientConflictResolution_Notification* source =
      ::google::protobuf::DynamicCastToGenerated<CCloud_ClientConflictResolution_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCloud_ClientConflictResolution_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCloud_ClientConflictResolution_Notification)
    MergeFrom(*source);
  }
}

void CCloud_ClientConflictResolution_Notification::MergeFrom(const CCloud_ClientConflictResolution_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCloud_ClientConflictResolution_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      chose_local_files_ = from.chose_local_files_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCloud_ClientConflictResolution_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCloud_ClientConflictResolution_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_ClientConflictResolution_Notification::CopyFrom(const CCloud_ClientConflictResolution_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCloud_ClientConflictResolution_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_ClientConflictResolution_Notification::IsInitialized() const {
  return true;
}

void CCloud_ClientConflictResolution_Notification::Swap(CCloud_ClientConflictResolution_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_ClientConflictResolution_Notification::InternalSwap(CCloud_ClientConflictResolution_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(appid_, other->appid_);
  swap(chose_local_files_, other->chose_local_files_);
}

::google::protobuf::Metadata CCloud_ClientConflictResolution_Notification::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fcloud_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CCloud_EnumerateUserApps_Request::InitAsDefaultInstance() {
}
class CCloud_EnumerateUserApps_Request::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_EnumerateUserApps_Request::CCloud_EnumerateUserApps_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCloud_EnumerateUserApps_Request)
}
CCloud_EnumerateUserApps_Request::CCloud_EnumerateUserApps_Request(const CCloud_EnumerateUserApps_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCloud_EnumerateUserApps_Request)
}

void CCloud_EnumerateUserApps_Request::SharedCtor() {
}

CCloud_EnumerateUserApps_Request::~CCloud_EnumerateUserApps_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CCloud_EnumerateUserApps_Request)
  SharedDtor();
}

void CCloud_EnumerateUserApps_Request::SharedDtor() {
}

void CCloud_EnumerateUserApps_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCloud_EnumerateUserApps_Request& CCloud_EnumerateUserApps_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CCloud_EnumerateUserApps_Request_steammessages_5fcloud_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CCloud_EnumerateUserApps_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCloud_EnumerateUserApps_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CCloud_EnumerateUserApps_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CCloud_EnumerateUserApps_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CCloud_EnumerateUserApps_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCloud_EnumerateUserApps_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCloud_EnumerateUserApps_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCloud_EnumerateUserApps_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CCloud_EnumerateUserApps_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCloud_EnumerateUserApps_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCloud_EnumerateUserApps_Request)
}

::google::protobuf::uint8* CCloud_EnumerateUserApps_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCloud_EnumerateUserApps_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCloud_EnumerateUserApps_Request)
  return target;
}

size_t CCloud_EnumerateUserApps_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCloud_EnumerateUserApps_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCloud_EnumerateUserApps_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCloud_EnumerateUserApps_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_EnumerateUserApps_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CCloud_EnumerateUserApps_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCloud_EnumerateUserApps_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCloud_EnumerateUserApps_Request)
    MergeFrom(*source);
  }
}

void CCloud_EnumerateUserApps_Request::MergeFrom(const CCloud_EnumerateUserApps_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCloud_EnumerateUserApps_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CCloud_EnumerateUserApps_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCloud_EnumerateUserApps_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_EnumerateUserApps_Request::CopyFrom(const CCloud_EnumerateUserApps_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCloud_EnumerateUserApps_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_EnumerateUserApps_Request::IsInitialized() const {
  return true;
}

void CCloud_EnumerateUserApps_Request::Swap(CCloud_EnumerateUserApps_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_EnumerateUserApps_Request::InternalSwap(CCloud_EnumerateUserApps_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CCloud_EnumerateUserApps_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fcloud_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CCloud_EnumerateUserApps_Response_Apps::InitAsDefaultInstance() {
}
class CCloud_EnumerateUserApps_Response_Apps::HasBitSetters {
 public:
  static void set_has_appid(CCloud_EnumerateUserApps_Response_Apps* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_totalcount(CCloud_EnumerateUserApps_Response_Apps* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_totalsize(CCloud_EnumerateUserApps_Response_Apps* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCloud_EnumerateUserApps_Response_Apps::kAppidFieldNumber;
const int CCloud_EnumerateUserApps_Response_Apps::kTotalcountFieldNumber;
const int CCloud_EnumerateUserApps_Response_Apps::kTotalsizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_EnumerateUserApps_Response_Apps::CCloud_EnumerateUserApps_Response_Apps()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCloud_EnumerateUserApps_Response.Apps)
}
CCloud_EnumerateUserApps_Response_Apps::CCloud_EnumerateUserApps_Response_Apps(const CCloud_EnumerateUserApps_Response_Apps& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&totalsize_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(totalsize_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCloud_EnumerateUserApps_Response.Apps)
}

void CCloud_EnumerateUserApps_Response_Apps::SharedCtor() {
  ::memset(&appid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&totalsize_) -
      reinterpret_cast<char*>(&appid_)) + sizeof(totalsize_));
}

CCloud_EnumerateUserApps_Response_Apps::~CCloud_EnumerateUserApps_Response_Apps() {
  // @@protoc_insertion_point(destructor:proto.steam.CCloud_EnumerateUserApps_Response.Apps)
  SharedDtor();
}

void CCloud_EnumerateUserApps_Response_Apps::SharedDtor() {
}

void CCloud_EnumerateUserApps_Response_Apps::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCloud_EnumerateUserApps_Response_Apps& CCloud_EnumerateUserApps_Response_Apps::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CCloud_EnumerateUserApps_Response_Apps_steammessages_5fcloud_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CCloud_EnumerateUserApps_Response_Apps::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCloud_EnumerateUserApps_Response.Apps)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&totalsize_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(totalsize_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CCloud_EnumerateUserApps_Response_Apps::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CCloud_EnumerateUserApps_Response_Apps*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 totalcount = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_totalcount(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int64 totalsize = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_totalsize(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CCloud_EnumerateUserApps_Response_Apps::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCloud_EnumerateUserApps_Response.Apps)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 totalcount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_totalcount(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 totalsize = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_totalsize(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &totalsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCloud_EnumerateUserApps_Response.Apps)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCloud_EnumerateUserApps_Response.Apps)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CCloud_EnumerateUserApps_Response_Apps::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCloud_EnumerateUserApps_Response.Apps)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional int32 totalcount = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->totalcount(), output);
  }

  // optional int64 totalsize = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->totalsize(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCloud_EnumerateUserApps_Response.Apps)
}

::google::protobuf::uint8* CCloud_EnumerateUserApps_Response_Apps::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCloud_EnumerateUserApps_Response.Apps)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional int32 totalcount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->totalcount(), target);
  }

  // optional int64 totalsize = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->totalsize(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCloud_EnumerateUserApps_Response.Apps)
  return target;
}

size_t CCloud_EnumerateUserApps_Response_Apps::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCloud_EnumerateUserApps_Response.Apps)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional int32 totalcount = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalcount());
    }

    // optional int64 totalsize = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->totalsize());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCloud_EnumerateUserApps_Response_Apps::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCloud_EnumerateUserApps_Response.Apps)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_EnumerateUserApps_Response_Apps* source =
      ::google::protobuf::DynamicCastToGenerated<CCloud_EnumerateUserApps_Response_Apps>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCloud_EnumerateUserApps_Response.Apps)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCloud_EnumerateUserApps_Response.Apps)
    MergeFrom(*source);
  }
}

void CCloud_EnumerateUserApps_Response_Apps::MergeFrom(const CCloud_EnumerateUserApps_Response_Apps& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCloud_EnumerateUserApps_Response.Apps)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      totalcount_ = from.totalcount_;
    }
    if (cached_has_bits & 0x00000004u) {
      totalsize_ = from.totalsize_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCloud_EnumerateUserApps_Response_Apps::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCloud_EnumerateUserApps_Response.Apps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_EnumerateUserApps_Response_Apps::CopyFrom(const CCloud_EnumerateUserApps_Response_Apps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCloud_EnumerateUserApps_Response.Apps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_EnumerateUserApps_Response_Apps::IsInitialized() const {
  return true;
}

void CCloud_EnumerateUserApps_Response_Apps::Swap(CCloud_EnumerateUserApps_Response_Apps* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_EnumerateUserApps_Response_Apps::InternalSwap(CCloud_EnumerateUserApps_Response_Apps* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(appid_, other->appid_);
  swap(totalcount_, other->totalcount_);
  swap(totalsize_, other->totalsize_);
}

::google::protobuf::Metadata CCloud_EnumerateUserApps_Response_Apps::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fcloud_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CCloud_EnumerateUserApps_Response::InitAsDefaultInstance() {
}
class CCloud_EnumerateUserApps_Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCloud_EnumerateUserApps_Response::kAppsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_EnumerateUserApps_Response::CCloud_EnumerateUserApps_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCloud_EnumerateUserApps_Response)
}
CCloud_EnumerateUserApps_Response::CCloud_EnumerateUserApps_Response(const CCloud_EnumerateUserApps_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      apps_(from.apps_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCloud_EnumerateUserApps_Response)
}

void CCloud_EnumerateUserApps_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CCloud_EnumerateUserApps_Response_steammessages_5fcloud_2esteamclient_2eproto.base);
}

CCloud_EnumerateUserApps_Response::~CCloud_EnumerateUserApps_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CCloud_EnumerateUserApps_Response)
  SharedDtor();
}

void CCloud_EnumerateUserApps_Response::SharedDtor() {
}

void CCloud_EnumerateUserApps_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCloud_EnumerateUserApps_Response& CCloud_EnumerateUserApps_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CCloud_EnumerateUserApps_Response_steammessages_5fcloud_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CCloud_EnumerateUserApps_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCloud_EnumerateUserApps_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  apps_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CCloud_EnumerateUserApps_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CCloud_EnumerateUserApps_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.steam.CCloud_EnumerateUserApps_Response.Apps apps = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CCloud_EnumerateUserApps_Response_Apps::_InternalParse;
          object = msg->add_apps();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CCloud_EnumerateUserApps_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCloud_EnumerateUserApps_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CCloud_EnumerateUserApps_Response.Apps apps = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_apps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCloud_EnumerateUserApps_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCloud_EnumerateUserApps_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CCloud_EnumerateUserApps_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCloud_EnumerateUserApps_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CCloud_EnumerateUserApps_Response.Apps apps = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->apps_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->apps(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCloud_EnumerateUserApps_Response)
}

::google::protobuf::uint8* CCloud_EnumerateUserApps_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCloud_EnumerateUserApps_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CCloud_EnumerateUserApps_Response.Apps apps = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->apps_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->apps(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCloud_EnumerateUserApps_Response)
  return target;
}

size_t CCloud_EnumerateUserApps_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCloud_EnumerateUserApps_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CCloud_EnumerateUserApps_Response.Apps apps = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->apps_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->apps(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCloud_EnumerateUserApps_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCloud_EnumerateUserApps_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_EnumerateUserApps_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CCloud_EnumerateUserApps_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCloud_EnumerateUserApps_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCloud_EnumerateUserApps_Response)
    MergeFrom(*source);
  }
}

void CCloud_EnumerateUserApps_Response::MergeFrom(const CCloud_EnumerateUserApps_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCloud_EnumerateUserApps_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  apps_.MergeFrom(from.apps_);
}

void CCloud_EnumerateUserApps_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCloud_EnumerateUserApps_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_EnumerateUserApps_Response::CopyFrom(const CCloud_EnumerateUserApps_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCloud_EnumerateUserApps_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_EnumerateUserApps_Response::IsInitialized() const {
  return true;
}

void CCloud_EnumerateUserApps_Response::Swap(CCloud_EnumerateUserApps_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_EnumerateUserApps_Response::InternalSwap(CCloud_EnumerateUserApps_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&apps_)->InternalSwap(CastToBase(&other->apps_));
}

::google::protobuf::Metadata CCloud_EnumerateUserApps_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fcloud_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

Cloud::~Cloud() {}

const ::google::protobuf::ServiceDescriptor* Cloud::descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_steammessages_5fcloud_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5fcloud_2esteamclient_2eproto[0];
}

const ::google::protobuf::ServiceDescriptor* Cloud::GetDescriptor() {
  return descriptor();
}

void Cloud::GetUploadServerInfo(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CCloud_GetUploadServerInfo_Request*,
                         ::proto::steam::CCloud_GetUploadServerInfo_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetUploadServerInfo() not implemented.");
  done->Run();
}

void Cloud::BeginHTTPUpload(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CCloud_BeginHTTPUpload_Request*,
                         ::proto::steam::CCloud_BeginHTTPUpload_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method BeginHTTPUpload() not implemented.");
  done->Run();
}

void Cloud::CommitHTTPUpload(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CCloud_CommitHTTPUpload_Request*,
                         ::proto::steam::CCloud_CommitHTTPUpload_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CommitHTTPUpload() not implemented.");
  done->Run();
}

void Cloud::GetFileDetails(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CCloud_GetFileDetails_Request*,
                         ::proto::steam::CCloud_GetFileDetails_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetFileDetails() not implemented.");
  done->Run();
}

void Cloud::EnumerateUserFiles(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CCloud_EnumerateUserFiles_Request*,
                         ::proto::steam::CCloud_EnumerateUserFiles_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method EnumerateUserFiles() not implemented.");
  done->Run();
}

void Cloud::Delete(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CCloud_Delete_Request*,
                         ::proto::steam::CCloud_Delete_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Delete() not implemented.");
  done->Run();
}

void Cloud::GetClientEncryptionKey(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CCloud_GetClientEncryptionKey_Request*,
                         ::proto::steam::CCloud_GetClientEncryptionKey_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetClientEncryptionKey() not implemented.");
  done->Run();
}

void Cloud::CDNReport(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CCloud_CDNReport_Notification*,
                         ::proto::steam::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CDNReport() not implemented.");
  done->Run();
}

void Cloud::ExternalStorageTransferReport(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CCloud_ExternalStorageTransferReport_Notification*,
                         ::proto::steam::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ExternalStorageTransferReport() not implemented.");
  done->Run();
}

void Cloud::ClientBeginFileUpload(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CCloud_ClientBeginFileUpload_Request*,
                         ::proto::steam::CCloud_ClientBeginFileUpload_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ClientBeginFileUpload() not implemented.");
  done->Run();
}

void Cloud::ClientCommitFileUpload(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CCloud_ClientCommitFileUpload_Request*,
                         ::proto::steam::CCloud_ClientCommitFileUpload_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ClientCommitFileUpload() not implemented.");
  done->Run();
}

void Cloud::ClientFileDownload(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CCloud_ClientFileDownload_Request*,
                         ::proto::steam::CCloud_ClientFileDownload_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ClientFileDownload() not implemented.");
  done->Run();
}

void Cloud::ClientDeleteFile(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CCloud_ClientDeleteFile_Request*,
                         ::proto::steam::CCloud_ClientDeleteFile_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ClientDeleteFile() not implemented.");
  done->Run();
}

void Cloud::ClientConflictResolution(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CCloud_ClientConflictResolution_Notification*,
                         ::proto::steam::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ClientConflictResolution() not implemented.");
  done->Run();
}

void Cloud::EnumerateUserApps(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CCloud_EnumerateUserApps_Request*,
                         ::proto::steam::CCloud_EnumerateUserApps_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method EnumerateUserApps() not implemented.");
  done->Run();
}

void Cloud::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5fcloud_2esteamclient_2eproto[0]);
  switch(method->index()) {
    case 0:
      GetUploadServerInfo(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CCloud_GetUploadServerInfo_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CCloud_GetUploadServerInfo_Response*>(response),
             done);
      break;
    case 1:
      BeginHTTPUpload(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CCloud_BeginHTTPUpload_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CCloud_BeginHTTPUpload_Response*>(response),
             done);
      break;
    case 2:
      CommitHTTPUpload(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CCloud_CommitHTTPUpload_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CCloud_CommitHTTPUpload_Response*>(response),
             done);
      break;
    case 3:
      GetFileDetails(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CCloud_GetFileDetails_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CCloud_GetFileDetails_Response*>(response),
             done);
      break;
    case 4:
      EnumerateUserFiles(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CCloud_EnumerateUserFiles_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CCloud_EnumerateUserFiles_Response*>(response),
             done);
      break;
    case 5:
      Delete(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CCloud_Delete_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CCloud_Delete_Response*>(response),
             done);
      break;
    case 6:
      GetClientEncryptionKey(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CCloud_GetClientEncryptionKey_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CCloud_GetClientEncryptionKey_Response*>(response),
             done);
      break;
    case 7:
      CDNReport(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CCloud_CDNReport_Notification*>(request),
             ::google::protobuf::down_cast< ::proto::steam::NoResponse*>(response),
             done);
      break;
    case 8:
      ExternalStorageTransferReport(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CCloud_ExternalStorageTransferReport_Notification*>(request),
             ::google::protobuf::down_cast< ::proto::steam::NoResponse*>(response),
             done);
      break;
    case 9:
      ClientBeginFileUpload(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CCloud_ClientBeginFileUpload_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CCloud_ClientBeginFileUpload_Response*>(response),
             done);
      break;
    case 10:
      ClientCommitFileUpload(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CCloud_ClientCommitFileUpload_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CCloud_ClientCommitFileUpload_Response*>(response),
             done);
      break;
    case 11:
      ClientFileDownload(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CCloud_ClientFileDownload_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CCloud_ClientFileDownload_Response*>(response),
             done);
      break;
    case 12:
      ClientDeleteFile(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CCloud_ClientDeleteFile_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CCloud_ClientDeleteFile_Response*>(response),
             done);
      break;
    case 13:
      ClientConflictResolution(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CCloud_ClientConflictResolution_Notification*>(request),
             ::google::protobuf::down_cast< ::proto::steam::NoResponse*>(response),
             done);
      break;
    case 14:
      EnumerateUserApps(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CCloud_EnumerateUserApps_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CCloud_EnumerateUserApps_Response*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& Cloud::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CCloud_GetUploadServerInfo_Request::default_instance();
    case 1:
      return ::proto::steam::CCloud_BeginHTTPUpload_Request::default_instance();
    case 2:
      return ::proto::steam::CCloud_CommitHTTPUpload_Request::default_instance();
    case 3:
      return ::proto::steam::CCloud_GetFileDetails_Request::default_instance();
    case 4:
      return ::proto::steam::CCloud_EnumerateUserFiles_Request::default_instance();
    case 5:
      return ::proto::steam::CCloud_Delete_Request::default_instance();
    case 6:
      return ::proto::steam::CCloud_GetClientEncryptionKey_Request::default_instance();
    case 7:
      return ::proto::steam::CCloud_CDNReport_Notification::default_instance();
    case 8:
      return ::proto::steam::CCloud_ExternalStorageTransferReport_Notification::default_instance();
    case 9:
      return ::proto::steam::CCloud_ClientBeginFileUpload_Request::default_instance();
    case 10:
      return ::proto::steam::CCloud_ClientCommitFileUpload_Request::default_instance();
    case 11:
      return ::proto::steam::CCloud_ClientFileDownload_Request::default_instance();
    case 12:
      return ::proto::steam::CCloud_ClientDeleteFile_Request::default_instance();
    case 13:
      return ::proto::steam::CCloud_ClientConflictResolution_Notification::default_instance();
    case 14:
      return ::proto::steam::CCloud_EnumerateUserApps_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& Cloud::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CCloud_GetUploadServerInfo_Response::default_instance();
    case 1:
      return ::proto::steam::CCloud_BeginHTTPUpload_Response::default_instance();
    case 2:
      return ::proto::steam::CCloud_CommitHTTPUpload_Response::default_instance();
    case 3:
      return ::proto::steam::CCloud_GetFileDetails_Response::default_instance();
    case 4:
      return ::proto::steam::CCloud_EnumerateUserFiles_Response::default_instance();
    case 5:
      return ::proto::steam::CCloud_Delete_Response::default_instance();
    case 6:
      return ::proto::steam::CCloud_GetClientEncryptionKey_Response::default_instance();
    case 7:
      return ::proto::steam::NoResponse::default_instance();
    case 8:
      return ::proto::steam::NoResponse::default_instance();
    case 9:
      return ::proto::steam::CCloud_ClientBeginFileUpload_Response::default_instance();
    case 10:
      return ::proto::steam::CCloud_ClientCommitFileUpload_Response::default_instance();
    case 11:
      return ::proto::steam::CCloud_ClientFileDownload_Response::default_instance();
    case 12:
      return ::proto::steam::CCloud_ClientDeleteFile_Response::default_instance();
    case 13:
      return ::proto::steam::NoResponse::default_instance();
    case 14:
      return ::proto::steam::CCloud_EnumerateUserApps_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

Cloud_Stub::Cloud_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
Cloud_Stub::Cloud_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
Cloud_Stub::~Cloud_Stub() {
  if (owns_channel_) delete channel_;
}

void Cloud_Stub::GetUploadServerInfo(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CCloud_GetUploadServerInfo_Request* request,
                              ::proto::steam::CCloud_GetUploadServerInfo_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void Cloud_Stub::BeginHTTPUpload(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CCloud_BeginHTTPUpload_Request* request,
                              ::proto::steam::CCloud_BeginHTTPUpload_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void Cloud_Stub::CommitHTTPUpload(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CCloud_CommitHTTPUpload_Request* request,
                              ::proto::steam::CCloud_CommitHTTPUpload_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void Cloud_Stub::GetFileDetails(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CCloud_GetFileDetails_Request* request,
                              ::proto::steam::CCloud_GetFileDetails_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void Cloud_Stub::EnumerateUserFiles(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CCloud_EnumerateUserFiles_Request* request,
                              ::proto::steam::CCloud_EnumerateUserFiles_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void Cloud_Stub::Delete(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CCloud_Delete_Request* request,
                              ::proto::steam::CCloud_Delete_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void Cloud_Stub::GetClientEncryptionKey(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CCloud_GetClientEncryptionKey_Request* request,
                              ::proto::steam::CCloud_GetClientEncryptionKey_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void Cloud_Stub::CDNReport(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CCloud_CDNReport_Notification* request,
                              ::proto::steam::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}
void Cloud_Stub::ExternalStorageTransferReport(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CCloud_ExternalStorageTransferReport_Notification* request,
                              ::proto::steam::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(8),
                       controller, request, response, done);
}
void Cloud_Stub::ClientBeginFileUpload(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CCloud_ClientBeginFileUpload_Request* request,
                              ::proto::steam::CCloud_ClientBeginFileUpload_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(9),
                       controller, request, response, done);
}
void Cloud_Stub::ClientCommitFileUpload(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CCloud_ClientCommitFileUpload_Request* request,
                              ::proto::steam::CCloud_ClientCommitFileUpload_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(10),
                       controller, request, response, done);
}
void Cloud_Stub::ClientFileDownload(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CCloud_ClientFileDownload_Request* request,
                              ::proto::steam::CCloud_ClientFileDownload_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(11),
                       controller, request, response, done);
}
void Cloud_Stub::ClientDeleteFile(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CCloud_ClientDeleteFile_Request* request,
                              ::proto::steam::CCloud_ClientDeleteFile_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(12),
                       controller, request, response, done);
}
void Cloud_Stub::ClientConflictResolution(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CCloud_ClientConflictResolution_Notification* request,
                              ::proto::steam::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(13),
                       controller, request, response, done);
}
void Cloud_Stub::EnumerateUserApps(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CCloud_EnumerateUserApps_Request* request,
                              ::proto::steam::CCloud_EnumerateUserApps_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(14),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace steam
}  // namespace proto
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::proto::steam::CCloud_GetUploadServerInfo_Request* Arena::CreateMaybeMessage< ::proto::steam::CCloud_GetUploadServerInfo_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CCloud_GetUploadServerInfo_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CCloud_GetUploadServerInfo_Response* Arena::CreateMaybeMessage< ::proto::steam::CCloud_GetUploadServerInfo_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CCloud_GetUploadServerInfo_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CCloud_BeginHTTPUpload_Request* Arena::CreateMaybeMessage< ::proto::steam::CCloud_BeginHTTPUpload_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CCloud_BeginHTTPUpload_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CCloud_BeginHTTPUpload_Response_HTTPHeaders* Arena::CreateMaybeMessage< ::proto::steam::CCloud_BeginHTTPUpload_Response_HTTPHeaders >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CCloud_BeginHTTPUpload_Response_HTTPHeaders >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CCloud_BeginHTTPUpload_Response* Arena::CreateMaybeMessage< ::proto::steam::CCloud_BeginHTTPUpload_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CCloud_BeginHTTPUpload_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CCloud_CommitHTTPUpload_Request* Arena::CreateMaybeMessage< ::proto::steam::CCloud_CommitHTTPUpload_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CCloud_CommitHTTPUpload_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CCloud_CommitHTTPUpload_Response* Arena::CreateMaybeMessage< ::proto::steam::CCloud_CommitHTTPUpload_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CCloud_CommitHTTPUpload_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CCloud_GetFileDetails_Request* Arena::CreateMaybeMessage< ::proto::steam::CCloud_GetFileDetails_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CCloud_GetFileDetails_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CCloud_UserFile* Arena::CreateMaybeMessage< ::proto::steam::CCloud_UserFile >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CCloud_UserFile >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CCloud_GetFileDetails_Response* Arena::CreateMaybeMessage< ::proto::steam::CCloud_GetFileDetails_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CCloud_GetFileDetails_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CCloud_EnumerateUserFiles_Request* Arena::CreateMaybeMessage< ::proto::steam::CCloud_EnumerateUserFiles_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CCloud_EnumerateUserFiles_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CCloud_EnumerateUserFiles_Response* Arena::CreateMaybeMessage< ::proto::steam::CCloud_EnumerateUserFiles_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CCloud_EnumerateUserFiles_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CCloud_Delete_Request* Arena::CreateMaybeMessage< ::proto::steam::CCloud_Delete_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CCloud_Delete_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CCloud_Delete_Response* Arena::CreateMaybeMessage< ::proto::steam::CCloud_Delete_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CCloud_Delete_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CCloud_GetClientEncryptionKey_Request* Arena::CreateMaybeMessage< ::proto::steam::CCloud_GetClientEncryptionKey_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CCloud_GetClientEncryptionKey_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CCloud_GetClientEncryptionKey_Response* Arena::CreateMaybeMessage< ::proto::steam::CCloud_GetClientEncryptionKey_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CCloud_GetClientEncryptionKey_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CCloud_CDNReport_Notification* Arena::CreateMaybeMessage< ::proto::steam::CCloud_CDNReport_Notification >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CCloud_CDNReport_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CCloud_ExternalStorageTransferReport_Notification* Arena::CreateMaybeMessage< ::proto::steam::CCloud_ExternalStorageTransferReport_Notification >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CCloud_ExternalStorageTransferReport_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CCloud_ClientBeginFileUpload_Request* Arena::CreateMaybeMessage< ::proto::steam::CCloud_ClientBeginFileUpload_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CCloud_ClientBeginFileUpload_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::ClientCloudFileUploadBlockDetails_HTTPHeaders* Arena::CreateMaybeMessage< ::proto::steam::ClientCloudFileUploadBlockDetails_HTTPHeaders >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::ClientCloudFileUploadBlockDetails_HTTPHeaders >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::ClientCloudFileUploadBlockDetails* Arena::CreateMaybeMessage< ::proto::steam::ClientCloudFileUploadBlockDetails >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::ClientCloudFileUploadBlockDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CCloud_ClientBeginFileUpload_Response* Arena::CreateMaybeMessage< ::proto::steam::CCloud_ClientBeginFileUpload_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CCloud_ClientBeginFileUpload_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CCloud_ClientCommitFileUpload_Request* Arena::CreateMaybeMessage< ::proto::steam::CCloud_ClientCommitFileUpload_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CCloud_ClientCommitFileUpload_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CCloud_ClientCommitFileUpload_Response* Arena::CreateMaybeMessage< ::proto::steam::CCloud_ClientCommitFileUpload_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CCloud_ClientCommitFileUpload_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CCloud_ClientFileDownload_Request* Arena::CreateMaybeMessage< ::proto::steam::CCloud_ClientFileDownload_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CCloud_ClientFileDownload_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CCloud_ClientFileDownload_Response_HTTPHeaders* Arena::CreateMaybeMessage< ::proto::steam::CCloud_ClientFileDownload_Response_HTTPHeaders >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CCloud_ClientFileDownload_Response_HTTPHeaders >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CCloud_ClientFileDownload_Response* Arena::CreateMaybeMessage< ::proto::steam::CCloud_ClientFileDownload_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CCloud_ClientFileDownload_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CCloud_ClientDeleteFile_Request* Arena::CreateMaybeMessage< ::proto::steam::CCloud_ClientDeleteFile_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CCloud_ClientDeleteFile_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CCloud_ClientDeleteFile_Response* Arena::CreateMaybeMessage< ::proto::steam::CCloud_ClientDeleteFile_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CCloud_ClientDeleteFile_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CCloud_ClientConflictResolution_Notification* Arena::CreateMaybeMessage< ::proto::steam::CCloud_ClientConflictResolution_Notification >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CCloud_ClientConflictResolution_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CCloud_EnumerateUserApps_Request* Arena::CreateMaybeMessage< ::proto::steam::CCloud_EnumerateUserApps_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CCloud_EnumerateUserApps_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CCloud_EnumerateUserApps_Response_Apps* Arena::CreateMaybeMessage< ::proto::steam::CCloud_EnumerateUserApps_Response_Apps >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CCloud_EnumerateUserApps_Response_Apps >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CCloud_EnumerateUserApps_Response* Arena::CreateMaybeMessage< ::proto::steam::CCloud_EnumerateUserApps_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CCloud_EnumerateUserApps_Response >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
