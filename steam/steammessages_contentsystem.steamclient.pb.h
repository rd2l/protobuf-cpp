// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_contentsystem.steamclient.proto

#ifndef PROTOBUF_INCLUDED_steammessages_5fcontentsystem_2esteamclient_2eproto
#define PROTOBUF_INCLUDED_steammessages_5fcontentsystem_2esteamclient_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages_unified_base.steamclient.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5fcontentsystem_2esteamclient_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5fcontentsystem_2esteamclient_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_steammessages_5fcontentsystem_2esteamclient_2eproto();
namespace proto {
namespace steam {
class CContentServerDirectory_GetServersForSteamPipe_Request;
class CContentServerDirectory_GetServersForSteamPipe_RequestDefaultTypeInternal;
extern CContentServerDirectory_GetServersForSteamPipe_RequestDefaultTypeInternal _CContentServerDirectory_GetServersForSteamPipe_Request_default_instance_;
class CContentServerDirectory_GetServersForSteamPipe_Response;
class CContentServerDirectory_GetServersForSteamPipe_ResponseDefaultTypeInternal;
extern CContentServerDirectory_GetServersForSteamPipe_ResponseDefaultTypeInternal _CContentServerDirectory_GetServersForSteamPipe_Response_default_instance_;
class CContentServerDirectory_ServerInfo;
class CContentServerDirectory_ServerInfoDefaultTypeInternal;
extern CContentServerDirectory_ServerInfoDefaultTypeInternal _CContentServerDirectory_ServerInfo_default_instance_;
}  // namespace steam
}  // namespace proto
namespace google {
namespace protobuf {
template<> ::proto::steam::CContentServerDirectory_GetServersForSteamPipe_Request* Arena::CreateMaybeMessage<::proto::steam::CContentServerDirectory_GetServersForSteamPipe_Request>(Arena*);
template<> ::proto::steam::CContentServerDirectory_GetServersForSteamPipe_Response* Arena::CreateMaybeMessage<::proto::steam::CContentServerDirectory_GetServersForSteamPipe_Response>(Arena*);
template<> ::proto::steam::CContentServerDirectory_ServerInfo* Arena::CreateMaybeMessage<::proto::steam::CContentServerDirectory_ServerInfo>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace proto {
namespace steam {

// ===================================================================

class CContentServerDirectory_GetServersForSteamPipe_Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CContentServerDirectory_GetServersForSteamPipe_Request) */ {
 public:
  CContentServerDirectory_GetServersForSteamPipe_Request();
  virtual ~CContentServerDirectory_GetServersForSteamPipe_Request();

  CContentServerDirectory_GetServersForSteamPipe_Request(const CContentServerDirectory_GetServersForSteamPipe_Request& from);

  inline CContentServerDirectory_GetServersForSteamPipe_Request& operator=(const CContentServerDirectory_GetServersForSteamPipe_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CContentServerDirectory_GetServersForSteamPipe_Request(CContentServerDirectory_GetServersForSteamPipe_Request&& from) noexcept
    : CContentServerDirectory_GetServersForSteamPipe_Request() {
    *this = ::std::move(from);
  }

  inline CContentServerDirectory_GetServersForSteamPipe_Request& operator=(CContentServerDirectory_GetServersForSteamPipe_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CContentServerDirectory_GetServersForSteamPipe_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CContentServerDirectory_GetServersForSteamPipe_Request* internal_default_instance() {
    return reinterpret_cast<const CContentServerDirectory_GetServersForSteamPipe_Request*>(
               &_CContentServerDirectory_GetServersForSteamPipe_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CContentServerDirectory_GetServersForSteamPipe_Request* other);
  friend void swap(CContentServerDirectory_GetServersForSteamPipe_Request& a, CContentServerDirectory_GetServersForSteamPipe_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CContentServerDirectory_GetServersForSteamPipe_Request* New() const final {
    return CreateMaybeMessage<CContentServerDirectory_GetServersForSteamPipe_Request>(nullptr);
  }

  CContentServerDirectory_GetServersForSteamPipe_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CContentServerDirectory_GetServersForSteamPipe_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CContentServerDirectory_GetServersForSteamPipe_Request& from);
  void MergeFrom(const CContentServerDirectory_GetServersForSteamPipe_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CContentServerDirectory_GetServersForSteamPipe_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ip_override = 3 [(.proto.steam.description) = "client IP address"];
  bool has_ip_override() const;
  void clear_ip_override();
  static const int kIpOverrideFieldNumber = 3;
  const ::std::string& ip_override() const;
  void set_ip_override(const ::std::string& value);
  #if LANG_CXX11
  void set_ip_override(::std::string&& value);
  #endif
  void set_ip_override(const char* value);
  void set_ip_override(const char* value, size_t size);
  ::std::string* mutable_ip_override();
  ::std::string* release_ip_override();
  void set_allocated_ip_override(::std::string* ip_override);

  // optional uint32 cell_id = 1 [(.proto.steam.description) = "client Cell ID"];
  bool has_cell_id() const;
  void clear_cell_id();
  static const int kCellIdFieldNumber = 1;
  ::google::protobuf::uint32 cell_id() const;
  void set_cell_id(::google::protobuf::uint32 value);

  // optional int32 launcher_type = 4 [default = 0, (.proto.steam.description) = "launcher type"];
  bool has_launcher_type() const;
  void clear_launcher_type();
  static const int kLauncherTypeFieldNumber = 4;
  ::google::protobuf::int32 launcher_type() const;
  void set_launcher_type(::google::protobuf::int32 value);

  // optional uint32 max_servers = 2 [default = 20, (.proto.steam.description) = "max servers in response list"];
  bool has_max_servers() const;
  void clear_max_servers();
  static const int kMaxServersFieldNumber = 2;
  ::google::protobuf::uint32 max_servers() const;
  void set_max_servers(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CContentServerDirectory_GetServersForSteamPipe_Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr ip_override_;
  ::google::protobuf::uint32 cell_id_;
  ::google::protobuf::int32 launcher_type_;
  ::google::protobuf::uint32 max_servers_;
  friend struct ::TableStruct_steammessages_5fcontentsystem_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CContentServerDirectory_ServerInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CContentServerDirectory_ServerInfo) */ {
 public:
  CContentServerDirectory_ServerInfo();
  virtual ~CContentServerDirectory_ServerInfo();

  CContentServerDirectory_ServerInfo(const CContentServerDirectory_ServerInfo& from);

  inline CContentServerDirectory_ServerInfo& operator=(const CContentServerDirectory_ServerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CContentServerDirectory_ServerInfo(CContentServerDirectory_ServerInfo&& from) noexcept
    : CContentServerDirectory_ServerInfo() {
    *this = ::std::move(from);
  }

  inline CContentServerDirectory_ServerInfo& operator=(CContentServerDirectory_ServerInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CContentServerDirectory_ServerInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CContentServerDirectory_ServerInfo* internal_default_instance() {
    return reinterpret_cast<const CContentServerDirectory_ServerInfo*>(
               &_CContentServerDirectory_ServerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CContentServerDirectory_ServerInfo* other);
  friend void swap(CContentServerDirectory_ServerInfo& a, CContentServerDirectory_ServerInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CContentServerDirectory_ServerInfo* New() const final {
    return CreateMaybeMessage<CContentServerDirectory_ServerInfo>(nullptr);
  }

  CContentServerDirectory_ServerInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CContentServerDirectory_ServerInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CContentServerDirectory_ServerInfo& from);
  void MergeFrom(const CContentServerDirectory_ServerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CContentServerDirectory_ServerInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 allowed_app_ids = 13;
  int allowed_app_ids_size() const;
  void clear_allowed_app_ids();
  static const int kAllowedAppIdsFieldNumber = 13;
  ::google::protobuf::uint32 allowed_app_ids(int index) const;
  void set_allowed_app_ids(int index, ::google::protobuf::uint32 value);
  void add_allowed_app_ids(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      allowed_app_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_allowed_app_ids();

  // optional string type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional string host = 8;
  bool has_host() const;
  void clear_host();
  static const int kHostFieldNumber = 8;
  const ::std::string& host() const;
  void set_host(const ::std::string& value);
  #if LANG_CXX11
  void set_host(::std::string&& value);
  #endif
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  ::std::string* mutable_host();
  ::std::string* release_host();
  void set_allocated_host(::std::string* host);

  // optional string vhost = 9;
  bool has_vhost() const;
  void clear_vhost();
  static const int kVhostFieldNumber = 9;
  const ::std::string& vhost() const;
  void set_vhost(const ::std::string& value);
  #if LANG_CXX11
  void set_vhost(::std::string&& value);
  #endif
  void set_vhost(const char* value);
  void set_vhost(const char* value, size_t size);
  ::std::string* mutable_vhost();
  ::std::string* release_vhost();
  void set_allocated_vhost(::std::string* vhost);

  // optional string proxy_request_path_template = 11;
  bool has_proxy_request_path_template() const;
  void clear_proxy_request_path_template();
  static const int kProxyRequestPathTemplateFieldNumber = 11;
  const ::std::string& proxy_request_path_template() const;
  void set_proxy_request_path_template(const ::std::string& value);
  #if LANG_CXX11
  void set_proxy_request_path_template(::std::string&& value);
  #endif
  void set_proxy_request_path_template(const char* value);
  void set_proxy_request_path_template(const char* value, size_t size);
  ::std::string* mutable_proxy_request_path_template();
  ::std::string* release_proxy_request_path_template();
  void set_allocated_proxy_request_path_template(::std::string* proxy_request_path_template);

  // optional string https_support = 12;
  bool has_https_support() const;
  void clear_https_support();
  static const int kHttpsSupportFieldNumber = 12;
  const ::std::string& https_support() const;
  void set_https_support(const ::std::string& value);
  #if LANG_CXX11
  void set_https_support(::std::string&& value);
  #endif
  void set_https_support(const char* value);
  void set_https_support(const char* value, size_t size);
  ::std::string* mutable_https_support();
  ::std::string* release_https_support();
  void set_allocated_https_support(::std::string* https_support);

  // optional int32 source_id = 2;
  bool has_source_id() const;
  void clear_source_id();
  static const int kSourceIdFieldNumber = 2;
  ::google::protobuf::int32 source_id() const;
  void set_source_id(::google::protobuf::int32 value);

  // optional int32 cell_id = 3;
  bool has_cell_id() const;
  void clear_cell_id();
  static const int kCellIdFieldNumber = 3;
  ::google::protobuf::int32 cell_id() const;
  void set_cell_id(::google::protobuf::int32 value);

  // optional int32 load = 4;
  bool has_load() const;
  void clear_load();
  static const int kLoadFieldNumber = 4;
  ::google::protobuf::int32 load() const;
  void set_load(::google::protobuf::int32 value);

  // optional float weighted_load = 5;
  bool has_weighted_load() const;
  void clear_weighted_load();
  static const int kWeightedLoadFieldNumber = 5;
  float weighted_load() const;
  void set_weighted_load(float value);

  // optional int32 num_entries_in_client_list = 6;
  bool has_num_entries_in_client_list() const;
  void clear_num_entries_in_client_list();
  static const int kNumEntriesInClientListFieldNumber = 6;
  ::google::protobuf::int32 num_entries_in_client_list() const;
  void set_num_entries_in_client_list(::google::protobuf::int32 value);

  // optional bool steam_china_only = 7;
  bool has_steam_china_only() const;
  void clear_steam_china_only();
  static const int kSteamChinaOnlyFieldNumber = 7;
  bool steam_china_only() const;
  void set_steam_china_only(bool value);

  // optional bool use_as_proxy = 10;
  bool has_use_as_proxy() const;
  void clear_use_as_proxy();
  static const int kUseAsProxyFieldNumber = 10;
  bool use_as_proxy() const;
  void set_use_as_proxy(bool value);

  // @@protoc_insertion_point(class_scope:proto.steam.CContentServerDirectory_ServerInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > allowed_app_ids_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr host_;
  ::google::protobuf::internal::ArenaStringPtr vhost_;
  ::google::protobuf::internal::ArenaStringPtr proxy_request_path_template_;
  ::google::protobuf::internal::ArenaStringPtr https_support_;
  ::google::protobuf::int32 source_id_;
  ::google::protobuf::int32 cell_id_;
  ::google::protobuf::int32 load_;
  float weighted_load_;
  ::google::protobuf::int32 num_entries_in_client_list_;
  bool steam_china_only_;
  bool use_as_proxy_;
  friend struct ::TableStruct_steammessages_5fcontentsystem_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CContentServerDirectory_GetServersForSteamPipe_Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CContentServerDirectory_GetServersForSteamPipe_Response) */ {
 public:
  CContentServerDirectory_GetServersForSteamPipe_Response();
  virtual ~CContentServerDirectory_GetServersForSteamPipe_Response();

  CContentServerDirectory_GetServersForSteamPipe_Response(const CContentServerDirectory_GetServersForSteamPipe_Response& from);

  inline CContentServerDirectory_GetServersForSteamPipe_Response& operator=(const CContentServerDirectory_GetServersForSteamPipe_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CContentServerDirectory_GetServersForSteamPipe_Response(CContentServerDirectory_GetServersForSteamPipe_Response&& from) noexcept
    : CContentServerDirectory_GetServersForSteamPipe_Response() {
    *this = ::std::move(from);
  }

  inline CContentServerDirectory_GetServersForSteamPipe_Response& operator=(CContentServerDirectory_GetServersForSteamPipe_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CContentServerDirectory_GetServersForSteamPipe_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CContentServerDirectory_GetServersForSteamPipe_Response* internal_default_instance() {
    return reinterpret_cast<const CContentServerDirectory_GetServersForSteamPipe_Response*>(
               &_CContentServerDirectory_GetServersForSteamPipe_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CContentServerDirectory_GetServersForSteamPipe_Response* other);
  friend void swap(CContentServerDirectory_GetServersForSteamPipe_Response& a, CContentServerDirectory_GetServersForSteamPipe_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CContentServerDirectory_GetServersForSteamPipe_Response* New() const final {
    return CreateMaybeMessage<CContentServerDirectory_GetServersForSteamPipe_Response>(nullptr);
  }

  CContentServerDirectory_GetServersForSteamPipe_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CContentServerDirectory_GetServersForSteamPipe_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CContentServerDirectory_GetServersForSteamPipe_Response& from);
  void MergeFrom(const CContentServerDirectory_GetServersForSteamPipe_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CContentServerDirectory_GetServersForSteamPipe_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.steam.CContentServerDirectory_ServerInfo servers = 1;
  int servers_size() const;
  void clear_servers();
  static const int kServersFieldNumber = 1;
  ::proto::steam::CContentServerDirectory_ServerInfo* mutable_servers(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CContentServerDirectory_ServerInfo >*
      mutable_servers();
  const ::proto::steam::CContentServerDirectory_ServerInfo& servers(int index) const;
  ::proto::steam::CContentServerDirectory_ServerInfo* add_servers();
  const ::google::protobuf::RepeatedPtrField< ::proto::steam::CContentServerDirectory_ServerInfo >&
      servers() const;

  // @@protoc_insertion_point(class_scope:proto.steam.CContentServerDirectory_GetServersForSteamPipe_Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CContentServerDirectory_ServerInfo > servers_;
  friend struct ::TableStruct_steammessages_5fcontentsystem_2esteamclient_2eproto;
};
// ===================================================================

class ContentServerDirectory_Stub;

class ContentServerDirectory : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline ContentServerDirectory() {};
 public:
  virtual ~ContentServerDirectory();

  typedef ContentServerDirectory_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void GetServersForSteamPipe(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CContentServerDirectory_GetServersForSteamPipe_Request* request,
                       ::proto::steam::CContentServerDirectory_GetServersForSteamPipe_Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ContentServerDirectory);
};

class ContentServerDirectory_Stub : public ContentServerDirectory {
 public:
  ContentServerDirectory_Stub(::google::protobuf::RpcChannel* channel);
  ContentServerDirectory_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~ContentServerDirectory_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements ContentServerDirectory ------------------------------------------

  void GetServersForSteamPipe(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CContentServerDirectory_GetServersForSteamPipe_Request* request,
                       ::proto::steam::CContentServerDirectory_GetServersForSteamPipe_Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ContentServerDirectory_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CContentServerDirectory_GetServersForSteamPipe_Request

// optional uint32 cell_id = 1 [(.proto.steam.description) = "client Cell ID"];
inline bool CContentServerDirectory_GetServersForSteamPipe_Request::has_cell_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CContentServerDirectory_GetServersForSteamPipe_Request::clear_cell_id() {
  cell_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CContentServerDirectory_GetServersForSteamPipe_Request::cell_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CContentServerDirectory_GetServersForSteamPipe_Request.cell_id)
  return cell_id_;
}
inline void CContentServerDirectory_GetServersForSteamPipe_Request::set_cell_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  cell_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CContentServerDirectory_GetServersForSteamPipe_Request.cell_id)
}

// optional uint32 max_servers = 2 [default = 20, (.proto.steam.description) = "max servers in response list"];
inline bool CContentServerDirectory_GetServersForSteamPipe_Request::has_max_servers() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CContentServerDirectory_GetServersForSteamPipe_Request::clear_max_servers() {
  max_servers_ = 20u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CContentServerDirectory_GetServersForSteamPipe_Request::max_servers() const {
  // @@protoc_insertion_point(field_get:proto.steam.CContentServerDirectory_GetServersForSteamPipe_Request.max_servers)
  return max_servers_;
}
inline void CContentServerDirectory_GetServersForSteamPipe_Request::set_max_servers(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  max_servers_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CContentServerDirectory_GetServersForSteamPipe_Request.max_servers)
}

// optional string ip_override = 3 [(.proto.steam.description) = "client IP address"];
inline bool CContentServerDirectory_GetServersForSteamPipe_Request::has_ip_override() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CContentServerDirectory_GetServersForSteamPipe_Request::clear_ip_override() {
  ip_override_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CContentServerDirectory_GetServersForSteamPipe_Request::ip_override() const {
  // @@protoc_insertion_point(field_get:proto.steam.CContentServerDirectory_GetServersForSteamPipe_Request.ip_override)
  return ip_override_.GetNoArena();
}
inline void CContentServerDirectory_GetServersForSteamPipe_Request::set_ip_override(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ip_override_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CContentServerDirectory_GetServersForSteamPipe_Request.ip_override)
}
#if LANG_CXX11
inline void CContentServerDirectory_GetServersForSteamPipe_Request::set_ip_override(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  ip_override_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CContentServerDirectory_GetServersForSteamPipe_Request.ip_override)
}
#endif
inline void CContentServerDirectory_GetServersForSteamPipe_Request::set_ip_override(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  ip_override_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CContentServerDirectory_GetServersForSteamPipe_Request.ip_override)
}
inline void CContentServerDirectory_GetServersForSteamPipe_Request::set_ip_override(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  ip_override_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CContentServerDirectory_GetServersForSteamPipe_Request.ip_override)
}
inline ::std::string* CContentServerDirectory_GetServersForSteamPipe_Request::mutable_ip_override() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CContentServerDirectory_GetServersForSteamPipe_Request.ip_override)
  return ip_override_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CContentServerDirectory_GetServersForSteamPipe_Request::release_ip_override() {
  // @@protoc_insertion_point(field_release:proto.steam.CContentServerDirectory_GetServersForSteamPipe_Request.ip_override)
  if (!has_ip_override()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return ip_override_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CContentServerDirectory_GetServersForSteamPipe_Request::set_allocated_ip_override(::std::string* ip_override) {
  if (ip_override != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ip_override_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_override);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CContentServerDirectory_GetServersForSteamPipe_Request.ip_override)
}

// optional int32 launcher_type = 4 [default = 0, (.proto.steam.description) = "launcher type"];
inline bool CContentServerDirectory_GetServersForSteamPipe_Request::has_launcher_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CContentServerDirectory_GetServersForSteamPipe_Request::clear_launcher_type() {
  launcher_type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::int32 CContentServerDirectory_GetServersForSteamPipe_Request::launcher_type() const {
  // @@protoc_insertion_point(field_get:proto.steam.CContentServerDirectory_GetServersForSteamPipe_Request.launcher_type)
  return launcher_type_;
}
inline void CContentServerDirectory_GetServersForSteamPipe_Request::set_launcher_type(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  launcher_type_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CContentServerDirectory_GetServersForSteamPipe_Request.launcher_type)
}

// -------------------------------------------------------------------

// CContentServerDirectory_ServerInfo

// optional string type = 1;
inline bool CContentServerDirectory_ServerInfo::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CContentServerDirectory_ServerInfo::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CContentServerDirectory_ServerInfo::type() const {
  // @@protoc_insertion_point(field_get:proto.steam.CContentServerDirectory_ServerInfo.type)
  return type_.GetNoArena();
}
inline void CContentServerDirectory_ServerInfo::set_type(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CContentServerDirectory_ServerInfo.type)
}
#if LANG_CXX11
inline void CContentServerDirectory_ServerInfo::set_type(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CContentServerDirectory_ServerInfo.type)
}
#endif
inline void CContentServerDirectory_ServerInfo::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CContentServerDirectory_ServerInfo.type)
}
inline void CContentServerDirectory_ServerInfo::set_type(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CContentServerDirectory_ServerInfo.type)
}
inline ::std::string* CContentServerDirectory_ServerInfo::mutable_type() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CContentServerDirectory_ServerInfo.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CContentServerDirectory_ServerInfo::release_type() {
  // @@protoc_insertion_point(field_release:proto.steam.CContentServerDirectory_ServerInfo.type)
  if (!has_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return type_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CContentServerDirectory_ServerInfo::set_allocated_type(::std::string* type) {
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CContentServerDirectory_ServerInfo.type)
}

// optional int32 source_id = 2;
inline bool CContentServerDirectory_ServerInfo::has_source_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CContentServerDirectory_ServerInfo::clear_source_id() {
  source_id_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::int32 CContentServerDirectory_ServerInfo::source_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CContentServerDirectory_ServerInfo.source_id)
  return source_id_;
}
inline void CContentServerDirectory_ServerInfo::set_source_id(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  source_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CContentServerDirectory_ServerInfo.source_id)
}

// optional int32 cell_id = 3;
inline bool CContentServerDirectory_ServerInfo::has_cell_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CContentServerDirectory_ServerInfo::clear_cell_id() {
  cell_id_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::int32 CContentServerDirectory_ServerInfo::cell_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CContentServerDirectory_ServerInfo.cell_id)
  return cell_id_;
}
inline void CContentServerDirectory_ServerInfo::set_cell_id(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  cell_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CContentServerDirectory_ServerInfo.cell_id)
}

// optional int32 load = 4;
inline bool CContentServerDirectory_ServerInfo::has_load() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CContentServerDirectory_ServerInfo::clear_load() {
  load_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::int32 CContentServerDirectory_ServerInfo::load() const {
  // @@protoc_insertion_point(field_get:proto.steam.CContentServerDirectory_ServerInfo.load)
  return load_;
}
inline void CContentServerDirectory_ServerInfo::set_load(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  load_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CContentServerDirectory_ServerInfo.load)
}

// optional float weighted_load = 5;
inline bool CContentServerDirectory_ServerInfo::has_weighted_load() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CContentServerDirectory_ServerInfo::clear_weighted_load() {
  weighted_load_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float CContentServerDirectory_ServerInfo::weighted_load() const {
  // @@protoc_insertion_point(field_get:proto.steam.CContentServerDirectory_ServerInfo.weighted_load)
  return weighted_load_;
}
inline void CContentServerDirectory_ServerInfo::set_weighted_load(float value) {
  _has_bits_[0] |= 0x00000100u;
  weighted_load_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CContentServerDirectory_ServerInfo.weighted_load)
}

// optional int32 num_entries_in_client_list = 6;
inline bool CContentServerDirectory_ServerInfo::has_num_entries_in_client_list() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CContentServerDirectory_ServerInfo::clear_num_entries_in_client_list() {
  num_entries_in_client_list_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::google::protobuf::int32 CContentServerDirectory_ServerInfo::num_entries_in_client_list() const {
  // @@protoc_insertion_point(field_get:proto.steam.CContentServerDirectory_ServerInfo.num_entries_in_client_list)
  return num_entries_in_client_list_;
}
inline void CContentServerDirectory_ServerInfo::set_num_entries_in_client_list(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  num_entries_in_client_list_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CContentServerDirectory_ServerInfo.num_entries_in_client_list)
}

// optional bool steam_china_only = 7;
inline bool CContentServerDirectory_ServerInfo::has_steam_china_only() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CContentServerDirectory_ServerInfo::clear_steam_china_only() {
  steam_china_only_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool CContentServerDirectory_ServerInfo::steam_china_only() const {
  // @@protoc_insertion_point(field_get:proto.steam.CContentServerDirectory_ServerInfo.steam_china_only)
  return steam_china_only_;
}
inline void CContentServerDirectory_ServerInfo::set_steam_china_only(bool value) {
  _has_bits_[0] |= 0x00000400u;
  steam_china_only_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CContentServerDirectory_ServerInfo.steam_china_only)
}

// optional string host = 8;
inline bool CContentServerDirectory_ServerInfo::has_host() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CContentServerDirectory_ServerInfo::clear_host() {
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CContentServerDirectory_ServerInfo::host() const {
  // @@protoc_insertion_point(field_get:proto.steam.CContentServerDirectory_ServerInfo.host)
  return host_.GetNoArena();
}
inline void CContentServerDirectory_ServerInfo::set_host(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CContentServerDirectory_ServerInfo.host)
}
#if LANG_CXX11
inline void CContentServerDirectory_ServerInfo::set_host(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CContentServerDirectory_ServerInfo.host)
}
#endif
inline void CContentServerDirectory_ServerInfo::set_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CContentServerDirectory_ServerInfo.host)
}
inline void CContentServerDirectory_ServerInfo::set_host(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CContentServerDirectory_ServerInfo.host)
}
inline ::std::string* CContentServerDirectory_ServerInfo::mutable_host() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CContentServerDirectory_ServerInfo.host)
  return host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CContentServerDirectory_ServerInfo::release_host() {
  // @@protoc_insertion_point(field_release:proto.steam.CContentServerDirectory_ServerInfo.host)
  if (!has_host()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return host_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CContentServerDirectory_ServerInfo::set_allocated_host(::std::string* host) {
  if (host != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CContentServerDirectory_ServerInfo.host)
}

// optional string vhost = 9;
inline bool CContentServerDirectory_ServerInfo::has_vhost() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CContentServerDirectory_ServerInfo::clear_vhost() {
  vhost_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& CContentServerDirectory_ServerInfo::vhost() const {
  // @@protoc_insertion_point(field_get:proto.steam.CContentServerDirectory_ServerInfo.vhost)
  return vhost_.GetNoArena();
}
inline void CContentServerDirectory_ServerInfo::set_vhost(const ::std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  vhost_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CContentServerDirectory_ServerInfo.vhost)
}
#if LANG_CXX11
inline void CContentServerDirectory_ServerInfo::set_vhost(::std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  vhost_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CContentServerDirectory_ServerInfo.vhost)
}
#endif
inline void CContentServerDirectory_ServerInfo::set_vhost(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  vhost_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CContentServerDirectory_ServerInfo.vhost)
}
inline void CContentServerDirectory_ServerInfo::set_vhost(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  vhost_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CContentServerDirectory_ServerInfo.vhost)
}
inline ::std::string* CContentServerDirectory_ServerInfo::mutable_vhost() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CContentServerDirectory_ServerInfo.vhost)
  return vhost_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CContentServerDirectory_ServerInfo::release_vhost() {
  // @@protoc_insertion_point(field_release:proto.steam.CContentServerDirectory_ServerInfo.vhost)
  if (!has_vhost()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return vhost_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CContentServerDirectory_ServerInfo::set_allocated_vhost(::std::string* vhost) {
  if (vhost != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  vhost_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vhost);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CContentServerDirectory_ServerInfo.vhost)
}

// optional bool use_as_proxy = 10;
inline bool CContentServerDirectory_ServerInfo::has_use_as_proxy() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CContentServerDirectory_ServerInfo::clear_use_as_proxy() {
  use_as_proxy_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool CContentServerDirectory_ServerInfo::use_as_proxy() const {
  // @@protoc_insertion_point(field_get:proto.steam.CContentServerDirectory_ServerInfo.use_as_proxy)
  return use_as_proxy_;
}
inline void CContentServerDirectory_ServerInfo::set_use_as_proxy(bool value) {
  _has_bits_[0] |= 0x00000800u;
  use_as_proxy_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CContentServerDirectory_ServerInfo.use_as_proxy)
}

// optional string proxy_request_path_template = 11;
inline bool CContentServerDirectory_ServerInfo::has_proxy_request_path_template() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CContentServerDirectory_ServerInfo::clear_proxy_request_path_template() {
  proxy_request_path_template_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::std::string& CContentServerDirectory_ServerInfo::proxy_request_path_template() const {
  // @@protoc_insertion_point(field_get:proto.steam.CContentServerDirectory_ServerInfo.proxy_request_path_template)
  return proxy_request_path_template_.GetNoArena();
}
inline void CContentServerDirectory_ServerInfo::set_proxy_request_path_template(const ::std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  proxy_request_path_template_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CContentServerDirectory_ServerInfo.proxy_request_path_template)
}
#if LANG_CXX11
inline void CContentServerDirectory_ServerInfo::set_proxy_request_path_template(::std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  proxy_request_path_template_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CContentServerDirectory_ServerInfo.proxy_request_path_template)
}
#endif
inline void CContentServerDirectory_ServerInfo::set_proxy_request_path_template(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  proxy_request_path_template_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CContentServerDirectory_ServerInfo.proxy_request_path_template)
}
inline void CContentServerDirectory_ServerInfo::set_proxy_request_path_template(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  proxy_request_path_template_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CContentServerDirectory_ServerInfo.proxy_request_path_template)
}
inline ::std::string* CContentServerDirectory_ServerInfo::mutable_proxy_request_path_template() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CContentServerDirectory_ServerInfo.proxy_request_path_template)
  return proxy_request_path_template_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CContentServerDirectory_ServerInfo::release_proxy_request_path_template() {
  // @@protoc_insertion_point(field_release:proto.steam.CContentServerDirectory_ServerInfo.proxy_request_path_template)
  if (!has_proxy_request_path_template()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return proxy_request_path_template_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CContentServerDirectory_ServerInfo::set_allocated_proxy_request_path_template(::std::string* proxy_request_path_template) {
  if (proxy_request_path_template != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  proxy_request_path_template_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proxy_request_path_template);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CContentServerDirectory_ServerInfo.proxy_request_path_template)
}

// optional string https_support = 12;
inline bool CContentServerDirectory_ServerInfo::has_https_support() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CContentServerDirectory_ServerInfo::clear_https_support() {
  https_support_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::std::string& CContentServerDirectory_ServerInfo::https_support() const {
  // @@protoc_insertion_point(field_get:proto.steam.CContentServerDirectory_ServerInfo.https_support)
  return https_support_.GetNoArena();
}
inline void CContentServerDirectory_ServerInfo::set_https_support(const ::std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  https_support_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CContentServerDirectory_ServerInfo.https_support)
}
#if LANG_CXX11
inline void CContentServerDirectory_ServerInfo::set_https_support(::std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  https_support_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CContentServerDirectory_ServerInfo.https_support)
}
#endif
inline void CContentServerDirectory_ServerInfo::set_https_support(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  https_support_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CContentServerDirectory_ServerInfo.https_support)
}
inline void CContentServerDirectory_ServerInfo::set_https_support(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  https_support_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CContentServerDirectory_ServerInfo.https_support)
}
inline ::std::string* CContentServerDirectory_ServerInfo::mutable_https_support() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CContentServerDirectory_ServerInfo.https_support)
  return https_support_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CContentServerDirectory_ServerInfo::release_https_support() {
  // @@protoc_insertion_point(field_release:proto.steam.CContentServerDirectory_ServerInfo.https_support)
  if (!has_https_support()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return https_support_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CContentServerDirectory_ServerInfo::set_allocated_https_support(::std::string* https_support) {
  if (https_support != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  https_support_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), https_support);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CContentServerDirectory_ServerInfo.https_support)
}

// repeated uint32 allowed_app_ids = 13;
inline int CContentServerDirectory_ServerInfo::allowed_app_ids_size() const {
  return allowed_app_ids_.size();
}
inline void CContentServerDirectory_ServerInfo::clear_allowed_app_ids() {
  allowed_app_ids_.Clear();
}
inline ::google::protobuf::uint32 CContentServerDirectory_ServerInfo::allowed_app_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CContentServerDirectory_ServerInfo.allowed_app_ids)
  return allowed_app_ids_.Get(index);
}
inline void CContentServerDirectory_ServerInfo::set_allowed_app_ids(int index, ::google::protobuf::uint32 value) {
  allowed_app_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.steam.CContentServerDirectory_ServerInfo.allowed_app_ids)
}
inline void CContentServerDirectory_ServerInfo::add_allowed_app_ids(::google::protobuf::uint32 value) {
  allowed_app_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.steam.CContentServerDirectory_ServerInfo.allowed_app_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CContentServerDirectory_ServerInfo::allowed_app_ids() const {
  // @@protoc_insertion_point(field_list:proto.steam.CContentServerDirectory_ServerInfo.allowed_app_ids)
  return allowed_app_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CContentServerDirectory_ServerInfo::mutable_allowed_app_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CContentServerDirectory_ServerInfo.allowed_app_ids)
  return &allowed_app_ids_;
}

// -------------------------------------------------------------------

// CContentServerDirectory_GetServersForSteamPipe_Response

// repeated .proto.steam.CContentServerDirectory_ServerInfo servers = 1;
inline int CContentServerDirectory_GetServersForSteamPipe_Response::servers_size() const {
  return servers_.size();
}
inline void CContentServerDirectory_GetServersForSteamPipe_Response::clear_servers() {
  servers_.Clear();
}
inline ::proto::steam::CContentServerDirectory_ServerInfo* CContentServerDirectory_GetServersForSteamPipe_Response::mutable_servers(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CContentServerDirectory_GetServersForSteamPipe_Response.servers)
  return servers_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::steam::CContentServerDirectory_ServerInfo >*
CContentServerDirectory_GetServersForSteamPipe_Response::mutable_servers() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CContentServerDirectory_GetServersForSteamPipe_Response.servers)
  return &servers_;
}
inline const ::proto::steam::CContentServerDirectory_ServerInfo& CContentServerDirectory_GetServersForSteamPipe_Response::servers(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CContentServerDirectory_GetServersForSteamPipe_Response.servers)
  return servers_.Get(index);
}
inline ::proto::steam::CContentServerDirectory_ServerInfo* CContentServerDirectory_GetServersForSteamPipe_Response::add_servers() {
  // @@protoc_insertion_point(field_add:proto.steam.CContentServerDirectory_GetServersForSteamPipe_Response.servers)
  return servers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::steam::CContentServerDirectory_ServerInfo >&
CContentServerDirectory_GetServersForSteamPipe_Response::servers() const {
  // @@protoc_insertion_point(field_list:proto.steam.CContentServerDirectory_GetServersForSteamPipe_Response.servers)
  return servers_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace steam
}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_steammessages_5fcontentsystem_2esteamclient_2eproto
