// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_sitelicenseclient.proto

#include "steammessages_sitelicenseclient.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

namespace proto {
namespace steam {
class CMsgClientSiteInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientSiteInfo> _instance;
} _CMsgClientSiteInfo_default_instance_;
class CMsgClientSiteLicenseCheckoutDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientSiteLicenseCheckout> _instance;
} _CMsgClientSiteLicenseCheckout_default_instance_;
class CMsgClientSiteLicenseCheckoutResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientSiteLicenseCheckoutResponse> _instance;
} _CMsgClientSiteLicenseCheckoutResponse_default_instance_;
class CMsgClientSiteLicenseGetAvailableSeatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientSiteLicenseGetAvailableSeats> _instance;
} _CMsgClientSiteLicenseGetAvailableSeats_default_instance_;
class CMsgClientSiteLicenseGetAvailableSeatsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientSiteLicenseGetAvailableSeatsResponse> _instance;
} _CMsgClientSiteLicenseGetAvailableSeatsResponse_default_instance_;
class CMsgClientSiteLicenseGetContentCacheInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientSiteLicenseGetContentCacheInfo> _instance;
} _CMsgClientSiteLicenseGetContentCacheInfo_default_instance_;
class CMsgClientSiteLicenseGetContentCacheInfoResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientSiteLicenseGetContentCacheInfoResponse> _instance;
} _CMsgClientSiteLicenseGetContentCacheInfoResponse_default_instance_;
}  // namespace steam
}  // namespace proto
static void InitDefaultsCMsgClientSiteInfo_steammessages_5fsitelicenseclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientSiteInfo_default_instance_;
    new (ptr) ::proto::steam::CMsgClientSiteInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientSiteInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientSiteInfo_steammessages_5fsitelicenseclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientSiteInfo_steammessages_5fsitelicenseclient_2eproto}, {}};

static void InitDefaultsCMsgClientSiteLicenseCheckout_steammessages_5fsitelicenseclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientSiteLicenseCheckout_default_instance_;
    new (ptr) ::proto::steam::CMsgClientSiteLicenseCheckout();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientSiteLicenseCheckout::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientSiteLicenseCheckout_steammessages_5fsitelicenseclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientSiteLicenseCheckout_steammessages_5fsitelicenseclient_2eproto}, {}};

static void InitDefaultsCMsgClientSiteLicenseCheckoutResponse_steammessages_5fsitelicenseclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientSiteLicenseCheckoutResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgClientSiteLicenseCheckoutResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientSiteLicenseCheckoutResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientSiteLicenseCheckoutResponse_steammessages_5fsitelicenseclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientSiteLicenseCheckoutResponse_steammessages_5fsitelicenseclient_2eproto}, {}};

static void InitDefaultsCMsgClientSiteLicenseGetAvailableSeats_steammessages_5fsitelicenseclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientSiteLicenseGetAvailableSeats_default_instance_;
    new (ptr) ::proto::steam::CMsgClientSiteLicenseGetAvailableSeats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientSiteLicenseGetAvailableSeats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientSiteLicenseGetAvailableSeats_steammessages_5fsitelicenseclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientSiteLicenseGetAvailableSeats_steammessages_5fsitelicenseclient_2eproto}, {}};

static void InitDefaultsCMsgClientSiteLicenseGetAvailableSeatsResponse_steammessages_5fsitelicenseclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientSiteLicenseGetAvailableSeatsResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgClientSiteLicenseGetAvailableSeatsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientSiteLicenseGetAvailableSeatsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientSiteLicenseGetAvailableSeatsResponse_steammessages_5fsitelicenseclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientSiteLicenseGetAvailableSeatsResponse_steammessages_5fsitelicenseclient_2eproto}, {}};

static void InitDefaultsCMsgClientSiteLicenseGetContentCacheInfo_steammessages_5fsitelicenseclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientSiteLicenseGetContentCacheInfo_default_instance_;
    new (ptr) ::proto::steam::CMsgClientSiteLicenseGetContentCacheInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientSiteLicenseGetContentCacheInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientSiteLicenseGetContentCacheInfo_steammessages_5fsitelicenseclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientSiteLicenseGetContentCacheInfo_steammessages_5fsitelicenseclient_2eproto}, {}};

static void InitDefaultsCMsgClientSiteLicenseGetContentCacheInfoResponse_steammessages_5fsitelicenseclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientSiteLicenseGetContentCacheInfoResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgClientSiteLicenseGetContentCacheInfoResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientSiteLicenseGetContentCacheInfoResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientSiteLicenseGetContentCacheInfoResponse_steammessages_5fsitelicenseclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientSiteLicenseGetContentCacheInfoResponse_steammessages_5fsitelicenseclient_2eproto}, {}};

void InitDefaults_steammessages_5fsitelicenseclient_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientSiteInfo_steammessages_5fsitelicenseclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientSiteLicenseCheckout_steammessages_5fsitelicenseclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientSiteLicenseCheckoutResponse_steammessages_5fsitelicenseclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientSiteLicenseGetAvailableSeats_steammessages_5fsitelicenseclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientSiteLicenseGetAvailableSeatsResponse_steammessages_5fsitelicenseclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientSiteLicenseGetContentCacheInfo_steammessages_5fsitelicenseclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientSiteLicenseGetContentCacheInfoResponse_steammessages_5fsitelicenseclient_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_steammessages_5fsitelicenseclient_2eproto[7];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_steammessages_5fsitelicenseclient_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_steammessages_5fsitelicenseclient_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_steammessages_5fsitelicenseclient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientSiteInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientSiteInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientSiteInfo, site_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientSiteInfo, site_name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientSiteLicenseCheckout, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientSiteLicenseCheckout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientSiteLicenseCheckout, appid_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientSiteLicenseCheckoutResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientSiteLicenseCheckoutResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientSiteLicenseCheckoutResponse, eresult_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientSiteLicenseGetAvailableSeats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientSiteLicenseGetAvailableSeats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientSiteLicenseGetAvailableSeats, appid_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientSiteLicenseGetAvailableSeatsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientSiteLicenseGetAvailableSeatsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientSiteLicenseGetAvailableSeatsResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientSiteLicenseGetAvailableSeatsResponse, seats_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientSiteLicenseGetContentCacheInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientSiteLicenseGetContentCacheInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientSiteLicenseGetContentCacheInfoResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientSiteLicenseGetContentCacheInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientSiteLicenseGetContentCacheInfoResponse, use_cache_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientSiteLicenseGetContentCacheInfoResponse, ipv4_address_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientSiteLicenseGetContentCacheInfoResponse, port_number_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientSiteLicenseGetContentCacheInfoResponse, p2p_group_),
  0,
  1,
  2,
  3,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::proto::steam::CMsgClientSiteInfo)},
  { 9, 15, sizeof(::proto::steam::CMsgClientSiteLicenseCheckout)},
  { 16, 22, sizeof(::proto::steam::CMsgClientSiteLicenseCheckoutResponse)},
  { 23, 29, sizeof(::proto::steam::CMsgClientSiteLicenseGetAvailableSeats)},
  { 30, 37, sizeof(::proto::steam::CMsgClientSiteLicenseGetAvailableSeatsResponse)},
  { 39, 44, sizeof(::proto::steam::CMsgClientSiteLicenseGetContentCacheInfo)},
  { 44, 53, sizeof(::proto::steam::CMsgClientSiteLicenseGetContentCacheInfoResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientSiteInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientSiteLicenseCheckout_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientSiteLicenseCheckoutResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientSiteLicenseGetAvailableSeats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientSiteLicenseGetAvailableSeatsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientSiteLicenseGetContentCacheInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientSiteLicenseGetContentCacheInfoResponse_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_steammessages_5fsitelicenseclient_2eproto = {
  {}, AddDescriptors_steammessages_5fsitelicenseclient_2eproto, "steammessages_sitelicenseclient.proto", schemas,
  file_default_instances, TableStruct_steammessages_5fsitelicenseclient_2eproto::offsets,
  file_level_metadata_steammessages_5fsitelicenseclient_2eproto, 7, file_level_enum_descriptors_steammessages_5fsitelicenseclient_2eproto, file_level_service_descriptors_steammessages_5fsitelicenseclient_2eproto,
};

const char descriptor_table_protodef_steammessages_5fsitelicenseclient_2eproto[] =
  "\n%steammessages_sitelicenseclient.proto\022"
  "\013proto.steam\032\030steammessages_base.proto\"8"
  "\n\022CMsgClientSiteInfo\022\017\n\007site_id\030\001 \001(\004\022\021\n"
  "\tsite_name\030\002 \001(\t\".\n\035CMsgClientSiteLicens"
  "eCheckout\022\r\n\005appid\030\001 \001(\r\";\n%CMsgClientSi"
  "teLicenseCheckoutResponse\022\022\n\007eresult\030\001 \001"
  "(\005:\0012\"7\n&CMsgClientSiteLicenseGetAvailab"
  "leSeats\022\r\n\005appid\030\001 \001(\r\"S\n.CMsgClientSite"
  "LicenseGetAvailableSeatsResponse\022\022\n\007eres"
  "ult\030\001 \001(\005:\0012\022\r\n\005seats\030\002 \001(\r\"*\n(CMsgClien"
  "tSiteLicenseGetContentCacheInfo\"\203\001\n0CMsg"
  "ClientSiteLicenseGetContentCacheInfoResp"
  "onse\022\021\n\tuse_cache\030\001 \001(\010\022\024\n\014ipv4_address\030"
  "\002 \001(\r\022\023\n\013port_number\030\003 \001(\r\022\021\n\tp2p_group\030"
  "\004 \001(\rB\005H\001\200\001\000"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_steammessages_5fsitelicenseclient_2eproto = {
  false, InitDefaults_steammessages_5fsitelicenseclient_2eproto, 
  descriptor_table_protodef_steammessages_5fsitelicenseclient_2eproto,
  "steammessages_sitelicenseclient.proto", &assign_descriptors_table_steammessages_5fsitelicenseclient_2eproto, 572,
};

void AddDescriptors_steammessages_5fsitelicenseclient_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_steammessages_5fbase_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_steammessages_5fsitelicenseclient_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_steammessages_5fsitelicenseclient_2eproto = []() { AddDescriptors_steammessages_5fsitelicenseclient_2eproto(); return true; }();
namespace proto {
namespace steam {

// ===================================================================

void CMsgClientSiteInfo::InitAsDefaultInstance() {
}
class CMsgClientSiteInfo::HasBitSetters {
 public:
  static void set_has_site_id(CMsgClientSiteInfo* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_site_name(CMsgClientSiteInfo* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientSiteInfo::kSiteIdFieldNumber;
const int CMsgClientSiteInfo::kSiteNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientSiteInfo::CMsgClientSiteInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientSiteInfo)
}
CMsgClientSiteInfo::CMsgClientSiteInfo(const CMsgClientSiteInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  site_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_site_name()) {
    site_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.site_name_);
  }
  site_id_ = from.site_id_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientSiteInfo)
}

void CMsgClientSiteInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientSiteInfo_steammessages_5fsitelicenseclient_2eproto.base);
  site_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  site_id_ = PROTOBUF_ULONGLONG(0);
}

CMsgClientSiteInfo::~CMsgClientSiteInfo() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientSiteInfo)
  SharedDtor();
}

void CMsgClientSiteInfo::SharedDtor() {
  site_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientSiteInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientSiteInfo& CMsgClientSiteInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientSiteInfo_steammessages_5fsitelicenseclient_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientSiteInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientSiteInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    site_name_.ClearNonDefaultToEmptyNoArena();
  }
  site_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientSiteInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientSiteInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 site_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_site_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string site_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientSiteInfo.site_name");
        object = msg->mutable_site_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientSiteInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientSiteInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 site_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_site_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &site_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string site_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_site_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->site_name().data(), static_cast<int>(this->site_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientSiteInfo.site_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientSiteInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientSiteInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientSiteInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientSiteInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 site_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->site_id(), output);
  }

  // optional string site_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->site_name().data(), static_cast<int>(this->site_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientSiteInfo.site_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->site_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientSiteInfo)
}

::google::protobuf::uint8* CMsgClientSiteInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientSiteInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 site_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->site_id(), target);
  }

  // optional string site_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->site_name().data(), static_cast<int>(this->site_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientSiteInfo.site_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->site_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientSiteInfo)
  return target;
}

size_t CMsgClientSiteInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientSiteInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string site_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->site_name());
    }

    // optional uint64 site_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->site_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientSiteInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientSiteInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientSiteInfo* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientSiteInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientSiteInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientSiteInfo)
    MergeFrom(*source);
  }
}

void CMsgClientSiteInfo::MergeFrom(const CMsgClientSiteInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientSiteInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      site_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.site_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      site_id_ = from.site_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientSiteInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientSiteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientSiteInfo::CopyFrom(const CMsgClientSiteInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientSiteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientSiteInfo::IsInitialized() const {
  return true;
}

void CMsgClientSiteInfo::Swap(CMsgClientSiteInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientSiteInfo::InternalSwap(CMsgClientSiteInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  site_name_.Swap(&other->site_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(site_id_, other->site_id_);
}

::google::protobuf::Metadata CMsgClientSiteInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fsitelicenseclient_2eproto);
  return ::file_level_metadata_steammessages_5fsitelicenseclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientSiteLicenseCheckout::InitAsDefaultInstance() {
}
class CMsgClientSiteLicenseCheckout::HasBitSetters {
 public:
  static void set_has_appid(CMsgClientSiteLicenseCheckout* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientSiteLicenseCheckout::kAppidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientSiteLicenseCheckout::CMsgClientSiteLicenseCheckout()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientSiteLicenseCheckout)
}
CMsgClientSiteLicenseCheckout::CMsgClientSiteLicenseCheckout(const CMsgClientSiteLicenseCheckout& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientSiteLicenseCheckout)
}

void CMsgClientSiteLicenseCheckout::SharedCtor() {
  appid_ = 0u;
}

CMsgClientSiteLicenseCheckout::~CMsgClientSiteLicenseCheckout() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientSiteLicenseCheckout)
  SharedDtor();
}

void CMsgClientSiteLicenseCheckout::SharedDtor() {
}

void CMsgClientSiteLicenseCheckout::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientSiteLicenseCheckout& CMsgClientSiteLicenseCheckout::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientSiteLicenseCheckout_steammessages_5fsitelicenseclient_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientSiteLicenseCheckout::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientSiteLicenseCheckout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientSiteLicenseCheckout::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientSiteLicenseCheckout*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientSiteLicenseCheckout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientSiteLicenseCheckout)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientSiteLicenseCheckout)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientSiteLicenseCheckout)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientSiteLicenseCheckout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientSiteLicenseCheckout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientSiteLicenseCheckout)
}

::google::protobuf::uint8* CMsgClientSiteLicenseCheckout::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientSiteLicenseCheckout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientSiteLicenseCheckout)
  return target;
}

size_t CMsgClientSiteLicenseCheckout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientSiteLicenseCheckout)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 appid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->appid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientSiteLicenseCheckout::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientSiteLicenseCheckout)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientSiteLicenseCheckout* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientSiteLicenseCheckout>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientSiteLicenseCheckout)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientSiteLicenseCheckout)
    MergeFrom(*source);
  }
}

void CMsgClientSiteLicenseCheckout::MergeFrom(const CMsgClientSiteLicenseCheckout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientSiteLicenseCheckout)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_appid()) {
    set_appid(from.appid());
  }
}

void CMsgClientSiteLicenseCheckout::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientSiteLicenseCheckout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientSiteLicenseCheckout::CopyFrom(const CMsgClientSiteLicenseCheckout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientSiteLicenseCheckout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientSiteLicenseCheckout::IsInitialized() const {
  return true;
}

void CMsgClientSiteLicenseCheckout::Swap(CMsgClientSiteLicenseCheckout* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientSiteLicenseCheckout::InternalSwap(CMsgClientSiteLicenseCheckout* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(appid_, other->appid_);
}

::google::protobuf::Metadata CMsgClientSiteLicenseCheckout::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fsitelicenseclient_2eproto);
  return ::file_level_metadata_steammessages_5fsitelicenseclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientSiteLicenseCheckoutResponse::InitAsDefaultInstance() {
}
class CMsgClientSiteLicenseCheckoutResponse::HasBitSetters {
 public:
  static void set_has_eresult(CMsgClientSiteLicenseCheckoutResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientSiteLicenseCheckoutResponse::kEresultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientSiteLicenseCheckoutResponse::CMsgClientSiteLicenseCheckoutResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientSiteLicenseCheckoutResponse)
}
CMsgClientSiteLicenseCheckoutResponse::CMsgClientSiteLicenseCheckoutResponse(const CMsgClientSiteLicenseCheckoutResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientSiteLicenseCheckoutResponse)
}

void CMsgClientSiteLicenseCheckoutResponse::SharedCtor() {
  eresult_ = 2;
}

CMsgClientSiteLicenseCheckoutResponse::~CMsgClientSiteLicenseCheckoutResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientSiteLicenseCheckoutResponse)
  SharedDtor();
}

void CMsgClientSiteLicenseCheckoutResponse::SharedDtor() {
}

void CMsgClientSiteLicenseCheckoutResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientSiteLicenseCheckoutResponse& CMsgClientSiteLicenseCheckoutResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientSiteLicenseCheckoutResponse_steammessages_5fsitelicenseclient_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientSiteLicenseCheckoutResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientSiteLicenseCheckoutResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  eresult_ = 2;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientSiteLicenseCheckoutResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientSiteLicenseCheckoutResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_eresult(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientSiteLicenseCheckoutResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientSiteLicenseCheckoutResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_eresult(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientSiteLicenseCheckoutResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientSiteLicenseCheckoutResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientSiteLicenseCheckoutResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientSiteLicenseCheckoutResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientSiteLicenseCheckoutResponse)
}

::google::protobuf::uint8* CMsgClientSiteLicenseCheckoutResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientSiteLicenseCheckoutResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientSiteLicenseCheckoutResponse)
  return target;
}

size_t CMsgClientSiteLicenseCheckoutResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientSiteLicenseCheckoutResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 eresult = 1 [default = 2];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->eresult());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientSiteLicenseCheckoutResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientSiteLicenseCheckoutResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientSiteLicenseCheckoutResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientSiteLicenseCheckoutResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientSiteLicenseCheckoutResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientSiteLicenseCheckoutResponse)
    MergeFrom(*source);
  }
}

void CMsgClientSiteLicenseCheckoutResponse::MergeFrom(const CMsgClientSiteLicenseCheckoutResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientSiteLicenseCheckoutResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_eresult()) {
    set_eresult(from.eresult());
  }
}

void CMsgClientSiteLicenseCheckoutResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientSiteLicenseCheckoutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientSiteLicenseCheckoutResponse::CopyFrom(const CMsgClientSiteLicenseCheckoutResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientSiteLicenseCheckoutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientSiteLicenseCheckoutResponse::IsInitialized() const {
  return true;
}

void CMsgClientSiteLicenseCheckoutResponse::Swap(CMsgClientSiteLicenseCheckoutResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientSiteLicenseCheckoutResponse::InternalSwap(CMsgClientSiteLicenseCheckoutResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(eresult_, other->eresult_);
}

::google::protobuf::Metadata CMsgClientSiteLicenseCheckoutResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fsitelicenseclient_2eproto);
  return ::file_level_metadata_steammessages_5fsitelicenseclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientSiteLicenseGetAvailableSeats::InitAsDefaultInstance() {
}
class CMsgClientSiteLicenseGetAvailableSeats::HasBitSetters {
 public:
  static void set_has_appid(CMsgClientSiteLicenseGetAvailableSeats* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientSiteLicenseGetAvailableSeats::kAppidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientSiteLicenseGetAvailableSeats::CMsgClientSiteLicenseGetAvailableSeats()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientSiteLicenseGetAvailableSeats)
}
CMsgClientSiteLicenseGetAvailableSeats::CMsgClientSiteLicenseGetAvailableSeats(const CMsgClientSiteLicenseGetAvailableSeats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientSiteLicenseGetAvailableSeats)
}

void CMsgClientSiteLicenseGetAvailableSeats::SharedCtor() {
  appid_ = 0u;
}

CMsgClientSiteLicenseGetAvailableSeats::~CMsgClientSiteLicenseGetAvailableSeats() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientSiteLicenseGetAvailableSeats)
  SharedDtor();
}

void CMsgClientSiteLicenseGetAvailableSeats::SharedDtor() {
}

void CMsgClientSiteLicenseGetAvailableSeats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientSiteLicenseGetAvailableSeats& CMsgClientSiteLicenseGetAvailableSeats::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientSiteLicenseGetAvailableSeats_steammessages_5fsitelicenseclient_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientSiteLicenseGetAvailableSeats::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientSiteLicenseGetAvailableSeats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientSiteLicenseGetAvailableSeats::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientSiteLicenseGetAvailableSeats*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientSiteLicenseGetAvailableSeats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientSiteLicenseGetAvailableSeats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientSiteLicenseGetAvailableSeats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientSiteLicenseGetAvailableSeats)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientSiteLicenseGetAvailableSeats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientSiteLicenseGetAvailableSeats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientSiteLicenseGetAvailableSeats)
}

::google::protobuf::uint8* CMsgClientSiteLicenseGetAvailableSeats::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientSiteLicenseGetAvailableSeats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientSiteLicenseGetAvailableSeats)
  return target;
}

size_t CMsgClientSiteLicenseGetAvailableSeats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientSiteLicenseGetAvailableSeats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 appid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->appid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientSiteLicenseGetAvailableSeats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientSiteLicenseGetAvailableSeats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientSiteLicenseGetAvailableSeats* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientSiteLicenseGetAvailableSeats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientSiteLicenseGetAvailableSeats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientSiteLicenseGetAvailableSeats)
    MergeFrom(*source);
  }
}

void CMsgClientSiteLicenseGetAvailableSeats::MergeFrom(const CMsgClientSiteLicenseGetAvailableSeats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientSiteLicenseGetAvailableSeats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_appid()) {
    set_appid(from.appid());
  }
}

void CMsgClientSiteLicenseGetAvailableSeats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientSiteLicenseGetAvailableSeats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientSiteLicenseGetAvailableSeats::CopyFrom(const CMsgClientSiteLicenseGetAvailableSeats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientSiteLicenseGetAvailableSeats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientSiteLicenseGetAvailableSeats::IsInitialized() const {
  return true;
}

void CMsgClientSiteLicenseGetAvailableSeats::Swap(CMsgClientSiteLicenseGetAvailableSeats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientSiteLicenseGetAvailableSeats::InternalSwap(CMsgClientSiteLicenseGetAvailableSeats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(appid_, other->appid_);
}

::google::protobuf::Metadata CMsgClientSiteLicenseGetAvailableSeats::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fsitelicenseclient_2eproto);
  return ::file_level_metadata_steammessages_5fsitelicenseclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientSiteLicenseGetAvailableSeatsResponse::InitAsDefaultInstance() {
}
class CMsgClientSiteLicenseGetAvailableSeatsResponse::HasBitSetters {
 public:
  static void set_has_eresult(CMsgClientSiteLicenseGetAvailableSeatsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_seats(CMsgClientSiteLicenseGetAvailableSeatsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientSiteLicenseGetAvailableSeatsResponse::kEresultFieldNumber;
const int CMsgClientSiteLicenseGetAvailableSeatsResponse::kSeatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientSiteLicenseGetAvailableSeatsResponse::CMsgClientSiteLicenseGetAvailableSeatsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientSiteLicenseGetAvailableSeatsResponse)
}
CMsgClientSiteLicenseGetAvailableSeatsResponse::CMsgClientSiteLicenseGetAvailableSeatsResponse(const CMsgClientSiteLicenseGetAvailableSeatsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&seats_, &from.seats_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&seats_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientSiteLicenseGetAvailableSeatsResponse)
}

void CMsgClientSiteLicenseGetAvailableSeatsResponse::SharedCtor() {
  seats_ = 0u;
  eresult_ = 2;
}

CMsgClientSiteLicenseGetAvailableSeatsResponse::~CMsgClientSiteLicenseGetAvailableSeatsResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientSiteLicenseGetAvailableSeatsResponse)
  SharedDtor();
}

void CMsgClientSiteLicenseGetAvailableSeatsResponse::SharedDtor() {
}

void CMsgClientSiteLicenseGetAvailableSeatsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientSiteLicenseGetAvailableSeatsResponse& CMsgClientSiteLicenseGetAvailableSeatsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientSiteLicenseGetAvailableSeatsResponse_steammessages_5fsitelicenseclient_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientSiteLicenseGetAvailableSeatsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientSiteLicenseGetAvailableSeatsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    seats_ = 0u;
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientSiteLicenseGetAvailableSeatsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientSiteLicenseGetAvailableSeatsResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_eresult(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 seats = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_seats(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientSiteLicenseGetAvailableSeatsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientSiteLicenseGetAvailableSeatsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_eresult(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 seats = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_seats(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seats_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientSiteLicenseGetAvailableSeatsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientSiteLicenseGetAvailableSeatsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientSiteLicenseGetAvailableSeatsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientSiteLicenseGetAvailableSeatsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional uint32 seats = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->seats(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientSiteLicenseGetAvailableSeatsResponse)
}

::google::protobuf::uint8* CMsgClientSiteLicenseGetAvailableSeatsResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientSiteLicenseGetAvailableSeatsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // optional uint32 seats = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->seats(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientSiteLicenseGetAvailableSeatsResponse)
  return target;
}

size_t CMsgClientSiteLicenseGetAvailableSeatsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientSiteLicenseGetAvailableSeatsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 seats = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seats());
    }

    // optional int32 eresult = 1 [default = 2];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientSiteLicenseGetAvailableSeatsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientSiteLicenseGetAvailableSeatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientSiteLicenseGetAvailableSeatsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientSiteLicenseGetAvailableSeatsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientSiteLicenseGetAvailableSeatsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientSiteLicenseGetAvailableSeatsResponse)
    MergeFrom(*source);
  }
}

void CMsgClientSiteLicenseGetAvailableSeatsResponse::MergeFrom(const CMsgClientSiteLicenseGetAvailableSeatsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientSiteLicenseGetAvailableSeatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      seats_ = from.seats_;
    }
    if (cached_has_bits & 0x00000002u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientSiteLicenseGetAvailableSeatsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientSiteLicenseGetAvailableSeatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientSiteLicenseGetAvailableSeatsResponse::CopyFrom(const CMsgClientSiteLicenseGetAvailableSeatsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientSiteLicenseGetAvailableSeatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientSiteLicenseGetAvailableSeatsResponse::IsInitialized() const {
  return true;
}

void CMsgClientSiteLicenseGetAvailableSeatsResponse::Swap(CMsgClientSiteLicenseGetAvailableSeatsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientSiteLicenseGetAvailableSeatsResponse::InternalSwap(CMsgClientSiteLicenseGetAvailableSeatsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(seats_, other->seats_);
  swap(eresult_, other->eresult_);
}

::google::protobuf::Metadata CMsgClientSiteLicenseGetAvailableSeatsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fsitelicenseclient_2eproto);
  return ::file_level_metadata_steammessages_5fsitelicenseclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientSiteLicenseGetContentCacheInfo::InitAsDefaultInstance() {
}
class CMsgClientSiteLicenseGetContentCacheInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientSiteLicenseGetContentCacheInfo::CMsgClientSiteLicenseGetContentCacheInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientSiteLicenseGetContentCacheInfo)
}
CMsgClientSiteLicenseGetContentCacheInfo::CMsgClientSiteLicenseGetContentCacheInfo(const CMsgClientSiteLicenseGetContentCacheInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientSiteLicenseGetContentCacheInfo)
}

void CMsgClientSiteLicenseGetContentCacheInfo::SharedCtor() {
}

CMsgClientSiteLicenseGetContentCacheInfo::~CMsgClientSiteLicenseGetContentCacheInfo() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientSiteLicenseGetContentCacheInfo)
  SharedDtor();
}

void CMsgClientSiteLicenseGetContentCacheInfo::SharedDtor() {
}

void CMsgClientSiteLicenseGetContentCacheInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientSiteLicenseGetContentCacheInfo& CMsgClientSiteLicenseGetContentCacheInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientSiteLicenseGetContentCacheInfo_steammessages_5fsitelicenseclient_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientSiteLicenseGetContentCacheInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientSiteLicenseGetContentCacheInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientSiteLicenseGetContentCacheInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientSiteLicenseGetContentCacheInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientSiteLicenseGetContentCacheInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientSiteLicenseGetContentCacheInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientSiteLicenseGetContentCacheInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientSiteLicenseGetContentCacheInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientSiteLicenseGetContentCacheInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientSiteLicenseGetContentCacheInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientSiteLicenseGetContentCacheInfo)
}

::google::protobuf::uint8* CMsgClientSiteLicenseGetContentCacheInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientSiteLicenseGetContentCacheInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientSiteLicenseGetContentCacheInfo)
  return target;
}

size_t CMsgClientSiteLicenseGetContentCacheInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientSiteLicenseGetContentCacheInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientSiteLicenseGetContentCacheInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientSiteLicenseGetContentCacheInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientSiteLicenseGetContentCacheInfo* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientSiteLicenseGetContentCacheInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientSiteLicenseGetContentCacheInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientSiteLicenseGetContentCacheInfo)
    MergeFrom(*source);
  }
}

void CMsgClientSiteLicenseGetContentCacheInfo::MergeFrom(const CMsgClientSiteLicenseGetContentCacheInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientSiteLicenseGetContentCacheInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgClientSiteLicenseGetContentCacheInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientSiteLicenseGetContentCacheInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientSiteLicenseGetContentCacheInfo::CopyFrom(const CMsgClientSiteLicenseGetContentCacheInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientSiteLicenseGetContentCacheInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientSiteLicenseGetContentCacheInfo::IsInitialized() const {
  return true;
}

void CMsgClientSiteLicenseGetContentCacheInfo::Swap(CMsgClientSiteLicenseGetContentCacheInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientSiteLicenseGetContentCacheInfo::InternalSwap(CMsgClientSiteLicenseGetContentCacheInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CMsgClientSiteLicenseGetContentCacheInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fsitelicenseclient_2eproto);
  return ::file_level_metadata_steammessages_5fsitelicenseclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientSiteLicenseGetContentCacheInfoResponse::InitAsDefaultInstance() {
}
class CMsgClientSiteLicenseGetContentCacheInfoResponse::HasBitSetters {
 public:
  static void set_has_use_cache(CMsgClientSiteLicenseGetContentCacheInfoResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_ipv4_address(CMsgClientSiteLicenseGetContentCacheInfoResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_port_number(CMsgClientSiteLicenseGetContentCacheInfoResponse* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_p2p_group(CMsgClientSiteLicenseGetContentCacheInfoResponse* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientSiteLicenseGetContentCacheInfoResponse::kUseCacheFieldNumber;
const int CMsgClientSiteLicenseGetContentCacheInfoResponse::kIpv4AddressFieldNumber;
const int CMsgClientSiteLicenseGetContentCacheInfoResponse::kPortNumberFieldNumber;
const int CMsgClientSiteLicenseGetContentCacheInfoResponse::kP2PGroupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientSiteLicenseGetContentCacheInfoResponse::CMsgClientSiteLicenseGetContentCacheInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientSiteLicenseGetContentCacheInfoResponse)
}
CMsgClientSiteLicenseGetContentCacheInfoResponse::CMsgClientSiteLicenseGetContentCacheInfoResponse(const CMsgClientSiteLicenseGetContentCacheInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&use_cache_, &from.use_cache_,
    static_cast<size_t>(reinterpret_cast<char*>(&p2p_group_) -
    reinterpret_cast<char*>(&use_cache_)) + sizeof(p2p_group_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientSiteLicenseGetContentCacheInfoResponse)
}

void CMsgClientSiteLicenseGetContentCacheInfoResponse::SharedCtor() {
  ::memset(&use_cache_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&p2p_group_) -
      reinterpret_cast<char*>(&use_cache_)) + sizeof(p2p_group_));
}

CMsgClientSiteLicenseGetContentCacheInfoResponse::~CMsgClientSiteLicenseGetContentCacheInfoResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientSiteLicenseGetContentCacheInfoResponse)
  SharedDtor();
}

void CMsgClientSiteLicenseGetContentCacheInfoResponse::SharedDtor() {
}

void CMsgClientSiteLicenseGetContentCacheInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientSiteLicenseGetContentCacheInfoResponse& CMsgClientSiteLicenseGetContentCacheInfoResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientSiteLicenseGetContentCacheInfoResponse_steammessages_5fsitelicenseclient_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientSiteLicenseGetContentCacheInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientSiteLicenseGetContentCacheInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&use_cache_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&p2p_group_) -
        reinterpret_cast<char*>(&use_cache_)) + sizeof(p2p_group_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientSiteLicenseGetContentCacheInfoResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientSiteLicenseGetContentCacheInfoResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool use_cache = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_use_cache(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 ipv4_address = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_ipv4_address(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 port_number = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_port_number(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 p2p_group = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_p2p_group(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientSiteLicenseGetContentCacheInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientSiteLicenseGetContentCacheInfoResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool use_cache = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_use_cache(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_cache_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ipv4_address = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_ipv4_address(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ipv4_address_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 port_number = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_port_number(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 p2p_group = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_p2p_group(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &p2p_group_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientSiteLicenseGetContentCacheInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientSiteLicenseGetContentCacheInfoResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientSiteLicenseGetContentCacheInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientSiteLicenseGetContentCacheInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool use_cache = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->use_cache(), output);
  }

  // optional uint32 ipv4_address = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ipv4_address(), output);
  }

  // optional uint32 port_number = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->port_number(), output);
  }

  // optional uint32 p2p_group = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->p2p_group(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientSiteLicenseGetContentCacheInfoResponse)
}

::google::protobuf::uint8* CMsgClientSiteLicenseGetContentCacheInfoResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientSiteLicenseGetContentCacheInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool use_cache = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->use_cache(), target);
  }

  // optional uint32 ipv4_address = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ipv4_address(), target);
  }

  // optional uint32 port_number = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->port_number(), target);
  }

  // optional uint32 p2p_group = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->p2p_group(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientSiteLicenseGetContentCacheInfoResponse)
  return target;
}

size_t CMsgClientSiteLicenseGetContentCacheInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientSiteLicenseGetContentCacheInfoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bool use_cache = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional uint32 ipv4_address = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ipv4_address());
    }

    // optional uint32 port_number = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port_number());
    }

    // optional uint32 p2p_group = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->p2p_group());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientSiteLicenseGetContentCacheInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientSiteLicenseGetContentCacheInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientSiteLicenseGetContentCacheInfoResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientSiteLicenseGetContentCacheInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientSiteLicenseGetContentCacheInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientSiteLicenseGetContentCacheInfoResponse)
    MergeFrom(*source);
  }
}

void CMsgClientSiteLicenseGetContentCacheInfoResponse::MergeFrom(const CMsgClientSiteLicenseGetContentCacheInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientSiteLicenseGetContentCacheInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      use_cache_ = from.use_cache_;
    }
    if (cached_has_bits & 0x00000002u) {
      ipv4_address_ = from.ipv4_address_;
    }
    if (cached_has_bits & 0x00000004u) {
      port_number_ = from.port_number_;
    }
    if (cached_has_bits & 0x00000008u) {
      p2p_group_ = from.p2p_group_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientSiteLicenseGetContentCacheInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientSiteLicenseGetContentCacheInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientSiteLicenseGetContentCacheInfoResponse::CopyFrom(const CMsgClientSiteLicenseGetContentCacheInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientSiteLicenseGetContentCacheInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientSiteLicenseGetContentCacheInfoResponse::IsInitialized() const {
  return true;
}

void CMsgClientSiteLicenseGetContentCacheInfoResponse::Swap(CMsgClientSiteLicenseGetContentCacheInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientSiteLicenseGetContentCacheInfoResponse::InternalSwap(CMsgClientSiteLicenseGetContentCacheInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(use_cache_, other->use_cache_);
  swap(ipv4_address_, other->ipv4_address_);
  swap(port_number_, other->port_number_);
  swap(p2p_group_, other->p2p_group_);
}

::google::protobuf::Metadata CMsgClientSiteLicenseGetContentCacheInfoResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fsitelicenseclient_2eproto);
  return ::file_level_metadata_steammessages_5fsitelicenseclient_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace steam
}  // namespace proto
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientSiteInfo* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientSiteInfo >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientSiteInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientSiteLicenseCheckout* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientSiteLicenseCheckout >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientSiteLicenseCheckout >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientSiteLicenseCheckoutResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientSiteLicenseCheckoutResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientSiteLicenseCheckoutResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientSiteLicenseGetAvailableSeats* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientSiteLicenseGetAvailableSeats >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientSiteLicenseGetAvailableSeats >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientSiteLicenseGetAvailableSeatsResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientSiteLicenseGetAvailableSeatsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientSiteLicenseGetAvailableSeatsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientSiteLicenseGetContentCacheInfo* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientSiteLicenseGetContentCacheInfo >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientSiteLicenseGetContentCacheInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientSiteLicenseGetContentCacheInfoResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientSiteLicenseGetContentCacheInfoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientSiteLicenseGetContentCacheInfoResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
