// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_useraccount.steamclient.proto

#include "steammessages_useraccount.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fuseraccount_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response_steammessages_5fuseraccount_2esteamclient_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fuseraccount_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CUserAccount_CreateFriendInviteToken_Response_steammessages_5fuseraccount_2esteamclient_2eproto;
namespace proto {
namespace steam {
class CUserAccount_GetAccountLinkStatus_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserAccount_GetAccountLinkStatus_Request> _instance;
} _CUserAccount_GetAccountLinkStatus_Request_default_instance_;
class CUserAccount_GetAccountLinkStatus_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserAccount_GetAccountLinkStatus_Response> _instance;
} _CUserAccount_GetAccountLinkStatus_Response_default_instance_;
class CUserAccount_CreateFriendInviteToken_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserAccount_CreateFriendInviteToken_Request> _instance;
} _CUserAccount_CreateFriendInviteToken_Request_default_instance_;
class CUserAccount_CreateFriendInviteToken_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserAccount_CreateFriendInviteToken_Response> _instance;
} _CUserAccount_CreateFriendInviteToken_Response_default_instance_;
class CUserAccount_GetFriendInviteTokens_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserAccount_GetFriendInviteTokens_Request> _instance;
} _CUserAccount_GetFriendInviteTokens_Request_default_instance_;
class CUserAccount_GetFriendInviteTokens_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserAccount_GetFriendInviteTokens_Response> _instance;
} _CUserAccount_GetFriendInviteTokens_Response_default_instance_;
class CUserAccount_RevokeFriendInviteToken_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserAccount_RevokeFriendInviteToken_Request> _instance;
} _CUserAccount_RevokeFriendInviteToken_Request_default_instance_;
class CUserAccount_RevokeFriendInviteToken_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserAccount_RevokeFriendInviteToken_Response> _instance;
} _CUserAccount_RevokeFriendInviteToken_Response_default_instance_;
class CUserAccount_RegisterCompatTool_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserAccount_RegisterCompatTool_Request> _instance;
} _CUserAccount_RegisterCompatTool_Request_default_instance_;
class CUserAccount_RegisterCompatTool_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserAccount_RegisterCompatTool_Response> _instance;
} _CUserAccount_RegisterCompatTool_Response_default_instance_;
class CAccountLinking_GetLinkedAccountInfo_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CAccountLinking_GetLinkedAccountInfo_Request> _instance;
} _CAccountLinking_GetLinkedAccountInfo_Request_default_instance_;
class CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response> _instance;
} _CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response_default_instance_;
class CAccountLinking_GetLinkedAccountInfo_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CAccountLinking_GetLinkedAccountInfo_Response> _instance;
} _CAccountLinking_GetLinkedAccountInfo_Response_default_instance_;
}  // namespace steam
}  // namespace proto
static void InitDefaultsCUserAccount_GetAccountLinkStatus_Request_steammessages_5fuseraccount_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CUserAccount_GetAccountLinkStatus_Request_default_instance_;
    new (ptr) ::proto::steam::CUserAccount_GetAccountLinkStatus_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CUserAccount_GetAccountLinkStatus_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CUserAccount_GetAccountLinkStatus_Request_steammessages_5fuseraccount_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCUserAccount_GetAccountLinkStatus_Request_steammessages_5fuseraccount_2esteamclient_2eproto}, {}};

static void InitDefaultsCUserAccount_GetAccountLinkStatus_Response_steammessages_5fuseraccount_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CUserAccount_GetAccountLinkStatus_Response_default_instance_;
    new (ptr) ::proto::steam::CUserAccount_GetAccountLinkStatus_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CUserAccount_GetAccountLinkStatus_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CUserAccount_GetAccountLinkStatus_Response_steammessages_5fuseraccount_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCUserAccount_GetAccountLinkStatus_Response_steammessages_5fuseraccount_2esteamclient_2eproto}, {}};

static void InitDefaultsCUserAccount_CreateFriendInviteToken_Request_steammessages_5fuseraccount_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CUserAccount_CreateFriendInviteToken_Request_default_instance_;
    new (ptr) ::proto::steam::CUserAccount_CreateFriendInviteToken_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CUserAccount_CreateFriendInviteToken_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CUserAccount_CreateFriendInviteToken_Request_steammessages_5fuseraccount_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCUserAccount_CreateFriendInviteToken_Request_steammessages_5fuseraccount_2esteamclient_2eproto}, {}};

static void InitDefaultsCUserAccount_CreateFriendInviteToken_Response_steammessages_5fuseraccount_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CUserAccount_CreateFriendInviteToken_Response_default_instance_;
    new (ptr) ::proto::steam::CUserAccount_CreateFriendInviteToken_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CUserAccount_CreateFriendInviteToken_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CUserAccount_CreateFriendInviteToken_Response_steammessages_5fuseraccount_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCUserAccount_CreateFriendInviteToken_Response_steammessages_5fuseraccount_2esteamclient_2eproto}, {}};

static void InitDefaultsCUserAccount_GetFriendInviteTokens_Request_steammessages_5fuseraccount_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CUserAccount_GetFriendInviteTokens_Request_default_instance_;
    new (ptr) ::proto::steam::CUserAccount_GetFriendInviteTokens_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CUserAccount_GetFriendInviteTokens_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CUserAccount_GetFriendInviteTokens_Request_steammessages_5fuseraccount_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCUserAccount_GetFriendInviteTokens_Request_steammessages_5fuseraccount_2esteamclient_2eproto}, {}};

static void InitDefaultsCUserAccount_GetFriendInviteTokens_Response_steammessages_5fuseraccount_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CUserAccount_GetFriendInviteTokens_Response_default_instance_;
    new (ptr) ::proto::steam::CUserAccount_GetFriendInviteTokens_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CUserAccount_GetFriendInviteTokens_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CUserAccount_GetFriendInviteTokens_Response_steammessages_5fuseraccount_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCUserAccount_GetFriendInviteTokens_Response_steammessages_5fuseraccount_2esteamclient_2eproto}, {
      &scc_info_CUserAccount_CreateFriendInviteToken_Response_steammessages_5fuseraccount_2esteamclient_2eproto.base,}};

static void InitDefaultsCUserAccount_RevokeFriendInviteToken_Request_steammessages_5fuseraccount_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CUserAccount_RevokeFriendInviteToken_Request_default_instance_;
    new (ptr) ::proto::steam::CUserAccount_RevokeFriendInviteToken_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CUserAccount_RevokeFriendInviteToken_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CUserAccount_RevokeFriendInviteToken_Request_steammessages_5fuseraccount_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCUserAccount_RevokeFriendInviteToken_Request_steammessages_5fuseraccount_2esteamclient_2eproto}, {}};

static void InitDefaultsCUserAccount_RevokeFriendInviteToken_Response_steammessages_5fuseraccount_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CUserAccount_RevokeFriendInviteToken_Response_default_instance_;
    new (ptr) ::proto::steam::CUserAccount_RevokeFriendInviteToken_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CUserAccount_RevokeFriendInviteToken_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CUserAccount_RevokeFriendInviteToken_Response_steammessages_5fuseraccount_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCUserAccount_RevokeFriendInviteToken_Response_steammessages_5fuseraccount_2esteamclient_2eproto}, {}};

static void InitDefaultsCUserAccount_RegisterCompatTool_Request_steammessages_5fuseraccount_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CUserAccount_RegisterCompatTool_Request_default_instance_;
    new (ptr) ::proto::steam::CUserAccount_RegisterCompatTool_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CUserAccount_RegisterCompatTool_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CUserAccount_RegisterCompatTool_Request_steammessages_5fuseraccount_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCUserAccount_RegisterCompatTool_Request_steammessages_5fuseraccount_2esteamclient_2eproto}, {}};

static void InitDefaultsCUserAccount_RegisterCompatTool_Response_steammessages_5fuseraccount_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CUserAccount_RegisterCompatTool_Response_default_instance_;
    new (ptr) ::proto::steam::CUserAccount_RegisterCompatTool_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CUserAccount_RegisterCompatTool_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CUserAccount_RegisterCompatTool_Response_steammessages_5fuseraccount_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCUserAccount_RegisterCompatTool_Response_steammessages_5fuseraccount_2esteamclient_2eproto}, {}};

static void InitDefaultsCAccountLinking_GetLinkedAccountInfo_Request_steammessages_5fuseraccount_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CAccountLinking_GetLinkedAccountInfo_Request_default_instance_;
    new (ptr) ::proto::steam::CAccountLinking_GetLinkedAccountInfo_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CAccountLinking_GetLinkedAccountInfo_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CAccountLinking_GetLinkedAccountInfo_Request_steammessages_5fuseraccount_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCAccountLinking_GetLinkedAccountInfo_Request_steammessages_5fuseraccount_2esteamclient_2eproto}, {}};

static void InitDefaultsCAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response_steammessages_5fuseraccount_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response_default_instance_;
    new (ptr) ::proto::steam::CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response_steammessages_5fuseraccount_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response_steammessages_5fuseraccount_2esteamclient_2eproto}, {}};

static void InitDefaultsCAccountLinking_GetLinkedAccountInfo_Response_steammessages_5fuseraccount_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CAccountLinking_GetLinkedAccountInfo_Response_default_instance_;
    new (ptr) ::proto::steam::CAccountLinking_GetLinkedAccountInfo_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CAccountLinking_GetLinkedAccountInfo_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CAccountLinking_GetLinkedAccountInfo_Response_steammessages_5fuseraccount_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCAccountLinking_GetLinkedAccountInfo_Response_steammessages_5fuseraccount_2esteamclient_2eproto}, {
      &scc_info_CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response_steammessages_5fuseraccount_2esteamclient_2eproto.base,}};

void InitDefaults_steammessages_5fuseraccount_2esteamclient_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_CUserAccount_GetAccountLinkStatus_Request_steammessages_5fuseraccount_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CUserAccount_GetAccountLinkStatus_Response_steammessages_5fuseraccount_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CUserAccount_CreateFriendInviteToken_Request_steammessages_5fuseraccount_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CUserAccount_CreateFriendInviteToken_Response_steammessages_5fuseraccount_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CUserAccount_GetFriendInviteTokens_Request_steammessages_5fuseraccount_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CUserAccount_GetFriendInviteTokens_Response_steammessages_5fuseraccount_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CUserAccount_RevokeFriendInviteToken_Request_steammessages_5fuseraccount_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CUserAccount_RevokeFriendInviteToken_Response_steammessages_5fuseraccount_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CUserAccount_RegisterCompatTool_Request_steammessages_5fuseraccount_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CUserAccount_RegisterCompatTool_Response_steammessages_5fuseraccount_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CAccountLinking_GetLinkedAccountInfo_Request_steammessages_5fuseraccount_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response_steammessages_5fuseraccount_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CAccountLinking_GetLinkedAccountInfo_Response_steammessages_5fuseraccount_2esteamclient_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_steammessages_5fuseraccount_2esteamclient_2eproto[13];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_steammessages_5fuseraccount_2esteamclient_2eproto[2];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors_steammessages_5fuseraccount_2esteamclient_2eproto[2];

const ::google::protobuf::uint32 TableStruct_steammessages_5fuseraccount_2esteamclient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::proto::steam::CUserAccount_GetAccountLinkStatus_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CUserAccount_GetAccountLinkStatus_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CUserAccount_GetAccountLinkStatus_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CUserAccount_GetAccountLinkStatus_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CUserAccount_GetAccountLinkStatus_Response, pwid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CUserAccount_GetAccountLinkStatus_Response, identity_verification_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CUserAccount_CreateFriendInviteToken_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CUserAccount_CreateFriendInviteToken_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CUserAccount_CreateFriendInviteToken_Request, invite_limit_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CUserAccount_CreateFriendInviteToken_Request, invite_duration_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CUserAccount_CreateFriendInviteToken_Request, invite_note_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CUserAccount_CreateFriendInviteToken_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CUserAccount_CreateFriendInviteToken_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CUserAccount_CreateFriendInviteToken_Response, invite_token_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CUserAccount_CreateFriendInviteToken_Response, invite_limit_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CUserAccount_CreateFriendInviteToken_Response, invite_duration_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CUserAccount_CreateFriendInviteToken_Response, time_created_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CUserAccount_CreateFriendInviteToken_Response, valid_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CUserAccount_GetFriendInviteTokens_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CUserAccount_GetFriendInviteTokens_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CUserAccount_GetFriendInviteTokens_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CUserAccount_GetFriendInviteTokens_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CUserAccount_GetFriendInviteTokens_Response, tokens_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CUserAccount_RevokeFriendInviteToken_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CUserAccount_RevokeFriendInviteToken_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CUserAccount_RevokeFriendInviteToken_Request, invite_token_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CUserAccount_RevokeFriendInviteToken_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CUserAccount_RevokeFriendInviteToken_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CUserAccount_RegisterCompatTool_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CUserAccount_RegisterCompatTool_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CUserAccount_RegisterCompatTool_Request, compat_tool_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CUserAccount_RegisterCompatTool_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CUserAccount_RegisterCompatTool_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CAccountLinking_GetLinkedAccountInfo_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CAccountLinking_GetLinkedAccountInfo_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CAccountLinking_GetLinkedAccountInfo_Request, account_type_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CAccountLinking_GetLinkedAccountInfo_Request, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CAccountLinking_GetLinkedAccountInfo_Request, filter_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CAccountLinking_GetLinkedAccountInfo_Request, return_access_token_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response, external_type_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response, external_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response, external_user_name_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response, external_url_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response, access_token_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response, access_token_secret_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response, is_valid_),
  5,
  0,
  1,
  2,
  3,
  4,
  6,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CAccountLinking_GetLinkedAccountInfo_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CAccountLinking_GetLinkedAccountInfo_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CAccountLinking_GetLinkedAccountInfo_Response, external_accounts_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 5, sizeof(::proto::steam::CUserAccount_GetAccountLinkStatus_Request)},
  { 5, 12, sizeof(::proto::steam::CUserAccount_GetAccountLinkStatus_Response)},
  { 14, 22, sizeof(::proto::steam::CUserAccount_CreateFriendInviteToken_Request)},
  { 25, 35, sizeof(::proto::steam::CUserAccount_CreateFriendInviteToken_Response)},
  { 40, 45, sizeof(::proto::steam::CUserAccount_GetFriendInviteTokens_Request)},
  { 45, 51, sizeof(::proto::steam::CUserAccount_GetFriendInviteTokens_Response)},
  { 52, 58, sizeof(::proto::steam::CUserAccount_RevokeFriendInviteToken_Request)},
  { 59, 64, sizeof(::proto::steam::CUserAccount_RevokeFriendInviteToken_Response)},
  { 64, 70, sizeof(::proto::steam::CUserAccount_RegisterCompatTool_Request)},
  { 71, 76, sizeof(::proto::steam::CUserAccount_RegisterCompatTool_Response)},
  { 76, 85, sizeof(::proto::steam::CAccountLinking_GetLinkedAccountInfo_Request)},
  { 89, 101, sizeof(::proto::steam::CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response)},
  { 108, 114, sizeof(::proto::steam::CAccountLinking_GetLinkedAccountInfo_Response)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CUserAccount_GetAccountLinkStatus_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CUserAccount_GetAccountLinkStatus_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CUserAccount_CreateFriendInviteToken_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CUserAccount_CreateFriendInviteToken_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CUserAccount_GetFriendInviteTokens_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CUserAccount_GetFriendInviteTokens_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CUserAccount_RevokeFriendInviteToken_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CUserAccount_RevokeFriendInviteToken_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CUserAccount_RegisterCompatTool_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CUserAccount_RegisterCompatTool_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CAccountLinking_GetLinkedAccountInfo_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CAccountLinking_GetLinkedAccountInfo_Response_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_steammessages_5fuseraccount_2esteamclient_2eproto = {
  {}, AddDescriptors_steammessages_5fuseraccount_2esteamclient_2eproto, "steammessages_useraccount.steamclient.proto", schemas,
  file_default_instances, TableStruct_steammessages_5fuseraccount_2esteamclient_2eproto::offsets,
  file_level_metadata_steammessages_5fuseraccount_2esteamclient_2eproto, 13, file_level_enum_descriptors_steammessages_5fuseraccount_2esteamclient_2eproto, file_level_service_descriptors_steammessages_5fuseraccount_2esteamclient_2eproto,
};

const char descriptor_table_protodef_steammessages_5fuseraccount_2esteamclient_2eproto[] =
  "\n+steammessages_useraccount.steamclient."
  "proto\022\013proto.steam\032,steammessages_unifie"
  "d_base.steamclient.proto\"+\n)CUserAccount"
  "_GetAccountLinkStatus_Request\"Y\n*CUserAc"
  "count_GetAccountLinkStatus_Response\022\014\n\004p"
  "wid\030\001 \001(\r\022\035\n\025identity_verification\030\002 \001(\r"
  "\"r\n,CUserAccount_CreateFriendInviteToken"
  "_Request\022\024\n\014invite_limit\030\001 \001(\r\022\027\n\017invite"
  "_duration\030\002 \001(\r\022\023\n\013invite_note\030\003 \001(\t\"\231\001\n"
  "-CUserAccount_CreateFriendInviteToken_Re"
  "sponse\022\024\n\014invite_token\030\001 \001(\t\022\024\n\014invite_l"
  "imit\030\002 \001(\004\022\027\n\017invite_duration\030\003 \001(\004\022\024\n\014t"
  "ime_created\030\004 \001(\007\022\r\n\005valid\030\005 \001(\010\",\n*CUse"
  "rAccount_GetFriendInviteTokens_Request\"y"
  "\n+CUserAccount_GetFriendInviteTokens_Res"
  "ponse\022J\n\006tokens\030\001 \003(\0132:.proto.steam.CUse"
  "rAccount_CreateFriendInviteToken_Respons"
  "e\"D\n,CUserAccount_RevokeFriendInviteToke"
  "n_Request\022\024\n\014invite_token\030\001 \001(\t\"/\n-CUser"
  "Account_RevokeFriendInviteToken_Response"
  "\">\n\'CUserAccount_RegisterCompatTool_Requ"
  "est\022\023\n\013compat_tool\030\001 \001(\r\"*\n(CUserAccount"
  "_RegisterCompatTool_Response\"\265\003\n,CAccoun"
  "tLinking_GetLinkedAccountInfo_Request\022T\n"
  "\014account_type\030\001 \001(\0162!.proto.steam.EInter"
  "nalAccountType:\033k_EInternalSteamAccountT"
  "ype\022+\n\naccount_id\030\002 \001(\004B\027\202\265\030\023Internal ac"
  "count ID\022\200\001\n\006filter\030\003 \001(\0162!.proto.steam."
  "EExternalAccountType:\017k_EExternalNoneB<\202"
  "\265\0308if specified then only return this ex"
  "ternal account type\022\177\n\023return_access_tok"
  "en\030\004 \001(\010Bb\202\265\030^if provided and true, then"
  " returns valid access token if available"
  ". It may refresh the token. \"\243\006\n-CAccoun"
  "tLinking_GetLinkedAccountInfo_Response\022t"
  "\n\021external_accounts\030\001 \003(\0132Y.proto.steam."
  "CAccountLinking_GetLinkedAccountInfo_Res"
  "ponse.CExternalAccountTuple_Response\032\373\004\n"
  "\036CExternalAccountTuple_Response\022I\n\rexter"
  "nal_type\030\001 \001(\0162!.proto.steam.EExternalAc"
  "countType:\017k_EExternalNone\022;\n\013external_i"
  "d\030\002 \001(\tB&\202\265\030\"unique external account ide"
  "ntifier\022:\n\022external_user_name\030\003 \001(\tB\036\202\265\030"
  "\032user readable; best effort\022S\n\014external_"
  "url\030\004 \001(\tB=\202\265\0309required for all, can be "
  "a sentinal to verify correctness\022@\n\014acce"
  "ss_token\030\005 \001(\tB*\202\265\030&provided if requeest"
  " and it was valid.\022k\n\023access_token_secre"
  "t\030\006 \001(\tBN\202\265\030Jrequired for OAuth v1 and s"
  "igning the message, provided with access"
  " token.\022\220\001\n\010is_valid\030\007 \001(\010B~\202\265\030zIf false"
  ", it means access token no longer work ("
  "expired, disconnected) and the link is n"
  "ow broken. Inform user to refresh.*\215\001\n\024E"
  "InternalAccountType\022\037\n\033k_EInternalSteamA"
  "ccountType\020\001\022\027\n\023k_EInternalClanType\020\002\022\026\n"
  "\022k_EInternalAppType\020\003\022#\n\037k_EInternalBroa"
  "dcastChannelType\020\004*\206\002\n\024EExternalAccountT"
  "ype\022\023\n\017k_EExternalNone\020\000\022\033\n\027k_EExternalS"
  "teamAccount\020\001\022\034\n\030k_EExternalGoogleAccoun"
  "t\020\002\022\036\n\032k_EExternalFacebookAccount\020\003\022\035\n\031k"
  "_EExternalTwitterAccount\020\004\022\034\n\030k_EExterna"
  "lTwitchAccount\020\005\022$\n k_EExternalYouTubeCh"
  "annelAccount\020\006\022\033\n\027k_EExternalFacebookPag"
  "e\020\0072\362\007\n\013UserAccount\022\250\001\n\024GetAccountLinkSt"
  "atus\0226.proto.steam.CUserAccount_GetAccou"
  "ntLinkStatus_Request\0327.proto.steam.CUser"
  "Account_GetAccountLinkStatus_Response\"\037\202"
  "\265\030\033Fetches account link status\022\334\001\n\027Creat"
  "eFriendInviteToken\0229.proto.steam.CUserAc"
  "count_CreateFriendInviteToken_Request\032:."
  "proto.steam.CUserAccount_CreateFriendInv"
  "iteToken_Response\"J\202\265\030FCreate a limited-"
  "use token that can be used to create a f"
  "riend request\022\271\001\n\025GetFriendInviteTokens\022"
  "7.proto.steam.CUserAccount_GetFriendInvi"
  "teTokens_Request\0328.proto.steam.CUserAcco"
  "unt_GetFriendInviteTokens_Response\"-\202\265\030)"
  "Get the set of active tokens for the use"
  "r\022\272\001\n\027RevokeFriendInviteToken\0229.proto.st"
  "eam.CUserAccount_RevokeFriendInviteToken"
  "_Request\032:.proto.steam.CUserAccount_Revo"
  "keFriendInviteToken_Response\"(\202\265\030$Revoke"
  " an active friend invite token\022\260\001\n\022Regis"
  "terCompatTool\0224.proto.steam.CUserAccount"
  "_RegisterCompatTool_Request\0325.proto.stea"
  "m.CUserAccount_RegisterCompatTool_Respon"
  "se\"-\202\265\030)Register intended account usage "
  "of a tool\032-\202\265\030)A service to get user acc"
  "ount information2\265\002\n\016AccountLinking\022\353\001\n\024"
  "GetLinkedAccountInfo\0229.proto.steam.CAcco"
  "untLinking_GetLinkedAccountInfo_Request\032"
  ":.proto.steam.CAccountLinking_GetLinkedA"
  "ccountInfo_Response\"\\\202\265\030XList all my act"
  "ive linked external accounts; may be req"
  "uested to return the access token\0325\202\265\0301A"
  " service to manage and link to external "
  "accountsB\003\200\001\001"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_steammessages_5fuseraccount_2esteamclient_2eproto = {
  false, InitDefaults_steammessages_5fuseraccount_2esteamclient_2eproto, 
  descriptor_table_protodef_steammessages_5fuseraccount_2esteamclient_2eproto,
  "steammessages_useraccount.steamclient.proto", &assign_descriptors_table_steammessages_5fuseraccount_2esteamclient_2eproto, 3893,
};

void AddDescriptors_steammessages_5fuseraccount_2esteamclient_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_steammessages_5funified_5fbase_2esteamclient_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_steammessages_5fuseraccount_2esteamclient_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_steammessages_5fuseraccount_2esteamclient_2eproto = []() { AddDescriptors_steammessages_5fuseraccount_2esteamclient_2eproto(); return true; }();
namespace proto {
namespace steam {
const ::google::protobuf::EnumDescriptor* EInternalAccountType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_steammessages_5fuseraccount_2esteamclient_2eproto);
  return file_level_enum_descriptors_steammessages_5fuseraccount_2esteamclient_2eproto[0];
}
bool EInternalAccountType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EExternalAccountType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_steammessages_5fuseraccount_2esteamclient_2eproto);
  return file_level_enum_descriptors_steammessages_5fuseraccount_2esteamclient_2eproto[1];
}
bool EExternalAccountType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CUserAccount_GetAccountLinkStatus_Request::InitAsDefaultInstance() {
}
class CUserAccount_GetAccountLinkStatus_Request::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserAccount_GetAccountLinkStatus_Request::CUserAccount_GetAccountLinkStatus_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CUserAccount_GetAccountLinkStatus_Request)
}
CUserAccount_GetAccountLinkStatus_Request::CUserAccount_GetAccountLinkStatus_Request(const CUserAccount_GetAccountLinkStatus_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CUserAccount_GetAccountLinkStatus_Request)
}

void CUserAccount_GetAccountLinkStatus_Request::SharedCtor() {
}

CUserAccount_GetAccountLinkStatus_Request::~CUserAccount_GetAccountLinkStatus_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CUserAccount_GetAccountLinkStatus_Request)
  SharedDtor();
}

void CUserAccount_GetAccountLinkStatus_Request::SharedDtor() {
}

void CUserAccount_GetAccountLinkStatus_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserAccount_GetAccountLinkStatus_Request& CUserAccount_GetAccountLinkStatus_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CUserAccount_GetAccountLinkStatus_Request_steammessages_5fuseraccount_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CUserAccount_GetAccountLinkStatus_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CUserAccount_GetAccountLinkStatus_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CUserAccount_GetAccountLinkStatus_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CUserAccount_GetAccountLinkStatus_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CUserAccount_GetAccountLinkStatus_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CUserAccount_GetAccountLinkStatus_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CUserAccount_GetAccountLinkStatus_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CUserAccount_GetAccountLinkStatus_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CUserAccount_GetAccountLinkStatus_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CUserAccount_GetAccountLinkStatus_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CUserAccount_GetAccountLinkStatus_Request)
}

::google::protobuf::uint8* CUserAccount_GetAccountLinkStatus_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CUserAccount_GetAccountLinkStatus_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CUserAccount_GetAccountLinkStatus_Request)
  return target;
}

size_t CUserAccount_GetAccountLinkStatus_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CUserAccount_GetAccountLinkStatus_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserAccount_GetAccountLinkStatus_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CUserAccount_GetAccountLinkStatus_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserAccount_GetAccountLinkStatus_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CUserAccount_GetAccountLinkStatus_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CUserAccount_GetAccountLinkStatus_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CUserAccount_GetAccountLinkStatus_Request)
    MergeFrom(*source);
  }
}

void CUserAccount_GetAccountLinkStatus_Request::MergeFrom(const CUserAccount_GetAccountLinkStatus_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CUserAccount_GetAccountLinkStatus_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CUserAccount_GetAccountLinkStatus_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CUserAccount_GetAccountLinkStatus_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserAccount_GetAccountLinkStatus_Request::CopyFrom(const CUserAccount_GetAccountLinkStatus_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CUserAccount_GetAccountLinkStatus_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserAccount_GetAccountLinkStatus_Request::IsInitialized() const {
  return true;
}

void CUserAccount_GetAccountLinkStatus_Request::Swap(CUserAccount_GetAccountLinkStatus_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserAccount_GetAccountLinkStatus_Request::InternalSwap(CUserAccount_GetAccountLinkStatus_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CUserAccount_GetAccountLinkStatus_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fuseraccount_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fuseraccount_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CUserAccount_GetAccountLinkStatus_Response::InitAsDefaultInstance() {
}
class CUserAccount_GetAccountLinkStatus_Response::HasBitSetters {
 public:
  static void set_has_pwid(CUserAccount_GetAccountLinkStatus_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_identity_verification(CUserAccount_GetAccountLinkStatus_Response* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserAccount_GetAccountLinkStatus_Response::kPwidFieldNumber;
const int CUserAccount_GetAccountLinkStatus_Response::kIdentityVerificationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserAccount_GetAccountLinkStatus_Response::CUserAccount_GetAccountLinkStatus_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CUserAccount_GetAccountLinkStatus_Response)
}
CUserAccount_GetAccountLinkStatus_Response::CUserAccount_GetAccountLinkStatus_Response(const CUserAccount_GetAccountLinkStatus_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pwid_, &from.pwid_,
    static_cast<size_t>(reinterpret_cast<char*>(&identity_verification_) -
    reinterpret_cast<char*>(&pwid_)) + sizeof(identity_verification_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CUserAccount_GetAccountLinkStatus_Response)
}

void CUserAccount_GetAccountLinkStatus_Response::SharedCtor() {
  ::memset(&pwid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&identity_verification_) -
      reinterpret_cast<char*>(&pwid_)) + sizeof(identity_verification_));
}

CUserAccount_GetAccountLinkStatus_Response::~CUserAccount_GetAccountLinkStatus_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CUserAccount_GetAccountLinkStatus_Response)
  SharedDtor();
}

void CUserAccount_GetAccountLinkStatus_Response::SharedDtor() {
}

void CUserAccount_GetAccountLinkStatus_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserAccount_GetAccountLinkStatus_Response& CUserAccount_GetAccountLinkStatus_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CUserAccount_GetAccountLinkStatus_Response_steammessages_5fuseraccount_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CUserAccount_GetAccountLinkStatus_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CUserAccount_GetAccountLinkStatus_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&pwid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&identity_verification_) -
        reinterpret_cast<char*>(&pwid_)) + sizeof(identity_verification_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CUserAccount_GetAccountLinkStatus_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CUserAccount_GetAccountLinkStatus_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 pwid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_pwid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 identity_verification = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_identity_verification(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CUserAccount_GetAccountLinkStatus_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CUserAccount_GetAccountLinkStatus_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pwid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_pwid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pwid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 identity_verification = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_identity_verification(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &identity_verification_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CUserAccount_GetAccountLinkStatus_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CUserAccount_GetAccountLinkStatus_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CUserAccount_GetAccountLinkStatus_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CUserAccount_GetAccountLinkStatus_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pwid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pwid(), output);
  }

  // optional uint32 identity_verification = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->identity_verification(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CUserAccount_GetAccountLinkStatus_Response)
}

::google::protobuf::uint8* CUserAccount_GetAccountLinkStatus_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CUserAccount_GetAccountLinkStatus_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pwid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pwid(), target);
  }

  // optional uint32 identity_verification = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->identity_verification(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CUserAccount_GetAccountLinkStatus_Response)
  return target;
}

size_t CUserAccount_GetAccountLinkStatus_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CUserAccount_GetAccountLinkStatus_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 pwid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pwid());
    }

    // optional uint32 identity_verification = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->identity_verification());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserAccount_GetAccountLinkStatus_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CUserAccount_GetAccountLinkStatus_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserAccount_GetAccountLinkStatus_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CUserAccount_GetAccountLinkStatus_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CUserAccount_GetAccountLinkStatus_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CUserAccount_GetAccountLinkStatus_Response)
    MergeFrom(*source);
  }
}

void CUserAccount_GetAccountLinkStatus_Response::MergeFrom(const CUserAccount_GetAccountLinkStatus_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CUserAccount_GetAccountLinkStatus_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      pwid_ = from.pwid_;
    }
    if (cached_has_bits & 0x00000002u) {
      identity_verification_ = from.identity_verification_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserAccount_GetAccountLinkStatus_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CUserAccount_GetAccountLinkStatus_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserAccount_GetAccountLinkStatus_Response::CopyFrom(const CUserAccount_GetAccountLinkStatus_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CUserAccount_GetAccountLinkStatus_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserAccount_GetAccountLinkStatus_Response::IsInitialized() const {
  return true;
}

void CUserAccount_GetAccountLinkStatus_Response::Swap(CUserAccount_GetAccountLinkStatus_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserAccount_GetAccountLinkStatus_Response::InternalSwap(CUserAccount_GetAccountLinkStatus_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pwid_, other->pwid_);
  swap(identity_verification_, other->identity_verification_);
}

::google::protobuf::Metadata CUserAccount_GetAccountLinkStatus_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fuseraccount_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fuseraccount_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CUserAccount_CreateFriendInviteToken_Request::InitAsDefaultInstance() {
}
class CUserAccount_CreateFriendInviteToken_Request::HasBitSetters {
 public:
  static void set_has_invite_limit(CUserAccount_CreateFriendInviteToken_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_invite_duration(CUserAccount_CreateFriendInviteToken_Request* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_invite_note(CUserAccount_CreateFriendInviteToken_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserAccount_CreateFriendInviteToken_Request::kInviteLimitFieldNumber;
const int CUserAccount_CreateFriendInviteToken_Request::kInviteDurationFieldNumber;
const int CUserAccount_CreateFriendInviteToken_Request::kInviteNoteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserAccount_CreateFriendInviteToken_Request::CUserAccount_CreateFriendInviteToken_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CUserAccount_CreateFriendInviteToken_Request)
}
CUserAccount_CreateFriendInviteToken_Request::CUserAccount_CreateFriendInviteToken_Request(const CUserAccount_CreateFriendInviteToken_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  invite_note_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_invite_note()) {
    invite_note_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.invite_note_);
  }
  ::memcpy(&invite_limit_, &from.invite_limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&invite_duration_) -
    reinterpret_cast<char*>(&invite_limit_)) + sizeof(invite_duration_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CUserAccount_CreateFriendInviteToken_Request)
}

void CUserAccount_CreateFriendInviteToken_Request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CUserAccount_CreateFriendInviteToken_Request_steammessages_5fuseraccount_2esteamclient_2eproto.base);
  invite_note_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&invite_limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&invite_duration_) -
      reinterpret_cast<char*>(&invite_limit_)) + sizeof(invite_duration_));
}

CUserAccount_CreateFriendInviteToken_Request::~CUserAccount_CreateFriendInviteToken_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CUserAccount_CreateFriendInviteToken_Request)
  SharedDtor();
}

void CUserAccount_CreateFriendInviteToken_Request::SharedDtor() {
  invite_note_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CUserAccount_CreateFriendInviteToken_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserAccount_CreateFriendInviteToken_Request& CUserAccount_CreateFriendInviteToken_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CUserAccount_CreateFriendInviteToken_Request_steammessages_5fuseraccount_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CUserAccount_CreateFriendInviteToken_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CUserAccount_CreateFriendInviteToken_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    invite_note_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&invite_limit_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&invite_duration_) -
        reinterpret_cast<char*>(&invite_limit_)) + sizeof(invite_duration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CUserAccount_CreateFriendInviteToken_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CUserAccount_CreateFriendInviteToken_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 invite_limit = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_invite_limit(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 invite_duration = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_invite_duration(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string invite_note = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CUserAccount_CreateFriendInviteToken_Request.invite_note");
        object = msg->mutable_invite_note();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CUserAccount_CreateFriendInviteToken_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CUserAccount_CreateFriendInviteToken_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 invite_limit = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_invite_limit(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &invite_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 invite_duration = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_invite_duration(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &invite_duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string invite_note = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_invite_note()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->invite_note().data(), static_cast<int>(this->invite_note().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CUserAccount_CreateFriendInviteToken_Request.invite_note");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CUserAccount_CreateFriendInviteToken_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CUserAccount_CreateFriendInviteToken_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CUserAccount_CreateFriendInviteToken_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CUserAccount_CreateFriendInviteToken_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 invite_limit = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->invite_limit(), output);
  }

  // optional uint32 invite_duration = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->invite_duration(), output);
  }

  // optional string invite_note = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invite_note().data(), static_cast<int>(this->invite_note().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CUserAccount_CreateFriendInviteToken_Request.invite_note");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->invite_note(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CUserAccount_CreateFriendInviteToken_Request)
}

::google::protobuf::uint8* CUserAccount_CreateFriendInviteToken_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CUserAccount_CreateFriendInviteToken_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 invite_limit = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->invite_limit(), target);
  }

  // optional uint32 invite_duration = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->invite_duration(), target);
  }

  // optional string invite_note = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invite_note().data(), static_cast<int>(this->invite_note().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CUserAccount_CreateFriendInviteToken_Request.invite_note");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->invite_note(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CUserAccount_CreateFriendInviteToken_Request)
  return target;
}

size_t CUserAccount_CreateFriendInviteToken_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CUserAccount_CreateFriendInviteToken_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string invite_note = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->invite_note());
    }

    // optional uint32 invite_limit = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->invite_limit());
    }

    // optional uint32 invite_duration = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->invite_duration());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserAccount_CreateFriendInviteToken_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CUserAccount_CreateFriendInviteToken_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserAccount_CreateFriendInviteToken_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CUserAccount_CreateFriendInviteToken_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CUserAccount_CreateFriendInviteToken_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CUserAccount_CreateFriendInviteToken_Request)
    MergeFrom(*source);
  }
}

void CUserAccount_CreateFriendInviteToken_Request::MergeFrom(const CUserAccount_CreateFriendInviteToken_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CUserAccount_CreateFriendInviteToken_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      invite_note_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.invite_note_);
    }
    if (cached_has_bits & 0x00000002u) {
      invite_limit_ = from.invite_limit_;
    }
    if (cached_has_bits & 0x00000004u) {
      invite_duration_ = from.invite_duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserAccount_CreateFriendInviteToken_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CUserAccount_CreateFriendInviteToken_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserAccount_CreateFriendInviteToken_Request::CopyFrom(const CUserAccount_CreateFriendInviteToken_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CUserAccount_CreateFriendInviteToken_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserAccount_CreateFriendInviteToken_Request::IsInitialized() const {
  return true;
}

void CUserAccount_CreateFriendInviteToken_Request::Swap(CUserAccount_CreateFriendInviteToken_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserAccount_CreateFriendInviteToken_Request::InternalSwap(CUserAccount_CreateFriendInviteToken_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  invite_note_.Swap(&other->invite_note_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(invite_limit_, other->invite_limit_);
  swap(invite_duration_, other->invite_duration_);
}

::google::protobuf::Metadata CUserAccount_CreateFriendInviteToken_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fuseraccount_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fuseraccount_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CUserAccount_CreateFriendInviteToken_Response::InitAsDefaultInstance() {
}
class CUserAccount_CreateFriendInviteToken_Response::HasBitSetters {
 public:
  static void set_has_invite_token(CUserAccount_CreateFriendInviteToken_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_invite_limit(CUserAccount_CreateFriendInviteToken_Response* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_invite_duration(CUserAccount_CreateFriendInviteToken_Response* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_time_created(CUserAccount_CreateFriendInviteToken_Response* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_valid(CUserAccount_CreateFriendInviteToken_Response* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserAccount_CreateFriendInviteToken_Response::kInviteTokenFieldNumber;
const int CUserAccount_CreateFriendInviteToken_Response::kInviteLimitFieldNumber;
const int CUserAccount_CreateFriendInviteToken_Response::kInviteDurationFieldNumber;
const int CUserAccount_CreateFriendInviteToken_Response::kTimeCreatedFieldNumber;
const int CUserAccount_CreateFriendInviteToken_Response::kValidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserAccount_CreateFriendInviteToken_Response::CUserAccount_CreateFriendInviteToken_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CUserAccount_CreateFriendInviteToken_Response)
}
CUserAccount_CreateFriendInviteToken_Response::CUserAccount_CreateFriendInviteToken_Response(const CUserAccount_CreateFriendInviteToken_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  invite_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_invite_token()) {
    invite_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.invite_token_);
  }
  ::memcpy(&invite_limit_, &from.invite_limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&valid_) -
    reinterpret_cast<char*>(&invite_limit_)) + sizeof(valid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CUserAccount_CreateFriendInviteToken_Response)
}

void CUserAccount_CreateFriendInviteToken_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CUserAccount_CreateFriendInviteToken_Response_steammessages_5fuseraccount_2esteamclient_2eproto.base);
  invite_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&invite_limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&valid_) -
      reinterpret_cast<char*>(&invite_limit_)) + sizeof(valid_));
}

CUserAccount_CreateFriendInviteToken_Response::~CUserAccount_CreateFriendInviteToken_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CUserAccount_CreateFriendInviteToken_Response)
  SharedDtor();
}

void CUserAccount_CreateFriendInviteToken_Response::SharedDtor() {
  invite_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CUserAccount_CreateFriendInviteToken_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserAccount_CreateFriendInviteToken_Response& CUserAccount_CreateFriendInviteToken_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CUserAccount_CreateFriendInviteToken_Response_steammessages_5fuseraccount_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CUserAccount_CreateFriendInviteToken_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CUserAccount_CreateFriendInviteToken_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    invite_token_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&invite_limit_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&valid_) -
        reinterpret_cast<char*>(&invite_limit_)) + sizeof(valid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CUserAccount_CreateFriendInviteToken_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CUserAccount_CreateFriendInviteToken_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string invite_token = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CUserAccount_CreateFriendInviteToken_Response.invite_token");
        object = msg->mutable_invite_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint64 invite_limit = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_invite_limit(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 invite_duration = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_invite_duration(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed32 time_created = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 37) goto handle_unusual;
        msg->set_time_created(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional bool valid = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_valid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CUserAccount_CreateFriendInviteToken_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CUserAccount_CreateFriendInviteToken_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string invite_token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_invite_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->invite_token().data(), static_cast<int>(this->invite_token().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CUserAccount_CreateFriendInviteToken_Response.invite_token");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 invite_limit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_invite_limit(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &invite_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 invite_duration = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_invite_duration(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &invite_duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 time_created = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_time_created(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &time_created_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool valid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_valid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CUserAccount_CreateFriendInviteToken_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CUserAccount_CreateFriendInviteToken_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CUserAccount_CreateFriendInviteToken_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CUserAccount_CreateFriendInviteToken_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string invite_token = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invite_token().data(), static_cast<int>(this->invite_token().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CUserAccount_CreateFriendInviteToken_Response.invite_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->invite_token(), output);
  }

  // optional uint64 invite_limit = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->invite_limit(), output);
  }

  // optional uint64 invite_duration = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->invite_duration(), output);
  }

  // optional fixed32 time_created = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->time_created(), output);
  }

  // optional bool valid = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->valid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CUserAccount_CreateFriendInviteToken_Response)
}

::google::protobuf::uint8* CUserAccount_CreateFriendInviteToken_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CUserAccount_CreateFriendInviteToken_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string invite_token = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invite_token().data(), static_cast<int>(this->invite_token().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CUserAccount_CreateFriendInviteToken_Response.invite_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->invite_token(), target);
  }

  // optional uint64 invite_limit = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->invite_limit(), target);
  }

  // optional uint64 invite_duration = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->invite_duration(), target);
  }

  // optional fixed32 time_created = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->time_created(), target);
  }

  // optional bool valid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->valid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CUserAccount_CreateFriendInviteToken_Response)
  return target;
}

size_t CUserAccount_CreateFriendInviteToken_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CUserAccount_CreateFriendInviteToken_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string invite_token = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->invite_token());
    }

    // optional uint64 invite_limit = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->invite_limit());
    }

    // optional uint64 invite_duration = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->invite_duration());
    }

    // optional fixed32 time_created = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional bool valid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserAccount_CreateFriendInviteToken_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CUserAccount_CreateFriendInviteToken_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserAccount_CreateFriendInviteToken_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CUserAccount_CreateFriendInviteToken_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CUserAccount_CreateFriendInviteToken_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CUserAccount_CreateFriendInviteToken_Response)
    MergeFrom(*source);
  }
}

void CUserAccount_CreateFriendInviteToken_Response::MergeFrom(const CUserAccount_CreateFriendInviteToken_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CUserAccount_CreateFriendInviteToken_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      invite_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.invite_token_);
    }
    if (cached_has_bits & 0x00000002u) {
      invite_limit_ = from.invite_limit_;
    }
    if (cached_has_bits & 0x00000004u) {
      invite_duration_ = from.invite_duration_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_created_ = from.time_created_;
    }
    if (cached_has_bits & 0x00000010u) {
      valid_ = from.valid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserAccount_CreateFriendInviteToken_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CUserAccount_CreateFriendInviteToken_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserAccount_CreateFriendInviteToken_Response::CopyFrom(const CUserAccount_CreateFriendInviteToken_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CUserAccount_CreateFriendInviteToken_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserAccount_CreateFriendInviteToken_Response::IsInitialized() const {
  return true;
}

void CUserAccount_CreateFriendInviteToken_Response::Swap(CUserAccount_CreateFriendInviteToken_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserAccount_CreateFriendInviteToken_Response::InternalSwap(CUserAccount_CreateFriendInviteToken_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  invite_token_.Swap(&other->invite_token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(invite_limit_, other->invite_limit_);
  swap(invite_duration_, other->invite_duration_);
  swap(time_created_, other->time_created_);
  swap(valid_, other->valid_);
}

::google::protobuf::Metadata CUserAccount_CreateFriendInviteToken_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fuseraccount_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fuseraccount_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CUserAccount_GetFriendInviteTokens_Request::InitAsDefaultInstance() {
}
class CUserAccount_GetFriendInviteTokens_Request::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserAccount_GetFriendInviteTokens_Request::CUserAccount_GetFriendInviteTokens_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CUserAccount_GetFriendInviteTokens_Request)
}
CUserAccount_GetFriendInviteTokens_Request::CUserAccount_GetFriendInviteTokens_Request(const CUserAccount_GetFriendInviteTokens_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CUserAccount_GetFriendInviteTokens_Request)
}

void CUserAccount_GetFriendInviteTokens_Request::SharedCtor() {
}

CUserAccount_GetFriendInviteTokens_Request::~CUserAccount_GetFriendInviteTokens_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CUserAccount_GetFriendInviteTokens_Request)
  SharedDtor();
}

void CUserAccount_GetFriendInviteTokens_Request::SharedDtor() {
}

void CUserAccount_GetFriendInviteTokens_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserAccount_GetFriendInviteTokens_Request& CUserAccount_GetFriendInviteTokens_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CUserAccount_GetFriendInviteTokens_Request_steammessages_5fuseraccount_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CUserAccount_GetFriendInviteTokens_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CUserAccount_GetFriendInviteTokens_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CUserAccount_GetFriendInviteTokens_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CUserAccount_GetFriendInviteTokens_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CUserAccount_GetFriendInviteTokens_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CUserAccount_GetFriendInviteTokens_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CUserAccount_GetFriendInviteTokens_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CUserAccount_GetFriendInviteTokens_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CUserAccount_GetFriendInviteTokens_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CUserAccount_GetFriendInviteTokens_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CUserAccount_GetFriendInviteTokens_Request)
}

::google::protobuf::uint8* CUserAccount_GetFriendInviteTokens_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CUserAccount_GetFriendInviteTokens_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CUserAccount_GetFriendInviteTokens_Request)
  return target;
}

size_t CUserAccount_GetFriendInviteTokens_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CUserAccount_GetFriendInviteTokens_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserAccount_GetFriendInviteTokens_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CUserAccount_GetFriendInviteTokens_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserAccount_GetFriendInviteTokens_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CUserAccount_GetFriendInviteTokens_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CUserAccount_GetFriendInviteTokens_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CUserAccount_GetFriendInviteTokens_Request)
    MergeFrom(*source);
  }
}

void CUserAccount_GetFriendInviteTokens_Request::MergeFrom(const CUserAccount_GetFriendInviteTokens_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CUserAccount_GetFriendInviteTokens_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CUserAccount_GetFriendInviteTokens_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CUserAccount_GetFriendInviteTokens_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserAccount_GetFriendInviteTokens_Request::CopyFrom(const CUserAccount_GetFriendInviteTokens_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CUserAccount_GetFriendInviteTokens_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserAccount_GetFriendInviteTokens_Request::IsInitialized() const {
  return true;
}

void CUserAccount_GetFriendInviteTokens_Request::Swap(CUserAccount_GetFriendInviteTokens_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserAccount_GetFriendInviteTokens_Request::InternalSwap(CUserAccount_GetFriendInviteTokens_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CUserAccount_GetFriendInviteTokens_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fuseraccount_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fuseraccount_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CUserAccount_GetFriendInviteTokens_Response::InitAsDefaultInstance() {
}
class CUserAccount_GetFriendInviteTokens_Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserAccount_GetFriendInviteTokens_Response::kTokensFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserAccount_GetFriendInviteTokens_Response::CUserAccount_GetFriendInviteTokens_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CUserAccount_GetFriendInviteTokens_Response)
}
CUserAccount_GetFriendInviteTokens_Response::CUserAccount_GetFriendInviteTokens_Response(const CUserAccount_GetFriendInviteTokens_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      tokens_(from.tokens_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CUserAccount_GetFriendInviteTokens_Response)
}

void CUserAccount_GetFriendInviteTokens_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CUserAccount_GetFriendInviteTokens_Response_steammessages_5fuseraccount_2esteamclient_2eproto.base);
}

CUserAccount_GetFriendInviteTokens_Response::~CUserAccount_GetFriendInviteTokens_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CUserAccount_GetFriendInviteTokens_Response)
  SharedDtor();
}

void CUserAccount_GetFriendInviteTokens_Response::SharedDtor() {
}

void CUserAccount_GetFriendInviteTokens_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserAccount_GetFriendInviteTokens_Response& CUserAccount_GetFriendInviteTokens_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CUserAccount_GetFriendInviteTokens_Response_steammessages_5fuseraccount_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CUserAccount_GetFriendInviteTokens_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CUserAccount_GetFriendInviteTokens_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tokens_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CUserAccount_GetFriendInviteTokens_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CUserAccount_GetFriendInviteTokens_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.steam.CUserAccount_CreateFriendInviteToken_Response tokens = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CUserAccount_CreateFriendInviteToken_Response::_InternalParse;
          object = msg->add_tokens();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CUserAccount_GetFriendInviteTokens_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CUserAccount_GetFriendInviteTokens_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CUserAccount_CreateFriendInviteToken_Response tokens = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_tokens()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CUserAccount_GetFriendInviteTokens_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CUserAccount_GetFriendInviteTokens_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CUserAccount_GetFriendInviteTokens_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CUserAccount_GetFriendInviteTokens_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CUserAccount_CreateFriendInviteToken_Response tokens = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tokens_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->tokens(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CUserAccount_GetFriendInviteTokens_Response)
}

::google::protobuf::uint8* CUserAccount_GetFriendInviteTokens_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CUserAccount_GetFriendInviteTokens_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CUserAccount_CreateFriendInviteToken_Response tokens = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tokens_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->tokens(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CUserAccount_GetFriendInviteTokens_Response)
  return target;
}

size_t CUserAccount_GetFriendInviteTokens_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CUserAccount_GetFriendInviteTokens_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CUserAccount_CreateFriendInviteToken_Response tokens = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->tokens_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tokens(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserAccount_GetFriendInviteTokens_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CUserAccount_GetFriendInviteTokens_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserAccount_GetFriendInviteTokens_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CUserAccount_GetFriendInviteTokens_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CUserAccount_GetFriendInviteTokens_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CUserAccount_GetFriendInviteTokens_Response)
    MergeFrom(*source);
  }
}

void CUserAccount_GetFriendInviteTokens_Response::MergeFrom(const CUserAccount_GetFriendInviteTokens_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CUserAccount_GetFriendInviteTokens_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tokens_.MergeFrom(from.tokens_);
}

void CUserAccount_GetFriendInviteTokens_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CUserAccount_GetFriendInviteTokens_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserAccount_GetFriendInviteTokens_Response::CopyFrom(const CUserAccount_GetFriendInviteTokens_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CUserAccount_GetFriendInviteTokens_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserAccount_GetFriendInviteTokens_Response::IsInitialized() const {
  return true;
}

void CUserAccount_GetFriendInviteTokens_Response::Swap(CUserAccount_GetFriendInviteTokens_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserAccount_GetFriendInviteTokens_Response::InternalSwap(CUserAccount_GetFriendInviteTokens_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&tokens_)->InternalSwap(CastToBase(&other->tokens_));
}

::google::protobuf::Metadata CUserAccount_GetFriendInviteTokens_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fuseraccount_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fuseraccount_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CUserAccount_RevokeFriendInviteToken_Request::InitAsDefaultInstance() {
}
class CUserAccount_RevokeFriendInviteToken_Request::HasBitSetters {
 public:
  static void set_has_invite_token(CUserAccount_RevokeFriendInviteToken_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserAccount_RevokeFriendInviteToken_Request::kInviteTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserAccount_RevokeFriendInviteToken_Request::CUserAccount_RevokeFriendInviteToken_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CUserAccount_RevokeFriendInviteToken_Request)
}
CUserAccount_RevokeFriendInviteToken_Request::CUserAccount_RevokeFriendInviteToken_Request(const CUserAccount_RevokeFriendInviteToken_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  invite_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_invite_token()) {
    invite_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.invite_token_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CUserAccount_RevokeFriendInviteToken_Request)
}

void CUserAccount_RevokeFriendInviteToken_Request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CUserAccount_RevokeFriendInviteToken_Request_steammessages_5fuseraccount_2esteamclient_2eproto.base);
  invite_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CUserAccount_RevokeFriendInviteToken_Request::~CUserAccount_RevokeFriendInviteToken_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CUserAccount_RevokeFriendInviteToken_Request)
  SharedDtor();
}

void CUserAccount_RevokeFriendInviteToken_Request::SharedDtor() {
  invite_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CUserAccount_RevokeFriendInviteToken_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserAccount_RevokeFriendInviteToken_Request& CUserAccount_RevokeFriendInviteToken_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CUserAccount_RevokeFriendInviteToken_Request_steammessages_5fuseraccount_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CUserAccount_RevokeFriendInviteToken_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CUserAccount_RevokeFriendInviteToken_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    invite_token_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CUserAccount_RevokeFriendInviteToken_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CUserAccount_RevokeFriendInviteToken_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string invite_token = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CUserAccount_RevokeFriendInviteToken_Request.invite_token");
        object = msg->mutable_invite_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CUserAccount_RevokeFriendInviteToken_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CUserAccount_RevokeFriendInviteToken_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string invite_token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_invite_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->invite_token().data(), static_cast<int>(this->invite_token().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CUserAccount_RevokeFriendInviteToken_Request.invite_token");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CUserAccount_RevokeFriendInviteToken_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CUserAccount_RevokeFriendInviteToken_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CUserAccount_RevokeFriendInviteToken_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CUserAccount_RevokeFriendInviteToken_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string invite_token = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invite_token().data(), static_cast<int>(this->invite_token().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CUserAccount_RevokeFriendInviteToken_Request.invite_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->invite_token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CUserAccount_RevokeFriendInviteToken_Request)
}

::google::protobuf::uint8* CUserAccount_RevokeFriendInviteToken_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CUserAccount_RevokeFriendInviteToken_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string invite_token = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invite_token().data(), static_cast<int>(this->invite_token().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CUserAccount_RevokeFriendInviteToken_Request.invite_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->invite_token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CUserAccount_RevokeFriendInviteToken_Request)
  return target;
}

size_t CUserAccount_RevokeFriendInviteToken_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CUserAccount_RevokeFriendInviteToken_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string invite_token = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->invite_token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserAccount_RevokeFriendInviteToken_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CUserAccount_RevokeFriendInviteToken_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserAccount_RevokeFriendInviteToken_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CUserAccount_RevokeFriendInviteToken_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CUserAccount_RevokeFriendInviteToken_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CUserAccount_RevokeFriendInviteToken_Request)
    MergeFrom(*source);
  }
}

void CUserAccount_RevokeFriendInviteToken_Request::MergeFrom(const CUserAccount_RevokeFriendInviteToken_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CUserAccount_RevokeFriendInviteToken_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_invite_token()) {
    _has_bits_[0] |= 0x00000001u;
    invite_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.invite_token_);
  }
}

void CUserAccount_RevokeFriendInviteToken_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CUserAccount_RevokeFriendInviteToken_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserAccount_RevokeFriendInviteToken_Request::CopyFrom(const CUserAccount_RevokeFriendInviteToken_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CUserAccount_RevokeFriendInviteToken_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserAccount_RevokeFriendInviteToken_Request::IsInitialized() const {
  return true;
}

void CUserAccount_RevokeFriendInviteToken_Request::Swap(CUserAccount_RevokeFriendInviteToken_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserAccount_RevokeFriendInviteToken_Request::InternalSwap(CUserAccount_RevokeFriendInviteToken_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  invite_token_.Swap(&other->invite_token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CUserAccount_RevokeFriendInviteToken_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fuseraccount_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fuseraccount_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CUserAccount_RevokeFriendInviteToken_Response::InitAsDefaultInstance() {
}
class CUserAccount_RevokeFriendInviteToken_Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserAccount_RevokeFriendInviteToken_Response::CUserAccount_RevokeFriendInviteToken_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CUserAccount_RevokeFriendInviteToken_Response)
}
CUserAccount_RevokeFriendInviteToken_Response::CUserAccount_RevokeFriendInviteToken_Response(const CUserAccount_RevokeFriendInviteToken_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CUserAccount_RevokeFriendInviteToken_Response)
}

void CUserAccount_RevokeFriendInviteToken_Response::SharedCtor() {
}

CUserAccount_RevokeFriendInviteToken_Response::~CUserAccount_RevokeFriendInviteToken_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CUserAccount_RevokeFriendInviteToken_Response)
  SharedDtor();
}

void CUserAccount_RevokeFriendInviteToken_Response::SharedDtor() {
}

void CUserAccount_RevokeFriendInviteToken_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserAccount_RevokeFriendInviteToken_Response& CUserAccount_RevokeFriendInviteToken_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CUserAccount_RevokeFriendInviteToken_Response_steammessages_5fuseraccount_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CUserAccount_RevokeFriendInviteToken_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CUserAccount_RevokeFriendInviteToken_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CUserAccount_RevokeFriendInviteToken_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CUserAccount_RevokeFriendInviteToken_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CUserAccount_RevokeFriendInviteToken_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CUserAccount_RevokeFriendInviteToken_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CUserAccount_RevokeFriendInviteToken_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CUserAccount_RevokeFriendInviteToken_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CUserAccount_RevokeFriendInviteToken_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CUserAccount_RevokeFriendInviteToken_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CUserAccount_RevokeFriendInviteToken_Response)
}

::google::protobuf::uint8* CUserAccount_RevokeFriendInviteToken_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CUserAccount_RevokeFriendInviteToken_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CUserAccount_RevokeFriendInviteToken_Response)
  return target;
}

size_t CUserAccount_RevokeFriendInviteToken_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CUserAccount_RevokeFriendInviteToken_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserAccount_RevokeFriendInviteToken_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CUserAccount_RevokeFriendInviteToken_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserAccount_RevokeFriendInviteToken_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CUserAccount_RevokeFriendInviteToken_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CUserAccount_RevokeFriendInviteToken_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CUserAccount_RevokeFriendInviteToken_Response)
    MergeFrom(*source);
  }
}

void CUserAccount_RevokeFriendInviteToken_Response::MergeFrom(const CUserAccount_RevokeFriendInviteToken_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CUserAccount_RevokeFriendInviteToken_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CUserAccount_RevokeFriendInviteToken_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CUserAccount_RevokeFriendInviteToken_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserAccount_RevokeFriendInviteToken_Response::CopyFrom(const CUserAccount_RevokeFriendInviteToken_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CUserAccount_RevokeFriendInviteToken_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserAccount_RevokeFriendInviteToken_Response::IsInitialized() const {
  return true;
}

void CUserAccount_RevokeFriendInviteToken_Response::Swap(CUserAccount_RevokeFriendInviteToken_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserAccount_RevokeFriendInviteToken_Response::InternalSwap(CUserAccount_RevokeFriendInviteToken_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CUserAccount_RevokeFriendInviteToken_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fuseraccount_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fuseraccount_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CUserAccount_RegisterCompatTool_Request::InitAsDefaultInstance() {
}
class CUserAccount_RegisterCompatTool_Request::HasBitSetters {
 public:
  static void set_has_compat_tool(CUserAccount_RegisterCompatTool_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserAccount_RegisterCompatTool_Request::kCompatToolFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserAccount_RegisterCompatTool_Request::CUserAccount_RegisterCompatTool_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CUserAccount_RegisterCompatTool_Request)
}
CUserAccount_RegisterCompatTool_Request::CUserAccount_RegisterCompatTool_Request(const CUserAccount_RegisterCompatTool_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  compat_tool_ = from.compat_tool_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CUserAccount_RegisterCompatTool_Request)
}

void CUserAccount_RegisterCompatTool_Request::SharedCtor() {
  compat_tool_ = 0u;
}

CUserAccount_RegisterCompatTool_Request::~CUserAccount_RegisterCompatTool_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CUserAccount_RegisterCompatTool_Request)
  SharedDtor();
}

void CUserAccount_RegisterCompatTool_Request::SharedDtor() {
}

void CUserAccount_RegisterCompatTool_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserAccount_RegisterCompatTool_Request& CUserAccount_RegisterCompatTool_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CUserAccount_RegisterCompatTool_Request_steammessages_5fuseraccount_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CUserAccount_RegisterCompatTool_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CUserAccount_RegisterCompatTool_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  compat_tool_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CUserAccount_RegisterCompatTool_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CUserAccount_RegisterCompatTool_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 compat_tool = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_compat_tool(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CUserAccount_RegisterCompatTool_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CUserAccount_RegisterCompatTool_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 compat_tool = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_compat_tool(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &compat_tool_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CUserAccount_RegisterCompatTool_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CUserAccount_RegisterCompatTool_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CUserAccount_RegisterCompatTool_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CUserAccount_RegisterCompatTool_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 compat_tool = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->compat_tool(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CUserAccount_RegisterCompatTool_Request)
}

::google::protobuf::uint8* CUserAccount_RegisterCompatTool_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CUserAccount_RegisterCompatTool_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 compat_tool = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->compat_tool(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CUserAccount_RegisterCompatTool_Request)
  return target;
}

size_t CUserAccount_RegisterCompatTool_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CUserAccount_RegisterCompatTool_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 compat_tool = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->compat_tool());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserAccount_RegisterCompatTool_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CUserAccount_RegisterCompatTool_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserAccount_RegisterCompatTool_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CUserAccount_RegisterCompatTool_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CUserAccount_RegisterCompatTool_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CUserAccount_RegisterCompatTool_Request)
    MergeFrom(*source);
  }
}

void CUserAccount_RegisterCompatTool_Request::MergeFrom(const CUserAccount_RegisterCompatTool_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CUserAccount_RegisterCompatTool_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_compat_tool()) {
    set_compat_tool(from.compat_tool());
  }
}

void CUserAccount_RegisterCompatTool_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CUserAccount_RegisterCompatTool_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserAccount_RegisterCompatTool_Request::CopyFrom(const CUserAccount_RegisterCompatTool_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CUserAccount_RegisterCompatTool_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserAccount_RegisterCompatTool_Request::IsInitialized() const {
  return true;
}

void CUserAccount_RegisterCompatTool_Request::Swap(CUserAccount_RegisterCompatTool_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserAccount_RegisterCompatTool_Request::InternalSwap(CUserAccount_RegisterCompatTool_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(compat_tool_, other->compat_tool_);
}

::google::protobuf::Metadata CUserAccount_RegisterCompatTool_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fuseraccount_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fuseraccount_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CUserAccount_RegisterCompatTool_Response::InitAsDefaultInstance() {
}
class CUserAccount_RegisterCompatTool_Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserAccount_RegisterCompatTool_Response::CUserAccount_RegisterCompatTool_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CUserAccount_RegisterCompatTool_Response)
}
CUserAccount_RegisterCompatTool_Response::CUserAccount_RegisterCompatTool_Response(const CUserAccount_RegisterCompatTool_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CUserAccount_RegisterCompatTool_Response)
}

void CUserAccount_RegisterCompatTool_Response::SharedCtor() {
}

CUserAccount_RegisterCompatTool_Response::~CUserAccount_RegisterCompatTool_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CUserAccount_RegisterCompatTool_Response)
  SharedDtor();
}

void CUserAccount_RegisterCompatTool_Response::SharedDtor() {
}

void CUserAccount_RegisterCompatTool_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserAccount_RegisterCompatTool_Response& CUserAccount_RegisterCompatTool_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CUserAccount_RegisterCompatTool_Response_steammessages_5fuseraccount_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CUserAccount_RegisterCompatTool_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CUserAccount_RegisterCompatTool_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CUserAccount_RegisterCompatTool_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CUserAccount_RegisterCompatTool_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CUserAccount_RegisterCompatTool_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CUserAccount_RegisterCompatTool_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CUserAccount_RegisterCompatTool_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CUserAccount_RegisterCompatTool_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CUserAccount_RegisterCompatTool_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CUserAccount_RegisterCompatTool_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CUserAccount_RegisterCompatTool_Response)
}

::google::protobuf::uint8* CUserAccount_RegisterCompatTool_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CUserAccount_RegisterCompatTool_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CUserAccount_RegisterCompatTool_Response)
  return target;
}

size_t CUserAccount_RegisterCompatTool_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CUserAccount_RegisterCompatTool_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserAccount_RegisterCompatTool_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CUserAccount_RegisterCompatTool_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserAccount_RegisterCompatTool_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CUserAccount_RegisterCompatTool_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CUserAccount_RegisterCompatTool_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CUserAccount_RegisterCompatTool_Response)
    MergeFrom(*source);
  }
}

void CUserAccount_RegisterCompatTool_Response::MergeFrom(const CUserAccount_RegisterCompatTool_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CUserAccount_RegisterCompatTool_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CUserAccount_RegisterCompatTool_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CUserAccount_RegisterCompatTool_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserAccount_RegisterCompatTool_Response::CopyFrom(const CUserAccount_RegisterCompatTool_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CUserAccount_RegisterCompatTool_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserAccount_RegisterCompatTool_Response::IsInitialized() const {
  return true;
}

void CUserAccount_RegisterCompatTool_Response::Swap(CUserAccount_RegisterCompatTool_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserAccount_RegisterCompatTool_Response::InternalSwap(CUserAccount_RegisterCompatTool_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CUserAccount_RegisterCompatTool_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fuseraccount_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fuseraccount_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CAccountLinking_GetLinkedAccountInfo_Request::InitAsDefaultInstance() {
}
class CAccountLinking_GetLinkedAccountInfo_Request::HasBitSetters {
 public:
  static void set_has_account_type(CAccountLinking_GetLinkedAccountInfo_Request* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_account_id(CAccountLinking_GetLinkedAccountInfo_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_filter(CAccountLinking_GetLinkedAccountInfo_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_return_access_token(CAccountLinking_GetLinkedAccountInfo_Request* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CAccountLinking_GetLinkedAccountInfo_Request::kAccountTypeFieldNumber;
const int CAccountLinking_GetLinkedAccountInfo_Request::kAccountIdFieldNumber;
const int CAccountLinking_GetLinkedAccountInfo_Request::kFilterFieldNumber;
const int CAccountLinking_GetLinkedAccountInfo_Request::kReturnAccessTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CAccountLinking_GetLinkedAccountInfo_Request::CAccountLinking_GetLinkedAccountInfo_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CAccountLinking_GetLinkedAccountInfo_Request)
}
CAccountLinking_GetLinkedAccountInfo_Request::CAccountLinking_GetLinkedAccountInfo_Request(const CAccountLinking_GetLinkedAccountInfo_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&account_type_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(account_type_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CAccountLinking_GetLinkedAccountInfo_Request)
}

void CAccountLinking_GetLinkedAccountInfo_Request::SharedCtor() {
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&return_access_token_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(return_access_token_));
  account_type_ = 1;
}

CAccountLinking_GetLinkedAccountInfo_Request::~CAccountLinking_GetLinkedAccountInfo_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CAccountLinking_GetLinkedAccountInfo_Request)
  SharedDtor();
}

void CAccountLinking_GetLinkedAccountInfo_Request::SharedDtor() {
}

void CAccountLinking_GetLinkedAccountInfo_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CAccountLinking_GetLinkedAccountInfo_Request& CAccountLinking_GetLinkedAccountInfo_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CAccountLinking_GetLinkedAccountInfo_Request_steammessages_5fuseraccount_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CAccountLinking_GetLinkedAccountInfo_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CAccountLinking_GetLinkedAccountInfo_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&return_access_token_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(return_access_token_));
    account_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CAccountLinking_GetLinkedAccountInfo_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CAccountLinking_GetLinkedAccountInfo_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.steam.EInternalAccountType account_type = 1 [default = k_EInternalSteamAccountType];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::steam::EInternalAccountType_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_account_type(static_cast<::proto::steam::EInternalAccountType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 account_id = 2 [(.proto.steam.description) = "Internal account ID"];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.steam.EExternalAccountType filter = 3 [default = k_EExternalNone, (.proto.steam.description) = "if specified then only return this external account type"];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::steam::EExternalAccountType_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(3, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_filter(static_cast<::proto::steam::EExternalAccountType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool return_access_token = 4 [(.proto.steam.description) = "if provided and true, then returns valid access token if available. It may refresh the token. "];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_return_access_token(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CAccountLinking_GetLinkedAccountInfo_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CAccountLinking_GetLinkedAccountInfo_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.steam.EInternalAccountType account_type = 1 [default = k_EInternalSteamAccountType];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::steam::EInternalAccountType_IsValid(value)) {
            set_account_type(static_cast< ::proto::steam::EInternalAccountType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 account_id = 2 [(.proto.steam.description) = "Internal account ID"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.EExternalAccountType filter = 3 [default = k_EExternalNone, (.proto.steam.description) = "if specified then only return this external account type"];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::steam::EExternalAccountType_IsValid(value)) {
            set_filter(static_cast< ::proto::steam::EExternalAccountType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool return_access_token = 4 [(.proto.steam.description) = "if provided and true, then returns valid access token if available. It may refresh the token. "];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_return_access_token(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &return_access_token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CAccountLinking_GetLinkedAccountInfo_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CAccountLinking_GetLinkedAccountInfo_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CAccountLinking_GetLinkedAccountInfo_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CAccountLinking_GetLinkedAccountInfo_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.EInternalAccountType account_type = 1 [default = k_EInternalSteamAccountType];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->account_type(), output);
  }

  // optional uint64 account_id = 2 [(.proto.steam.description) = "Internal account ID"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->account_id(), output);
  }

  // optional .proto.steam.EExternalAccountType filter = 3 [default = k_EExternalNone, (.proto.steam.description) = "if specified then only return this external account type"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->filter(), output);
  }

  // optional bool return_access_token = 4 [(.proto.steam.description) = "if provided and true, then returns valid access token if available. It may refresh the token. "];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->return_access_token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CAccountLinking_GetLinkedAccountInfo_Request)
}

::google::protobuf::uint8* CAccountLinking_GetLinkedAccountInfo_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CAccountLinking_GetLinkedAccountInfo_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.EInternalAccountType account_type = 1 [default = k_EInternalSteamAccountType];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->account_type(), target);
  }

  // optional uint64 account_id = 2 [(.proto.steam.description) = "Internal account ID"];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->account_id(), target);
  }

  // optional .proto.steam.EExternalAccountType filter = 3 [default = k_EExternalNone, (.proto.steam.description) = "if specified then only return this external account type"];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->filter(), target);
  }

  // optional bool return_access_token = 4 [(.proto.steam.description) = "if provided and true, then returns valid access token if available. It may refresh the token. "];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->return_access_token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CAccountLinking_GetLinkedAccountInfo_Request)
  return target;
}

size_t CAccountLinking_GetLinkedAccountInfo_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CAccountLinking_GetLinkedAccountInfo_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 account_id = 2 [(.proto.steam.description) = "Internal account ID"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->account_id());
    }

    // optional .proto.steam.EExternalAccountType filter = 3 [default = k_EExternalNone, (.proto.steam.description) = "if specified then only return this external account type"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->filter());
    }

    // optional bool return_access_token = 4 [(.proto.steam.description) = "if provided and true, then returns valid access token if available. It may refresh the token. "];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional .proto.steam.EInternalAccountType account_type = 1 [default = k_EInternalSteamAccountType];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->account_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAccountLinking_GetLinkedAccountInfo_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CAccountLinking_GetLinkedAccountInfo_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CAccountLinking_GetLinkedAccountInfo_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CAccountLinking_GetLinkedAccountInfo_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CAccountLinking_GetLinkedAccountInfo_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CAccountLinking_GetLinkedAccountInfo_Request)
    MergeFrom(*source);
  }
}

void CAccountLinking_GetLinkedAccountInfo_Request::MergeFrom(const CAccountLinking_GetLinkedAccountInfo_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CAccountLinking_GetLinkedAccountInfo_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      filter_ = from.filter_;
    }
    if (cached_has_bits & 0x00000004u) {
      return_access_token_ = from.return_access_token_;
    }
    if (cached_has_bits & 0x00000008u) {
      account_type_ = from.account_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CAccountLinking_GetLinkedAccountInfo_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CAccountLinking_GetLinkedAccountInfo_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountLinking_GetLinkedAccountInfo_Request::CopyFrom(const CAccountLinking_GetLinkedAccountInfo_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CAccountLinking_GetLinkedAccountInfo_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountLinking_GetLinkedAccountInfo_Request::IsInitialized() const {
  return true;
}

void CAccountLinking_GetLinkedAccountInfo_Request::Swap(CAccountLinking_GetLinkedAccountInfo_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CAccountLinking_GetLinkedAccountInfo_Request::InternalSwap(CAccountLinking_GetLinkedAccountInfo_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(account_id_, other->account_id_);
  swap(filter_, other->filter_);
  swap(return_access_token_, other->return_access_token_);
  swap(account_type_, other->account_type_);
}

::google::protobuf::Metadata CAccountLinking_GetLinkedAccountInfo_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fuseraccount_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fuseraccount_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::InitAsDefaultInstance() {
}
class CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::HasBitSetters {
 public:
  static void set_has_external_type(CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_external_id(CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_external_user_name(CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_external_url(CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_access_token(CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_access_token_secret(CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_is_valid(CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::kExternalTypeFieldNumber;
const int CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::kExternalIdFieldNumber;
const int CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::kExternalUserNameFieldNumber;
const int CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::kExternalUrlFieldNumber;
const int CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::kAccessTokenFieldNumber;
const int CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::kAccessTokenSecretFieldNumber;
const int CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::kIsValidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response)
}
CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response(const CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  external_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_external_id()) {
    external_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.external_id_);
  }
  external_user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_external_user_name()) {
    external_user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.external_user_name_);
  }
  external_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_external_url()) {
    external_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.external_url_);
  }
  access_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_access_token()) {
    access_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.access_token_);
  }
  access_token_secret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_access_token_secret()) {
    access_token_secret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.access_token_secret_);
  }
  ::memcpy(&external_type_, &from.external_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_valid_) -
    reinterpret_cast<char*>(&external_type_)) + sizeof(is_valid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response)
}

void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response_steammessages_5fuseraccount_2esteamclient_2eproto.base);
  external_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  external_user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  external_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  access_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  access_token_secret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&external_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_valid_) -
      reinterpret_cast<char*>(&external_type_)) + sizeof(is_valid_));
}

CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::~CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response)
  SharedDtor();
}

void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::SharedDtor() {
  external_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  external_user_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  external_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  access_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  access_token_secret_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response& CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response_steammessages_5fuseraccount_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      external_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      external_user_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      external_url_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      access_token_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      access_token_secret_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000060u) {
    ::memset(&external_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_valid_) -
        reinterpret_cast<char*>(&external_type_)) + sizeof(is_valid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.steam.EExternalAccountType external_type = 1 [default = k_EExternalNone];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::steam::EExternalAccountType_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_external_type(static_cast<::proto::steam::EExternalAccountType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string external_id = 2 [(.proto.steam.description) = "unique external account identifier"];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.external_id");
        object = msg->mutable_external_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string external_user_name = 3 [(.proto.steam.description) = "user readable; best effort"];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.external_user_name");
        object = msg->mutable_external_user_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string external_url = 4 [(.proto.steam.description) = "required for all, can be a sentinal to verify correctness"];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.external_url");
        object = msg->mutable_external_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string access_token = 5 [(.proto.steam.description) = "provided if requeest and it was valid."];
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.access_token");
        object = msg->mutable_access_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string access_token_secret = 6 [(.proto.steam.description) = "required for OAuth v1 and signing the message, provided with access token."];
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.access_token_secret");
        object = msg->mutable_access_token_secret();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool is_valid = 7 [(.proto.steam.description) = "If false, it means access token no longer work (expired, disconnected) and the link is now broken. Inform user to refresh."];
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_is_valid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.steam.EExternalAccountType external_type = 1 [default = k_EExternalNone];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::steam::EExternalAccountType_IsValid(value)) {
            set_external_type(static_cast< ::proto::steam::EExternalAccountType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string external_id = 2 [(.proto.steam.description) = "unique external account identifier"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_external_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->external_id().data(), static_cast<int>(this->external_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.external_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string external_user_name = 3 [(.proto.steam.description) = "user readable; best effort"];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_external_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->external_user_name().data(), static_cast<int>(this->external_user_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.external_user_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string external_url = 4 [(.proto.steam.description) = "required for all, can be a sentinal to verify correctness"];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_external_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->external_url().data(), static_cast<int>(this->external_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.external_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string access_token = 5 [(.proto.steam.description) = "provided if requeest and it was valid."];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_access_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->access_token().data(), static_cast<int>(this->access_token().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.access_token");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string access_token_secret = 6 [(.proto.steam.description) = "required for OAuth v1 and signing the message, provided with access token."];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_access_token_secret()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->access_token_secret().data(), static_cast<int>(this->access_token_secret().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.access_token_secret");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_valid = 7 [(.proto.steam.description) = "If false, it means access token no longer work (expired, disconnected) and the link is now broken. Inform user to refresh."];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_is_valid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.EExternalAccountType external_type = 1 [default = k_EExternalNone];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->external_type(), output);
  }

  // optional string external_id = 2 [(.proto.steam.description) = "unique external account identifier"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->external_id().data(), static_cast<int>(this->external_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.external_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->external_id(), output);
  }

  // optional string external_user_name = 3 [(.proto.steam.description) = "user readable; best effort"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->external_user_name().data(), static_cast<int>(this->external_user_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.external_user_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->external_user_name(), output);
  }

  // optional string external_url = 4 [(.proto.steam.description) = "required for all, can be a sentinal to verify correctness"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->external_url().data(), static_cast<int>(this->external_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.external_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->external_url(), output);
  }

  // optional string access_token = 5 [(.proto.steam.description) = "provided if requeest and it was valid."];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), static_cast<int>(this->access_token().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.access_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->access_token(), output);
  }

  // optional string access_token_secret = 6 [(.proto.steam.description) = "required for OAuth v1 and signing the message, provided with access token."];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token_secret().data(), static_cast<int>(this->access_token_secret().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.access_token_secret");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->access_token_secret(), output);
  }

  // optional bool is_valid = 7 [(.proto.steam.description) = "If false, it means access token no longer work (expired, disconnected) and the link is now broken. Inform user to refresh."];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_valid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response)
}

::google::protobuf::uint8* CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.EExternalAccountType external_type = 1 [default = k_EExternalNone];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->external_type(), target);
  }

  // optional string external_id = 2 [(.proto.steam.description) = "unique external account identifier"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->external_id().data(), static_cast<int>(this->external_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.external_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->external_id(), target);
  }

  // optional string external_user_name = 3 [(.proto.steam.description) = "user readable; best effort"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->external_user_name().data(), static_cast<int>(this->external_user_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.external_user_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->external_user_name(), target);
  }

  // optional string external_url = 4 [(.proto.steam.description) = "required for all, can be a sentinal to verify correctness"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->external_url().data(), static_cast<int>(this->external_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.external_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->external_url(), target);
  }

  // optional string access_token = 5 [(.proto.steam.description) = "provided if requeest and it was valid."];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), static_cast<int>(this->access_token().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.access_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->access_token(), target);
  }

  // optional string access_token_secret = 6 [(.proto.steam.description) = "required for OAuth v1 and signing the message, provided with access token."];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token_secret().data(), static_cast<int>(this->access_token_secret().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.access_token_secret");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->access_token_secret(), target);
  }

  // optional bool is_valid = 7 [(.proto.steam.description) = "If false, it means access token no longer work (expired, disconnected) and the link is now broken. Inform user to refresh."];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_valid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response)
  return target;
}

size_t CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string external_id = 2 [(.proto.steam.description) = "unique external account identifier"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->external_id());
    }

    // optional string external_user_name = 3 [(.proto.steam.description) = "user readable; best effort"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->external_user_name());
    }

    // optional string external_url = 4 [(.proto.steam.description) = "required for all, can be a sentinal to verify correctness"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->external_url());
    }

    // optional string access_token = 5 [(.proto.steam.description) = "provided if requeest and it was valid."];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->access_token());
    }

    // optional string access_token_secret = 6 [(.proto.steam.description) = "required for OAuth v1 and signing the message, provided with access token."];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->access_token_secret());
    }

    // optional .proto.steam.EExternalAccountType external_type = 1 [default = k_EExternalNone];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->external_type());
    }

    // optional bool is_valid = 7 [(.proto.steam.description) = "If false, it means access token no longer work (expired, disconnected) and the link is now broken. Inform user to refresh."];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response)
    MergeFrom(*source);
  }
}

void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::MergeFrom(const CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      external_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.external_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      external_user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.external_user_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      external_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.external_url_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      access_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.access_token_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      access_token_secret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.access_token_secret_);
    }
    if (cached_has_bits & 0x00000020u) {
      external_type_ = from.external_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_valid_ = from.is_valid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::CopyFrom(const CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::IsInitialized() const {
  return true;
}

void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::Swap(CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::InternalSwap(CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  external_id_.Swap(&other->external_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  external_user_name_.Swap(&other->external_user_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  external_url_.Swap(&other->external_url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  access_token_.Swap(&other->access_token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  access_token_secret_.Swap(&other->access_token_secret_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(external_type_, other->external_type_);
  swap(is_valid_, other->is_valid_);
}

::google::protobuf::Metadata CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fuseraccount_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fuseraccount_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CAccountLinking_GetLinkedAccountInfo_Response::InitAsDefaultInstance() {
}
class CAccountLinking_GetLinkedAccountInfo_Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CAccountLinking_GetLinkedAccountInfo_Response::kExternalAccountsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CAccountLinking_GetLinkedAccountInfo_Response::CAccountLinking_GetLinkedAccountInfo_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response)
}
CAccountLinking_GetLinkedAccountInfo_Response::CAccountLinking_GetLinkedAccountInfo_Response(const CAccountLinking_GetLinkedAccountInfo_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      external_accounts_(from.external_accounts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response)
}

void CAccountLinking_GetLinkedAccountInfo_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CAccountLinking_GetLinkedAccountInfo_Response_steammessages_5fuseraccount_2esteamclient_2eproto.base);
}

CAccountLinking_GetLinkedAccountInfo_Response::~CAccountLinking_GetLinkedAccountInfo_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response)
  SharedDtor();
}

void CAccountLinking_GetLinkedAccountInfo_Response::SharedDtor() {
}

void CAccountLinking_GetLinkedAccountInfo_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CAccountLinking_GetLinkedAccountInfo_Response& CAccountLinking_GetLinkedAccountInfo_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CAccountLinking_GetLinkedAccountInfo_Response_steammessages_5fuseraccount_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CAccountLinking_GetLinkedAccountInfo_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  external_accounts_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CAccountLinking_GetLinkedAccountInfo_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CAccountLinking_GetLinkedAccountInfo_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response external_accounts = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::_InternalParse;
          object = msg->add_external_accounts();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CAccountLinking_GetLinkedAccountInfo_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response external_accounts = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_external_accounts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CAccountLinking_GetLinkedAccountInfo_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response external_accounts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->external_accounts_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->external_accounts(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response)
}

::google::protobuf::uint8* CAccountLinking_GetLinkedAccountInfo_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response external_accounts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->external_accounts_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->external_accounts(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response)
  return target;
}

size_t CAccountLinking_GetLinkedAccountInfo_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response external_accounts = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->external_accounts_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->external_accounts(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAccountLinking_GetLinkedAccountInfo_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CAccountLinking_GetLinkedAccountInfo_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CAccountLinking_GetLinkedAccountInfo_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response)
    MergeFrom(*source);
  }
}

void CAccountLinking_GetLinkedAccountInfo_Response::MergeFrom(const CAccountLinking_GetLinkedAccountInfo_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  external_accounts_.MergeFrom(from.external_accounts_);
}

void CAccountLinking_GetLinkedAccountInfo_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountLinking_GetLinkedAccountInfo_Response::CopyFrom(const CAccountLinking_GetLinkedAccountInfo_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountLinking_GetLinkedAccountInfo_Response::IsInitialized() const {
  return true;
}

void CAccountLinking_GetLinkedAccountInfo_Response::Swap(CAccountLinking_GetLinkedAccountInfo_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CAccountLinking_GetLinkedAccountInfo_Response::InternalSwap(CAccountLinking_GetLinkedAccountInfo_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&external_accounts_)->InternalSwap(CastToBase(&other->external_accounts_));
}

::google::protobuf::Metadata CAccountLinking_GetLinkedAccountInfo_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fuseraccount_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fuseraccount_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

UserAccount::~UserAccount() {}

const ::google::protobuf::ServiceDescriptor* UserAccount::descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_steammessages_5fuseraccount_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5fuseraccount_2esteamclient_2eproto[0];
}

const ::google::protobuf::ServiceDescriptor* UserAccount::GetDescriptor() {
  return descriptor();
}

void UserAccount::GetAccountLinkStatus(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CUserAccount_GetAccountLinkStatus_Request*,
                         ::proto::steam::CUserAccount_GetAccountLinkStatus_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetAccountLinkStatus() not implemented.");
  done->Run();
}

void UserAccount::CreateFriendInviteToken(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CUserAccount_CreateFriendInviteToken_Request*,
                         ::proto::steam::CUserAccount_CreateFriendInviteToken_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CreateFriendInviteToken() not implemented.");
  done->Run();
}

void UserAccount::GetFriendInviteTokens(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CUserAccount_GetFriendInviteTokens_Request*,
                         ::proto::steam::CUserAccount_GetFriendInviteTokens_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetFriendInviteTokens() not implemented.");
  done->Run();
}

void UserAccount::RevokeFriendInviteToken(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CUserAccount_RevokeFriendInviteToken_Request*,
                         ::proto::steam::CUserAccount_RevokeFriendInviteToken_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RevokeFriendInviteToken() not implemented.");
  done->Run();
}

void UserAccount::RegisterCompatTool(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CUserAccount_RegisterCompatTool_Request*,
                         ::proto::steam::CUserAccount_RegisterCompatTool_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RegisterCompatTool() not implemented.");
  done->Run();
}

void UserAccount::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5fuseraccount_2esteamclient_2eproto[0]);
  switch(method->index()) {
    case 0:
      GetAccountLinkStatus(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CUserAccount_GetAccountLinkStatus_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CUserAccount_GetAccountLinkStatus_Response*>(response),
             done);
      break;
    case 1:
      CreateFriendInviteToken(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CUserAccount_CreateFriendInviteToken_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CUserAccount_CreateFriendInviteToken_Response*>(response),
             done);
      break;
    case 2:
      GetFriendInviteTokens(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CUserAccount_GetFriendInviteTokens_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CUserAccount_GetFriendInviteTokens_Response*>(response),
             done);
      break;
    case 3:
      RevokeFriendInviteToken(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CUserAccount_RevokeFriendInviteToken_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CUserAccount_RevokeFriendInviteToken_Response*>(response),
             done);
      break;
    case 4:
      RegisterCompatTool(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CUserAccount_RegisterCompatTool_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CUserAccount_RegisterCompatTool_Response*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& UserAccount::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CUserAccount_GetAccountLinkStatus_Request::default_instance();
    case 1:
      return ::proto::steam::CUserAccount_CreateFriendInviteToken_Request::default_instance();
    case 2:
      return ::proto::steam::CUserAccount_GetFriendInviteTokens_Request::default_instance();
    case 3:
      return ::proto::steam::CUserAccount_RevokeFriendInviteToken_Request::default_instance();
    case 4:
      return ::proto::steam::CUserAccount_RegisterCompatTool_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& UserAccount::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CUserAccount_GetAccountLinkStatus_Response::default_instance();
    case 1:
      return ::proto::steam::CUserAccount_CreateFriendInviteToken_Response::default_instance();
    case 2:
      return ::proto::steam::CUserAccount_GetFriendInviteTokens_Response::default_instance();
    case 3:
      return ::proto::steam::CUserAccount_RevokeFriendInviteToken_Response::default_instance();
    case 4:
      return ::proto::steam::CUserAccount_RegisterCompatTool_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

UserAccount_Stub::UserAccount_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
UserAccount_Stub::UserAccount_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
UserAccount_Stub::~UserAccount_Stub() {
  if (owns_channel_) delete channel_;
}

void UserAccount_Stub::GetAccountLinkStatus(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CUserAccount_GetAccountLinkStatus_Request* request,
                              ::proto::steam::CUserAccount_GetAccountLinkStatus_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void UserAccount_Stub::CreateFriendInviteToken(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CUserAccount_CreateFriendInviteToken_Request* request,
                              ::proto::steam::CUserAccount_CreateFriendInviteToken_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void UserAccount_Stub::GetFriendInviteTokens(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CUserAccount_GetFriendInviteTokens_Request* request,
                              ::proto::steam::CUserAccount_GetFriendInviteTokens_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void UserAccount_Stub::RevokeFriendInviteToken(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CUserAccount_RevokeFriendInviteToken_Request* request,
                              ::proto::steam::CUserAccount_RevokeFriendInviteToken_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void UserAccount_Stub::RegisterCompatTool(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CUserAccount_RegisterCompatTool_Request* request,
                              ::proto::steam::CUserAccount_RegisterCompatTool_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
// ===================================================================

AccountLinking::~AccountLinking() {}

const ::google::protobuf::ServiceDescriptor* AccountLinking::descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_steammessages_5fuseraccount_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5fuseraccount_2esteamclient_2eproto[1];
}

const ::google::protobuf::ServiceDescriptor* AccountLinking::GetDescriptor() {
  return descriptor();
}

void AccountLinking::GetLinkedAccountInfo(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CAccountLinking_GetLinkedAccountInfo_Request*,
                         ::proto::steam::CAccountLinking_GetLinkedAccountInfo_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetLinkedAccountInfo() not implemented.");
  done->Run();
}

void AccountLinking::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5fuseraccount_2esteamclient_2eproto[1]);
  switch(method->index()) {
    case 0:
      GetLinkedAccountInfo(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CAccountLinking_GetLinkedAccountInfo_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CAccountLinking_GetLinkedAccountInfo_Response*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& AccountLinking::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CAccountLinking_GetLinkedAccountInfo_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& AccountLinking::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CAccountLinking_GetLinkedAccountInfo_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

AccountLinking_Stub::AccountLinking_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
AccountLinking_Stub::AccountLinking_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
AccountLinking_Stub::~AccountLinking_Stub() {
  if (owns_channel_) delete channel_;
}

void AccountLinking_Stub::GetLinkedAccountInfo(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CAccountLinking_GetLinkedAccountInfo_Request* request,
                              ::proto::steam::CAccountLinking_GetLinkedAccountInfo_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace steam
}  // namespace proto
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::proto::steam::CUserAccount_GetAccountLinkStatus_Request* Arena::CreateMaybeMessage< ::proto::steam::CUserAccount_GetAccountLinkStatus_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CUserAccount_GetAccountLinkStatus_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CUserAccount_GetAccountLinkStatus_Response* Arena::CreateMaybeMessage< ::proto::steam::CUserAccount_GetAccountLinkStatus_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CUserAccount_GetAccountLinkStatus_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CUserAccount_CreateFriendInviteToken_Request* Arena::CreateMaybeMessage< ::proto::steam::CUserAccount_CreateFriendInviteToken_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CUserAccount_CreateFriendInviteToken_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CUserAccount_CreateFriendInviteToken_Response* Arena::CreateMaybeMessage< ::proto::steam::CUserAccount_CreateFriendInviteToken_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CUserAccount_CreateFriendInviteToken_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CUserAccount_GetFriendInviteTokens_Request* Arena::CreateMaybeMessage< ::proto::steam::CUserAccount_GetFriendInviteTokens_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CUserAccount_GetFriendInviteTokens_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CUserAccount_GetFriendInviteTokens_Response* Arena::CreateMaybeMessage< ::proto::steam::CUserAccount_GetFriendInviteTokens_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CUserAccount_GetFriendInviteTokens_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CUserAccount_RevokeFriendInviteToken_Request* Arena::CreateMaybeMessage< ::proto::steam::CUserAccount_RevokeFriendInviteToken_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CUserAccount_RevokeFriendInviteToken_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CUserAccount_RevokeFriendInviteToken_Response* Arena::CreateMaybeMessage< ::proto::steam::CUserAccount_RevokeFriendInviteToken_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CUserAccount_RevokeFriendInviteToken_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CUserAccount_RegisterCompatTool_Request* Arena::CreateMaybeMessage< ::proto::steam::CUserAccount_RegisterCompatTool_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CUserAccount_RegisterCompatTool_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CUserAccount_RegisterCompatTool_Response* Arena::CreateMaybeMessage< ::proto::steam::CUserAccount_RegisterCompatTool_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CUserAccount_RegisterCompatTool_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CAccountLinking_GetLinkedAccountInfo_Request* Arena::CreateMaybeMessage< ::proto::steam::CAccountLinking_GetLinkedAccountInfo_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CAccountLinking_GetLinkedAccountInfo_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response* Arena::CreateMaybeMessage< ::proto::steam::CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CAccountLinking_GetLinkedAccountInfo_Response* Arena::CreateMaybeMessage< ::proto::steam::CAccountLinking_GetLinkedAccountInfo_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CAccountLinking_GetLinkedAccountInfo_Response >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
